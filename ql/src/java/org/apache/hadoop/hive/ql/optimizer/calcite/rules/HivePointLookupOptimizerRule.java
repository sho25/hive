begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleOperand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveBetween
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveIn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedHashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimaps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * This optimization attempts to identify and close expanded INs and BETWEENs  *  * Basically:  *<pre>  * (c) IN ( v1, v2, ...)&lt;=&gt; c1=v1 || c1=v2 || ...  *</pre>  * If c is struct; then c=v1 is a group of anded equations.  *  * Similarily  *<pre>  * v1&lt;= c1 and c1&lt;= v2  *</pre>  * is rewritten to<p>c1 between v1 and v2</p>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|HivePointLookupOptimizerRule
extends|extends
name|RelOptRule
block|{
comment|/** Rule adapter to apply the transformation to Filter conditions. */
specifier|public
specifier|static
class|class
name|FilterCondition
extends|extends
name|HivePointLookupOptimizerRule
block|{
specifier|public
name|FilterCondition
parameter_list|(
name|int
name|minNumORClauses
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Filter
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|minNumORClauses
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Filter
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|filter
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|condition
init|=
name|RexUtil
operator|.
name|pullFactors
argument_list|(
name|rexBuilder
argument_list|,
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
decl_stmt|;
name|RexNode
name|newCondition
init|=
name|analyzeRexNode
argument_list|(
name|rexBuilder
argument_list|,
name|condition
argument_list|)
decl_stmt|;
comment|// If we could not transform anything, we bail out
if|if
condition|(
name|newCondition
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|condition
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|RelNode
name|newNode
init|=
name|filter
operator|.
name|copy
argument_list|(
name|filter
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|filter
operator|.
name|getInput
argument_list|()
argument_list|,
name|newCondition
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Rule adapter to apply the transformation to Join conditions. */
specifier|public
specifier|static
class|class
name|JoinCondition
extends|extends
name|HivePointLookupOptimizerRule
block|{
specifier|public
name|JoinCondition
parameter_list|(
name|int
name|minNumORClauses
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Join
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|minNumORClauses
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|condition
init|=
name|RexUtil
operator|.
name|pullFactors
argument_list|(
name|rexBuilder
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|)
decl_stmt|;
name|RexNode
name|newCondition
init|=
name|analyzeRexNode
argument_list|(
name|rexBuilder
argument_list|,
name|condition
argument_list|)
decl_stmt|;
comment|// If we could not transform anything, we bail out
if|if
condition|(
name|newCondition
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|condition
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|RelNode
name|newNode
init|=
name|join
operator|.
name|copy
argument_list|(
name|join
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|newCondition
argument_list|,
name|join
operator|.
name|getLeft
argument_list|()
argument_list|,
name|join
operator|.
name|getRight
argument_list|()
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|join
operator|.
name|isSemiJoinDone
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Rule adapter to apply the transformation to Projections. */
specifier|public
specifier|static
class|class
name|ProjectionExpressions
extends|extends
name|HivePointLookupOptimizerRule
block|{
specifier|public
name|ProjectionExpressions
parameter_list|(
name|int
name|minNumORClauses
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|minNumORClauses
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|project
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|newProjects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|oldNode
range|:
name|project
operator|.
name|getProjects
argument_list|()
control|)
block|{
name|RexNode
name|newNode
init|=
name|analyzeRexNode
argument_list|(
name|rexBuilder
argument_list|,
name|oldNode
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newNode
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|oldNode
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|newProjects
operator|.
name|add
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newProjects
operator|.
name|add
argument_list|(
name|oldNode
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|changed
condition|)
block|{
return|return;
block|}
name|Project
name|newProject
init|=
name|project
operator|.
name|copy
argument_list|(
name|project
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|project
operator|.
name|getInput
argument_list|()
argument_list|,
name|newProjects
argument_list|,
name|project
operator|.
name|getRowType
argument_list|()
argument_list|,
name|project
operator|.
name|getFlags
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newProject
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HivePointLookupOptimizerRule
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Minimum number of OR clauses needed to transform into IN clauses
specifier|protected
specifier|final
name|int
name|minNumORClauses
decl_stmt|;
specifier|protected
name|HivePointLookupOptimizerRule
parameter_list|(
name|RelOptRuleOperand
name|operand
parameter_list|,
name|int
name|minNumORClauses
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|)
expr_stmt|;
name|this
operator|.
name|minNumORClauses
operator|=
name|minNumORClauses
expr_stmt|;
block|}
specifier|public
name|RexNode
name|analyzeRexNode
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
comment|// 1. We try to transform possible candidates
name|RexTransformIntoInClause
name|transformIntoInClause
init|=
operator|new
name|RexTransformIntoInClause
argument_list|(
name|rexBuilder
argument_list|,
name|minNumORClauses
argument_list|)
decl_stmt|;
name|RexNode
name|newCondition
init|=
name|transformIntoInClause
operator|.
name|apply
argument_list|(
name|condition
argument_list|)
decl_stmt|;
comment|// 2. We merge IN expressions
name|RexMergeInClause
name|mergeInClause
init|=
operator|new
name|RexMergeInClause
argument_list|(
name|rexBuilder
argument_list|)
decl_stmt|;
name|newCondition
operator|=
name|mergeInClause
operator|.
name|apply
argument_list|(
name|newCondition
argument_list|)
expr_stmt|;
comment|// 3. Close BETWEEN expressions if possible
name|RexTranformIntoBetween
name|t
init|=
operator|new
name|RexTranformIntoBetween
argument_list|(
name|rexBuilder
argument_list|)
decl_stmt|;
name|newCondition
operator|=
name|t
operator|.
name|apply
argument_list|(
name|newCondition
argument_list|)
expr_stmt|;
return|return
name|newCondition
return|;
block|}
comment|/**    * Transforms inequality candidates into [NOT] BETWEEN calls.    *    */
specifier|protected
specifier|static
class|class
name|RexTranformIntoBetween
extends|extends
name|RexShuttle
block|{
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|static
class|class
name|DiGraph
parameter_list|<
name|V
parameter_list|,
name|E
parameter_list|>
block|{
specifier|static
class|class
name|Edge
parameter_list|<
name|V
parameter_list|,
name|E
parameter_list|>
block|{
specifier|final
name|Node
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|s
decl_stmt|;
specifier|final
name|Node
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|t
decl_stmt|;
specifier|final
name|E
name|e
decl_stmt|;
specifier|public
name|Edge
parameter_list|(
name|Node
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|s
parameter_list|,
name|Node
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|t
parameter_list|,
name|E
name|e
parameter_list|)
block|{
name|this
operator|.
name|s
operator|=
name|s
expr_stmt|;
name|this
operator|.
name|t
operator|=
name|t
expr_stmt|;
name|this
operator|.
name|e
operator|=
name|e
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|Node
parameter_list|<
name|V
parameter_list|,
name|E
parameter_list|>
block|{
specifier|final
name|Set
argument_list|<
name|Edge
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
argument_list|>
name|edges
decl_stmt|;
specifier|final
name|V
name|v
decl_stmt|;
specifier|public
name|Node
parameter_list|(
name|V
name|v
parameter_list|)
block|{
name|edges
operator|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|v
operator|=
name|v
expr_stmt|;
block|}
specifier|public
name|void
name|addEdge
parameter_list|(
name|Edge
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|edge
parameter_list|)
block|{
name|edges
operator|.
name|add
argument_list|(
name|edge
argument_list|)
expr_stmt|;
block|}
specifier|public
name|E
name|removeEdge
parameter_list|(
name|V
name|s
parameter_list|,
name|V
name|t
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Edge
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
argument_list|>
name|it
init|=
name|edges
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Edge
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|edge
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|edge
operator|.
name|s
operator|.
name|v
operator|.
name|equals
argument_list|(
name|s
argument_list|)
operator|&&
name|edge
operator|.
name|t
operator|.
name|v
operator|.
name|equals
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
name|edge
operator|.
name|e
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|final
name|Map
argument_list|<
name|V
argument_list|,
name|Node
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
argument_list|>
name|nodes
decl_stmt|;
specifier|public
name|DiGraph
parameter_list|()
block|{
name|nodes
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|putEdgeValue
parameter_list|(
name|V
name|s
parameter_list|,
name|V
name|t
parameter_list|,
name|E
name|e
parameter_list|)
block|{
name|Node
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|nodeS
init|=
name|nodeOf
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|Node
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|nodeT
init|=
name|nodeOf
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|Edge
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|edge
init|=
operator|new
name|Edge
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
argument_list|(
name|nodeS
argument_list|,
name|nodeT
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|nodeS
operator|.
name|addEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|nodeT
operator|.
name|addEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Node
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|nodeOf
parameter_list|(
name|V
name|s
parameter_list|)
block|{
name|Node
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|nodes
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|node
operator|=
operator|new
name|Node
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|nodes
parameter_list|()
block|{
return|return
name|nodes
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|predecessors
parameter_list|(
name|V
name|n
parameter_list|)
block|{
name|Set
argument_list|<
name|V
argument_list|>
name|ret
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Node
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
for|for
control|(
name|Edge
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|edge
range|:
name|node
operator|.
name|edges
control|)
block|{
if|if
condition|(
name|edge
operator|.
name|t
operator|.
name|v
operator|.
name|equals
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|edge
operator|.
name|s
operator|.
name|v
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Set
argument_list|<
name|V
argument_list|>
name|successors
parameter_list|(
name|V
name|n
parameter_list|)
block|{
name|Set
argument_list|<
name|V
argument_list|>
name|ret
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Node
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
for|for
control|(
name|Edge
argument_list|<
name|V
argument_list|,
name|E
argument_list|>
name|edge
range|:
name|node
operator|.
name|edges
control|)
block|{
if|if
condition|(
name|edge
operator|.
name|s
operator|.
name|v
operator|.
name|equals
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|edge
operator|.
name|t
operator|.
name|v
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|E
name|removeEdge
parameter_list|(
name|V
name|s
parameter_list|,
name|V
name|t
parameter_list|)
block|{
name|nodeOf
argument_list|(
name|s
argument_list|)
operator|.
name|removeEdge
argument_list|(
name|s
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
name|nodeOf
argument_list|(
name|t
argument_list|)
operator|.
name|removeEdge
argument_list|(
name|s
argument_list|,
name|t
argument_list|)
return|;
block|}
block|}
name|RexTranformIntoBetween
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|)
block|{
name|this
operator|.
name|rexBuilder
operator|=
name|rexBuilder
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCall
parameter_list|(
name|RexCall
name|inputCall
parameter_list|)
block|{
name|RexNode
name|node
init|=
name|super
operator|.
name|visitCall
argument_list|(
name|inputCall
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|node
decl_stmt|;
switch|switch
condition|(
name|call
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|AND
case|:
return|return
name|processComparisions
argument_list|(
name|call
argument_list|,
name|SqlKind
operator|.
name|LESS_THAN_OR_EQUAL
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|OR
case|:
return|return
name|processComparisions
argument_list|(
name|call
argument_list|,
name|SqlKind
operator|.
name|GREATER_THAN
argument_list|,
literal|true
argument_list|)
return|;
default|default:
break|break;
block|}
block|}
return|return
name|node
return|;
block|}
comment|/**      * Represents a replacement candidate.      */
specifier|static
class|class
name|BetweenCandidate
block|{
specifier|private
specifier|final
name|RexNode
name|newNode
decl_stmt|;
specifier|private
specifier|final
name|RexNode
index|[]
name|oldNodes
decl_stmt|;
comment|// keeps track if this candidate was already used during replacement
specifier|private
name|boolean
name|used
decl_stmt|;
specifier|public
name|BetweenCandidate
parameter_list|(
name|RexNode
name|newNode
parameter_list|,
name|RexNode
modifier|...
name|oldNodes
parameter_list|)
block|{
name|this
operator|.
name|newNode
operator|=
name|newNode
expr_stmt|;
name|this
operator|.
name|oldNodes
operator|=
name|oldNodes
expr_stmt|;
block|}
block|}
specifier|private
name|RexNode
name|processComparisions
parameter_list|(
name|RexCall
name|call
parameter_list|,
name|SqlKind
name|forwardEdge
parameter_list|,
name|boolean
name|invert
parameter_list|)
block|{
name|DiGraph
argument_list|<
name|RexNodeRef
argument_list|,
name|RexCall
argument_list|>
name|g
init|=
name|buildComparisionGraph
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|,
name|forwardEdge
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|RexNode
argument_list|,
name|BetweenCandidate
argument_list|>
name|replacedNodes
init|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNodeRef
name|n
range|:
name|g
operator|.
name|nodes
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|RexNodeRef
argument_list|>
name|pred
init|=
name|g
operator|.
name|predecessors
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|RexNodeRef
argument_list|>
name|succ
init|=
name|g
operator|.
name|successors
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|pred
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|succ
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|RexNodeRef
name|p
init|=
name|pred
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|RexNodeRef
name|s
init|=
name|succ
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|RexNode
name|between
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|HiveBetween
operator|.
name|INSTANCE
argument_list|,
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|invert
argument_list|)
argument_list|,
name|n
operator|.
name|node
argument_list|,
name|p
operator|.
name|node
argument_list|,
name|s
operator|.
name|node
argument_list|)
decl_stmt|;
name|BetweenCandidate
name|bc
init|=
operator|new
name|BetweenCandidate
argument_list|(
name|between
argument_list|,
name|g
operator|.
name|removeEdge
argument_list|(
name|p
argument_list|,
name|n
argument_list|)
argument_list|,
name|g
operator|.
name|removeEdge
argument_list|(
name|n
argument_list|,
name|s
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|node
range|:
name|bc
operator|.
name|oldNodes
control|)
block|{
name|replacedNodes
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|bc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|replacedNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no effect
return|return
name|call
return|;
block|}
name|List
argument_list|<
name|RexNode
argument_list|>
name|newOperands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|o
range|:
name|call
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|BetweenCandidate
name|candidate
init|=
name|replacedNodes
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidate
operator|==
literal|null
condition|)
block|{
name|newOperands
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|candidate
operator|.
name|used
condition|)
block|{
name|newOperands
operator|.
name|add
argument_list|(
name|candidate
operator|.
name|newNode
argument_list|)
expr_stmt|;
name|candidate
operator|.
name|used
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|newOperands
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|newOperands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|call
operator|.
name|getOperator
argument_list|()
argument_list|,
name|newOperands
argument_list|)
return|;
block|}
block|}
comment|/**      * Builds a graph of the given comparision type.      *      * The graph edges are annotated with the RexNodes representing the comparision.      */
specifier|private
name|DiGraph
argument_list|<
name|RexNodeRef
argument_list|,
name|RexCall
argument_list|>
name|buildComparisionGraph
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|,
name|SqlKind
name|cmpForward
parameter_list|)
block|{
name|DiGraph
argument_list|<
name|RexNodeRef
argument_list|,
name|RexCall
argument_list|>
name|g
init|=
operator|new
name|DiGraph
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|node
range|:
name|operands
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|RexCall
operator|)
condition|)
block|{
continue|continue;
block|}
name|RexCall
name|rexCall
init|=
operator|(
name|RexCall
operator|)
name|node
decl_stmt|;
name|SqlKind
name|kind
init|=
name|rexCall
operator|.
name|getKind
argument_list|()
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|cmpForward
condition|)
block|{
name|RexNode
name|opA
init|=
name|rexCall
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RexNode
name|opB
init|=
name|rexCall
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|g
operator|.
name|putEdgeValue
argument_list|(
operator|new
name|RexNodeRef
argument_list|(
name|opA
argument_list|)
argument_list|,
operator|new
name|RexNodeRef
argument_list|(
name|opB
argument_list|)
argument_list|,
name|rexCall
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|kind
operator|==
name|cmpForward
operator|.
name|reverse
argument_list|()
condition|)
block|{
name|RexNode
name|opA
init|=
name|rexCall
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RexNode
name|opB
init|=
name|rexCall
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|g
operator|.
name|putEdgeValue
argument_list|(
operator|new
name|RexNodeRef
argument_list|(
name|opA
argument_list|)
argument_list|,
operator|new
name|RexNodeRef
argument_list|(
name|opB
argument_list|)
argument_list|,
name|rexCall
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|g
return|;
block|}
block|}
comment|/**    * This class just wraps around a RexNode enables equals/hashCode based on toString.    *    * After CALCITE-2632 this might not be needed anymore */
specifier|static
class|class
name|RexNodeRef
block|{
specifier|public
specifier|static
name|Comparator
argument_list|<
name|RexNodeRef
argument_list|>
name|COMPARATOR
init|=
parameter_list|(
name|RexNodeRef
name|o1
parameter_list|,
name|RexNodeRef
name|o2
parameter_list|)
lambda|->
name|o1
operator|.
name|node
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|node
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|RexNode
name|node
decl_stmt|;
specifier|public
name|RexNodeRef
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
specifier|public
name|RexNode
name|getRexNode
parameter_list|()
block|{
return|return
name|node
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|node
operator|.
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|RexNodeRef
condition|)
block|{
name|RexNodeRef
name|otherRef
init|=
operator|(
name|RexNodeRef
operator|)
name|o
decl_stmt|;
return|return
name|node
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|otherRef
operator|.
name|node
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ref for:"
operator|+
name|node
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Transforms OR clauses into IN clauses, when possible.    */
specifier|protected
specifier|static
class|class
name|RexTransformIntoInClause
extends|extends
name|RexShuttle
block|{
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|private
specifier|final
name|int
name|minNumORClauses
decl_stmt|;
name|RexTransformIntoInClause
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|int
name|minNumORClauses
parameter_list|)
block|{
name|this
operator|.
name|rexBuilder
operator|=
name|rexBuilder
expr_stmt|;
name|this
operator|.
name|minNumORClauses
operator|=
name|minNumORClauses
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCall
parameter_list|(
name|RexCall
name|inputCall
parameter_list|)
block|{
name|RexNode
name|node
init|=
name|super
operator|.
name|visitCall
argument_list|(
name|inputCall
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|node
decl_stmt|;
switch|switch
condition|(
name|call
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|OR
case|:
try|try
block|{
name|RexNode
name|newNode
init|=
name|transformIntoInClauseCondition
argument_list|(
name|rexBuilder
argument_list|,
name|call
argument_list|,
name|minNumORClauses
argument_list|)
decl_stmt|;
if|if
condition|(
name|newNode
operator|!=
literal|null
condition|)
block|{
return|return
name|newNode
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in HivePointLookupOptimizerRule"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|call
return|;
block|}
default|default:
break|break;
block|}
block|}
return|return
name|node
return|;
block|}
comment|/**      * Represents a contraint.      *      * Example: a=1      * substr(a,1,2) = concat('asd','xxx')      */
specifier|static
class|class
name|Constraint
block|{
specifier|private
name|RexNode
name|exprNode
decl_stmt|;
specifier|private
name|RexNode
name|constNode
decl_stmt|;
specifier|public
name|Constraint
parameter_list|(
name|RexNode
name|exprNode
parameter_list|,
name|RexNode
name|constNode
parameter_list|)
block|{
name|this
operator|.
name|exprNode
operator|=
name|constNode
expr_stmt|;
name|this
operator|.
name|constNode
operator|=
name|exprNode
expr_stmt|;
block|}
comment|/**        * Interprets argument as a constraint; if not possible returns null.        */
specifier|public
specifier|static
name|Constraint
name|of
parameter_list|(
name|RexNode
name|n
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|n
operator|instanceof
name|RexCall
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|n
decl_stmt|;
if|if
condition|(
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|!=
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RexNode
name|opA
init|=
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RexNode
name|opB
init|=
name|call
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|RexUtil
operator|.
name|isNull
argument_list|(
name|opA
argument_list|)
operator|||
name|RexUtil
operator|.
name|isNull
argument_list|(
name|opB
argument_list|)
condition|)
block|{
comment|// dont try to compare nulls
return|return
literal|null
return|;
block|}
if|if
condition|(
name|isConstExpr
argument_list|(
name|opA
argument_list|)
operator|&&
name|isColumnExpr
argument_list|(
name|opB
argument_list|)
condition|)
block|{
return|return
operator|new
name|Constraint
argument_list|(
name|opB
argument_list|,
name|opA
argument_list|)
return|;
block|}
if|if
condition|(
name|isColumnExpr
argument_list|(
name|opA
argument_list|)
operator|&&
name|isConstExpr
argument_list|(
name|opB
argument_list|)
condition|)
block|{
return|return
operator|new
name|Constraint
argument_list|(
name|opA
argument_list|,
name|opB
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isColumnExpr
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
return|return
operator|!
name|node
operator|.
name|getType
argument_list|()
operator|.
name|isStruct
argument_list|()
operator|&&
name|HiveCalciteUtil
operator|.
name|getInputRefs
argument_list|(
name|node
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|HiveCalciteUtil
operator|.
name|isDeterministic
argument_list|(
name|node
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isConstExpr
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
return|return
operator|!
name|node
operator|.
name|getType
argument_list|()
operator|.
name|isStruct
argument_list|()
operator|&&
name|HiveCalciteUtil
operator|.
name|getInputRefs
argument_list|(
name|node
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|HiveCalciteUtil
operator|.
name|isDeterministic
argument_list|(
name|node
argument_list|)
return|;
block|}
specifier|public
name|RexNodeRef
name|getKey
parameter_list|()
block|{
return|return
operator|new
name|RexNodeRef
argument_list|(
name|constNode
argument_list|)
return|;
block|}
block|}
comment|/**      * A group of Constraints.      *      * Examples:      *  (a=1&& b=1)      *  (a=1)      *      * Note: any rexNode is accepted as constraint; but it might be keyed with the empty key;      * which means it can't be parsed as a constraint for some reason; but for completeness...      *      */
specifier|static
class|class
name|ConstraintGroup
block|{
specifier|public
specifier|static
specifier|final
name|Function
argument_list|<
name|ConstraintGroup
argument_list|,
name|Set
argument_list|<
name|RexNodeRef
argument_list|>
argument_list|>
name|KEY_FUNCTION
init|=
operator|new
name|Function
argument_list|<
name|ConstraintGroup
argument_list|,
name|Set
argument_list|<
name|RexNodeRef
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|RexNodeRef
argument_list|>
name|apply
parameter_list|(
name|ConstraintGroup
name|cg
parameter_list|)
block|{
return|return
name|cg
operator|.
name|key
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|RexNodeRef
argument_list|,
name|Constraint
argument_list|>
name|constraints
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|RexNode
name|originalRexNode
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|RexNodeRef
argument_list|>
name|key
decl_stmt|;
specifier|public
name|ConstraintGroup
parameter_list|(
name|RexNode
name|rexNode
parameter_list|)
block|{
name|originalRexNode
operator|=
name|rexNode
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|conjunctions
init|=
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|rexNode
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|n
range|:
name|conjunctions
control|)
block|{
name|Constraint
name|c
init|=
name|Constraint
operator|.
name|of
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
comment|// interpretation failed; make this node opaque
name|key
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
return|return;
block|}
name|constraints
operator|.
name|put
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|constraints
operator|.
name|size
argument_list|()
operator|!=
name|conjunctions
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"unexpected situation; giving up on this branch"
argument_list|)
expr_stmt|;
name|key
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
return|return;
block|}
name|key
operator|=
name|constraints
operator|.
name|keySet
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|RexNode
argument_list|>
name|getValuesInOrder
parameter_list|(
name|List
argument_list|<
name|RexNodeRef
argument_list|>
name|columns
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNodeRef
name|rexInputRef
range|:
name|columns
control|)
block|{
name|Constraint
name|constraint
init|=
name|constraints
operator|.
name|get
argument_list|(
name|rexInputRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|constraint
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Unable to find constraint which was earlier added."
argument_list|)
throw|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|constraint
operator|.
name|exprNode
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|private
name|RexNode
name|transformIntoInClauseCondition
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|int
name|minNumORClauses
parameter_list|)
throws|throws
name|SemanticException
block|{
assert|assert
name|condition
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|OR
assert|;
name|ImmutableList
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
name|RexUtil
operator|.
name|flattenOr
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|condition
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|operands
operator|.
name|size
argument_list|()
operator|<
name|minNumORClauses
condition|)
block|{
comment|// We bail out
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|ConstraintGroup
argument_list|>
name|allNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ConstraintGroup
argument_list|>
name|processedNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operands
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ConstraintGroup
name|m
init|=
operator|new
name|ConstraintGroup
argument_list|(
name|operands
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|allNodes
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|Multimap
argument_list|<
name|Set
argument_list|<
name|RexNodeRef
argument_list|>
argument_list|,
name|ConstraintGroup
argument_list|>
name|assignmentGroups
init|=
name|Multimaps
operator|.
name|index
argument_list|(
name|allNodes
argument_list|,
name|ConstraintGroup
operator|.
name|KEY_FUNCTION
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Set
argument_list|<
name|RexNodeRef
argument_list|>
argument_list|,
name|Collection
argument_list|<
name|ConstraintGroup
argument_list|>
argument_list|>
name|sa
range|:
name|assignmentGroups
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// skip opaque
if|if
condition|(
name|sa
operator|.
name|getKey
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
comment|// not enough equalities should not be handled
if|if
condition|(
name|sa
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|2
operator|||
name|sa
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|minNumORClauses
condition|)
block|{
continue|continue;
block|}
name|allNodes
operator|.
name|add
argument_list|(
operator|new
name|ConstraintGroup
argument_list|(
name|buildInFor
argument_list|(
name|sa
operator|.
name|getKey
argument_list|()
argument_list|,
name|sa
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|processedNodes
operator|.
name|addAll
argument_list|(
name|sa
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|processedNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|allNodes
operator|.
name|removeAll
argument_list|(
name|processedNodes
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ConstraintGroup
name|mx
range|:
name|allNodes
control|)
block|{
name|ops
operator|.
name|add
argument_list|(
name|mx
operator|.
name|originalRexNode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ops
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|OR
argument_list|,
name|ops
argument_list|)
return|;
block|}
block|}
specifier|private
name|RexNode
name|buildInFor
parameter_list|(
name|Set
argument_list|<
name|RexNodeRef
argument_list|>
name|set
parameter_list|,
name|Collection
argument_list|<
name|ConstraintGroup
argument_list|>
name|value
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|RexNodeRef
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|addAll
argument_list|(
name|set
argument_list|)
expr_stmt|;
name|columns
operator|.
name|sort
argument_list|(
name|RexNodeRef
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|columnNodes
init|=
name|columns
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|n
lambda|->
name|n
operator|.
name|getRexNode
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|operands
operator|.
name|add
argument_list|(
name|useStructIfNeeded
argument_list|(
name|columnNodes
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ConstraintGroup
name|node
range|:
name|value
control|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|values
init|=
name|node
operator|.
name|getValuesInOrder
argument_list|(
name|columns
argument_list|)
decl_stmt|;
name|operands
operator|.
name|add
argument_list|(
name|useStructIfNeeded
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|HiveIn
operator|.
name|INSTANCE
argument_list|,
name|operands
argument_list|)
return|;
block|}
specifier|private
name|RexNode
name|useStructIfNeeded
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|RexNode
argument_list|>
name|columns
parameter_list|)
block|{
comment|// Create STRUCT clause
if|if
condition|(
name|columns
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|columns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|ROW
argument_list|,
name|columns
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Merge IN clauses, when possible.    */
specifier|protected
specifier|static
class|class
name|RexMergeInClause
extends|extends
name|RexShuttle
block|{
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
name|RexMergeInClause
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|)
block|{
name|this
operator|.
name|rexBuilder
operator|=
name|rexBuilder
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RexNode
name|visitCall
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
name|RexNode
name|node
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newOperands
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|stringToExpr
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inLHSExprToRHSExprs
init|=
name|LinkedHashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|call
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|AND
case|:
comment|// IN clauses need to be combined by keeping only common elements
name|operands
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|RexUtil
operator|.
name|flattenAnd
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operands
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|operand
init|=
name|operands
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|operand
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|IN
condition|)
block|{
name|RexCall
name|inCall
init|=
operator|(
name|RexCall
operator|)
name|operand
decl_stmt|;
if|if
condition|(
operator|!
name|HiveCalciteUtil
operator|.
name|isDeterministic
argument_list|(
name|inCall
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|ref
init|=
name|inCall
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|stringToExpr
operator|.
name|put
argument_list|(
name|ref
argument_list|,
name|inCall
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|inLHSExprToRHSExprs
operator|.
name|containsKey
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|expressions
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|inCall
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|String
name|expr
init|=
name|inCall
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|expressions
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|stringToExpr
operator|.
name|put
argument_list|(
name|expr
argument_list|,
name|inCall
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|inLHSExprToRHSExprs
operator|.
name|get
argument_list|(
name|ref
argument_list|)
operator|.
name|retainAll
argument_list|(
name|expressions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|inCall
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|String
name|expr
init|=
name|inCall
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|inLHSExprToRHSExprs
operator|.
name|put
argument_list|(
name|ref
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|stringToExpr
operator|.
name|put
argument_list|(
name|expr
argument_list|,
name|inCall
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|operands
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
block|}
comment|// Create IN clauses
name|newOperands
operator|=
name|createInClauses
argument_list|(
name|rexBuilder
argument_list|,
name|stringToExpr
argument_list|,
name|inLHSExprToRHSExprs
argument_list|)
expr_stmt|;
name|newOperands
operator|.
name|addAll
argument_list|(
name|operands
argument_list|)
expr_stmt|;
comment|// Return node
name|node
operator|=
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|newOperands
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|OR
case|:
comment|// IN clauses need to be combined by keeping all elements
name|operands
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|RexUtil
operator|.
name|flattenOr
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operands
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RexNode
name|operand
init|=
name|operands
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|operand
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|IN
condition|)
block|{
name|RexCall
name|inCall
init|=
operator|(
name|RexCall
operator|)
name|operand
decl_stmt|;
if|if
condition|(
operator|!
name|HiveCalciteUtil
operator|.
name|isDeterministic
argument_list|(
name|inCall
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|ref
init|=
name|inCall
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|stringToExpr
operator|.
name|put
argument_list|(
name|ref
argument_list|,
name|inCall
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|inCall
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|String
name|expr
init|=
name|inCall
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|inLHSExprToRHSExprs
operator|.
name|put
argument_list|(
name|ref
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|stringToExpr
operator|.
name|put
argument_list|(
name|expr
argument_list|,
name|inCall
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|operands
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
block|}
comment|// Create IN clauses
name|newOperands
operator|=
name|createInClauses
argument_list|(
name|rexBuilder
argument_list|,
name|stringToExpr
argument_list|,
name|inLHSExprToRHSExprs
argument_list|)
expr_stmt|;
name|newOperands
operator|.
name|addAll
argument_list|(
name|operands
argument_list|)
expr_stmt|;
comment|// Return node
name|node
operator|=
name|RexUtil
operator|.
name|composeDisjunction
argument_list|(
name|rexBuilder
argument_list|,
name|newOperands
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
name|super
operator|.
name|visitCall
argument_list|(
name|call
argument_list|)
return|;
block|}
return|return
name|node
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|RexNode
argument_list|>
name|createInClauses
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|stringToExpr
parameter_list|,
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inLHSExprToRHSExprs
parameter_list|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|newExpressions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|inLHSExprToRHSExprs
operator|.
name|asMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|ref
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|exprs
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|exprs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newExpressions
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|newOperands
init|=
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|(
name|exprs
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|newOperands
operator|.
name|add
argument_list|(
name|stringToExpr
operator|.
name|get
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|expr
range|:
name|exprs
control|)
block|{
name|newOperands
operator|.
name|add
argument_list|(
name|stringToExpr
operator|.
name|get
argument_list|(
name|expr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newExpressions
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|HiveIn
operator|.
name|INSTANCE
argument_list|,
name|newOperands
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newExpressions
return|;
block|}
block|}
block|}
end_class

end_unit

