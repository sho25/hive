begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|QBSubQuery
operator|.
name|SubQueryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|QBSubQuery
operator|.
name|SubQueryTypeDef
import|;
end_import

begin_class
specifier|public
class|class
name|SubQueryUtils
block|{
specifier|static
name|void
name|extractConjuncts
parameter_list|(
name|ASTNode
name|node
parameter_list|,
name|List
argument_list|<
name|ASTNode
argument_list|>
name|conjuncts
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|!=
name|HiveParser
operator|.
name|KW_AND
condition|)
block|{
name|conjuncts
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return;
block|}
name|extractConjuncts
argument_list|(
operator|(
name|ASTNode
operator|)
name|node
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|conjuncts
argument_list|)
expr_stmt|;
name|extractConjuncts
argument_list|(
operator|(
name|ASTNode
operator|)
name|node
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|conjuncts
argument_list|)
expr_stmt|;
block|}
comment|/*    * Remove the SubQuery from the Where CLause Tree.    * return the remaining WhereClause.    */
specifier|static
name|ASTNode
name|rewriteParentQueryWhere
parameter_list|(
name|ASTNode
name|whereCond
parameter_list|,
name|ASTNode
name|subQuery
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ParentQueryWhereClauseRewrite
name|rewrite
init|=
operator|new
name|ParentQueryWhereClauseRewrite
argument_list|(
name|whereCond
argument_list|,
name|subQuery
argument_list|)
decl_stmt|;
return|return
name|rewrite
operator|.
name|remove
argument_list|()
return|;
block|}
specifier|static
name|ASTNode
name|constructTrueCond
parameter_list|()
block|{
name|ASTNode
name|eq
init|=
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|EQUAL
argument_list|,
literal|"="
argument_list|)
decl_stmt|;
name|ASTNode
name|lhs
init|=
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|Number
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
name|ASTNode
name|rhs
init|=
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|Number
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
name|ParseDriver
operator|.
name|adaptor
operator|.
name|addChild
argument_list|(
name|eq
argument_list|,
name|lhs
argument_list|)
expr_stmt|;
name|ParseDriver
operator|.
name|adaptor
operator|.
name|addChild
argument_list|(
name|eq
argument_list|,
name|rhs
argument_list|)
expr_stmt|;
return|return
name|eq
return|;
block|}
specifier|static
name|ASTNode
name|andAST
parameter_list|(
name|ASTNode
name|left
parameter_list|,
name|ASTNode
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
literal|null
condition|)
block|{
return|return
name|right
return|;
block|}
elseif|else
if|if
condition|(
name|right
operator|==
literal|null
condition|)
block|{
return|return
name|left
return|;
block|}
else|else
block|{
name|Object
name|o
init|=
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|KW_AND
argument_list|,
literal|"AND"
argument_list|)
decl_stmt|;
name|ParseDriver
operator|.
name|adaptor
operator|.
name|addChild
argument_list|(
name|o
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|ParseDriver
operator|.
name|adaptor
operator|.
name|addChild
argument_list|(
name|o
argument_list|,
name|right
argument_list|)
expr_stmt|;
return|return
operator|(
name|ASTNode
operator|)
name|o
return|;
block|}
block|}
specifier|static
name|ASTNode
name|orAST
parameter_list|(
name|ASTNode
name|left
parameter_list|,
name|ASTNode
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
literal|null
condition|)
block|{
return|return
name|right
return|;
block|}
elseif|else
if|if
condition|(
name|right
operator|==
literal|null
condition|)
block|{
return|return
name|left
return|;
block|}
else|else
block|{
name|Object
name|o
init|=
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|KW_OR
argument_list|,
literal|"OR"
argument_list|)
decl_stmt|;
name|ParseDriver
operator|.
name|adaptor
operator|.
name|addChild
argument_list|(
name|o
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|ParseDriver
operator|.
name|adaptor
operator|.
name|addChild
argument_list|(
name|o
argument_list|,
name|right
argument_list|)
expr_stmt|;
return|return
operator|(
name|ASTNode
operator|)
name|o
return|;
block|}
block|}
specifier|static
name|ASTNode
name|isNull
parameter_list|(
name|ASTNode
name|expr
parameter_list|)
block|{
name|ASTNode
name|node
init|=
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|TOK_FUNCTION
argument_list|,
literal|"TOK_FUNCTION"
argument_list|)
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|TOK_ISNULL
argument_list|,
literal|"TOK_ISNULL"
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|.
name|addChild
argument_list|(
name|expr
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
comment|/*    * Check that SubQuery is a top level conjuncts.    * Remove it from the Where Clause AST.    */
specifier|static
class|class
name|ParentQueryWhereClauseRewrite
block|{
name|ASTNode
name|root
decl_stmt|;
name|ASTNode
name|subQuery
decl_stmt|;
name|ParentQueryWhereClauseRewrite
parameter_list|(
name|ASTNode
name|root
parameter_list|,
name|ASTNode
name|subQuery
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|subQuery
operator|=
name|subQuery
expr_stmt|;
block|}
name|ASTNode
name|getParentInWhereClause
parameter_list|(
name|ASTNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
operator|||
name|node
operator|==
name|root
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|ASTNode
operator|)
name|node
operator|.
name|getParent
argument_list|()
return|;
block|}
name|boolean
name|removeSubQuery
parameter_list|(
name|ASTNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|KW_AND
condition|)
block|{
name|boolean
name|r
init|=
name|removeSubQuery
argument_list|(
operator|(
name|ASTNode
operator|)
name|node
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|r
condition|)
block|{
name|r
operator|=
name|removeSubQuery
argument_list|(
operator|(
name|ASTNode
operator|)
name|node
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|KW_NOT
condition|)
block|{
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|node
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
name|subQuery
condition|)
block|{
name|ASTNode
name|sqOpType
init|=
operator|(
name|ASTNode
operator|)
name|subQuery
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|sqOpType
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|KW_EXISTS
condition|)
block|{
name|sqOpType
operator|.
name|getToken
argument_list|()
operator|.
name|setType
argument_list|(
name|HiveParser
operator|.
name|TOK_SUBQUERY_OP_NOTEXISTS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sqOpType
operator|.
name|getToken
argument_list|()
operator|.
name|setType
argument_list|(
name|HiveParser
operator|.
name|TOK_SUBQUERY_OP_NOTIN
argument_list|)
expr_stmt|;
block|}
name|ASTNode
name|parent
init|=
name|getParentInWhereClause
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|root
operator|=
name|subQuery
expr_stmt|;
block|}
else|else
block|{
name|int
name|nodeIdx
init|=
name|node
operator|.
name|getChildIndex
argument_list|()
decl_stmt|;
name|parent
operator|.
name|setChild
argument_list|(
name|nodeIdx
argument_list|,
name|subQuery
argument_list|)
expr_stmt|;
block|}
return|return
name|removeSubQuery
argument_list|(
name|subQuery
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|node
operator|==
name|subQuery
condition|)
block|{
name|ASTNode
name|parent
init|=
name|getParentInWhereClause
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|ASTNode
name|gParent
init|=
name|getParentInWhereClause
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|ASTNode
name|sibling
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|subQuery
operator|.
name|getChildIndex
argument_list|()
operator|==
literal|0
condition|)
block|{
name|sibling
operator|=
operator|(
name|ASTNode
operator|)
name|parent
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sibling
operator|=
operator|(
name|ASTNode
operator|)
name|parent
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*          * SubQuery was only condition in where clause          */
if|if
condition|(
name|sibling
operator|==
literal|null
condition|)
block|{
name|root
operator|=
name|constructTrueCond
argument_list|()
expr_stmt|;
block|}
comment|// SubQuery was just one conjunct
elseif|else
if|if
condition|(
name|gParent
operator|==
literal|null
condition|)
block|{
name|root
operator|=
name|sibling
expr_stmt|;
block|}
else|else
block|{
comment|// otherwise replace parent by sibling.
name|int
name|pIdx
init|=
name|parent
operator|.
name|getChildIndex
argument_list|()
decl_stmt|;
name|gParent
operator|.
name|setChild
argument_list|(
name|pIdx
argument_list|,
name|sibling
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
name|ASTNode
name|remove
parameter_list|()
throws|throws
name|SemanticException
block|{
name|boolean
name|r
init|=
name|removeSubQuery
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
condition|)
block|{
return|return
name|root
return|;
block|}
comment|/*        *  Restriction.7.h :: SubQuery predicates can appear only as top level conjuncts.        */
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|UNSUPPORTED_SUBQUERY_EXPRESSION
operator|.
name|getMsg
argument_list|(
name|subQuery
argument_list|,
literal|"Only SubQuery expressions that are top level conjuncts are allowed"
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|static
name|List
argument_list|<
name|ASTNode
argument_list|>
name|findSubQueries
parameter_list|(
name|ASTNode
name|node
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|ASTNode
argument_list|>
name|subQueries
init|=
operator|new
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
argument_list|()
decl_stmt|;
name|findSubQueries
argument_list|(
name|node
argument_list|,
name|subQueries
argument_list|)
expr_stmt|;
return|return
name|subQueries
return|;
block|}
specifier|private
specifier|static
name|void
name|findSubQueries
parameter_list|(
name|ASTNode
name|node
parameter_list|,
name|List
argument_list|<
name|ASTNode
argument_list|>
name|subQueries
parameter_list|)
block|{
switch|switch
condition|(
name|node
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_SUBQUERY_EXPR
case|:
name|subQueries
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
break|break;
default|default:
name|int
name|childCount
init|=
name|node
operator|.
name|getChildCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childCount
condition|;
name|i
operator|++
control|)
block|{
name|findSubQueries
argument_list|(
operator|(
name|ASTNode
operator|)
name|node
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
argument_list|,
name|subQueries
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|QBSubQuery
name|buildSubQuery
parameter_list|(
name|String
name|outerQueryId
parameter_list|,
name|int
name|sqIdx
parameter_list|,
name|ASTNode
name|sqAST
parameter_list|,
name|ASTNode
name|originalSQAST
parameter_list|,
name|Context
name|ctx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ASTNode
name|sqOp
init|=
operator|(
name|ASTNode
operator|)
name|sqAST
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ASTNode
name|sq
init|=
operator|(
name|ASTNode
operator|)
name|sqAST
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ASTNode
name|outerQueryExpr
init|=
operator|(
name|ASTNode
operator|)
name|sqAST
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|/*      * Restriction.8.m :: We allow only 1 SubQuery expression per Query.      */
if|if
condition|(
name|outerQueryExpr
operator|!=
literal|null
operator|&&
name|outerQueryExpr
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_SUBQUERY_EXPR
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|UNSUPPORTED_SUBQUERY_EXPRESSION
operator|.
name|getMsg
argument_list|(
name|originalSQAST
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"Only 1 SubQuery expression is supported."
argument_list|)
argument_list|)
throw|;
block|}
return|return
operator|new
name|QBSubQuery
argument_list|(
name|outerQueryId
argument_list|,
name|sqIdx
argument_list|,
name|sq
argument_list|,
name|outerQueryExpr
argument_list|,
name|buildSQOperator
argument_list|(
name|sqOp
argument_list|)
argument_list|,
name|originalSQAST
argument_list|,
name|ctx
argument_list|)
return|;
block|}
specifier|static
name|SubQueryTypeDef
name|buildSQOperator
parameter_list|(
name|ASTNode
name|astSQOp
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ASTNode
name|opAST
init|=
operator|(
name|ASTNode
operator|)
name|astSQOp
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SubQueryType
name|type
init|=
name|SubQueryType
operator|.
name|get
argument_list|(
name|opAST
argument_list|)
decl_stmt|;
return|return
operator|new
name|SubQueryTypeDef
argument_list|(
name|opAST
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/*    * is this expr a UDAF invocation; does it imply windowing    * @return    * 0 if implies neither    * 1 if implies aggregation    * 2 if implies windowing    */
specifier|static
name|int
name|checkAggOrWindowing
parameter_list|(
name|ASTNode
name|expressionTree
parameter_list|)
throws|throws
name|SemanticException
block|{
name|int
name|exprTokenType
init|=
name|expressionTree
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|exprTokenType
operator|==
name|HiveParser
operator|.
name|TOK_FUNCTION
operator|||
name|exprTokenType
operator|==
name|HiveParser
operator|.
name|TOK_FUNCTIONDI
operator|||
name|exprTokenType
operator|==
name|HiveParser
operator|.
name|TOK_FUNCTIONSTAR
condition|)
block|{
assert|assert
operator|(
name|expressionTree
operator|.
name|getChildCount
argument_list|()
operator|!=
literal|0
operator|)
assert|;
if|if
condition|(
name|expressionTree
operator|.
name|getChild
argument_list|(
name|expressionTree
operator|.
name|getChildCount
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_WINDOWSPEC
condition|)
block|{
return|return
literal|2
return|;
block|}
if|if
condition|(
name|expressionTree
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|Identifier
condition|)
block|{
name|String
name|functionName
init|=
name|SemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|expressionTree
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|FunctionRegistry
operator|.
name|getGenericUDAFResolver
argument_list|(
name|functionName
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
block|}
block|}
name|int
name|r
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expressionTree
operator|.
name|getChildCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|c
init|=
name|checkAggOrWindowing
argument_list|(
operator|(
name|ASTNode
operator|)
name|expressionTree
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|r
operator|=
name|Math
operator|.
name|max
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getTableAliasesInSubQuery
parameter_list|(
name|QBSubQuery
name|sq
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|aliases
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ASTNode
name|joinAST
init|=
operator|(
name|ASTNode
operator|)
name|sq
operator|.
name|getSubQueryAST
argument_list|()
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|getTableAliasesInSubQuery
argument_list|(
operator|(
name|ASTNode
operator|)
name|joinAST
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
return|return
name|aliases
return|;
block|}
specifier|private
specifier|static
name|void
name|getTableAliasesInSubQuery
parameter_list|(
name|ASTNode
name|joinNode
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|aliases
parameter_list|)
block|{
if|if
condition|(
operator|(
name|joinNode
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_TABREF
operator|)
operator|||
operator|(
name|joinNode
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_SUBQUERY
operator|)
operator|||
operator|(
name|joinNode
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_PTBLFUNCTION
operator|)
condition|)
block|{
name|String
name|tableName
init|=
name|SemanticAnalyzer
operator|.
name|getUnescapedUnqualifiedTableName
argument_list|(
operator|(
name|ASTNode
operator|)
name|joinNode
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
name|joinNode
operator|.
name|getChildCount
argument_list|()
operator|==
literal|1
condition|?
name|tableName
else|:
name|SemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|joinNode
operator|.
name|getChild
argument_list|(
name|joinNode
operator|.
name|getChildCount
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
name|alias
operator|=
operator|(
name|joinNode
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_PTBLFUNCTION
operator|)
condition|?
name|SemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|joinNode
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
else|:
name|alias
expr_stmt|;
name|aliases
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ASTNode
name|left
init|=
operator|(
name|ASTNode
operator|)
name|joinNode
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ASTNode
name|right
init|=
operator|(
name|ASTNode
operator|)
name|joinNode
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|getTableAliasesInSubQuery
argument_list|(
name|left
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
name|getTableAliasesInSubQuery
argument_list|(
name|right
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * construct the ASTNode for the SQ column that will join with the OuterQuery Expression.    * So for 'select ... from R1 where A in (select B from R2...)'    * this will build (= outerQueryExpr 'ast returned by call to buildSQJoinExpr')    */
specifier|static
name|ASTNode
name|buildOuterQryToSQJoinCond
parameter_list|(
name|ASTNode
name|outerQueryExpr
parameter_list|,
name|String
name|sqAlias
parameter_list|,
name|RowResolver
name|sqRR
parameter_list|)
block|{
name|ASTNode
name|node
init|=
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|EQUAL
argument_list|,
literal|"="
argument_list|)
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
name|outerQueryExpr
argument_list|)
expr_stmt|;
name|node
operator|.
name|addChild
argument_list|(
name|buildSQJoinExpr
argument_list|(
name|sqAlias
argument_list|,
name|sqRR
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
comment|/*    * construct the ASTNode for the SQ column that will join with the OuterQuery Expression.    * So for 'select ... from R1 where A in (select B from R2...)'    * this will build (. (TOK_TABLE_OR_COL Identifier[SQ_1]) Identifier[B])    * where 'SQ_1' is the alias generated for the SubQuery.    */
specifier|static
name|ASTNode
name|buildSQJoinExpr
parameter_list|(
name|String
name|sqAlias
parameter_list|,
name|RowResolver
name|sqRR
parameter_list|,
name|boolean
name|useInternalName
parameter_list|)
block|{
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|signature
init|=
name|sqRR
operator|.
name|getRowSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|ColumnInfo
name|joinColumn
init|=
name|signature
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
index|[]
name|joinColName
init|=
name|sqRR
operator|.
name|reverseLookup
argument_list|(
name|joinColumn
operator|.
name|getInternalName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|createColRefAST
argument_list|(
name|sqAlias
argument_list|,
name|useInternalName
condition|?
name|joinColumn
operator|.
name|getInternalName
argument_list|()
else|:
name|joinColName
index|[
literal|1
index|]
argument_list|)
return|;
block|}
specifier|static
name|ASTNode
name|buildOuterJoinPostCond
parameter_list|(
name|String
name|sqAlias
parameter_list|,
name|RowResolver
name|sqRR
parameter_list|)
block|{
return|return
name|isNull
argument_list|(
name|buildSQJoinExpr
argument_list|(
name|sqAlias
argument_list|,
name|sqRR
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|static
name|String
name|getAlias
parameter_list|(
name|Operator
name|o
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|>
name|aliasToOpInfo
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|>
name|e
range|:
name|aliasToOpInfo
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|==
name|o
condition|)
block|{
return|return
name|e
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|static
name|ASTNode
name|createColRefAST
parameter_list|(
name|String
name|tabAlias
parameter_list|,
name|String
name|colName
parameter_list|)
block|{
name|ASTNode
name|dot
init|=
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|DOT
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|ASTNode
name|tabAst
init|=
name|createTabRefAST
argument_list|(
name|tabAlias
argument_list|)
decl_stmt|;
name|ASTNode
name|colAst
init|=
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|colName
argument_list|)
decl_stmt|;
name|dot
operator|.
name|addChild
argument_list|(
name|tabAst
argument_list|)
expr_stmt|;
name|dot
operator|.
name|addChild
argument_list|(
name|colAst
argument_list|)
expr_stmt|;
return|return
name|dot
return|;
block|}
specifier|static
name|ASTNode
name|createAliasAST
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
return|return
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|colName
argument_list|)
return|;
block|}
specifier|static
name|ASTNode
name|createTabRefAST
parameter_list|(
name|String
name|tabAlias
parameter_list|)
block|{
name|ASTNode
name|tabAst
init|=
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|TOK_TABLE_OR_COL
argument_list|,
literal|"TOK_TABLE_OR_COL"
argument_list|)
decl_stmt|;
name|ASTNode
name|tabName
init|=
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|tabAlias
argument_list|)
decl_stmt|;
name|tabAst
operator|.
name|addChild
argument_list|(
name|tabName
argument_list|)
expr_stmt|;
return|return
name|tabAst
return|;
block|}
specifier|static
name|ASTNode
name|buildSelectExpr
parameter_list|(
name|ASTNode
name|expression
parameter_list|)
block|{
name|ASTNode
name|selAst
init|=
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|TOK_SELEXPR
argument_list|,
literal|"TOK_SELEXPR"
argument_list|)
decl_stmt|;
name|selAst
operator|.
name|addChild
argument_list|(
name|expression
argument_list|)
expr_stmt|;
return|return
name|selAst
return|;
block|}
specifier|static
name|ASTNode
name|buildGroupBy
parameter_list|()
block|{
name|ASTNode
name|gBy
init|=
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|TOK_GROUPBY
argument_list|,
literal|"TOK_GROUPBY"
argument_list|)
decl_stmt|;
return|return
name|gBy
return|;
block|}
specifier|static
name|ASTNode
name|createSelectItem
parameter_list|(
name|ASTNode
name|expr
parameter_list|,
name|ASTNode
name|alias
parameter_list|)
block|{
name|ASTNode
name|selectItem
init|=
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|TOK_SELEXPR
argument_list|,
literal|"TOK_SELEXPR"
argument_list|)
decl_stmt|;
name|selectItem
operator|.
name|addChild
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|selectItem
operator|.
name|addChild
argument_list|(
name|alias
argument_list|)
expr_stmt|;
return|return
name|selectItem
return|;
block|}
specifier|static
name|ASTNode
name|alterCorrelatedPredicate
parameter_list|(
name|ASTNode
name|correlatedExpr
parameter_list|,
name|ASTNode
name|sqAlias
parameter_list|,
name|boolean
name|left
parameter_list|)
block|{
if|if
condition|(
name|left
condition|)
block|{
name|correlatedExpr
operator|.
name|setChild
argument_list|(
literal|0
argument_list|,
name|sqAlias
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|correlatedExpr
operator|.
name|setChild
argument_list|(
literal|1
argument_list|,
name|sqAlias
argument_list|)
expr_stmt|;
block|}
return|return
name|correlatedExpr
return|;
block|}
specifier|static
name|void
name|addGroupExpressionToFront
parameter_list|(
name|ASTNode
name|gBy
parameter_list|,
name|ASTNode
name|expr
parameter_list|)
block|{
name|ASTNode
name|grpExpr
init|=
operator|(
name|ASTNode
operator|)
name|ParseDriver
operator|.
name|adaptor
operator|.
name|create
argument_list|(
name|HiveParser
operator|.
name|TOK_GROUPING_SETS_EXPRESSION
argument_list|,
literal|"TOK_GROUPING_SETS_EXPRESSION"
argument_list|)
decl_stmt|;
name|grpExpr
operator|.
name|addChild
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ASTNode
argument_list|>
name|newChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|ASTNode
argument_list|>
argument_list|()
decl_stmt|;
name|newChildren
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|gBy
operator|.
name|getChildCount
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|newChildren
operator|.
name|add
argument_list|(
operator|(
name|ASTNode
operator|)
name|gBy
operator|.
name|deleteChild
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|--
expr_stmt|;
block|}
for|for
control|(
name|ASTNode
name|child
range|:
name|newChildren
control|)
block|{
name|gBy
operator|.
name|addChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|ASTNode
name|buildPostJoinNullCheck
parameter_list|(
name|List
argument_list|<
name|ASTNode
argument_list|>
name|subQueryJoinAliasExprs
parameter_list|)
block|{
name|ASTNode
name|check
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ASTNode
name|expr
range|:
name|subQueryJoinAliasExprs
control|)
block|{
name|check
operator|=
name|orAST
argument_list|(
name|check
argument_list|,
name|isNull
argument_list|(
name|expr
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|check
return|;
block|}
specifier|static
name|void
name|setOriginDeep
parameter_list|(
name|ASTNode
name|node
parameter_list|,
name|ASTNodeOrigin
name|origin
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|node
operator|.
name|setOrigin
argument_list|(
name|origin
argument_list|)
expr_stmt|;
name|int
name|childCnt
init|=
name|node
operator|.
name|getChildCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childCnt
condition|;
name|i
operator|++
control|)
block|{
name|setOriginDeep
argument_list|(
operator|(
name|ASTNode
operator|)
name|node
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
argument_list|,
name|origin
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

