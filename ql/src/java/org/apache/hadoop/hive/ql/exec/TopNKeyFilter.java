begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|binarySearch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Implementation of filtering out keys.  * An instance of this class is wrapped in {@link TopNKeyOperator} and  * {@link org.apache.hadoop.hive.ql.exec.vector.VectorTopNKeyOperator}  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|TopNKeyFilter
block|{
specifier|private
specifier|final
name|int
name|topN
decl_stmt|;
specifier|private
name|Comparator
argument_list|<
name|?
extends|extends
name|KeyWrapper
argument_list|>
name|comparator
decl_stmt|;
specifier|private
name|KeyWrapper
index|[]
name|sortedTopItems
decl_stmt|;
specifier|private
name|int
name|size
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|repeated
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|added
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|total
init|=
literal|0
decl_stmt|;
comment|//to track effectiveness of boundary check
specifier|private
name|long
name|eff
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|KeyWrapper
argument_list|>
name|topNKeySet
decl_stmt|;
specifier|public
name|TopNKeyFilter
parameter_list|(
name|int
name|topN
parameter_list|,
name|Comparator
argument_list|<
name|?
extends|extends
name|KeyWrapper
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
name|this
operator|.
name|sortedTopItems
operator|=
operator|new
name|KeyWrapper
index|[
name|topN
operator|+
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|topN
operator|=
name|topN
expr_stmt|;
name|this
operator|.
name|topNKeySet
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
name|compareWithBoundary
parameter_list|(
name|KeyWrapper
name|kw
parameter_list|)
block|{
return|return
operator|(
operator|(
name|Comparator
argument_list|<
name|?
super|super
name|KeyWrapper
argument_list|>
operator|)
name|comparator
operator|)
operator|.
name|compare
argument_list|(
name|kw
argument_list|,
name|sortedTopItems
index|[
name|topN
operator|-
literal|1
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|boolean
name|canForward
parameter_list|(
name|KeyWrapper
name|kw
parameter_list|)
block|{
name|total
operator|++
expr_stmt|;
if|if
condition|(
name|topN
operator|>
literal|0
operator|&&
operator|(
name|size
operator|==
name|topN
operator|)
condition|)
block|{
name|int
name|comp
init|=
name|compareWithBoundary
argument_list|(
name|kw
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|==
literal|0
condition|)
block|{
comment|// special case, if last element is same as kw;
comment|// Avoids duplicate comparison later
name|eff
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|comp
operator|>
literal|0
condition|)
block|{
name|eff
operator|++
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|topNKeySet
operator|.
name|contains
argument_list|(
name|kw
argument_list|)
condition|)
block|{
name|repeated
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
name|int
name|pos
init|=
name|binarySearch
argument_list|(
name|sortedTopItems
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|kw
argument_list|,
operator|(
name|Comparator
argument_list|<
name|?
super|super
name|KeyWrapper
argument_list|>
operator|)
name|comparator
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
comment|// found
name|repeated
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
name|pos
operator|=
operator|-
name|pos
operator|-
literal|1
expr_stmt|;
comment|// not found, calculate insertion point
if|if
condition|(
name|pos
operator|>=
name|topN
condition|)
block|{
comment|// would be inserted to the end, there are topN elements which are smaller/larger
return|return
literal|false
return|;
block|}
name|KeyWrapper
name|oldElement
init|=
name|sortedTopItems
index|[
name|pos
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|sortedTopItems
argument_list|,
name|pos
argument_list|,
name|sortedTopItems
argument_list|,
name|pos
operator|+
literal|1
argument_list|,
name|size
operator|-
name|pos
argument_list|)
expr_stmt|;
comment|// make space by shifting
name|sortedTopItems
index|[
name|pos
index|]
operator|=
name|kw
operator|.
name|copyKey
argument_list|()
expr_stmt|;
name|topNKeySet
operator|.
name|remove
argument_list|(
name|oldElement
argument_list|)
expr_stmt|;
name|topNKeySet
operator|.
name|add
argument_list|(
name|sortedTopItems
index|[
name|pos
index|]
argument_list|)
expr_stmt|;
name|added
operator|++
expr_stmt|;
if|if
condition|(
name|size
operator|<
name|topN
condition|)
block|{
name|size
operator|++
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|size
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|repeated
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|added
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|total
operator|=
literal|0
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|sortedTopItems
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"TopNKeyFilter{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"id="
argument_list|)
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", topN="
argument_list|)
operator|.
name|append
argument_list|(
name|topN
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", repeated="
argument_list|)
operator|.
name|append
argument_list|(
name|repeated
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", added="
argument_list|)
operator|.
name|append
argument_list|(
name|added
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", total="
argument_list|)
operator|.
name|append
argument_list|(
name|total
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", eff="
argument_list|)
operator|.
name|append
argument_list|(
name|eff
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", forwardingRatio="
argument_list|)
operator|.
name|append
argument_list|(
name|forwardingRatio
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Ratio between the forwarded rows and the total incoming rows.    * The higher the number is, the less is the efficiency of the filter.    * 1 means all rows should be forwarded.    * @return    */
specifier|public
name|float
name|forwardingRatio
parameter_list|()
block|{
if|if
condition|(
name|total
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|(
operator|(
name|repeated
operator|+
name|added
operator|)
operator|/
operator|(
name|float
operator|)
name|total
operator|)
return|;
block|}
specifier|public
name|long
name|getTotal
parameter_list|()
block|{
return|return
name|total
return|;
block|}
annotation|@
name|VisibleForTesting
name|long
name|getEffectiveBoundaryChecks
parameter_list|()
block|{
return|return
name|eff
return|;
block|}
annotation|@
name|VisibleForTesting
name|long
name|getRepeated
parameter_list|()
block|{
return|return
name|repeated
return|;
block|}
annotation|@
name|VisibleForTesting
name|long
name|getKeySetSize
parameter_list|()
block|{
return|return
name|topNKeySet
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

