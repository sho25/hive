begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_comment
comment|/**  * Implementation of filtering out keys.  * An instance of this class is wrapped in {@link TopNKeyOperator} and  * {@link org.apache.hadoop.hive.ql.exec.vector.VectorTopNKeyOperator}  * @param<T> - Type of {@link KeyWrapper}. Each key is stored in a KeyWrapper instance.  */
end_comment

begin_class
specifier|public
class|class
name|TopNKeyFilter
parameter_list|<
name|T
extends|extends
name|KeyWrapper
parameter_list|>
block|{
specifier|private
specifier|final
name|PriorityQueue
argument_list|<
name|T
argument_list|>
name|priorityQueue
decl_stmt|;
specifier|private
specifier|final
name|int
name|topN
decl_stmt|;
specifier|public
name|TopNKeyFilter
parameter_list|(
name|int
name|topN
parameter_list|,
name|Comparator
argument_list|<
name|T
argument_list|>
name|comparator
parameter_list|)
block|{
comment|// We need a reversed comparator because the PriorityQueue.poll() method is used for filtering out keys.
comment|// Ex.: When ORDER BY key1 ASC then call of poll() should remove the largest key.
name|this
operator|.
name|priorityQueue
operator|=
operator|new
name|PriorityQueue
argument_list|<>
argument_list|(
name|topN
operator|+
literal|1
argument_list|,
name|comparator
operator|.
name|reversed
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|topN
operator|=
name|topN
expr_stmt|;
block|}
specifier|public
name|boolean
name|canForward
parameter_list|(
name|T
name|kw
parameter_list|)
block|{
if|if
condition|(
operator|!
name|priorityQueue
operator|.
name|contains
argument_list|(
name|kw
argument_list|)
condition|)
block|{
name|priorityQueue
operator|.
name|offer
argument_list|(
operator|(
name|T
operator|)
name|kw
operator|.
name|copyKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|priorityQueue
operator|.
name|size
argument_list|()
operator|>
name|topN
condition|)
block|{
name|priorityQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
return|return
name|priorityQueue
operator|.
name|contains
argument_list|(
name|kw
argument_list|)
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|priorityQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

