begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|concurrent
operator|.
name|BasicThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|RuntimeStat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
operator|.
name|OpTreeSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
operator|.
name|RuntimeStatsMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
operator|.
name|RuntimeStatsPersister
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|OperatorStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_comment
comment|/**  * Decorates a StatSource to be loaded and persisted in the metastore as well.  */
end_comment

begin_class
class|class
name|MetastoreStatsConnector
implements|implements
name|StatsSource
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MetastoreStatsConnector
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|StatsSource
name|ss
decl_stmt|;
specifier|private
name|ExecutorService
name|executor
decl_stmt|;
name|MetastoreStatsConnector
parameter_list|(
name|StatsSource
name|ss
parameter_list|)
block|{
name|this
operator|.
name|ss
operator|=
name|ss
expr_stmt|;
name|executor
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
operator|new
name|BasicThreadFactory
operator|.
name|Builder
argument_list|()
operator|.
name|namingPattern
argument_list|(
literal|"Metastore-RuntimeStats-Loader-%d"
argument_list|)
operator|.
name|daemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|RuntimeStatsLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|RuntimeStatsLoader
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|RuntimeStat
argument_list|>
name|rs
init|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getMSC
argument_list|()
operator|.
name|getRuntimeStats
argument_list|()
decl_stmt|;
for|for
control|(
name|RuntimeStat
name|thriftStat
range|:
name|rs
control|)
block|{
try|try
block|{
name|ss
operator|.
name|putAll
argument_list|(
name|decode
argument_list|(
name|thriftStat
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logException
argument_list|(
literal|"Exception while loading runtime stats"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|TException
decl||
name|HiveException
name|e
parameter_list|)
block|{
name|logException
argument_list|(
literal|"Exception while reading metastore runtime stats"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canProvideStatsFor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|ss
operator|.
name|canProvideStatsFor
argument_list|(
name|clazz
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|OperatorStats
argument_list|>
name|lookup
parameter_list|(
name|OpTreeSignature
name|treeSig
parameter_list|)
block|{
return|return
name|ss
operator|.
name|lookup
argument_list|(
name|treeSig
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|OpTreeSignature
argument_list|,
name|OperatorStats
argument_list|>
name|map
parameter_list|)
block|{
name|ss
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|RuntimeStatsSubmitter
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
class|class
name|RuntimeStatsSubmitter
implements|implements
name|Runnable
block|{
specifier|private
name|Map
argument_list|<
name|OpTreeSignature
argument_list|,
name|OperatorStats
argument_list|>
name|map
decl_stmt|;
specifier|public
name|RuntimeStatsSubmitter
parameter_list|(
name|Map
argument_list|<
name|OpTreeSignature
argument_list|,
name|OperatorStats
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|RuntimeStat
name|rec
init|=
name|encode
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getMSC
argument_list|()
operator|.
name|addRuntimeStat
argument_list|(
name|rec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
decl||
name|HiveException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|logException
argument_list|(
literal|"Exception while persisting runtime stat"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|RuntimeStat
name|encode
parameter_list|(
name|Map
argument_list|<
name|OpTreeSignature
argument_list|,
name|OperatorStats
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|payload
init|=
name|RuntimeStatsPersister
operator|.
name|INSTANCE
operator|.
name|encode
argument_list|(
operator|new
name|RuntimeStatsMap
argument_list|(
name|map
argument_list|)
argument_list|)
decl_stmt|;
name|RuntimeStat
name|rs
init|=
operator|new
name|RuntimeStat
argument_list|()
decl_stmt|;
name|rs
operator|.
name|setWeight
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|.
name|setPayload
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|payload
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rs
return|;
block|}
specifier|private
name|Map
argument_list|<
name|OpTreeSignature
argument_list|,
name|OperatorStats
argument_list|>
name|decode
parameter_list|(
name|RuntimeStat
name|rs
parameter_list|)
throws|throws
name|IOException
block|{
name|RuntimeStatsMap
name|rsm
init|=
name|RuntimeStatsPersister
operator|.
name|INSTANCE
operator|.
name|decode
argument_list|(
name|rs
operator|.
name|getPayload
argument_list|()
argument_list|,
name|RuntimeStatsMap
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|rsm
operator|.
name|toMap
argument_list|()
return|;
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|static
name|void
name|logException
parameter_list|(
name|String
name|msg
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|msg
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

