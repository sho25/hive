begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_comment
comment|/**  * exception class, thrown when udf argument have something wrong.  */
end_comment

begin_class
specifier|public
class|class
name|UDFArgumentException
extends|extends
name|SemanticException
block|{
specifier|public
name|UDFArgumentException
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|UDFArgumentException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UDFArgumentException
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor.    *     * @param funcClass    *          The UDF or UDAF class.    * @param argTypeInfos    *          The list of argument types that lead to an ambiguity.    * @param methods    *          All potential matches.    */
specifier|public
name|UDFArgumentException
parameter_list|(
name|String
name|message
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|funcClass
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argTypeInfos
parameter_list|,
name|List
argument_list|<
name|Method
argument_list|>
name|methods
parameter_list|)
block|{
name|super
argument_list|(
name|getMessage
argument_list|(
name|message
argument_list|,
name|funcClass
argument_list|,
name|argTypeInfos
argument_list|,
name|methods
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|funcClass
operator|=
name|funcClass
expr_stmt|;
name|this
operator|.
name|argTypeInfos
operator|=
name|argTypeInfos
expr_stmt|;
name|this
operator|.
name|methods
operator|=
name|methods
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getMessage
parameter_list|(
name|String
name|message
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|funcClass
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argTypeInfos
parameter_list|,
name|List
argument_list|<
name|Method
argument_list|>
name|methods
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|methods
operator|!=
literal|null
condition|)
block|{
comment|// Sort the methods before omitting them.
name|sortMethods
argument_list|(
name|methods
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|". Possible choices: "
argument_list|)
expr_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|methods
control|)
block|{
name|Type
index|[]
name|types
init|=
name|m
operator|.
name|getGenericParameterTypes
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"_FUNC_("
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|typeNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|types
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|types
operator|.
name|length
condition|;
name|t
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|ObjectInspectorUtils
operator|.
name|getTypeNameFromJavaClass
argument_list|(
name|types
index|[
name|t
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")  "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|sortMethods
parameter_list|(
name|List
argument_list|<
name|Method
argument_list|>
name|methods
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|methods
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Method
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Method
name|m1
parameter_list|,
name|Method
name|m2
parameter_list|)
block|{
name|int
name|result
init|=
name|m1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
return|return
name|result
return|;
name|Type
index|[]
name|types1
init|=
name|m1
operator|.
name|getGenericParameterTypes
argument_list|()
decl_stmt|;
name|Type
index|[]
name|types2
init|=
name|m2
operator|.
name|getGenericParameterTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types1
operator|.
name|length
operator|&&
name|i
operator|<
name|types2
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|type1
init|=
name|ObjectInspectorUtils
operator|.
name|getTypeNameFromJavaClass
argument_list|(
name|types1
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|String
name|type2
init|=
name|ObjectInspectorUtils
operator|.
name|getTypeNameFromJavaClass
argument_list|(
name|types2
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|result
operator|=
name|type1
operator|.
name|compareTo
argument_list|(
name|type2
argument_list|)
operator|)
operator|!=
literal|0
condition|)
return|return
name|result
return|;
block|}
return|return
name|types1
operator|.
name|length
operator|-
name|types2
operator|.
name|length
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * The UDF or UDAF class that has the ambiguity.    */
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|funcClass
decl_stmt|;
comment|/**    * The list of parameter types.    */
specifier|private
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argTypeInfos
decl_stmt|;
comment|/**    * The list of matched methods.    */
specifier|private
name|List
argument_list|<
name|Method
argument_list|>
name|methods
decl_stmt|;
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getFunctionClass
parameter_list|()
block|{
return|return
name|funcClass
return|;
block|}
specifier|public
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|getArgTypeList
parameter_list|()
block|{
return|return
name|argTypeInfos
return|;
block|}
specifier|public
name|List
argument_list|<
name|Method
argument_list|>
name|getMethods
parameter_list|()
block|{
return|return
name|methods
return|;
block|}
block|}
end_class

end_unit

