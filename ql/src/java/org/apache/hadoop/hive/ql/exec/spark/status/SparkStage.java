begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|status
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Class to hold information that can be used to identify a Spark stage.  */
end_comment

begin_class
specifier|public
class|class
name|SparkStage
implements|implements
name|Comparable
argument_list|<
name|SparkStage
argument_list|>
block|{
specifier|private
name|int
name|stageId
decl_stmt|;
specifier|private
name|int
name|attemptId
decl_stmt|;
specifier|public
name|SparkStage
parameter_list|(
name|int
name|stageId
parameter_list|,
name|int
name|attemptId
parameter_list|)
block|{
name|this
operator|.
name|stageId
operator|=
name|stageId
expr_stmt|;
name|this
operator|.
name|attemptId
operator|=
name|attemptId
expr_stmt|;
block|}
specifier|public
name|int
name|getStageId
parameter_list|()
block|{
return|return
name|stageId
return|;
block|}
specifier|public
name|int
name|getAttemptId
parameter_list|()
block|{
return|return
name|attemptId
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|SparkStage
name|stage
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|stageId
operator|==
name|stage
operator|.
name|stageId
condition|)
block|{
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|this
operator|.
name|attemptId
argument_list|,
name|stage
operator|.
name|attemptId
argument_list|)
return|;
block|}
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|this
operator|.
name|stageId
argument_list|,
name|stage
operator|.
name|stageId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SparkStage
name|that
init|=
operator|(
name|SparkStage
operator|)
name|o
decl_stmt|;
return|return
name|getStageId
argument_list|()
operator|==
name|that
operator|.
name|getStageId
argument_list|()
operator|&&
name|getAttemptId
argument_list|()
operator|==
name|that
operator|.
name|getAttemptId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|stageId
argument_list|,
name|attemptId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|stageId
argument_list|)
operator|+
literal|"_"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|attemptId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

