begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|opconventer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|VirtualColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|RelOptHiveTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveTableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|opconventer
operator|.
name|HiveOpConverter
operator|.
name|OpAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_class
class|class
name|HiveTableScanVisitor
extends|extends
name|HiveRelNodeVisitor
argument_list|<
name|HiveTableScan
argument_list|>
block|{
name|HiveTableScanVisitor
parameter_list|(
name|HiveOpConverter
name|hiveOpConverter
parameter_list|)
block|{
name|super
argument_list|(
name|hiveOpConverter
argument_list|)
expr_stmt|;
block|}
comment|/**    * TODO: 1. PPD needs to get pushed in to TS.    */
annotation|@
name|Override
name|OpAttr
name|visit
parameter_list|(
name|HiveTableScan
name|scanRel
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Translating operator rel#"
operator|+
name|scanRel
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|scanRel
operator|.
name|getRelTypeName
argument_list|()
operator|+
literal|" with row type: ["
operator|+
name|scanRel
operator|.
name|getRowType
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|RelOptHiveTable
name|ht
init|=
operator|(
name|RelOptHiveTable
operator|)
name|scanRel
operator|.
name|getTable
argument_list|()
decl_stmt|;
comment|// 1. Setup TableScan Desc
comment|// 1.1 Build col details used by scan
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|colInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|virtualCols
init|=
operator|new
name|ArrayList
argument_list|<
name|VirtualColumn
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|neededColumnIDs
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|neededColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|vcolsInCalcite
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partColNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|VirtualColumn
argument_list|>
name|vColsMap
init|=
name|HiveCalciteUtil
operator|.
name|getVColsMap
argument_list|(
name|ht
operator|.
name|getVirtualCols
argument_list|()
argument_list|,
name|ht
operator|.
name|getNoOfNonVirtualCols
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|ColumnInfo
argument_list|>
name|posToPartColInfo
init|=
name|ht
operator|.
name|getPartColInfoMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|ColumnInfo
argument_list|>
name|posToNonPartColInfo
init|=
name|ht
operator|.
name|getNonPartColInfoMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|neededColIndxsFrmReloptHT
init|=
name|scanRel
operator|.
name|getNeededColIndxsFrmReloptHT
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|scanColNames
init|=
name|scanRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
name|String
name|tableAlias
init|=
name|scanRel
operator|.
name|getConcatQbIDAlias
argument_list|()
decl_stmt|;
name|String
name|colName
decl_stmt|;
name|ColumnInfo
name|colInfo
decl_stmt|;
name|VirtualColumn
name|vc
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|scanRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|colName
operator|=
name|scanColNames
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|vColsMap
operator|.
name|containsKey
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|vc
operator|=
name|vColsMap
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|virtualCols
operator|.
name|add
argument_list|(
name|vc
argument_list|)
expr_stmt|;
name|colInfo
operator|=
operator|new
name|ColumnInfo
argument_list|(
name|vc
operator|.
name|getName
argument_list|()
argument_list|,
name|vc
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
name|tableAlias
argument_list|,
literal|true
argument_list|,
name|vc
operator|.
name|getIsHidden
argument_list|()
argument_list|)
expr_stmt|;
name|vcolsInCalcite
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|posToPartColInfo
operator|.
name|containsKey
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|partColNames
operator|.
name|add
argument_list|(
name|colName
argument_list|)
expr_stmt|;
name|colInfo
operator|=
name|posToPartColInfo
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|vcolsInCalcite
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|colInfo
operator|=
name|posToNonPartColInfo
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|colInfos
operator|.
name|add
argument_list|(
name|colInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|neededColIndxsFrmReloptHT
operator|.
name|contains
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|neededColumnIDs
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|neededColumnNames
operator|.
name|add
argument_list|(
name|colName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 1.2 Create TableScanDesc
name|TableScanDesc
name|tsd
init|=
operator|new
name|TableScanDesc
argument_list|(
name|tableAlias
argument_list|,
name|virtualCols
argument_list|,
name|ht
operator|.
name|getHiveTableMD
argument_list|()
argument_list|)
decl_stmt|;
comment|// 1.3. Set Partition cols in TSDesc
name|tsd
operator|.
name|setPartColumns
argument_list|(
name|partColNames
argument_list|)
expr_stmt|;
comment|// 1.4. Set needed cols in TSDesc
name|tsd
operator|.
name|setNeededColumnIDs
argument_list|(
name|neededColumnIDs
argument_list|)
expr_stmt|;
name|tsd
operator|.
name|setNeededColumns
argument_list|(
name|neededColumnNames
argument_list|)
expr_stmt|;
comment|// 2. Setup TableScan
name|TableScanOperator
name|ts
init|=
operator|(
name|TableScanOperator
operator|)
name|OperatorFactory
operator|.
name|get
argument_list|(
name|hiveOpConverter
operator|.
name|getSemanticAnalyzer
argument_list|()
operator|.
name|getOpContext
argument_list|()
argument_list|,
name|tsd
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|colInfos
argument_list|)
argument_list|)
decl_stmt|;
comment|//now that we let Calcite process subqueries we might have more than one
comment|// tablescan with same alias.
if|if
condition|(
name|hiveOpConverter
operator|.
name|getTopOps
argument_list|()
operator|.
name|get
argument_list|(
name|tableAlias
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|tableAlias
operator|=
name|tableAlias
operator|+
name|hiveOpConverter
operator|.
name|getUniqueCounter
argument_list|()
expr_stmt|;
block|}
name|hiveOpConverter
operator|.
name|getTopOps
argument_list|()
operator|.
name|put
argument_list|(
name|tableAlias
argument_list|,
name|ts
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated "
operator|+
name|ts
operator|+
literal|" with row schema: ["
operator|+
name|ts
operator|.
name|getSchema
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|OpAttr
argument_list|(
name|tableAlias
argument_list|,
name|vcolsInCalcite
argument_list|,
name|ts
argument_list|)
return|;
block|}
block|}
end_class

end_unit

