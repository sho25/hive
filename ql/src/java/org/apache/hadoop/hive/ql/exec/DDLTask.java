begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|join
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ProtectMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetOpenTxnsInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeGrantInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|RolePrincipalGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactResponseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SkewedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ArchiveUtils
operator|.
name|PartSpecInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|serde
operator|.
name|ParquetHiveSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|rcfile
operator|.
name|merge
operator|.
name|BlockMergeTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|rcfile
operator|.
name|merge
operator|.
name|MergeWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|rcfile
operator|.
name|truncate
operator|.
name|ColumnTruncateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|rcfile
operator|.
name|truncate
operator|.
name|ColumnTruncateWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|DbLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLockObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLockObject
operator|.
name|HiveLockObjectData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveTxnManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|CheckResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveMetaStoreChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveStorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|InvalidTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|formatting
operator|.
name|MetaDataFormatUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|formatting
operator|.
name|MetaDataFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|AlterTablePartMergeFilesDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AddPartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AlterDatabaseDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AlterIndexDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AlterTableAlterPartDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AlterTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AlterTableDesc
operator|.
name|AlterTableTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AlterTableExchangePartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AlterTableSimpleDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CreateDatabaseDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CreateIndexDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CreateTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CreateTableLikeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CreateViewDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DescDatabaseDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DescFunctionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DescTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DropDatabaseDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DropIndexDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DropTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GrantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GrantRevokeRoleDDL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LockDatabaseDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LockTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MsckDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PrincipalDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PrivilegeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PrivilegeObjectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|RenamePartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|RevokeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|RoleDDLDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowColumnsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowCompactionsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowConfDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowCreateTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowDatabasesDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowFunctionsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowGrantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowIndexesDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowLocksDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowPartitionsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowTableStatusDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowTablesDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowTblPropertiesDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowTxnsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SwitchDatabaseDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TruncateTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|UnlockDatabaseDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|UnlockTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|StageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrincipal
operator|.
name|HivePrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
operator|.
name|HivePrivilegeObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveRoleGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|MetadataTypedColumnsetSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
operator|.
name|ColumnarSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|dynamic_type
operator|.
name|DynamicSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|stringtemplate
operator|.
name|v4
operator|.
name|ST
import|;
end_import

begin_comment
comment|/**  * DDLTask implementation.  *  **/
end_comment

begin_class
specifier|public
class|class
name|DDLTask
extends|extends
name|Task
argument_list|<
name|DDLWork
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"hive.ql.exec.DDLTask"
argument_list|)
decl_stmt|;
specifier|transient
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|separator
init|=
name|Utilities
operator|.
name|tabCode
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|terminator
init|=
name|Utilities
operator|.
name|newLineCode
decl_stmt|;
comment|// These are suffixes attached to intermediate directory names used in the
comment|// archiving / un-archiving process.
specifier|private
specifier|static
name|String
name|INTERMEDIATE_ARCHIVED_DIR_SUFFIX
decl_stmt|;
specifier|private
specifier|static
name|String
name|INTERMEDIATE_ORIGINAL_DIR_SUFFIX
decl_stmt|;
specifier|private
specifier|static
name|String
name|INTERMEDIATE_EXTRACTED_DIR_SUFFIX
decl_stmt|;
specifier|private
name|MetaDataFormatter
name|formatter
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|requireLock
parameter_list|()
block|{
return|return
name|this
operator|.
name|work
operator|!=
literal|null
operator|&&
name|this
operator|.
name|work
operator|.
name|getNeedLock
argument_list|()
return|;
block|}
specifier|public
name|DDLTask
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|QueryPlan
name|queryPlan
parameter_list|,
name|DriverContext
name|ctx
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|queryPlan
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
comment|// Pick the formatter to use to display the results.  Either the
comment|// normal human readable output or a json object.
name|formatter
operator|=
name|MetaDataFormatUtils
operator|.
name|getFormatter
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|INTERMEDIATE_ARCHIVED_DIR_SUFFIX
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_INT_ARCHIVED
argument_list|)
expr_stmt|;
name|INTERMEDIATE_ORIGINAL_DIR_SUFFIX
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_INT_ORIGINAL
argument_list|)
expr_stmt|;
name|INTERMEDIATE_EXTRACTED_DIR_SUFFIX
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_INT_EXTRACTED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|(
name|DriverContext
name|driverContext
parameter_list|)
block|{
comment|// Create the db
name|Hive
name|db
decl_stmt|;
try|try
block|{
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CreateDatabaseDesc
name|createDatabaseDesc
init|=
name|work
operator|.
name|getCreateDatabaseDesc
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|createDatabaseDesc
condition|)
block|{
return|return
name|createDatabase
argument_list|(
name|db
argument_list|,
name|createDatabaseDesc
argument_list|)
return|;
block|}
name|DropDatabaseDesc
name|dropDatabaseDesc
init|=
name|work
operator|.
name|getDropDatabaseDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|dropDatabaseDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|dropDatabase
argument_list|(
name|db
argument_list|,
name|dropDatabaseDesc
argument_list|)
return|;
block|}
name|LockDatabaseDesc
name|lockDatabaseDesc
init|=
name|work
operator|.
name|getLockDatabaseDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockDatabaseDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|lockDatabase
argument_list|(
name|lockDatabaseDesc
argument_list|)
return|;
block|}
name|UnlockDatabaseDesc
name|unlockDatabaseDesc
init|=
name|work
operator|.
name|getUnlockDatabaseDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|unlockDatabaseDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|unlockDatabase
argument_list|(
name|unlockDatabaseDesc
argument_list|)
return|;
block|}
name|SwitchDatabaseDesc
name|switchDatabaseDesc
init|=
name|work
operator|.
name|getSwitchDatabaseDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|switchDatabaseDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|switchDatabase
argument_list|(
name|db
argument_list|,
name|switchDatabaseDesc
argument_list|)
return|;
block|}
name|DescDatabaseDesc
name|descDatabaseDesc
init|=
name|work
operator|.
name|getDescDatabaseDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|descDatabaseDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|descDatabase
argument_list|(
name|descDatabaseDesc
argument_list|)
return|;
block|}
name|AlterDatabaseDesc
name|alterDatabaseDesc
init|=
name|work
operator|.
name|getAlterDatabaseDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|alterDatabaseDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|alterDatabase
argument_list|(
name|alterDatabaseDesc
argument_list|)
return|;
block|}
name|CreateTableDesc
name|crtTbl
init|=
name|work
operator|.
name|getCreateTblDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|crtTbl
operator|!=
literal|null
condition|)
block|{
return|return
name|createTable
argument_list|(
name|db
argument_list|,
name|crtTbl
argument_list|)
return|;
block|}
name|CreateIndexDesc
name|crtIndex
init|=
name|work
operator|.
name|getCreateIndexDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|crtIndex
operator|!=
literal|null
condition|)
block|{
return|return
name|createIndex
argument_list|(
name|db
argument_list|,
name|crtIndex
argument_list|)
return|;
block|}
name|AlterIndexDesc
name|alterIndex
init|=
name|work
operator|.
name|getAlterIndexDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|alterIndex
operator|!=
literal|null
condition|)
block|{
return|return
name|alterIndex
argument_list|(
name|db
argument_list|,
name|alterIndex
argument_list|)
return|;
block|}
name|DropIndexDesc
name|dropIdx
init|=
name|work
operator|.
name|getDropIdxDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|dropIdx
operator|!=
literal|null
condition|)
block|{
return|return
name|dropIndex
argument_list|(
name|db
argument_list|,
name|dropIdx
argument_list|)
return|;
block|}
name|CreateTableLikeDesc
name|crtTblLike
init|=
name|work
operator|.
name|getCreateTblLikeDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|crtTblLike
operator|!=
literal|null
condition|)
block|{
return|return
name|createTableLike
argument_list|(
name|db
argument_list|,
name|crtTblLike
argument_list|)
return|;
block|}
name|DropTableDesc
name|dropTbl
init|=
name|work
operator|.
name|getDropTblDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|dropTbl
operator|!=
literal|null
condition|)
block|{
name|dropTableOrPartitions
argument_list|(
name|db
argument_list|,
name|dropTbl
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|AlterTableDesc
name|alterTbl
init|=
name|work
operator|.
name|getAlterTblDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|alterTbl
operator|!=
literal|null
condition|)
block|{
return|return
name|alterTable
argument_list|(
name|db
argument_list|,
name|alterTbl
argument_list|)
return|;
block|}
name|CreateViewDesc
name|crtView
init|=
name|work
operator|.
name|getCreateViewDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|crtView
operator|!=
literal|null
condition|)
block|{
return|return
name|createView
argument_list|(
name|db
argument_list|,
name|crtView
argument_list|)
return|;
block|}
name|AddPartitionDesc
name|addPartitionDesc
init|=
name|work
operator|.
name|getAddPartitionDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|addPartitionDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|addPartitions
argument_list|(
name|db
argument_list|,
name|addPartitionDesc
argument_list|)
return|;
block|}
name|RenamePartitionDesc
name|renamePartitionDesc
init|=
name|work
operator|.
name|getRenamePartitionDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|renamePartitionDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|renamePartition
argument_list|(
name|db
argument_list|,
name|renamePartitionDesc
argument_list|)
return|;
block|}
name|AlterTableSimpleDesc
name|simpleDesc
init|=
name|work
operator|.
name|getAlterTblSimpleDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|simpleDesc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|simpleDesc
operator|.
name|getType
argument_list|()
operator|==
name|AlterTableTypes
operator|.
name|TOUCH
condition|)
block|{
return|return
name|touch
argument_list|(
name|db
argument_list|,
name|simpleDesc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|simpleDesc
operator|.
name|getType
argument_list|()
operator|==
name|AlterTableTypes
operator|.
name|ARCHIVE
condition|)
block|{
return|return
name|archive
argument_list|(
name|db
argument_list|,
name|simpleDesc
argument_list|,
name|driverContext
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|simpleDesc
operator|.
name|getType
argument_list|()
operator|==
name|AlterTableTypes
operator|.
name|UNARCHIVE
condition|)
block|{
return|return
name|unarchive
argument_list|(
name|db
argument_list|,
name|simpleDesc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|simpleDesc
operator|.
name|getType
argument_list|()
operator|==
name|AlterTableTypes
operator|.
name|COMPACT
condition|)
block|{
return|return
name|compact
argument_list|(
name|db
argument_list|,
name|simpleDesc
argument_list|)
return|;
block|}
block|}
name|MsckDesc
name|msckDesc
init|=
name|work
operator|.
name|getMsckDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|msckDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|msck
argument_list|(
name|db
argument_list|,
name|msckDesc
argument_list|)
return|;
block|}
name|DescTableDesc
name|descTbl
init|=
name|work
operator|.
name|getDescTblDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|descTbl
operator|!=
literal|null
condition|)
block|{
return|return
name|describeTable
argument_list|(
name|db
argument_list|,
name|descTbl
argument_list|)
return|;
block|}
name|DescFunctionDesc
name|descFunc
init|=
name|work
operator|.
name|getDescFunctionDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|descFunc
operator|!=
literal|null
condition|)
block|{
return|return
name|describeFunction
argument_list|(
name|descFunc
argument_list|)
return|;
block|}
name|ShowDatabasesDesc
name|showDatabases
init|=
name|work
operator|.
name|getShowDatabasesDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|showDatabases
operator|!=
literal|null
condition|)
block|{
return|return
name|showDatabases
argument_list|(
name|db
argument_list|,
name|showDatabases
argument_list|)
return|;
block|}
name|ShowTablesDesc
name|showTbls
init|=
name|work
operator|.
name|getShowTblsDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|showTbls
operator|!=
literal|null
condition|)
block|{
return|return
name|showTables
argument_list|(
name|db
argument_list|,
name|showTbls
argument_list|)
return|;
block|}
name|ShowColumnsDesc
name|showCols
init|=
name|work
operator|.
name|getShowColumnsDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|showCols
operator|!=
literal|null
condition|)
block|{
return|return
name|showColumns
argument_list|(
name|db
argument_list|,
name|showCols
argument_list|)
return|;
block|}
name|ShowTableStatusDesc
name|showTblStatus
init|=
name|work
operator|.
name|getShowTblStatusDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|showTblStatus
operator|!=
literal|null
condition|)
block|{
return|return
name|showTableStatus
argument_list|(
name|db
argument_list|,
name|showTblStatus
argument_list|)
return|;
block|}
name|ShowTblPropertiesDesc
name|showTblProperties
init|=
name|work
operator|.
name|getShowTblPropertiesDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|showTblProperties
operator|!=
literal|null
condition|)
block|{
return|return
name|showTableProperties
argument_list|(
name|db
argument_list|,
name|showTblProperties
argument_list|)
return|;
block|}
name|ShowFunctionsDesc
name|showFuncs
init|=
name|work
operator|.
name|getShowFuncsDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|showFuncs
operator|!=
literal|null
condition|)
block|{
return|return
name|showFunctions
argument_list|(
name|showFuncs
argument_list|)
return|;
block|}
name|ShowLocksDesc
name|showLocks
init|=
name|work
operator|.
name|getShowLocksDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|showLocks
operator|!=
literal|null
condition|)
block|{
return|return
name|showLocks
argument_list|(
name|showLocks
argument_list|)
return|;
block|}
name|ShowCompactionsDesc
name|compactionsDesc
init|=
name|work
operator|.
name|getShowCompactionsDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|compactionsDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|showCompactions
argument_list|(
name|compactionsDesc
argument_list|)
return|;
block|}
name|ShowTxnsDesc
name|txnsDesc
init|=
name|work
operator|.
name|getShowTxnsDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|txnsDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|showTxns
argument_list|(
name|txnsDesc
argument_list|)
return|;
block|}
name|LockTableDesc
name|lockTbl
init|=
name|work
operator|.
name|getLockTblDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockTbl
operator|!=
literal|null
condition|)
block|{
return|return
name|lockTable
argument_list|(
name|lockTbl
argument_list|)
return|;
block|}
name|UnlockTableDesc
name|unlockTbl
init|=
name|work
operator|.
name|getUnlockTblDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|unlockTbl
operator|!=
literal|null
condition|)
block|{
return|return
name|unlockTable
argument_list|(
name|unlockTbl
argument_list|)
return|;
block|}
name|ShowPartitionsDesc
name|showParts
init|=
name|work
operator|.
name|getShowPartsDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|showParts
operator|!=
literal|null
condition|)
block|{
return|return
name|showPartitions
argument_list|(
name|db
argument_list|,
name|showParts
argument_list|)
return|;
block|}
name|ShowCreateTableDesc
name|showCreateTbl
init|=
name|work
operator|.
name|getShowCreateTblDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|showCreateTbl
operator|!=
literal|null
condition|)
block|{
return|return
name|showCreateTable
argument_list|(
name|db
argument_list|,
name|showCreateTbl
argument_list|)
return|;
block|}
name|ShowConfDesc
name|showConf
init|=
name|work
operator|.
name|getShowConfDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|showConf
operator|!=
literal|null
condition|)
block|{
return|return
name|showConf
argument_list|(
name|db
argument_list|,
name|showConf
argument_list|)
return|;
block|}
name|RoleDDLDesc
name|roleDDLDesc
init|=
name|work
operator|.
name|getRoleDDLDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|roleDDLDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|roleDDL
argument_list|(
name|roleDDLDesc
argument_list|)
return|;
block|}
name|GrantDesc
name|grantDesc
init|=
name|work
operator|.
name|getGrantDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|grantDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|grantOrRevokePrivileges
argument_list|(
name|grantDesc
operator|.
name|getPrincipals
argument_list|()
argument_list|,
name|grantDesc
operator|.
name|getPrivileges
argument_list|()
argument_list|,
name|grantDesc
operator|.
name|getPrivilegeSubjectDesc
argument_list|()
argument_list|,
name|grantDesc
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|grantDesc
operator|.
name|getGrantorType
argument_list|()
argument_list|,
name|grantDesc
operator|.
name|isGrantOption
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
name|RevokeDesc
name|revokeDesc
init|=
name|work
operator|.
name|getRevokeDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|revokeDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|grantOrRevokePrivileges
argument_list|(
name|revokeDesc
operator|.
name|getPrincipals
argument_list|()
argument_list|,
name|revokeDesc
operator|.
name|getPrivileges
argument_list|()
argument_list|,
name|revokeDesc
operator|.
name|getPrivilegeSubjectDesc
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|revokeDesc
operator|.
name|isGrantOption
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|ShowGrantDesc
name|showGrantDesc
init|=
name|work
operator|.
name|getShowGrantDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|showGrantDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|showGrants
argument_list|(
name|showGrantDesc
argument_list|)
return|;
block|}
name|GrantRevokeRoleDDL
name|grantOrRevokeRoleDDL
init|=
name|work
operator|.
name|getGrantRevokeRoleDDL
argument_list|()
decl_stmt|;
if|if
condition|(
name|grantOrRevokeRoleDDL
operator|!=
literal|null
condition|)
block|{
return|return
name|grantOrRevokeRole
argument_list|(
name|grantOrRevokeRoleDDL
argument_list|)
return|;
block|}
name|ShowIndexesDesc
name|showIndexes
init|=
name|work
operator|.
name|getShowIndexesDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|showIndexes
operator|!=
literal|null
condition|)
block|{
return|return
name|showIndexes
argument_list|(
name|db
argument_list|,
name|showIndexes
argument_list|)
return|;
block|}
name|AlterTablePartMergeFilesDesc
name|mergeFilesDesc
init|=
name|work
operator|.
name|getMergeFilesDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|mergeFilesDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|mergeFiles
argument_list|(
name|db
argument_list|,
name|mergeFilesDesc
argument_list|)
return|;
block|}
name|AlterTableAlterPartDesc
name|alterPartDesc
init|=
name|work
operator|.
name|getAlterTableAlterPartDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|alterPartDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|alterTableAlterPart
argument_list|(
name|db
argument_list|,
name|alterPartDesc
argument_list|)
return|;
block|}
name|TruncateTableDesc
name|truncateTableDesc
init|=
name|work
operator|.
name|getTruncateTblDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|truncateTableDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|truncateTable
argument_list|(
name|db
argument_list|,
name|truncateTableDesc
argument_list|)
return|;
block|}
name|AlterTableExchangePartition
name|alterTableExchangePartition
init|=
name|work
operator|.
name|getAlterTableExchangePartition
argument_list|()
decl_stmt|;
if|if
condition|(
name|alterTableExchangePartition
operator|!=
literal|null
condition|)
block|{
return|return
name|exchangeTablePartition
argument_list|(
name|db
argument_list|,
name|alterTableExchangePartition
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
assert|assert
literal|false
assert|;
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|showConf
parameter_list|(
name|Hive
name|db
parameter_list|,
name|ShowConfDesc
name|showConf
parameter_list|)
throws|throws
name|Exception
block|{
name|ConfVars
name|conf
init|=
name|HiveConf
operator|.
name|getConfVars
argument_list|(
name|showConf
operator|.
name|getConfName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"invalid configuration name "
operator|+
name|showConf
operator|.
name|getConfName
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|description
init|=
name|conf
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|String
name|defaltValue
init|=
name|conf
operator|.
name|getDefaultValue
argument_list|()
decl_stmt|;
name|DataOutputStream
name|output
init|=
name|getOutputStream
argument_list|(
name|showConf
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|defaltValue
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|defaltValue
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|conf
operator|.
name|typeString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|description
operator|.
name|replaceAll
argument_list|(
literal|" *\n *"
argument_list|,
literal|" "
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|DataOutputStream
name|getOutputStream
parameter_list|(
name|Path
name|outputFile
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|outputFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|create
argument_list|(
name|outputFile
argument_list|)
return|;
block|}
comment|/**    * First, make sure the source table/partition is not    * archived/indexes/non-rcfile. If either of these is true, throw an    * exception.    *    * The way how it does the merge is to create a BlockMergeTask from the    * mergeFilesDesc.    *    * @param db    * @param mergeFilesDesc    * @return    * @throws HiveException    */
specifier|private
name|int
name|mergeFiles
parameter_list|(
name|Hive
name|db
parameter_list|,
name|AlterTablePartMergeFilesDesc
name|mergeFilesDesc
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// merge work only needs input and output.
name|MergeWork
name|mergeWork
init|=
operator|new
name|MergeWork
argument_list|(
name|mergeFilesDesc
operator|.
name|getInputDir
argument_list|()
argument_list|,
name|mergeFilesDesc
operator|.
name|getOutputDir
argument_list|()
argument_list|)
decl_stmt|;
name|mergeWork
operator|.
name|setListBucketingCtx
argument_list|(
name|mergeFilesDesc
operator|.
name|getLbCtx
argument_list|()
argument_list|)
expr_stmt|;
name|mergeWork
operator|.
name|resolveConcatenateMerge
argument_list|(
name|db
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|mergeWork
operator|.
name|setMapperCannotSpanPartns
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DriverContext
name|driverCxt
init|=
operator|new
name|DriverContext
argument_list|()
decl_stmt|;
name|BlockMergeTask
name|taskExec
init|=
operator|new
name|BlockMergeTask
argument_list|()
decl_stmt|;
name|taskExec
operator|.
name|initialize
argument_list|(
name|db
operator|.
name|getConf
argument_list|()
argument_list|,
literal|null
argument_list|,
name|driverCxt
argument_list|)
expr_stmt|;
name|taskExec
operator|.
name|setWork
argument_list|(
name|mergeWork
argument_list|)
expr_stmt|;
name|taskExec
operator|.
name|setQueryPlan
argument_list|(
name|this
operator|.
name|getQueryPlan
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|taskExec
operator|.
name|execute
argument_list|(
name|driverCxt
argument_list|)
decl_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|int
name|grantOrRevokeRole
parameter_list|(
name|GrantRevokeRoleDDL
name|grantOrRevokeRoleDDL
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|boolean
name|grantRole
init|=
name|grantOrRevokeRoleDDL
operator|.
name|getGrant
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PrincipalDesc
argument_list|>
name|principals
init|=
name|grantOrRevokeRoleDDL
operator|.
name|getPrincipalDesc
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|roles
init|=
name|grantOrRevokeRoleDDL
operator|.
name|getRoles
argument_list|()
decl_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isAuthorizationModeV2
argument_list|()
condition|)
block|{
return|return
name|grantOrRevokeRoleV2
argument_list|(
name|grantOrRevokeRoleDDL
argument_list|)
return|;
block|}
for|for
control|(
name|PrincipalDesc
name|principal
range|:
name|principals
control|)
block|{
name|String
name|userName
init|=
name|principal
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|roleName
range|:
name|roles
control|)
block|{
if|if
condition|(
name|grantRole
condition|)
block|{
name|db
operator|.
name|grantRole
argument_list|(
name|roleName
argument_list|,
name|userName
argument_list|,
name|principal
operator|.
name|getType
argument_list|()
argument_list|,
name|grantOrRevokeRoleDDL
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|grantOrRevokeRoleDDL
operator|.
name|getGrantorType
argument_list|()
argument_list|,
name|grantOrRevokeRoleDDL
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|db
operator|.
name|revokeRole
argument_list|(
name|roleName
argument_list|,
name|userName
argument_list|,
name|principal
operator|.
name|getType
argument_list|()
argument_list|,
name|grantOrRevokeRoleDDL
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|grantOrRevokeRoleV2
parameter_list|(
name|GrantRevokeRoleDDL
name|grantOrRevokeRoleDDL
parameter_list|)
throws|throws
name|HiveException
block|{
name|HiveAuthorizer
name|authorizer
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthorizerV2
argument_list|()
decl_stmt|;
comment|//convert to the types needed for plugin api
name|HivePrincipal
name|grantorPrinc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|grantOrRevokeRoleDDL
operator|.
name|getGrantor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|grantorPrinc
operator|=
operator|new
name|HivePrincipal
argument_list|(
name|grantOrRevokeRoleDDL
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|getHivePrincipalType
argument_list|(
name|grantOrRevokeRoleDDL
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|HivePrincipal
argument_list|>
name|hivePrincipals
init|=
name|getHivePrincipals
argument_list|(
name|grantOrRevokeRoleDDL
operator|.
name|getPrincipalDesc
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|roles
init|=
name|grantOrRevokeRoleDDL
operator|.
name|getRoles
argument_list|()
decl_stmt|;
if|if
condition|(
name|grantOrRevokeRoleDDL
operator|.
name|getGrant
argument_list|()
condition|)
block|{
name|authorizer
operator|.
name|grantRole
argument_list|(
name|hivePrincipals
argument_list|,
name|roles
argument_list|,
name|grantOrRevokeRoleDDL
operator|.
name|isGrantOption
argument_list|()
argument_list|,
name|grantorPrinc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authorizer
operator|.
name|revokeRole
argument_list|(
name|hivePrincipals
argument_list|,
name|roles
argument_list|,
name|grantOrRevokeRoleDDL
operator|.
name|isGrantOption
argument_list|()
argument_list|,
name|grantorPrinc
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|showGrants
parameter_list|(
name|ShowGrantDesc
name|showGrantDesc
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isAuthorizationModeV2
argument_list|()
condition|)
block|{
return|return
name|showGrantsV2
argument_list|(
name|showGrantDesc
argument_list|)
return|;
block|}
name|PrincipalDesc
name|principalDesc
init|=
name|showGrantDesc
operator|.
name|getPrincipalDesc
argument_list|()
decl_stmt|;
name|PrivilegeObjectDesc
name|hiveObjectDesc
init|=
name|showGrantDesc
operator|.
name|getHiveObj
argument_list|()
decl_stmt|;
name|String
name|principalName
init|=
name|principalDesc
operator|==
literal|null
condition|?
literal|null
else|:
name|principalDesc
operator|.
name|getName
argument_list|()
decl_stmt|;
name|PrincipalType
name|type
init|=
name|principalDesc
operator|==
literal|null
condition|?
literal|null
else|:
name|principalDesc
operator|.
name|getType
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privs
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|hiveObjectDesc
operator|==
literal|null
condition|)
block|{
name|privs
operator|.
name|addAll
argument_list|(
name|db
operator|.
name|showPrivilegeGrant
argument_list|(
name|HiveObjectType
operator|.
name|GLOBAL
argument_list|,
name|principalName
argument_list|,
name|type
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hiveObjectDesc
operator|!=
literal|null
operator|&&
name|hiveObjectDesc
operator|.
name|getObject
argument_list|()
operator|==
literal|null
condition|)
block|{
name|privs
operator|.
name|addAll
argument_list|(
name|db
operator|.
name|showPrivilegeGrant
argument_list|(
literal|null
argument_list|,
name|principalName
argument_list|,
name|type
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|obj
init|=
name|hiveObjectDesc
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|boolean
name|notFound
init|=
literal|true
decl_stmt|;
name|String
name|dbName
init|=
literal|null
decl_stmt|;
name|String
name|tableName
init|=
literal|null
decl_stmt|;
name|Table
name|tableObj
init|=
literal|null
decl_stmt|;
name|Database
name|dbObj
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hiveObjectDesc
operator|.
name|getTable
argument_list|()
condition|)
block|{
name|String
index|[]
name|dbTab
init|=
name|splitTableName
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|dbName
operator|=
name|dbTab
index|[
literal|0
index|]
expr_stmt|;
name|tableName
operator|=
name|dbTab
index|[
literal|1
index|]
expr_stmt|;
name|dbObj
operator|=
name|db
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tableObj
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|notFound
operator|=
operator|(
name|dbObj
operator|==
literal|null
operator|||
name|tableObj
operator|==
literal|null
operator|)
expr_stmt|;
block|}
else|else
block|{
name|dbName
operator|=
name|hiveObjectDesc
operator|.
name|getObject
argument_list|()
expr_stmt|;
name|dbObj
operator|=
name|db
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|notFound
operator|=
operator|(
name|dbObj
operator|==
literal|null
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|notFound
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|obj
operator|+
literal|" can not be found"
argument_list|)
throw|;
block|}
name|String
name|partName
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partValues
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hiveObjectDesc
operator|.
name|getPartSpec
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|partName
operator|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|hiveObjectDesc
operator|.
name|getPartSpec
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|partValues
operator|=
name|Warehouse
operator|.
name|getPartValuesFromPartName
argument_list|(
name|partName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hiveObjectDesc
operator|.
name|getTable
argument_list|()
condition|)
block|{
comment|// show database level privileges
name|privs
operator|.
name|addAll
argument_list|(
name|db
operator|.
name|showPrivilegeGrant
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|principalName
argument_list|,
name|type
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|showGrantDesc
operator|.
name|getColumns
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// show column level privileges
for|for
control|(
name|String
name|columnName
range|:
name|showGrantDesc
operator|.
name|getColumns
argument_list|()
control|)
block|{
name|privs
operator|.
name|addAll
argument_list|(
name|db
operator|.
name|showPrivilegeGrant
argument_list|(
name|HiveObjectType
operator|.
name|COLUMN
argument_list|,
name|principalName
argument_list|,
name|type
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partValues
argument_list|,
name|columnName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObjectDesc
operator|.
name|getPartSpec
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// show partition level privileges
name|privs
operator|.
name|addAll
argument_list|(
name|db
operator|.
name|showPrivilegeGrant
argument_list|(
name|HiveObjectType
operator|.
name|PARTITION
argument_list|,
name|principalName
argument_list|,
name|type
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partValues
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// show table level privileges
name|privs
operator|.
name|addAll
argument_list|(
name|db
operator|.
name|showPrivilegeGrant
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|principalName
argument_list|,
name|type
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|testMode
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
decl_stmt|;
name|writeToFile
argument_list|(
name|writeGrantInfo
argument_list|(
name|privs
argument_list|,
name|testMode
argument_list|)
argument_list|,
name|showGrantDesc
operator|.
name|getResFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"show table status: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"show table status: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|splitTableName
parameter_list|(
name|String
name|fullName
parameter_list|)
block|{
name|String
index|[]
name|dbTab
init|=
name|fullName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|dbTab
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|result
index|[
literal|0
index|]
operator|=
name|dbTab
index|[
literal|0
index|]
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
name|dbTab
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|result
index|[
literal|0
index|]
operator|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
name|fullName
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|int
name|showGrantsV2
parameter_list|(
name|ShowGrantDesc
name|showGrantDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|HiveAuthorizer
name|authorizer
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthorizerV2
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|HivePrivilegeInfo
argument_list|>
name|privInfos
init|=
name|authorizer
operator|.
name|showPrivileges
argument_list|(
name|getHivePrincipal
argument_list|(
name|showGrantDesc
operator|.
name|getPrincipalDesc
argument_list|()
argument_list|)
argument_list|,
name|getHivePrivilegeObject
argument_list|(
name|showGrantDesc
operator|.
name|getHiveObj
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privList
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HivePrivilegeInfo
name|privInfo
range|:
name|privInfos
control|)
block|{
name|HivePrincipal
name|principal
init|=
name|privInfo
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|HivePrivilegeObject
name|privObj
init|=
name|privInfo
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|HivePrivilege
name|priv
init|=
name|privInfo
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
name|PrivilegeGrantInfo
name|grantInfo
init|=
name|AuthorizationUtils
operator|.
name|getThriftPrivilegeGrantInfo
argument_list|(
name|priv
argument_list|,
name|privInfo
operator|.
name|getGrantorPrincipal
argument_list|()
argument_list|,
name|privInfo
operator|.
name|isGrantOption
argument_list|()
argument_list|,
name|privInfo
operator|.
name|getGrantTime
argument_list|()
argument_list|)
decl_stmt|;
comment|//only grantInfo is used
name|HiveObjectPrivilege
name|thriftObjectPriv
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|AuthorizationUtils
operator|.
name|getThriftHiveObjType
argument_list|(
name|privObj
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|privObj
operator|.
name|getDbname
argument_list|()
argument_list|,
name|privObj
operator|.
name|getTableViewURI
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|AuthorizationUtils
operator|.
name|getThriftPrincipalType
argument_list|(
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|grantInfo
argument_list|)
decl_stmt|;
name|privList
operator|.
name|add
argument_list|(
name|thriftObjectPriv
argument_list|)
expr_stmt|;
block|}
name|boolean
name|testMode
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
decl_stmt|;
name|writeToFile
argument_list|(
name|writeGrantInfo
argument_list|(
name|privList
argument_list|,
name|testMode
argument_list|)
argument_list|,
name|showGrantDesc
operator|.
name|getResFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Error in show grant statement"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|grantOrRevokePrivileges
parameter_list|(
name|List
argument_list|<
name|PrincipalDesc
argument_list|>
name|principals
parameter_list|,
name|List
argument_list|<
name|PrivilegeDesc
argument_list|>
name|privileges
parameter_list|,
name|PrivilegeObjectDesc
name|privSubjectDesc
parameter_list|,
name|String
name|grantor
parameter_list|,
name|PrincipalType
name|grantorType
parameter_list|,
name|boolean
name|grantOption
parameter_list|,
name|boolean
name|isGrant
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isAuthorizationModeV2
argument_list|()
condition|)
block|{
return|return
name|grantOrRevokePrivilegesV2
argument_list|(
name|principals
argument_list|,
name|privileges
argument_list|,
name|privSubjectDesc
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|,
name|isGrant
argument_list|)
return|;
block|}
if|if
condition|(
name|privileges
operator|==
literal|null
operator|||
name|privileges
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"No privilege found."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|String
name|dbName
init|=
literal|null
decl_stmt|;
name|String
name|tableName
init|=
literal|null
decl_stmt|;
name|Table
name|tableObj
init|=
literal|null
decl_stmt|;
name|Database
name|dbObj
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|privSubjectDesc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|privSubjectDesc
operator|.
name|getPartSpec
argument_list|()
operator|!=
literal|null
operator|&&
name|isGrant
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Grant does not support partition level."
argument_list|)
throw|;
block|}
name|String
name|obj
init|=
name|privSubjectDesc
operator|.
name|getObject
argument_list|()
decl_stmt|;
comment|//get the db, table objects
if|if
condition|(
name|privSubjectDesc
operator|.
name|getTable
argument_list|()
condition|)
block|{
name|String
index|[]
name|dbTable
init|=
name|Utilities
operator|.
name|getDbTableName
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|dbName
operator|=
name|dbTable
index|[
literal|0
index|]
expr_stmt|;
name|tableName
operator|=
name|dbTable
index|[
literal|1
index|]
expr_stmt|;
name|dbObj
operator|=
name|db
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbObj
operator|==
literal|null
condition|)
block|{
name|throwNotFound
argument_list|(
literal|"Database"
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
block|}
name|tableObj
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableObj
operator|==
literal|null
condition|)
block|{
name|throwNotFound
argument_list|(
literal|"Table"
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|dbName
operator|=
name|privSubjectDesc
operator|.
name|getObject
argument_list|()
expr_stmt|;
name|dbObj
operator|=
name|db
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbObj
operator|==
literal|null
condition|)
block|{
name|throwNotFound
argument_list|(
literal|"Database"
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|PrivilegeBag
name|privBag
init|=
operator|new
name|PrivilegeBag
argument_list|()
decl_stmt|;
if|if
condition|(
name|privSubjectDesc
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|privileges
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|Privilege
name|priv
init|=
name|privileges
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
if|if
condition|(
name|privileges
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getColumns
argument_list|()
operator|!=
literal|null
operator|&&
name|privileges
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"For user-level privileges, column sets should be null. columns="
operator|+
name|privileges
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getColumns
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|privBag
operator|.
name|addToPrivileges
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|GLOBAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|priv
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
name|partObj
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partValues
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tableObj
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
operator|!
name|tableObj
operator|.
name|isPartitioned
argument_list|()
operator|)
operator|&&
name|privSubjectDesc
operator|.
name|getPartSpec
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Table is not partitioned, but partition name is present: partSpec="
operator|+
name|privSubjectDesc
operator|.
name|getPartSpec
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|privSubjectDesc
operator|.
name|getPartSpec
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|partObj
operator|=
name|db
operator|.
name|getPartition
argument_list|(
name|tableObj
argument_list|,
name|privSubjectDesc
operator|.
name|getPartSpec
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|getTPartition
argument_list|()
expr_stmt|;
name|partValues
operator|=
name|partObj
operator|.
name|getValues
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|PrivilegeDesc
name|privDesc
range|:
name|privileges
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
name|privDesc
operator|.
name|getColumns
argument_list|()
decl_stmt|;
name|Privilege
name|priv
init|=
name|privDesc
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
name|columns
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|priv
operator|.
name|supportColumnLevel
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|priv
operator|.
name|toString
argument_list|()
operator|+
literal|" does not support column level."
argument_list|)
throw|;
block|}
if|if
condition|(
name|privSubjectDesc
operator|==
literal|null
operator|||
name|tableName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"For user-level/database-level privileges, column sets should be null. columns="
operator|+
name|columns
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|privBag
operator|.
name|addToPrivileges
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|COLUMN
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partValues
argument_list|,
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|priv
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|privSubjectDesc
operator|.
name|getTable
argument_list|()
condition|)
block|{
if|if
condition|(
name|privSubjectDesc
operator|.
name|getPartSpec
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|privBag
operator|.
name|addToPrivileges
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|PARTITION
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partValues
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|priv
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|privBag
operator|.
name|addToPrivileges
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|priv
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|privBag
operator|.
name|addToPrivileges
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|priv
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|PrincipalDesc
name|principal
range|:
name|principals
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|privBag
operator|.
name|getPrivileges
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|HiveObjectPrivilege
name|objPrivs
init|=
name|privBag
operator|.
name|getPrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|objPrivs
operator|.
name|setPrincipalName
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|objPrivs
operator|.
name|setPrincipalType
argument_list|(
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isGrant
condition|)
block|{
name|db
operator|.
name|grantPrivileges
argument_list|(
name|privBag
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|db
operator|.
name|revokePrivileges
argument_list|(
name|privBag
argument_list|,
name|grantOption
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|grantOrRevokePrivilegesV2
parameter_list|(
name|List
argument_list|<
name|PrincipalDesc
argument_list|>
name|principals
parameter_list|,
name|List
argument_list|<
name|PrivilegeDesc
argument_list|>
name|privileges
parameter_list|,
name|PrivilegeObjectDesc
name|privSubjectDesc
parameter_list|,
name|String
name|grantor
parameter_list|,
name|PrincipalType
name|grantorType
parameter_list|,
name|boolean
name|grantOption
parameter_list|,
name|boolean
name|isGrant
parameter_list|)
throws|throws
name|HiveException
block|{
name|HiveAuthorizer
name|authorizer
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthorizerV2
argument_list|()
decl_stmt|;
comment|//Convert to object types used by the authorization plugin interface
name|List
argument_list|<
name|HivePrincipal
argument_list|>
name|hivePrincipals
init|=
name|getHivePrincipals
argument_list|(
name|principals
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HivePrivilege
argument_list|>
name|hivePrivileges
init|=
name|getHivePrivileges
argument_list|(
name|privileges
argument_list|)
decl_stmt|;
name|HivePrivilegeObject
name|hivePrivObject
init|=
name|getHivePrivilegeObject
argument_list|(
name|privSubjectDesc
argument_list|)
decl_stmt|;
name|HivePrincipal
name|grantorPrincipal
init|=
operator|new
name|HivePrincipal
argument_list|(
name|grantor
argument_list|,
name|getHivePrincipalType
argument_list|(
name|grantorType
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isGrant
condition|)
block|{
name|authorizer
operator|.
name|grantPrivileges
argument_list|(
name|hivePrincipals
argument_list|,
name|hivePrivileges
argument_list|,
name|hivePrivObject
argument_list|,
name|grantorPrincipal
argument_list|,
name|grantOption
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authorizer
operator|.
name|revokePrivileges
argument_list|(
name|hivePrincipals
argument_list|,
name|hivePrivileges
argument_list|,
name|hivePrivObject
argument_list|,
name|grantorPrincipal
argument_list|,
name|grantOption
argument_list|)
expr_stmt|;
block|}
comment|//no exception thrown, so looks good
return|return
literal|0
return|;
block|}
specifier|private
name|HivePrivilegeObject
name|getHivePrivilegeObject
parameter_list|(
name|PrivilegeObjectDesc
name|privSubjectDesc
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|privSubjectDesc
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|HivePrivilegeObject
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|String
index|[]
name|dbTable
init|=
name|Utilities
operator|.
name|getDbTableName
argument_list|(
name|privSubjectDesc
operator|.
name|getObject
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|HivePrivilegeObject
argument_list|(
name|getPrivObjectType
argument_list|(
name|privSubjectDesc
argument_list|)
argument_list|,
name|dbTable
index|[
literal|0
index|]
argument_list|,
name|dbTable
index|[
literal|1
index|]
argument_list|)
return|;
block|}
specifier|private
name|HivePrincipalType
name|getHivePrincipalType
parameter_list|(
name|PrincipalType
name|type
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|USER
case|:
return|return
name|HivePrincipalType
operator|.
name|USER
return|;
case|case
name|ROLE
case|:
return|return
name|HivePrincipalType
operator|.
name|ROLE
return|;
case|case
name|GROUP
case|:
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|UNNSUPPORTED_AUTHORIZATION_PRINCIPAL_TYPE_GROUP
argument_list|)
throw|;
default|default:
comment|//should not happen as we take care of all existing types
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unsupported authorization type specified"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|HivePrivilegeObjectType
name|getPrivObjectType
parameter_list|(
name|PrivilegeObjectDesc
name|privSubjectDesc
parameter_list|)
block|{
if|if
condition|(
name|privSubjectDesc
operator|.
name|getObject
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|privSubjectDesc
operator|.
name|getTable
argument_list|()
condition|?
name|HivePrivilegeObjectType
operator|.
name|TABLE_OR_VIEW
else|:
name|HivePrivilegeObjectType
operator|.
name|DATABASE
return|;
block|}
specifier|private
name|List
argument_list|<
name|HivePrivilege
argument_list|>
name|getHivePrivileges
parameter_list|(
name|List
argument_list|<
name|PrivilegeDesc
argument_list|>
name|privileges
parameter_list|)
block|{
name|List
argument_list|<
name|HivePrivilege
argument_list|>
name|hivePrivileges
init|=
operator|new
name|ArrayList
argument_list|<
name|HivePrivilege
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PrivilegeDesc
name|privilege
range|:
name|privileges
control|)
block|{
name|hivePrivileges
operator|.
name|add
argument_list|(
operator|new
name|HivePrivilege
argument_list|(
name|privilege
operator|.
name|getPrivilege
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|privilege
operator|.
name|getColumns
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|hivePrivileges
return|;
block|}
specifier|private
name|List
argument_list|<
name|HivePrincipal
argument_list|>
name|getHivePrincipals
parameter_list|(
name|List
argument_list|<
name|PrincipalDesc
argument_list|>
name|principals
parameter_list|)
throws|throws
name|HiveException
block|{
name|ArrayList
argument_list|<
name|HivePrincipal
argument_list|>
name|hivePrincipals
init|=
operator|new
name|ArrayList
argument_list|<
name|HivePrincipal
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PrincipalDesc
name|principal
range|:
name|principals
control|)
block|{
name|hivePrincipals
operator|.
name|add
argument_list|(
name|getHivePrincipal
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|hivePrincipals
return|;
block|}
specifier|private
name|HivePrincipal
name|getHivePrincipal
parameter_list|(
name|PrincipalDesc
name|principal
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|HivePrincipal
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|AuthorizationUtils
operator|.
name|getHivePrincipalType
argument_list|(
name|principal
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|throwNotFound
parameter_list|(
name|String
name|objType
parameter_list|,
name|String
name|objName
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|objType
operator|+
literal|" "
operator|+
name|objName
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
specifier|private
name|int
name|roleDDL
parameter_list|(
name|RoleDDLDesc
name|roleDDLDesc
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
block|{
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isAuthorizationModeV2
argument_list|()
condition|)
block|{
return|return
name|roleDDLV2
argument_list|(
name|roleDDLDesc
argument_list|)
return|;
block|}
name|DataOutputStream
name|outStream
init|=
literal|null
decl_stmt|;
name|RoleDDLDesc
operator|.
name|RoleOperation
name|operation
init|=
name|roleDDLDesc
operator|.
name|getOperation
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
name|RoleDDLDesc
operator|.
name|RoleOperation
operator|.
name|CREATE_ROLE
argument_list|)
condition|)
block|{
name|db
operator|.
name|createRole
argument_list|(
name|roleDDLDesc
operator|.
name|getName
argument_list|()
argument_list|,
name|roleDDLDesc
operator|.
name|getRoleOwnerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
name|RoleDDLDesc
operator|.
name|RoleOperation
operator|.
name|DROP_ROLE
argument_list|)
condition|)
block|{
name|db
operator|.
name|dropRole
argument_list|(
name|roleDDLDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
name|RoleDDLDesc
operator|.
name|RoleOperation
operator|.
name|SHOW_ROLE_GRANT
argument_list|)
condition|)
block|{
name|boolean
name|testMode
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|roleGrants
init|=
name|db
operator|.
name|getRoleGrantInfoForPrincipal
argument_list|(
name|roleDDLDesc
operator|.
name|getName
argument_list|()
argument_list|,
name|roleDDLDesc
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
decl_stmt|;
name|writeToFile
argument_list|(
name|writeRoleGrantsInfo
argument_list|(
name|roleGrants
argument_list|,
name|testMode
argument_list|)
argument_list|,
name|roleDDLDesc
operator|.
name|getResFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
name|RoleDDLDesc
operator|.
name|RoleOperation
operator|.
name|SHOW_ROLES
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|roleNames
init|=
name|db
operator|.
name|getAllRoleNames
argument_list|()
decl_stmt|;
comment|//sort the list to get sorted (deterministic) output (for ease of testing)
name|Collections
operator|.
name|sort
argument_list|(
name|roleNames
argument_list|)
expr_stmt|;
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|roleDDLDesc
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|outStream
operator|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|roleName
range|:
name|roleNames
control|)
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStream
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
name|RoleDDLDesc
operator|.
name|RoleOperation
operator|.
name|SHOW_ROLE_PRINCIPALS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Show role principals is not currently supported in "
operator|+
literal|"authorization mode V1"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unkown role operation "
operator|+
name|operation
operator|.
name|getOperationName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Error in role operation "
operator|+
name|operation
operator|.
name|getOperationName
argument_list|()
operator|+
literal|" on role name "
operator|+
name|roleDDLDesc
operator|.
name|getName
argument_list|()
operator|+
literal|", error message "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"role ddl exception: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|roleDDLV2
parameter_list|(
name|RoleDDLDesc
name|roleDDLDesc
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
block|{
name|HiveAuthorizer
name|authorizer
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthorizerV2
argument_list|()
decl_stmt|;
name|RoleDDLDesc
operator|.
name|RoleOperation
name|operation
init|=
name|roleDDLDesc
operator|.
name|getOperation
argument_list|()
decl_stmt|;
comment|//call the appropriate hive authorizer function
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|CREATE_ROLE
case|:
name|authorizer
operator|.
name|createRole
argument_list|(
name|roleDDLDesc
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
case|case
name|DROP_ROLE
case|:
name|authorizer
operator|.
name|dropRole
argument_list|(
name|roleDDLDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_ROLE_GRANT
case|:
name|boolean
name|testMode
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HiveRoleGrant
argument_list|>
name|roles
init|=
name|authorizer
operator|.
name|getRoleGrantInfoForPrincipal
argument_list|(
operator|new
name|HivePrincipal
argument_list|(
name|roleDDLDesc
operator|.
name|getName
argument_list|()
argument_list|,
name|getHivePrincipalType
argument_list|(
name|roleDDLDesc
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|writeToFile
argument_list|(
name|writeRolesGrantedInfo
argument_list|(
name|roles
argument_list|,
name|testMode
argument_list|)
argument_list|,
name|roleDDLDesc
operator|.
name|getResFile
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_ROLES
case|:
name|List
argument_list|<
name|String
argument_list|>
name|allRoles
init|=
name|authorizer
operator|.
name|getAllRoles
argument_list|()
decl_stmt|;
name|writeListToFileAfterSort
argument_list|(
name|allRoles
argument_list|,
name|roleDDLDesc
operator|.
name|getResFile
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_CURRENT_ROLE
case|:
name|List
argument_list|<
name|String
argument_list|>
name|roleNames
init|=
name|authorizer
operator|.
name|getCurrentRoleNames
argument_list|()
decl_stmt|;
name|writeListToFileAfterSort
argument_list|(
name|roleNames
argument_list|,
name|roleDDLDesc
operator|.
name|getResFile
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SET_ROLE
case|:
name|authorizer
operator|.
name|setCurrentRole
argument_list|(
name|roleDDLDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_ROLE_PRINCIPALS
case|:
name|testMode
operator|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveRoleGrant
argument_list|>
name|roleGrants
init|=
name|authorizer
operator|.
name|getPrincipalGrantInfoForRole
argument_list|(
name|roleDDLDesc
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|writeToFile
argument_list|(
name|writeHiveRoleGrantInfo
argument_list|(
name|roleGrants
argument_list|,
name|testMode
argument_list|)
argument_list|,
name|roleDDLDesc
operator|.
name|getResFile
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unkown role operation "
operator|+
name|operation
operator|.
name|getOperationName
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|String
name|writeHiveRoleGrantInfo
parameter_list|(
name|List
argument_list|<
name|HiveRoleGrant
argument_list|>
name|roleGrants
parameter_list|,
name|boolean
name|testMode
parameter_list|)
block|{
if|if
condition|(
name|roleGrants
operator|==
literal|null
operator|||
name|roleGrants
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// sort the list to get sorted (deterministic) output (for ease of testing)
name|Collections
operator|.
name|sort
argument_list|(
name|roleGrants
argument_list|)
expr_stmt|;
for|for
control|(
name|HiveRoleGrant
name|roleGrant
range|:
name|roleGrants
control|)
block|{
comment|// schema:
comment|// principal_name,principal_type,grant_option,grantor,grantor_type,grant_time
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|roleGrant
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|roleGrant
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|roleGrant
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|roleGrant
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|roleGrant
operator|.
name|getGrantorType
argument_list|()
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|testMode
condition|?
operator|-
literal|1
else|:
name|roleGrant
operator|.
name|getGrantTime
argument_list|()
operator|*
literal|1000L
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Write list of string entries into given file    * @param entries    * @param resFile    * @throws IOException    */
specifier|private
name|void
name|writeListToFileAfterSort
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|entries
parameter_list|,
name|String
name|resFile
parameter_list|)
throws|throws
name|IOException
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|entry
range|:
name|entries
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|terminator
argument_list|)
expr_stmt|;
block|}
name|writeToFile
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|resFile
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|alterDatabase
parameter_list|(
name|AlterDatabaseDesc
name|alterDbDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|dbName
init|=
name|alterDbDesc
operator|.
name|getDatabaseName
argument_list|()
decl_stmt|;
name|Database
name|database
init|=
name|db
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|database
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|DATABASE_NOT_EXISTS
argument_list|,
name|dbName
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|alterDbDesc
operator|.
name|getAlterType
argument_list|()
condition|)
block|{
case|case
name|ALTER_PROPERTY
case|:
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newParams
init|=
name|alterDbDesc
operator|.
name|getDatabaseProperties
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|database
operator|.
name|getParameters
argument_list|()
decl_stmt|;
comment|// if both old and new params are not null, merge them
if|if
condition|(
name|params
operator|!=
literal|null
operator|&&
name|newParams
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|putAll
argument_list|(
name|newParams
argument_list|)
expr_stmt|;
name|database
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if one of them is null, replace the old params with the new one
name|database
operator|.
name|setParameters
argument_list|(
name|newParams
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ALTER_OWNER
case|:
name|database
operator|.
name|setOwnerName
argument_list|(
name|alterDbDesc
operator|.
name|getOwnerPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|setOwnerType
argument_list|(
name|alterDbDesc
operator|.
name|getOwnerPrincipal
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unsupported alter database type! : "
operator|+
name|alterDbDesc
operator|.
name|getAlterType
argument_list|()
argument_list|)
throw|;
block|}
name|db
operator|.
name|alterDatabase
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|,
name|database
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|dropIndex
parameter_list|(
name|Hive
name|db
parameter_list|,
name|DropIndexDesc
name|dropIdx
parameter_list|)
throws|throws
name|HiveException
block|{
name|db
operator|.
name|dropIndex
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|,
name|dropIdx
operator|.
name|getTableName
argument_list|()
argument_list|,
name|dropIdx
operator|.
name|getIndexName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|createIndex
parameter_list|(
name|Hive
name|db
parameter_list|,
name|CreateIndexDesc
name|crtIndex
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|crtIndex
operator|.
name|getSerde
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|validateSerDe
argument_list|(
name|crtIndex
operator|.
name|getSerde
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|indexTableName
init|=
name|crtIndex
operator|.
name|getIndexTableName
argument_list|()
operator|!=
literal|null
condition|?
name|crtIndex
operator|.
name|getIndexTableName
argument_list|()
else|:
name|MetaStoreUtils
operator|.
name|getIndexTableName
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getTableName
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getIndexName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Utilities
operator|.
name|isDefaultNameNode
argument_list|(
name|conf
argument_list|)
condition|)
block|{
comment|// If location is specified - ensure that it is a full qualified name
name|makeLocationQualified
argument_list|(
name|crtIndex
argument_list|,
name|indexTableName
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|createIndex
argument_list|(
name|crtIndex
operator|.
name|getTableName
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getIndexName
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getIndexTypeHandlerClass
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getIndexedCols
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getIndexTableName
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getDeferredRebuild
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getInputFormat
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getOutputFormat
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getSerde
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getStorageHandler
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getLocation
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getIdxProps
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getTblProps
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getSerdeProps
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getCollItemDelim
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getFieldDelim
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getFieldEscape
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getLineDelim
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getMapKeyDelim
argument_list|()
argument_list|,
name|crtIndex
operator|.
name|getIndexComment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|HiveUtils
operator|.
name|getIndexHandler
argument_list|(
name|conf
argument_list|,
name|crtIndex
operator|.
name|getIndexTypeHandlerClass
argument_list|()
argument_list|)
operator|.
name|usesIndexTable
argument_list|()
condition|)
block|{
name|Table
name|indexTable
init|=
name|db
operator|.
name|getTable
argument_list|(
name|indexTableName
argument_list|)
decl_stmt|;
name|work
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|indexTable
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|alterIndex
parameter_list|(
name|Hive
name|db
parameter_list|,
name|AlterIndexDesc
name|alterIndex
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|dbName
init|=
name|alterIndex
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|baseTableName
init|=
name|alterIndex
operator|.
name|getBaseTableName
argument_list|()
decl_stmt|;
name|String
name|indexName
init|=
name|alterIndex
operator|.
name|getIndexName
argument_list|()
decl_stmt|;
name|Index
name|idx
init|=
name|db
operator|.
name|getIndex
argument_list|(
name|dbName
argument_list|,
name|baseTableName
argument_list|,
name|indexName
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|alterIndex
operator|.
name|getOp
argument_list|()
condition|)
block|{
case|case
name|ADDPROPS
case|:
name|idx
operator|.
name|getParameters
argument_list|()
operator|.
name|putAll
argument_list|(
name|alterIndex
operator|.
name|getProps
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPDATETIMESTAMP
case|:
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|,
name|Long
argument_list|>
name|basePartTs
init|=
operator|new
name|HashMap
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Table
name|baseTbl
init|=
name|db
operator|.
name|getTable
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|,
name|baseTableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseTbl
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|baseParts
decl_stmt|;
if|if
condition|(
name|alterIndex
operator|.
name|getSpec
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|baseParts
operator|=
name|db
operator|.
name|getPartitions
argument_list|(
name|baseTbl
argument_list|,
name|alterIndex
operator|.
name|getSpec
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|baseParts
operator|=
name|db
operator|.
name|getPartitions
argument_list|(
name|baseTbl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|baseParts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Partition
name|p
range|:
name|baseParts
control|)
block|{
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getDataLocation
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|db
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|fss
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
operator|.
name|getDataLocation
argument_list|()
argument_list|)
decl_stmt|;
name|basePartTs
operator|.
name|put
argument_list|(
name|p
operator|.
name|getSpec
argument_list|()
argument_list|,
name|fss
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|FileSystem
name|fs
init|=
name|baseTbl
operator|.
name|getPath
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|db
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|fss
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|baseTbl
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|basePartTs
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|fss
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|spec
range|:
name|basePartTs
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|spec
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|spec
operator|.
name|toString
argument_list|()
argument_list|,
name|basePartTs
operator|.
name|get
argument_list|(
name|spec
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|props
operator|.
name|put
argument_list|(
literal|"base_timestamp"
argument_list|,
name|basePartTs
operator|.
name|get
argument_list|(
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|idx
operator|.
name|getParameters
argument_list|()
operator|.
name|putAll
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"ERROR: Failed to update index timestamps"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"ERROR: Failed to look up timestamps on filesystem"
argument_list|)
throw|;
block|}
break|break;
default|default:
name|console
operator|.
name|printError
argument_list|(
literal|"Unsupported Alter commnad"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
comment|// set last modified by properties
if|if
condition|(
operator|!
name|updateModifiedParameters
argument_list|(
name|idx
operator|.
name|getParameters
argument_list|()
argument_list|,
name|conf
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
try|try
block|{
name|db
operator|.
name|alterIndex
argument_list|(
name|dbName
argument_list|,
name|baseTableName
argument_list|,
name|indexName
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Invalid alter operation: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"alter index: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Invalid alter operation: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Add a partitions to a table.    *    * @param db    *          Database to add the partition to.    * @param addPartitionDesc    *          Add these partitions.    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    */
specifier|private
name|int
name|addPartitions
parameter_list|(
name|Hive
name|db
parameter_list|,
name|AddPartitionDesc
name|addPartitionDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|db
operator|.
name|createPartitions
argument_list|(
name|addPartitionDesc
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|work
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|part
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|INSERT
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Rename a partition in a table    *    * @param db    *          Database to rename the partition.    * @param renamePartitionDesc    *          rename old Partition to new one.    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    */
specifier|private
name|int
name|renamePartition
parameter_list|(
name|Hive
name|db
parameter_list|,
name|RenamePartitionDesc
name|renamePartitionDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|Table
name|tbl
init|=
name|db
operator|.
name|getTable
argument_list|(
name|renamePartitionDesc
operator|.
name|getDbName
argument_list|()
argument_list|,
name|renamePartitionDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Partition
name|oldPart
init|=
name|db
operator|.
name|getPartition
argument_list|(
name|tbl
argument_list|,
name|renamePartitionDesc
operator|.
name|getOldPartSpec
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Partition
name|part
init|=
name|db
operator|.
name|getPartition
argument_list|(
name|tbl
argument_list|,
name|renamePartitionDesc
operator|.
name|getOldPartSpec
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|part
operator|.
name|setValues
argument_list|(
name|renamePartitionDesc
operator|.
name|getNewPartSpec
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|renamePartition
argument_list|(
name|tbl
argument_list|,
name|renamePartitionDesc
operator|.
name|getOldPartSpec
argument_list|()
argument_list|,
name|part
argument_list|)
expr_stmt|;
name|Partition
name|newPart
init|=
name|db
operator|.
name|getPartition
argument_list|(
name|tbl
argument_list|,
name|renamePartitionDesc
operator|.
name|getNewPartSpec
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|work
operator|.
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|oldPart
argument_list|)
argument_list|)
expr_stmt|;
comment|// We've already obtained a lock on the table, don't lock the partition too
name|work
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|newPart
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Alter partition column type in a table    *    * @param db    *          Database to rename the partition.    * @param alterPartitionDesc    *          change partition column type.    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    */
specifier|private
name|int
name|alterTableAlterPart
parameter_list|(
name|Hive
name|db
parameter_list|,
name|AlterTableAlterPartDesc
name|alterPartitionDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|Table
name|tbl
init|=
name|db
operator|.
name|getTable
argument_list|(
name|alterPartitionDesc
operator|.
name|getDbName
argument_list|()
argument_list|,
name|alterPartitionDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tabName
init|=
name|alterPartitionDesc
operator|.
name|getTableName
argument_list|()
decl_stmt|;
comment|// This is checked by DDLSemanticAnalyzer
assert|assert
operator|(
name|tbl
operator|.
name|isPartitioned
argument_list|()
operator|)
assert|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newPartitionKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
comment|//Check if the existing partition values can be type casted to the new column type
comment|// with a non null value before trying to alter the partition column type.
try|try
block|{
name|Set
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|db
operator|.
name|getAllPartitionsOf
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
name|int
name|colIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|FieldSchema
name|col
range|:
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|colIndex
operator|++
expr_stmt|;
if|if
condition|(
name|col
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|alterPartitionDesc
operator|.
name|getPartKeySpec
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|colIndex
operator|==
operator|-
literal|1
operator|||
name|colIndex
operator|==
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Cannot find partition column "
operator|+
name|alterPartitionDesc
operator|.
name|getPartKeySpec
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|TypeInfo
name|expectedType
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|alterPartitionDesc
operator|.
name|getPartKeySpec
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectInspector
name|outputOI
init|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|expectedType
argument_list|)
decl_stmt|;
name|Converter
name|converter
init|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|,
name|outputOI
argument_list|)
decl_stmt|;
comment|// For all the existing partitions, check if the value can be type casted to a non-null object
for|for
control|(
name|Partition
name|part
range|:
name|partitions
control|)
block|{
if|if
condition|(
name|part
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|String
name|value
init|=
name|part
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|colIndex
argument_list|)
decl_stmt|;
name|Object
name|convertedValue
init|=
name|converter
operator|.
name|convert
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|convertedValue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|" Converting from "
operator|+
name|TypeInfoFactory
operator|.
name|stringTypeInfo
operator|+
literal|" to "
operator|+
name|expectedType
operator|+
literal|" for value : "
operator|+
name|value
operator|+
literal|" resulted in NULL object"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Exception while converting "
operator|+
name|TypeInfoFactory
operator|.
name|stringTypeInfo
operator|+
literal|" to "
operator|+
name|expectedType
operator|+
literal|" for value : "
operator|+
name|part
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|colIndex
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Exception while checking type conversion of existing partition values to "
operator|+
name|alterPartitionDesc
operator|.
name|getPartKeySpec
argument_list|()
operator|+
literal|" : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|FieldSchema
name|col
range|:
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
if|if
condition|(
name|col
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|alterPartitionDesc
operator|.
name|getPartKeySpec
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
name|newPartitionKeys
operator|.
name|add
argument_list|(
name|alterPartitionDesc
operator|.
name|getPartKeySpec
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newPartitionKeys
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
block|}
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|setPartitionKeys
argument_list|(
name|newPartitionKeys
argument_list|)
expr_stmt|;
try|try
block|{
name|db
operator|.
name|alterTable
argument_list|(
name|tabName
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|GENERIC_ERROR
argument_list|,
literal|"Unable to alter "
operator|+
name|tabName
argument_list|)
throw|;
block|}
name|work
operator|.
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|tbl
argument_list|)
argument_list|)
expr_stmt|;
comment|// We've already locked the table as the input, don't relock it as the output.
name|work
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|tbl
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Rewrite the partition's metadata and force the pre/post execute hooks to    * be fired.    *    * @param db    * @param touchDesc    * @return    * @throws HiveException    */
specifier|private
name|int
name|touch
parameter_list|(
name|Hive
name|db
parameter_list|,
name|AlterTableSimpleDesc
name|touchDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|dbName
init|=
name|touchDesc
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|touchDesc
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|Table
name|tbl
init|=
name|db
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|touchDesc
operator|.
name|getPartSpec
argument_list|()
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|db
operator|.
name|alterTable
argument_list|(
name|tblName
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Uable to update table"
argument_list|)
throw|;
block|}
name|work
operator|.
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|tbl
argument_list|)
argument_list|)
expr_stmt|;
name|work
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|tbl
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Partition
name|part
init|=
name|db
operator|.
name|getPartition
argument_list|(
name|tbl
argument_list|,
name|touchDesc
operator|.
name|getPartSpec
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Specified partition does not exist"
argument_list|)
throw|;
block|}
try|try
block|{
name|db
operator|.
name|alterPartition
argument_list|(
name|tblName
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|work
operator|.
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|part
argument_list|)
argument_list|)
expr_stmt|;
name|work
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|part
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Sets archiving flag locally; it has to be pushed into metastore    * @param p partition to set flag    * @param state desired state of IS_ARCHIVED flag    * @param level desired level for state == true, anything for false    */
specifier|private
name|void
name|setIsArchived
parameter_list|(
name|Partition
name|p
parameter_list|,
name|boolean
name|state
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|p
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|IS_ARCHIVED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|ArchiveUtils
operator|.
name|ARCHIVING_LEVEL
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|level
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|remove
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|IS_ARCHIVED
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
name|ArchiveUtils
operator|.
name|ARCHIVING_LEVEL
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns original partition of archived partition, null for unarchived one    */
specifier|private
name|String
name|getOriginalLocation
parameter_list|(
name|Partition
name|p
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|p
operator|.
name|getParameters
argument_list|()
decl_stmt|;
return|return
name|params
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|ORIGINAL_LOCATION
argument_list|)
return|;
block|}
comment|/**    * Sets original location of partition which is to be archived    */
specifier|private
name|void
name|setOriginalLocation
parameter_list|(
name|Partition
name|p
parameter_list|,
name|String
name|loc
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|p
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|loc
operator|==
literal|null
condition|)
block|{
name|params
operator|.
name|remove
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|ORIGINAL_LOCATION
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|ORIGINAL_LOCATION
argument_list|,
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sets the appropriate attributes in the supplied Partition object to mark    * it as archived. Note that the metastore is not touched - a separate    * call to alter_partition is needed.    *    * @param p - the partition object to modify    * @param harPath - new location of partition (har schema URI)    */
specifier|private
name|void
name|setArchived
parameter_list|(
name|Partition
name|p
parameter_list|,
name|Path
name|harPath
parameter_list|,
name|int
name|level
parameter_list|)
block|{
assert|assert
operator|(
name|ArchiveUtils
operator|.
name|isArchived
argument_list|(
name|p
argument_list|)
operator|==
literal|false
operator|)
assert|;
name|setIsArchived
argument_list|(
name|p
argument_list|,
literal|true
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|setOriginalLocation
argument_list|(
name|p
argument_list|,
name|p
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setLocation
argument_list|(
name|harPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the appropriate attributes in the supplied Partition object to mark    * it as not archived. Note that the metastore is not touched - a separate    * call to alter_partition is needed.    *    * @param p - the partition to modify    */
specifier|private
name|void
name|setUnArchived
parameter_list|(
name|Partition
name|p
parameter_list|)
block|{
assert|assert
operator|(
name|ArchiveUtils
operator|.
name|isArchived
argument_list|(
name|p
argument_list|)
operator|==
literal|true
operator|)
assert|;
name|String
name|parentDir
init|=
name|getOriginalLocation
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|setIsArchived
argument_list|(
name|p
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|setOriginalLocation
argument_list|(
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|parentDir
operator|!=
literal|null
operator|)
assert|;
name|p
operator|.
name|setLocation
argument_list|(
name|parentDir
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|pathExists
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|moveDir
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|from
parameter_list|,
name|Path
name|to
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Moving "
operator|+
name|from
operator|+
literal|" to "
operator|+
name|to
operator|+
literal|" failed!"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|deleteDir
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|Warehouse
name|wh
init|=
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|wh
operator|.
name|deleteDir
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Checks in partition is in custom (not-standard) location.    * @param tbl - table in which partition is    * @param p - partition    * @return true if partition location is custom, false if it is standard    */
name|boolean
name|partitionInCustomLocation
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|Partition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|subdir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|subdir
operator|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tbl
operator|.
name|getPartCols
argument_list|()
argument_list|,
name|p
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unable to get partition's directory"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Path
name|tableDir
init|=
name|tbl
operator|.
name|getDataLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Table has no location set"
argument_list|)
throw|;
block|}
name|String
name|standardLocation
init|=
operator|(
operator|new
name|Path
argument_list|(
name|tableDir
argument_list|,
name|subdir
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|ArchiveUtils
operator|.
name|isArchived
argument_list|(
name|p
argument_list|)
condition|)
block|{
return|return
operator|!
name|getOriginalLocation
argument_list|(
name|p
argument_list|)
operator|.
name|equals
argument_list|(
name|standardLocation
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|!
name|p
operator|.
name|getLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|standardLocation
argument_list|)
return|;
block|}
block|}
specifier|private
name|int
name|archive
parameter_list|(
name|Hive
name|db
parameter_list|,
name|AlterTableSimpleDesc
name|simpleDesc
parameter_list|,
name|DriverContext
name|driverContext
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|dbName
init|=
name|simpleDesc
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|simpleDesc
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|Table
name|tbl
init|=
name|db
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getTableType
argument_list|()
operator|!=
name|TableType
operator|.
name|MANAGED_TABLE
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"ARCHIVE can only be performed on managed tables"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
name|simpleDesc
operator|.
name|getPartSpec
argument_list|()
decl_stmt|;
name|PartSpecInfo
name|partSpecInfo
init|=
name|PartSpecInfo
operator|.
name|create
argument_list|(
name|tbl
argument_list|,
name|partSpec
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|db
operator|.
name|getPartitions
argument_list|(
name|tbl
argument_list|,
name|partSpec
argument_list|)
decl_stmt|;
name|Path
name|originalDir
init|=
literal|null
decl_stmt|;
comment|// when we have partial partitions specification we must assume partitions
comment|// lie in standard place - if they were in custom locations putting
comment|// them into one archive would involve mass amount of copying
comment|// in full partition specification case we allow custom locations
comment|// to keep backward compatibility
if|if
condition|(
name|partitions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"No partition matches the specification"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|partSpecInfo
operator|.
name|values
operator|.
name|size
argument_list|()
operator|!=
name|tbl
operator|.
name|getPartCols
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// for partial specifications we need partitions to follow the scheme
for|for
control|(
name|Partition
name|p
range|:
name|partitions
control|)
block|{
if|if
condition|(
name|partitionInCustomLocation
argument_list|(
name|tbl
argument_list|,
name|p
argument_list|)
condition|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"ARCHIVE cannot run for partition "
operator|+
literal|"groups with custom locations like %s"
argument_list|,
name|p
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
name|originalDir
operator|=
name|partSpecInfo
operator|.
name|createPath
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Partition
name|p
init|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// partition can be archived if during recovery
if|if
condition|(
name|ArchiveUtils
operator|.
name|isArchived
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|originalDir
operator|=
operator|new
name|Path
argument_list|(
name|getOriginalLocation
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|originalDir
operator|=
name|p
operator|.
name|getDataLocation
argument_list|()
expr_stmt|;
block|}
block|}
name|Path
name|intermediateArchivedDir
init|=
operator|new
name|Path
argument_list|(
name|originalDir
operator|.
name|getParent
argument_list|()
argument_list|,
name|originalDir
operator|.
name|getName
argument_list|()
operator|+
name|INTERMEDIATE_ARCHIVED_DIR_SUFFIX
argument_list|)
decl_stmt|;
name|Path
name|intermediateOriginalDir
init|=
operator|new
name|Path
argument_list|(
name|originalDir
operator|.
name|getParent
argument_list|()
argument_list|,
name|originalDir
operator|.
name|getName
argument_list|()
operator|+
name|INTERMEDIATE_ORIGINAL_DIR_SUFFIX
argument_list|)
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"intermediate.archived is "
operator|+
name|intermediateArchivedDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"intermediate.original is "
operator|+
name|intermediateOriginalDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|archiveName
init|=
literal|"data.har"
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|originalDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|URI
name|archiveUri
init|=
operator|(
operator|new
name|Path
argument_list|(
name|originalDir
argument_list|,
name|archiveName
argument_list|)
operator|)
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|URI
name|originalUri
init|=
name|ArchiveUtils
operator|.
name|addSlash
argument_list|(
name|originalDir
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
name|ArchiveUtils
operator|.
name|HarPathHelper
name|harHelper
init|=
operator|new
name|ArchiveUtils
operator|.
name|HarPathHelper
argument_list|(
name|conf
argument_list|,
name|archiveUri
argument_list|,
name|originalUri
argument_list|)
decl_stmt|;
comment|// we checked if partitions matching specification are marked as archived
comment|// in the metadata; if they are and their levels are the same as we would
comment|// set it later it means previous run failed and we have to do the recovery;
comment|// if they are different, we throw an error
for|for
control|(
name|Partition
name|p
range|:
name|partitions
control|)
block|{
if|if
condition|(
name|ArchiveUtils
operator|.
name|isArchived
argument_list|(
name|p
argument_list|)
condition|)
block|{
if|if
condition|(
name|ArchiveUtils
operator|.
name|getArchivingLevel
argument_list|(
name|p
argument_list|)
operator|!=
name|partSpecInfo
operator|.
name|values
operator|.
name|size
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|ArchiveUtils
operator|.
name|getPartialName
argument_list|(
name|p
argument_list|,
name|ArchiveUtils
operator|.
name|getArchivingLevel
argument_list|(
name|p
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|m
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Conflict with existing archive %s"
argument_list|,
name|name
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|m
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Partition(s) already archived"
argument_list|)
throw|;
block|}
block|}
block|}
name|boolean
name|recovery
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pathExists
argument_list|(
name|intermediateArchivedDir
argument_list|)
operator|||
name|pathExists
argument_list|(
name|intermediateOriginalDir
argument_list|)
condition|)
block|{
name|recovery
operator|=
literal|true
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Starting recovery after failed ARCHIVE"
argument_list|)
expr_stmt|;
block|}
comment|// The following steps seem roundabout, but they are meant to aid in
comment|// recovery if a failure occurs and to keep a consistent state in the FS
comment|// Steps:
comment|// 1. Create the archive in a temporary folder
comment|// 2. Move the archive dir to an intermediate dir that is in at the same
comment|//    dir as the original partition dir. Call the new dir
comment|//    intermediate-archive.
comment|// 3. Rename the original partition dir to an intermediate dir. Call the
comment|//    renamed dir intermediate-original
comment|// 4. Rename intermediate-archive to the original partition dir
comment|// 5. Change the metadata
comment|// 6. Delete the original partition files in intermediate-original
comment|// The original partition files are deleted after the metadata change
comment|// because the presence of those files are used to indicate whether
comment|// the original partition directory contains archived or unarchived files.
comment|// Create an archived version of the partition in a directory ending in
comment|// ARCHIVE_INTERMEDIATE_DIR_SUFFIX that's the same level as the partition,
comment|// if it does not already exist. If it does exist, we assume the dir is good
comment|// to use as the move operation that created it is atomic.
name|HadoopShims
name|shim
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pathExists
argument_list|(
name|intermediateArchivedDir
argument_list|)
operator|&&
operator|!
name|pathExists
argument_list|(
name|intermediateOriginalDir
argument_list|)
condition|)
block|{
comment|// First create the archive in a tmp dir so that if the job fails, the
comment|// bad files don't pollute the filesystem
name|Path
name|tmpPath
init|=
operator|new
name|Path
argument_list|(
name|driverContext
operator|.
name|getCtx
argument_list|()
operator|.
name|getExternalTmpPath
argument_list|(
name|originalDir
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|,
literal|"partlevel"
argument_list|)
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Creating "
operator|+
name|archiveName
operator|+
literal|" for "
operator|+
name|originalDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"in "
operator|+
name|tmpPath
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Please wait... (this may take a while)"
argument_list|)
expr_stmt|;
comment|// Create the Hadoop archive
name|int
name|ret
init|=
literal|0
decl_stmt|;
try|try
block|{
name|int
name|maxJobNameLen
init|=
name|conf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEJOBNAMELENGTH
argument_list|)
decl_stmt|;
name|String
name|jobname
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Archiving %s@%s"
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partSpecInfo
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|jobname
operator|=
name|Utilities
operator|.
name|abbreviate
argument_list|(
name|jobname
argument_list|,
name|maxJobNameLen
operator|-
literal|6
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPJOBNAME
argument_list|,
name|jobname
argument_list|)
expr_stmt|;
name|ret
operator|=
name|shim
operator|.
name|createHadoopArchive
argument_list|(
name|conf
argument_list|,
name|originalDir
argument_list|,
name|tmpPath
argument_list|,
name|archiveName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Error while creating HAR"
argument_list|)
throw|;
block|}
comment|// Move from the tmp dir to an intermediate directory, in the same level as
comment|// the partition directory. e.g. .../hr=12-intermediate-archived
try|try
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Moving "
operator|+
name|tmpPath
operator|+
literal|" to "
operator|+
name|intermediateArchivedDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|pathExists
argument_list|(
name|intermediateArchivedDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"The intermediate archive directory already exists."
argument_list|)
throw|;
block|}
name|fs
operator|.
name|rename
argument_list|(
name|tmpPath
argument_list|,
name|intermediateArchivedDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Error while moving tmp directory"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|pathExists
argument_list|(
name|intermediateArchivedDir
argument_list|)
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Intermediate archive directory "
operator|+
name|intermediateArchivedDir
operator|+
literal|" already exists. Assuming it contains an archived version of the partition"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If we get to here, we know that we've archived the partition files, but
comment|// they may be in the original partition location, or in the intermediate
comment|// original dir.
comment|// Move the original parent directory to the intermediate original directory
comment|// if the move hasn't been made already
if|if
condition|(
operator|!
name|pathExists
argument_list|(
name|intermediateOriginalDir
argument_list|)
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Moving "
operator|+
name|originalDir
operator|+
literal|" to "
operator|+
name|intermediateOriginalDir
argument_list|)
expr_stmt|;
name|moveDir
argument_list|(
name|fs
argument_list|,
name|originalDir
argument_list|,
name|intermediateOriginalDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|console
operator|.
name|printInfo
argument_list|(
name|intermediateOriginalDir
operator|+
literal|" already exists. "
operator|+
literal|"Assuming it contains the original files in the partition"
argument_list|)
expr_stmt|;
block|}
comment|// If there's a failure from here to when the metadata is updated,
comment|// there will be no data in the partition, or an error while trying to read
comment|// the partition (if the archive files have been moved to the original
comment|// partition directory.) But re-running the archive command will allow
comment|// recovery
comment|// Move the intermediate archived directory to the original parent directory
if|if
condition|(
operator|!
name|pathExists
argument_list|(
name|originalDir
argument_list|)
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Moving "
operator|+
name|intermediateArchivedDir
operator|+
literal|" to "
operator|+
name|originalDir
argument_list|)
expr_stmt|;
name|moveDir
argument_list|(
name|fs
argument_list|,
name|intermediateArchivedDir
argument_list|,
name|originalDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|console
operator|.
name|printInfo
argument_list|(
name|originalDir
operator|+
literal|" already exists. "
operator|+
literal|"Assuming it contains the archived version of the partition"
argument_list|)
expr_stmt|;
block|}
comment|// Record this change in the metastore
try|try
block|{
for|for
control|(
name|Partition
name|p
range|:
name|partitions
control|)
block|{
name|URI
name|originalPartitionUri
init|=
name|ArchiveUtils
operator|.
name|addSlash
argument_list|(
name|p
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
name|URI
name|test
init|=
name|p
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|URI
name|harPartitionDir
init|=
name|harHelper
operator|.
name|getHarUri
argument_list|(
name|originalPartitionUri
argument_list|,
name|shim
argument_list|)
decl_stmt|;
name|StringBuilder
name|authority
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|harPartitionDir
operator|.
name|getUserInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|authority
operator|.
name|append
argument_list|(
name|harPartitionDir
operator|.
name|getUserInfo
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
expr_stmt|;
block|}
name|authority
operator|.
name|append
argument_list|(
name|harPartitionDir
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
name|harPartitionDir
operator|.
name|getPort
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|authority
operator|.
name|append
argument_list|(
name|harPartitionDir
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|harPath
init|=
operator|new
name|Path
argument_list|(
name|harPartitionDir
operator|.
name|getScheme
argument_list|()
argument_list|,
name|authority
operator|.
name|toString
argument_list|()
argument_list|,
name|harPartitionDir
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
comment|// make in Path to ensure no slash at the end
name|setArchived
argument_list|(
name|p
argument_list|,
name|harPath
argument_list|,
name|partSpecInfo
operator|.
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|alterPartition
argument_list|(
name|tblName
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unable to change the partition info for HAR"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// If a failure occurs here, the directory containing the original files
comment|// will not be deleted. The user will run ARCHIVE again to clear this up
if|if
condition|(
name|pathExists
argument_list|(
name|intermediateOriginalDir
argument_list|)
condition|)
block|{
name|deleteDir
argument_list|(
name|intermediateOriginalDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recovery
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Recovery after ARCHIVE succeeded"
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|unarchive
parameter_list|(
name|Hive
name|db
parameter_list|,
name|AlterTableSimpleDesc
name|simpleDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|dbName
init|=
name|simpleDesc
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|simpleDesc
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|Table
name|tbl
init|=
name|db
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
comment|// Means user specified a table, not a partition
if|if
condition|(
name|simpleDesc
operator|.
name|getPartSpec
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"UNARCHIVE is for partitions only"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tbl
operator|.
name|getTableType
argument_list|()
operator|!=
name|TableType
operator|.
name|MANAGED_TABLE
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"UNARCHIVE can only be performed on managed tables"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
name|simpleDesc
operator|.
name|getPartSpec
argument_list|()
decl_stmt|;
name|PartSpecInfo
name|partSpecInfo
init|=
name|PartSpecInfo
operator|.
name|create
argument_list|(
name|tbl
argument_list|,
name|partSpec
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|db
operator|.
name|getPartitions
argument_list|(
name|tbl
argument_list|,
name|partSpec
argument_list|)
decl_stmt|;
name|int
name|partSpecLevel
init|=
name|partSpec
operator|.
name|size
argument_list|()
decl_stmt|;
name|Path
name|originalDir
init|=
literal|null
decl_stmt|;
comment|// when we have partial partitions specification we must assume partitions
comment|// lie in standard place - if they were in custom locations putting
comment|// them into one archive would involve mass amount of copying
comment|// in full partition specification case we allow custom locations
comment|// to keep backward compatibility
if|if
condition|(
name|partitions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"No partition matches the specification"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|partSpecInfo
operator|.
name|values
operator|.
name|size
argument_list|()
operator|!=
name|tbl
operator|.
name|getPartCols
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// for partial specifications we need partitions to follow the scheme
for|for
control|(
name|Partition
name|p
range|:
name|partitions
control|)
block|{
if|if
condition|(
name|partitionInCustomLocation
argument_list|(
name|tbl
argument_list|,
name|p
argument_list|)
condition|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"UNARCHIVE cannot run for partition "
operator|+
literal|"groups with custom locations like %s"
argument_list|,
name|p
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
name|originalDir
operator|=
name|partSpecInfo
operator|.
name|createPath
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Partition
name|p
init|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ArchiveUtils
operator|.
name|isArchived
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|originalDir
operator|=
operator|new
name|Path
argument_list|(
name|getOriginalLocation
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|originalDir
operator|=
operator|new
name|Path
argument_list|(
name|p
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|URI
name|originalUri
init|=
name|ArchiveUtils
operator|.
name|addSlash
argument_list|(
name|originalDir
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|intermediateArchivedDir
init|=
operator|new
name|Path
argument_list|(
name|originalDir
operator|.
name|getParent
argument_list|()
argument_list|,
name|originalDir
operator|.
name|getName
argument_list|()
operator|+
name|INTERMEDIATE_ARCHIVED_DIR_SUFFIX
argument_list|)
decl_stmt|;
name|Path
name|intermediateExtractedDir
init|=
operator|new
name|Path
argument_list|(
name|originalDir
operator|.
name|getParent
argument_list|()
argument_list|,
name|originalDir
operator|.
name|getName
argument_list|()
operator|+
name|INTERMEDIATE_EXTRACTED_DIR_SUFFIX
argument_list|)
decl_stmt|;
name|boolean
name|recovery
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pathExists
argument_list|(
name|intermediateArchivedDir
argument_list|)
operator|||
name|pathExists
argument_list|(
name|intermediateExtractedDir
argument_list|)
condition|)
block|{
name|recovery
operator|=
literal|true
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Starting recovery after failed UNARCHIVE"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Partition
name|p
range|:
name|partitions
control|)
block|{
name|checkArchiveProperty
argument_list|(
name|partSpecLevel
argument_list|,
name|recovery
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|String
name|archiveName
init|=
literal|"data.har"
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|originalDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// assume the archive is in the original dir, check if it exists
name|Path
name|archivePath
init|=
operator|new
name|Path
argument_list|(
name|originalDir
argument_list|,
name|archiveName
argument_list|)
decl_stmt|;
name|URI
name|archiveUri
init|=
name|archivePath
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|ArchiveUtils
operator|.
name|HarPathHelper
name|harHelper
init|=
operator|new
name|ArchiveUtils
operator|.
name|HarPathHelper
argument_list|(
name|conf
argument_list|,
name|archiveUri
argument_list|,
name|originalUri
argument_list|)
decl_stmt|;
name|HadoopShims
name|shim
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
decl_stmt|;
name|URI
name|sourceUri
init|=
name|harHelper
operator|.
name|getHarUri
argument_list|(
name|originalUri
argument_list|,
name|shim
argument_list|)
decl_stmt|;
name|Path
name|sourceDir
init|=
operator|new
name|Path
argument_list|(
name|sourceUri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|sourceUri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|sourceUri
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pathExists
argument_list|(
name|intermediateArchivedDir
argument_list|)
operator|&&
operator|!
name|pathExists
argument_list|(
name|archivePath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Haven't found any archive where it should be"
argument_list|)
throw|;
block|}
name|Path
name|tmpPath
init|=
name|driverContext
operator|.
name|getCtx
argument_list|()
operator|.
name|getExternalTmpPath
argument_list|(
name|originalDir
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|tmpPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Clarification of terms:
comment|// - The originalDir directory represents the original directory of the
comment|//   partitions' files. They now contain an archived version of those files
comment|//   eg. hdfs:/warehouse/myTable/ds=1/
comment|// - The source directory is the directory containing all the files that
comment|//   should be in the partitions. e.g. har:/warehouse/myTable/ds=1/myTable.har/
comment|//   Note the har:/ scheme
comment|// Steps:
comment|// 1. Extract the archive in a temporary folder
comment|// 2. Move the archive dir to an intermediate dir that is in at the same
comment|//    dir as originalLocation. Call the new dir intermediate-extracted.
comment|// 3. Rename the original partitions dir to an intermediate dir. Call the
comment|//    renamed dir intermediate-archive
comment|// 4. Rename intermediate-extracted to the original partitions dir
comment|// 5. Change the metadata
comment|// 6. Delete the archived partitions files in intermediate-archive
if|if
condition|(
operator|!
name|pathExists
argument_list|(
name|intermediateExtractedDir
argument_list|)
operator|&&
operator|!
name|pathExists
argument_list|(
name|intermediateArchivedDir
argument_list|)
condition|)
block|{
try|try
block|{
comment|// Copy the files out of the archive into the temporary directory
name|String
name|copySource
init|=
name|sourceDir
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|copyDest
init|=
name|tmpPath
operator|.
name|toString
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-cp"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|copySource
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|copyDest
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Copying "
operator|+
name|copySource
operator|+
literal|" to "
operator|+
name|copyDest
argument_list|)
expr_stmt|;
name|FileSystem
name|srcFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|sourceDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|srcFs
operator|.
name|initialize
argument_list|(
name|sourceDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|FsShell
name|fss
init|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|fss
argument_list|,
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Error while copying files from archive, return code="
operator|+
name|ret
argument_list|)
throw|;
block|}
else|else
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Succefully Copied "
operator|+
name|copySource
operator|+
literal|" to "
operator|+
name|copyDest
argument_list|)
expr_stmt|;
block|}
name|console
operator|.
name|printInfo
argument_list|(
literal|"Moving "
operator|+
name|tmpPath
operator|+
literal|" to "
operator|+
name|intermediateExtractedDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|intermediateExtractedDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Invalid state: the intermediate extracted "
operator|+
literal|"directory already exists."
argument_list|)
throw|;
block|}
name|fs
operator|.
name|rename
argument_list|(
name|tmpPath
argument_list|,
name|intermediateExtractedDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// At this point, we know that the extracted files are in the intermediate
comment|// extracted dir, or in the the original directory.
if|if
condition|(
operator|!
name|pathExists
argument_list|(
name|intermediateArchivedDir
argument_list|)
condition|)
block|{
try|try
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Moving "
operator|+
name|originalDir
operator|+
literal|" to "
operator|+
name|intermediateArchivedDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|originalDir
argument_list|,
name|intermediateArchivedDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|console
operator|.
name|printInfo
argument_list|(
name|intermediateArchivedDir
operator|+
literal|" already exists. "
operator|+
literal|"Assuming it contains the archived version of the partition"
argument_list|)
expr_stmt|;
block|}
comment|// If there is a failure from here to until when the metadata is changed,
comment|// the partition will be empty or throw errors on read.
comment|// If the original location exists here, then it must be the extracted files
comment|// because in the previous step, we moved the previous original location
comment|// (containing the archived version of the files) to intermediateArchiveDir
if|if
condition|(
operator|!
name|pathExists
argument_list|(
name|originalDir
argument_list|)
condition|)
block|{
try|try
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Moving "
operator|+
name|intermediateExtractedDir
operator|+
literal|" to "
operator|+
name|originalDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|intermediateExtractedDir
argument_list|,
name|originalDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|console
operator|.
name|printInfo
argument_list|(
name|originalDir
operator|+
literal|" already exists. "
operator|+
literal|"Assuming it contains the extracted files in the partition"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Partition
name|p
range|:
name|partitions
control|)
block|{
name|setUnArchived
argument_list|(
name|p
argument_list|)
expr_stmt|;
try|try
block|{
name|db
operator|.
name|alterPartition
argument_list|(
name|tblName
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// If a failure happens here, the intermediate archive files won't be
comment|// deleted. The user will need to call unarchive again to clear those up.
if|if
condition|(
name|pathExists
argument_list|(
name|intermediateArchivedDir
argument_list|)
condition|)
block|{
name|deleteDir
argument_list|(
name|intermediateArchivedDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recovery
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Recovery after UNARCHIVE succeeded"
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|void
name|checkArchiveProperty
parameter_list|(
name|int
name|partSpecLevel
parameter_list|,
name|boolean
name|recovery
parameter_list|,
name|Partition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|ArchiveUtils
operator|.
name|isArchived
argument_list|(
name|p
argument_list|)
operator|&&
operator|!
name|recovery
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Partition "
operator|+
name|p
operator|.
name|getName
argument_list|()
operator|+
literal|" is not archived."
argument_list|)
throw|;
block|}
name|int
name|archiveLevel
init|=
name|ArchiveUtils
operator|.
name|getArchivingLevel
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|partSpecLevel
operator|>
name|archiveLevel
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Partition "
operator|+
name|p
operator|.
name|getName
argument_list|()
operator|+
literal|" is archived at level "
operator|+
name|archiveLevel
operator|+
literal|", and given partspec only has "
operator|+
name|partSpecLevel
operator|+
literal|" specs."
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|msckAddPartitionsOneByOne
parameter_list|(
name|Hive
name|db
parameter_list|,
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|CheckResult
operator|.
name|PartitionResult
argument_list|>
name|partsNotInMs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|repairOutput
parameter_list|)
block|{
for|for
control|(
name|CheckResult
operator|.
name|PartitionResult
name|part
range|:
name|partsNotInMs
control|)
block|{
try|try
block|{
name|db
operator|.
name|createPartition
argument_list|(
name|table
argument_list|,
name|Warehouse
operator|.
name|makeSpecFromName
argument_list|(
name|part
operator|.
name|getPartitionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|repairOutput
operator|.
name|add
argument_list|(
literal|"Repair: Added partition to metastore "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|':'
operator|+
name|part
operator|.
name|getPartitionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Repair error, could not add partition to metastore: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|int
name|compact
parameter_list|(
name|Hive
name|db
parameter_list|,
name|AlterTableSimpleDesc
name|desc
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|dbName
init|=
name|desc
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|desc
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|Table
name|tbl
init|=
name|db
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|getPartSpec
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Compaction can only be done on the whole table if the table is non-partitioned.
if|if
condition|(
name|tbl
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|NO_COMPACTION_PARTITION
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
name|desc
operator|.
name|getPartSpec
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|db
operator|.
name|getPartitions
argument_list|(
name|tbl
argument_list|,
name|partSpec
argument_list|)
decl_stmt|;
if|if
condition|(
name|partitions
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|TOO_MANY_COMPACTION_PARTITIONS
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|partitions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PARTITION_SPEC
argument_list|)
throw|;
block|}
name|partName
operator|=
name|partitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|db
operator|.
name|compact
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partName
argument_list|,
name|desc
operator|.
name|getCompactionType
argument_list|()
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Compaction enqueued."
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * MetastoreCheck, see if the data in the metastore matches what is on the    * dfs. Current version checks for tables and partitions that are either    * missing on disk on in the metastore.    *    * @param db    *          The database in question.    * @param msckDesc    *          Information about the tables and partitions we want to check for.    * @return Returns 0 when execution succeeds and above 0 if it fails.    */
specifier|private
name|int
name|msck
parameter_list|(
name|Hive
name|db
parameter_list|,
name|MsckDesc
name|msckDesc
parameter_list|)
block|{
name|CheckResult
name|result
init|=
operator|new
name|CheckResult
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|repairOutput
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|HiveMetaStoreChecker
name|checker
init|=
operator|new
name|HiveMetaStoreChecker
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|String
index|[]
name|names
init|=
name|Utilities
operator|.
name|getDbTableName
argument_list|(
name|msckDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|checker
operator|.
name|checkMetastore
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|,
name|names
index|[
literal|1
index|]
argument_list|,
name|msckDesc
operator|.
name|getPartSpecs
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CheckResult
operator|.
name|PartitionResult
argument_list|>
name|partsNotInMs
init|=
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
decl_stmt|;
if|if
condition|(
name|msckDesc
operator|.
name|isRepairPartitions
argument_list|()
operator|&&
operator|!
name|partsNotInMs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Table
name|table
init|=
name|db
operator|.
name|getTable
argument_list|(
name|msckDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|AddPartitionDesc
name|apd
init|=
operator|new
name|AddPartitionDesc
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|CheckResult
operator|.
name|PartitionResult
name|part
range|:
name|partsNotInMs
control|)
block|{
name|apd
operator|.
name|addPartition
argument_list|(
name|Warehouse
operator|.
name|makeSpecFromName
argument_list|(
name|part
operator|.
name|getPartitionName
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|repairOutput
operator|.
name|add
argument_list|(
literal|"Repair: Added partition to metastore "
operator|+
name|msckDesc
operator|.
name|getTableName
argument_list|()
operator|+
literal|':'
operator|+
name|part
operator|.
name|getPartitionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|createPartitions
argument_list|(
name|apd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not bulk-add partitions to metastore; trying one by one"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|repairOutput
operator|.
name|clear
argument_list|()
expr_stmt|;
name|msckAddPartitionsOneByOne
argument_list|(
name|db
argument_list|,
name|table
argument_list|,
name|partsNotInMs
argument_list|,
name|repairOutput
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to run metacheck: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to run metacheck: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
finally|finally
block|{
name|BufferedWriter
name|resultOut
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|msckDesc
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|resultOut
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|firstWritten
init|=
literal|false
decl_stmt|;
name|firstWritten
operator||=
name|writeMsckResult
argument_list|(
name|result
operator|.
name|getTablesNotInMs
argument_list|()
argument_list|,
literal|"Tables not in metastore:"
argument_list|,
name|resultOut
argument_list|,
name|firstWritten
argument_list|)
expr_stmt|;
name|firstWritten
operator||=
name|writeMsckResult
argument_list|(
name|result
operator|.
name|getTablesNotOnFs
argument_list|()
argument_list|,
literal|"Tables missing on filesystem:"
argument_list|,
name|resultOut
argument_list|,
name|firstWritten
argument_list|)
expr_stmt|;
name|firstWritten
operator||=
name|writeMsckResult
argument_list|(
name|result
operator|.
name|getPartitionsNotInMs
argument_list|()
argument_list|,
literal|"Partitions not in metastore:"
argument_list|,
name|resultOut
argument_list|,
name|firstWritten
argument_list|)
expr_stmt|;
name|firstWritten
operator||=
name|writeMsckResult
argument_list|(
name|result
operator|.
name|getPartitionsNotOnFs
argument_list|()
argument_list|,
literal|"Partitions missing from filesystem:"
argument_list|,
name|resultOut
argument_list|,
name|firstWritten
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|rout
range|:
name|repairOutput
control|)
block|{
if|if
condition|(
name|firstWritten
condition|)
block|{
name|resultOut
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|firstWritten
operator|=
literal|true
expr_stmt|;
block|}
name|resultOut
operator|.
name|write
argument_list|(
name|rout
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to save metacheck output: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|resultOut
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|resultOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close output file: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Write the result of msck to a writer.    *    * @param result    *          The result we're going to write    * @param msg    *          Message to write.    * @param out    *          Writer to write to    * @param wrote    *          if any previous call wrote data    * @return true if something was written    * @throws IOException    *           In case the writing fails    */
specifier|private
name|boolean
name|writeMsckResult
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
name|result
parameter_list|,
name|String
name|msg
parameter_list|,
name|Writer
name|out
parameter_list|,
name|boolean
name|wrote
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|wrote
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|msg
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|entry
range|:
name|result
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|entry
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Write a list of partitions to a file.    *    * @param db    *          The database in question.    * @param showParts    *          These are the partitions we're interested in.    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    *           Throws this exception if an unexpected error occurs.    */
specifier|private
name|int
name|showPartitions
parameter_list|(
name|Hive
name|db
parameter_list|,
name|ShowPartitionsDesc
name|showParts
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// get the partitions for the table and populate the output
name|String
name|tabName
init|=
name|showParts
operator|.
name|getTabName
argument_list|()
decl_stmt|;
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
literal|null
decl_stmt|;
name|tbl
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|tabName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tbl
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|TABLE_NOT_PARTITIONED
argument_list|,
name|tabName
argument_list|)
throw|;
block|}
if|if
condition|(
name|showParts
operator|.
name|getPartSpec
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|parts
operator|=
name|db
operator|.
name|getPartitionNames
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|showParts
operator|.
name|getPartSpec
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parts
operator|=
name|db
operator|.
name|getPartitionNames
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// write the results in the file
name|DataOutputStream
name|outStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|showParts
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|outStream
operator|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|showTablePartitons
argument_list|(
name|outStream
argument_list|,
name|parts
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStream
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|GENERIC_ERROR
argument_list|,
literal|"show partitions for table "
operator|+
name|tabName
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Write a statement of how to create a table to a file.    *    * @param db    *          The database in question.    * @param showCreateTbl    *          This is the table we're interested in.    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    *           Throws this exception if an unexpected error occurs.    */
specifier|private
name|int
name|showCreateTable
parameter_list|(
name|Hive
name|db
parameter_list|,
name|ShowCreateTableDesc
name|showCreateTbl
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// get the create table statement for the table and populate the output
specifier|final
name|String
name|EXTERNAL
init|=
literal|"external"
decl_stmt|;
specifier|final
name|String
name|TEMPORARY
init|=
literal|"temporary"
decl_stmt|;
specifier|final
name|String
name|LIST_COLUMNS
init|=
literal|"columns"
decl_stmt|;
specifier|final
name|String
name|TBL_COMMENT
init|=
literal|"tbl_comment"
decl_stmt|;
specifier|final
name|String
name|LIST_PARTITIONS
init|=
literal|"partitions"
decl_stmt|;
specifier|final
name|String
name|SORT_BUCKET
init|=
literal|"sort_bucket"
decl_stmt|;
specifier|final
name|String
name|ROW_FORMAT
init|=
literal|"row_format"
decl_stmt|;
specifier|final
name|String
name|TBL_LOCATION
init|=
literal|"tbl_location"
decl_stmt|;
specifier|final
name|String
name|TBL_PROPERTIES
init|=
literal|"tbl_properties"
decl_stmt|;
name|boolean
name|isHbaseTable
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|createTab_str
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|showCreateTbl
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|Table
name|tbl
init|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|DataOutputStream
name|outStream
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|duplicateProps
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|showCreateTbl
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|outStream
operator|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getStorageHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|isHbaseTable
operator|=
name|tbl
operator|.
name|getStorageHandler
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"org.apache.hadoop.hive.hbase.HBaseStorageHandler"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tbl
operator|.
name|isView
argument_list|()
condition|)
block|{
name|String
name|createTab_stmt
init|=
literal|"CREATE VIEW `"
operator|+
name|tableName
operator|+
literal|"` AS "
operator|+
name|tbl
operator|.
name|getViewExpandedText
argument_list|()
decl_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
name|createTab_stmt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStream
operator|=
literal|null
expr_stmt|;
return|return
literal|0
return|;
block|}
name|createTab_str
operator|.
name|append
argument_list|(
literal|"CREATE<"
operator|+
name|TEMPORARY
operator|+
literal|"><"
operator|+
name|EXTERNAL
operator|+
literal|">TABLE `"
argument_list|)
expr_stmt|;
name|createTab_str
operator|.
name|append
argument_list|(
name|tableName
operator|+
literal|"`(\n"
argument_list|)
expr_stmt|;
name|createTab_str
operator|.
name|append
argument_list|(
literal|"<"
operator|+
name|LIST_COLUMNS
operator|+
literal|">)\n"
argument_list|)
expr_stmt|;
name|createTab_str
operator|.
name|append
argument_list|(
literal|"<"
operator|+
name|TBL_COMMENT
operator|+
literal|">\n"
argument_list|)
expr_stmt|;
name|createTab_str
operator|.
name|append
argument_list|(
literal|"<"
operator|+
name|LIST_PARTITIONS
operator|+
literal|">\n"
argument_list|)
expr_stmt|;
name|createTab_str
operator|.
name|append
argument_list|(
literal|"<"
operator|+
name|SORT_BUCKET
operator|+
literal|">\n"
argument_list|)
expr_stmt|;
name|createTab_str
operator|.
name|append
argument_list|(
literal|"<"
operator|+
name|ROW_FORMAT
operator|+
literal|">\n"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isHbaseTable
condition|)
block|{
name|createTab_str
operator|.
name|append
argument_list|(
literal|"LOCATION\n"
argument_list|)
expr_stmt|;
name|createTab_str
operator|.
name|append
argument_list|(
literal|"<"
operator|+
name|TBL_LOCATION
operator|+
literal|">\n"
argument_list|)
expr_stmt|;
block|}
name|createTab_str
operator|.
name|append
argument_list|(
literal|"TBLPROPERTIES (\n"
argument_list|)
expr_stmt|;
name|createTab_str
operator|.
name|append
argument_list|(
literal|"<"
operator|+
name|TBL_PROPERTIES
operator|+
literal|">)\n"
argument_list|)
expr_stmt|;
name|ST
name|createTab_stmt
init|=
operator|new
name|ST
argument_list|(
name|createTab_str
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// For cases where the table is temporary
name|String
name|tbl_temp
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|tbl
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|duplicateProps
operator|.
name|add
argument_list|(
literal|"TEMPORARY"
argument_list|)
expr_stmt|;
name|tbl_temp
operator|=
literal|"TEMPORARY "
expr_stmt|;
block|}
comment|// For cases where the table is external
name|String
name|tbl_external
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getTableType
argument_list|()
operator|==
name|TableType
operator|.
name|EXTERNAL_TABLE
condition|)
block|{
name|duplicateProps
operator|.
name|add
argument_list|(
literal|"EXTERNAL"
argument_list|)
expr_stmt|;
name|tbl_external
operator|=
literal|"EXTERNAL "
expr_stmt|;
block|}
comment|// Columns
name|String
name|tbl_columns
init|=
literal|""
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|tbl
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|col
range|:
name|cols
control|)
block|{
name|String
name|columnDesc
init|=
literal|"  `"
operator|+
name|col
operator|.
name|getName
argument_list|()
operator|+
literal|"` "
operator|+
name|col
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|col
operator|.
name|getComment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|columnDesc
operator|=
name|columnDesc
operator|+
literal|" COMMENT '"
operator|+
name|escapeHiveCommand
argument_list|(
name|col
operator|.
name|getComment
argument_list|()
argument_list|)
operator|+
literal|"'"
expr_stmt|;
block|}
name|columns
operator|.
name|add
argument_list|(
name|columnDesc
argument_list|)
expr_stmt|;
block|}
name|tbl_columns
operator|=
name|StringUtils
operator|.
name|join
argument_list|(
name|columns
argument_list|,
literal|", \n"
argument_list|)
expr_stmt|;
comment|// Table comment
name|String
name|tbl_comment
init|=
literal|""
decl_stmt|;
name|String
name|tabComment
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
literal|"comment"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tabComment
operator|!=
literal|null
condition|)
block|{
name|duplicateProps
operator|.
name|add
argument_list|(
literal|"comment"
argument_list|)
expr_stmt|;
name|tbl_comment
operator|=
literal|"COMMENT '"
operator|+
name|escapeHiveCommand
argument_list|(
name|tabComment
argument_list|)
operator|+
literal|"'"
expr_stmt|;
block|}
comment|// Partitions
name|String
name|tbl_partitions
init|=
literal|""
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
init|=
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|partKeys
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tbl_partitions
operator|+=
literal|"PARTITIONED BY ( \n"
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|partKey
range|:
name|partKeys
control|)
block|{
name|String
name|partColDesc
init|=
literal|"  `"
operator|+
name|partKey
operator|.
name|getName
argument_list|()
operator|+
literal|"` "
operator|+
name|partKey
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|partKey
operator|.
name|getComment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|partColDesc
operator|=
name|partColDesc
operator|+
literal|" COMMENT '"
operator|+
name|escapeHiveCommand
argument_list|(
name|partKey
operator|.
name|getComment
argument_list|()
argument_list|)
operator|+
literal|"'"
expr_stmt|;
block|}
name|partCols
operator|.
name|add
argument_list|(
name|partColDesc
argument_list|)
expr_stmt|;
block|}
name|tbl_partitions
operator|+=
name|StringUtils
operator|.
name|join
argument_list|(
name|partCols
argument_list|,
literal|", \n"
argument_list|)
expr_stmt|;
name|tbl_partitions
operator|+=
literal|")"
expr_stmt|;
block|}
comment|// Clusters (Buckets)
name|String
name|tbl_sort_bucket
init|=
literal|""
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|buckCols
init|=
name|tbl
operator|.
name|getBucketCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|buckCols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|duplicateProps
operator|.
name|add
argument_list|(
literal|"SORTBUCKETCOLSPREFIX"
argument_list|)
expr_stmt|;
name|tbl_sort_bucket
operator|+=
literal|"CLUSTERED BY ( \n  "
expr_stmt|;
name|tbl_sort_bucket
operator|+=
name|StringUtils
operator|.
name|join
argument_list|(
name|buckCols
argument_list|,
literal|", \n  "
argument_list|)
expr_stmt|;
name|tbl_sort_bucket
operator|+=
literal|") \n"
expr_stmt|;
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
init|=
name|tbl
operator|.
name|getSortCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortCols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tbl_sort_bucket
operator|+=
literal|"SORTED BY ( \n"
expr_stmt|;
comment|// Order
name|List
argument_list|<
name|String
argument_list|>
name|sortKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Order
name|sortCol
range|:
name|sortCols
control|)
block|{
name|String
name|sortKeyDesc
init|=
literal|"  "
operator|+
name|sortCol
operator|.
name|getCol
argument_list|()
operator|+
literal|" "
decl_stmt|;
if|if
condition|(
name|sortCol
operator|.
name|getOrder
argument_list|()
operator|==
name|BaseSemanticAnalyzer
operator|.
name|HIVE_COLUMN_ORDER_ASC
condition|)
block|{
name|sortKeyDesc
operator|=
name|sortKeyDesc
operator|+
literal|"ASC"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sortCol
operator|.
name|getOrder
argument_list|()
operator|==
name|BaseSemanticAnalyzer
operator|.
name|HIVE_COLUMN_ORDER_DESC
condition|)
block|{
name|sortKeyDesc
operator|=
name|sortKeyDesc
operator|+
literal|"DESC"
expr_stmt|;
block|}
name|sortKeys
operator|.
name|add
argument_list|(
name|sortKeyDesc
argument_list|)
expr_stmt|;
block|}
name|tbl_sort_bucket
operator|+=
name|StringUtils
operator|.
name|join
argument_list|(
name|sortKeys
argument_list|,
literal|", \n"
argument_list|)
expr_stmt|;
name|tbl_sort_bucket
operator|+=
literal|") \n"
expr_stmt|;
block|}
name|tbl_sort_bucket
operator|+=
literal|"INTO "
operator|+
name|tbl
operator|.
name|getNumBuckets
argument_list|()
operator|+
literal|" BUCKETS"
expr_stmt|;
block|}
comment|// Row format (SerDe)
name|String
name|tbl_row_format
init|=
literal|""
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|SerDeInfo
name|serdeInfo
init|=
name|sd
operator|.
name|getSerdeInfo
argument_list|()
decl_stmt|;
name|tbl_row_format
operator|+=
literal|"ROW FORMAT"
expr_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getStorageHandler
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|serdeInfo
operator|.
name|getParametersSize
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// There is a "serialization.format" property by default,
comment|// even with a delimited row format.
comment|// But our result will only cover the following four delimiters.
name|tbl_row_format
operator|+=
literal|" DELIMITED \n"
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|delims
init|=
name|serdeInfo
operator|.
name|getParameters
argument_list|()
decl_stmt|;
comment|// Warn:
comment|// If the four delimiters all exist in a CREATE TABLE query,
comment|// this following order needs to be strictly followed,
comment|// or the query will fail with a ParseException.
if|if
condition|(
name|delims
operator|.
name|containsKey
argument_list|(
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|)
condition|)
block|{
name|tbl_row_format
operator|+=
literal|"  FIELDS TERMINATED BY '"
operator|+
name|escapeHiveCommand
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|delims
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|)
argument_list|)
argument_list|)
operator|+
literal|"' \n"
expr_stmt|;
block|}
if|if
condition|(
name|delims
operator|.
name|containsKey
argument_list|(
name|serdeConstants
operator|.
name|COLLECTION_DELIM
argument_list|)
condition|)
block|{
name|tbl_row_format
operator|+=
literal|"  COLLECTION ITEMS TERMINATED BY '"
operator|+
name|escapeHiveCommand
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|delims
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|COLLECTION_DELIM
argument_list|)
argument_list|)
argument_list|)
operator|+
literal|"' \n"
expr_stmt|;
block|}
if|if
condition|(
name|delims
operator|.
name|containsKey
argument_list|(
name|serdeConstants
operator|.
name|MAPKEY_DELIM
argument_list|)
condition|)
block|{
name|tbl_row_format
operator|+=
literal|"  MAP KEYS TERMINATED BY '"
operator|+
name|escapeHiveCommand
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|delims
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|MAPKEY_DELIM
argument_list|)
argument_list|)
argument_list|)
operator|+
literal|"' \n"
expr_stmt|;
block|}
if|if
condition|(
name|delims
operator|.
name|containsKey
argument_list|(
name|serdeConstants
operator|.
name|LINE_DELIM
argument_list|)
condition|)
block|{
name|tbl_row_format
operator|+=
literal|"  LINES TERMINATED BY '"
operator|+
name|escapeHiveCommand
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|delims
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|LINE_DELIM
argument_list|)
argument_list|)
argument_list|)
operator|+
literal|"' \n"
expr_stmt|;
block|}
if|if
condition|(
name|delims
operator|.
name|containsKey
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|)
condition|)
block|{
name|tbl_row_format
operator|+=
literal|"  NULL DEFINED AS '"
operator|+
name|escapeHiveCommand
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|delims
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|)
argument_list|)
argument_list|)
operator|+
literal|"' \n"
expr_stmt|;
block|}
block|}
else|else
block|{
name|tbl_row_format
operator|+=
literal|" SERDE \n  '"
operator|+
name|escapeHiveCommand
argument_list|(
name|serdeInfo
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
operator|+
literal|"' \n"
expr_stmt|;
block|}
name|tbl_row_format
operator|+=
literal|"STORED AS INPUTFORMAT \n  '"
operator|+
name|escapeHiveCommand
argument_list|(
name|sd
operator|.
name|getInputFormat
argument_list|()
argument_list|)
operator|+
literal|"' \n"
expr_stmt|;
name|tbl_row_format
operator|+=
literal|"OUTPUTFORMAT \n  '"
operator|+
name|escapeHiveCommand
argument_list|(
name|sd
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
operator|+
literal|"'"
expr_stmt|;
block|}
else|else
block|{
name|duplicateProps
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|META_TABLE_STORAGE
argument_list|)
expr_stmt|;
name|tbl_row_format
operator|+=
literal|" SERDE \n  '"
operator|+
name|escapeHiveCommand
argument_list|(
name|serdeInfo
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
operator|+
literal|"' \n"
expr_stmt|;
name|tbl_row_format
operator|+=
literal|"STORED BY \n  '"
operator|+
name|escapeHiveCommand
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|META_TABLE_STORAGE
argument_list|)
argument_list|)
operator|+
literal|"' \n"
expr_stmt|;
comment|// SerDe Properties
if|if
condition|(
name|serdeInfo
operator|.
name|getParametersSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tbl_row_format
operator|+=
literal|"WITH SERDEPROPERTIES ( \n"
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|serdeCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|serdeInfo
operator|.
name|getParameters
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|serdeCols
operator|.
name|add
argument_list|(
literal|"  '"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"'='"
operator|+
name|escapeHiveCommand
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|tbl_row_format
operator|+=
name|StringUtils
operator|.
name|join
argument_list|(
name|serdeCols
argument_list|,
literal|", \n"
argument_list|)
expr_stmt|;
name|tbl_row_format
operator|+=
literal|")"
expr_stmt|;
block|}
block|}
name|String
name|tbl_location
init|=
literal|"  '"
operator|+
name|escapeHiveCommand
argument_list|(
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|+
literal|"'"
decl_stmt|;
comment|// Table properties
name|String
name|tbl_properties
init|=
literal|""
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|properties
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|realProps
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|duplicateProps
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|realProps
operator|.
name|add
argument_list|(
literal|"  '"
operator|+
name|key
operator|+
literal|"'='"
operator|+
name|escapeHiveCommand
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
name|tbl_properties
operator|+=
name|StringUtils
operator|.
name|join
argument_list|(
name|realProps
argument_list|,
literal|", \n"
argument_list|)
expr_stmt|;
block|}
name|createTab_stmt
operator|.
name|add
argument_list|(
name|TEMPORARY
argument_list|,
name|tbl_temp
argument_list|)
expr_stmt|;
name|createTab_stmt
operator|.
name|add
argument_list|(
name|EXTERNAL
argument_list|,
name|tbl_external
argument_list|)
expr_stmt|;
name|createTab_stmt
operator|.
name|add
argument_list|(
name|LIST_COLUMNS
argument_list|,
name|tbl_columns
argument_list|)
expr_stmt|;
name|createTab_stmt
operator|.
name|add
argument_list|(
name|TBL_COMMENT
argument_list|,
name|tbl_comment
argument_list|)
expr_stmt|;
name|createTab_stmt
operator|.
name|add
argument_list|(
name|LIST_PARTITIONS
argument_list|,
name|tbl_partitions
argument_list|)
expr_stmt|;
name|createTab_stmt
operator|.
name|add
argument_list|(
name|SORT_BUCKET
argument_list|,
name|tbl_sort_bucket
argument_list|)
expr_stmt|;
name|createTab_stmt
operator|.
name|add
argument_list|(
name|ROW_FORMAT
argument_list|,
name|tbl_row_format
argument_list|)
expr_stmt|;
comment|// Table location should not be printed with hbase backed tables
if|if
condition|(
operator|!
name|isHbaseTable
condition|)
block|{
name|createTab_stmt
operator|.
name|add
argument_list|(
name|TBL_LOCATION
argument_list|,
name|tbl_location
argument_list|)
expr_stmt|;
block|}
name|createTab_stmt
operator|.
name|add
argument_list|(
name|TBL_PROPERTIES
argument_list|,
name|tbl_properties
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
name|createTab_stmt
operator|.
name|render
argument_list|()
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStream
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"show create table: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"show create table: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Write a list of indexes to a file.    *    * @param db    *          The database in question.    * @param showIndexes    *          These are the indexes we're interested in.    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    *           Throws this exception if an unexpected error occurs.    */
specifier|private
name|int
name|showIndexes
parameter_list|(
name|Hive
name|db
parameter_list|,
name|ShowIndexesDesc
name|showIndexes
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// get the indexes for the table and populate the output
name|String
name|tableName
init|=
name|showIndexes
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Index
argument_list|>
name|indexes
init|=
literal|null
decl_stmt|;
name|tbl
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|indexes
operator|=
name|db
operator|.
name|getIndexes
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// write the results in the file
name|DataOutputStream
name|outStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|showIndexes
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|outStream
operator|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|showIndexes
operator|.
name|isFormatted
argument_list|()
condition|)
block|{
comment|// column headers
name|outStream
operator|.
name|writeBytes
argument_list|(
name|MetaDataFormatUtils
operator|.
name|getIndexColumnsHeader
argument_list|()
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Index
name|index
range|:
name|indexes
control|)
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|MetaDataFormatUtils
operator|.
name|getAllColumnsInformation
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStream
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"show indexes: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"show indexes: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Write a list of the available databases to a file.    *    * @param showDatabasesDesc    *          These are the databases we're interested in.    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    *           Throws this exception if an unexpected error occurs.    */
specifier|private
name|int
name|showDatabases
parameter_list|(
name|Hive
name|db
parameter_list|,
name|ShowDatabasesDesc
name|showDatabasesDesc
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// get the databases for the desired pattern - populate the output stream
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|showDatabasesDesc
operator|.
name|getPattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"pattern: "
operator|+
name|showDatabasesDesc
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|databases
operator|=
name|db
operator|.
name|getDatabasesByPattern
argument_list|(
name|showDatabasesDesc
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|databases
operator|=
name|db
operator|.
name|getAllDatabases
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"results : "
operator|+
name|databases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// write the results in the file
name|DataOutputStream
name|outStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|showDatabasesDesc
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|outStream
operator|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|showDatabases
argument_list|(
name|outStream
argument_list|,
name|databases
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStream
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|GENERIC_ERROR
argument_list|,
literal|"show databases"
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Write a list of the tables in the database to a file.    *    * @param db    *          The database in question.    * @param showTbls    *          These are the tables we're interested in.    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    *           Throws this exception if an unexpected error occurs.    */
specifier|private
name|int
name|showTables
parameter_list|(
name|Hive
name|db
parameter_list|,
name|ShowTablesDesc
name|showTbls
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// get the tables for the desired pattenn - populate the output stream
name|List
argument_list|<
name|String
argument_list|>
name|tbls
init|=
literal|null
decl_stmt|;
name|String
name|dbName
init|=
name|showTbls
operator|.
name|getDbName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|databaseExists
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|DATABASE_NOT_EXISTS
argument_list|,
name|dbName
argument_list|)
throw|;
block|}
if|if
condition|(
name|showTbls
operator|.
name|getPattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"pattern: "
operator|+
name|showTbls
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|tbls
operator|=
name|db
operator|.
name|getTablesByPattern
argument_list|(
name|dbName
argument_list|,
name|showTbls
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"results : "
operator|+
name|tbls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tbls
operator|=
name|db
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
comment|// write the results in the file
name|DataOutputStream
name|outStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|showTbls
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|outStream
operator|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|sortedTbls
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|tbls
argument_list|)
decl_stmt|;
name|formatter
operator|.
name|showTables
argument_list|(
name|outStream
argument_list|,
name|sortedTbls
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStream
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|GENERIC_ERROR
argument_list|,
literal|"in database"
operator|+
name|dbName
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|showColumns
parameter_list|(
name|Hive
name|db
parameter_list|,
name|ShowColumnsDesc
name|showCols
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|dbName
init|=
name|showCols
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|showCols
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dbName
operator|==
literal|null
condition|)
block|{
name|table
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|// write the results in the file
name|DataOutputStream
name|outStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|showCols
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|outStream
operator|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|table
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|cols
operator|.
name|addAll
argument_list|(
name|table
operator|.
name|getPartCols
argument_list|()
argument_list|)
expr_stmt|;
comment|// In case the query is served by HiveServer2, don't pad it with spaces,
comment|// as HiveServer2 output is consumed by JDBC/ODBC clients.
name|boolean
name|isOutputPadded
init|=
operator|!
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isHiveServerQuery
argument_list|()
decl_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
name|MetaDataFormatUtils
operator|.
name|getAllColumnsInformation
argument_list|(
name|cols
argument_list|,
literal|false
argument_list|,
name|isOutputPadded
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStream
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|GENERIC_ERROR
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Write a list of the user defined functions to a file.    *    * @param showFuncs    *          are the functions we're interested in.    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    *           Throws this exception if an unexpected error occurs.    */
specifier|private
name|int
name|showFunctions
parameter_list|(
name|ShowFunctionsDesc
name|showFuncs
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// get the tables for the desired patten - populate the output stream
name|Set
argument_list|<
name|String
argument_list|>
name|funcs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|showFuncs
operator|.
name|getPattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"pattern: "
operator|+
name|showFuncs
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|funcs
operator|=
name|FunctionRegistry
operator|.
name|getFunctionNames
argument_list|(
name|showFuncs
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"results : "
operator|+
name|funcs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|funcs
operator|=
name|FunctionRegistry
operator|.
name|getFunctionNames
argument_list|()
expr_stmt|;
block|}
comment|// write the results in the file
name|DataOutputStream
name|outStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|showFuncs
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|outStream
operator|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|sortedFuncs
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|funcs
argument_list|)
decl_stmt|;
comment|// To remove the primitive types
name|sortedFuncs
operator|.
name|removeAll
argument_list|(
name|serdeConstants
operator|.
name|PrimitiveTypes
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterFuncs
init|=
name|sortedFuncs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterFuncs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// create a row per table name
name|outStream
operator|.
name|writeBytes
argument_list|(
name|iterFuncs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStream
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"show function: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"show function: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Write a list of the current locks to a file.    *    * @param showLocks    *          the locks we're interested in.    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    *           Throws this exception if an unexpected error occurs.    */
specifier|private
name|int
name|showLocks
parameter_list|(
name|ShowLocksDesc
name|showLocks
parameter_list|)
throws|throws
name|HiveException
block|{
name|Context
name|ctx
init|=
name|driverContext
operator|.
name|getCtx
argument_list|()
decl_stmt|;
name|HiveTxnManager
name|txnManager
init|=
name|ctx
operator|.
name|getHiveTxnManager
argument_list|()
decl_stmt|;
name|HiveLockManager
name|lockMgr
init|=
name|txnManager
operator|.
name|getLockManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|txnManager
operator|.
name|useNewShowLocksFormat
argument_list|()
condition|)
return|return
name|showLocksNewFormat
argument_list|(
name|showLocks
argument_list|,
name|lockMgr
argument_list|)
return|;
name|boolean
name|isExt
init|=
name|showLocks
operator|.
name|isExt
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockMgr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"show Locks LockManager not specified"
argument_list|)
throw|;
block|}
comment|// write the results in the file
name|DataOutputStream
name|outStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|showLocks
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|outStream
operator|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|showLocks
operator|.
name|getTableName
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// TODO should be doing security check here.  Users should not be
comment|// able to see each other's locks.
name|locks
operator|=
name|lockMgr
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
name|isExt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|locks
operator|=
name|lockMgr
operator|.
name|getLocks
argument_list|(
name|getHiveObject
argument_list|(
name|showLocks
operator|.
name|getTableName
argument_list|()
argument_list|,
name|showLocks
operator|.
name|getPartSpec
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
name|isExt
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|locks
argument_list|,
operator|new
name|Comparator
argument_list|<
name|HiveLock
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|HiveLock
name|o1
parameter_list|,
name|HiveLock
name|o2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|o1
operator|.
name|getHiveLockObject
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getHiveLockObject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|o1
operator|.
name|getHiveLockMode
argument_list|()
operator|==
name|o2
operator|.
name|getHiveLockMode
argument_list|()
condition|)
block|{
return|return
name|cmp
return|;
block|}
comment|// EXCLUSIVE locks occur before SHARED locks
if|if
condition|(
name|o1
operator|.
name|getHiveLockMode
argument_list|()
operator|==
name|HiveLockMode
operator|.
name|EXCLUSIVE
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
operator|+
literal|1
return|;
block|}
return|return
name|cmp
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|HiveLock
argument_list|>
name|locksIter
init|=
name|locks
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|locksIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HiveLock
name|lock
init|=
name|locksIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
name|lock
operator|.
name|getHiveLockObject
argument_list|()
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
name|lock
operator|.
name|getHiveLockMode
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isExt
condition|)
block|{
name|HiveLockObjectData
name|lockData
init|=
name|lock
operator|.
name|getHiveLockObject
argument_list|()
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockData
operator|!=
literal|null
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"LOCK_QUERYID:"
operator|+
name|lockData
operator|.
name|getQueryId
argument_list|()
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"LOCK_TIME:"
operator|+
name|lockData
operator|.
name|getLockTime
argument_list|()
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"LOCK_MODE:"
operator|+
name|lockData
operator|.
name|getLockMode
argument_list|()
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"LOCK_QUERYSTRING:"
operator|+
name|lockData
operator|.
name|getQueryStr
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStream
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"show function: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"show function: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|showLocksNewFormat
parameter_list|(
name|ShowLocksDesc
name|showLocks
parameter_list|,
name|HiveLockManager
name|lm
parameter_list|)
throws|throws
name|HiveException
block|{
name|DbLockManager
name|lockMgr
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|lm
operator|instanceof
name|DbLockManager
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"New lock format only supported with db lock manager."
argument_list|)
throw|;
block|}
name|lockMgr
operator|=
operator|(
name|DbLockManager
operator|)
name|lm
expr_stmt|;
name|ShowLocksResponse
name|rsp
init|=
name|lockMgr
operator|.
name|getLocks
argument_list|()
decl_stmt|;
comment|// write the results in the file
name|DataOutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|showLocks
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|os
operator|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
expr_stmt|;
comment|// Write a header
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Lock ID"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Database"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Table"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Partition"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"State"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Type"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Transaction ID"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Last Hearbeat"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Acquired At"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"User"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Hostname"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|rsp
operator|.
name|getLocks
argument_list|()
decl_stmt|;
if|if
condition|(
name|locks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ShowLocksResponseElement
name|lock
range|:
name|locks
control|)
block|{
name|os
operator|.
name|writeBytes
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|lock
operator|.
name|getLockid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|lock
operator|.
name|getDbname
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
operator|(
name|lock
operator|.
name|getTablename
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|"NULL"
else|:
name|lock
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
operator|(
name|lock
operator|.
name|getPartname
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|"NULL"
else|:
name|lock
operator|.
name|getPartname
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|lock
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|lock
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
operator|(
name|lock
operator|.
name|getTxnid
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|"NULL"
else|:
name|Long
operator|.
name|toString
argument_list|(
name|lock
operator|.
name|getTxnid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|lock
operator|.
name|getLastheartbeat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
operator|(
name|lock
operator|.
name|getAcquiredat
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|"NULL"
else|:
name|Long
operator|.
name|toString
argument_list|(
name|lock
operator|.
name|getAcquiredat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|lock
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|lock
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|os
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"show function: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"show function: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|showCompactions
parameter_list|(
name|ShowCompactionsDesc
name|desc
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Call the metastore to get the currently queued and running compactions.
name|ShowCompactResponse
name|rsp
init|=
name|db
operator|.
name|showCompactions
argument_list|()
decl_stmt|;
comment|// Write the results into the file
name|DataOutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|desc
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|os
operator|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
expr_stmt|;
comment|// Write a header
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Database"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Table"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Partition"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Type"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"State"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Worker"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Start Time"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
if|if
condition|(
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ShowCompactResponseElement
name|e
range|:
name|rsp
operator|.
name|getCompacts
argument_list|()
control|)
block|{
name|os
operator|.
name|writeBytes
argument_list|(
name|e
operator|.
name|getDbname
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|e
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|String
name|part
init|=
name|e
operator|.
name|getPartitionname
argument_list|()
decl_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|part
operator|==
literal|null
condition|?
literal|"NULL"
else|:
name|part
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|e
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|e
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|String
name|wid
init|=
name|e
operator|.
name|getWorkerid
argument_list|()
decl_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|wid
operator|==
literal|null
condition|?
literal|"NULL"
else|:
name|wid
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getStart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"show compactions: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|showTxns
parameter_list|(
name|ShowTxnsDesc
name|desc
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Call the metastore to get the currently queued and running compactions.
name|GetOpenTxnsInfoResponse
name|rsp
init|=
name|db
operator|.
name|showTransactions
argument_list|()
decl_stmt|;
comment|// Write the results into the file
name|DataOutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|desc
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|os
operator|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
expr_stmt|;
comment|// Write a header
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Transaction ID"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Transaction State"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"User"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
literal|"Hostname"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
for|for
control|(
name|TxnInfo
name|txn
range|:
name|rsp
operator|.
name|getOpen_txns
argument_list|()
control|)
block|{
name|os
operator|.
name|writeBytes
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|txn
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|txn
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|txn
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|txn
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"show transactions: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Lock the table/partition specified    *    * @param lockTbl    *          the table/partition to be locked along with the mode    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    *           Throws this exception if an unexpected error occurs.    */
specifier|private
name|int
name|lockTable
parameter_list|(
name|LockTableDesc
name|lockTbl
parameter_list|)
throws|throws
name|HiveException
block|{
name|Context
name|ctx
init|=
name|driverContext
operator|.
name|getCtx
argument_list|()
decl_stmt|;
name|HiveTxnManager
name|txnManager
init|=
name|ctx
operator|.
name|getHiveTxnManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|txnManager
operator|.
name|supportsExplicitLock
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|LOCK_REQUEST_UNSUPPORTED
argument_list|,
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_MANAGER
argument_list|)
argument_list|)
throw|;
block|}
name|HiveLockManager
name|lockMgr
init|=
name|txnManager
operator|.
name|getLockManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockMgr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"lock Table LockManager not specified"
argument_list|)
throw|;
block|}
name|HiveLockMode
name|mode
init|=
name|HiveLockMode
operator|.
name|valueOf
argument_list|(
name|lockTbl
operator|.
name|getMode
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tabName
init|=
name|lockTbl
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|Table
name|tbl
init|=
name|db
operator|.
name|getTable
argument_list|(
name|tabName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Table "
operator|+
name|tabName
operator|+
literal|" does not exist "
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
name|lockTbl
operator|.
name|getPartSpec
argument_list|()
decl_stmt|;
name|HiveLockObjectData
name|lockData
init|=
operator|new
name|HiveLockObjectData
argument_list|(
name|lockTbl
operator|.
name|getQueryId
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|,
literal|"EXPLICIT"
argument_list|,
name|lockTbl
operator|.
name|getQueryStr
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|partSpec
operator|==
literal|null
condition|)
block|{
name|HiveLock
name|lck
init|=
name|lockMgr
operator|.
name|lock
argument_list|(
operator|new
name|HiveLockObject
argument_list|(
name|tbl
argument_list|,
name|lockData
argument_list|)
argument_list|,
name|mode
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|lck
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
name|Partition
name|par
init|=
name|db
operator|.
name|getPartition
argument_list|(
name|tbl
argument_list|,
name|partSpec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|par
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Partition "
operator|+
name|partSpec
operator|+
literal|" for table "
operator|+
name|tabName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
name|HiveLock
name|lck
init|=
name|lockMgr
operator|.
name|lock
argument_list|(
operator|new
name|HiveLockObject
argument_list|(
name|par
argument_list|,
name|lockData
argument_list|)
argument_list|,
name|mode
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|lck
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Lock the database    *    * @param lockDb    *          the database to be locked along with the mode    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    *           Throws this exception if an unexpected error occurs.    */
specifier|private
name|int
name|lockDatabase
parameter_list|(
name|LockDatabaseDesc
name|lockDb
parameter_list|)
throws|throws
name|HiveException
block|{
name|Context
name|ctx
init|=
name|driverContext
operator|.
name|getCtx
argument_list|()
decl_stmt|;
name|HiveTxnManager
name|txnManager
init|=
name|ctx
operator|.
name|getHiveTxnManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|txnManager
operator|.
name|supportsExplicitLock
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|LOCK_REQUEST_UNSUPPORTED
argument_list|,
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_MANAGER
argument_list|)
argument_list|)
throw|;
block|}
name|HiveLockManager
name|lockMgr
init|=
name|txnManager
operator|.
name|getLockManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockMgr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"lock Database LockManager not specified"
argument_list|)
throw|;
block|}
name|HiveLockMode
name|mode
init|=
name|HiveLockMode
operator|.
name|valueOf
argument_list|(
name|lockDb
operator|.
name|getMode
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
name|lockDb
operator|.
name|getDatabaseName
argument_list|()
decl_stmt|;
name|Database
name|dbObj
init|=
name|db
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbObj
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Database "
operator|+
name|dbName
operator|+
literal|" does not exist "
argument_list|)
throw|;
block|}
name|HiveLockObjectData
name|lockData
init|=
operator|new
name|HiveLockObjectData
argument_list|(
name|lockDb
operator|.
name|getQueryId
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|,
literal|"EXPLICIT"
argument_list|,
name|lockDb
operator|.
name|getQueryStr
argument_list|()
argument_list|)
decl_stmt|;
name|HiveLock
name|lck
init|=
name|lockMgr
operator|.
name|lock
argument_list|(
operator|new
name|HiveLockObject
argument_list|(
name|dbObj
operator|.
name|getName
argument_list|()
argument_list|,
name|lockData
argument_list|)
argument_list|,
name|mode
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|lck
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Unlock the database specified    *    * @param unlockDb    *          the database to be unlocked    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    *           Throws this exception if an unexpected error occurs.    */
specifier|private
name|int
name|unlockDatabase
parameter_list|(
name|UnlockDatabaseDesc
name|unlockDb
parameter_list|)
throws|throws
name|HiveException
block|{
name|Context
name|ctx
init|=
name|driverContext
operator|.
name|getCtx
argument_list|()
decl_stmt|;
name|HiveTxnManager
name|txnManager
init|=
name|ctx
operator|.
name|getHiveTxnManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|txnManager
operator|.
name|supportsExplicitLock
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|LOCK_REQUEST_UNSUPPORTED
argument_list|,
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_MANAGER
argument_list|)
argument_list|)
throw|;
block|}
name|HiveLockManager
name|lockMgr
init|=
name|txnManager
operator|.
name|getLockManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockMgr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"unlock Database LockManager not specified"
argument_list|)
throw|;
block|}
name|String
name|dbName
init|=
name|unlockDb
operator|.
name|getDatabaseName
argument_list|()
decl_stmt|;
name|Database
name|dbObj
init|=
name|db
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbObj
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Database "
operator|+
name|dbName
operator|+
literal|" does not exist "
argument_list|)
throw|;
block|}
name|HiveLockObject
name|obj
init|=
operator|new
name|HiveLockObject
argument_list|(
name|dbObj
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
name|lockMgr
operator|.
name|getLocks
argument_list|(
name|obj
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|locks
operator|==
literal|null
operator|)
operator|||
operator|(
name|locks
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Database "
operator|+
name|dbName
operator|+
literal|" is not locked "
argument_list|)
throw|;
block|}
for|for
control|(
name|HiveLock
name|lock
range|:
name|locks
control|)
block|{
name|lockMgr
operator|.
name|unlock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|HiveLockObject
name|getHiveObject
parameter_list|(
name|String
name|tabName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|)
throws|throws
name|HiveException
block|{
name|Table
name|tbl
init|=
name|db
operator|.
name|getTable
argument_list|(
name|tabName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Table "
operator|+
name|tabName
operator|+
literal|" does not exist "
argument_list|)
throw|;
block|}
name|HiveLockObject
name|obj
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|partSpec
operator|==
literal|null
condition|)
block|{
name|obj
operator|=
operator|new
name|HiveLockObject
argument_list|(
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Partition
name|par
init|=
name|db
operator|.
name|getPartition
argument_list|(
name|tbl
argument_list|,
name|partSpec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|par
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Partition "
operator|+
name|partSpec
operator|+
literal|" for table "
operator|+
name|tabName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
name|obj
operator|=
operator|new
name|HiveLockObject
argument_list|(
name|par
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|obj
return|;
block|}
comment|/**    * Unlock the table/partition specified    *    * @param unlockTbl    *          the table/partition to be unlocked    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    *           Throws this exception if an unexpected error occurs.    */
specifier|private
name|int
name|unlockTable
parameter_list|(
name|UnlockTableDesc
name|unlockTbl
parameter_list|)
throws|throws
name|HiveException
block|{
name|Context
name|ctx
init|=
name|driverContext
operator|.
name|getCtx
argument_list|()
decl_stmt|;
name|HiveTxnManager
name|txnManager
init|=
name|ctx
operator|.
name|getHiveTxnManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|txnManager
operator|.
name|supportsExplicitLock
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|LOCK_REQUEST_UNSUPPORTED
argument_list|,
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_MANAGER
argument_list|)
argument_list|)
throw|;
block|}
name|HiveLockManager
name|lockMgr
init|=
name|txnManager
operator|.
name|getLockManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockMgr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"unlock Table LockManager not specified"
argument_list|)
throw|;
block|}
name|String
name|tabName
init|=
name|unlockTbl
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|HiveLockObject
name|obj
init|=
name|getHiveObject
argument_list|(
name|tabName
argument_list|,
name|unlockTbl
operator|.
name|getPartSpec
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
name|lockMgr
operator|.
name|getLocks
argument_list|(
name|obj
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|locks
operator|==
literal|null
operator|)
operator|||
operator|(
name|locks
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Table "
operator|+
name|tabName
operator|+
literal|" is not locked "
argument_list|)
throw|;
block|}
name|Iterator
argument_list|<
name|HiveLock
argument_list|>
name|locksIter
init|=
name|locks
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|locksIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HiveLock
name|lock
init|=
name|locksIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|lockMgr
operator|.
name|unlock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Shows a description of a function.    *    * @param descFunc    *          is the function we are describing    * @throws HiveException    */
specifier|private
name|int
name|describeFunction
parameter_list|(
name|DescFunctionDesc
name|descFunc
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|funcName
init|=
name|descFunc
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// write the results in the file
name|DataOutputStream
name|outStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|descFunc
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|outStream
operator|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
expr_stmt|;
comment|// get the function documentation
name|Description
name|desc
init|=
literal|null
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|funcClass
init|=
literal|null
decl_stmt|;
name|FunctionInfo
name|functionInfo
init|=
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|funcName
argument_list|)
decl_stmt|;
if|if
condition|(
name|functionInfo
operator|!=
literal|null
condition|)
block|{
name|funcClass
operator|=
name|functionInfo
operator|.
name|getFunctionClass
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|funcClass
operator|!=
literal|null
condition|)
block|{
name|desc
operator|=
name|funcClass
operator|.
name|getAnnotation
argument_list|(
name|Description
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|desc
operator|.
name|value
argument_list|()
operator|.
name|replace
argument_list|(
literal|"_FUNC_"
argument_list|,
name|funcName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|descFunc
operator|.
name|isExtended
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|synonyms
init|=
name|FunctionRegistry
operator|.
name|getFunctionSynonyms
argument_list|(
name|funcName
argument_list|)
decl_stmt|;
if|if
condition|(
name|synonyms
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"\nSynonyms: "
operator|+
name|join
argument_list|(
name|synonyms
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|desc
operator|.
name|extended
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"\n"
operator|+
name|desc
operator|.
name|extended
argument_list|()
operator|.
name|replace
argument_list|(
literal|"_FUNC_"
argument_list|,
name|funcName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|funcClass
operator|!=
literal|null
condition|)
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"There is no documentation for function '"
operator|+
name|funcName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"Function '"
operator|+
name|funcName
operator|+
literal|"' does not exist."
argument_list|)
expr_stmt|;
block|}
block|}
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStream
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"describe function: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"describe function: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|descDatabase
parameter_list|(
name|DescDatabaseDesc
name|descDatabase
parameter_list|)
throws|throws
name|HiveException
block|{
name|DataOutputStream
name|outStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|descDatabase
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|outStream
operator|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
expr_stmt|;
name|Database
name|database
init|=
name|db
operator|.
name|getDatabase
argument_list|(
name|descDatabase
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|database
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|DATABASE_NOT_EXISTS
argument_list|,
name|descDatabase
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|descDatabase
operator|.
name|isExt
argument_list|()
condition|)
block|{
name|params
operator|=
name|database
operator|.
name|getParameters
argument_list|()
expr_stmt|;
block|}
name|String
name|location
init|=
name|database
operator|.
name|getLocationUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
condition|)
block|{
name|location
operator|=
literal|"location/in/test"
expr_stmt|;
block|}
name|PrincipalType
name|ownerType
init|=
name|database
operator|.
name|getOwnerType
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|showDatabaseDescription
argument_list|(
name|outStream
argument_list|,
name|database
operator|.
name|getName
argument_list|()
argument_list|,
name|database
operator|.
name|getDescription
argument_list|()
argument_list|,
name|location
argument_list|,
name|database
operator|.
name|getOwnerName
argument_list|()
argument_list|,
operator|(
literal|null
operator|==
name|ownerType
operator|)
condition|?
literal|null
else|:
name|ownerType
operator|.
name|name
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStream
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|GENERIC_ERROR
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Write the status of tables to a file.    *    * @param db    *          The database in question.    * @param showTblStatus    *          tables we are interested in    * @return Return 0 when execution succeeds and above 0 if it fails.    */
specifier|private
name|int
name|showTableStatus
parameter_list|(
name|Hive
name|db
parameter_list|,
name|ShowTableStatusDesc
name|showTblStatus
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// get the tables for the desired pattern - populate the output stream
name|List
argument_list|<
name|Table
argument_list|>
name|tbls
init|=
operator|new
name|ArrayList
argument_list|<
name|Table
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|part
init|=
name|showTblStatus
operator|.
name|getPartSpec
argument_list|()
decl_stmt|;
name|Partition
name|par
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|Table
name|tbl
init|=
name|db
operator|.
name|getTable
argument_list|(
name|showTblStatus
operator|.
name|getDbName
argument_list|()
argument_list|,
name|showTblStatus
operator|.
name|getPattern
argument_list|()
argument_list|)
decl_stmt|;
name|par
operator|=
name|db
operator|.
name|getPartition
argument_list|(
name|tbl
argument_list|,
name|part
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|par
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Partition "
operator|+
name|part
operator|+
literal|" for table "
operator|+
name|showTblStatus
operator|.
name|getPattern
argument_list|()
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|tbls
operator|.
name|add
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"pattern: "
operator|+
name|showTblStatus
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tblStr
init|=
name|db
operator|.
name|getTablesForDb
argument_list|(
name|showTblStatus
operator|.
name|getDbName
argument_list|()
argument_list|,
name|showTblStatus
operator|.
name|getPattern
argument_list|()
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|sortedTbls
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|tblStr
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterTbls
init|=
name|sortedTbls
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterTbls
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// create a row per table name
name|String
name|tblName
init|=
name|iterTbls
operator|.
name|next
argument_list|()
decl_stmt|;
name|Table
name|tbl
init|=
name|db
operator|.
name|getTable
argument_list|(
name|showTblStatus
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|tbls
operator|.
name|add
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"results : "
operator|+
name|tblStr
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// write the results in the file
name|DataOutputStream
name|outStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|showTblStatus
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|outStream
operator|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|showTableStatus
argument_list|(
name|outStream
argument_list|,
name|db
argument_list|,
name|conf
argument_list|,
name|tbls
argument_list|,
name|part
argument_list|,
name|par
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStream
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|GENERIC_ERROR
argument_list|,
literal|"show table status"
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Write the properties of a table to a file.    *    * @param db    *          The database in question.    * @param showTblPrpt    *          This is the table we're interested in.    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    *           Throws this exception if an unexpected error occurs.    */
specifier|private
name|int
name|showTableProperties
parameter_list|(
name|Hive
name|db
parameter_list|,
name|ShowTblPropertiesDesc
name|showTblPrpt
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|tableName
init|=
name|showTblPrpt
operator|.
name|getTableName
argument_list|()
decl_stmt|;
comment|// show table properties - populate the output stream
name|Table
name|tbl
init|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Table "
operator|+
name|tableName
operator|+
literal|" does not exist"
decl_stmt|;
name|writeToFile
argument_list|(
name|errMsg
argument_list|,
name|showTblPrpt
operator|.
name|getResFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"DDLTask: show properties for "
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|propertyName
init|=
name|showTblPrpt
operator|.
name|getPropertyName
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyName
operator|!=
literal|null
condition|)
block|{
name|String
name|propertyValue
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyValue
operator|==
literal|null
condition|)
block|{
name|String
name|errMsg
init|=
literal|"Table "
operator|+
name|tableName
operator|+
literal|" does not have property: "
operator|+
name|propertyName
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
name|propertyValue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"DDLTask: written data for showing properties of "
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|showTblPrpt
operator|.
name|getResFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"show table properties: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"show table properties: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|void
name|writeToFile
parameter_list|(
name|String
name|data
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
operator|!
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|OutputStreamWriter
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|out
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
operator|(
name|char
operator|)
name|terminator
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Write the description of a table to a file.    *    * @param db    *          The database in question.    * @param descTbl    *          This is the table we're interested in.    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    *           Throws this exception if an unexpected error occurs.    */
specifier|private
name|int
name|describeTable
parameter_list|(
name|Hive
name|db
parameter_list|,
name|DescTableDesc
name|descTbl
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|colPath
init|=
name|descTbl
operator|.
name|getColumnPath
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|descTbl
operator|.
name|getTableName
argument_list|()
decl_stmt|;
comment|// describe the table - populate the output stream
name|Table
name|tbl
init|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Partition
name|part
init|=
literal|null
decl_stmt|;
name|DataOutputStream
name|outStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|descTbl
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|outStream
operator|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStream
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TABLE
argument_list|,
name|tableName
argument_list|)
throw|;
block|}
if|if
condition|(
name|descTbl
operator|.
name|getPartSpec
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|part
operator|=
name|db
operator|.
name|getPartition
argument_list|(
name|tbl
argument_list|,
name|descTbl
operator|.
name|getPartSpec
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|outStream
operator|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStream
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PARTITION
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|descTbl
operator|.
name|getPartSpec
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
literal|','
argument_list|)
argument_list|,
name|tableName
argument_list|)
throw|;
block|}
name|tbl
operator|=
name|part
operator|.
name|getTable
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|GENERIC_ERROR
argument_list|,
name|tableName
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"DDLTask: got data for "
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|resFile
init|=
operator|new
name|Path
argument_list|(
name|descTbl
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|resFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|outStream
operator|=
name|fs
operator|.
name|create
argument_list|(
name|resFile
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|colPath
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|cols
operator|=
operator|(
name|part
operator|==
literal|null
operator|||
name|tbl
operator|.
name|getTableType
argument_list|()
operator|==
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|)
condition|?
name|tbl
operator|.
name|getCols
argument_list|()
else|:
name|part
operator|.
name|getCols
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|descTbl
operator|.
name|isFormatted
argument_list|()
condition|)
block|{
name|cols
operator|.
name|addAll
argument_list|(
name|tbl
operator|.
name|getPartCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|cols
operator|=
name|Hive
operator|.
name|getFieldsFromDeserializer
argument_list|(
name|colPath
argument_list|,
name|tbl
operator|.
name|getDeserializer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|descTbl
operator|.
name|isFormatted
argument_list|()
condition|)
block|{
comment|// when column name is specified in describe table DDL, colPath will
comment|// will be table_name.column_name
name|String
name|colName
init|=
name|colPath
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
index|[
literal|1
index|]
decl_stmt|;
name|String
index|[]
name|dbTab
init|=
name|splitTableName
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|colNames
operator|.
name|add
argument_list|(
name|colName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|part
condition|)
block|{
name|colStats
operator|=
name|db
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbTab
index|[
literal|0
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|dbTab
index|[
literal|1
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|colStats
operator|=
name|db
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|dbTab
index|[
literal|0
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|dbTab
index|[
literal|1
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|partitions
argument_list|,
name|colNames
argument_list|)
operator|.
name|get
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|fixDecimalColumnTypeName
argument_list|(
name|cols
argument_list|)
expr_stmt|;
comment|// In case the query is served by HiveServer2, don't pad it with spaces,
comment|// as HiveServer2 output is consumed by JDBC/ODBC clients.
name|boolean
name|isOutputPadded
init|=
operator|!
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isHiveServerQuery
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|describeTable
argument_list|(
name|outStream
argument_list|,
name|colPath
argument_list|,
name|tableName
argument_list|,
name|tbl
argument_list|,
name|part
argument_list|,
name|cols
argument_list|,
name|descTbl
operator|.
name|isFormatted
argument_list|()
argument_list|,
name|descTbl
operator|.
name|isExt
argument_list|()
argument_list|,
name|descTbl
operator|.
name|isPretty
argument_list|()
argument_list|,
name|isOutputPadded
argument_list|,
name|colStats
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DDLTask: written data for "
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStream
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|GENERIC_ERROR
argument_list|,
name|tableName
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Fix the type name of a column of type decimal w/o precision/scale specified. This makes    * the describe table show "decimal(10,0)" instead of "decimal" even if the type stored    * in metastore is "decimal", which is possible with previous hive.    *    * @param cols columns that to be fixed as such    */
specifier|private
specifier|static
name|void
name|fixDecimalColumnTypeName
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|)
block|{
for|for
control|(
name|FieldSchema
name|col
range|:
name|cols
control|)
block|{
if|if
condition|(
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
operator|.
name|equals
argument_list|(
name|col
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|col
operator|.
name|setType
argument_list|(
name|DecimalTypeInfo
operator|.
name|getQualifiedName
argument_list|(
name|HiveDecimal
operator|.
name|USER_DEFAULT_PRECISION
argument_list|,
name|HiveDecimal
operator|.
name|USER_DEFAULT_SCALE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|String
name|writeGrantInfo
parameter_list|(
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privileges
parameter_list|,
name|boolean
name|testMode
parameter_list|)
block|{
if|if
condition|(
name|privileges
operator|==
literal|null
operator|||
name|privileges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|//sort the list to get sorted (deterministic) output (for ease of testing)
name|Collections
operator|.
name|sort
argument_list|(
name|privileges
argument_list|)
expr_stmt|;
for|for
control|(
name|HiveObjectPrivilege
name|privilege
range|:
name|privileges
control|)
block|{
name|HiveObjectRef
name|resource
init|=
name|privilege
operator|.
name|getHiveObject
argument_list|()
decl_stmt|;
name|PrivilegeGrantInfo
name|grantInfo
init|=
name|privilege
operator|.
name|getGrantInfo
argument_list|()
decl_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|resource
operator|.
name|getDbName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|resource
operator|.
name|getObjectName
argument_list|()
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|resource
operator|.
name|getPartValues
argument_list|()
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|resource
operator|.
name|getColumnName
argument_list|()
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|privilege
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|privilege
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|grantInfo
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|grantInfo
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|testMode
condition|?
operator|-
literal|1
else|:
name|grantInfo
operator|.
name|getCreateTime
argument_list|()
operator|*
literal|1000L
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|grantInfo
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
name|String
name|writeRoleGrantsInfo
parameter_list|(
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|roleGrants
parameter_list|,
name|boolean
name|testMode
parameter_list|)
block|{
if|if
condition|(
name|roleGrants
operator|==
literal|null
operator|||
name|roleGrants
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|//sort the list to get sorted (deterministic) output (for ease of testing)
name|Collections
operator|.
name|sort
argument_list|(
name|roleGrants
argument_list|)
expr_stmt|;
for|for
control|(
name|RolePrincipalGrant
name|roleGrant
range|:
name|roleGrants
control|)
block|{
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|roleGrant
operator|.
name|getRoleName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|roleGrant
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|testMode
condition|?
operator|-
literal|1
else|:
name|roleGrant
operator|.
name|getGrantTime
argument_list|()
operator|*
literal|1000L
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|roleGrant
operator|.
name|getGrantorName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
name|String
name|writeRolesGrantedInfo
parameter_list|(
name|List
argument_list|<
name|HiveRoleGrant
argument_list|>
name|roles
parameter_list|,
name|boolean
name|testMode
parameter_list|)
block|{
if|if
condition|(
name|roles
operator|==
literal|null
operator|||
name|roles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|//sort the list to get sorted (deterministic) output (for ease of testing)
name|Collections
operator|.
name|sort
argument_list|(
name|roles
argument_list|)
expr_stmt|;
for|for
control|(
name|HiveRoleGrant
name|role
range|:
name|roles
control|)
block|{
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|role
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|testMode
condition|?
operator|-
literal|1
else|:
name|role
operator|.
name|getGrantTime
argument_list|()
operator|*
literal|1000L
argument_list|)
expr_stmt|;
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|role
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
name|StringBuilder
name|appendNonNull
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|appendNonNull
argument_list|(
name|builder
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|static
name|StringBuilder
name|appendNonNull
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|firstColumn
parameter_list|)
block|{
if|if
condition|(
operator|!
name|firstColumn
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|separator
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|terminator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
specifier|private
name|void
name|setAlterProtectMode
parameter_list|(
name|boolean
name|protectModeEnable
parameter_list|,
name|AlterTableDesc
operator|.
name|ProtectModeType
name|protectMode
parameter_list|,
name|ProtectMode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|protectMode
operator|==
name|AlterTableDesc
operator|.
name|ProtectModeType
operator|.
name|OFFLINE
condition|)
block|{
name|mode
operator|.
name|offline
operator|=
name|protectModeEnable
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|protectMode
operator|==
name|AlterTableDesc
operator|.
name|ProtectModeType
operator|.
name|NO_DROP
condition|)
block|{
name|mode
operator|.
name|noDrop
operator|=
name|protectModeEnable
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|protectMode
operator|==
name|AlterTableDesc
operator|.
name|ProtectModeType
operator|.
name|NO_DROP_CASCADE
condition|)
block|{
name|mode
operator|.
name|noDropCascade
operator|=
name|protectModeEnable
expr_stmt|;
block|}
block|}
comment|/**    * Alter a given table.    *    * @param db    *          The database in question.    * @param alterTbl    *          This is the table we're altering.    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    *           Throws this exception if an unexpected error occurs.    */
specifier|private
name|int
name|alterTable
parameter_list|(
name|Hive
name|db
parameter_list|,
name|AlterTableDesc
name|alterTbl
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// alter the table
name|Table
name|tbl
init|=
name|db
operator|.
name|getTable
argument_list|(
name|alterTbl
operator|.
name|getOldName
argument_list|()
argument_list|)
decl_stmt|;
name|Partition
name|part
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|allPartitions
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|alterTbl
operator|.
name|getPartSpec
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|alterTbl
operator|.
name|getOp
argument_list|()
operator|!=
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|ALTERPROTECTMODE
condition|)
block|{
name|part
operator|=
name|db
operator|.
name|getPartition
argument_list|(
name|tbl
argument_list|,
name|alterTbl
operator|.
name|getPartSpec
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PARTITION
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|alterTbl
operator|.
name|getPartSpec
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
literal|','
argument_list|)
operator|+
literal|" for table "
operator|+
name|alterTbl
operator|.
name|getOldName
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|allPartitions
operator|=
name|db
operator|.
name|getPartitions
argument_list|(
name|tbl
argument_list|,
name|alterTbl
operator|.
name|getPartSpec
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Table
name|oldTbl
init|=
name|tbl
operator|.
name|copy
argument_list|()
decl_stmt|;
if|if
condition|(
name|alterTbl
operator|.
name|getOp
argument_list|()
operator|==
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|RENAME
condition|)
block|{
name|tbl
operator|.
name|setTableName
argument_list|(
name|alterTbl
operator|.
name|getNewName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|alterTbl
operator|.
name|getOp
argument_list|()
operator|==
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|ADDCOLS
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newCols
init|=
name|alterTbl
operator|.
name|getNewCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|oldCols
init|=
name|tbl
operator|.
name|getCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getSerializationLib
argument_list|()
operator|.
name|equals
argument_list|(
literal|"org.apache.hadoop.hive.serde.thrift.columnsetSerDe"
argument_list|)
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Replacing columns for columnsetSerDe and changing to LazySimpleSerDe"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
name|newCols
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// make sure the columns does not already exist
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|iterNewCols
init|=
name|newCols
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterNewCols
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FieldSchema
name|newCol
init|=
name|iterNewCols
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|newColName
init|=
name|newCol
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|iterOldCols
init|=
name|oldCols
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterOldCols
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|oldColName
init|=
name|iterOldCols
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldColName
operator|.
name|equalsIgnoreCase
argument_list|(
name|newColName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|DUPLICATE_COLUMN_NAMES
argument_list|,
name|newColName
argument_list|)
throw|;
block|}
block|}
name|oldCols
operator|.
name|add
argument_list|(
name|newCol
argument_list|)
expr_stmt|;
block|}
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
name|oldCols
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|alterTbl
operator|.
name|getOp
argument_list|()
operator|==
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|RENAMECOLUMN
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|oldCols
init|=
name|tbl
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|iterOldCols
init|=
name|oldCols
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|oldName
init|=
name|alterTbl
operator|.
name|getOldColName
argument_list|()
decl_stmt|;
name|String
name|newName
init|=
name|alterTbl
operator|.
name|getNewColName
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|alterTbl
operator|.
name|getNewColType
argument_list|()
decl_stmt|;
name|String
name|comment
init|=
name|alterTbl
operator|.
name|getNewColComment
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
name|alterTbl
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|String
name|afterCol
init|=
name|alterTbl
operator|.
name|getAfterCol
argument_list|()
decl_stmt|;
name|FieldSchema
name|column
init|=
literal|null
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|int
name|position
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|position
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|iterOldCols
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FieldSchema
name|col
init|=
name|iterOldCols
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|oldColName
init|=
name|col
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldColName
operator|.
name|equalsIgnoreCase
argument_list|(
name|newName
argument_list|)
operator|&&
operator|!
name|oldColName
operator|.
name|equalsIgnoreCase
argument_list|(
name|oldName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|DUPLICATE_COLUMN_NAMES
argument_list|,
name|newName
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|oldColName
operator|.
name|equalsIgnoreCase
argument_list|(
name|oldName
argument_list|)
condition|)
block|{
name|col
operator|.
name|setName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|!
name|type
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|col
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comment
operator|!=
literal|null
condition|)
block|{
name|col
operator|.
name|setComment
argument_list|(
name|comment
argument_list|)
expr_stmt|;
block|}
name|found
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|first
operator|||
operator|(
name|afterCol
operator|!=
literal|null
operator|&&
operator|!
name|afterCol
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
condition|)
block|{
name|column
operator|=
name|col
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|afterCol
operator|!=
literal|null
operator|&&
operator|!
name|afterCol
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
name|oldColName
operator|.
name|equalsIgnoreCase
argument_list|(
name|afterCol
argument_list|)
condition|)
block|{
name|position
operator|=
name|i
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
name|newCols
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
comment|// did not find the column
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_COLUMN
argument_list|,
name|oldName
argument_list|)
throw|;
block|}
comment|// after column is not null, but we did not find it.
if|if
condition|(
operator|(
name|afterCol
operator|!=
literal|null
operator|&&
operator|!
name|afterCol
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
operator|&&
name|position
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_COLUMN
argument_list|,
name|afterCol
argument_list|)
throw|;
block|}
if|if
condition|(
name|position
operator|>=
literal|0
condition|)
block|{
name|newCols
operator|.
name|add
argument_list|(
name|position
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
name|newCols
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|alterTbl
operator|.
name|getOp
argument_list|()
operator|==
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|REPLACECOLS
condition|)
block|{
comment|// change SerDe to LazySimpleSerDe if it is columnsetSerDe
if|if
condition|(
name|tbl
operator|.
name|getSerializationLib
argument_list|()
operator|.
name|equals
argument_list|(
literal|"org.apache.hadoop.hive.serde.thrift.columnsetSerDe"
argument_list|)
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Replacing columns for columnsetSerDe and changing to LazySimpleSerDe"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|tbl
operator|.
name|getSerializationLib
argument_list|()
operator|.
name|equals
argument_list|(
name|MetadataTypedColumnsetSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|tbl
operator|.
name|getSerializationLib
argument_list|()
operator|.
name|equals
argument_list|(
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|tbl
operator|.
name|getSerializationLib
argument_list|()
operator|.
name|equals
argument_list|(
name|ColumnarSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|tbl
operator|.
name|getSerializationLib
argument_list|()
operator|.
name|equals
argument_list|(
name|DynamicSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|tbl
operator|.
name|getSerializationLib
argument_list|()
operator|.
name|equals
argument_list|(
name|ParquetHiveSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|CANNOT_REPLACE_COLUMNS
argument_list|,
name|alterTbl
operator|.
name|getOldName
argument_list|()
argument_list|)
throw|;
block|}
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
name|alterTbl
operator|.
name|getNewCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|alterTbl
operator|.
name|getOp
argument_list|()
operator|==
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|ADDPROPS
condition|)
block|{
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|putAll
argument_list|(
name|alterTbl
operator|.
name|getProps
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|alterTbl
operator|.
name|getOp
argument_list|()
operator|==
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|DROPPROPS
condition|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|keyItr
init|=
name|alterTbl
operator|.
name|getProps
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|keyItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|remove
argument_list|(
name|keyItr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|alterTbl
operator|.
name|getOp
argument_list|()
operator|==
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|ADDSERDEPROPS
condition|)
block|{
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|putAll
argument_list|(
name|alterTbl
operator|.
name|getProps
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|putAll
argument_list|(
name|alterTbl
operator|.
name|getProps
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|alterTbl
operator|.
name|getOp
argument_list|()
operator|==
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|ADDSERDE
condition|)
block|{
name|String
name|serdeName
init|=
name|alterTbl
operator|.
name|getSerdeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|serdeName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|alterTbl
operator|.
name|getProps
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|alterTbl
operator|.
name|getProps
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|putAll
argument_list|(
name|alterTbl
operator|.
name|getProps
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|alterTbl
operator|.
name|getSerdeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|alterTbl
operator|.
name|getProps
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|alterTbl
operator|.
name|getProps
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|putAll
argument_list|(
name|alterTbl
operator|.
name|getProps
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Table
operator|.
name|hasMetastoreBasedSchema
argument_list|(
name|conf
argument_list|,
name|serdeName
argument_list|)
condition|)
block|{
name|tbl
operator|.
name|setFields
argument_list|(
name|Hive
operator|.
name|getFieldsFromDeserializer
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getDeserializer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|alterTbl
operator|.
name|getOp
argument_list|()
operator|==
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|ADDFILEFORMAT
condition|)
block|{
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setInputFormat
argument_list|(
name|alterTbl
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setOutputFormat
argument_list|(
name|alterTbl
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|alterTbl
operator|.
name|getSerdeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|alterTbl
operator|.
name|getSerdeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setInputFormat
argument_list|(
name|alterTbl
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setOutputFormat
argument_list|(
name|alterTbl
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|alterTbl
operator|.
name|getSerdeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|alterTbl
operator|.
name|getSerdeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|alterTbl
operator|.
name|getOp
argument_list|()
operator|==
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|ALTERPROTECTMODE
condition|)
block|{
name|boolean
name|protectModeEnable
init|=
name|alterTbl
operator|.
name|isProtectModeEnable
argument_list|()
decl_stmt|;
name|AlterTableDesc
operator|.
name|ProtectModeType
name|protectMode
init|=
name|alterTbl
operator|.
name|getProtectModeType
argument_list|()
decl_stmt|;
name|ProtectMode
name|mode
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|allPartitions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Partition
name|tmpPart
range|:
name|allPartitions
control|)
block|{
name|mode
operator|=
name|tmpPart
operator|.
name|getProtectMode
argument_list|()
expr_stmt|;
name|setAlterProtectMode
argument_list|(
name|protectModeEnable
argument_list|,
name|protectMode
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|tmpPart
operator|.
name|setProtectMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|mode
operator|=
name|tbl
operator|.
name|getProtectMode
argument_list|()
expr_stmt|;
name|setAlterProtectMode
argument_list|(
name|protectModeEnable
argument_list|,
name|protectMode
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProtectMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|alterTbl
operator|.
name|getOp
argument_list|()
operator|==
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|ADDCLUSTERSORTCOLUMN
condition|)
block|{
comment|// validate sort columns and bucket columns
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
name|Utilities
operator|.
name|getColumnNamesFromFieldSchema
argument_list|(
name|tbl
operator|.
name|getCols
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|alterTbl
operator|.
name|isTurnOffSorting
argument_list|()
condition|)
block|{
name|Utilities
operator|.
name|validateColumnNames
argument_list|(
name|columns
argument_list|,
name|alterTbl
operator|.
name|getBucketColumns
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|alterTbl
operator|.
name|getSortColumns
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Utilities
operator|.
name|validateColumnNames
argument_list|(
name|columns
argument_list|,
name|Utilities
operator|.
name|getColumnNamesFromSortCols
argument_list|(
name|alterTbl
operator|.
name|getSortColumns
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StorageDescriptor
name|sd
init|=
name|part
operator|==
literal|null
condition|?
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
else|:
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getSd
argument_list|()
decl_stmt|;
if|if
condition|(
name|alterTbl
operator|.
name|isTurnOffSorting
argument_list|()
condition|)
block|{
name|sd
operator|.
name|setSortCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|alterTbl
operator|.
name|getNumberBuckets
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
comment|// -1 buckets means to turn off bucketing
name|sd
operator|.
name|setBucketCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setNumBuckets
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSortCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sd
operator|.
name|setBucketCols
argument_list|(
name|alterTbl
operator|.
name|getBucketColumns
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setNumBuckets
argument_list|(
name|alterTbl
operator|.
name|getNumberBuckets
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSortCols
argument_list|(
name|alterTbl
operator|.
name|getSortColumns
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|alterTbl
operator|.
name|getOp
argument_list|()
operator|==
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|ALTERLOCATION
condition|)
block|{
name|String
name|newLocation
init|=
name|alterTbl
operator|.
name|getNewLocation
argument_list|()
decl_stmt|;
try|try
block|{
name|URI
name|locUri
init|=
operator|new
name|URI
argument_list|(
name|newLocation
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|locUri
operator|.
name|isAbsolute
argument_list|()
operator|||
name|locUri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
operator|||
name|locUri
operator|.
name|getScheme
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|BAD_LOCATION_VALUE
argument_list|,
name|newLocation
argument_list|)
throw|;
block|}
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|setLocation
argument_list|(
name|newLocation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tbl
operator|.
name|setDataLocation
argument_list|(
operator|new
name|Path
argument_list|(
name|locUri
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|alterTbl
operator|.
name|getOp
argument_list|()
operator|==
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|ADDSKEWEDBY
condition|)
block|{
comment|/* Validation's been done at compile time. no validation is needed here. */
name|List
argument_list|<
name|String
argument_list|>
name|skewedColNames
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|skewedValues
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|alterTbl
operator|.
name|isTurnOffSkewed
argument_list|()
condition|)
block|{
comment|/* Convert skewed table to non-skewed table. */
name|skewedColNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|skewedValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|skewedColNames
operator|=
name|alterTbl
operator|.
name|getSkewedColNames
argument_list|()
expr_stmt|;
name|skewedValues
operator|=
name|alterTbl
operator|.
name|getSkewedColValues
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|tbl
operator|.
name|getSkewedInfo
argument_list|()
condition|)
block|{
comment|/* Convert non-skewed table to skewed table. */
name|SkewedInfo
name|skewedInfo
init|=
operator|new
name|SkewedInfo
argument_list|()
decl_stmt|;
name|skewedInfo
operator|.
name|setSkewedColNames
argument_list|(
name|skewedColNames
argument_list|)
expr_stmt|;
name|skewedInfo
operator|.
name|setSkewedColValues
argument_list|(
name|skewedValues
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSkewedInfo
argument_list|(
name|skewedInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tbl
operator|.
name|setSkewedColNames
argument_list|(
name|skewedColNames
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSkewedColValues
argument_list|(
name|skewedValues
argument_list|)
expr_stmt|;
block|}
name|tbl
operator|.
name|setStoredAsSubDirectories
argument_list|(
name|alterTbl
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|alterTbl
operator|.
name|getOp
argument_list|()
operator|==
name|AlterTableDesc
operator|.
name|AlterTableTypes
operator|.
name|ALTERSKEWEDLOCATION
condition|)
block|{
comment|// process location one-by-one
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|locMaps
init|=
name|alterTbl
operator|.
name|getSkewedLocations
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|keys
init|=
name|locMaps
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|key
range|:
name|keys
control|)
block|{
name|String
name|newLocation
init|=
name|locMaps
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
try|try
block|{
name|URI
name|locUri
init|=
operator|new
name|URI
argument_list|(
name|newLocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|slk
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|part
operator|.
name|setSkewedValueLocationMap
argument_list|(
name|slk
argument_list|,
name|locUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|slk
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setSkewedValueLocationMap
argument_list|(
name|slk
argument_list|,
name|locUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|alterTbl
operator|.
name|getOp
argument_list|()
operator|==
name|AlterTableTypes
operator|.
name|ALTERBUCKETNUM
condition|)
block|{
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|part
operator|.
name|getBucketCount
argument_list|()
operator|==
name|alterTbl
operator|.
name|getNumberBuckets
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|part
operator|.
name|setBucketCount
argument_list|(
name|alterTbl
operator|.
name|getNumberBuckets
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|tbl
operator|.
name|getNumBuckets
argument_list|()
operator|==
name|alterTbl
operator|.
name|getNumberBuckets
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|tbl
operator|.
name|setNumBuckets
argument_list|(
name|alterTbl
operator|.
name|getNumberBuckets
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|UNSUPPORTED_ALTER_TBL_OP
argument_list|,
name|alterTbl
operator|.
name|getOp
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|part
operator|==
literal|null
operator|&&
name|allPartitions
operator|==
literal|null
condition|)
block|{
name|updateModifiedParameters
argument_list|(
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|checkValidity
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|updateModifiedParameters
argument_list|(
name|part
operator|.
name|getParameters
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Partition
name|tmpPart
range|:
name|allPartitions
control|)
block|{
name|updateModifiedParameters
argument_list|(
name|tmpPart
operator|.
name|getParameters
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|part
operator|==
literal|null
operator|&&
name|allPartitions
operator|==
literal|null
condition|)
block|{
name|db
operator|.
name|alterTable
argument_list|(
name|alterTbl
operator|.
name|getOldName
argument_list|()
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|alterPartition
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|db
operator|.
name|alterPartitions
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|allPartitions
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"alter table: "
operator|+
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|GENERIC_ERROR
argument_list|)
throw|;
block|}
comment|// This is kind of hacky - the read entity contains the old table, whereas
comment|// the write entity
comment|// contains the new table. This is needed for rename - both the old and the
comment|// new table names are
comment|// passed
comment|// Don't acquire locks for any of these, we have already asked for them in DDLSemanticAnalyzer.
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|work
operator|.
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|part
argument_list|)
argument_list|)
expr_stmt|;
name|work
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|part
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allPartitions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Partition
name|tmpPart
range|:
name|allPartitions
control|)
block|{
name|work
operator|.
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|tmpPart
argument_list|)
argument_list|)
expr_stmt|;
name|work
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|tmpPart
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|work
operator|.
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|oldTbl
argument_list|)
argument_list|)
expr_stmt|;
name|work
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|tbl
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Drop a given table or some partitions. DropTableDesc is currently used for both.    *    * @param db    *          The database in question.    * @param dropTbl    *          This is the table we're dropping.    * @throws HiveException    *           Throws this exception if an unexpected error occurs.    */
specifier|private
name|void
name|dropTableOrPartitions
parameter_list|(
name|Hive
name|db
parameter_list|,
name|DropTableDesc
name|dropTbl
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// We need to fetch the table before it is dropped so that it can be passed to
comment|// post-execution hook
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tbl
operator|=
name|db
operator|.
name|getTable
argument_list|(
name|dropTbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidTableException
name|e
parameter_list|)
block|{
comment|// drop table is idempotent
block|}
if|if
condition|(
name|dropTbl
operator|.
name|getPartSpecs
argument_list|()
operator|==
literal|null
condition|)
block|{
name|dropTable
argument_list|(
name|db
argument_list|,
name|tbl
argument_list|,
name|dropTbl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dropPartitions
argument_list|(
name|db
argument_list|,
name|tbl
argument_list|,
name|dropTbl
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|dropPartitions
parameter_list|(
name|Hive
name|db
parameter_list|,
name|Table
name|tbl
parameter_list|,
name|DropTableDesc
name|dropTbl
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// ifExists is currently verified in DDLSemanticAnalyzer
name|List
argument_list|<
name|Partition
argument_list|>
name|droppedParts
init|=
name|db
operator|.
name|dropPartitions
argument_list|(
name|dropTbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|dropTbl
operator|.
name|getPartSpecs
argument_list|()
argument_list|,
literal|true
argument_list|,
name|dropTbl
operator|.
name|getIgnoreProtection
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|droppedParts
control|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Dropped the partition "
operator|+
name|partition
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// We have already locked the table, don't lock the partitions.
name|work
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|partition
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
specifier|private
name|void
name|dropTable
parameter_list|(
name|Hive
name|db
parameter_list|,
name|Table
name|tbl
parameter_list|,
name|DropTableDesc
name|dropTbl
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// This is a true DROP TABLE
if|if
condition|(
name|tbl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|tbl
operator|.
name|isView
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|dropTbl
operator|.
name|getExpectView
argument_list|()
condition|)
block|{
if|if
condition|(
name|dropTbl
operator|.
name|getIfExists
argument_list|()
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Cannot drop a view with DROP TABLE"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|dropTbl
operator|.
name|getExpectView
argument_list|()
condition|)
block|{
if|if
condition|(
name|dropTbl
operator|.
name|getIfExists
argument_list|()
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Cannot drop a base table with DROP VIEW"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|tbl
operator|!=
literal|null
operator|&&
operator|!
name|tbl
operator|.
name|canDrop
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Table "
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
operator|+
literal|" is protected from being dropped"
argument_list|)
throw|;
block|}
name|int
name|partitionBatchSize
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_BATCH_RETRIEVE_TABLE_PARTITION_MAX
argument_list|)
decl_stmt|;
comment|// We should check that all the partitions of the table can be dropped
if|if
condition|(
name|tbl
operator|!=
literal|null
operator|&&
name|tbl
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
name|db
operator|.
name|getPartitionNames
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitionNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
name|partitionBatchSize
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
name|partitionNames
operator|.
name|subList
argument_list|(
name|i
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|i
operator|+
name|partitionBatchSize
argument_list|,
name|partitionNames
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitions
init|=
name|db
operator|.
name|getPartitionsByNames
argument_list|(
name|tbl
argument_list|,
name|partNames
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|p
range|:
name|listPartitions
control|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|canDrop
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Table "
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
operator|+
literal|" Partition"
operator|+
name|p
operator|.
name|getName
argument_list|()
operator|+
literal|" is protected from being dropped"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|// drop the table
name|db
operator|.
name|dropTable
argument_list|(
name|dropTbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|!=
literal|null
condition|)
block|{
comment|// We have already locked the table in DDLSemanticAnalyzer, don't do it again here
name|work
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|tbl
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Update last_modified_by and last_modified_time parameters in parameter map.    *    * @param params    *          Parameters.    * @param conf    *          HiveConf of session    */
specifier|private
name|boolean
name|updateModifiedParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|user
init|=
literal|null
decl_stmt|;
name|user
operator|=
name|SessionState
operator|.
name|getUserFromAuthenticator
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"last_modified_by"
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"last_modified_time"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Check if the given serde is valid.    */
specifier|private
name|void
name|validateSerDe
parameter_list|(
name|String
name|serdeName
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|Deserializer
name|d
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClassByName
argument_list|(
name|serdeName
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Deserializer
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found class for "
operator|+
name|serdeName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Cannot validate serde: "
operator|+
name|serdeName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Create a Database    * @param db    * @param crtDb    * @return Always returns 0    * @throws HiveException    */
specifier|private
name|int
name|createDatabase
parameter_list|(
name|Hive
name|db
parameter_list|,
name|CreateDatabaseDesc
name|crtDb
parameter_list|)
throws|throws
name|HiveException
block|{
name|Database
name|database
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|database
operator|.
name|setName
argument_list|(
name|crtDb
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|setDescription
argument_list|(
name|crtDb
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|setLocationUri
argument_list|(
name|crtDb
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|setParameters
argument_list|(
name|crtDb
operator|.
name|getDatabaseProperties
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|setOwnerName
argument_list|(
name|SessionState
operator|.
name|getUserFromAuthenticator
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|Utilities
operator|.
name|isDefaultNameNode
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|makeLocationQualified
argument_list|(
name|database
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|createDatabase
argument_list|(
name|database
argument_list|,
name|crtDb
operator|.
name|getIfNotExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|ex
parameter_list|)
block|{
comment|//it would be better if AlreadyExistsException had an errorCode field....
throw|throw
operator|new
name|HiveException
argument_list|(
name|ex
argument_list|,
name|ErrorMsg
operator|.
name|DATABSAE_ALREADY_EXISTS
argument_list|,
name|crtDb
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Drop a Database    * @param db    * @param dropDb    * @return Always returns 0    * @throws HiveException    */
specifier|private
name|int
name|dropDatabase
parameter_list|(
name|Hive
name|db
parameter_list|,
name|DropDatabaseDesc
name|dropDb
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|db
operator|.
name|dropDatabase
argument_list|(
name|dropDb
operator|.
name|getDatabaseName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|dropDb
operator|.
name|getIfExists
argument_list|()
argument_list|,
name|dropDb
operator|.
name|isCasdade
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ex
argument_list|,
name|ErrorMsg
operator|.
name|DATABASE_NOT_EXISTS
argument_list|,
name|dropDb
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Switch to a different Database    * @param db    * @param switchDb    * @return Always returns 0    * @throws HiveException    */
specifier|private
name|int
name|switchDatabase
parameter_list|(
name|Hive
name|db
parameter_list|,
name|SwitchDatabaseDesc
name|switchDb
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|dbName
init|=
name|switchDb
operator|.
name|getDatabaseName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|databaseExists
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|DATABASE_NOT_EXISTS
argument_list|,
name|dbName
argument_list|)
throw|;
block|}
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setCurrentDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
comment|// set database specific parameters
name|Database
name|database
init|=
name|db
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|database
operator|!=
literal|null
operator|)
assert|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dbParams
init|=
name|database
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbParams
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HiveConf
operator|.
name|ConfVars
name|var
range|:
name|HiveConf
operator|.
name|dbVars
control|)
block|{
name|String
name|newValue
init|=
name|dbParams
operator|.
name|get
argument_list|(
name|var
operator|.
name|varname
argument_list|)
decl_stmt|;
if|if
condition|(
name|newValue
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Changing "
operator|+
name|var
operator|.
name|varname
operator|+
literal|" from "
operator|+
name|conf
operator|.
name|getVar
argument_list|(
name|var
argument_list|)
operator|+
literal|" to "
operator|+
name|newValue
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|var
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Create a new table.    *    * @param db    *          The database in question.    * @param crtTbl    *          This is the table we're creating.    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    *           Throws this exception if an unexpected error occurs.    */
specifier|private
name|int
name|createTable
parameter_list|(
name|Hive
name|db
parameter_list|,
name|CreateTableDesc
name|crtTbl
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// create the table
name|Table
name|tbl
init|=
name|db
operator|.
name|newTable
argument_list|(
name|crtTbl
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|crtTbl
operator|.
name|getTblProps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|putAll
argument_list|(
name|crtTbl
operator|.
name|getTblProps
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getPartCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setPartCols
argument_list|(
name|crtTbl
operator|.
name|getPartCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getNumBuckets
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|tbl
operator|.
name|setNumBuckets
argument_list|(
name|crtTbl
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getStorageHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|META_TABLE_STORAGE
argument_list|,
name|crtTbl
operator|.
name|getStorageHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HiveStorageHandler
name|storageHandler
init|=
name|tbl
operator|.
name|getStorageHandler
argument_list|()
decl_stmt|;
comment|/*      * We use LazySimpleSerDe by default.      *      * If the user didn't specify a SerDe, and any of the columns are not simple      * types, we will have to use DynamicSerDe instead.      */
if|if
condition|(
name|crtTbl
operator|.
name|getSerName
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|storageHandler
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Default to LazySimpleSerDe for table "
operator|+
name|crtTbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|serDeClassName
init|=
name|storageHandler
operator|.
name|getSerDeClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Use StorageHandler-supplied "
operator|+
name|serDeClassName
operator|+
literal|" for table "
operator|+
name|crtTbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|serDeClassName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// let's validate that the serde exists
name|validateSerDe
argument_list|(
name|crtTbl
operator|.
name|getSerName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|crtTbl
operator|.
name|getSerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getFieldDelim
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|,
name|crtTbl
operator|.
name|getFieldDelim
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
name|crtTbl
operator|.
name|getFieldDelim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getFieldEscape
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|ESCAPE_CHAR
argument_list|,
name|crtTbl
operator|.
name|getFieldEscape
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getCollItemDelim
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|COLLECTION_DELIM
argument_list|,
name|crtTbl
operator|.
name|getCollItemDelim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getMapKeyDelim
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|MAPKEY_DELIM
argument_list|,
name|crtTbl
operator|.
name|getMapKeyDelim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getLineDelim
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|LINE_DELIM
argument_list|,
name|crtTbl
operator|.
name|getLineDelim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getNullFormat
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|,
name|crtTbl
operator|.
name|getNullFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getSerdeProps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iter
init|=
name|crtTbl
operator|.
name|getSerdeProps
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|m
operator|.
name|getKey
argument_list|()
argument_list|,
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setFields
argument_list|(
name|crtTbl
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getBucketCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setBucketCols
argument_list|(
name|crtTbl
operator|.
name|getBucketCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getSortCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSortCols
argument_list|(
name|crtTbl
operator|.
name|getSortCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getComment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"comment"
argument_list|,
name|crtTbl
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setDataLocation
argument_list|(
operator|new
name|Path
argument_list|(
name|crtTbl
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getSkewedColNames
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSkewedColNames
argument_list|(
name|crtTbl
operator|.
name|getSkewedColNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getSkewedColValues
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSkewedColValues
argument_list|(
name|crtTbl
operator|.
name|getSkewedColValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|setTemporary
argument_list|(
name|crtTbl
operator|.
name|isTemporary
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setStoredAsSubDirectories
argument_list|(
name|crtTbl
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setInputFormatClass
argument_list|(
name|crtTbl
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setOutputFormatClass
argument_list|(
name|crtTbl
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setInputFormat
argument_list|(
name|tbl
operator|.
name|getInputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setOutputFormat
argument_list|(
name|tbl
operator|.
name|getOutputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Utilities
operator|.
name|isDefaultNameNode
argument_list|(
name|conf
argument_list|)
condition|)
block|{
comment|// If location is specified - ensure that it is a full qualified name
name|makeLocationQualified
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|isExternal
argument_list|()
condition|)
block|{
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setTableType
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
argument_list|)
expr_stmt|;
block|}
comment|// If the sorted columns is a superset of bucketed columns, store this fact.
comment|// It can be later used to
comment|// optimize some group-by queries. Note that, the order does not matter as
comment|// long as it in the first
comment|// 'n' columns where 'n' is the length of the bucketed columns.
if|if
condition|(
operator|(
name|tbl
operator|.
name|getBucketCols
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|tbl
operator|.
name|getSortCols
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
init|=
name|tbl
operator|.
name|getBucketCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
init|=
name|tbl
operator|.
name|getSortCols
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|sortCols
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|sortCols
operator|.
name|size
argument_list|()
operator|>=
name|bucketCols
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
name|boolean
name|found
init|=
literal|true
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterBucketCols
init|=
name|bucketCols
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterBucketCols
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|bucketCol
init|=
name|iterBucketCols
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|colFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bucketCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|bucketCol
operator|.
name|equals
argument_list|(
name|sortCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getCol
argument_list|()
argument_list|)
condition|)
block|{
name|colFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|colFound
operator|==
literal|false
condition|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"SORTBUCKETCOLSPREFIX"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// create the table
name|db
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|,
name|crtTbl
operator|.
name|getIfNotExists
argument_list|()
argument_list|)
expr_stmt|;
name|work
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|tbl
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Create a new table like an existing table.    *    * @param db    *          The database in question.    * @param crtTbl    *          This is the table we're creating.    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    *           Throws this exception if an unexpected error occurs.    */
specifier|private
name|int
name|createTableLike
parameter_list|(
name|Hive
name|db
parameter_list|,
name|CreateTableLikeDesc
name|crtTbl
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Get the existing table
name|Table
name|oldtbl
init|=
name|db
operator|.
name|getTable
argument_list|(
name|crtTbl
operator|.
name|getLikeTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|tbl
decl_stmt|;
if|if
condition|(
name|oldtbl
operator|.
name|getTableType
argument_list|()
operator|==
name|TableType
operator|.
name|VIRTUAL_VIEW
condition|)
block|{
name|String
name|targetTableName
init|=
name|crtTbl
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|tbl
operator|=
name|db
operator|.
name|newTable
argument_list|(
name|targetTableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|crtTbl
operator|.
name|getTblProps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|putAll
argument_list|(
name|crtTbl
operator|.
name|getTblProps
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tbl
operator|.
name|setTableType
argument_list|(
name|TableType
operator|.
name|MANAGED_TABLE
argument_list|)
expr_stmt|;
if|if
condition|(
name|crtTbl
operator|.
name|isExternal
argument_list|()
condition|)
block|{
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setTableType
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
argument_list|)
expr_stmt|;
block|}
name|tbl
operator|.
name|setFields
argument_list|(
name|oldtbl
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setPartCols
argument_list|(
name|oldtbl
operator|.
name|getPartCols
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|crtTbl
operator|.
name|getDefaultSerName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Default to LazySimpleSerDe for table "
operator|+
name|crtTbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// let's validate that the serde exists
name|validateSerDe
argument_list|(
name|crtTbl
operator|.
name|getDefaultSerName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|crtTbl
operator|.
name|getDefaultSerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getDefaultSerdeProps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iter
init|=
name|crtTbl
operator|.
name|getDefaultSerdeProps
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|m
operator|.
name|getKey
argument_list|()
argument_list|,
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|tbl
operator|.
name|setInputFormatClass
argument_list|(
name|crtTbl
operator|.
name|getDefaultInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setOutputFormatClass
argument_list|(
name|crtTbl
operator|.
name|getDefaultOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setInputFormat
argument_list|(
name|tbl
operator|.
name|getInputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setOutputFormat
argument_list|(
name|tbl
operator|.
name|getOutputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tbl
operator|=
name|oldtbl
expr_stmt|;
comment|// find out database name and table name of target table
name|String
name|targetTableName
init|=
name|crtTbl
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
index|[]
name|names
init|=
name|Utilities
operator|.
name|getDbTableName
argument_list|(
name|targetTableName
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setDbName
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setTableName
argument_list|(
name|names
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|crtTbl
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setDataLocation
argument_list|(
operator|new
name|Path
argument_list|(
name|crtTbl
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tbl
operator|.
name|unsetDataLocation
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|tbl
operator|.
name|getParameters
argument_list|()
decl_stmt|;
comment|// We should copy only those table parameters that are specified in the config.
name|String
name|paramsStr
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DDL_CTL_PARAMETERS_WHITELIST
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramsStr
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paramsList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|paramsStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|params
operator|.
name|keySet
argument_list|()
operator|.
name|retainAll
argument_list|(
name|paramsList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|getTblProps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|putAll
argument_list|(
name|crtTbl
operator|.
name|getTblProps
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|setTemporary
argument_list|(
name|crtTbl
operator|.
name|isTemporary
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|crtTbl
operator|.
name|isExternal
argument_list|()
condition|)
block|{
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setTableType
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|remove
argument_list|(
literal|"EXTERNAL"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|Utilities
operator|.
name|isDefaultNameNode
argument_list|(
name|conf
argument_list|)
condition|)
block|{
comment|// If location is specified - ensure that it is a full qualified name
name|makeLocationQualified
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// create the table
name|db
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|,
name|crtTbl
operator|.
name|getIfNotExists
argument_list|()
argument_list|)
expr_stmt|;
name|work
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|tbl
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Create a new view.    *    * @param db    *          The database in question.    * @param crtView    *          This is the view we're creating.    * @return Returns 0 when execution succeeds and above 0 if it fails.    * @throws HiveException    *           Throws this exception if an unexpected error occurs.    */
specifier|private
name|int
name|createView
parameter_list|(
name|Hive
name|db
parameter_list|,
name|CreateViewDesc
name|crtView
parameter_list|)
throws|throws
name|HiveException
block|{
name|Table
name|oldview
init|=
name|db
operator|.
name|getTable
argument_list|(
name|crtView
operator|.
name|getViewName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|crtView
operator|.
name|getOrReplace
argument_list|()
operator|&&
name|oldview
operator|!=
literal|null
condition|)
block|{
comment|// replace existing view
comment|// remove the existing partition columns from the field schema
name|oldview
operator|.
name|setViewOriginalText
argument_list|(
name|crtView
operator|.
name|getViewOriginalText
argument_list|()
argument_list|)
expr_stmt|;
name|oldview
operator|.
name|setViewExpandedText
argument_list|(
name|crtView
operator|.
name|getViewExpandedText
argument_list|()
argument_list|)
expr_stmt|;
name|oldview
operator|.
name|setFields
argument_list|(
name|crtView
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|crtView
operator|.
name|getComment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|oldview
operator|.
name|setProperty
argument_list|(
literal|"comment"
argument_list|,
name|crtView
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtView
operator|.
name|getTblProps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|oldview
operator|.
name|getTTable
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|putAll
argument_list|(
name|crtView
operator|.
name|getTblProps
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oldview
operator|.
name|setPartCols
argument_list|(
name|crtView
operator|.
name|getPartCols
argument_list|()
argument_list|)
expr_stmt|;
name|oldview
operator|.
name|checkValidity
argument_list|()
expr_stmt|;
try|try
block|{
name|db
operator|.
name|alterTable
argument_list|(
name|crtView
operator|.
name|getViewName
argument_list|()
argument_list|,
name|oldview
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|work
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|oldview
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// create new view
name|Table
name|tbl
init|=
name|db
operator|.
name|newTable
argument_list|(
name|crtView
operator|.
name|getViewName
argument_list|()
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setTableType
argument_list|(
name|TableType
operator|.
name|VIRTUAL_VIEW
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerializationLib
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|clearSerDeInfo
argument_list|()
expr_stmt|;
name|tbl
operator|.
name|setViewOriginalText
argument_list|(
name|crtView
operator|.
name|getViewOriginalText
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setViewExpandedText
argument_list|(
name|crtView
operator|.
name|getViewExpandedText
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setFields
argument_list|(
name|crtView
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|crtView
operator|.
name|getComment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"comment"
argument_list|,
name|crtView
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtView
operator|.
name|getTblProps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|putAll
argument_list|(
name|crtView
operator|.
name|getTblProps
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtView
operator|.
name|getPartCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setPartCols
argument_list|(
name|crtView
operator|.
name|getPartCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|db
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|,
name|crtView
operator|.
name|getIfNotExists
argument_list|()
argument_list|)
expr_stmt|;
name|work
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|tbl
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|truncateTable
parameter_list|(
name|Hive
name|db
parameter_list|,
name|TruncateTableDesc
name|truncateTableDesc
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|truncateTableDesc
operator|.
name|getColumnIndexes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ColumnTruncateWork
name|truncateWork
init|=
operator|new
name|ColumnTruncateWork
argument_list|(
name|truncateTableDesc
operator|.
name|getColumnIndexes
argument_list|()
argument_list|,
name|truncateTableDesc
operator|.
name|getInputDir
argument_list|()
argument_list|,
name|truncateTableDesc
operator|.
name|getOutputDir
argument_list|()
argument_list|)
decl_stmt|;
name|truncateWork
operator|.
name|setListBucketingCtx
argument_list|(
name|truncateTableDesc
operator|.
name|getLbCtx
argument_list|()
argument_list|)
expr_stmt|;
name|truncateWork
operator|.
name|setMapperCannotSpanPartns
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DriverContext
name|driverCxt
init|=
operator|new
name|DriverContext
argument_list|()
decl_stmt|;
name|ColumnTruncateTask
name|taskExec
init|=
operator|new
name|ColumnTruncateTask
argument_list|()
decl_stmt|;
name|taskExec
operator|.
name|initialize
argument_list|(
name|db
operator|.
name|getConf
argument_list|()
argument_list|,
literal|null
argument_list|,
name|driverCxt
argument_list|)
expr_stmt|;
name|taskExec
operator|.
name|setWork
argument_list|(
name|truncateWork
argument_list|)
expr_stmt|;
name|taskExec
operator|.
name|setQueryPlan
argument_list|(
name|this
operator|.
name|getQueryPlan
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|taskExec
operator|.
name|execute
argument_list|(
name|driverCxt
argument_list|)
return|;
block|}
name|String
name|tableName
init|=
name|truncateTableDesc
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
name|truncateTableDesc
operator|.
name|getPartSpec
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
name|db
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
comment|// this is not transactional
for|for
control|(
name|Path
name|location
range|:
name|getLocations
argument_list|(
name|db
argument_list|,
name|table
argument_list|,
name|partSpec
argument_list|)
control|)
block|{
name|FileSystem
name|fs
init|=
name|location
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|location
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|GENERIC_ERROR
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|exchangeTablePartition
parameter_list|(
name|Hive
name|db
parameter_list|,
name|AlterTableExchangePartition
name|exchangePartition
parameter_list|)
throws|throws
name|HiveException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpecs
init|=
name|exchangePartition
operator|.
name|getPartitionSpecs
argument_list|()
decl_stmt|;
name|Table
name|destTable
init|=
name|exchangePartition
operator|.
name|getDestinationTable
argument_list|()
decl_stmt|;
name|Table
name|sourceTable
init|=
name|exchangePartition
operator|.
name|getSourceTable
argument_list|()
decl_stmt|;
name|db
operator|.
name|exchangeTablePartitions
argument_list|(
name|partitionSpecs
argument_list|,
name|sourceTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|sourceTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|destTable
operator|.
name|getDbName
argument_list|()
argument_list|,
name|destTable
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|getLocations
parameter_list|(
name|Hive
name|db
parameter_list|,
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|)
throws|throws
name|HiveException
throws|,
name|InvalidOperationException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|partSpec
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
for|for
control|(
name|Partition
name|partition
range|:
name|db
operator|.
name|getPartitions
argument_list|(
name|table
argument_list|)
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|partition
operator|.
name|getDataLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|needToUpdateStats
argument_list|(
name|partition
operator|.
name|getParameters
argument_list|()
argument_list|)
condition|)
block|{
name|db
operator|.
name|alterPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partition
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|locations
operator|.
name|add
argument_list|(
name|table
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|needToUpdateStats
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
argument_list|)
condition|)
block|{
name|db
operator|.
name|alterTable
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|Partition
name|partition
range|:
name|db
operator|.
name|getPartitionsByNames
argument_list|(
name|table
argument_list|,
name|partSpec
argument_list|)
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|partition
operator|.
name|getDataLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|needToUpdateStats
argument_list|(
name|partition
operator|.
name|getParameters
argument_list|()
argument_list|)
condition|)
block|{
name|db
operator|.
name|alterPartition
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partition
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|locations
return|;
block|}
specifier|private
name|boolean
name|needToUpdateStats
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|props
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|statsPresent
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|stat
range|:
name|StatsSetupConst
operator|.
name|supportedStats
control|)
block|{
name|String
name|statVal
init|=
name|props
operator|.
name|get
argument_list|(
name|stat
argument_list|)
decl_stmt|;
if|if
condition|(
name|statVal
operator|!=
literal|null
operator|&&
name|Long
operator|.
name|parseLong
argument_list|(
name|statVal
argument_list|)
operator|>
literal|0
condition|)
block|{
name|statsPresent
operator|=
literal|true
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|statVal
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|statsPresent
return|;
block|}
specifier|private
name|String
name|escapeHiveCommand
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\''
operator|||
name|c
operator|==
literal|';'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|StageType
name|getType
parameter_list|()
block|{
return|return
name|StageType
operator|.
name|DDL
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"DDL"
return|;
block|}
comment|/**    * Make location in specified sd qualified.    *    * @param databaseName    *          Database name.    * @param sd    *          Storage descriptor.    * @param name    *          Object name.    */
specifier|private
name|void
name|makeLocationQualified
parameter_list|(
name|String
name|databaseName
parameter_list|,
name|StorageDescriptor
name|sd
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|HiveException
block|{
name|Path
name|path
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|sd
operator|.
name|isSetLocation
argument_list|()
condition|)
block|{
comment|// Location is not set, leave it as-is if this is not a default DB
if|if
condition|(
name|databaseName
operator|.
name|equalsIgnoreCase
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
condition|)
block|{
comment|// Default database name path is always ignored, use METASTOREWAREHOUSE and object name
comment|// instead
name|path
operator|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
argument_list|,
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|path
operator|=
operator|new
name|Path
argument_list|(
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|sd
operator|.
name|setLocation
argument_list|(
name|Utilities
operator|.
name|getQualifiedPath
argument_list|(
name|conf
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Make qualified location for an index .    *    * @param crtIndex    *          Create index descriptor.    * @param name    *          Object name.    */
specifier|private
name|void
name|makeLocationQualified
parameter_list|(
name|CreateIndexDesc
name|crtIndex
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|HiveException
block|{
name|Path
name|path
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|crtIndex
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Location is not set, leave it as-is if index doesn't belong to default DB
comment|// Currently all indexes are created in current DB only
if|if
condition|(
name|db
operator|.
name|getDatabaseCurrent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
condition|)
block|{
comment|// Default database name path is always ignored, use METASTOREWAREHOUSE and object name
comment|// instead
name|path
operator|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
argument_list|,
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|path
operator|=
operator|new
name|Path
argument_list|(
name|crtIndex
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|crtIndex
operator|.
name|setLocation
argument_list|(
name|Utilities
operator|.
name|getQualifiedPath
argument_list|(
name|conf
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Make qualified location for a database .    *    * @param database    *          Database.    */
specifier|private
name|void
name|makeLocationQualified
parameter_list|(
name|Database
name|database
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|database
operator|.
name|isSetLocationUri
argument_list|()
condition|)
block|{
name|database
operator|.
name|setLocationUri
argument_list|(
name|Utilities
operator|.
name|getQualifiedPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|database
operator|.
name|getLocationUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Location is not set we utilize METASTOREWAREHOUSE together with database name
name|database
operator|.
name|setLocationUri
argument_list|(
name|Utilities
operator|.
name|getQualifiedPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
argument_list|,
name|database
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|".db"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

