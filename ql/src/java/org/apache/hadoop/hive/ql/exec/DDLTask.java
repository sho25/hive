begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|DefaultHiveMetaHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Msck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MsckInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ExplainConfiguration
operator|.
name|AnalyzeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|dump
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CacheMetadataDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|InsertCommitHookDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MsckDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReplRemoveFirstIncLoadPendFlagDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowConfDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|StageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|util
operator|.
name|ReplUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * DDLTask implementation.  *  **/
end_comment

begin_class
specifier|public
class|class
name|DDLTask
extends|extends
name|Task
argument_list|<
name|DDLWork
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"hive.ql.exec.DDLTask"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|separator
init|=
name|Utilities
operator|.
name|tabCode
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|terminator
init|=
name|Utilities
operator|.
name|newLineCode
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|requireLock
parameter_list|()
block|{
return|return
name|this
operator|.
name|work
operator|!=
literal|null
operator|&&
name|this
operator|.
name|work
operator|.
name|getNeedLock
argument_list|()
return|;
block|}
specifier|public
name|DDLTask
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|(
name|DriverContext
name|driverContext
parameter_list|)
block|{
if|if
condition|(
name|driverContext
operator|.
name|getCtx
argument_list|()
operator|.
name|getExplainAnalyze
argument_list|()
operator|==
name|AnalyzeState
operator|.
name|RUNNING
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// Create the db
name|Hive
name|db
decl_stmt|;
try|try
block|{
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MsckDesc
name|msckDesc
init|=
name|work
operator|.
name|getMsckDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|msckDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|msck
argument_list|(
name|db
argument_list|,
name|msckDesc
argument_list|)
return|;
block|}
name|ShowConfDesc
name|showConf
init|=
name|work
operator|.
name|getShowConfDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|showConf
operator|!=
literal|null
condition|)
block|{
return|return
name|showConf
argument_list|(
name|db
argument_list|,
name|showConf
argument_list|)
return|;
block|}
name|CacheMetadataDesc
name|cacheMetadataDesc
init|=
name|work
operator|.
name|getCacheMetadataDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|cacheMetadataDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|cacheMetadata
argument_list|(
name|db
argument_list|,
name|cacheMetadataDesc
argument_list|)
return|;
block|}
name|InsertCommitHookDesc
name|insertCommitHookDesc
init|=
name|work
operator|.
name|getInsertCommitHookDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|insertCommitHookDesc
operator|!=
literal|null
condition|)
block|{
return|return
name|insertCommitWork
argument_list|(
name|db
argument_list|,
name|insertCommitHookDesc
argument_list|)
return|;
block|}
if|if
condition|(
name|work
operator|.
name|getReplSetFirstIncLoadFlagDesc
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|remFirstIncPendFlag
argument_list|(
name|db
argument_list|,
name|work
operator|.
name|getReplSetFirstIncLoadFlagDesc
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|failed
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
assert|assert
literal|false
assert|;
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|insertCommitWork
parameter_list|(
name|Hive
name|db
parameter_list|,
name|InsertCommitHookDesc
name|insertCommitHookDesc
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|failed
init|=
literal|true
decl_stmt|;
name|HiveMetaHook
name|hook
init|=
name|insertCommitHookDesc
operator|.
name|getTable
argument_list|()
operator|.
name|getStorageHandler
argument_list|()
operator|.
name|getMetaHook
argument_list|()
decl_stmt|;
if|if
condition|(
name|hook
operator|==
literal|null
operator|||
operator|!
operator|(
name|hook
operator|instanceof
name|DefaultHiveMetaHook
operator|)
condition|)
block|{
return|return
literal|0
return|;
block|}
name|DefaultHiveMetaHook
name|hiveMetaHook
init|=
operator|(
name|DefaultHiveMetaHook
operator|)
name|hook
decl_stmt|;
try|try
block|{
name|hiveMetaHook
operator|.
name|commitInsertTable
argument_list|(
name|insertCommitHookDesc
operator|.
name|getTable
argument_list|()
operator|.
name|getTTable
argument_list|()
argument_list|,
name|insertCommitHookDesc
operator|.
name|isOverwrite
argument_list|()
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|failed
condition|)
block|{
name|hiveMetaHook
operator|.
name|rollbackInsertTable
argument_list|(
name|insertCommitHookDesc
operator|.
name|getTable
argument_list|()
operator|.
name|getTTable
argument_list|()
argument_list|,
name|insertCommitHookDesc
operator|.
name|isOverwrite
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|cacheMetadata
parameter_list|(
name|Hive
name|db
parameter_list|,
name|CacheMetadataDesc
name|desc
parameter_list|)
throws|throws
name|HiveException
block|{
name|db
operator|.
name|cacheFileMetadata
argument_list|(
name|desc
operator|.
name|getDbName
argument_list|()
argument_list|,
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|desc
operator|.
name|getPartName
argument_list|()
argument_list|,
name|desc
operator|.
name|isAllParts
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|private
name|void
name|failed
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
while|while
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getClass
argument_list|()
operator|==
name|RuntimeException
operator|.
name|class
condition|)
block|{
name|e
operator|=
name|e
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|showConf
parameter_list|(
name|Hive
name|db
parameter_list|,
name|ShowConfDesc
name|showConf
parameter_list|)
throws|throws
name|Exception
block|{
name|ConfVars
name|conf
init|=
name|HiveConf
operator|.
name|getConfVars
argument_list|(
name|showConf
operator|.
name|getConfName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"invalid configuration name "
operator|+
name|showConf
operator|.
name|getConfName
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|description
init|=
name|conf
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|String
name|defaultValue
init|=
name|conf
operator|.
name|getDefaultValue
argument_list|()
decl_stmt|;
name|DataOutputStream
name|output
init|=
name|getOutputStream
argument_list|(
name|showConf
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|defaultValue
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|defaultValue
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|conf
operator|.
name|typeString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|description
operator|.
name|replaceAll
argument_list|(
literal|" *\n *"
argument_list|,
literal|" "
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|DataOutputStream
name|getOutputStream
parameter_list|(
name|Path
name|outputFile
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|FileSystem
name|fs
init|=
name|outputFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|create
argument_list|(
name|outputFile
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * MetastoreCheck, see if the data in the metastore matches what is on the    * dfs. Current version checks for tables and partitions that are either    * missing on disk on in the metastore.    *    * @param db    *          The database in question.    * @param msckDesc    *          Information about the tables and partitions we want to check for.    * @return Returns 0 when execution succeeds and above 0 if it fails.    */
specifier|private
name|int
name|msck
parameter_list|(
name|Hive
name|db
parameter_list|,
name|MsckDesc
name|msckDesc
parameter_list|)
block|{
name|Msck
name|msck
decl_stmt|;
try|try
block|{
name|msck
operator|=
operator|new
name|Msck
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|msck
operator|.
name|init
argument_list|(
name|db
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|names
init|=
name|Utilities
operator|.
name|getDbTableName
argument_list|(
name|msckDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|MsckInfo
name|msckInfo
init|=
operator|new
name|MsckInfo
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentCatalog
argument_list|()
argument_list|,
name|names
index|[
literal|0
index|]
argument_list|,
name|names
index|[
literal|1
index|]
argument_list|,
name|msckDesc
operator|.
name|getPartSpecs
argument_list|()
argument_list|,
name|msckDesc
operator|.
name|getResFile
argument_list|()
argument_list|,
name|msckDesc
operator|.
name|isRepairPartitions
argument_list|()
argument_list|,
name|msckDesc
operator|.
name|isAddPartitions
argument_list|()
argument_list|,
name|msckDesc
operator|.
name|isDropPartitions
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|msck
operator|.
name|repair
argument_list|(
name|msckInfo
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create msck instance."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Msck failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
comment|/**    * There are many places where "duplicate" Read/WriteEnity objects are added.  The way this was    * initially implemented, the duplicate just replaced the previous object.    * (work.getOutputs() is a Set and WriteEntity#equals() relies on name)    * This may be benign for ReadEntity and perhaps was benign for WriteEntity before WriteType was    * added. Now that WriteEntity has a WriteType it replaces it with one with possibly different    * {@link org.apache.hadoop.hive.ql.hooks.WriteEntity.WriteType}.  It's hard to imagine    * how this is desirable.    *    * As of HIVE-14993, WriteEntity with different WriteType must be considered different.    * So WriteEntity created in DDLTask cause extra output in golden files, but only because    * DDLTask sets a different WriteType for the same Entity.    *    * In the spirit of bug-for-bug compatibility, this method ensures we only add new    * WriteEntity if it's really new.    *    * @return {@code true} if item was added    */
specifier|static
name|boolean
name|addIfAbsentByName
parameter_list|(
name|WriteEntity
name|newWriteEntity
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
block|{
for|for
control|(
name|WriteEntity
name|writeEntity
range|:
name|outputs
control|)
block|{
if|if
condition|(
name|writeEntity
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|newWriteEntity
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring request to add {} because {} is present"
argument_list|,
name|newWriteEntity
operator|.
name|toStringDetail
argument_list|()
argument_list|,
name|writeEntity
operator|.
name|toStringDetail
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|outputs
operator|.
name|add
argument_list|(
name|newWriteEntity
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Check if the given serde is valid.    */
specifier|public
specifier|static
name|void
name|validateSerDe
parameter_list|(
name|String
name|serdeName
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|Deserializer
name|d
init|=
name|ReflectionUtil
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClassByName
argument_list|(
name|serdeName
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Deserializer
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found class for {}"
argument_list|,
name|serdeName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Cannot validate serde: "
operator|+
name|serdeName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|StageType
name|getType
parameter_list|()
block|{
return|return
name|StageType
operator|.
name|DDL
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"DDL"
return|;
block|}
specifier|private
name|int
name|remFirstIncPendFlag
parameter_list|(
name|Hive
name|hive
parameter_list|,
name|ReplRemoveFirstIncLoadPendFlagDesc
name|desc
parameter_list|)
throws|throws
name|HiveException
throws|,
name|TException
block|{
name|String
name|dbNameOrPattern
init|=
name|desc
operator|.
name|getDatabaseName
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
comment|// Flag is set only in database for db level load.
for|for
control|(
name|String
name|dbName
range|:
name|Utils
operator|.
name|matchesDb
argument_list|(
name|hive
argument_list|,
name|dbNameOrPattern
argument_list|)
control|)
block|{
name|Database
name|database
init|=
name|hive
operator|.
name|getMSC
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|parameters
operator|=
name|database
operator|.
name|getParameters
argument_list|()
expr_stmt|;
name|String
name|incPendPara
init|=
name|parameters
operator|!=
literal|null
condition|?
name|parameters
operator|.
name|get
argument_list|(
name|ReplUtils
operator|.
name|REPL_FIRST_INC_PENDING_FLAG
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|incPendPara
operator|!=
literal|null
condition|)
block|{
name|parameters
operator|.
name|remove
argument_list|(
name|ReplUtils
operator|.
name|REPL_FIRST_INC_PENDING_FLAG
argument_list|)
expr_stmt|;
name|hive
operator|.
name|getMSC
argument_list|()
operator|.
name|alterDatabase
argument_list|(
name|dbName
argument_list|,
name|database
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/*   uses the authorizer from SessionState will need some more work to get this to run in parallel,   however this should not be a bottle neck so might not need to parallelize this.    */
annotation|@
name|Override
specifier|public
name|boolean
name|canExecuteInParallel
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

