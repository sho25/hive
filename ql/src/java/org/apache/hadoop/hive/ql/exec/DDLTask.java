begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IgnoreKeyTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|alterTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|createTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|descTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|dropTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|showTablesDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|InvalidTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_comment
comment|/**  * DDLTask implementation  *   **/
end_comment

begin_class
specifier|public
class|class
name|DDLTask
extends|extends
name|Task
argument_list|<
name|DDLWork
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"hive.ql.exec.DDLTask"
argument_list|)
decl_stmt|;
specifier|transient
name|HiveConf
name|conf
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|int
name|separator
init|=
name|Utilities
operator|.
name|ctrlaCode
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|int
name|terminator
init|=
name|Utilities
operator|.
name|newLineCode
decl_stmt|;
specifier|public
name|void
name|initialize
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
name|int
name|execute
parameter_list|()
block|{
comment|// Create the db
name|Hive
name|db
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
try|try
block|{
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|createTableDesc
name|crtTbl
init|=
name|work
operator|.
name|getCreateTblDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|crtTbl
operator|!=
literal|null
condition|)
block|{
comment|// create the table
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|crtTbl
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setFields
argument_list|(
name|crtTbl
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|tblStorDesc
init|=
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
decl_stmt|;
if|if
condition|(
name|crtTbl
operator|.
name|getBucketCols
argument_list|()
operator|!=
literal|null
condition|)
name|tblStorDesc
operator|.
name|setBucketCols
argument_list|(
name|crtTbl
operator|.
name|getBucketCols
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|crtTbl
operator|.
name|getSortCols
argument_list|()
operator|!=
literal|null
condition|)
name|tbl
operator|.
name|setSortCols
argument_list|(
name|crtTbl
operator|.
name|getSortCols
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|crtTbl
operator|.
name|getPartCols
argument_list|()
operator|!=
literal|null
condition|)
name|tbl
operator|.
name|setPartCols
argument_list|(
name|crtTbl
operator|.
name|getPartCols
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|crtTbl
operator|.
name|getNumBuckets
argument_list|()
operator|!=
operator|-
literal|1
condition|)
name|tblStorDesc
operator|.
name|setNumBuckets
argument_list|(
name|crtTbl
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|crtTbl
operator|.
name|getFieldDelim
argument_list|()
operator|!=
literal|null
condition|)
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|Constants
operator|.
name|FIELD_DELIM
argument_list|,
name|crtTbl
operator|.
name|getFieldDelim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|crtTbl
operator|.
name|getCollItemDelim
argument_list|()
operator|!=
literal|null
condition|)
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|Constants
operator|.
name|COLLECTION_DELIM
argument_list|,
name|crtTbl
operator|.
name|getCollItemDelim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|crtTbl
operator|.
name|getMapKeyDelim
argument_list|()
operator|!=
literal|null
condition|)
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|Constants
operator|.
name|MAPKEY_DELIM
argument_list|,
name|crtTbl
operator|.
name|getMapKeyDelim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|crtTbl
operator|.
name|getLineDelim
argument_list|()
operator|!=
literal|null
condition|)
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|Constants
operator|.
name|LINE_DELIM
argument_list|,
name|crtTbl
operator|.
name|getLineDelim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|crtTbl
operator|.
name|getComment
argument_list|()
operator|!=
literal|null
condition|)
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"comment"
argument_list|,
name|crtTbl
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|crtTbl
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
name|tblStorDesc
operator|.
name|setLocation
argument_list|(
name|crtTbl
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|crtTbl
operator|.
name|isSequenceFile
argument_list|()
condition|)
block|{
name|tbl
operator|.
name|setInputFormatClass
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setOutputFormatClass
argument_list|(
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tbl
operator|.
name|setOutputFormatClass
argument_list|(
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setInputFormatClass
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTbl
operator|.
name|isExternal
argument_list|()
condition|)
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
comment|// If the sorted columns is a superset of bucketed columns, store this fact. It can be later used to
comment|// optimize some group-by queries. Note that, the order does not matter as long as it in the first
comment|// 'n' columns where 'n' is the length of the bucketed columns.
if|if
condition|(
operator|(
name|tbl
operator|.
name|getBucketCols
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|tbl
operator|.
name|getSortCols
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
init|=
name|tbl
operator|.
name|getBucketCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
init|=
name|tbl
operator|.
name|getSortCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortCols
operator|.
name|size
argument_list|()
operator|>=
name|bucketCols
operator|.
name|size
argument_list|()
condition|)
block|{
name|boolean
name|found
init|=
literal|true
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterBucketCols
init|=
name|bucketCols
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterBucketCols
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|bucketCol
init|=
name|iterBucketCols
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|colFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bucketCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|bucketCol
operator|.
name|equals
argument_list|(
name|sortCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getCol
argument_list|()
argument_list|)
condition|)
block|{
name|colFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|colFound
operator|==
literal|false
condition|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"SORTBUCKETCOLSPREFIX"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// create the table
name|db
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|dropTableDesc
name|dropTbl
init|=
name|work
operator|.
name|getDropTblDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|dropTbl
operator|!=
literal|null
condition|)
block|{
comment|// drop the table
name|db
operator|.
name|dropTable
argument_list|(
name|dropTbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|alterTableDesc
name|alterTbl
init|=
name|work
operator|.
name|getAlterTblDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|alterTbl
operator|!=
literal|null
condition|)
block|{
comment|// alter the table
name|Table
name|tbl
init|=
name|db
operator|.
name|getTable
argument_list|(
name|alterTbl
operator|.
name|getOldName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|alterTbl
operator|.
name|getOp
argument_list|()
operator|==
name|alterTableDesc
operator|.
name|alterTableTypes
operator|.
name|RENAME
condition|)
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|setTableName
argument_list|(
name|alterTbl
operator|.
name|getNewName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
name|alterTbl
operator|.
name|getNewCols
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|db
operator|.
name|alterTable
argument_list|(
name|alterTbl
operator|.
name|getOldName
argument_list|()
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"alter table: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
name|descTableDesc
name|descTbl
init|=
name|work
operator|.
name|getDescTblDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|descTbl
operator|!=
literal|null
condition|)
block|{
name|boolean
name|found
init|=
literal|true
decl_stmt|;
try|try
block|{
comment|// describe the table - populate the output stream
name|Table
name|tbl
init|=
name|db
operator|.
name|getTable
argument_list|(
name|descTbl
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DDLTask: got data for "
operator|+
name|tbl
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// write the results in the file
name|DataOutput
name|os
init|=
operator|(
name|DataOutput
operator|)
name|fs
operator|.
name|create
argument_list|(
name|descTbl
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|tbl
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|iterCols
init|=
name|cols
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|firstCol
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|iterCols
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|firstCol
condition|)
name|os
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|FieldSchema
name|col
init|=
name|iterCols
operator|.
name|next
argument_list|()
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|col
operator|.
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|col
operator|.
name|getType
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|col
operator|.
name|getComment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|col
operator|.
name|getComment
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|firstCol
operator|=
literal|false
expr_stmt|;
block|}
comment|// also return the partitioning columns
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
name|tbl
operator|.
name|getPartCols
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|iterPartCols
init|=
name|partCols
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterPartCols
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|FieldSchema
name|col
init|=
name|iterPartCols
operator|.
name|next
argument_list|()
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|col
operator|.
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|col
operator|.
name|getType
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|col
operator|.
name|getComment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|col
operator|.
name|getComment
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"DDLTask: written data for "
operator|+
name|tbl
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|FSDataOutputStream
operator|)
name|os
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"describe table: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|InvalidTableException
name|e
parameter_list|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"describe table: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
try|try
block|{
name|DataOutput
name|outStream
init|=
operator|(
name|DataOutput
operator|)
name|fs
operator|.
name|open
argument_list|(
name|descTbl
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|errMsg
init|=
literal|"Table "
operator|+
name|descTbl
operator|.
name|getTableName
argument_list|()
operator|+
literal|" does not exist"
decl_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|errMsg
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|FSDataOutputStream
operator|)
name|outStream
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"describe table: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"describe table: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
name|showTablesDesc
name|showTbls
init|=
name|work
operator|.
name|getShowTblsDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|showTbls
operator|!=
literal|null
condition|)
block|{
comment|// get the tables for the desired pattenn - populate the output stream
name|List
argument_list|<
name|String
argument_list|>
name|tbls
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|showTbls
operator|.
name|getPattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"pattern: "
operator|+
name|showTbls
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|tbls
operator|=
name|db
operator|.
name|getTablesByPattern
argument_list|(
name|showTbls
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"results : "
operator|+
name|tbls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|tbls
operator|=
name|db
operator|.
name|getAllTables
argument_list|()
expr_stmt|;
comment|// write the results in the file
try|try
block|{
name|DataOutput
name|outStream
init|=
operator|(
name|DataOutput
operator|)
name|fs
operator|.
name|create
argument_list|(
name|showTbls
operator|.
name|getResFile
argument_list|()
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|sortedTbls
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|tbls
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterTbls
init|=
name|sortedTbls
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|firstCol
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|iterTbls
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|firstCol
condition|)
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|iterTbls
operator|.
name|next
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|firstCol
operator|=
literal|false
expr_stmt|;
block|}
operator|(
operator|(
name|FSDataOutputStream
operator|)
name|outStream
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"show table: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"show table: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"FAILED: Error in metadata: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Failed with exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
literal|1
operator|)
return|;
block|}
assert|assert
literal|false
assert|;
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

