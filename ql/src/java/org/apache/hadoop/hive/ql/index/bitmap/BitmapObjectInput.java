begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|bitmap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyLong
import|;
end_import

begin_comment
comment|/**  * An ObjectInput that allows for conversion from an List of LongWritable  * to an EWAH-compressed bitmap.  */
end_comment

begin_class
specifier|public
class|class
name|BitmapObjectInput
implements|implements
name|ObjectInput
block|{
name|Iterator
argument_list|<
name|LongWritable
argument_list|>
name|bufferIter
decl_stmt|;
name|List
argument_list|<
name|LongWritable
argument_list|>
name|buffer
decl_stmt|;
specifier|public
name|BitmapObjectInput
parameter_list|()
block|{
name|buffer
operator|=
operator|new
name|ArrayList
argument_list|<
name|LongWritable
argument_list|>
argument_list|()
expr_stmt|;
name|bufferIter
operator|=
name|buffer
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
specifier|public
name|BitmapObjectInput
parameter_list|(
name|List
argument_list|<
name|LongWritable
argument_list|>
name|l
parameter_list|)
block|{
name|readFromList
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|readFromList
parameter_list|(
name|List
argument_list|<
name|LongWritable
argument_list|>
name|l
parameter_list|)
block|{
name|buffer
operator|=
name|l
expr_stmt|;
name|bufferIter
operator|=
name|buffer
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|,
name|int
name|arg2
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|readObject
parameter_list|()
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|readBoolean
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|readByte
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|char
name|readChar
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|readDouble
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|readFloat
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFully
parameter_list|(
name|byte
index|[]
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFully
parameter_list|(
name|byte
index|[]
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|,
name|int
name|arg2
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|readInt
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|bufferIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LongObjectInspector
name|loi
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
decl_stmt|;
name|Long
name|l
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getLong
argument_list|(
name|bufferIter
operator|.
name|next
argument_list|()
argument_list|,
name|loi
argument_list|)
decl_stmt|;
return|return
name|l
operator|.
name|intValue
argument_list|()
return|;
comment|//return bufferIter.next().intValue();
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|readLine
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|readLong
parameter_list|()
throws|throws
name|IOException
block|{
comment|//LongObjectInspector loi = PrimitiveObjectInspectorFactory.writableLongObjectInspector;
if|if
condition|(
name|bufferIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LongObjectInspector
name|loi
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
decl_stmt|;
return|return
name|PrimitiveObjectInspectorUtils
operator|.
name|getLong
argument_list|(
name|bufferIter
operator|.
name|next
argument_list|()
argument_list|,
name|loi
argument_list|)
return|;
comment|//return bufferIter.next();
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|short
name|readShort
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|readUTF
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|readUnsignedByte
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|readUnsignedShort
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|skipBytes
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

