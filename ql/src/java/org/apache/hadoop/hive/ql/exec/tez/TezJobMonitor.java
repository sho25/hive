begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|DAGStatus
operator|.
name|State
operator|.
name|RUNNING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|Ansi
operator|.
name|ansi
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|internal
operator|.
name|CLibrary
operator|.
name|STDOUT_FILENO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|internal
operator|.
name|CLibrary
operator|.
name|isatty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Heartbeater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveTxnManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|counters
operator|.
name|TaskCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|counters
operator|.
name|TezCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|counters
operator|.
name|TezCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|DAG
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|Vertex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|DAGClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|DAGStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|StatusGetOpts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|client
operator|.
name|VertexStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|Ansi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|TerminalFactory
import|;
end_import

begin_comment
comment|/**  * TezJobMonitor keeps track of a tez job while it's being executed. It will  * print status to the console and retrieve final status of the job after  * completion.  */
end_comment

begin_class
specifier|public
class|class
name|TezJobMonitor
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
name|TezJobMonitor
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MIN_TERMINAL_WIDTH
init|=
literal|80
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|COLUMN_1_WIDTH
init|=
literal|16
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SEPARATOR_WIDTH
init|=
literal|80
decl_stmt|;
comment|// keep this within 80 chars width. If more columns needs to be added then update min terminal
comment|// width requirement and separator width accordingly
specifier|private
specifier|static
specifier|final
name|String
name|HEADER_FORMAT
init|=
literal|"%16s%12s  %5s  %9s  %7s  %7s  %6s  %6s"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VERTEX_FORMAT
init|=
literal|"%-16s%12s  %5s  %9s  %7s  %7s  %6s  %6s"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FOOTER_FORMAT
init|=
literal|"%-15s  %-30s %-4s  %-25s"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HEADER
init|=
name|String
operator|.
name|format
argument_list|(
name|HEADER_FORMAT
argument_list|,
literal|"VERTICES"
argument_list|,
literal|"STATUS"
argument_list|,
literal|"TOTAL"
argument_list|,
literal|"COMPLETED"
argument_list|,
literal|"RUNNING"
argument_list|,
literal|"PENDING"
argument_list|,
literal|"FAILED"
argument_list|,
literal|"KILLED"
argument_list|)
decl_stmt|;
comment|// method and dag summary format
specifier|private
specifier|static
specifier|final
name|String
name|SUMMARY_HEADER_FORMAT
init|=
literal|"%-16s %-12s %-12s %-12s %-19s %-19s %-15s %-15s %-15s"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SUMMARY_VERTEX_FORMAT
init|=
literal|"%-16s %11s %16s %12s %16s %18s %18s %14s %16s"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SUMMARY_HEADER
init|=
name|String
operator|.
name|format
argument_list|(
name|SUMMARY_HEADER_FORMAT
argument_list|,
literal|"VERTICES"
argument_list|,
literal|"TOTAL_TASKS"
argument_list|,
literal|"FAILED_ATTEMPTS"
argument_list|,
literal|"KILLED_TASKS"
argument_list|,
literal|"DURATION_SECONDS"
argument_list|,
literal|"CPU_TIME_MILLIS"
argument_list|,
literal|"GC_TIME_MILLIS"
argument_list|,
literal|"INPUT_RECORDS"
argument_list|,
literal|"OUTPUT_RECORDS"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOTAL_PREP_TIME
init|=
literal|"TotalPrepTime"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|METHOD
init|=
literal|"METHOD"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DURATION
init|=
literal|"DURATION(ms)"
decl_stmt|;
comment|// in-place progress update related variables
specifier|private
name|int
name|lines
decl_stmt|;
specifier|private
name|PrintStream
name|out
decl_stmt|;
specifier|private
name|String
name|separator
decl_stmt|;
specifier|private
specifier|transient
name|LogHelper
name|console
decl_stmt|;
specifier|private
specifier|final
name|PerfLogger
name|perfLogger
init|=
name|PerfLogger
operator|.
name|getPerfLogger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|checkInterval
init|=
literal|200
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxRetryInterval
init|=
literal|2500
decl_stmt|;
specifier|private
specifier|final
name|int
name|printInterval
init|=
literal|3000
decl_stmt|;
specifier|private
specifier|final
name|int
name|progressBarChars
init|=
literal|30
decl_stmt|;
specifier|private
name|long
name|lastPrintTime
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|completed
decl_stmt|;
comment|/* Pretty print the values */
specifier|private
specifier|final
name|NumberFormat
name|secondsFormat
decl_stmt|;
specifier|private
specifier|final
name|NumberFormat
name|commaFormat
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|DAGClient
argument_list|>
name|shutdownList
decl_stmt|;
static|static
block|{
name|shutdownList
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|LinkedList
argument_list|<
name|DAGClient
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|DAGClient
name|c
range|:
name|shutdownList
control|)
block|{
name|TezJobMonitor
operator|.
name|killRunningJobs
argument_list|()
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|TezSessionState
name|s
range|:
name|TezSessionState
operator|.
name|getOpenSessions
argument_list|()
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Shutting down tez session."
argument_list|)
expr_stmt|;
name|TezSessionPoolManager
operator|.
name|getInstance
argument_list|()
operator|.
name|close
argument_list|(
name|s
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|initShutdownHook
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|shutdownList
argument_list|,
literal|"Shutdown hook was not properly initialized"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TezJobMonitor
parameter_list|()
block|{
name|console
operator|=
name|SessionState
operator|.
name|getConsole
argument_list|()
expr_stmt|;
name|secondsFormat
operator|=
operator|new
name|DecimalFormat
argument_list|(
literal|"#0.00"
argument_list|)
expr_stmt|;
name|commaFormat
operator|=
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
comment|// all progress updates are written to info stream and log file. In-place updates can only be
comment|// done to info stream (console)
name|out
operator|=
name|console
operator|.
name|getInfoStream
argument_list|()
expr_stmt|;
name|separator
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SEPARATOR_WIDTH
condition|;
name|i
operator|++
control|)
block|{
name|separator
operator|+=
literal|"-"
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isUnixTerminal
parameter_list|()
block|{
name|String
name|os
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|os
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
condition|)
block|{
comment|// we do not support Windows, we will revisit this if we really need it for windows.
return|return
literal|false
return|;
block|}
comment|// We must be on some unix variant..
comment|// check if standard out is a terminal
try|try
block|{
comment|// isatty system call will return 1 if the file descriptor is terminal else 0
if|if
condition|(
name|isatty
argument_list|(
name|STDOUT_FILENO
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|ignore
parameter_list|)
block|{
comment|// These errors happen if the JNI lib is not available for your platform.
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|UnsatisfiedLinkError
name|ignore
parameter_list|)
block|{
comment|// These errors happen if the JNI lib is not available for your platform.
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * NOTE: Use this method only if isUnixTerminal is true.    * Erases the current line and prints the given line.    * @param line - line to print    */
specifier|public
name|void
name|reprintLine
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|out
operator|.
name|print
argument_list|(
name|ansi
argument_list|()
operator|.
name|eraseLine
argument_list|(
name|Ansi
operator|.
name|Erase
operator|.
name|ALL
argument_list|)
operator|.
name|a
argument_list|(
name|line
argument_list|)
operator|.
name|a
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|lines
operator|++
expr_stmt|;
block|}
comment|/**    * NOTE: Use this method only if isUnixTerminal is true.    * Erases the current line and prints the given line with the specified color.    * @param line - line to print    * @param color - color for the line    */
specifier|public
name|void
name|reprintLineWithColorAsBold
parameter_list|(
name|String
name|line
parameter_list|,
name|Ansi
operator|.
name|Color
name|color
parameter_list|)
block|{
name|out
operator|.
name|print
argument_list|(
name|ansi
argument_list|()
operator|.
name|eraseLine
argument_list|(
name|Ansi
operator|.
name|Erase
operator|.
name|ALL
argument_list|)
operator|.
name|fg
argument_list|(
name|color
argument_list|)
operator|.
name|bold
argument_list|()
operator|.
name|a
argument_list|(
name|line
argument_list|)
operator|.
name|a
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|boldOff
argument_list|()
operator|.
name|reset
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|lines
operator|++
expr_stmt|;
block|}
comment|/**    * NOTE: Use this method only if isUnixTerminal is true.    * Erases the current line and prints the given multiline. Make sure the specified line is not    * terminated by linebreak.    * @param line - line to print    */
specifier|public
name|void
name|reprintMultiLine
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|int
name|numLines
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\r\n|\r|\n"
argument_list|)
operator|.
name|length
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|ansi
argument_list|()
operator|.
name|eraseLine
argument_list|(
name|Ansi
operator|.
name|Erase
operator|.
name|ALL
argument_list|)
operator|.
name|a
argument_list|(
name|line
argument_list|)
operator|.
name|a
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|lines
operator|+=
name|numLines
expr_stmt|;
block|}
comment|/**    * NOTE: Use this method only if isUnixTerminal is true.    * Repositions the cursor back to line 0.    */
specifier|public
name|void
name|repositionCursor
parameter_list|()
block|{
if|if
condition|(
name|lines
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|ansi
argument_list|()
operator|.
name|cursorUp
argument_list|(
name|lines
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|lines
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/**    * NOTE: Use this method only if isUnixTerminal is true.    * Gets the width of the terminal    * @return - width of terminal    */
specifier|public
name|int
name|getTerminalWidth
parameter_list|()
block|{
return|return
name|TerminalFactory
operator|.
name|get
argument_list|()
operator|.
name|getWidth
argument_list|()
return|;
block|}
comment|/**    * monitorExecution handles status printing, failures during execution and final status retrieval.    *    * @param dagClient client that was used to kick off the job    * @param txnMgr transaction manager for this operation    * @param conf configuration file for this operation    * @return int 0 - success, 1 - killed, 2 - failed    */
specifier|public
name|int
name|monitorExecution
parameter_list|(
specifier|final
name|DAGClient
name|dagClient
parameter_list|,
name|HiveTxnManager
name|txnMgr
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|DAG
name|dag
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|DAGStatus
name|status
init|=
literal|null
decl_stmt|;
name|completed
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|boolean
name|running
init|=
literal|false
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|int
name|failedCounter
init|=
literal|0
decl_stmt|;
name|int
name|rc
init|=
literal|0
decl_stmt|;
name|DAGStatus
operator|.
name|State
name|lastState
init|=
literal|null
decl_stmt|;
name|String
name|lastReport
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|StatusGetOpts
argument_list|>
name|opts
init|=
operator|new
name|HashSet
argument_list|<
name|StatusGetOpts
argument_list|>
argument_list|()
decl_stmt|;
name|Heartbeater
name|heartbeater
init|=
operator|new
name|Heartbeater
argument_list|(
name|txnMgr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
literal|0
decl_stmt|;
name|boolean
name|isProfileEnabled
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|TEZ_EXEC_SUMMARY
argument_list|)
decl_stmt|;
name|boolean
name|inPlaceUpdates
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|TEZ_EXEC_INPLACE_PROGRESS
argument_list|)
decl_stmt|;
name|boolean
name|wideTerminal
init|=
literal|false
decl_stmt|;
name|boolean
name|isTerminal
init|=
name|inPlaceUpdates
operator|==
literal|true
condition|?
name|isUnixTerminal
argument_list|()
else|:
literal|false
decl_stmt|;
comment|// we need at least 80 chars wide terminal to display in-place updates properly
if|if
condition|(
name|isTerminal
condition|)
block|{
if|if
condition|(
name|getTerminalWidth
argument_list|()
operator|>=
name|MIN_TERMINAL_WIDTH
condition|)
block|{
name|wideTerminal
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|boolean
name|inPlaceEligible
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|inPlaceUpdates
operator|&&
name|isTerminal
operator|&&
name|wideTerminal
operator|&&
operator|!
name|console
operator|.
name|getIsSilent
argument_list|()
condition|)
block|{
name|inPlaceEligible
operator|=
literal|true
expr_stmt|;
block|}
name|shutdownList
operator|.
name|add
argument_list|(
name|dagClient
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_RUN_DAG
argument_list|)
expr_stmt|;
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_SUBMIT_TO_RUNNING
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|status
operator|=
name|dagClient
operator|.
name|getDAGStatus
argument_list|(
name|opts
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Progress
argument_list|>
name|progressMap
init|=
name|status
operator|.
name|getVertexProgress
argument_list|()
decl_stmt|;
name|DAGStatus
operator|.
name|State
name|state
init|=
name|status
operator|.
name|getState
argument_list|()
decl_stmt|;
name|heartbeater
operator|.
name|heartbeat
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
operator|!=
name|lastState
operator|||
name|state
operator|==
name|RUNNING
condition|)
block|{
name|lastState
operator|=
name|state
expr_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|SUBMITTED
case|:
name|console
operator|.
name|printInfo
argument_list|(
literal|"Status: Submitted"
argument_list|)
expr_stmt|;
break|break;
case|case
name|INITING
case|:
name|console
operator|.
name|printInfo
argument_list|(
literal|"Status: Initializing"
argument_list|)
expr_stmt|;
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
break|break;
case|case
name|RUNNING
case|:
if|if
condition|(
operator|!
name|running
condition|)
block|{
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_SUBMIT_TO_RUNNING
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Status: Running ("
operator|+
name|dagClient
operator|.
name|getExecutionContext
argument_list|()
operator|+
literal|")\n"
argument_list|)
expr_stmt|;
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|running
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|inPlaceEligible
condition|)
block|{
name|printStatusInPlace
argument_list|(
name|progressMap
argument_list|,
name|startTime
argument_list|,
literal|false
argument_list|,
name|dagClient
argument_list|)
expr_stmt|;
comment|// log the progress report to log file as well
name|lastReport
operator|=
name|logStatus
argument_list|(
name|progressMap
argument_list|,
name|lastReport
argument_list|,
name|console
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastReport
operator|=
name|printStatus
argument_list|(
name|progressMap
argument_list|,
name|lastReport
argument_list|,
name|console
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SUCCEEDED
case|:
if|if
condition|(
name|inPlaceEligible
condition|)
block|{
name|printStatusInPlace
argument_list|(
name|progressMap
argument_list|,
name|startTime
argument_list|,
literal|false
argument_list|,
name|dagClient
argument_list|)
expr_stmt|;
comment|// log the progress report to log file as well
name|lastReport
operator|=
name|logStatus
argument_list|(
name|progressMap
argument_list|,
name|lastReport
argument_list|,
name|console
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastReport
operator|=
name|printStatus
argument_list|(
name|progressMap
argument_list|,
name|lastReport
argument_list|,
name|console
argument_list|)
expr_stmt|;
block|}
comment|/* Profile info is collected anyways, isProfileEnabled              * decides if it gets printed or not              */
if|if
condition|(
name|isProfileEnabled
condition|)
block|{
name|double
name|duration
init|=
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Status: DAG finished successfully in "
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%.2f seconds"
argument_list|,
name|duration
argument_list|)
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|printMethodsSummary
argument_list|()
expr_stmt|;
name|printDagSummary
argument_list|(
name|progressMap
argument_list|,
name|console
argument_list|,
name|dagClient
argument_list|,
name|conf
argument_list|,
name|dag
argument_list|)
expr_stmt|;
block|}
name|running
operator|=
literal|false
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|KILLED
case|:
if|if
condition|(
name|inPlaceEligible
condition|)
block|{
name|printStatusInPlace
argument_list|(
name|progressMap
argument_list|,
name|startTime
argument_list|,
literal|true
argument_list|,
name|dagClient
argument_list|)
expr_stmt|;
comment|// log the progress report to log file as well
name|lastReport
operator|=
name|logStatus
argument_list|(
name|progressMap
argument_list|,
name|lastReport
argument_list|,
name|console
argument_list|)
expr_stmt|;
block|}
name|console
operator|.
name|printInfo
argument_list|(
literal|"Status: Killed"
argument_list|)
expr_stmt|;
name|running
operator|=
literal|false
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
name|rc
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|FAILED
case|:
case|case
name|ERROR
case|:
if|if
condition|(
name|inPlaceEligible
condition|)
block|{
name|printStatusInPlace
argument_list|(
name|progressMap
argument_list|,
name|startTime
argument_list|,
literal|true
argument_list|,
name|dagClient
argument_list|)
expr_stmt|;
comment|// log the progress report to log file as well
name|lastReport
operator|=
name|logStatus
argument_list|(
name|progressMap
argument_list|,
name|lastReport
argument_list|,
name|console
argument_list|)
expr_stmt|;
block|}
name|console
operator|.
name|printError
argument_list|(
literal|"Status: Failed"
argument_list|)
expr_stmt|;
name|running
operator|=
literal|false
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
name|rc
operator|=
literal|2
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|done
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|checkInterval
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|failedCounter
operator|%
name|maxRetryInterval
operator|/
name|checkInterval
operator|==
literal|0
operator|||
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
try|try
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Killing DAG..."
argument_list|)
expr_stmt|;
name|dagClient
operator|.
name|tryKillDAG
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
comment|// best effort
block|}
catch|catch
parameter_list|(
name|TezException
name|te
parameter_list|)
block|{
comment|// best effort
block|}
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
literal|"Execution has failed."
argument_list|)
expr_stmt|;
name|rc
operator|=
literal|1
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Retrying..."
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|done
condition|)
block|{
if|if
condition|(
name|rc
operator|!=
literal|0
operator|&&
name|status
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|diag
range|:
name|status
operator|.
name|getDiagnostics
argument_list|()
control|)
block|{
name|console
operator|.
name|printError
argument_list|(
name|diag
argument_list|)
expr_stmt|;
block|}
block|}
name|shutdownList
operator|.
name|remove
argument_list|(
name|dagClient
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_RUN_DAG
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
comment|/**    * killRunningJobs tries to terminate execution of all    * currently running tez queries. No guarantees, best effort only.    */
specifier|public
specifier|static
name|void
name|killRunningJobs
parameter_list|()
block|{
for|for
control|(
name|DAGClient
name|c
range|:
name|shutdownList
control|)
block|{
try|try
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Trying to shutdown DAG"
argument_list|)
expr_stmt|;
name|c
operator|.
name|tryKillDAG
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
specifier|private
specifier|static
name|long
name|getCounterValueByGroupName
parameter_list|(
name|TezCounters
name|vertexCounters
parameter_list|,
name|String
name|groupNamePattern
parameter_list|,
name|String
name|counterName
parameter_list|)
block|{
name|TezCounter
name|tezCounter
init|=
name|vertexCounters
operator|.
name|getGroup
argument_list|(
name|groupNamePattern
argument_list|)
operator|.
name|findCounter
argument_list|(
name|counterName
argument_list|)
decl_stmt|;
return|return
operator|(
name|tezCounter
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|tezCounter
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|private
name|void
name|printMethodsSummary
parameter_list|()
block|{
name|long
name|totalInPrepTime
init|=
literal|0
decl_stmt|;
name|String
index|[]
name|perfLoggerReportMethods
init|=
block|{
operator|(
name|PerfLogger
operator|.
name|PARSE
operator|)
block|,
operator|(
name|PerfLogger
operator|.
name|ANALYZE
operator|)
block|,
operator|(
name|PerfLogger
operator|.
name|TEZ_BUILD_DAG
operator|)
block|,
operator|(
name|PerfLogger
operator|.
name|TEZ_SUBMIT_TO_RUNNING
operator|)
block|}
decl_stmt|;
comment|/* Build the method summary header */
name|String
name|methodBreakdownHeader
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%-30s %-13s"
argument_list|,
name|METHOD
argument_list|,
name|DURATION
argument_list|)
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|methodBreakdownHeader
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|method
range|:
name|perfLoggerReportMethods
control|)
block|{
name|long
name|duration
init|=
name|perfLogger
operator|.
name|getDuration
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|totalInPrepTime
operator|+=
name|duration
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-30s %11s"
argument_list|,
name|method
argument_list|,
name|commaFormat
operator|.
name|format
argument_list|(
name|duration
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * The counters list above don't capture the total time from TimeToSubmit.startTime till      * TezRunDag.startTime, so calculate the duration and print it.      */
name|totalInPrepTime
operator|=
name|perfLogger
operator|.
name|getStartTime
argument_list|(
name|PerfLogger
operator|.
name|TEZ_RUN_DAG
argument_list|)
operator|-
name|perfLogger
operator|.
name|getStartTime
argument_list|(
name|PerfLogger
operator|.
name|TIME_TO_SUBMIT
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-30s %11s\n"
argument_list|,
name|TOTAL_PREP_TIME
argument_list|,
name|commaFormat
operator|.
name|format
argument_list|(
name|totalInPrepTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|printDagSummary
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Progress
argument_list|>
name|progressMap
parameter_list|,
name|LogHelper
name|console
parameter_list|,
name|DAGClient
name|dagClient
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|DAG
name|dag
parameter_list|)
block|{
comment|/* Strings for headers and counters */
name|String
name|hiveCountersGroup
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECOUNTERGROUP
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|StatusGetOpts
argument_list|>
name|statusGetOpts
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|StatusGetOpts
operator|.
name|GET_COUNTERS
argument_list|)
decl_stmt|;
name|TezCounters
name|hiveCounters
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hiveCounters
operator|=
name|dagClient
operator|.
name|getDAGStatus
argument_list|(
name|statusGetOpts
argument_list|)
operator|.
name|getDAGCounters
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// best attempt, shouldn't really kill DAG for this
block|}
catch|catch
parameter_list|(
name|TezException
name|e
parameter_list|)
block|{
comment|// best attempt, shouldn't really kill DAG for this
block|}
comment|/* If the counters are missing there is no point trying to print progress */
if|if
condition|(
name|hiveCounters
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|/* Print the per Vertex summary */
name|console
operator|.
name|printInfo
argument_list|(
name|SUMMARY_HEADER
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|progressMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|StatusGetOpts
argument_list|>
name|statusOptions
init|=
operator|new
name|HashSet
argument_list|<
name|StatusGetOpts
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|statusOptions
operator|.
name|add
argument_list|(
name|StatusGetOpts
operator|.
name|GET_COUNTERS
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|vertexName
range|:
name|keys
control|)
block|{
name|Progress
name|progress
init|=
name|progressMap
operator|.
name|get
argument_list|(
name|vertexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|progress
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|totalTasks
init|=
name|progress
operator|.
name|getTotalTaskCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|failedTaskAttempts
init|=
name|progress
operator|.
name|getFailedTaskAttemptCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|killedTasks
init|=
name|progress
operator|.
name|getKilledTaskCount
argument_list|()
decl_stmt|;
specifier|final
name|double
name|duration
init|=
name|perfLogger
operator|.
name|getDuration
argument_list|(
name|PerfLogger
operator|.
name|TEZ_RUN_VERTEX
operator|+
name|vertexName
argument_list|)
operator|/
literal|1000.0
decl_stmt|;
name|VertexStatus
name|vertexStatus
init|=
literal|null
decl_stmt|;
try|try
block|{
name|vertexStatus
operator|=
name|dagClient
operator|.
name|getVertexStatus
argument_list|(
name|vertexName
argument_list|,
name|statusOptions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// best attempt, shouldn't really kill DAG for this
block|}
catch|catch
parameter_list|(
name|TezException
name|e
parameter_list|)
block|{
comment|// best attempt, shouldn't really kill DAG for this
block|}
if|if
condition|(
name|vertexStatus
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Vertex
name|currentVertex
init|=
name|dag
operator|.
name|getVertex
argument_list|(
name|vertexName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Vertex
argument_list|>
name|inputVerticesList
init|=
name|currentVertex
operator|.
name|getInputVertices
argument_list|()
decl_stmt|;
name|long
name|hiveInputRecordsFromOtherVertices
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|inputVerticesList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Vertex
name|inputVertex
range|:
name|inputVerticesList
control|)
block|{
name|String
name|inputVertexName
init|=
name|inputVertex
operator|.
name|getName
argument_list|()
decl_stmt|;
name|hiveInputRecordsFromOtherVertices
operator|+=
name|getCounterValueByGroupName
argument_list|(
name|hiveCounters
argument_list|,
name|hiveCountersGroup
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s_"
argument_list|,
name|ReduceSinkOperator
operator|.
name|Counter
operator|.
name|RECORDS_OUT_INTERMEDIATE
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
name|inputVertexName
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
name|hiveInputRecordsFromOtherVertices
operator|+=
name|getCounterValueByGroupName
argument_list|(
name|hiveCounters
argument_list|,
name|hiveCountersGroup
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s_"
argument_list|,
name|FileSinkOperator
operator|.
name|Counter
operator|.
name|RECORDS_OUT
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
name|inputVertexName
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*        * Get the CPU& GC        *        * counters org.apache.tez.common.counters.TaskCounter        *  GC_TIME_MILLIS=37712        *  CPU_MILLISECONDS=2774230        */
specifier|final
name|TezCounters
name|vertexCounters
init|=
name|vertexStatus
operator|.
name|getVertexCounters
argument_list|()
decl_stmt|;
specifier|final
name|double
name|cpuTimeMillis
init|=
name|getCounterValueByGroupName
argument_list|(
name|vertexCounters
argument_list|,
name|TaskCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|TaskCounter
operator|.
name|CPU_MILLISECONDS
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|double
name|gcTimeMillis
init|=
name|getCounterValueByGroupName
argument_list|(
name|vertexCounters
argument_list|,
name|TaskCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|TaskCounter
operator|.
name|GC_TIME_MILLIS
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
comment|/*        * Get the HIVE counters        *        * HIVE        *  CREATED_FILES=1        *  DESERIALIZE_ERRORS=0        *  RECORDS_IN_Map_1=550076554        *  RECORDS_OUT_INTERMEDIATE_Map_1=854987        *  RECORDS_OUT_Reducer_2=1        */
specifier|final
name|long
name|hiveInputRecords
init|=
name|getCounterValueByGroupName
argument_list|(
name|hiveCounters
argument_list|,
name|hiveCountersGroup
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s_"
argument_list|,
name|MapOperator
operator|.
name|Counter
operator|.
name|RECORDS_IN
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
name|vertexName
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
argument_list|)
operator|+
name|hiveInputRecordsFromOtherVertices
decl_stmt|;
specifier|final
name|long
name|hiveOutputIntermediateRecords
init|=
name|getCounterValueByGroupName
argument_list|(
name|hiveCounters
argument_list|,
name|hiveCountersGroup
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s_"
argument_list|,
name|ReduceSinkOperator
operator|.
name|Counter
operator|.
name|RECORDS_OUT_INTERMEDIATE
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
name|vertexName
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|hiveOutputRecords
init|=
name|getCounterValueByGroupName
argument_list|(
name|hiveCounters
argument_list|,
name|hiveCountersGroup
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s_"
argument_list|,
name|FileSinkOperator
operator|.
name|Counter
operator|.
name|RECORDS_OUT
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
name|vertexName
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"_"
argument_list|)
argument_list|)
operator|+
name|hiveOutputIntermediateRecords
decl_stmt|;
name|String
name|vertexExecutionStats
init|=
name|String
operator|.
name|format
argument_list|(
name|SUMMARY_VERTEX_FORMAT
argument_list|,
name|vertexName
argument_list|,
name|totalTasks
argument_list|,
name|failedTaskAttempts
argument_list|,
name|killedTasks
argument_list|,
name|secondsFormat
operator|.
name|format
argument_list|(
operator|(
name|duration
operator|)
argument_list|)
argument_list|,
name|commaFormat
operator|.
name|format
argument_list|(
name|cpuTimeMillis
argument_list|)
argument_list|,
name|commaFormat
operator|.
name|format
argument_list|(
name|gcTimeMillis
argument_list|)
argument_list|,
name|commaFormat
operator|.
name|format
argument_list|(
name|hiveInputRecords
argument_list|)
argument_list|,
name|commaFormat
operator|.
name|format
argument_list|(
name|hiveOutputRecords
argument_list|)
argument_list|)
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|vertexExecutionStats
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|printStatusInPlace
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Progress
argument_list|>
name|progressMap
parameter_list|,
name|long
name|startTime
parameter_list|,
name|boolean
name|vextexStatusFromAM
parameter_list|,
name|DAGClient
name|dagClient
parameter_list|)
block|{
name|StringBuffer
name|reportBuffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|sumComplete
init|=
literal|0
decl_stmt|;
name|int
name|sumTotal
init|=
literal|0
decl_stmt|;
comment|// position the cursor to line 0
name|repositionCursor
argument_list|()
expr_stmt|;
comment|// print header
comment|// -------------------------------------------------------------------------------
comment|//         VERTICES     STATUS  TOTAL  COMPLETED  RUNNING  PENDING  FAILED  KILLED
comment|// -------------------------------------------------------------------------------
name|reprintLine
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|reprintLineWithColorAsBold
argument_list|(
name|HEADER
argument_list|,
name|Ansi
operator|.
name|Color
operator|.
name|CYAN
argument_list|)
expr_stmt|;
name|reprintLine
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|progressMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|int
name|maxKeys
init|=
name|keys
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|keys
control|)
block|{
name|idx
operator|++
expr_stmt|;
name|Progress
name|progress
init|=
name|progressMap
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
specifier|final
name|int
name|complete
init|=
name|progress
operator|.
name|getSucceededTaskCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|total
init|=
name|progress
operator|.
name|getTotalTaskCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|running
init|=
name|progress
operator|.
name|getRunningTaskCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|failed
init|=
name|progress
operator|.
name|getFailedTaskAttemptCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|pending
init|=
name|progress
operator|.
name|getTotalTaskCount
argument_list|()
operator|-
name|progress
operator|.
name|getSucceededTaskCount
argument_list|()
operator|-
name|progress
operator|.
name|getRunningTaskCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|killed
init|=
name|progress
operator|.
name|getKilledTaskCount
argument_list|()
decl_stmt|;
comment|// To get vertex status we can use DAGClient.getVertexStatus(), but it will be expensive to
comment|// get status from AM for every refresh of the UI. Lets infer the state from task counts.
comment|// Only if DAG is FAILED or KILLED the vertex status is fetched from AM.
name|VertexStatus
operator|.
name|State
name|vertexState
init|=
name|VertexStatus
operator|.
name|State
operator|.
name|INITIALIZING
decl_stmt|;
comment|// INITED state
if|if
condition|(
name|total
operator|>
literal|0
condition|)
block|{
name|vertexState
operator|=
name|VertexStatus
operator|.
name|State
operator|.
name|INITED
expr_stmt|;
name|sumComplete
operator|+=
name|complete
expr_stmt|;
name|sumTotal
operator|+=
name|total
expr_stmt|;
block|}
comment|// RUNNING state
if|if
condition|(
name|complete
operator|<
name|total
operator|&&
operator|(
name|complete
operator|>
literal|0
operator|||
name|running
operator|>
literal|0
operator|||
name|failed
operator|>
literal|0
operator|)
condition|)
block|{
name|vertexState
operator|=
name|VertexStatus
operator|.
name|State
operator|.
name|RUNNING
expr_stmt|;
if|if
condition|(
operator|!
name|perfLogger
operator|.
name|startTimeHasMethod
argument_list|(
name|PerfLogger
operator|.
name|TEZ_RUN_VERTEX
operator|+
name|s
argument_list|)
condition|)
block|{
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_RUN_VERTEX
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|// SUCCEEDED state
if|if
condition|(
name|complete
operator|==
name|total
condition|)
block|{
name|vertexState
operator|=
name|VertexStatus
operator|.
name|State
operator|.
name|SUCCEEDED
expr_stmt|;
if|if
condition|(
operator|!
name|completed
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|completed
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|/* We may have missed the start of the vertex              * due to the 3 seconds interval              */
if|if
condition|(
operator|!
name|perfLogger
operator|.
name|startTimeHasMethod
argument_list|(
name|PerfLogger
operator|.
name|TEZ_RUN_VERTEX
operator|+
name|s
argument_list|)
condition|)
block|{
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_RUN_VERTEX
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_RUN_VERTEX
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|// DAG might have been killed, lets try to get vertex state from AM before dying
comment|// KILLED or FAILED state
if|if
condition|(
name|vextexStatusFromAM
condition|)
block|{
name|VertexStatus
name|vertexStatus
init|=
literal|null
decl_stmt|;
try|try
block|{
name|vertexStatus
operator|=
name|dagClient
operator|.
name|getVertexStatus
argument_list|(
name|s
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// best attempt, shouldn't really kill DAG for this
block|}
catch|catch
parameter_list|(
name|TezException
name|e
parameter_list|)
block|{
comment|// best attempt, shouldn't really kill DAG for this
block|}
if|if
condition|(
name|vertexStatus
operator|!=
literal|null
condition|)
block|{
name|vertexState
operator|=
name|vertexStatus
operator|.
name|getState
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Map 1 ..........  SUCCEEDED      7          7        0        0       0       0
name|String
name|nameWithProgress
init|=
name|getNameWithProgress
argument_list|(
name|s
argument_list|,
name|complete
argument_list|,
name|total
argument_list|)
decl_stmt|;
name|String
name|vertexStr
init|=
name|String
operator|.
name|format
argument_list|(
name|VERTEX_FORMAT
argument_list|,
name|nameWithProgress
argument_list|,
name|vertexState
operator|.
name|toString
argument_list|()
argument_list|,
name|total
argument_list|,
name|complete
argument_list|,
name|running
argument_list|,
name|pending
argument_list|,
name|failed
argument_list|,
name|killed
argument_list|)
decl_stmt|;
name|reportBuffer
operator|.
name|append
argument_list|(
name|vertexStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|!=
name|maxKeys
condition|)
block|{
name|reportBuffer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|reprintMultiLine
argument_list|(
name|reportBuffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// -------------------------------------------------------------------------------
comment|// VERTICES: 03/04            [=================>>-----] 86%  ELAPSED TIME: 1.71 s
comment|// -------------------------------------------------------------------------------
name|reprintLine
argument_list|(
name|separator
argument_list|)
expr_stmt|;
specifier|final
name|float
name|progress
init|=
operator|(
name|sumTotal
operator|==
literal|0
operator|)
condition|?
literal|0.0f
else|:
operator|(
name|float
operator|)
name|sumComplete
operator|/
operator|(
name|float
operator|)
name|sumTotal
decl_stmt|;
name|String
name|footer
init|=
name|getFooter
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|,
name|completed
operator|.
name|size
argument_list|()
argument_list|,
name|progress
argument_list|,
name|startTime
argument_list|)
decl_stmt|;
name|reprintLineWithColorAsBold
argument_list|(
name|footer
argument_list|,
name|Ansi
operator|.
name|Color
operator|.
name|RED
argument_list|)
expr_stmt|;
name|reprintLine
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
comment|// Map 1 ..........
specifier|private
name|String
name|getNameWithProgress
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|complete
parameter_list|,
name|int
name|total
parameter_list|)
block|{
name|float
name|percent
init|=
name|total
operator|==
literal|0
condition|?
literal|0.0f
else|:
operator|(
name|float
operator|)
name|complete
operator|/
operator|(
name|float
operator|)
name|total
decl_stmt|;
comment|// lets use the remaining space in column 1 as progress bar
name|int
name|spaceRemaining
init|=
name|COLUMN_1_WIDTH
operator|-
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
name|String
name|result
init|=
name|s
operator|+
literal|" "
decl_stmt|;
name|int
name|toFill
init|=
call|(
name|int
call|)
argument_list|(
name|spaceRemaining
operator|*
name|percent
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toFill
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|+=
literal|"."
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// VERTICES: 03/04            [==================>>-----] 86%  ELAPSED TIME: 1.71 s
specifier|private
name|String
name|getFooter
parameter_list|(
name|int
name|keySize
parameter_list|,
name|int
name|completedSize
parameter_list|,
name|float
name|progress
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|String
name|verticesSummary
init|=
name|String
operator|.
name|format
argument_list|(
literal|"VERTICES: %02d/%02d"
argument_list|,
name|completedSize
argument_list|,
name|keySize
argument_list|)
decl_stmt|;
name|String
name|progressBar
init|=
name|getInPlaceProgressBar
argument_list|(
name|progress
argument_list|)
decl_stmt|;
specifier|final
name|int
name|progressPercent
init|=
call|(
name|int
call|)
argument_list|(
name|progress
operator|*
literal|100
argument_list|)
decl_stmt|;
name|String
name|progressStr
init|=
literal|""
operator|+
name|progressPercent
operator|+
literal|"%"
decl_stmt|;
name|float
name|et
init|=
call|(
name|float
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
argument_list|)
operator|/
operator|(
name|float
operator|)
literal|1000
decl_stmt|;
name|String
name|elapsedTime
init|=
literal|"ELAPSED TIME: "
operator|+
name|secondsFormat
operator|.
name|format
argument_list|(
name|et
argument_list|)
operator|+
literal|" s"
decl_stmt|;
name|String
name|footer
init|=
name|String
operator|.
name|format
argument_list|(
name|FOOTER_FORMAT
argument_list|,
name|verticesSummary
argument_list|,
name|progressBar
argument_list|,
name|progressStr
argument_list|,
name|elapsedTime
argument_list|)
decl_stmt|;
return|return
name|footer
return|;
block|}
comment|// [==================>>-----]
specifier|private
name|String
name|getInPlaceProgressBar
parameter_list|(
name|float
name|percent
parameter_list|)
block|{
name|StringBuilder
name|bar
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|int
name|remainingChars
init|=
name|progressBarChars
operator|-
literal|4
decl_stmt|;
name|int
name|completed
init|=
call|(
name|int
call|)
argument_list|(
name|remainingChars
operator|*
name|percent
argument_list|)
decl_stmt|;
name|int
name|pending
init|=
name|remainingChars
operator|-
name|completed
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|completed
condition|;
name|i
operator|++
control|)
block|{
name|bar
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
block|}
name|bar
operator|.
name|append
argument_list|(
literal|">>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pending
condition|;
name|i
operator|++
control|)
block|{
name|bar
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
block|}
name|bar
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|bar
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|printStatus
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Progress
argument_list|>
name|progressMap
parameter_list|,
name|String
name|lastReport
parameter_list|,
name|LogHelper
name|console
parameter_list|)
block|{
name|String
name|report
init|=
name|getReport
argument_list|(
name|progressMap
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|report
operator|.
name|equals
argument_list|(
name|lastReport
argument_list|)
operator|||
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>=
name|lastPrintTime
operator|+
name|printInterval
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|lastPrintTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
return|return
name|report
return|;
block|}
specifier|private
name|String
name|logStatus
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Progress
argument_list|>
name|progressMap
parameter_list|,
name|String
name|lastReport
parameter_list|,
name|LogHelper
name|console
parameter_list|)
block|{
name|String
name|report
init|=
name|getReport
argument_list|(
name|progressMap
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|report
operator|.
name|equals
argument_list|(
name|lastReport
argument_list|)
operator|||
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>=
name|lastPrintTime
operator|+
name|printInterval
condition|)
block|{
name|console
operator|.
name|logInfo
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|lastPrintTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
return|return
name|report
return|;
block|}
specifier|private
name|String
name|getReport
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Progress
argument_list|>
name|progressMap
parameter_list|)
block|{
name|StringBuffer
name|reportBuffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|progressMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|keys
control|)
block|{
name|Progress
name|progress
init|=
name|progressMap
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
specifier|final
name|int
name|complete
init|=
name|progress
operator|.
name|getSucceededTaskCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|total
init|=
name|progress
operator|.
name|getTotalTaskCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|running
init|=
name|progress
operator|.
name|getRunningTaskCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|failed
init|=
name|progress
operator|.
name|getFailedTaskAttemptCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|total
operator|<=
literal|0
condition|)
block|{
name|reportBuffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: -/-\t"
argument_list|,
name|s
argument_list|,
name|complete
argument_list|,
name|total
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|complete
operator|==
name|total
operator|&&
operator|!
name|completed
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|completed
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|/*            * We may have missed the start of the vertex due to the 3 seconds interval            */
if|if
condition|(
operator|!
name|perfLogger
operator|.
name|startTimeHasMethod
argument_list|(
name|PerfLogger
operator|.
name|TEZ_RUN_VERTEX
operator|+
name|s
argument_list|)
condition|)
block|{
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_RUN_VERTEX
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_RUN_VERTEX
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|complete
operator|<
name|total
operator|&&
operator|(
name|complete
operator|>
literal|0
operator|||
name|running
operator|>
literal|0
operator|||
name|failed
operator|>
literal|0
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|perfLogger
operator|.
name|startTimeHasMethod
argument_list|(
name|PerfLogger
operator|.
name|TEZ_RUN_VERTEX
operator|+
name|s
argument_list|)
condition|)
block|{
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_RUN_VERTEX
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
comment|/* vertex is started, but not complete */
if|if
condition|(
name|failed
operator|>
literal|0
condition|)
block|{
name|reportBuffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: %d(+%d,-%d)/%d\t"
argument_list|,
name|s
argument_list|,
name|complete
argument_list|,
name|running
argument_list|,
name|failed
argument_list|,
name|total
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reportBuffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: %d(+%d)/%d\t"
argument_list|,
name|s
argument_list|,
name|complete
argument_list|,
name|running
argument_list|,
name|total
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|/* vertex is waiting for input/slots or complete */
if|if
condition|(
name|failed
operator|>
literal|0
condition|)
block|{
comment|/* tasks finished but some failed */
name|reportBuffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: %d(-%d)/%d\t"
argument_list|,
name|s
argument_list|,
name|complete
argument_list|,
name|failed
argument_list|,
name|total
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reportBuffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: %d/%d\t"
argument_list|,
name|s
argument_list|,
name|complete
argument_list|,
name|total
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|reportBuffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

