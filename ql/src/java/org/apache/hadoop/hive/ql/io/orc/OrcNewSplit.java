begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|FileMetaInfo
import|;
end_import

begin_comment
comment|/**  * OrcFileSplit. Holds file meta info  *  */
end_comment

begin_class
specifier|public
class|class
name|OrcNewSplit
extends|extends
name|FileSplit
block|{
specifier|private
name|FileMetaInfo
name|fileMetaInfo
decl_stmt|;
specifier|private
name|boolean
name|hasFooter
decl_stmt|;
specifier|private
name|boolean
name|isOriginal
decl_stmt|;
specifier|private
name|boolean
name|hasBase
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|AcidInputFormat
operator|.
name|DeltaMetaData
argument_list|>
name|deltas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|OrcFile
operator|.
name|WriterVersion
name|writerVersion
decl_stmt|;
specifier|protected
name|OrcNewSplit
parameter_list|()
block|{
comment|//The FileSplit() constructor in hadoop 0.20 and 1.x is package private so can't use it.
comment|//This constructor is used to create the object and then call readFields()
comment|// so just pass nulls to this super constructor.
name|super
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OrcNewSplit
parameter_list|(
name|OrcSplit
name|inner
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|inner
operator|.
name|getPath
argument_list|()
argument_list|,
name|inner
operator|.
name|getStart
argument_list|()
argument_list|,
name|inner
operator|.
name|getLength
argument_list|()
argument_list|,
name|inner
operator|.
name|getLocations
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileMetaInfo
operator|=
name|inner
operator|.
name|getFileMetaInfo
argument_list|()
expr_stmt|;
name|this
operator|.
name|hasFooter
operator|=
name|inner
operator|.
name|hasFooter
argument_list|()
expr_stmt|;
name|this
operator|.
name|isOriginal
operator|=
name|inner
operator|.
name|isOriginal
argument_list|()
expr_stmt|;
name|this
operator|.
name|hasBase
operator|=
name|inner
operator|.
name|hasBase
argument_list|()
expr_stmt|;
name|this
operator|.
name|deltas
operator|.
name|addAll
argument_list|(
name|inner
operator|.
name|getDeltas
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|//serialize path, offset, length using FileSplit
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|int
name|flags
init|=
operator|(
name|hasBase
condition|?
name|OrcSplit
operator|.
name|BASE_FLAG
else|:
literal|0
operator|)
operator||
operator|(
name|isOriginal
condition|?
name|OrcSplit
operator|.
name|ORIGINAL_FLAG
else|:
literal|0
operator|)
operator||
operator|(
name|hasFooter
condition|?
name|OrcSplit
operator|.
name|FOOTER_FLAG
else|:
literal|0
operator|)
decl_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|deltas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AcidInputFormat
operator|.
name|DeltaMetaData
name|delta
range|:
name|deltas
control|)
block|{
name|delta
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasFooter
condition|)
block|{
comment|// serialize FileMetaInfo fields
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|fileMetaInfo
operator|.
name|compressionType
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|fileMetaInfo
operator|.
name|bufferSize
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|fileMetaInfo
operator|.
name|metadataSize
argument_list|)
expr_stmt|;
comment|// serialize FileMetaInfo field footer
name|ByteBuffer
name|footerBuff
init|=
name|fileMetaInfo
operator|.
name|footerBuffer
decl_stmt|;
name|footerBuff
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// write length of buffer
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|footerBuff
operator|.
name|limit
argument_list|()
operator|-
name|footerBuff
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|footerBuff
operator|.
name|array
argument_list|()
argument_list|,
name|footerBuff
operator|.
name|position
argument_list|()
argument_list|,
name|footerBuff
operator|.
name|limit
argument_list|()
operator|-
name|footerBuff
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|fileMetaInfo
operator|.
name|writerVersion
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|//deserialize path, offset, length using FileSplit
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|byte
name|flags
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|hasFooter
operator|=
operator|(
name|OrcSplit
operator|.
name|FOOTER_FLAG
operator|&
name|flags
operator|)
operator|!=
literal|0
expr_stmt|;
name|isOriginal
operator|=
operator|(
name|OrcSplit
operator|.
name|ORIGINAL_FLAG
operator|&
name|flags
operator|)
operator|!=
literal|0
expr_stmt|;
name|hasBase
operator|=
operator|(
name|OrcSplit
operator|.
name|BASE_FLAG
operator|&
name|flags
operator|)
operator|!=
literal|0
expr_stmt|;
name|deltas
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|numDeltas
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDeltas
condition|;
name|i
operator|++
control|)
block|{
name|AcidInputFormat
operator|.
name|DeltaMetaData
name|dmd
init|=
operator|new
name|AcidInputFormat
operator|.
name|DeltaMetaData
argument_list|()
decl_stmt|;
name|dmd
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|deltas
operator|.
name|add
argument_list|(
name|dmd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasFooter
condition|)
block|{
comment|// deserialize FileMetaInfo fields
name|String
name|compressionType
init|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|bufferSize
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|metadataSize
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|// deserialize FileMetaInfo field footer
name|int
name|footerBuffSize
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|ByteBuffer
name|footerBuff
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|footerBuffSize
argument_list|)
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|footerBuff
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|footerBuffSize
argument_list|)
expr_stmt|;
name|OrcFile
operator|.
name|WriterVersion
name|writerVersion
init|=
name|ReaderImpl
operator|.
name|getWriterVersion
argument_list|(
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|fileMetaInfo
operator|=
operator|new
name|FileMetaInfo
argument_list|(
name|compressionType
argument_list|,
name|bufferSize
argument_list|,
name|metadataSize
argument_list|,
name|footerBuff
argument_list|,
name|writerVersion
argument_list|)
expr_stmt|;
block|}
block|}
name|FileMetaInfo
name|getFileMetaInfo
parameter_list|()
block|{
return|return
name|fileMetaInfo
return|;
block|}
specifier|public
name|boolean
name|hasFooter
parameter_list|()
block|{
return|return
name|hasFooter
return|;
block|}
specifier|public
name|boolean
name|isOriginal
parameter_list|()
block|{
return|return
name|isOriginal
return|;
block|}
specifier|public
name|boolean
name|hasBase
parameter_list|()
block|{
return|return
name|hasBase
return|;
block|}
specifier|public
name|List
argument_list|<
name|AcidInputFormat
operator|.
name|DeltaMetaData
argument_list|>
name|getDeltas
parameter_list|()
block|{
return|return
name|deltas
return|;
block|}
block|}
end_class

end_unit

