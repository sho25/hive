begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CodingErrorAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLike
operator|.
name|likePatternToRegExp
import|;
end_import

begin_comment
comment|/**  * Evaluate LIKE filter on a batch for a vector of strings.  */
end_comment

begin_class
specifier|public
class|class
name|FilterStringColLikeStringScalar
extends|extends
name|VectorExpression
block|{
specifier|private
name|int
name|colNum
decl_stmt|;
specifier|private
name|Pattern
name|compiledPattern
decl_stmt|;
specifier|private
specifier|final
name|Text
name|simplePattern
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|private
name|ByteBuffer
name|byteBuffer
decl_stmt|;
specifier|private
name|CharBuffer
name|charBuffer
decl_stmt|;
specifier|private
name|CharsetDecoder
name|decoder
decl_stmt|;
specifier|private
name|PatternType
name|type
init|=
name|PatternType
operator|.
name|NONE
decl_stmt|;
comment|// Doing characters comparison directly instead of regular expression
comment|// matching for simple patterns like "%abc%".
enum|enum
name|PatternType
block|{
name|NONE
block|,
comment|// "abc"
name|BEGIN
block|,
comment|// "abc%"
name|END
block|,
comment|// "%abc"
name|MIDDLE
block|,
comment|// "%abc%"
name|COMPLEX
block|,
comment|// all other cases, such as "ab%c_de"
block|}
specifier|public
name|FilterStringColLikeStringScalar
parameter_list|(
name|int
name|colNum
parameter_list|,
name|Text
name|likePattern
parameter_list|)
block|{
name|this
operator|.
name|colNum
operator|=
name|colNum
expr_stmt|;
name|String
name|stringLikePattern
init|=
name|likePattern
operator|.
name|toString
argument_list|()
decl_stmt|;
name|parseSimplePattern
argument_list|(
name|stringLikePattern
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|PatternType
operator|.
name|COMPLEX
condition|)
block|{
name|compiledPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|likePatternToRegExp
argument_list|(
name|stringLikePattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|decoder
operator|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|newDecoder
argument_list|()
operator|.
name|onMalformedInput
argument_list|(
name|CodingErrorAction
operator|.
name|REPLACE
argument_list|)
operator|.
name|onUnmappableCharacter
argument_list|(
name|CodingErrorAction
operator|.
name|REPLACE
argument_list|)
expr_stmt|;
name|byteBuffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|charBuffer
operator|=
name|CharBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
name|PatternType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|private
name|boolean
name|like
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|NONE
case|:
return|return
name|noneLike
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|len
argument_list|,
name|simplePattern
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
case|case
name|BEGIN
case|:
return|return
name|beginLike
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|len
argument_list|,
name|simplePattern
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
case|case
name|END
case|:
return|return
name|endLike
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|len
argument_list|,
name|simplePattern
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
case|case
name|MIDDLE
case|:
return|return
name|midLike
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|len
argument_list|,
name|simplePattern
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
case|case
name|COMPLEX
case|:
return|return
name|complexLike
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|noneLike
parameter_list|(
name|byte
index|[]
name|byteS
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|,
name|byte
index|[]
name|byteSub
parameter_list|)
block|{
name|int
name|lenSub
init|=
name|byteSub
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|len
operator|!=
name|lenSub
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
name|start
init|,
name|j
init|=
literal|0
init|;
name|j
operator|<
name|len
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
if|if
condition|(
name|byteS
index|[
name|i
index|]
operator|!=
name|byteSub
index|[
name|j
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|boolean
name|beginLike
parameter_list|(
name|byte
index|[]
name|byteS
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|,
name|byte
index|[]
name|byteSub
parameter_list|)
block|{
if|if
condition|(
name|len
operator|<
name|byteSub
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
name|start
init|,
name|j
init|=
literal|0
init|;
name|j
operator|<
name|byteSub
operator|.
name|length
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
if|if
condition|(
name|byteS
index|[
name|i
index|]
operator|!=
name|byteSub
index|[
name|j
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|boolean
name|endLike
parameter_list|(
name|byte
index|[]
name|byteS
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|,
name|byte
index|[]
name|byteSub
parameter_list|)
block|{
name|int
name|lenSub
init|=
name|byteSub
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|len
operator|<
name|lenSub
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
name|start
operator|+
name|len
operator|-
name|lenSub
init|,
name|j
init|=
literal|0
init|;
name|j
operator|<
name|lenSub
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
if|if
condition|(
name|byteS
index|[
name|i
index|]
operator|!=
name|byteSub
index|[
name|j
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|boolean
name|midLike
parameter_list|(
name|byte
index|[]
name|byteS
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|,
name|byte
index|[]
name|byteSub
parameter_list|)
block|{
name|int
name|lenSub
init|=
name|byteSub
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|len
operator|<
name|lenSub
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|end
init|=
name|start
operator|+
name|len
operator|-
name|lenSub
operator|+
literal|1
decl_stmt|;
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
operator|(
name|i
operator|<
name|end
operator|)
operator|&&
operator|(
operator|!
name|match
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|lenSub
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|byteS
index|[
name|i
operator|+
name|j
index|]
operator|!=
name|byteSub
index|[
name|j
index|]
condition|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|match
return|;
block|}
comment|/**    * Matches the byte array against the complex like pattern. This method uses    * {@link #compiledPattern} to match. For decoding performance, it caches    * {@link #compiledPattern}, {@link #byteBuffer} and {@link #charBuffer}.    * When the length to decode is greater than the capacity of    * {@link #byteBuffer}, it creates new {@link #byteBuffer} and    * {@link #charBuffer}. The capacity of the new {@link #byteBuffer} is the    * double of the length, for fewer object creations and higher memory    * utilization.    *    * @param byteS    *          A byte array that contains a UTF-8 string.    * @param start    *          A position to start decoding.    * @param len    *          A length to decode.    * @return    *          true if the byte array matches the complex like pattern,    *          otherwise false.    */
specifier|private
name|boolean
name|complexLike
parameter_list|(
name|byte
index|[]
name|byteS
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
block|{
comment|// Prepare buffers
if|if
condition|(
name|byteBuffer
operator|.
name|capacity
argument_list|()
operator|<
name|len
condition|)
block|{
name|byteBuffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|len
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
name|byteBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|byteBuffer
operator|.
name|put
argument_list|(
name|byteS
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|byteBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|int
name|maxChars
init|=
call|(
name|int
call|)
argument_list|(
name|byteBuffer
operator|.
name|capacity
argument_list|()
operator|*
name|decoder
operator|.
name|maxCharsPerByte
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|charBuffer
operator|.
name|capacity
argument_list|()
operator|<
name|maxChars
condition|)
block|{
name|charBuffer
operator|=
name|CharBuffer
operator|.
name|allocate
argument_list|(
name|maxChars
argument_list|)
expr_stmt|;
block|}
name|charBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Decode UTF-8
name|decoder
operator|.
name|reset
argument_list|()
expr_stmt|;
name|decoder
operator|.
name|decode
argument_list|(
name|byteBuffer
argument_list|,
name|charBuffer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|decoder
operator|.
name|flush
argument_list|(
name|charBuffer
argument_list|)
expr_stmt|;
name|charBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
comment|// Match the given bytes with the like pattern
return|return
name|compiledPattern
operator|.
name|matcher
argument_list|(
name|charBuffer
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
comment|/**    * Parses the likePattern. Based on it is a simple pattern or not, the    * function might change two member variables. {@link #type} will be changed    * to the corresponding pattern type; {@link #simplePattern} will record the    * string in it for later pattern matching if it is a simple pattern.    *<p>    * Examples:<blockquote>    *    *<pre>    * parseSimplePattern("%abc%") changes {@link #type} to PatternType.MIDDLE    * and changes {@link #simplePattern} to "abc"    * parseSimplePattern("%ab_c%") changes {@link #type} to PatternType.COMPLEX    * and does not change {@link #simplePattern}    *</pre>    *    *</blockquote>    *    * @param likePattern    *          the input LIKE query pattern    */
specifier|private
name|void
name|parseSimplePattern
parameter_list|(
name|String
name|likePattern
parameter_list|)
block|{
name|int
name|length
init|=
name|likePattern
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|beginIndex
init|=
literal|0
decl_stmt|;
name|int
name|endIndex
init|=
name|length
decl_stmt|;
name|char
name|lastChar
init|=
literal|'a'
decl_stmt|;
name|String
name|strPattern
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
name|type
operator|=
name|PatternType
operator|.
name|NONE
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|n
init|=
name|likePattern
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|'_'
condition|)
block|{
comment|// such as "a_b"
if|if
condition|(
name|lastChar
operator|!=
literal|'\\'
condition|)
block|{
comment|// such as "a%bc"
name|type
operator|=
name|PatternType
operator|.
name|COMPLEX
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|// such as "abc\%de%"
name|strPattern
operator|+=
name|likePattern
operator|.
name|substring
argument_list|(
name|beginIndex
argument_list|,
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|beginIndex
operator|=
name|i
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|n
operator|==
literal|'%'
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// such as "%abc"
name|type
operator|=
name|PatternType
operator|.
name|END
expr_stmt|;
name|beginIndex
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|<
name|length
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|lastChar
operator|!=
literal|'\\'
condition|)
block|{
comment|// such as "a%bc"
name|type
operator|=
name|PatternType
operator|.
name|COMPLEX
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|// such as "abc\%de%"
name|strPattern
operator|+=
name|likePattern
operator|.
name|substring
argument_list|(
name|beginIndex
argument_list|,
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|beginIndex
operator|=
name|i
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|lastChar
operator|!=
literal|'\\'
condition|)
block|{
name|endIndex
operator|=
name|length
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|PatternType
operator|.
name|END
condition|)
block|{
comment|// such as "%abc%"
name|type
operator|=
name|PatternType
operator|.
name|MIDDLE
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|PatternType
operator|.
name|BEGIN
expr_stmt|;
comment|// such as "abc%"
block|}
block|}
else|else
block|{
comment|// such as "abc\%"
name|strPattern
operator|+=
name|likePattern
operator|.
name|substring
argument_list|(
name|beginIndex
argument_list|,
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|beginIndex
operator|=
name|i
expr_stmt|;
name|endIndex
operator|=
name|length
expr_stmt|;
block|}
block|}
block|}
name|lastChar
operator|=
name|n
expr_stmt|;
block|}
name|strPattern
operator|+=
name|likePattern
operator|.
name|substring
argument_list|(
name|beginIndex
argument_list|,
name|endIndex
argument_list|)
expr_stmt|;
name|simplePattern
operator|.
name|set
argument_list|(
name|strPattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
name|BytesColumnVector
name|inputColVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|colNum
index|]
decl_stmt|;
name|int
index|[]
name|sel
init|=
name|batch
operator|.
name|selected
decl_stmt|;
name|boolean
index|[]
name|nullPos
init|=
name|inputColVector
operator|.
name|isNull
decl_stmt|;
name|int
name|n
init|=
name|batch
operator|.
name|size
decl_stmt|;
name|byte
index|[]
index|[]
name|vector
init|=
name|inputColVector
operator|.
name|vector
decl_stmt|;
name|int
index|[]
name|length
init|=
name|inputColVector
operator|.
name|length
decl_stmt|;
name|int
index|[]
name|start
init|=
name|inputColVector
operator|.
name|start
decl_stmt|;
name|byte
index|[]
name|simplePatternBytes
init|=
name|simplePattern
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// return immediately if batch is empty
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|inputColVector
operator|.
name|noNulls
condition|)
block|{
if|if
condition|(
name|inputColVector
operator|.
name|isRepeating
condition|)
block|{
comment|// All must be selected otherwise size would be zero Repeating property will not change.
if|if
condition|(
operator|!
name|like
argument_list|(
name|vector
index|[
literal|0
index|]
argument_list|,
name|start
index|[
literal|0
index|]
argument_list|,
name|length
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|// Entire batch is filtered out.
name|batch
operator|.
name|size
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|int
name|newSize
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|NONE
case|:
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|noneLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|,
name|simplePatternBytes
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
break|break;
case|case
name|BEGIN
case|:
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|beginLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|,
name|simplePatternBytes
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
break|break;
case|case
name|END
case|:
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|endLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|,
name|simplePatternBytes
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
break|break;
case|case
name|MIDDLE
case|:
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|midLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|,
name|simplePatternBytes
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
break|break;
case|case
name|COMPLEX
case|:
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|complexLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
break|break;
block|}
name|batch
operator|.
name|size
operator|=
name|newSize
expr_stmt|;
block|}
else|else
block|{
name|int
name|newSize
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|NONE
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|noneLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|,
name|simplePatternBytes
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
break|break;
case|case
name|BEGIN
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|beginLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|,
name|simplePatternBytes
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
break|break;
case|case
name|END
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|endLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|,
name|simplePatternBytes
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
break|break;
case|case
name|MIDDLE
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|midLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|,
name|simplePatternBytes
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
break|break;
case|case
name|COMPLEX
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|complexLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
break|break;
block|}
if|if
condition|(
name|newSize
operator|<
name|n
condition|)
block|{
name|batch
operator|.
name|size
operator|=
name|newSize
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|inputColVector
operator|.
name|isRepeating
condition|)
block|{
comment|//All must be selected otherwise size would be zero. Repeating property will not change.
if|if
condition|(
operator|!
name|nullPos
index|[
literal|0
index|]
condition|)
block|{
if|if
condition|(
operator|!
name|like
argument_list|(
name|vector
index|[
literal|0
index|]
argument_list|,
name|start
index|[
literal|0
index|]
argument_list|,
name|length
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|//Entire batch is filtered out.
name|batch
operator|.
name|size
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
name|batch
operator|.
name|size
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|int
name|newSize
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|NONE
case|:
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|nullPos
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|noneLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|,
name|simplePatternBytes
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|BEGIN
case|:
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|nullPos
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|beginLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|,
name|simplePatternBytes
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|END
case|:
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|nullPos
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|endLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|,
name|simplePatternBytes
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|MIDDLE
case|:
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|nullPos
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|midLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|,
name|simplePatternBytes
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|COMPLEX
case|:
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|n
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|nullPos
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|complexLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
break|break;
block|}
comment|//Change the selected vector
name|batch
operator|.
name|size
operator|=
name|newSize
expr_stmt|;
block|}
else|else
block|{
name|int
name|newSize
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|NONE
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|nullPos
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|noneLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|,
name|simplePatternBytes
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|BEGIN
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|nullPos
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|beginLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|,
name|simplePatternBytes
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|END
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|nullPos
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|endLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|,
name|simplePatternBytes
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|MIDDLE
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|nullPos
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|midLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|,
name|simplePatternBytes
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|COMPLEX
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|nullPos
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|complexLike
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|start
index|[
name|i
index|]
argument_list|,
name|length
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|sel
index|[
name|newSize
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
break|break;
block|}
if|if
condition|(
name|newSize
operator|<
name|n
condition|)
block|{
name|batch
operator|.
name|size
operator|=
name|newSize
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
block|}
comment|/* If every row qualified (newSize==n), then we can ignore the sel vector to streamline          * future operations. So selectedInUse will remain false.          */
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getOutputColumn
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOutputType
parameter_list|()
block|{
return|return
literal|"boolean"
return|;
block|}
block|}
end_class

end_unit

