begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
operator|.
name|MultiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexVisitorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableIntList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * Rule that merges a join with multijoin/join children if  * the equi compared the same set of input columns.  */
end_comment

begin_class
specifier|public
class|class
name|HiveJoinToMultiJoinRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|HiveJoinToMultiJoinRule
name|INSTANCE
init|=
operator|new
name|HiveJoinToMultiJoinRule
argument_list|(
name|Join
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a JoinToMultiJoinRule.    */
specifier|public
name|HiveJoinToMultiJoinRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Join
argument_list|>
name|clazz
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|clazz
argument_list|,
name|operand
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|operand
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|left
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|right
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
comment|// We do not merge outer joins currently
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|!=
name|JoinRelType
operator|.
name|INNER
condition|)
block|{
return|return;
block|}
comment|// We check whether the join can be combined with any of its children
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|newInputs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newJoinFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|newJoinFilters
operator|.
name|add
argument_list|(
name|join
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|JoinRelType
argument_list|,
name|RexNode
argument_list|>
argument_list|>
name|joinSpecs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ImmutableBitSet
argument_list|>
name|projFields
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// Left child
if|if
condition|(
name|left
operator|instanceof
name|Join
operator|||
name|left
operator|instanceof
name|MultiJoin
condition|)
block|{
specifier|final
name|RexNode
name|leftCondition
decl_stmt|;
if|if
condition|(
name|left
operator|instanceof
name|Join
condition|)
block|{
name|leftCondition
operator|=
operator|(
operator|(
name|Join
operator|)
name|left
operator|)
operator|.
name|getCondition
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|leftCondition
operator|=
operator|(
operator|(
name|MultiJoin
operator|)
name|left
operator|)
operator|.
name|getJoinFilter
argument_list|()
expr_stmt|;
block|}
name|boolean
name|combinable
init|=
name|isCombinablePredicate
argument_list|(
name|join
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|leftCondition
argument_list|)
decl_stmt|;
if|if
condition|(
name|combinable
condition|)
block|{
name|newJoinFilters
operator|.
name|add
argument_list|(
name|leftCondition
argument_list|)
expr_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|left
operator|.
name|getInputs
argument_list|()
control|)
block|{
name|projFields
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|joinSpecs
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
operator|(
name|RexNode
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|newInputs
operator|.
name|add
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|projFields
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|joinSpecs
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
operator|(
name|RexNode
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|newInputs
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|projFields
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|joinSpecs
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
operator|(
name|RexNode
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|newInputs
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
comment|// Right child
if|if
condition|(
name|right
operator|instanceof
name|Join
operator|||
name|right
operator|instanceof
name|MultiJoin
condition|)
block|{
specifier|final
name|RexNode
name|rightCondition
decl_stmt|;
if|if
condition|(
name|right
operator|instanceof
name|Join
condition|)
block|{
name|rightCondition
operator|=
name|shiftRightFilter
argument_list|(
name|join
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
operator|(
operator|(
name|Join
operator|)
name|right
operator|)
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rightCondition
operator|=
name|shiftRightFilter
argument_list|(
name|join
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
operator|(
operator|(
name|MultiJoin
operator|)
name|right
operator|)
operator|.
name|getJoinFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|combinable
init|=
name|isCombinablePredicate
argument_list|(
name|join
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|rightCondition
argument_list|)
decl_stmt|;
if|if
condition|(
name|combinable
condition|)
block|{
name|newJoinFilters
operator|.
name|add
argument_list|(
name|rightCondition
argument_list|)
expr_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|right
operator|.
name|getInputs
argument_list|()
control|)
block|{
name|projFields
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|joinSpecs
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
operator|(
name|RexNode
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|newInputs
operator|.
name|add
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|projFields
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|joinSpecs
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
operator|(
name|RexNode
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|newInputs
operator|.
name|add
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|projFields
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|joinSpecs
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
operator|(
name|RexNode
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|newInputs
operator|.
name|add
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
comment|// If we cannot combine any of the children, we bail out
if|if
condition|(
name|newJoinFilters
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return;
block|}
name|RexNode
name|newCondition
init|=
name|RexUtil
operator|.
name|flatten
argument_list|(
name|rexBuilder
argument_list|,
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|newJoinFilters
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableMap
argument_list|<
name|Integer
argument_list|,
name|ImmutableIntList
argument_list|>
name|newJoinFieldRefCountsMap
init|=
name|addOnJoinFieldRefCounts
argument_list|(
name|newInputs
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|newCondition
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|newPostJoinFilters
init|=
name|combinePostJoinFilters
argument_list|(
name|join
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
decl_stmt|;
name|RelNode
name|multiJoin
init|=
operator|new
name|MultiJoin
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
argument_list|,
name|newInputs
argument_list|,
name|newCondition
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Pair
operator|.
name|right
argument_list|(
name|joinSpecs
argument_list|)
argument_list|,
name|Pair
operator|.
name|left
argument_list|(
name|joinSpecs
argument_list|)
argument_list|,
name|projFields
argument_list|,
name|newJoinFieldRefCountsMap
argument_list|,
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|newPostJoinFilters
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|multiJoin
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|isCombinablePredicate
parameter_list|(
name|Join
name|join
parameter_list|,
name|RexNode
name|condition
parameter_list|,
name|RexNode
name|otherCondition
parameter_list|)
block|{
specifier|final
name|JoinPredicateInfo
name|joinPredInfo
init|=
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
operator|.
name|constructJoinPredicateInfo
argument_list|(
name|join
argument_list|,
name|condition
argument_list|)
decl_stmt|;
specifier|final
name|JoinPredicateInfo
name|otherJoinPredInfo
init|=
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
operator|.
name|constructJoinPredicateInfo
argument_list|(
name|join
argument_list|,
name|otherCondition
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinPredInfo
operator|.
name|getProjsFromLeftPartOfJoinKeysInJoinSchema
argument_list|()
operator|.
name|equals
argument_list|(
name|otherJoinPredInfo
operator|.
name|getProjsFromLeftPartOfJoinKeysInJoinSchema
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|joinPredInfo
operator|.
name|getProjsFromRightPartOfJoinKeysInJoinSchema
argument_list|()
operator|.
name|equals
argument_list|(
name|otherJoinPredInfo
operator|.
name|getProjsFromRightPartOfJoinKeysInJoinSchema
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Shifts a filter originating from the right child of the LogicalJoin to the    * right, to reflect the filter now being applied on the resulting    * MultiJoin.    *    * @param joinRel     the original LogicalJoin    * @param left        the left child of the LogicalJoin    * @param right       the right child of the LogicalJoin    * @param rightFilter the filter originating from the right child    * @return the adjusted right filter    */
specifier|private
name|RexNode
name|shiftRightFilter
parameter_list|(
name|Join
name|joinRel
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|,
name|RexNode
name|rightFilter
parameter_list|)
block|{
if|if
condition|(
name|rightFilter
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|nFieldsOnLeft
init|=
name|left
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|nFieldsOnRight
init|=
name|right
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
index|[]
name|adjustments
init|=
operator|new
name|int
index|[
name|nFieldsOnRight
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nFieldsOnRight
condition|;
name|i
operator|++
control|)
block|{
name|adjustments
index|[
name|i
index|]
operator|=
name|nFieldsOnLeft
expr_stmt|;
block|}
name|rightFilter
operator|=
name|rightFilter
operator|.
name|accept
argument_list|(
operator|new
name|RelOptUtil
operator|.
name|RexInputConverter
argument_list|(
name|joinRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
argument_list|,
name|right
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|,
name|joinRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|,
name|adjustments
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rightFilter
return|;
block|}
comment|/**    * Adds on to the existing join condition reference counts the references    * from the new join condition.    *    * @param multiJoinInputs          inputs into the new MultiJoin    * @param nTotalFields             total number of fields in the MultiJoin    * @param joinCondition            the new join condition    * @param origJoinFieldRefCounts   existing join condition reference counts    *    * @return Map containing the new join condition    */
specifier|private
name|ImmutableMap
argument_list|<
name|Integer
argument_list|,
name|ImmutableIntList
argument_list|>
name|addOnJoinFieldRefCounts
parameter_list|(
name|List
argument_list|<
name|RelNode
argument_list|>
name|multiJoinInputs
parameter_list|,
name|int
name|nTotalFields
parameter_list|,
name|RexNode
name|joinCondition
parameter_list|)
block|{
comment|// count the input references in the join condition
name|int
index|[]
name|joinCondRefCounts
init|=
operator|new
name|int
index|[
name|nTotalFields
index|]
decl_stmt|;
name|joinCondition
operator|.
name|accept
argument_list|(
operator|new
name|InputReferenceCounter
argument_list|(
name|joinCondRefCounts
argument_list|)
argument_list|)
expr_stmt|;
comment|// add on to the counts for each input into the MultiJoin the
comment|// reference counts computed for the current join condition
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|int
index|[]
argument_list|>
name|refCountsMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|int
name|nInputs
init|=
name|multiJoinInputs
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|currInput
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|startField
init|=
literal|0
decl_stmt|;
name|int
name|nFields
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nTotalFields
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|joinCondRefCounts
index|[
name|i
index|]
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
while|while
condition|(
name|i
operator|>=
operator|(
name|startField
operator|+
name|nFields
operator|)
condition|)
block|{
name|startField
operator|+=
name|nFields
expr_stmt|;
name|currInput
operator|++
expr_stmt|;
assert|assert
name|currInput
operator|<
name|nInputs
assert|;
name|nFields
operator|=
name|multiJoinInputs
operator|.
name|get
argument_list|(
name|currInput
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
expr_stmt|;
block|}
name|int
index|[]
name|refCounts
init|=
name|refCountsMap
operator|.
name|get
argument_list|(
name|currInput
argument_list|)
decl_stmt|;
if|if
condition|(
name|refCounts
operator|==
literal|null
condition|)
block|{
name|refCounts
operator|=
operator|new
name|int
index|[
name|nFields
index|]
expr_stmt|;
name|refCountsMap
operator|.
name|put
argument_list|(
name|currInput
argument_list|,
name|refCounts
argument_list|)
expr_stmt|;
block|}
name|refCounts
index|[
name|i
operator|-
name|startField
index|]
operator|+=
name|joinCondRefCounts
index|[
name|i
index|]
expr_stmt|;
block|}
specifier|final
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|Integer
argument_list|,
name|ImmutableIntList
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|int
index|[]
argument_list|>
name|entry
range|:
name|refCountsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|ImmutableIntList
operator|.
name|of
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Combines the post-join filters from the left and right inputs (if they    * are MultiJoinRels) into a single AND'd filter.    *    * @param joinRel the original LogicalJoin    * @param left    left child of the LogicalJoin    * @param right   right child of the LogicalJoin    * @return combined post-join filters AND'd together    */
specifier|private
name|List
argument_list|<
name|RexNode
argument_list|>
name|combinePostJoinFilters
parameter_list|(
name|Join
name|joinRel
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|filters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|right
operator|instanceof
name|MultiJoin
condition|)
block|{
specifier|final
name|MultiJoin
name|multiRight
init|=
operator|(
name|MultiJoin
operator|)
name|right
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|shiftRightFilter
argument_list|(
name|joinRel
argument_list|,
name|left
argument_list|,
name|multiRight
argument_list|,
name|multiRight
operator|.
name|getPostJoinFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|left
operator|instanceof
name|MultiJoin
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
operator|(
operator|(
name|MultiJoin
operator|)
name|left
operator|)
operator|.
name|getPostJoinFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|filters
return|;
block|}
comment|//~ Inner Classes ----------------------------------------------------------
comment|/**    * Visitor that keeps a reference count of the inputs used by an expression.    */
specifier|private
class|class
name|InputReferenceCounter
extends|extends
name|RexVisitorImpl
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|int
index|[]
name|refCounts
decl_stmt|;
specifier|public
name|InputReferenceCounter
parameter_list|(
name|int
index|[]
name|refCounts
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|refCounts
operator|=
name|refCounts
expr_stmt|;
block|}
specifier|public
name|Void
name|visitInputRef
parameter_list|(
name|RexInputRef
name|inputRef
parameter_list|)
block|{
name|refCounts
index|[
name|inputRef
operator|.
name|getIndex
argument_list|()
index|]
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End JoinToMultiJoinRule.java
end_comment

end_unit

