begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
operator|.
name|ProjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|rules
operator|.
name|JoinCommuteRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|CalciteSemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveMultiJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveProject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Rule that merges a join with multijoin/join children if  * the equi compared the same set of input columns.  */
end_comment

begin_class
specifier|public
class|class
name|HiveJoinToMultiJoinRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|HiveJoinToMultiJoinRule
name|INSTANCE
init|=
operator|new
name|HiveJoinToMultiJoinRule
argument_list|(
name|HiveJoin
operator|.
name|class
argument_list|,
name|HiveProject
operator|.
name|DEFAULT_PROJECT_FACTORY
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ProjectFactory
name|projectFactory
decl_stmt|;
specifier|private
specifier|static
specifier|transient
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveJoinToMultiJoinRule
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates a JoinToMultiJoinRule.    */
specifier|public
name|HiveJoinToMultiJoinRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Join
argument_list|>
name|clazz
parameter_list|,
name|ProjectFactory
name|projectFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|clazz
argument_list|,
name|operand
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|operand
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|projectFactory
operator|=
name|projectFactory
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|HiveJoin
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|left
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|right
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// 1. We try to merge this join with the left child
name|RelNode
name|multiJoin
init|=
name|mergeJoin
argument_list|(
name|join
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
decl_stmt|;
if|if
condition|(
name|multiJoin
operator|!=
literal|null
condition|)
block|{
name|call
operator|.
name|transformTo
argument_list|(
name|multiJoin
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// 2. If we cannot, we swap the inputs so we can try
comment|//    to merge it with its right child
name|RelNode
name|swapped
init|=
name|JoinCommuteRule
operator|.
name|swap
argument_list|(
name|join
argument_list|,
literal|true
argument_list|)
decl_stmt|;
assert|assert
name|swapped
operator|!=
literal|null
assert|;
comment|//    The result of the swapping operation is either
comment|//    i)  a Project or,
comment|//    ii) if the project is trivial, a raw join
specifier|final
name|HiveJoin
name|newJoin
decl_stmt|;
name|Project
name|topProject
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|swapped
operator|instanceof
name|HiveJoin
condition|)
block|{
name|newJoin
operator|=
operator|(
name|HiveJoin
operator|)
name|swapped
expr_stmt|;
block|}
else|else
block|{
name|topProject
operator|=
operator|(
name|Project
operator|)
name|swapped
expr_stmt|;
name|newJoin
operator|=
operator|(
name|HiveJoin
operator|)
name|swapped
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// 3. We try to merge the join with the right child
name|multiJoin
operator|=
name|mergeJoin
argument_list|(
name|newJoin
argument_list|,
name|right
argument_list|,
name|left
argument_list|)
expr_stmt|;
if|if
condition|(
name|multiJoin
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|topProject
operator|!=
literal|null
condition|)
block|{
name|multiJoin
operator|=
name|projectFactory
operator|.
name|createProject
argument_list|(
name|multiJoin
argument_list|,
name|topProject
operator|.
name|getChildExps
argument_list|()
argument_list|,
name|topProject
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|call
operator|.
name|transformTo
argument_list|(
name|multiJoin
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// This method tries to merge the join with its left child. The left
comment|// child should be a join for this to happen.
specifier|private
specifier|static
name|RelNode
name|mergeJoin
parameter_list|(
name|HiveJoin
name|join
parameter_list|,
name|RelNode
name|left
parameter_list|,
name|RelNode
name|right
parameter_list|)
block|{
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
comment|// We check whether the join can be combined with any of its children
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|newInputs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|newJoinCondition
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|joinInputs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|JoinRelType
argument_list|>
name|joinTypes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|joinFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// Left child
if|if
condition|(
name|left
operator|instanceof
name|HiveJoin
operator|||
name|left
operator|instanceof
name|HiveMultiJoin
condition|)
block|{
specifier|final
name|RexNode
name|leftCondition
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|leftJoinInputs
decl_stmt|;
specifier|final
name|List
argument_list|<
name|JoinRelType
argument_list|>
name|leftJoinTypes
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|leftJoinFilters
decl_stmt|;
name|boolean
name|combinable
decl_stmt|;
if|if
condition|(
name|left
operator|instanceof
name|HiveJoin
condition|)
block|{
name|HiveJoin
name|hj
init|=
operator|(
name|HiveJoin
operator|)
name|left
decl_stmt|;
name|leftCondition
operator|=
name|hj
operator|.
name|getCondition
argument_list|()
expr_stmt|;
name|leftJoinInputs
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|leftJoinTypes
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|hj
operator|.
name|getJoinType
argument_list|()
argument_list|)
expr_stmt|;
name|leftJoinFilters
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|hj
operator|.
name|getJoinFilter
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|combinable
operator|=
name|isCombinableJoin
argument_list|(
name|join
argument_list|,
name|hj
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteSemanticException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Failed to merge join-join"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|combinable
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|HiveMultiJoin
name|hmj
init|=
operator|(
name|HiveMultiJoin
operator|)
name|left
decl_stmt|;
name|leftCondition
operator|=
name|hmj
operator|.
name|getCondition
argument_list|()
expr_stmt|;
name|leftJoinInputs
operator|=
name|hmj
operator|.
name|getJoinInputs
argument_list|()
expr_stmt|;
name|leftJoinTypes
operator|=
name|hmj
operator|.
name|getJoinTypes
argument_list|()
expr_stmt|;
name|leftJoinFilters
operator|=
name|hmj
operator|.
name|getJoinFilters
argument_list|()
expr_stmt|;
try|try
block|{
name|combinable
operator|=
name|isCombinableJoin
argument_list|(
name|join
argument_list|,
name|hmj
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteSemanticException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Failed to merge join-multijoin"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|combinable
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|combinable
condition|)
block|{
name|newJoinCondition
operator|.
name|add
argument_list|(
name|leftCondition
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leftJoinInputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|joinInputs
operator|.
name|add
argument_list|(
name|leftJoinInputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|joinTypes
operator|.
name|add
argument_list|(
name|leftJoinTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|joinFilters
operator|.
name|add
argument_list|(
name|leftJoinFilters
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newInputs
operator|.
name|addAll
argument_list|(
name|left
operator|.
name|getInputs
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The join operation in the child is not on the same keys
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
comment|// The left child is not a join or multijoin operator
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|numberLeftInputs
init|=
name|newInputs
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Right child
name|newInputs
operator|.
name|add
argument_list|(
name|right
argument_list|)
expr_stmt|;
comment|// If we cannot combine any of the children, we bail out
name|newJoinCondition
operator|.
name|add
argument_list|(
name|join
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|newJoinCondition
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|systemFieldList
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|joinKeyExprs
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|filterNulls
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newInputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|joinKeyExprs
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|RexNode
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RexNode
name|filters
decl_stmt|;
try|try
block|{
name|filters
operator|=
name|HiveRelOptUtil
operator|.
name|splitHiveJoinCondition
argument_list|(
name|systemFieldList
argument_list|,
name|newInputs
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|joinKeyExprs
argument_list|,
name|filterNulls
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteSemanticException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Failed to merge joins"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ImmutableBitSet
operator|.
name|Builder
name|keysInInputsBuilder
init|=
name|ImmutableBitSet
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newInputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|partialCondition
init|=
name|joinKeyExprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|partialCondition
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|keysInInputsBuilder
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If we cannot merge, we bail out
name|ImmutableBitSet
name|keysInInputs
init|=
name|keysInInputsBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|ImmutableBitSet
name|leftReferencedInputs
init|=
name|keysInInputs
operator|.
name|intersect
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|numberLeftInputs
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableBitSet
name|rightReferencedInputs
init|=
name|keysInInputs
operator|.
name|intersect
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|numberLeftInputs
argument_list|,
name|newInputs
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|!=
name|JoinRelType
operator|.
name|INNER
operator|&&
operator|(
name|leftReferencedInputs
operator|.
name|cardinality
argument_list|()
operator|>
literal|1
operator|||
name|rightReferencedInputs
operator|.
name|cardinality
argument_list|()
operator|>
literal|1
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Otherwise, we add to the join specs
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|!=
name|JoinRelType
operator|.
name|INNER
condition|)
block|{
name|int
name|leftInput
init|=
name|keysInInputs
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|rightInput
init|=
name|keysInInputs
operator|.
name|nextSetBit
argument_list|(
name|numberLeftInputs
argument_list|)
decl_stmt|;
name|joinInputs
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|leftInput
argument_list|,
name|rightInput
argument_list|)
argument_list|)
expr_stmt|;
name|joinTypes
operator|.
name|add
argument_list|(
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|)
expr_stmt|;
name|joinFilters
operator|.
name|add
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
range|:
name|leftReferencedInputs
control|)
block|{
for|for
control|(
name|int
name|j
range|:
name|rightReferencedInputs
control|)
block|{
name|joinInputs
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|joinTypes
operator|.
name|add
argument_list|(
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|)
expr_stmt|;
name|joinFilters
operator|.
name|add
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// We can now create a multijoin operator
name|RexNode
name|newCondition
init|=
name|RexUtil
operator|.
name|flatten
argument_list|(
name|rexBuilder
argument_list|,
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|newJoinCondition
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|HiveMultiJoin
argument_list|(
name|join
operator|.
name|getCluster
argument_list|()
argument_list|,
name|newInputs
argument_list|,
name|newCondition
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
argument_list|,
name|joinInputs
argument_list|,
name|joinTypes
argument_list|,
name|joinFilters
argument_list|)
return|;
block|}
comment|/*    * Returns true if the join conditions execute over the same keys    */
specifier|private
specifier|static
name|boolean
name|isCombinableJoin
parameter_list|(
name|HiveJoin
name|join
parameter_list|,
name|HiveJoin
name|leftChildJoin
parameter_list|)
throws|throws
name|CalciteSemanticException
block|{
specifier|final
name|JoinPredicateInfo
name|joinPredInfo
init|=
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
operator|.
name|constructJoinPredicateInfo
argument_list|(
name|join
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|JoinPredicateInfo
name|leftChildJoinPredInfo
init|=
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
operator|.
name|constructJoinPredicateInfo
argument_list|(
name|leftChildJoin
argument_list|,
name|leftChildJoin
operator|.
name|getCondition
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|isCombinablePredicate
argument_list|(
name|joinPredInfo
argument_list|,
name|leftChildJoinPredInfo
argument_list|,
name|leftChildJoin
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
comment|/*    * Returns true if the join conditions execute over the same keys    */
specifier|private
specifier|static
name|boolean
name|isCombinableJoin
parameter_list|(
name|HiveJoin
name|join
parameter_list|,
name|HiveMultiJoin
name|leftChildJoin
parameter_list|)
throws|throws
name|CalciteSemanticException
block|{
specifier|final
name|JoinPredicateInfo
name|joinPredInfo
init|=
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
operator|.
name|constructJoinPredicateInfo
argument_list|(
name|join
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|JoinPredicateInfo
name|leftChildJoinPredInfo
init|=
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
operator|.
name|constructJoinPredicateInfo
argument_list|(
name|leftChildJoin
argument_list|,
name|leftChildJoin
operator|.
name|getCondition
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|isCombinablePredicate
argument_list|(
name|joinPredInfo
argument_list|,
name|leftChildJoinPredInfo
argument_list|,
name|leftChildJoin
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
comment|/*    * To be able to combine a parent join and its left input join child,    * the left keys over which the parent join is executed need to be the same    * than those of the child join.    * Thus, we iterate over the different inputs of the child, checking if the    * keys of the parent are the same    */
specifier|private
specifier|static
name|boolean
name|isCombinablePredicate
parameter_list|(
name|JoinPredicateInfo
name|joinPredInfo
parameter_list|,
name|JoinPredicateInfo
name|leftChildJoinPredInfo
parameter_list|,
name|int
name|noLeftChildInputs
parameter_list|)
throws|throws
name|CalciteSemanticException
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|keys
init|=
name|joinPredInfo
operator|.
name|getProjsJoinKeysInChildSchema
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|keys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noLeftChildInputs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keys
operator|.
name|equals
argument_list|(
name|leftChildJoinPredInfo
operator|.
name|getProjsJoinKeysInJoinSchema
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

