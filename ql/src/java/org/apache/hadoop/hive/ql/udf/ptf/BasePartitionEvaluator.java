begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PTFOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PTFPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PTFPartition
operator|.
name|PTFPartitionIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|LeadLagInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|BoundarySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|Direction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|WindowType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|BoundaryDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|PTFExpressionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowFrameDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFAverage
operator|.
name|AbstractGenericUDAFAverageEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
operator|.
name|AbstractAggregationBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
operator|.
name|AggregationBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFSum
operator|.
name|GenericUDAFSumEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * This class is mostly used for RANGE windowing type to do some optimization. ROWS  * windowing type can support streaming.  *  */
end_comment

begin_class
specifier|public
class|class
name|BasePartitionEvaluator
block|{
specifier|protected
specifier|final
name|GenericUDAFEvaluator
name|wrappedEvaluator
decl_stmt|;
specifier|protected
specifier|final
name|WindowFrameDef
name|winFrame
decl_stmt|;
specifier|protected
specifier|final
name|PTFPartition
name|partition
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|PTFExpressionDef
argument_list|>
name|parameters
decl_stmt|;
specifier|protected
specifier|final
name|ObjectInspector
name|outputOI
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|nullsLast
decl_stmt|;
comment|/**    * Internal class to represent a window range in a partition by searching the    * relative position (ROWS) or relative value (RANGE) of the current row    */
specifier|protected
specifier|static
class|class
name|Range
block|{
name|int
name|start
decl_stmt|;
name|int
name|end
decl_stmt|;
name|PTFPartition
name|p
decl_stmt|;
specifier|public
name|Range
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|p
operator|=
name|p
expr_stmt|;
block|}
specifier|public
name|PTFPartitionIterator
argument_list|<
name|Object
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|p
operator|.
name|range
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
specifier|public
name|int
name|getDiff
parameter_list|(
name|Range
name|prevRange
parameter_list|)
block|{
return|return
name|this
operator|.
name|start
operator|-
name|prevRange
operator|.
name|start
operator|+
name|this
operator|.
name|end
operator|-
name|prevRange
operator|.
name|end
return|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|end
operator|-
name|start
return|;
block|}
block|}
comment|/**    * Define some type specific operation to used in the subclass    */
specifier|private
specifier|static
specifier|abstract
class|class
name|TypeOperationBase
parameter_list|<
name|ResultType
parameter_list|>
block|{
specifier|public
specifier|abstract
name|ResultType
name|add
parameter_list|(
name|ResultType
name|t1
parameter_list|,
name|ResultType
name|t2
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|ResultType
name|minus
parameter_list|(
name|ResultType
name|t1
parameter_list|,
name|ResultType
name|t2
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|ResultType
name|div
parameter_list|(
name|ResultType
name|sum
parameter_list|,
name|long
name|numRows
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|TypeOperationLongWritable
extends|extends
name|TypeOperationBase
argument_list|<
name|LongWritable
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|LongWritable
name|add
parameter_list|(
name|LongWritable
name|t1
parameter_list|,
name|LongWritable
name|t2
parameter_list|)
block|{
if|if
condition|(
name|t1
operator|==
literal|null
operator|&&
name|t2
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|LongWritable
argument_list|(
operator|(
name|t1
operator|==
literal|null
condition|?
literal|0
else|:
name|t1
operator|.
name|get
argument_list|()
operator|)
operator|+
operator|(
name|t2
operator|==
literal|null
condition|?
literal|0
else|:
name|t2
operator|.
name|get
argument_list|()
operator|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|LongWritable
name|minus
parameter_list|(
name|LongWritable
name|t1
parameter_list|,
name|LongWritable
name|t2
parameter_list|)
block|{
if|if
condition|(
name|t1
operator|==
literal|null
operator|&&
name|t2
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|LongWritable
argument_list|(
operator|(
name|t1
operator|==
literal|null
condition|?
literal|0
else|:
name|t1
operator|.
name|get
argument_list|()
operator|)
operator|-
operator|(
name|t2
operator|==
literal|null
condition|?
literal|0
else|:
name|t2
operator|.
name|get
argument_list|()
operator|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|LongWritable
name|div
parameter_list|(
name|LongWritable
name|sum
parameter_list|,
name|long
name|numRows
parameter_list|)
block|{
return|return
literal|null
return|;
comment|// Not used
block|}
block|}
specifier|private
specifier|static
class|class
name|TypeOperationDoubleWritable
extends|extends
name|TypeOperationBase
argument_list|<
name|DoubleWritable
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|DoubleWritable
name|add
parameter_list|(
name|DoubleWritable
name|t1
parameter_list|,
name|DoubleWritable
name|t2
parameter_list|)
block|{
if|if
condition|(
name|t1
operator|==
literal|null
operator|&&
name|t2
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|DoubleWritable
argument_list|(
operator|(
name|t1
operator|==
literal|null
condition|?
literal|0
else|:
name|t1
operator|.
name|get
argument_list|()
operator|)
operator|+
operator|(
name|t2
operator|==
literal|null
condition|?
literal|0
else|:
name|t2
operator|.
name|get
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|public
name|DoubleWritable
name|minus
parameter_list|(
name|DoubleWritable
name|t1
parameter_list|,
name|DoubleWritable
name|t2
parameter_list|)
block|{
if|if
condition|(
name|t1
operator|==
literal|null
operator|&&
name|t2
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|DoubleWritable
argument_list|(
operator|(
name|t1
operator|==
literal|null
condition|?
literal|0
else|:
name|t1
operator|.
name|get
argument_list|()
operator|)
operator|-
operator|(
name|t2
operator|==
literal|null
condition|?
literal|0
else|:
name|t2
operator|.
name|get
argument_list|()
operator|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DoubleWritable
name|div
parameter_list|(
name|DoubleWritable
name|sum
parameter_list|,
name|long
name|numRows
parameter_list|)
block|{
if|if
condition|(
name|sum
operator|==
literal|null
operator|||
name|numRows
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|DoubleWritable
argument_list|(
name|sum
operator|.
name|get
argument_list|()
operator|/
operator|(
name|double
operator|)
name|numRows
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TypeOperationHiveDecimalWritable
extends|extends
name|TypeOperationBase
argument_list|<
name|HiveDecimalWritable
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|HiveDecimalWritable
name|div
parameter_list|(
name|HiveDecimalWritable
name|sum
parameter_list|,
name|long
name|numRows
parameter_list|)
block|{
if|if
condition|(
name|sum
operator|==
literal|null
operator|||
name|numRows
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|HiveDecimalWritable
name|result
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|sum
argument_list|)
decl_stmt|;
name|result
operator|.
name|mutateDivide
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
name|numRows
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|HiveDecimalWritable
name|add
parameter_list|(
name|HiveDecimalWritable
name|t1
parameter_list|,
name|HiveDecimalWritable
name|t2
parameter_list|)
block|{
if|if
condition|(
name|t1
operator|==
literal|null
operator|&&
name|t2
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|t1
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|HiveDecimalWritable
argument_list|(
name|t2
argument_list|)
return|;
block|}
else|else
block|{
name|HiveDecimalWritable
name|result
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|t1
argument_list|)
decl_stmt|;
if|if
condition|(
name|t2
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|mutateAdd
argument_list|(
name|t2
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HiveDecimalWritable
name|minus
parameter_list|(
name|HiveDecimalWritable
name|t1
parameter_list|,
name|HiveDecimalWritable
name|t2
parameter_list|)
block|{
if|if
condition|(
name|t1
operator|==
literal|null
operator|&&
name|t2
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|t2
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|HiveDecimalWritable
argument_list|(
name|t1
argument_list|)
return|;
block|}
else|else
block|{
name|HiveDecimalWritable
name|result
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|t2
argument_list|)
decl_stmt|;
name|result
operator|.
name|mutateNegate
argument_list|()
expr_stmt|;
if|if
condition|(
name|t1
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|mutateAdd
argument_list|(
name|t1
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
block|}
specifier|public
name|BasePartitionEvaluator
parameter_list|(
name|GenericUDAFEvaluator
name|wrappedEvaluator
parameter_list|,
name|WindowFrameDef
name|winFrame
parameter_list|,
name|PTFPartition
name|partition
parameter_list|,
name|List
argument_list|<
name|PTFExpressionDef
argument_list|>
name|parameters
parameter_list|,
name|ObjectInspector
name|outputOI
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
block|{
name|this
operator|.
name|wrappedEvaluator
operator|=
name|wrappedEvaluator
expr_stmt|;
name|this
operator|.
name|winFrame
operator|=
name|winFrame
expr_stmt|;
name|this
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
name|this
operator|.
name|outputOI
operator|=
name|outputOI
expr_stmt|;
name|this
operator|.
name|nullsLast
operator|=
name|nullsLast
expr_stmt|;
block|}
comment|/**    * Get the aggregation for the whole partition. Used in the case where windowing    * is unbounded or the function value is calculated based on all the rows in the    * partition such as percent_rank().    * @return the aggregated result    * @throws HiveException    */
specifier|public
name|Object
name|getPartitionAgg
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
name|calcFunctionValue
argument_list|(
name|partition
operator|.
name|iterator
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Given the current row, get the aggregation for the window    *    * @throws HiveException    */
specifier|public
name|Object
name|iterate
parameter_list|(
name|int
name|currentRow
parameter_list|,
name|LeadLagInfo
name|leadLagInfo
parameter_list|)
throws|throws
name|HiveException
block|{
name|Range
name|range
init|=
name|getRange
argument_list|(
name|winFrame
argument_list|,
name|currentRow
argument_list|,
name|partition
argument_list|,
name|nullsLast
argument_list|)
decl_stmt|;
name|PTFPartitionIterator
argument_list|<
name|Object
argument_list|>
name|pItr
init|=
name|range
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
name|calcFunctionValue
argument_list|(
name|pItr
argument_list|,
name|leadLagInfo
argument_list|)
return|;
block|}
comment|/**    * Given a partition iterator, calculate the function value    * @param pItr  the partition pointer    * @return      the function value    * @throws HiveException    */
specifier|protected
name|Object
name|calcFunctionValue
parameter_list|(
name|PTFPartitionIterator
argument_list|<
name|Object
argument_list|>
name|pItr
parameter_list|,
name|LeadLagInfo
name|leadLagInfo
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// To handle the case like SUM(LAG(f)) over(), aggregation function includes
comment|// LAG/LEAD call
name|PTFOperator
operator|.
name|connectLeadLagFunctionsToPartition
argument_list|(
name|leadLagInfo
argument_list|,
name|pItr
argument_list|)
expr_stmt|;
name|AggregationBuffer
name|aggBuffer
init|=
name|wrappedEvaluator
operator|.
name|getNewAggregationBuffer
argument_list|()
decl_stmt|;
name|Object
index|[]
name|argValues
init|=
operator|new
name|Object
index|[
name|parameters
operator|==
literal|null
condition|?
literal|0
else|:
name|parameters
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
while|while
condition|(
name|pItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|row
init|=
name|pItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PTFExpressionDef
name|param
range|:
name|parameters
control|)
block|{
name|argValues
index|[
name|i
operator|++
index|]
operator|=
name|param
operator|.
name|getExprEvaluator
argument_list|()
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
name|wrappedEvaluator
operator|.
name|aggregate
argument_list|(
name|aggBuffer
argument_list|,
name|argValues
argument_list|)
expr_stmt|;
block|}
comment|// The object is reused during evaluating, make a copy here
return|return
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|wrappedEvaluator
operator|.
name|evaluate
argument_list|(
name|aggBuffer
argument_list|)
argument_list|,
name|outputOI
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|Range
name|getRange
parameter_list|(
name|WindowFrameDef
name|winFrame
parameter_list|,
name|int
name|currRow
parameter_list|,
name|PTFPartition
name|p
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
throws|throws
name|HiveException
block|{
name|BoundaryDef
name|startB
init|=
name|winFrame
operator|.
name|getStart
argument_list|()
decl_stmt|;
name|BoundaryDef
name|endB
init|=
name|winFrame
operator|.
name|getEnd
argument_list|()
decl_stmt|;
name|int
name|start
decl_stmt|,
name|end
decl_stmt|;
if|if
condition|(
name|winFrame
operator|.
name|getWindowType
argument_list|()
operator|==
name|WindowType
operator|.
name|ROWS
condition|)
block|{
name|start
operator|=
name|getRowBoundaryStart
argument_list|(
name|startB
argument_list|,
name|currRow
argument_list|)
expr_stmt|;
name|end
operator|=
name|getRowBoundaryEnd
argument_list|(
name|endB
argument_list|,
name|currRow
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ValueBoundaryScanner
name|vbs
init|=
name|ValueBoundaryScanner
operator|.
name|getScanner
argument_list|(
name|winFrame
argument_list|,
name|nullsLast
argument_list|)
decl_stmt|;
name|start
operator|=
name|vbs
operator|.
name|computeStart
argument_list|(
name|currRow
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|end
operator|=
name|vbs
operator|.
name|computeEnd
argument_list|(
name|currRow
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|start
operator|=
name|start
operator|<
literal|0
condition|?
literal|0
else|:
name|start
expr_stmt|;
name|end
operator|=
name|end
operator|>
name|p
operator|.
name|size
argument_list|()
condition|?
name|p
operator|.
name|size
argument_list|()
else|:
name|end
expr_stmt|;
return|return
operator|new
name|Range
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|p
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|getRowBoundaryStart
parameter_list|(
name|BoundaryDef
name|b
parameter_list|,
name|int
name|currRow
parameter_list|)
throws|throws
name|HiveException
block|{
name|Direction
name|d
init|=
name|b
operator|.
name|getDirection
argument_list|()
decl_stmt|;
name|int
name|amt
init|=
name|b
operator|.
name|getAmt
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|d
condition|)
block|{
case|case
name|PRECEDING
case|:
if|if
condition|(
name|amt
operator|==
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|currRow
operator|-
name|amt
return|;
block|}
case|case
name|CURRENT
case|:
return|return
name|currRow
return|;
case|case
name|FOLLOWING
case|:
return|return
name|currRow
operator|+
name|amt
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unknown Start Boundary Direction: "
operator|+
name|d
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|int
name|getRowBoundaryEnd
parameter_list|(
name|BoundaryDef
name|b
parameter_list|,
name|int
name|currRow
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|Direction
name|d
init|=
name|b
operator|.
name|getDirection
argument_list|()
decl_stmt|;
name|int
name|amt
init|=
name|b
operator|.
name|getAmt
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|d
condition|)
block|{
case|case
name|PRECEDING
case|:
if|if
condition|(
name|amt
operator|==
literal|0
condition|)
block|{
return|return
name|currRow
operator|+
literal|1
return|;
block|}
return|return
name|currRow
operator|-
name|amt
operator|+
literal|1
return|;
case|case
name|CURRENT
case|:
return|return
name|currRow
operator|+
literal|1
return|;
case|case
name|FOLLOWING
case|:
if|if
condition|(
name|amt
operator|==
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
return|return
name|p
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|currRow
operator|+
name|amt
operator|+
literal|1
return|;
block|}
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unknown End Boundary Direction: "
operator|+
name|d
argument_list|)
throw|;
block|}
comment|/**    * The base type for sum operator evaluator when a partition data is available    * and streaming process is not possible. Some optimization can be done for such    * case.    *    */
specifier|public
specifier|static
specifier|abstract
class|class
name|SumPartitionEvaluator
parameter_list|<
name|ResultType
extends|extends
name|Writable
parameter_list|>
extends|extends
name|BasePartitionEvaluator
block|{
specifier|static
class|class
name|WindowSumAgg
parameter_list|<
name|ResultType
parameter_list|>
extends|extends
name|AbstractAggregationBuffer
block|{
name|Range
name|prevRange
decl_stmt|;
name|ResultType
name|prevSum
decl_stmt|;
name|boolean
name|empty
decl_stmt|;
block|}
specifier|protected
specifier|final
name|WindowSumAgg
argument_list|<
name|ResultType
argument_list|>
name|sumAgg
decl_stmt|;
specifier|protected
name|TypeOperationBase
argument_list|<
name|ResultType
argument_list|>
name|typeOperation
decl_stmt|;
specifier|public
name|SumPartitionEvaluator
parameter_list|(
name|GenericUDAFEvaluator
name|wrappedEvaluator
parameter_list|,
name|WindowFrameDef
name|winFrame
parameter_list|,
name|PTFPartition
name|partition
parameter_list|,
name|List
argument_list|<
name|PTFExpressionDef
argument_list|>
name|parameters
parameter_list|,
name|ObjectInspector
name|outputOI
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
block|{
name|super
argument_list|(
name|wrappedEvaluator
argument_list|,
name|winFrame
argument_list|,
name|partition
argument_list|,
name|parameters
argument_list|,
name|outputOI
argument_list|,
name|nullsLast
argument_list|)
expr_stmt|;
name|sumAgg
operator|=
operator|new
name|WindowSumAgg
argument_list|<
name|ResultType
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Override
specifier|public
name|Object
name|iterate
parameter_list|(
name|int
name|currentRow
parameter_list|,
name|LeadLagInfo
name|leadLagInfo
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Currently sum(distinct) not supported in PartitionEvaluator
if|if
condition|(
operator|(
operator|(
name|GenericUDAFSumEvaluator
operator|)
name|wrappedEvaluator
operator|)
operator|.
name|isWindowingDistinct
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|iterate
argument_list|(
name|currentRow
argument_list|,
name|leadLagInfo
argument_list|)
return|;
block|}
name|Range
name|currentRange
init|=
name|getRange
argument_list|(
name|winFrame
argument_list|,
name|currentRow
argument_list|,
name|partition
argument_list|,
name|nullsLast
argument_list|)
decl_stmt|;
name|ResultType
name|result
decl_stmt|;
if|if
condition|(
name|currentRow
operator|==
literal|0
operator|||
comment|// Reset for the new partition
name|sumAgg
operator|.
name|prevRange
operator|==
literal|null
operator|||
name|currentRange
operator|.
name|getSize
argument_list|()
operator|<=
name|currentRange
operator|.
name|getDiff
argument_list|(
name|sumAgg
operator|.
name|prevRange
argument_list|)
condition|)
block|{
name|result
operator|=
operator|(
name|ResultType
operator|)
name|calcFunctionValue
argument_list|(
name|currentRange
operator|.
name|iterator
argument_list|()
argument_list|,
name|leadLagInfo
argument_list|)
expr_stmt|;
name|sumAgg
operator|.
name|prevRange
operator|=
name|currentRange
expr_stmt|;
name|sumAgg
operator|.
name|empty
operator|=
literal|false
expr_stmt|;
name|sumAgg
operator|.
name|prevSum
operator|=
name|result
expr_stmt|;
block|}
else|else
block|{
comment|// Given the previous range and the current range, calculate the new sum
comment|// from the previous sum and the difference to save the computation.
name|Range
name|r1
init|=
operator|new
name|Range
argument_list|(
name|sumAgg
operator|.
name|prevRange
operator|.
name|start
argument_list|,
name|currentRange
operator|.
name|start
argument_list|,
name|partition
argument_list|)
decl_stmt|;
name|Range
name|r2
init|=
operator|new
name|Range
argument_list|(
name|sumAgg
operator|.
name|prevRange
operator|.
name|end
argument_list|,
name|currentRange
operator|.
name|end
argument_list|,
name|partition
argument_list|)
decl_stmt|;
name|ResultType
name|sum1
init|=
operator|(
name|ResultType
operator|)
name|calcFunctionValue
argument_list|(
name|r1
operator|.
name|iterator
argument_list|()
argument_list|,
name|leadLagInfo
argument_list|)
decl_stmt|;
name|ResultType
name|sum2
init|=
operator|(
name|ResultType
operator|)
name|calcFunctionValue
argument_list|(
name|r2
operator|.
name|iterator
argument_list|()
argument_list|,
name|leadLagInfo
argument_list|)
decl_stmt|;
name|result
operator|=
name|typeOperation
operator|.
name|add
argument_list|(
name|typeOperation
operator|.
name|minus
argument_list|(
name|sumAgg
operator|.
name|prevSum
argument_list|,
name|sum1
argument_list|)
argument_list|,
name|sum2
argument_list|)
expr_stmt|;
name|sumAgg
operator|.
name|prevRange
operator|=
name|currentRange
expr_stmt|;
name|sumAgg
operator|.
name|prevSum
operator|=
name|result
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SumPartitionDoubleEvaluator
extends|extends
name|SumPartitionEvaluator
argument_list|<
name|DoubleWritable
argument_list|>
block|{
specifier|public
name|SumPartitionDoubleEvaluator
parameter_list|(
name|GenericUDAFEvaluator
name|wrappedEvaluator
parameter_list|,
name|WindowFrameDef
name|winFrame
parameter_list|,
name|PTFPartition
name|partition
parameter_list|,
name|List
argument_list|<
name|PTFExpressionDef
argument_list|>
name|parameters
parameter_list|,
name|ObjectInspector
name|outputOI
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
block|{
name|super
argument_list|(
name|wrappedEvaluator
argument_list|,
name|winFrame
argument_list|,
name|partition
argument_list|,
name|parameters
argument_list|,
name|outputOI
argument_list|,
name|nullsLast
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeOperation
operator|=
operator|new
name|TypeOperationDoubleWritable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SumPartitionLongEvaluator
extends|extends
name|SumPartitionEvaluator
argument_list|<
name|LongWritable
argument_list|>
block|{
specifier|public
name|SumPartitionLongEvaluator
parameter_list|(
name|GenericUDAFEvaluator
name|wrappedEvaluator
parameter_list|,
name|WindowFrameDef
name|winFrame
parameter_list|,
name|PTFPartition
name|partition
parameter_list|,
name|List
argument_list|<
name|PTFExpressionDef
argument_list|>
name|parameters
parameter_list|,
name|ObjectInspector
name|outputOI
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
block|{
name|super
argument_list|(
name|wrappedEvaluator
argument_list|,
name|winFrame
argument_list|,
name|partition
argument_list|,
name|parameters
argument_list|,
name|outputOI
argument_list|,
name|nullsLast
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeOperation
operator|=
operator|new
name|TypeOperationLongWritable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SumPartitionHiveDecimalEvaluator
extends|extends
name|SumPartitionEvaluator
argument_list|<
name|HiveDecimalWritable
argument_list|>
block|{
specifier|public
name|SumPartitionHiveDecimalEvaluator
parameter_list|(
name|GenericUDAFEvaluator
name|wrappedEvaluator
parameter_list|,
name|WindowFrameDef
name|winFrame
parameter_list|,
name|PTFPartition
name|partition
parameter_list|,
name|List
argument_list|<
name|PTFExpressionDef
argument_list|>
name|parameters
parameter_list|,
name|ObjectInspector
name|outputOI
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
block|{
name|super
argument_list|(
name|wrappedEvaluator
argument_list|,
name|winFrame
argument_list|,
name|partition
argument_list|,
name|parameters
argument_list|,
name|outputOI
argument_list|,
name|nullsLast
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeOperation
operator|=
operator|new
name|TypeOperationHiveDecimalWritable
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * The partition evalulator for average function    * @param<ResultType>    */
specifier|public
specifier|static
specifier|abstract
class|class
name|AvgPartitionEvaluator
parameter_list|<
name|ResultType
extends|extends
name|Writable
parameter_list|>
extends|extends
name|BasePartitionEvaluator
block|{
specifier|static
class|class
name|WindowAvgAgg
parameter_list|<
name|ResultType
parameter_list|>
extends|extends
name|AbstractAggregationBuffer
block|{
name|Range
name|prevRange
decl_stmt|;
name|ResultType
name|prevSum
decl_stmt|;
name|long
name|prevCount
decl_stmt|;
name|boolean
name|empty
decl_stmt|;
block|}
specifier|protected
name|SumPartitionEvaluator
argument_list|<
name|ResultType
argument_list|>
name|sumEvaluator
decl_stmt|;
specifier|protected
name|TypeOperationBase
argument_list|<
name|ResultType
argument_list|>
name|typeOperation
decl_stmt|;
name|WindowAvgAgg
argument_list|<
name|ResultType
argument_list|>
name|avgAgg
init|=
operator|new
name|WindowAvgAgg
argument_list|<
name|ResultType
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|AvgPartitionEvaluator
parameter_list|(
name|GenericUDAFEvaluator
name|wrappedEvaluator
parameter_list|,
name|WindowFrameDef
name|winFrame
parameter_list|,
name|PTFPartition
name|partition
parameter_list|,
name|List
argument_list|<
name|PTFExpressionDef
argument_list|>
name|parameters
parameter_list|,
name|ObjectInspector
name|outputOI
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
block|{
name|super
argument_list|(
name|wrappedEvaluator
argument_list|,
name|winFrame
argument_list|,
name|partition
argument_list|,
name|parameters
argument_list|,
name|outputOI
argument_list|,
name|nullsLast
argument_list|)
expr_stmt|;
block|}
comment|/**      * Calculate the partial result sum + count giving a parition range      * @return a 2-element Object array of [count long, sum ResultType]      */
specifier|private
name|Object
index|[]
name|calcPartialResult
parameter_list|(
name|PTFPartitionIterator
argument_list|<
name|Object
argument_list|>
name|pItr
parameter_list|,
name|LeadLagInfo
name|leadLagInfo
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// To handle the case like SUM(LAG(f)) over(), aggregation function includes
comment|// LAG/LEAD call
name|PTFOperator
operator|.
name|connectLeadLagFunctionsToPartition
argument_list|(
name|leadLagInfo
argument_list|,
name|pItr
argument_list|)
expr_stmt|;
name|AggregationBuffer
name|aggBuffer
init|=
name|wrappedEvaluator
operator|.
name|getNewAggregationBuffer
argument_list|()
decl_stmt|;
name|Object
index|[]
name|argValues
init|=
operator|new
name|Object
index|[
name|parameters
operator|==
literal|null
condition|?
literal|0
else|:
name|parameters
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
while|while
condition|(
name|pItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|row
init|=
name|pItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PTFExpressionDef
name|param
range|:
name|parameters
control|)
block|{
name|argValues
index|[
name|i
operator|++
index|]
operator|=
name|param
operator|.
name|getExprEvaluator
argument_list|()
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
name|wrappedEvaluator
operator|.
name|aggregate
argument_list|(
name|aggBuffer
argument_list|,
name|argValues
argument_list|)
expr_stmt|;
block|}
comment|// The object [count LongWritable, sum ResultType] is reused during evaluating
name|Object
index|[]
name|partial
init|=
operator|(
name|Object
index|[]
operator|)
name|wrappedEvaluator
operator|.
name|terminatePartial
argument_list|(
name|aggBuffer
argument_list|)
decl_stmt|;
return|return
operator|new
name|Object
index|[]
block|{
operator|(
operator|(
name|LongWritable
operator|)
name|partial
index|[
literal|0
index|]
operator|)
operator|.
name|get
argument_list|()
block|,
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|partial
index|[
literal|1
index|]
argument_list|,
name|outputOI
argument_list|)
block|}
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Override
specifier|public
name|Object
name|iterate
parameter_list|(
name|int
name|currentRow
parameter_list|,
name|LeadLagInfo
name|leadLagInfo
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// // Currently avg(distinct) not supported in PartitionEvaluator
if|if
condition|(
operator|(
operator|(
name|AbstractGenericUDAFAverageEvaluator
operator|)
name|wrappedEvaluator
operator|)
operator|.
name|isWindowingDistinct
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|iterate
argument_list|(
name|currentRow
argument_list|,
name|leadLagInfo
argument_list|)
return|;
block|}
name|Range
name|currentRange
init|=
name|getRange
argument_list|(
name|winFrame
argument_list|,
name|currentRow
argument_list|,
name|partition
argument_list|,
name|nullsLast
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentRow
operator|==
literal|0
operator|||
comment|// Reset for the new partition
name|avgAgg
operator|.
name|prevRange
operator|==
literal|null
operator|||
name|currentRange
operator|.
name|getSize
argument_list|()
operator|<=
name|currentRange
operator|.
name|getDiff
argument_list|(
name|avgAgg
operator|.
name|prevRange
argument_list|)
condition|)
block|{
name|Object
index|[]
name|partial
init|=
operator|(
name|Object
index|[]
operator|)
name|calcPartialResult
argument_list|(
name|currentRange
operator|.
name|iterator
argument_list|()
argument_list|,
name|leadLagInfo
argument_list|)
decl_stmt|;
name|avgAgg
operator|.
name|prevRange
operator|=
name|currentRange
expr_stmt|;
name|avgAgg
operator|.
name|empty
operator|=
literal|false
expr_stmt|;
name|avgAgg
operator|.
name|prevSum
operator|=
operator|(
name|ResultType
operator|)
name|partial
index|[
literal|1
index|]
expr_stmt|;
name|avgAgg
operator|.
name|prevCount
operator|=
operator|(
name|long
operator|)
name|partial
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
comment|// Given the previous range and the current range, calculate the new sum
comment|// from the previous sum and the difference to save the computation.
name|Range
name|r1
init|=
operator|new
name|Range
argument_list|(
name|avgAgg
operator|.
name|prevRange
operator|.
name|start
argument_list|,
name|currentRange
operator|.
name|start
argument_list|,
name|partition
argument_list|)
decl_stmt|;
name|Range
name|r2
init|=
operator|new
name|Range
argument_list|(
name|avgAgg
operator|.
name|prevRange
operator|.
name|end
argument_list|,
name|currentRange
operator|.
name|end
argument_list|,
name|partition
argument_list|)
decl_stmt|;
name|Object
index|[]
name|partial1
init|=
operator|(
name|Object
index|[]
operator|)
name|calcPartialResult
argument_list|(
name|r1
operator|.
name|iterator
argument_list|()
argument_list|,
name|leadLagInfo
argument_list|)
decl_stmt|;
name|Object
index|[]
name|partial2
init|=
operator|(
name|Object
index|[]
operator|)
name|calcPartialResult
argument_list|(
name|r2
operator|.
name|iterator
argument_list|()
argument_list|,
name|leadLagInfo
argument_list|)
decl_stmt|;
name|ResultType
name|sum
init|=
name|typeOperation
operator|.
name|add
argument_list|(
name|typeOperation
operator|.
name|minus
argument_list|(
name|avgAgg
operator|.
name|prevSum
argument_list|,
operator|(
name|ResultType
operator|)
name|partial1
index|[
literal|1
index|]
argument_list|)
argument_list|,
operator|(
name|ResultType
operator|)
name|partial2
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|long
name|count
init|=
name|avgAgg
operator|.
name|prevCount
operator|-
operator|(
name|long
operator|)
name|partial1
index|[
literal|0
index|]
operator|+
operator|(
name|long
operator|)
name|partial2
index|[
literal|0
index|]
decl_stmt|;
name|avgAgg
operator|.
name|prevRange
operator|=
name|currentRange
expr_stmt|;
name|avgAgg
operator|.
name|prevSum
operator|=
name|sum
expr_stmt|;
name|avgAgg
operator|.
name|prevCount
operator|=
name|count
expr_stmt|;
block|}
return|return
name|typeOperation
operator|.
name|div
argument_list|(
name|avgAgg
operator|.
name|prevSum
argument_list|,
name|avgAgg
operator|.
name|prevCount
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|AvgPartitionDoubleEvaluator
extends|extends
name|AvgPartitionEvaluator
argument_list|<
name|DoubleWritable
argument_list|>
block|{
specifier|public
name|AvgPartitionDoubleEvaluator
parameter_list|(
name|GenericUDAFEvaluator
name|wrappedEvaluator
parameter_list|,
name|WindowFrameDef
name|winFrame
parameter_list|,
name|PTFPartition
name|partition
parameter_list|,
name|List
argument_list|<
name|PTFExpressionDef
argument_list|>
name|parameters
parameter_list|,
name|ObjectInspector
name|inputOI
parameter_list|,
name|ObjectInspector
name|outputOI
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
argument_list|(
name|wrappedEvaluator
argument_list|,
name|winFrame
argument_list|,
name|partition
argument_list|,
name|parameters
argument_list|,
name|outputOI
argument_list|,
name|nullsLast
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeOperation
operator|=
operator|new
name|TypeOperationDoubleWritable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|AvgPartitionHiveDecimalEvaluator
extends|extends
name|AvgPartitionEvaluator
argument_list|<
name|HiveDecimalWritable
argument_list|>
block|{
specifier|public
name|AvgPartitionHiveDecimalEvaluator
parameter_list|(
name|GenericUDAFEvaluator
name|wrappedEvaluator
parameter_list|,
name|WindowFrameDef
name|winFrame
parameter_list|,
name|PTFPartition
name|partition
parameter_list|,
name|List
argument_list|<
name|PTFExpressionDef
argument_list|>
name|parameters
parameter_list|,
name|ObjectInspector
name|inputOI
parameter_list|,
name|ObjectInspector
name|outputOI
parameter_list|,
name|boolean
name|nullsLast
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
argument_list|(
name|wrappedEvaluator
argument_list|,
name|winFrame
argument_list|,
name|partition
argument_list|,
name|parameters
argument_list|,
name|outputOI
argument_list|,
name|nullsLast
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeOperation
operator|=
operator|new
name|TypeOperationHiveDecimalWritable
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

