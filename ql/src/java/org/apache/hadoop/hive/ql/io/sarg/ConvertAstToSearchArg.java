begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBetween
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFIn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNotEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Kryo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|io
operator|.
name|Input
import|;
end_import

begin_class
specifier|public
class|class
name|ConvertAstToSearchArg
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConvertAstToSearchArg
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SearchArgument
operator|.
name|Builder
name|builder
init|=
name|SearchArgumentFactory
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
comment|/**    * Builds the expression and leaf list from the original predicate.    * @param expression the expression to translate.    */
name|ConvertAstToSearchArg
parameter_list|(
name|ExprNodeGenericFuncDesc
name|expression
parameter_list|)
block|{
name|parse
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
comment|/**    * Build the search argument from the expression.    * @return the search argument    */
specifier|public
name|SearchArgument
name|buildSearchArgument
parameter_list|()
block|{
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Get the type of the given expression node.    * @param expr the expression to get the type of    * @return int, string, or float or null if we don't know the type    */
specifier|private
specifier|static
name|PredicateLeaf
operator|.
name|Type
name|getType
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
name|TypeInfo
name|type
init|=
name|expr
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getCategory
argument_list|()
operator|==
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|type
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
return|;
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
case|case
name|STRING
case|:
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|STRING
return|;
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|FLOAT
return|;
case|case
name|DATE
case|:
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|DATE
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|TIMESTAMP
return|;
case|case
name|DECIMAL
case|:
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|DECIMAL
return|;
case|case
name|BOOLEAN
case|:
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|BOOLEAN
return|;
default|default:
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get the column name referenced in the expression. It must be at the top    * level of this expression and there must be exactly one column.    * @param expr the expression to look in    * @param variable the slot the variable is expected in    * @return the column name or null if there isn't exactly one column    */
specifier|private
specifier|static
name|String
name|getColumnName
parameter_list|(
name|ExprNodeGenericFuncDesc
name|expr
parameter_list|,
name|int
name|variable
parameter_list|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|expr
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|variable
operator|<
literal|0
operator|||
name|variable
operator|>=
name|children
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ExprNodeDesc
name|child
init|=
name|children
operator|.
name|get
argument_list|(
name|variable
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
return|return
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|child
operator|)
operator|.
name|getColumn
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Object
name|boxLiteral
parameter_list|(
name|ExprNodeConstantDesc
name|constantDesc
parameter_list|,
name|PredicateLeaf
operator|.
name|Type
name|type
parameter_list|)
block|{
name|Object
name|lit
init|=
name|constantDesc
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|lit
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|LONG
case|:
return|return
operator|(
operator|(
name|Number
operator|)
name|lit
operator|)
operator|.
name|longValue
argument_list|()
return|;
case|case
name|STRING
case|:
if|if
condition|(
name|lit
operator|instanceof
name|HiveChar
condition|)
block|{
return|return
operator|(
operator|(
name|HiveChar
operator|)
name|lit
operator|)
operator|.
name|getPaddedValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|lit
operator|instanceof
name|String
condition|)
block|{
return|return
name|lit
return|;
block|}
else|else
block|{
return|return
name|lit
operator|.
name|toString
argument_list|()
return|;
block|}
case|case
name|FLOAT
case|:
if|if
condition|(
name|lit
operator|instanceof
name|Float
condition|)
block|{
comment|// converting a float directly to a double causes annoying conversion
comment|// problems
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|lit
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|lit
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
case|case
name|TIMESTAMP
case|:
return|return
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|lit
operator|.
name|toString
argument_list|()
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
name|Date
operator|.
name|valueOf
argument_list|(
name|lit
operator|.
name|toString
argument_list|()
argument_list|)
return|;
case|case
name|DECIMAL
case|:
name|LOG
operator|.
name|warn
argument_list|(
literal|"boxing "
operator|+
name|lit
argument_list|)
expr_stmt|;
return|return
operator|new
name|HiveDecimalWritable
argument_list|(
name|lit
operator|.
name|toString
argument_list|()
argument_list|)
return|;
case|case
name|BOOLEAN
case|:
return|return
name|lit
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown literal "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
comment|/**    * Find the child that is the literal.    * @param expr the parent node to check    * @param type the type of the expression    * @return the literal boxed if found or null    */
specifier|private
specifier|static
name|Object
name|findLiteral
parameter_list|(
name|ExprNodeGenericFuncDesc
name|expr
parameter_list|,
name|PredicateLeaf
operator|.
name|Type
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|expr
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|result
operator|=
name|boxLiteral
argument_list|(
operator|(
name|ExprNodeConstantDesc
operator|)
name|child
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Return the boxed literal at the given position    * @param expr the parent node    * @param type the type of the expression    * @param position the child position to check    * @return the boxed literal if found otherwise null    */
specifier|private
specifier|static
name|Object
name|getLiteral
parameter_list|(
name|ExprNodeGenericFuncDesc
name|expr
parameter_list|,
name|PredicateLeaf
operator|.
name|Type
name|type
parameter_list|,
name|int
name|position
parameter_list|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|expr
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|Object
name|child
init|=
name|children
operator|.
name|get
argument_list|(
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
return|return
name|boxLiteral
argument_list|(
operator|(
name|ExprNodeConstantDesc
operator|)
name|child
argument_list|,
name|type
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Object
index|[]
name|getLiteralList
parameter_list|(
name|ExprNodeGenericFuncDesc
name|expr
parameter_list|,
name|PredicateLeaf
operator|.
name|Type
name|type
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|expr
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|Object
index|[]
name|result
init|=
operator|new
name|Object
index|[
name|children
operator|.
name|size
argument_list|()
operator|-
name|start
index|]
decl_stmt|;
comment|// ignore the first child, since it is the variable
name|int
name|posn
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|child
range|:
name|children
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|children
operator|.
name|size
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
name|result
index|[
name|posn
operator|++
index|]
operator|=
name|boxLiteral
argument_list|(
operator|(
name|ExprNodeConstantDesc
operator|)
name|child
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if we get some non-literals, we need to punt
return|return
literal|null
return|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|createLeaf
parameter_list|(
name|PredicateLeaf
operator|.
name|Operator
name|operator
parameter_list|,
name|ExprNodeGenericFuncDesc
name|expression
parameter_list|,
name|int
name|variable
parameter_list|)
block|{
name|String
name|columnName
init|=
name|getColumnName
argument_list|(
name|expression
argument_list|,
name|variable
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnName
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|literal
argument_list|(
name|SearchArgument
operator|.
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
expr_stmt|;
return|return;
block|}
name|PredicateLeaf
operator|.
name|Type
name|type
init|=
name|getType
argument_list|(
name|expression
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
name|variable
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|literal
argument_list|(
name|SearchArgument
operator|.
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// if the variable was on the right, we need to swap things around
name|boolean
name|needSwap
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|variable
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|operator
operator|==
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN
condition|)
block|{
name|needSwap
operator|=
literal|true
expr_stmt|;
name|operator
operator|=
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN_EQUALS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN_EQUALS
condition|)
block|{
name|needSwap
operator|=
literal|true
expr_stmt|;
name|operator
operator|=
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needSwap
condition|)
block|{
name|builder
operator|.
name|startNot
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|IS_NULL
case|:
name|builder
operator|.
name|isNull
argument_list|(
name|columnName
argument_list|,
name|type
argument_list|)
expr_stmt|;
break|break;
case|case
name|EQUALS
case|:
name|builder
operator|.
name|equals
argument_list|(
name|columnName
argument_list|,
name|type
argument_list|,
name|findLiteral
argument_list|(
name|expression
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|NULL_SAFE_EQUALS
case|:
name|builder
operator|.
name|nullSafeEquals
argument_list|(
name|columnName
argument_list|,
name|type
argument_list|,
name|findLiteral
argument_list|(
name|expression
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|LESS_THAN
case|:
name|builder
operator|.
name|lessThan
argument_list|(
name|columnName
argument_list|,
name|type
argument_list|,
name|findLiteral
argument_list|(
name|expression
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|LESS_THAN_EQUALS
case|:
name|builder
operator|.
name|lessThanEquals
argument_list|(
name|columnName
argument_list|,
name|type
argument_list|,
name|findLiteral
argument_list|(
name|expression
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|IN
case|:
name|builder
operator|.
name|in
argument_list|(
name|columnName
argument_list|,
name|type
argument_list|,
name|getLiteralList
argument_list|(
name|expression
argument_list|,
name|type
argument_list|,
name|variable
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|BETWEEN
case|:
name|builder
operator|.
name|between
argument_list|(
name|columnName
argument_list|,
name|type
argument_list|,
name|getLiteral
argument_list|(
name|expression
argument_list|,
name|type
argument_list|,
name|variable
operator|+
literal|1
argument_list|)
argument_list|,
name|getLiteral
argument_list|(
name|expression
argument_list|,
name|type
argument_list|,
name|variable
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|needSwap
condition|)
block|{
name|builder
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Find the variable in the expression.    * @param expr the expression to look in    * @return the index of the variable or -1 if there is not exactly one    *   variable.    */
specifier|private
name|int
name|findVariable
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
name|int
name|result
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|expr
operator|.
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ExprNodeDesc
name|child
init|=
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
comment|// if we already found a variable, this isn't a sarg
if|if
condition|(
name|result
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|result
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Create a leaf expression when we aren't sure where the variable is    * located.    * @param operator the operator type that was found    * @param expression the expression to check    */
specifier|private
name|void
name|createLeaf
parameter_list|(
name|PredicateLeaf
operator|.
name|Operator
name|operator
parameter_list|,
name|ExprNodeGenericFuncDesc
name|expression
parameter_list|)
block|{
name|createLeaf
argument_list|(
name|operator
argument_list|,
name|expression
argument_list|,
name|findVariable
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addChildren
parameter_list|(
name|ExprNodeGenericFuncDesc
name|node
parameter_list|)
block|{
for|for
control|(
name|ExprNodeDesc
name|child
range|:
name|node
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|parse
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Do the recursive parse of the Hive ExprNodeDesc into our ExpressionTree.    * @param expression the Hive ExprNodeDesc    */
specifier|private
name|void
name|parse
parameter_list|(
name|ExprNodeDesc
name|expression
parameter_list|)
block|{
comment|// Most of the stuff we can handle are generic function descriptions, so
comment|// handle the special cases.
if|if
condition|(
name|expression
operator|.
name|getClass
argument_list|()
operator|!=
name|ExprNodeGenericFuncDesc
operator|.
name|class
condition|)
block|{
comment|// if it is a reference to a boolean column, covert it to a truth test.
if|if
condition|(
name|expression
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|columnDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|expression
decl_stmt|;
if|if
condition|(
name|columnDesc
operator|.
name|getTypeString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|equals
argument_list|(
name|columnDesc
operator|.
name|getColumn
argument_list|()
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|BOOLEAN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// otherwise, we don't know what to do so make it a maybe
name|builder
operator|.
name|literal
argument_list|(
name|SearchArgument
operator|.
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// get the kind of expression
name|ExprNodeGenericFuncDesc
name|expr
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|expression
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|op
init|=
name|expr
operator|.
name|getGenericUDF
argument_list|()
operator|.
name|getClass
argument_list|()
decl_stmt|;
comment|// handle the logical operators
if|if
condition|(
name|op
operator|==
name|GenericUDFOPOr
operator|.
name|class
condition|)
block|{
name|builder
operator|.
name|startOr
argument_list|()
expr_stmt|;
name|addChildren
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|builder
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPAnd
operator|.
name|class
condition|)
block|{
name|builder
operator|.
name|startAnd
argument_list|()
expr_stmt|;
name|addChildren
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|builder
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPNot
operator|.
name|class
condition|)
block|{
name|builder
operator|.
name|startNot
argument_list|()
expr_stmt|;
name|addChildren
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|builder
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPEqual
operator|.
name|class
condition|)
block|{
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|EQUALS
argument_list|,
name|expr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPNotEqual
operator|.
name|class
condition|)
block|{
name|builder
operator|.
name|startNot
argument_list|()
expr_stmt|;
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|EQUALS
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|builder
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPEqualNS
operator|.
name|class
condition|)
block|{
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|NULL_SAFE_EQUALS
argument_list|,
name|expr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPGreaterThan
operator|.
name|class
condition|)
block|{
name|builder
operator|.
name|startNot
argument_list|()
expr_stmt|;
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN_EQUALS
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|builder
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPEqualOrGreaterThan
operator|.
name|class
condition|)
block|{
name|builder
operator|.
name|startNot
argument_list|()
expr_stmt|;
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|builder
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPLessThan
operator|.
name|class
condition|)
block|{
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN
argument_list|,
name|expr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPEqualOrLessThan
operator|.
name|class
condition|)
block|{
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN_EQUALS
argument_list|,
name|expr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFIn
operator|.
name|class
condition|)
block|{
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|IN
argument_list|,
name|expr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFBetween
operator|.
name|class
condition|)
block|{
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|BETWEEN
argument_list|,
name|expr
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPNull
operator|.
name|class
condition|)
block|{
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|IS_NULL
argument_list|,
name|expr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPNotNull
operator|.
name|class
condition|)
block|{
name|builder
operator|.
name|startNot
argument_list|()
expr_stmt|;
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|IS_NULL
argument_list|,
name|expr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|end
argument_list|()
expr_stmt|;
comment|// otherwise, we didn't understand it, so mark it maybe
block|}
else|else
block|{
name|builder
operator|.
name|literal
argument_list|(
name|SearchArgument
operator|.
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|String
name|SARG_PUSHDOWN
init|=
literal|"sarg.pushdown"
decl_stmt|;
specifier|public
specifier|static
name|SearchArgument
name|create
parameter_list|(
name|ExprNodeGenericFuncDesc
name|expression
parameter_list|)
block|{
return|return
operator|new
name|ConvertAstToSearchArg
argument_list|(
name|expression
argument_list|)
operator|.
name|buildSearchArgument
argument_list|()
return|;
block|}
specifier|private
specifier|final
specifier|static
name|ThreadLocal
argument_list|<
name|Kryo
argument_list|>
name|kryo
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Kryo
argument_list|>
argument_list|()
block|{
specifier|protected
name|Kryo
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|Kryo
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|SearchArgument
name|create
parameter_list|(
name|String
name|kryo
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|kryo
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SearchArgument
name|create
parameter_list|(
name|byte
index|[]
name|kryoBytes
parameter_list|)
block|{
return|return
name|kryo
operator|.
name|get
argument_list|()
operator|.
name|readObject
argument_list|(
operator|new
name|Input
argument_list|(
name|kryoBytes
argument_list|)
argument_list|,
name|SearchArgumentImpl
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SearchArgument
name|createFromConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|sargString
decl_stmt|;
if|if
condition|(
operator|(
name|sargString
operator|=
name|conf
operator|.
name|get
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
return|return
name|create
argument_list|(
name|Utilities
operator|.
name|deserializeExpression
argument_list|(
name|sargString
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|sargString
operator|=
name|conf
operator|.
name|get
argument_list|(
name|SARG_PUSHDOWN
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
return|return
name|create
argument_list|(
name|sargString
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|boolean
name|canCreateFromConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|)
operator|!=
literal|null
operator|||
name|conf
operator|.
name|get
argument_list|(
name|SARG_PUSHDOWN
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

