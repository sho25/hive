begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|dump
operator|.
name|events
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|EventHandlerFactory
block|{
specifier|private
name|EventHandlerFactory
parameter_list|()
block|{   }
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|EventHandler
argument_list|>
argument_list|>
name|registeredHandlers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|register
argument_list|(
name|MessageFactory
operator|.
name|ADD_PARTITION_EVENT
argument_list|,
name|AddPartitionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|MessageFactory
operator|.
name|ALTER_PARTITION_EVENT
argument_list|,
name|AlterPartitionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|MessageFactory
operator|.
name|ALTER_TABLE_EVENT
argument_list|,
name|AlterTableHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|MessageFactory
operator|.
name|CREATE_FUNCTION_EVENT
argument_list|,
name|CreateFunctionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|MessageFactory
operator|.
name|CREATE_TABLE_EVENT
argument_list|,
name|CreateTableHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|MessageFactory
operator|.
name|DROP_PARTITION_EVENT
argument_list|,
name|DropPartitionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|MessageFactory
operator|.
name|DROP_TABLE_EVENT
argument_list|,
name|DropTableHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|MessageFactory
operator|.
name|INSERT_EVENT
argument_list|,
name|InsertHandler
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|register
parameter_list|(
name|String
name|event
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|EventHandler
argument_list|>
name|handlerClazz
parameter_list|)
block|{
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|EventHandler
argument_list|>
name|constructor
init|=
name|handlerClazz
operator|.
name|getDeclaredConstructor
argument_list|(
name|NotificationEvent
operator|.
name|class
argument_list|)
decl_stmt|;
assert|assert
name|constructor
operator|!=
literal|null
assert|;
assert|assert
operator|!
name|Modifier
operator|.
name|isPrivate
argument_list|(
name|constructor
operator|.
name|getModifiers
argument_list|()
argument_list|)
assert|;
name|registeredHandlers
operator|.
name|put
argument_list|(
name|event
argument_list|,
name|handlerClazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"handler class: "
operator|+
name|handlerClazz
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|" does not have the a constructor with only parameter of type:"
operator|+
name|NotificationEvent
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|EventHandler
name|handlerFor
parameter_list|(
name|NotificationEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|registeredHandlers
operator|.
name|containsKey
argument_list|(
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|EventHandler
argument_list|>
name|handlerClazz
init|=
name|registeredHandlers
operator|.
name|get
argument_list|(
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|EventHandler
argument_list|>
name|constructor
init|=
name|handlerClazz
operator|.
name|getDeclaredConstructor
argument_list|(
name|NotificationEvent
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|constructor
operator|.
name|newInstance
argument_list|(
name|event
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|IllegalAccessException
decl||
name|InstantiationException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
comment|// this should never happen. however we want to make sure we propagate the exception
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed when creating handler for "
operator|+
name|event
operator|.
name|getEventType
argument_list|()
operator|+
literal|" with the responsible class being "
operator|+
name|handlerClazz
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|DefaultHandler
argument_list|(
name|event
argument_list|)
return|;
block|}
block|}
end_class

end_unit

