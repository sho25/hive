begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardUnionObjectInspector
operator|.
name|StandardUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Reduce Sink Operator sends output to the reduce stage.  **/
end_comment

begin_class
specifier|public
class|class
name|ReduceSinkOperator
extends|extends
name|BaseReduceSinkOperator
argument_list|<
name|ReduceSinkDesc
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|operationPathTags
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// operation path tags
specifier|private
specifier|final
name|byte
index|[]
name|operationPathTagsByte
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
specifier|public
name|void
name|setOperationPathTags
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|operationPathTags
parameter_list|)
block|{
name|this
operator|.
name|operationPathTags
operator|.
name|addAll
argument_list|(
name|operationPathTags
argument_list|)
expr_stmt|;
name|int
name|operationPathTagsInt
init|=
literal|0
decl_stmt|;
name|int
name|tmp
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Integer
name|operationPathTag
range|:
name|operationPathTags
control|)
block|{
name|operationPathTagsInt
operator|+=
name|tmp
operator|<<
name|operationPathTag
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|operationPathTagsByte
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|operationPathTagsInt
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getOperationPathTags
parameter_list|()
block|{
return|return
name|this
operator|.
name|operationPathTags
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processOp
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|ObjectInspector
name|rowInspector
init|=
name|inputObjInspectors
index|[
name|tag
index|]
decl_stmt|;
if|if
condition|(
name|isFirstRow
condition|)
block|{
name|isFirstRow
operator|=
literal|false
expr_stmt|;
name|keyObjectInspector
operator|=
name|initEvaluatorsAndReturnStruct
argument_list|(
name|keyEval
argument_list|,
name|distinctColIndices
argument_list|,
name|conf
operator|.
name|getOutputKeyColumnNames
argument_list|()
argument_list|,
name|numDistributionKeys
argument_list|,
name|rowInspector
argument_list|)
expr_stmt|;
name|valueObjectInspector
operator|=
name|initEvaluatorsAndReturnStruct
argument_list|(
name|valueEval
argument_list|,
name|conf
operator|.
name|getOutputValueColumnNames
argument_list|()
argument_list|,
name|rowInspector
argument_list|)
expr_stmt|;
name|partitionObjectInspectors
operator|=
name|initEvaluators
argument_list|(
name|partitionEval
argument_list|,
name|rowInspector
argument_list|)
expr_stmt|;
name|int
name|numKeys
init|=
name|numDistinctExprs
operator|>
literal|0
condition|?
name|numDistinctExprs
else|:
literal|1
decl_stmt|;
name|int
name|keyLen
init|=
name|numDistinctExprs
operator|>
literal|0
condition|?
name|numDistributionKeys
operator|+
literal|1
else|:
name|numDistributionKeys
decl_stmt|;
name|cachedKeys
operator|=
operator|new
name|Object
index|[
name|numKeys
index|]
index|[
name|keyLen
index|]
expr_stmt|;
name|cachedValues
operator|=
operator|new
name|Object
index|[
name|valueEval
operator|.
name|length
index|]
expr_stmt|;
block|}
comment|// Evaluate the HashCode
name|int
name|keyHashCode
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|partitionEval
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// If no partition cols, just distribute the data uniformly to provide
comment|// better
comment|// load balance. If the requirement is to have a single reducer, we
comment|// should set
comment|// the number of reducers to 1.
comment|// Use a constant seed to make the code deterministic.
if|if
condition|(
name|random
operator|==
literal|null
condition|)
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|12345
argument_list|)
expr_stmt|;
block|}
name|keyHashCode
operator|=
name|random
operator|.
name|nextInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitionEval
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|partitionEval
index|[
name|i
index|]
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|keyHashCode
operator|=
name|keyHashCode
operator|*
literal|31
operator|+
name|ObjectInspectorUtils
operator|.
name|hashCode
argument_list|(
name|o
argument_list|,
name|partitionObjectInspectors
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Evaluate the value
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueEval
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cachedValues
index|[
name|i
index|]
operator|=
name|valueEval
index|[
name|i
index|]
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
comment|// Serialize the value
name|value
operator|=
name|valueSerializer
operator|.
name|serialize
argument_list|(
name|cachedValues
argument_list|,
name|valueObjectInspector
argument_list|)
expr_stmt|;
comment|// Evaluate the keys
name|Object
index|[]
name|distributionKeys
init|=
operator|new
name|Object
index|[
name|numDistributionKeys
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDistributionKeys
condition|;
name|i
operator|++
control|)
block|{
name|distributionKeys
index|[
name|i
index|]
operator|=
name|keyEval
index|[
name|i
index|]
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numDistinctExprs
operator|>
literal|0
condition|)
block|{
comment|// with distinct key(s)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDistinctExprs
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|distributionKeys
argument_list|,
literal|0
argument_list|,
name|cachedKeys
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|numDistributionKeys
argument_list|)
expr_stmt|;
name|Object
index|[]
name|distinctParameters
init|=
operator|new
name|Object
index|[
name|distinctColIndices
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|distinctParameters
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|distinctParameters
index|[
name|j
index|]
operator|=
name|keyEval
index|[
name|distinctColIndices
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
name|j
argument_list|)
index|]
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|cachedKeys
index|[
name|i
index|]
index|[
name|numDistributionKeys
index|]
operator|=
operator|new
name|StandardUnion
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|,
name|distinctParameters
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// no distinct key
name|System
operator|.
name|arraycopy
argument_list|(
name|distributionKeys
argument_list|,
literal|0
argument_list|,
name|cachedKeys
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|,
name|numDistributionKeys
argument_list|)
expr_stmt|;
block|}
comment|// Serialize the keys and append the tag
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cachedKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keyIsText
condition|)
block|{
name|Text
name|key
init|=
operator|(
name|Text
operator|)
name|keySerializer
operator|.
name|serialize
argument_list|(
name|cachedKeys
index|[
name|i
index|]
argument_list|,
name|keyObjectInspector
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|==
operator|-
literal|1
condition|)
block|{
name|keyWritable
operator|.
name|set
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|keyLength
init|=
name|key
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|getConf
argument_list|()
operator|.
name|getNeedsOperationPathTagging
argument_list|()
condition|)
block|{
name|keyWritable
operator|.
name|setSize
argument_list|(
name|keyLength
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyWritable
operator|.
name|setSize
argument_list|(
name|keyLength
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|keyWritable
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|,
name|keyLength
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|getConf
argument_list|()
operator|.
name|getNeedsOperationPathTagging
argument_list|()
condition|)
block|{
name|keyWritable
operator|.
name|get
argument_list|()
index|[
name|keyLength
index|]
operator|=
name|tagByte
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|keyWritable
operator|.
name|get
argument_list|()
index|[
name|keyLength
index|]
operator|=
name|operationPathTagsByte
index|[
literal|0
index|]
expr_stmt|;
name|keyWritable
operator|.
name|get
argument_list|()
index|[
name|keyLength
operator|+
literal|1
index|]
operator|=
name|tagByte
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Must be BytesWritable
name|BytesWritable
name|key
init|=
operator|(
name|BytesWritable
operator|)
name|keySerializer
operator|.
name|serialize
argument_list|(
name|cachedKeys
index|[
name|i
index|]
argument_list|,
name|keyObjectInspector
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|==
operator|-
literal|1
condition|)
block|{
name|keyWritable
operator|.
name|set
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|keyLength
init|=
name|key
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|getConf
argument_list|()
operator|.
name|getNeedsOperationPathTagging
argument_list|()
condition|)
block|{
name|keyWritable
operator|.
name|setSize
argument_list|(
name|keyLength
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyWritable
operator|.
name|setSize
argument_list|(
name|keyLength
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|keyWritable
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|,
name|keyLength
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|getConf
argument_list|()
operator|.
name|getNeedsOperationPathTagging
argument_list|()
condition|)
block|{
name|keyWritable
operator|.
name|get
argument_list|()
index|[
name|keyLength
index|]
operator|=
name|tagByte
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|keyWritable
operator|.
name|get
argument_list|()
index|[
name|keyLength
index|]
operator|=
name|operationPathTagsByte
index|[
literal|0
index|]
expr_stmt|;
name|keyWritable
operator|.
name|get
argument_list|()
index|[
name|keyLength
operator|+
literal|1
index|]
operator|=
name|tagByte
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
block|}
name|keyWritable
operator|.
name|setHashCode
argument_list|(
name|keyHashCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|collect
argument_list|(
name|keyWritable
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// Since this is a terminal operator, update counters explicitly -
comment|// forward is not called
if|if
condition|(
name|counterNameToEnum
operator|!=
literal|null
condition|)
block|{
operator|++
name|outputRows
expr_stmt|;
if|if
condition|(
name|outputRows
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|incrCounter
argument_list|(
name|numOutputRowsCntr
argument_list|,
name|outputRows
argument_list|)
expr_stmt|;
name|outputRows
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return the name of the operator    */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getOperatorName
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
literal|"RS"
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|REDUCESINK
return|;
block|}
block|}
end_class

end_unit

