begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|keyseries
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|SerializeWrite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|Murmur3
import|;
end_import

begin_comment
comment|/**  * Implementation of base serialization interface.  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|VectorKeySeriesSerializedImpl
parameter_list|<
name|T
extends|extends
name|SerializeWrite
parameter_list|>
extends|extends
name|VectorKeySeriesSingleImpl
implements|implements
name|VectorKeySeriesSerialized
block|{
specifier|protected
name|T
name|serializeWrite
decl_stmt|;
specifier|protected
name|int
name|bufferOffset
decl_stmt|;
comment|// The serialized (non-NULL) series keys.  These 3 members represent the value.
specifier|public
name|int
name|serializedStart
decl_stmt|;
specifier|public
name|int
name|serializedLength
decl_stmt|;
specifier|public
name|byte
index|[]
name|serializedBytes
decl_stmt|;
specifier|protected
specifier|final
name|Output
name|output
decl_stmt|;
specifier|protected
specifier|final
name|int
index|[]
name|serializedKeyLengths
decl_stmt|;
specifier|public
name|VectorKeySeriesSerializedImpl
parameter_list|(
name|T
name|serializeWrite
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|serializeWrite
operator|=
name|serializeWrite
expr_stmt|;
name|output
operator|=
operator|new
name|Output
argument_list|()
expr_stmt|;
name|serializedKeyLengths
operator|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
block|}
specifier|public
name|boolean
name|validate
parameter_list|()
block|{
name|super
operator|.
name|validate
argument_list|()
expr_stmt|;
name|int
name|nullCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|seriesCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|seriesIsAllNull
index|[
name|i
index|]
condition|)
block|{
name|nullCount
operator|++
expr_stmt|;
block|}
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|nullCount
operator|+
name|nonNullKeyCount
operator|==
name|seriesCount
argument_list|)
expr_stmt|;
name|int
name|lengthSum
init|=
literal|0
decl_stmt|;
name|int
name|keyLength
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nonNullKeyCount
condition|;
name|i
operator|++
control|)
block|{
name|keyLength
operator|=
name|serializedKeyLengths
index|[
name|i
index|]
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|keyLength
operator|>
literal|0
argument_list|)
expr_stmt|;
name|lengthSum
operator|+=
name|keyLength
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|lengthSum
operator|<=
name|output
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getSerializedBytes
parameter_list|()
block|{
return|return
name|serializedBytes
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSerializedStart
parameter_list|()
block|{
return|return
name|serializedStart
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSerializedLength
parameter_list|()
block|{
return|return
name|serializedLength
return|;
block|}
comment|/**    * Batch compute the hash codes for all the serialized keys.    *    * NOTE: MAJOR MAJOR ASSUMPTION:    *     We use Murmur3.hash32(seed=0) across the board for the ReduceSink UNIFORM distribution.    *     Previous use of HashCodeUtil is deprecated.    */
specifier|protected
name|void
name|computeSerializedHashCodes
parameter_list|()
block|{
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|keyLength
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|output
operator|.
name|getData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nonNullKeyCount
condition|;
name|i
operator|++
control|)
block|{
name|keyLength
operator|=
name|serializedKeyLengths
index|[
name|i
index|]
expr_stmt|;
name|hashCodes
index|[
name|i
index|]
operator|=
name|Murmur3
operator|.
name|hash32
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|keyLength
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|keyLength
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|positionToFirst
parameter_list|()
block|{
comment|// Reset this before calling positionToFirst.
name|bufferOffset
operator|=
literal|0
expr_stmt|;
name|super
operator|.
name|positionToFirst
argument_list|()
expr_stmt|;
comment|// This is constant for whole series.
name|serializedBytes
operator|=
name|output
operator|.
name|getData
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNextNonNullKey
parameter_list|(
name|int
name|nonNullKeyPosition
parameter_list|)
block|{
name|serializedStart
operator|=
name|bufferOffset
expr_stmt|;
name|serializedLength
operator|=
name|serializedKeyLengths
index|[
name|nonNullKeyPosition
index|]
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|serializedStart
operator|+
name|serializedLength
operator|<=
name|output
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|bufferOffset
operator|+=
name|serializedLength
expr_stmt|;
block|}
block|}
end_class

end_unit

