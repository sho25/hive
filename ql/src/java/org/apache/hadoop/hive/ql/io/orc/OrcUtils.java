begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObjectInspector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|OrcUtils
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OrcUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Returns selected columns as a boolean array with true value set for specified column names.    * The result will contain number of elements equal to flattened number of columns.    * For example:    * selectedColumns - a,b,c    * allColumns - a,b,c,d    * If column c is a complex type, say list<string> and other types are primitives then result will    * be [false, true, true, true, true, true, false]    * Index 0 is the root element of the struct which is set to false by default, index 1,2    * corresponds to columns a and b. Index 3,4 correspond to column c which is list<string> and    * index 5 correspond to column d. After flattening list<string> gets 2 columns.    *    * @param selectedColumns - comma separated list of selected column names    * @param allColumns      - comma separated list of all column names    * @param inspector       - object inspector    * @return - boolean array with true value set for the specified column names    */
specifier|public
specifier|static
name|boolean
index|[]
name|includeColumns
parameter_list|(
name|String
name|selectedColumns
parameter_list|,
name|String
name|allColumns
parameter_list|,
name|ObjectInspector
name|inspector
parameter_list|)
block|{
name|int
name|numFlattenedCols
init|=
name|getFlattenedColumnsCount
argument_list|(
name|inspector
argument_list|)
decl_stmt|;
name|boolean
index|[]
name|results
init|=
operator|new
name|boolean
index|[
name|numFlattenedCols
index|]
decl_stmt|;
if|if
condition|(
name|selectedColumns
operator|!=
literal|null
operator|&&
operator|!
name|selectedColumns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|includeColumnsImpl
argument_list|(
name|results
argument_list|,
name|selectedColumns
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|allColumns
argument_list|,
name|inspector
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
specifier|private
specifier|static
name|void
name|includeColumnsImpl
parameter_list|(
name|boolean
index|[]
name|includeColumns
parameter_list|,
name|String
name|selectedColumns
parameter_list|,
name|String
name|allColumns
parameter_list|,
name|ObjectInspector
name|inspector
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|columnSpanMap
init|=
name|getColumnSpan
argument_list|(
name|allColumns
argument_list|,
name|inspector
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"columnSpanMap: "
operator|+
name|columnSpanMap
argument_list|)
expr_stmt|;
name|String
index|[]
name|selCols
init|=
name|selectedColumns
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|sc
range|:
name|selCols
control|)
block|{
if|if
condition|(
name|columnSpanMap
operator|.
name|containsKey
argument_list|(
name|sc
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|colSpan
init|=
name|columnSpanMap
operator|.
name|get
argument_list|(
name|sc
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|colSpan
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|colSpan
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<=
name|end
condition|;
name|i
operator|++
control|)
block|{
name|includeColumns
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"includeColumns: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|includeColumns
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|getColumnSpan
parameter_list|(
name|String
name|allColumns
parameter_list|,
name|ObjectInspector
name|inspector
parameter_list|)
block|{
comment|// map that contains the column span for each column. Column span is the number of columns
comment|// required after flattening. For a given object inspector this map contains the start column
comment|// id and end column id (both inclusive) after flattening.
comment|// EXAMPLE:
comment|// schema: struct<a:int, b:float, c:map<string,int>>
comment|// column span map for the above struct will be
comment|// a => [1,1], b => [2,2], c => [3,5]
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|columnSpanMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|allColumns
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|columns
init|=
name|allColumns
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|int
name|startIdx
init|=
literal|0
decl_stmt|;
name|int
name|endIdx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|inspector
operator|instanceof
name|StructObjectInspector
condition|)
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|inspector
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StructField
name|sf
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// we get the type (category) from object inspector but column name from the argument.
comment|// The reason for this is hive (FileSinkOperator) does not pass the actual column names,
comment|// instead it passes the internal column names (_col1,_col2).
name|ObjectInspector
name|sfOI
init|=
name|sf
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|String
name|colName
init|=
name|columns
index|[
name|i
index|]
decl_stmt|;
name|startIdx
operator|=
name|endIdx
operator|+
literal|1
expr_stmt|;
switch|switch
condition|(
name|sfOI
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
name|endIdx
operator|+=
literal|1
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
name|endIdx
operator|+=
literal|1
expr_stmt|;
name|StructObjectInspector
name|structInsp
init|=
operator|(
name|StructObjectInspector
operator|)
name|sfOI
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|structFields
init|=
name|structInsp
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|structFields
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|endIdx
operator|+=
name|getFlattenedColumnsCount
argument_list|(
name|structFields
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MAP
case|:
name|endIdx
operator|+=
literal|1
expr_stmt|;
name|MapObjectInspector
name|mapInsp
init|=
operator|(
name|MapObjectInspector
operator|)
name|sfOI
decl_stmt|;
name|endIdx
operator|+=
name|getFlattenedColumnsCount
argument_list|(
name|mapInsp
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|endIdx
operator|+=
name|getFlattenedColumnsCount
argument_list|(
name|mapInsp
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LIST
case|:
name|endIdx
operator|+=
literal|1
expr_stmt|;
name|ListObjectInspector
name|listInsp
init|=
operator|(
name|ListObjectInspector
operator|)
name|sfOI
decl_stmt|;
name|endIdx
operator|+=
name|getFlattenedColumnsCount
argument_list|(
name|listInsp
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNION
case|:
name|endIdx
operator|+=
literal|1
expr_stmt|;
name|UnionObjectInspector
name|unionInsp
init|=
operator|(
name|UnionObjectInspector
operator|)
name|sfOI
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|choices
init|=
name|unionInsp
operator|.
name|getObjectInspectors
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|choices
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|endIdx
operator|+=
name|getFlattenedColumnsCount
argument_list|(
name|choices
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad category: "
operator|+
name|inspector
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
name|columnSpanMap
operator|.
name|put
argument_list|(
name|colName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|startIdx
argument_list|,
name|endIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|columnSpanMap
return|;
block|}
comment|/**    * Returns the number of columns after flatting complex types.    *    * @param inspector - object inspector    * @return    */
specifier|public
specifier|static
name|int
name|getFlattenedColumnsCount
parameter_list|(
name|ObjectInspector
name|inspector
parameter_list|)
block|{
name|int
name|numWriters
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|inspector
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
name|numWriters
operator|+=
literal|1
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
name|numWriters
operator|+=
literal|1
expr_stmt|;
name|StructObjectInspector
name|structInsp
init|=
operator|(
name|StructObjectInspector
operator|)
name|inspector
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|structInsp
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|numWriters
operator|+=
name|getFlattenedColumnsCount
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MAP
case|:
name|numWriters
operator|+=
literal|1
expr_stmt|;
name|MapObjectInspector
name|mapInsp
init|=
operator|(
name|MapObjectInspector
operator|)
name|inspector
decl_stmt|;
name|numWriters
operator|+=
name|getFlattenedColumnsCount
argument_list|(
name|mapInsp
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|numWriters
operator|+=
name|getFlattenedColumnsCount
argument_list|(
name|mapInsp
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LIST
case|:
name|numWriters
operator|+=
literal|1
expr_stmt|;
name|ListObjectInspector
name|listInsp
init|=
operator|(
name|ListObjectInspector
operator|)
name|inspector
decl_stmt|;
name|numWriters
operator|+=
name|getFlattenedColumnsCount
argument_list|(
name|listInsp
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNION
case|:
name|numWriters
operator|+=
literal|1
expr_stmt|;
name|UnionObjectInspector
name|unionInsp
init|=
operator|(
name|UnionObjectInspector
operator|)
name|inspector
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|choices
init|=
name|unionInsp
operator|.
name|getObjectInspectors
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|choices
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|numWriters
operator|+=
name|getFlattenedColumnsCount
argument_list|(
name|choices
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad category: "
operator|+
name|inspector
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|numWriters
return|;
block|}
block|}
end_class

end_unit

