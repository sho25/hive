begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|OrcUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OrcUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Returns selected columns as a boolean array with true value set for specified column names.    * The result will contain number of elements equal to flattened number of columns.    * For example:    * selectedColumns - a,b,c    * allColumns - a,b,c,d    * If column c is a complex type, say list<string> and other types are primitives then result will    * be [false, true, true, true, true, true, false]    * Index 0 is the root element of the struct which is set to false by default, index 1,2    * corresponds to columns a and b. Index 3,4 correspond to column c which is list<string> and    * index 5 correspond to column d. After flattening list<string> gets 2 columns.    *    * @param selectedColumns - comma separated list of selected column names    * @param schema       - object schema    * @return - boolean array with true value set for the specified column names    */
specifier|public
specifier|static
name|boolean
index|[]
name|includeColumns
parameter_list|(
name|String
name|selectedColumns
parameter_list|,
name|TypeDescription
name|schema
parameter_list|)
block|{
name|int
name|numFlattenedCols
init|=
name|schema
operator|.
name|getMaximumId
argument_list|()
decl_stmt|;
name|boolean
index|[]
name|results
init|=
operator|new
name|boolean
index|[
name|numFlattenedCols
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|selectedColumns
argument_list|)
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|results
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
if|if
condition|(
name|selectedColumns
operator|!=
literal|null
operator|&&
name|schema
operator|.
name|getCategory
argument_list|()
operator|==
name|TypeDescription
operator|.
name|Category
operator|.
name|STRUCT
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|schema
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeDescription
argument_list|>
name|fields
init|=
name|schema
operator|.
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|column
range|:
name|selectedColumns
operator|.
name|split
argument_list|(
operator|(
literal|","
operator|)
argument_list|)
control|)
block|{
name|TypeDescription
name|col
init|=
name|findColumn
argument_list|(
name|column
argument_list|,
name|fieldNames
argument_list|,
name|fields
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|col
operator|.
name|getId
argument_list|()
init|;
name|i
operator|<=
name|col
operator|.
name|getMaximumId
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|results
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|results
return|;
block|}
specifier|private
specifier|static
name|TypeDescription
name|findColumn
parameter_list|(
name|String
name|columnName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|,
name|List
argument_list|<
name|TypeDescription
argument_list|>
name|fields
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
if|if
condition|(
name|fieldName
operator|.
name|equalsIgnoreCase
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
return|return
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
else|else
block|{
name|i
operator|+=
literal|1
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

