begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_comment
comment|/**  * Vectorized version of GenericUDFDatetimeLegacyHybridCalendar (datetime_legacy_hybrid_calendar).  * Converts a date/timestamp to legacy hybrid Julian-Gregorian calendar assuming that its internal  * days/milliseconds since epoch is calculated using the proleptic Gregorian calendar.  * Extends {@link FuncTimestampToTimestamp}  */
end_comment

begin_class
specifier|public
class|class
name|VectorUDFDatetimeLegacyHybridCalendarTimestamp
extends|extends
name|FuncTimestampToTimestamp
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|// SimpleDateFormat doesn't serialize well; it's also not thread-safe
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|SimpleDateFormat
argument_list|>
name|SIMPLE_DATE_FORMAT_THREAD_LOCAL
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
parameter_list|()
lambda|->
block|{
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
name|formatter
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setLenient
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|formatter
return|;
block|}
argument_list|)
decl_stmt|;
specifier|public
name|VectorUDFDatetimeLegacyHybridCalendarTimestamp
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|VectorUDFDatetimeLegacyHybridCalendarTimestamp
parameter_list|(
name|int
name|inputColumn
parameter_list|,
name|int
name|outputColumnNum
parameter_list|)
block|{
name|super
argument_list|(
name|inputColumn
argument_list|,
name|outputColumnNum
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|func
parameter_list|(
name|TimestampColumnVector
name|outputColVector
parameter_list|,
name|TimestampColumnVector
name|inputColVector
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|String
name|adjustedTimestampString
init|=
name|SIMPLE_DATE_FORMAT_THREAD_LOCAL
operator|.
name|get
argument_list|()
operator|.
name|format
argument_list|(
operator|new
name|java
operator|.
name|sql
operator|.
name|Timestamp
argument_list|(
name|inputColVector
operator|.
name|time
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|Timestamp
name|adjustedTimestamp
init|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|adjustedTimestampString
argument_list|)
decl_stmt|;
name|outputColVector
operator|.
name|time
index|[
name|i
index|]
operator|=
name|adjustedTimestamp
operator|.
name|toEpochMilli
argument_list|()
expr_stmt|;
comment|// Nanos don't change
name|outputColVector
operator|.
name|nanos
index|[
name|i
index|]
operator|=
name|inputColVector
operator|.
name|nanos
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
end_class

end_unit

