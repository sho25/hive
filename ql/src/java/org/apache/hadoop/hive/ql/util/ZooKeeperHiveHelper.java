begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_class
specifier|public
class|class
name|ZooKeeperHiveHelper
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZooKeeperHiveHelper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ZOOKEEPER_PATH_SEPARATOR
init|=
literal|"/"
decl_stmt|;
comment|/**    * Get the ensemble server addresses from the configuration. The format is: host1:port,    * host2:port..    *    * @param conf    **/
specifier|public
specifier|static
name|String
name|getQuorumServers
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|String
index|[]
name|hosts
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ZOOKEEPER_QUORUM
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|port
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ZOOKEEPER_CLIENT_PORT
argument_list|)
decl_stmt|;
name|StringBuilder
name|quorum
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hosts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|quorum
operator|.
name|append
argument_list|(
name|hosts
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hosts
index|[
name|i
index|]
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
comment|// if the hostname doesn't contain a port, add the configured port to hostname
name|quorum
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|quorum
operator|.
name|append
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
name|hosts
operator|.
name|length
operator|-
literal|1
condition|)
name|quorum
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
return|return
name|quorum
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * A no-op watcher class    */
specifier|public
specifier|static
class|class
name|DummyWatcher
implements|implements
name|Watcher
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
name|event
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

