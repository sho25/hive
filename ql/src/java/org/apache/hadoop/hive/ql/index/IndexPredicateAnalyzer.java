begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDescUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeFieldDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBaseCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToUnixTimeStamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToUtcTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_comment
comment|/**  * IndexPredicateAnalyzer decomposes predicates, separating the parts  * which can be satisfied by an index from the parts which cannot.  * Currently, it only supports pure conjunctions over binary expressions  * comparing a column reference with a constant value.  It is assumed  * that all column aliases encountered refer to the same table.  *  * @deprecated kept only because some storagehandlers are using it internally  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|IndexPredicateAnalyzer
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|udfNames
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|columnToUDFs
decl_stmt|;
specifier|private
name|FieldValidator
name|fieldValidator
decl_stmt|;
specifier|private
name|boolean
name|acceptsFields
decl_stmt|;
specifier|public
name|IndexPredicateAnalyzer
parameter_list|()
block|{
name|udfNames
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|columnToUDFs
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValidator
parameter_list|(
name|FieldValidator
name|fieldValidator
parameter_list|)
block|{
name|this
operator|.
name|fieldValidator
operator|=
name|fieldValidator
expr_stmt|;
block|}
comment|/**    * Registers a comparison operator as one which can be satisfied    * by an index search.  Unless this is called, analyzePredicate    * will never find any indexable conditions.    *    * @param udfName name of comparison operator as returned    * by either {@link GenericUDFBridge#getUdfName} (for simple UDF's)    * or udf.getClass().getName() (for generic UDF's).    */
specifier|public
name|void
name|addComparisonOp
parameter_list|(
name|String
name|udfName
parameter_list|)
block|{
name|udfNames
operator|.
name|add
argument_list|(
name|udfName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clears the set of column names allowed in comparisons.  (Initially, all    * column names are allowed.)    */
specifier|public
name|void
name|clearAllowedColumnNames
parameter_list|()
block|{
name|columnToUDFs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Adds a column name to the set of column names allowed.    *    * @param columnName name of column to be allowed    */
specifier|public
name|void
name|allowColumnName
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
name|columnToUDFs
operator|.
name|put
argument_list|(
name|columnName
argument_list|,
name|udfNames
argument_list|)
expr_stmt|;
block|}
comment|/**    * add allowed functions per column    * @param columnName    * @param udfs    */
specifier|public
name|void
name|addComparisonOp
parameter_list|(
name|String
name|columnName
parameter_list|,
name|String
modifier|...
name|udfs
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|allowed
init|=
name|columnToUDFs
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowed
operator|==
literal|null
operator|||
name|allowed
operator|==
name|udfNames
condition|)
block|{
comment|// override
name|columnToUDFs
operator|.
name|put
argument_list|(
name|columnName
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|udfs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allowed
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|udfs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Analyzes a predicate.    *    * @param predicate predicate to be analyzed    *    * @param searchConditions receives conditions produced by analysis    *    * @return residual predicate which could not be translated to    * searchConditions    */
specifier|public
name|ExprNodeDesc
name|analyzePredicate
parameter_list|(
name|ExprNodeDesc
name|predicate
parameter_list|,
specifier|final
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|searchConditions
parameter_list|)
block|{
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|NodeProcessor
name|nodeProcessor
init|=
operator|new
name|NodeProcessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// We can only push down stuff which appears as part of
comment|// a pure conjunction:  reject OR, CASE, etc.
for|for
control|(
name|Node
name|ancestor
range|:
name|stack
control|)
block|{
if|if
condition|(
name|nd
operator|==
name|ancestor
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|FunctionRegistry
operator|.
name|isOpAnd
argument_list|(
operator|(
name|ExprNodeDesc
operator|)
name|ancestor
argument_list|)
condition|)
block|{
return|return
name|nd
return|;
block|}
block|}
return|return
name|analyzeExpr
argument_list|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|nd
argument_list|,
name|searchConditions
argument_list|,
name|nodeOutputs
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|nodeProcessor
argument_list|,
name|opRules
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|add
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|nodeOutput
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
name|nodeOutput
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|ExprNodeDesc
name|residualPredicate
init|=
operator|(
name|ExprNodeDesc
operator|)
name|nodeOutput
operator|.
name|get
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
return|return
name|residualPredicate
return|;
block|}
comment|//Check if ExprNodeColumnDesc is wrapped in expr.
comment|//If so, peel off. Otherwise return itself.
specifier|private
specifier|static
name|ExprNodeDesc
name|getColumnExpr
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
return|return
name|expr
return|;
block|}
name|ExprNodeGenericFuncDesc
name|funcDesc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
name|funcDesc
operator|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|expr
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|funcDesc
condition|)
block|{
return|return
name|expr
return|;
block|}
name|GenericUDF
name|udf
init|=
name|funcDesc
operator|.
name|getGenericUDF
argument_list|()
decl_stmt|;
comment|// check if its a simple cast expression.
if|if
condition|(
operator|(
name|udf
operator|instanceof
name|GenericUDFBridge
operator|||
name|udf
operator|instanceof
name|GenericUDFToBinary
operator|||
name|udf
operator|instanceof
name|GenericUDFToString
operator|||
name|udf
operator|instanceof
name|GenericUDFToChar
operator|||
name|udf
operator|instanceof
name|GenericUDFToVarchar
operator|||
name|udf
operator|instanceof
name|GenericUDFToDecimal
operator|||
name|udf
operator|instanceof
name|GenericUDFToDate
operator|||
name|udf
operator|instanceof
name|GenericUDFToUnixTimeStamp
operator|||
name|udf
operator|instanceof
name|GenericUDFToUtcTimestamp
operator|)
operator|&&
name|funcDesc
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|funcDesc
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
return|return
name|expr
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
name|expr
return|;
block|}
specifier|private
name|ExprNodeDesc
name|analyzeExpr
parameter_list|(
name|ExprNodeGenericFuncDesc
name|expr
parameter_list|,
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|searchConditions
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|FunctionRegistry
operator|.
name|isOpAnd
argument_list|(
name|expr
argument_list|)
condition|)
block|{
assert|assert
operator|(
name|nodeOutputs
operator|.
name|length
operator|>=
literal|2
operator|)
assert|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|residuals
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|residual
range|:
name|nodeOutputs
control|)
block|{
if|if
condition|(
literal|null
operator|!=
name|residual
condition|)
block|{
name|residuals
operator|.
name|add
argument_list|(
operator|(
name|ExprNodeDesc
operator|)
name|residual
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|residuals
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|residuals
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|residuals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|residuals
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|FunctionRegistry
operator|.
name|getGenericUDFForAnd
argument_list|()
argument_list|,
name|residuals
argument_list|)
return|;
block|}
block|}
name|GenericUDF
name|genericUDF
init|=
name|expr
operator|.
name|getGenericUDF
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|genericUDF
operator|instanceof
name|GenericUDFBaseCompare
operator|)
condition|)
block|{
return|return
name|expr
return|;
block|}
name|ExprNodeDesc
name|expr1
init|=
operator|(
name|ExprNodeDesc
operator|)
name|nodeOutputs
index|[
literal|0
index|]
decl_stmt|;
name|ExprNodeDesc
name|expr2
init|=
operator|(
name|ExprNodeDesc
operator|)
name|nodeOutputs
index|[
literal|1
index|]
decl_stmt|;
comment|// We may need to peel off the GenericUDFBridge that is added by CBO or user
if|if
condition|(
name|expr1
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|equals
argument_list|(
name|expr2
operator|.
name|getTypeInfo
argument_list|()
argument_list|)
condition|)
block|{
name|expr1
operator|=
name|getColumnExpr
argument_list|(
name|expr1
argument_list|)
expr_stmt|;
name|expr2
operator|=
name|getColumnExpr
argument_list|(
name|expr2
argument_list|)
expr_stmt|;
block|}
name|ExprNodeDesc
index|[]
name|extracted
init|=
name|ExprNodeDescUtils
operator|.
name|extractComparePair
argument_list|(
name|expr1
argument_list|,
name|expr2
argument_list|)
decl_stmt|;
if|if
condition|(
name|extracted
operator|==
literal|null
operator|||
operator|(
name|extracted
operator|.
name|length
operator|>
literal|2
operator|&&
operator|!
name|acceptsFields
operator|)
condition|)
block|{
return|return
name|expr
return|;
block|}
name|ExprNodeColumnDesc
name|columnDesc
decl_stmt|;
name|ExprNodeConstantDesc
name|constantDesc
decl_stmt|;
if|if
condition|(
name|extracted
index|[
literal|0
index|]
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
name|genericUDF
operator|=
name|genericUDF
operator|.
name|flip
argument_list|()
expr_stmt|;
name|columnDesc
operator|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|extracted
index|[
literal|1
index|]
expr_stmt|;
name|constantDesc
operator|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|extracted
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|columnDesc
operator|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|extracted
index|[
literal|0
index|]
expr_stmt|;
name|constantDesc
operator|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|extracted
index|[
literal|1
index|]
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|allowed
init|=
name|columnToUDFs
operator|.
name|get
argument_list|(
name|columnDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowed
operator|==
literal|null
condition|)
block|{
return|return
name|expr
return|;
block|}
name|String
name|udfName
init|=
name|genericUDF
operator|.
name|getUdfName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|allowed
operator|.
name|contains
argument_list|(
name|genericUDF
operator|.
name|getUdfName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|expr
return|;
block|}
name|String
index|[]
name|fields
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|extracted
operator|.
name|length
operator|>
literal|2
condition|)
block|{
name|ExprNodeFieldDesc
name|fieldDesc
init|=
operator|(
name|ExprNodeFieldDesc
operator|)
name|extracted
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|isValidField
argument_list|(
name|fieldDesc
argument_list|)
condition|)
block|{
return|return
name|expr
return|;
block|}
name|fields
operator|=
name|ExprNodeDescUtils
operator|.
name|extractFields
argument_list|(
name|fieldDesc
argument_list|)
expr_stmt|;
block|}
comment|// We also need to update the expr so that the index query can be generated.
comment|// Note that, hive does not support UDFToDouble etc in the query text.
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|expr1
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|expr2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|indexExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|expr
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
name|expr
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|list
argument_list|)
decl_stmt|;
name|searchConditions
operator|.
name|add
argument_list|(
operator|new
name|IndexSearchCondition
argument_list|(
name|columnDesc
argument_list|,
name|udfName
argument_list|,
name|constantDesc
argument_list|,
name|indexExpr
argument_list|,
name|expr
argument_list|,
name|fields
argument_list|)
argument_list|)
expr_stmt|;
comment|// we converted the expression to a search condition, so
comment|// remove it from the residual predicate
return|return
name|fields
operator|==
literal|null
condition|?
literal|null
else|:
name|expr
return|;
block|}
specifier|private
name|boolean
name|isValidField
parameter_list|(
name|ExprNodeFieldDesc
name|field
parameter_list|)
block|{
return|return
name|fieldValidator
operator|==
literal|null
operator|||
name|fieldValidator
operator|.
name|validate
argument_list|(
name|field
argument_list|)
return|;
block|}
comment|/**    * Translates search conditions back to ExprNodeDesc form (as    * a left-deep conjunction).    *    * @param searchConditions (typically produced by analyzePredicate)    *    * @return ExprNodeGenericFuncDesc form of search conditions    */
specifier|public
name|ExprNodeGenericFuncDesc
name|translateSearchConditions
parameter_list|(
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|searchConditions
parameter_list|)
block|{
name|ExprNodeGenericFuncDesc
name|expr
init|=
literal|null
decl_stmt|;
for|for
control|(
name|IndexSearchCondition
name|searchCondition
range|:
name|searchConditions
control|)
block|{
if|if
condition|(
name|expr
operator|==
literal|null
condition|)
block|{
name|expr
operator|=
name|searchCondition
operator|.
name|getIndexExpr
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|searchCondition
operator|.
name|getIndexExpr
argument_list|()
argument_list|)
expr_stmt|;
name|expr
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|FunctionRegistry
operator|.
name|getGenericUDFForAnd
argument_list|()
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
return|return
name|expr
return|;
block|}
comment|/**    * Translates original conditions back to ExprNodeDesc form (as    * a left-deep conjunction).    *    * @param searchConditions (typically produced by analyzePredicate)    *    * @return ExprNodeGenericFuncDesc form of search conditions    */
specifier|public
name|ExprNodeGenericFuncDesc
name|translateOriginalConditions
parameter_list|(
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|searchConditions
parameter_list|)
block|{
name|ExprNodeGenericFuncDesc
name|expr
init|=
literal|null
decl_stmt|;
for|for
control|(
name|IndexSearchCondition
name|searchCondition
range|:
name|searchConditions
control|)
block|{
if|if
condition|(
name|expr
operator|==
literal|null
condition|)
block|{
name|expr
operator|=
name|searchCondition
operator|.
name|getOriginalExpr
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|searchCondition
operator|.
name|getOriginalExpr
argument_list|()
argument_list|)
expr_stmt|;
name|expr
operator|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|FunctionRegistry
operator|.
name|getGenericUDFForAnd
argument_list|()
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
return|return
name|expr
return|;
block|}
specifier|public
name|void
name|setAcceptsFields
parameter_list|(
name|boolean
name|acceptsFields
parameter_list|)
block|{
name|this
operator|.
name|acceptsFields
operator|=
name|acceptsFields
expr_stmt|;
block|}
specifier|public
specifier|static
interface|interface
name|FieldValidator
block|{
name|boolean
name|validate
parameter_list|(
name|ExprNodeFieldDesc
name|exprNodeDesc
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
name|IndexPredicateAnalyzer
name|createAnalyzer
parameter_list|(
name|boolean
name|equalOnly
parameter_list|)
block|{
name|IndexPredicateAnalyzer
name|analyzer
init|=
operator|new
name|IndexPredicateAnalyzer
argument_list|()
decl_stmt|;
name|analyzer
operator|.
name|addComparisonOp
argument_list|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqual"
argument_list|)
expr_stmt|;
if|if
condition|(
name|equalOnly
condition|)
block|{
return|return
name|analyzer
return|;
block|}
name|analyzer
operator|.
name|addComparisonOp
argument_list|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrGreaterThan"
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|addComparisonOp
argument_list|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrLessThan"
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|addComparisonOp
argument_list|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPLessThan"
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|addComparisonOp
argument_list|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPGreaterThan"
argument_list|)
expr_stmt|;
return|return
name|analyzer
return|;
block|}
block|}
end_class

end_unit

