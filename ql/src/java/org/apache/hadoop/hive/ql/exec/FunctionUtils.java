begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ResourceUri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionInfo
operator|.
name|FunctionResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDTF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
operator|.
name|TableFunctionResolver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_comment
comment|/**  * Function related utilities.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|FunctionUtils
block|{
specifier|private
name|FunctionUtils
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"FunctionUtils should not be instantiated"
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|FunctionResource
index|[]
name|toFunctionResource
parameter_list|(
name|List
argument_list|<
name|ResourceUri
argument_list|>
name|resources
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|resources
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|FunctionResource
index|[]
name|converted
init|=
operator|new
name|FunctionResource
index|[
name|resources
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|converted
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ResourceUri
name|resource
init|=
name|resources
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SessionState
operator|.
name|ResourceType
name|type
init|=
name|getResourceType
argument_list|(
name|resource
operator|.
name|getResourceType
argument_list|()
argument_list|)
decl_stmt|;
name|converted
index|[
name|i
index|]
operator|=
operator|new
name|FunctionResource
argument_list|(
name|type
argument_list|,
name|resource
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|converted
return|;
block|}
specifier|public
specifier|static
name|void
name|addFunctionResources
parameter_list|(
name|FunctionResource
index|[]
name|resources
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|resources
operator|!=
literal|null
condition|)
block|{
name|Multimap
argument_list|<
name|SessionState
operator|.
name|ResourceType
argument_list|,
name|String
argument_list|>
name|mappings
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|FunctionResource
name|res
range|:
name|resources
control|)
block|{
name|mappings
operator|.
name|put
argument_list|(
name|res
operator|.
name|getResourceType
argument_list|()
argument_list|,
name|res
operator|.
name|getResourceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SessionState
operator|.
name|ResourceType
name|type
range|:
name|mappings
operator|.
name|keys
argument_list|()
control|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|add_resources
argument_list|(
name|type
argument_list|,
name|mappings
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|SessionState
operator|.
name|ResourceType
name|getResourceType
parameter_list|(
name|ResourceType
name|rt
parameter_list|)
block|{
switch|switch
condition|(
name|rt
condition|)
block|{
case|case
name|JAR
case|:
return|return
name|SessionState
operator|.
name|ResourceType
operator|.
name|JAR
return|;
case|case
name|FILE
case|:
return|return
name|SessionState
operator|.
name|ResourceType
operator|.
name|FILE
return|;
case|case
name|ARCHIVE
case|:
return|return
name|SessionState
operator|.
name|ResourceType
operator|.
name|ARCHIVE
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unexpected resource type "
operator|+
name|rt
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isQualifiedFunctionName
parameter_list|(
name|String
name|functionName
parameter_list|)
block|{
return|return
name|functionName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
return|;
block|}
specifier|public
specifier|static
name|String
name|qualifyFunctionName
parameter_list|(
name|String
name|functionName
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
if|if
condition|(
name|isQualifiedFunctionName
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
return|return
name|functionName
return|;
block|}
return|return
name|dbName
operator|+
literal|"."
operator|+
name|functionName
return|;
block|}
comment|/**    * Splits a qualified function name into an array containing the database name and function name.    * If the name is not qualified, the database name is null.    * If there is more than one '.', an exception will be thrown.    * @param functionName Function name, which may or may not be qualified    * @return    */
specifier|public
specifier|static
name|String
index|[]
name|splitQualifiedFunctionName
parameter_list|(
name|String
name|functionName
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
index|[]
name|names
init|=
name|functionName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|String
index|[]
name|retval
init|=
block|{
literal|null
block|,
name|functionName
block|}
decl_stmt|;
return|return
name|retval
return|;
block|}
elseif|else
if|if
condition|(
name|names
operator|.
name|length
operator|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Function name does not have correct format: "
operator|+
name|functionName
argument_list|)
throw|;
block|}
return|return
name|names
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|getQualifiedFunctionNameParts
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|isQualifiedFunctionName
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|splitQualifiedFunctionName
argument_list|(
name|name
argument_list|)
return|;
block|}
name|String
name|dbName
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
decl_stmt|;
return|return
operator|new
name|String
index|[]
block|{
name|dbName
block|,
name|name
block|}
return|;
block|}
comment|/**    * Function type, for permanent functions.    * Currently just JAVA, though we could support Groovy later on.    */
specifier|public
enum|enum
name|FunctionType
block|{
name|JAVA
block|,   }
comment|/**    * Enum type to describe what kind of UDF implementation class    */
specifier|public
enum|enum
name|UDFClassType
block|{
name|UNKNOWN
block|,
name|UDF
block|,
name|GENERIC_UDF
block|,
name|GENERIC_UDTF
block|,
name|UDAF
block|,
name|GENERIC_UDAF_RESOLVER
block|,
name|TABLE_FUNCTION_RESOLVER
block|,   }
comment|/**    * Determine the UDF class type of the class    * @param udfClass    * @return UDFClassType enum corresponding to the class type of the UDF    */
specifier|public
specifier|static
name|UDFClassType
name|getUDFClassType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|udfClass
parameter_list|)
block|{
if|if
condition|(
name|UDF
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|udfClass
argument_list|)
condition|)
block|{
return|return
name|UDFClassType
operator|.
name|UDF
return|;
block|}
elseif|else
if|if
condition|(
name|GenericUDF
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|udfClass
argument_list|)
condition|)
block|{
return|return
name|UDFClassType
operator|.
name|GENERIC_UDF
return|;
block|}
elseif|else
if|if
condition|(
name|GenericUDTF
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|udfClass
argument_list|)
condition|)
block|{
return|return
name|UDFClassType
operator|.
name|GENERIC_UDTF
return|;
block|}
elseif|else
if|if
condition|(
name|UDAF
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|udfClass
argument_list|)
condition|)
block|{
return|return
name|UDFClassType
operator|.
name|UDAF
return|;
block|}
elseif|else
if|if
condition|(
name|GenericUDAFResolver
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|udfClass
argument_list|)
condition|)
block|{
return|return
name|UDFClassType
operator|.
name|GENERIC_UDAF_RESOLVER
return|;
block|}
elseif|else
if|if
condition|(
name|TableFunctionResolver
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|udfClass
argument_list|)
condition|)
block|{
return|return
name|UDFClassType
operator|.
name|TABLE_FUNCTION_RESOLVER
return|;
block|}
else|else
block|{
return|return
name|UDFClassType
operator|.
name|UNKNOWN
return|;
block|}
block|}
block|}
end_class

end_unit

