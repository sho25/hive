begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDTF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
operator|.
name|TableFunctionResolver
import|;
end_import

begin_class
specifier|public
class|class
name|FunctionUtils
block|{
specifier|public
specifier|static
name|boolean
name|isQualifiedFunctionName
parameter_list|(
name|String
name|functionName
parameter_list|)
block|{
return|return
name|functionName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
return|;
block|}
specifier|public
specifier|static
name|String
name|qualifyFunctionName
parameter_list|(
name|String
name|functionName
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
if|if
condition|(
name|isQualifiedFunctionName
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
return|return
name|functionName
return|;
block|}
return|return
name|dbName
operator|+
literal|"."
operator|+
name|functionName
return|;
block|}
comment|/**    * Splits a qualified function name into an array containing the database name and function name.    * If the name is not qualified, the database name is null.    * If there is more than one '.', an exception will be thrown.    * @param functionName Function name, which may or may not be qualified    * @return    */
specifier|public
specifier|static
name|String
index|[]
name|splitQualifiedFunctionName
parameter_list|(
name|String
name|functionName
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
index|[]
name|names
init|=
name|functionName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|String
index|[]
name|retval
init|=
block|{
literal|null
block|,
name|functionName
block|}
decl_stmt|;
return|return
name|retval
return|;
block|}
elseif|else
if|if
condition|(
name|names
operator|.
name|length
operator|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Function name does not have correct format: "
operator|+
name|functionName
argument_list|)
throw|;
block|}
return|return
name|names
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|getQualifiedFunctionNameParts
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|isQualifiedFunctionName
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|splitQualifiedFunctionName
argument_list|(
name|name
argument_list|)
return|;
block|}
name|String
name|dbName
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
decl_stmt|;
return|return
operator|new
name|String
index|[]
block|{
name|dbName
block|,
name|name
block|}
return|;
block|}
comment|/**    * Function type, for permanent functions.    * Currently just JAVA, though we could support Groovy later on.    */
specifier|public
enum|enum
name|FunctionType
block|{
name|JAVA
block|,   }
comment|/**    * Enum type to describe what kind of UDF implementation class    */
specifier|public
enum|enum
name|UDFClassType
block|{
name|UNKNOWN
block|,
name|UDF
block|,
name|GENERIC_UDF
block|,
name|GENERIC_UDTF
block|,
name|UDAF
block|,
name|GENERIC_UDAF_RESOLVER
block|,
name|TABLE_FUNCTION_RESOLVER
block|,   }
comment|/**    * Determine the UDF class type of the class    * @param udfClass    * @return UDFClassType enum corresponding to the class type of the UDF    */
specifier|public
specifier|static
name|UDFClassType
name|getUDFClassType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|udfClass
parameter_list|)
block|{
if|if
condition|(
name|UDF
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|udfClass
argument_list|)
condition|)
block|{
return|return
name|UDFClassType
operator|.
name|UDF
return|;
block|}
elseif|else
if|if
condition|(
name|GenericUDF
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|udfClass
argument_list|)
condition|)
block|{
return|return
name|UDFClassType
operator|.
name|GENERIC_UDF
return|;
block|}
elseif|else
if|if
condition|(
name|GenericUDTF
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|udfClass
argument_list|)
condition|)
block|{
return|return
name|UDFClassType
operator|.
name|GENERIC_UDTF
return|;
block|}
elseif|else
if|if
condition|(
name|UDAF
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|udfClass
argument_list|)
condition|)
block|{
return|return
name|UDFClassType
operator|.
name|UDAF
return|;
block|}
elseif|else
if|if
condition|(
name|GenericUDAFResolver
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|udfClass
argument_list|)
condition|)
block|{
return|return
name|UDFClassType
operator|.
name|GENERIC_UDAF_RESOLVER
return|;
block|}
elseif|else
if|if
condition|(
name|TableFunctionResolver
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|udfClass
argument_list|)
condition|)
block|{
return|return
name|UDFClassType
operator|.
name|TABLE_FUNCTION_RESOLVER
return|;
block|}
else|else
block|{
return|return
name|UDFClassType
operator|.
name|UNKNOWN
return|;
block|}
block|}
block|}
end_class

end_unit

