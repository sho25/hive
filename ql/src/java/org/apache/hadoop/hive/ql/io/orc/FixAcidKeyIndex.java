begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|IntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|CompressionKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|StripeInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
operator|.
name|StripeStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|OrcAcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|tools
operator|.
name|FileDump
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility to check and fix the ACID key index of an ORC file if it has been written incorrectly  * due to HIVE-18817.  * The condition that will be checked in the ORC file will be if the number of stripes in the  * acid key index matches the number of stripes in the ORC StripeInformation.  */
end_comment

begin_class
specifier|public
class|class
name|FixAcidKeyIndex
block|{
specifier|public
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FixAcidKeyIndex
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_BACKUP_PATH
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CharsetDecoder
name|utf8Decoder
init|=
name|UTF8
operator|.
name|newDecoder
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Options
name|opts
init|=
name|createOptions
argument_list|()
decl_stmt|;
name|CommandLine
name|cli
init|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|'h'
argument_list|)
condition|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"fixacidkeyindex"
argument_list|,
name|opts
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|backupPath
init|=
name|DEFAULT_BACKUP_PATH
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|"backup-path"
argument_list|)
condition|)
block|{
name|backupPath
operator|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"backup-path"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|checkOnly
init|=
name|cli
operator|.
name|hasOption
argument_list|(
literal|"check-only"
argument_list|)
decl_stmt|;
name|boolean
name|recover
init|=
name|cli
operator|.
name|hasOption
argument_list|(
literal|"recover"
argument_list|)
decl_stmt|;
name|String
index|[]
name|files
init|=
name|cli
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error : ORC files are not specified"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// if the specified path is directory, iterate through all files
name|List
argument_list|<
name|String
argument_list|>
name|filesInPath
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|filename
range|:
name|files
control|)
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|filesInPath
operator|.
name|addAll
argument_list|(
name|getAllFilesInPath
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkOnly
condition|)
block|{
name|checkFiles
argument_list|(
name|conf
argument_list|,
name|filesInPath
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|recover
condition|)
block|{
name|recoverFiles
argument_list|(
name|conf
argument_list|,
name|filesInPath
argument_list|,
name|backupPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"check-only or recover option must be specified"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|boolean
name|isAcidKeyIndexValid
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|.
name|getNumberOfRows
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// The number of stripes should match the key index count
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|stripes
init|=
name|reader
operator|.
name|getStripes
argument_list|()
decl_stmt|;
name|RecordIdentifier
index|[]
name|keyIndex
init|=
name|OrcRecordUpdater
operator|.
name|parseKeyIndex
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyIndex
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|keyIndex
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
if|if
condition|(
name|keyIndex
index|[
name|idx
index|]
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"*** keyIndex["
operator|+
name|idx
operator|+
literal|"] is null"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
name|stripes
operator|.
name|size
argument_list|()
operator|==
name|keyIndex
operator|.
name|length
return|;
block|}
specifier|static
name|void
name|recoverFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fileList
parameter_list|,
name|String
name|backup
parameter_list|)
block|{
for|for
control|(
name|String
name|fileName
range|:
name|fileList
control|)
block|{
try|try
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|recoverFile
argument_list|(
name|conf
argument_list|,
name|filePath
argument_list|,
name|backup
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR recovering "
operator|+
name|fileName
argument_list|)
expr_stmt|;
name|err
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|void
name|checkFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fileList
parameter_list|)
block|{
for|for
control|(
name|String
name|fileName
range|:
name|fileList
control|)
block|{
try|try
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|checkFile
argument_list|(
name|conf
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR checking "
operator|+
name|fileName
argument_list|)
expr_stmt|;
name|err
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|void
name|checkFile
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|inputPath
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|inputPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|inputPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|OrcInputFormat
operator|.
name|isOriginal
argument_list|(
name|reader
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|inputPath
operator|+
literal|" is not an acid file"
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|validIndex
init|=
name|isAcidKeyIndexValid
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking "
operator|+
name|inputPath
operator|+
literal|" - acid key index is "
operator|+
operator|(
name|validIndex
condition|?
literal|"valid"
else|:
literal|"invalid"
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|recoverFile
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|inputPath
parameter_list|,
name|String
name|backup
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|inputPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|inputPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|OrcInputFormat
operator|.
name|isOriginal
argument_list|(
name|reader
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|inputPath
operator|+
literal|" is not an acid file. No need to recover."
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|validIndex
init|=
name|isAcidKeyIndexValid
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|validIndex
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|inputPath
operator|+
literal|" has a valid acid key index. No need to recover."
argument_list|)
expr_stmt|;
return|return;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Recovering "
operator|+
name|inputPath
argument_list|)
expr_stmt|;
name|Path
name|recoveredPath
init|=
name|getRecoveryFile
argument_list|(
name|inputPath
argument_list|)
decl_stmt|;
comment|// make sure that file does not exist
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|recoveredPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|recoveredPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Writer should match the orc configuration from the original file
name|OrcFile
operator|.
name|WriterOptions
name|writerOptions
init|=
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|compress
argument_list|(
name|reader
operator|.
name|getCompression
argument_list|()
argument_list|)
operator|.
name|version
argument_list|(
name|reader
operator|.
name|getFileVersion
argument_list|()
argument_list|)
operator|.
name|rowIndexStride
argument_list|(
name|reader
operator|.
name|getRowIndexStride
argument_list|()
argument_list|)
operator|.
name|inspector
argument_list|(
name|reader
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
comment|// compression buffer size should only be set if compression is enabled
if|if
condition|(
name|reader
operator|.
name|getCompression
argument_list|()
operator|!=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|CompressionKind
operator|.
name|NONE
condition|)
block|{
name|writerOptions
operator|.
name|bufferSize
argument_list|(
name|reader
operator|.
name|getCompressionSize
argument_list|()
argument_list|)
operator|.
name|enforceBufferSize
argument_list|()
expr_stmt|;
block|}
try|try
init|(
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|recoveredPath
argument_list|,
name|writerOptions
argument_list|)
init|)
block|{
comment|// For HIVE-18817, the only thing missing is the last stripe index information.
comment|// Get the information from the last stripe and append it to the existing index.
comment|// The actual stripe data can be written as-is, similar to OrcFileMergeOperator.
name|String
name|keyIndexString
init|=
name|getKeyIndexAsString
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyIndexString
operator|==
literal|null
operator|||
name|keyIndexString
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
condition|)
block|{
comment|// Key index can be null/"null" if there is only a single stripe. Just start fresh.
name|keyIndexString
operator|=
literal|""
expr_stmt|;
block|}
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|stripes
init|=
name|reader
operator|.
name|getStripes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|StripeStatistics
argument_list|>
name|stripeStats
init|=
name|reader
operator|.
name|getOrcProtoStripeStatistics
argument_list|()
decl_stmt|;
try|try
init|(
name|FSDataInputStream
name|inputStream
init|=
name|fs
operator|.
name|open
argument_list|(
name|inputPath
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|stripes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
comment|// initialize buffer to read the entire stripe.
name|StripeInformation
name|stripe
init|=
name|stripes
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|int
name|stripeLength
init|=
operator|(
name|int
operator|)
name|stripe
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|stripeLength
index|]
decl_stmt|;
name|inputStream
operator|.
name|readFully
argument_list|(
name|stripe
operator|.
name|getOffset
argument_list|()
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|stripeLength
argument_list|)
expr_stmt|;
comment|// append the stripe buffer to the new ORC file
name|writer
operator|.
name|appendStripe
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|,
name|stripe
argument_list|,
name|stripeStats
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// For last stripe we need to get the last trasactionId/bucket/rowId from the last row.
name|long
name|lastRow
init|=
name|reader
operator|.
name|getNumberOfRows
argument_list|()
operator|-
literal|1
decl_stmt|;
comment|//RecordReader rr = reader.rows();
try|try
init|(
name|RecordReader
name|rr
init|=
name|reader
operator|.
name|rows
argument_list|()
init|)
block|{
name|rr
operator|.
name|seekToRow
argument_list|(
name|lastRow
argument_list|)
expr_stmt|;
name|OrcStruct
name|row
init|=
operator|(
name|OrcStruct
operator|)
name|rr
operator|.
name|next
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|reader
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
comment|// struct<operation:int,originalTransaction:bigint,bucket:int,rowId:bigint,currentTransaction:bigint
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|structFields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|StructField
name|transactionField
init|=
name|structFields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|StructField
name|bucketField
init|=
name|structFields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|StructField
name|rowIdField
init|=
name|structFields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|long
name|lastTransaction
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|transactionField
operator|.
name|getFieldObjectInspector
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|transactionField
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|lastBucket
init|=
operator|(
operator|(
name|IntObjectInspector
operator|)
name|bucketField
operator|.
name|getFieldObjectInspector
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|bucketField
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|lastRowId
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|rowIdField
operator|.
name|getFieldObjectInspector
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|rowIdField
argument_list|)
argument_list|)
decl_stmt|;
name|keyIndexString
operator|+=
name|lastTransaction
operator|+
literal|","
operator|+
name|lastBucket
operator|+
literal|","
operator|+
name|lastRowId
operator|+
literal|";"
expr_stmt|;
block|}
comment|// Add the rest of the metadata keys.
for|for
control|(
name|String
name|metadataKey
range|:
name|reader
operator|.
name|getMetadataKeys
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|metadataKey
operator|.
name|equals
argument_list|(
name|OrcRecordUpdater
operator|.
name|ACID_KEY_INDEX_NAME
argument_list|)
condition|)
block|{
name|writer
operator|.
name|addUserMetadata
argument_list|(
name|metadataKey
argument_list|,
name|reader
operator|.
name|getMetadataValue
argument_list|(
name|metadataKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Finally add the fixed acid key index.
name|writer
operator|.
name|addUserMetadata
argument_list|(
name|OrcRecordUpdater
operator|.
name|ACID_KEY_INDEX_NAME
argument_list|,
name|UTF8
operator|.
name|encode
argument_list|(
name|keyIndexString
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Confirm the file is really fixed, and replace the old file.
name|Reader
name|newReader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|recoveredPath
argument_list|)
decl_stmt|;
name|boolean
name|fileFixed
init|=
name|isAcidKeyIndexValid
argument_list|(
name|newReader
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileFixed
condition|)
block|{
name|Path
name|backupDataPath
decl_stmt|;
name|String
name|scheme
init|=
name|inputPath
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|authority
init|=
name|inputPath
operator|.
name|toUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|String
name|filePath
init|=
name|inputPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// use the same filesystem as input file if backup-path is not explicitly specified
if|if
condition|(
name|backup
operator|.
name|equals
argument_list|(
name|DEFAULT_BACKUP_PATH
argument_list|)
condition|)
block|{
name|backupDataPath
operator|=
operator|new
name|Path
argument_list|(
name|scheme
argument_list|,
name|authority
argument_list|,
name|DEFAULT_BACKUP_PATH
operator|+
name|filePath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|backupDataPath
operator|=
name|Path
operator|.
name|mergePaths
argument_list|(
operator|new
name|Path
argument_list|(
name|backup
argument_list|)
argument_list|,
name|inputPath
argument_list|)
expr_stmt|;
block|}
comment|// Move data file to backup path
name|moveFiles
argument_list|(
name|fs
argument_list|,
name|inputPath
argument_list|,
name|backupDataPath
argument_list|)
expr_stmt|;
comment|// finally move recovered file to actual file
name|moveFiles
argument_list|(
name|fs
argument_list|,
name|recoveredPath
argument_list|,
name|inputPath
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Fixed acid key index for "
operator|+
name|inputPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unable to fix acid key index for "
operator|+
name|inputPath
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|moveFiles
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// create the dest directory if not exist
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|dest
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|dest
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if the destination file exists for some reason delete it
name|fs
operator|.
name|delete
argument_list|(
name|dest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dest
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Moved "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to move "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dest
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to move "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dest
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|static
name|String
name|getKeyIndexAsString
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
try|try
block|{
name|ByteBuffer
name|val
init|=
name|reader
operator|.
name|getMetadataValue
argument_list|(
name|OrcRecordUpdater
operator|.
name|ACID_KEY_INDEX_NAME
argument_list|)
operator|.
name|duplicate
argument_list|()
decl_stmt|;
return|return
name|utf8Decoder
operator|.
name|decode
argument_list|(
name|val
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad string encoding for "
operator|+
name|OrcRecordUpdater
operator|.
name|ACID_KEY_INDEX_NAME
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|static
name|Path
name|getRecoveryFile
parameter_list|(
specifier|final
name|Path
name|corruptPath
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|corruptPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|corruptPath
operator|.
name|getName
argument_list|()
operator|+
literal|".fixacidindex"
argument_list|)
return|;
block|}
specifier|static
name|Options
name|createOptions
parameter_list|()
block|{
name|Options
name|result
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"check-only"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Check acid orc file for valid acid key index and exit without fixing"
argument_list|)
operator|.
name|create
argument_list|(
literal|'c'
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"recover"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Fix the acid key index for acid orc file if it requires fixing"
argument_list|)
operator|.
name|create
argument_list|(
literal|'r'
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"backup-path"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"specify a backup path to store the corrupted files (default: /tmp)"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"help"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"print help message"
argument_list|)
operator|.
name|create
argument_list|(
literal|'h'
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|getAllFilesInPath
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|filesInPath
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|FileStatus
index|[]
name|fileStatuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|,
name|FileDump
operator|.
name|HIDDEN_AND_SIDE_FILE_FILTER
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileInPath
range|:
name|fileStatuses
control|)
block|{
if|if
condition|(
name|fileInPath
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|filesInPath
operator|.
name|addAll
argument_list|(
name|getAllFilesInPath
argument_list|(
name|fileInPath
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filesInPath
operator|.
name|add
argument_list|(
name|fileInPath
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|filesInPath
operator|.
name|add
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|filesInPath
return|;
block|}
block|}
end_class

end_unit

