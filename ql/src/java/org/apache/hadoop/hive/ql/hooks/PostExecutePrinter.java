begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookContext
operator|.
name|HookType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|LineageInfo
operator|.
name|BaseColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|LineageInfo
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|LineageInfo
operator|.
name|DependencyKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * Implementation of a post execute hook that simply prints out its parameters  * to standard output.  */
end_comment

begin_class
specifier|public
class|class
name|PostExecutePrinter
implements|implements
name|ExecuteWithHookContext
block|{
specifier|public
class|class
name|DependencyKeyComp
implements|implements
name|Comparator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|DependencyKey
argument_list|,
name|Dependency
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|DependencyKey
argument_list|,
name|Dependency
argument_list|>
name|o1
parameter_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|DependencyKey
argument_list|,
name|Dependency
argument_list|>
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
literal|null
operator|&&
name|o2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|o1
operator|==
literal|null
operator|&&
name|o2
operator|!=
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|o1
operator|!=
literal|null
operator|&&
name|o2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
comment|// Both are non null.
comment|// First compare the table names.
name|int
name|ret
init|=
name|o1
operator|.
name|getKey
argument_list|()
operator|.
name|getDataContainer
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getKey
argument_list|()
operator|.
name|getDataContainer
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
return|return
name|ret
return|;
block|}
comment|// The table names match, so check on the partitions
if|if
condition|(
operator|!
name|o1
operator|.
name|getKey
argument_list|()
operator|.
name|getDataContainer
argument_list|()
operator|.
name|isPartition
argument_list|()
operator|&&
name|o2
operator|.
name|getKey
argument_list|()
operator|.
name|getDataContainer
argument_list|()
operator|.
name|isPartition
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|o1
operator|.
name|getKey
argument_list|()
operator|.
name|getDataContainer
argument_list|()
operator|.
name|isPartition
argument_list|()
operator|&&
operator|!
name|o2
operator|.
name|getKey
argument_list|()
operator|.
name|getDataContainer
argument_list|()
operator|.
name|isPartition
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|o1
operator|.
name|getKey
argument_list|()
operator|.
name|getDataContainer
argument_list|()
operator|.
name|isPartition
argument_list|()
operator|&&
name|o2
operator|.
name|getKey
argument_list|()
operator|.
name|getDataContainer
argument_list|()
operator|.
name|isPartition
argument_list|()
condition|)
block|{
comment|// Both are partitioned tables.
name|ret
operator|=
name|o1
operator|.
name|getKey
argument_list|()
operator|.
name|getDataContainer
argument_list|()
operator|.
name|getPartition
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getKey
argument_list|()
operator|.
name|getDataContainer
argument_list|()
operator|.
name|getPartition
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
return|return
name|ret
return|;
block|}
block|}
comment|// The partitons are also the same so check the fieldschema
return|return
operator|(
name|o1
operator|.
name|getKey
argument_list|()
operator|.
name|getFieldSchema
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getKey
argument_list|()
operator|.
name|getFieldSchema
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
operator|(
name|hookContext
operator|.
name|getHookType
argument_list|()
operator|==
name|HookType
operator|.
name|POST_EXEC_HOOK
operator|)
assert|;
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
name|hookContext
operator|.
name|getInputs
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
init|=
name|hookContext
operator|.
name|getOutputs
argument_list|()
decl_stmt|;
name|LineageInfo
name|linfo
init|=
name|hookContext
operator|.
name|getLinfo
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|hookContext
operator|.
name|getUgi
argument_list|()
decl_stmt|;
name|this
operator|.
name|run
argument_list|(
name|hookContext
operator|.
name|getQueryState
argument_list|()
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|,
name|linfo
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|(
name|QueryState
name|queryState
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|,
name|LineageInfo
name|linfo
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|Exception
block|{
name|LogHelper
name|console
init|=
name|SessionState
operator|.
name|getConsole
argument_list|()
decl_stmt|;
if|if
condition|(
name|console
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|queryState
operator|!=
literal|null
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"POSTHOOK: query: "
operator|+
name|queryState
operator|.
name|getQueryString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"POSTHOOK: type: "
operator|+
name|queryState
operator|.
name|getCommandType
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|PreExecutePrinter
operator|.
name|printEntities
argument_list|(
name|console
argument_list|,
name|inputs
argument_list|,
literal|"POSTHOOK: Input: "
argument_list|)
expr_stmt|;
name|PreExecutePrinter
operator|.
name|printEntities
argument_list|(
name|console
argument_list|,
name|outputs
argument_list|,
literal|"POSTHOOK: Output: "
argument_list|)
expr_stmt|;
comment|// Also print out the generic lineage information if there is any
if|if
condition|(
name|linfo
operator|!=
literal|null
condition|)
block|{
name|LinkedList
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|DependencyKey
argument_list|,
name|Dependency
argument_list|>
argument_list|>
name|entry_list
init|=
operator|new
name|LinkedList
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|DependencyKey
argument_list|,
name|Dependency
argument_list|>
argument_list|>
argument_list|(
name|linfo
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|entry_list
argument_list|,
operator|new
name|DependencyKeyComp
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|DependencyKey
argument_list|,
name|Dependency
argument_list|>
argument_list|>
name|iter
init|=
name|entry_list
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|DependencyKey
argument_list|,
name|Dependency
argument_list|>
name|it
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Dependency
name|dep
init|=
name|it
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|DependencyKey
name|depK
init|=
name|it
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|dep
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"POSTHOOK: Lineage: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|depK
operator|.
name|getDataContainer
argument_list|()
operator|.
name|isPartition
argument_list|()
condition|)
block|{
name|Partition
name|part
init|=
name|depK
operator|.
name|getDataContainer
argument_list|()
operator|.
name|getPartition
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" PARTITION("
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|depK
operator|.
name|getDataContainer
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
operator|+
literal|"="
operator|+
name|part
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|depK
operator|.
name|getDataContainer
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"."
operator|+
name|depK
operator|.
name|getFieldSchema
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|dep
operator|.
name|getType
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
for|for
control|(
name|BaseColumnInfo
name|col
range|:
name|dep
operator|.
name|getBaseCols
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"("
operator|+
name|col
operator|.
name|getTabAlias
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|+
literal|")"
operator|+
name|col
operator|.
name|getTabAlias
argument_list|()
operator|.
name|getAlias
argument_list|()
operator|+
literal|"."
operator|+
name|col
operator|.
name|getColumn
argument_list|()
operator|+
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

