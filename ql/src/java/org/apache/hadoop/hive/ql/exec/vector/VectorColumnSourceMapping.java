begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorColumnOrderedMap
operator|.
name|Mapping
import|;
end_import

begin_comment
comment|/**  * This class collects column information for copying a row from one VectorizedRowBatch to  * same/another batch.  *  * In this variation, column information is ordered by the source column number.  */
end_comment

begin_class
specifier|public
class|class
name|VectorColumnSourceMapping
extends|extends
name|VectorColumnMapping
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|int
name|sourceColumn
parameter_list|,
name|int
name|outputColumn
parameter_list|,
name|String
name|typeName
parameter_list|)
block|{
comment|// Order on sourceColumn.
name|vectorColumnMapping
operator|.
name|add
argument_list|(
name|sourceColumn
argument_list|,
name|outputColumn
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|finalize
parameter_list|()
block|{
name|Mapping
name|mapping
init|=
name|vectorColumnMapping
operator|.
name|getMapping
argument_list|()
decl_stmt|;
comment|// Ordered columns are the source columns.
name|sourceColumns
operator|=
name|mapping
operator|.
name|getOrderedColumns
argument_list|()
expr_stmt|;
name|outputColumns
operator|=
name|mapping
operator|.
name|getValueColumns
argument_list|()
expr_stmt|;
name|typeNames
operator|=
name|mapping
operator|.
name|getTypeNames
argument_list|()
expr_stmt|;
comment|// Not needed anymore.
name|vectorColumnMapping
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSourceSequenceGood
parameter_list|()
block|{
name|int
name|count
init|=
name|sourceColumns
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sourceColumns
index|[
name|i
index|]
operator|!=
name|i
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

