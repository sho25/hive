begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|formatting
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BinaryColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BooleanColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DateColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Decimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DecimalColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DoubleColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LongColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StringColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|HiveIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|HiveIndex
operator|.
name|IndexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|ForeignKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|PrimaryKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|ForeignKeyInfo
operator|.
name|ForeignKeyCol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DescTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowIndexesDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveStringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * This class provides methods to format table and index information.  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|MetaDataFormatUtils
block|{
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_DELIM
init|=
literal|"\t"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LINE_DELIM
init|=
literal|"\n"
decl_stmt|;
specifier|static
specifier|final
name|int
name|DEFAULT_STRINGBUILDER_SIZE
init|=
literal|2048
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ALIGNMENT
init|=
literal|20
decl_stmt|;
specifier|private
name|MetaDataFormatUtils
parameter_list|()
block|{   }
specifier|private
specifier|static
name|void
name|formatColumnsHeader
parameter_list|(
name|StringBuilder
name|columnInformation
parameter_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
parameter_list|)
block|{
name|columnInformation
operator|.
name|append
argument_list|(
literal|"# "
argument_list|)
expr_stmt|;
comment|// Easy for shell scripts to ignore
name|formatOutput
argument_list|(
name|getColumnsHeader
argument_list|(
name|colStats
argument_list|)
argument_list|,
name|columnInformation
argument_list|)
expr_stmt|;
name|columnInformation
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write formatted information about the given columns to a string    * @param cols - list of columns    * @param printHeader - if header should be included    * @param isOutputPadded - make it more human readable by setting indentation    *        with spaces. Turned off for use by HiveServer2    * @param colStats    * @return string with formatted column information    */
specifier|public
specifier|static
name|String
name|getAllColumnsInformation
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|boolean
name|printHeader
parameter_list|,
name|boolean
name|isOutputPadded
parameter_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
parameter_list|)
block|{
name|StringBuilder
name|columnInformation
init|=
operator|new
name|StringBuilder
argument_list|(
name|DEFAULT_STRINGBUILDER_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|printHeader
condition|)
block|{
name|formatColumnsHeader
argument_list|(
name|columnInformation
argument_list|,
name|colStats
argument_list|)
expr_stmt|;
block|}
name|formatAllFields
argument_list|(
name|columnInformation
argument_list|,
name|cols
argument_list|,
name|isOutputPadded
argument_list|,
name|colStats
argument_list|)
expr_stmt|;
return|return
name|columnInformation
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Write formatted information about the given columns, including partition    * columns to a string    * @param cols - list of columns    * @param partCols - list of partition columns    * @param printHeader - if header should be included    * @param isOutputPadded - make it more human readable by setting indentation    *        with spaces. Turned off for use by HiveServer2    * @return string with formatted column information    */
specifier|public
specifier|static
name|String
name|getAllColumnsInformation
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|,
name|boolean
name|printHeader
parameter_list|,
name|boolean
name|isOutputPadded
parameter_list|,
name|boolean
name|showPartColsSep
parameter_list|)
block|{
name|StringBuilder
name|columnInformation
init|=
operator|new
name|StringBuilder
argument_list|(
name|DEFAULT_STRINGBUILDER_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|printHeader
condition|)
block|{
name|formatColumnsHeader
argument_list|(
name|columnInformation
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|formatAllFields
argument_list|(
name|columnInformation
argument_list|,
name|cols
argument_list|,
name|isOutputPadded
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|partCols
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|partCols
operator|.
name|isEmpty
argument_list|()
operator|&&
name|showPartColsSep
condition|)
block|{
name|columnInformation
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
operator|.
name|append
argument_list|(
literal|"# Partition Information"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|formatColumnsHeader
argument_list|(
name|columnInformation
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|formatAllFields
argument_list|(
name|columnInformation
argument_list|,
name|partCols
argument_list|,
name|isOutputPadded
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|columnInformation
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Write formatted column information into given StringBuilder    * @param tableInfo - StringBuilder to append column information into    * @param cols - list of columns    * @param isOutputPadded - make it more human readable by setting indentation    *        with spaces. Turned off for use by HiveServer2    * @param colStats    */
specifier|private
specifier|static
name|void
name|formatAllFields
parameter_list|(
name|StringBuilder
name|tableInfo
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|boolean
name|isOutputPadded
parameter_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
parameter_list|)
block|{
for|for
control|(
name|FieldSchema
name|col
range|:
name|cols
control|)
block|{
if|if
condition|(
name|isOutputPadded
condition|)
block|{
name|formatWithIndentation
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|,
name|col
operator|.
name|getType
argument_list|()
argument_list|,
name|getComment
argument_list|(
name|col
argument_list|)
argument_list|,
name|tableInfo
argument_list|,
name|colStats
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|formatWithoutIndentation
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|,
name|col
operator|.
name|getType
argument_list|()
argument_list|,
name|col
operator|.
name|getComment
argument_list|()
argument_list|,
name|tableInfo
argument_list|,
name|colStats
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|convertToString
parameter_list|(
name|Decimal
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|HiveDecimal
name|result
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|val
operator|.
name|getUnscaled
argument_list|()
argument_list|)
argument_list|,
name|val
operator|.
name|getScale
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|convertToString
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Date
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|DateWritable
name|writableValue
init|=
operator|new
name|DateWritable
argument_list|(
operator|(
name|int
operator|)
name|val
operator|.
name|getDaysSinceEpoch
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|writableValue
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|ColumnStatisticsObj
name|getColumnStatisticsObject
parameter_list|(
name|String
name|colName
parameter_list|,
name|String
name|colType
parameter_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
parameter_list|)
block|{
if|if
condition|(
name|colStats
operator|!=
literal|null
operator|&&
operator|!
name|colStats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ColumnStatisticsObj
name|cso
range|:
name|colStats
control|)
block|{
if|if
condition|(
name|cso
operator|.
name|getColName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|colName
argument_list|)
operator|&&
name|cso
operator|.
name|getColType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|colType
argument_list|)
condition|)
block|{
return|return
name|cso
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|void
name|formatWithoutIndentation
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|comment
parameter_list|,
name|StringBuilder
name|colBuffer
parameter_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
parameter_list|)
block|{
name|colBuffer
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|colBuffer
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|colBuffer
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|colBuffer
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
if|if
condition|(
name|colStats
operator|!=
literal|null
condition|)
block|{
name|ColumnStatisticsObj
name|cso
init|=
name|getColumnStatisticsObject
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|colStats
argument_list|)
decl_stmt|;
if|if
condition|(
name|cso
operator|!=
literal|null
condition|)
block|{
name|ColumnStatisticsData
name|csd
init|=
name|cso
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
if|if
condition|(
name|csd
operator|.
name|isSetBinaryStats
argument_list|()
condition|)
block|{
name|BinaryColumnStatsData
name|bcsd
init|=
name|csd
operator|.
name|getBinaryStats
argument_list|()
decl_stmt|;
name|appendColumnStatsNoFormatting
argument_list|(
name|colBuffer
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|bcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|,
literal|""
argument_list|,
name|bcsd
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
name|bcsd
operator|.
name|getMaxColLen
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csd
operator|.
name|isSetStringStats
argument_list|()
condition|)
block|{
name|StringColumnStatsData
name|scsd
init|=
name|csd
operator|.
name|getStringStats
argument_list|()
decl_stmt|;
name|appendColumnStatsNoFormatting
argument_list|(
name|colBuffer
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|scsd
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|scsd
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|scsd
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
name|scsd
operator|.
name|getMaxColLen
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csd
operator|.
name|isSetBooleanStats
argument_list|()
condition|)
block|{
name|BooleanColumnStatsData
name|bcsd
init|=
name|csd
operator|.
name|getBooleanStats
argument_list|()
decl_stmt|;
name|appendColumnStatsNoFormatting
argument_list|(
name|colBuffer
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|bcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|bcsd
operator|.
name|getNumTrues
argument_list|()
argument_list|,
name|bcsd
operator|.
name|getNumFalses
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csd
operator|.
name|isSetDecimalStats
argument_list|()
condition|)
block|{
name|DecimalColumnStatsData
name|dcsd
init|=
name|csd
operator|.
name|getDecimalStats
argument_list|()
decl_stmt|;
name|appendColumnStatsNoFormatting
argument_list|(
name|colBuffer
argument_list|,
name|convertToString
argument_list|(
name|dcsd
operator|.
name|getLowValue
argument_list|()
argument_list|)
argument_list|,
name|convertToString
argument_list|(
name|dcsd
operator|.
name|getHighValue
argument_list|()
argument_list|)
argument_list|,
name|dcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|dcsd
operator|.
name|getNumDVs
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csd
operator|.
name|isSetDoubleStats
argument_list|()
condition|)
block|{
name|DoubleColumnStatsData
name|dcsd
init|=
name|csd
operator|.
name|getDoubleStats
argument_list|()
decl_stmt|;
name|appendColumnStatsNoFormatting
argument_list|(
name|colBuffer
argument_list|,
name|dcsd
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|dcsd
operator|.
name|getHighValue
argument_list|()
argument_list|,
name|dcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|dcsd
operator|.
name|getNumDVs
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csd
operator|.
name|isSetLongStats
argument_list|()
condition|)
block|{
name|LongColumnStatsData
name|lcsd
init|=
name|csd
operator|.
name|getLongStats
argument_list|()
decl_stmt|;
name|appendColumnStatsNoFormatting
argument_list|(
name|colBuffer
argument_list|,
name|lcsd
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|lcsd
operator|.
name|getHighValue
argument_list|()
argument_list|,
name|lcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|lcsd
operator|.
name|getNumDVs
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csd
operator|.
name|isSetDateStats
argument_list|()
condition|)
block|{
name|DateColumnStatsData
name|dcsd
init|=
name|csd
operator|.
name|getDateStats
argument_list|()
decl_stmt|;
name|appendColumnStatsNoFormatting
argument_list|(
name|colBuffer
argument_list|,
name|convertToString
argument_list|(
name|dcsd
operator|.
name|getLowValue
argument_list|()
argument_list|)
argument_list|,
name|convertToString
argument_list|(
name|dcsd
operator|.
name|getHighValue
argument_list|()
argument_list|)
argument_list|,
name|dcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|dcsd
operator|.
name|getNumDVs
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|appendColumnStatsNoFormatting
argument_list|(
name|colBuffer
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
name|colBuffer
operator|.
name|append
argument_list|(
name|comment
operator|==
literal|null
condition|?
literal|""
else|:
name|HiveStringUtils
operator|.
name|escapeJava
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|colBuffer
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|getIndexInformation
parameter_list|(
name|Index
name|index
parameter_list|,
name|boolean
name|isOutputPadded
parameter_list|)
block|{
name|StringBuilder
name|indexInfo
init|=
operator|new
name|StringBuilder
argument_list|(
name|DEFAULT_STRINGBUILDER_SIZE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|indexColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|indexColumns
operator|.
name|add
argument_list|(
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|indexColumns
operator|.
name|add
argument_list|(
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|)
expr_stmt|;
comment|// index key names
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|indexKeys
init|=
name|index
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|StringBuilder
name|keyString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|FieldSchema
name|key
range|:
name|indexKeys
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|keyString
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|keyString
operator|.
name|append
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|indexColumns
operator|.
name|add
argument_list|(
name|keyString
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|indexColumns
operator|.
name|add
argument_list|(
name|index
operator|.
name|getIndexTableName
argument_list|()
argument_list|)
expr_stmt|;
comment|// index type
name|String
name|indexHandlerClass
init|=
name|index
operator|.
name|getIndexHandlerClass
argument_list|()
decl_stmt|;
name|IndexType
name|indexType
init|=
name|HiveIndex
operator|.
name|getIndexTypeByClassName
argument_list|(
name|indexHandlerClass
argument_list|)
decl_stmt|;
name|indexColumns
operator|.
name|add
argument_list|(
name|indexType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|comment
init|=
name|index
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"comment"
argument_list|)
decl_stmt|;
name|indexColumns
operator|.
name|add
argument_list|(
name|comment
operator|==
literal|null
condition|?
literal|null
else|:
name|HiveStringUtils
operator|.
name|escapeJava
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
name|indexColumns
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|indexInfo
argument_list|,
name|isOutputPadded
argument_list|)
expr_stmt|;
return|return
name|indexInfo
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getConstraintsInformation
parameter_list|(
name|PrimaryKeyInfo
name|pkInfo
parameter_list|,
name|ForeignKeyInfo
name|fkInfo
parameter_list|)
block|{
name|StringBuilder
name|constraintsInfo
init|=
operator|new
name|StringBuilder
argument_list|(
name|DEFAULT_STRINGBUILDER_SIZE
argument_list|)
decl_stmt|;
name|constraintsInfo
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
operator|.
name|append
argument_list|(
literal|"# Constraints"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
if|if
condition|(
name|pkInfo
operator|!=
literal|null
operator|&&
operator|!
name|pkInfo
operator|.
name|getColNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|constraintsInfo
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
operator|.
name|append
argument_list|(
literal|"# Primary Key"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|getPrimaryKeyInformation
argument_list|(
name|constraintsInfo
argument_list|,
name|pkInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fkInfo
operator|!=
literal|null
operator|&&
operator|!
name|fkInfo
operator|.
name|getForeignKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|constraintsInfo
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
operator|.
name|append
argument_list|(
literal|"# Foreign Keys"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|getForeignKeysInformation
argument_list|(
name|constraintsInfo
argument_list|,
name|fkInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|constraintsInfo
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|getPrimaryKeyInformation
parameter_list|(
name|StringBuilder
name|constraintsInfo
parameter_list|,
name|PrimaryKeyInfo
name|pkInfo
parameter_list|)
block|{
name|formatOutput
argument_list|(
literal|"Table:"
argument_list|,
name|pkInfo
operator|.
name|getDatabaseName
argument_list|()
operator|+
literal|"."
operator|+
name|pkInfo
operator|.
name|getTableName
argument_list|()
argument_list|,
name|constraintsInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Constraint Name:"
argument_list|,
name|pkInfo
operator|.
name|getConstraintName
argument_list|()
argument_list|,
name|constraintsInfo
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|colNames
init|=
name|pkInfo
operator|.
name|getColNames
argument_list|()
decl_stmt|;
specifier|final
name|String
name|columnNames
init|=
literal|"Column Names:"
decl_stmt|;
name|constraintsInfo
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|columnNames
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
if|if
condition|(
name|colNames
operator|!=
literal|null
operator|&&
name|colNames
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|formatOutput
argument_list|(
name|colNames
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|colNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|constraintsInfo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|getForeignKeyColInformation
parameter_list|(
name|StringBuilder
name|constraintsInfo
parameter_list|,
name|ForeignKeyCol
name|fkCol
parameter_list|)
block|{
name|String
index|[]
name|fkcFields
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|fkcFields
index|[
literal|0
index|]
operator|=
literal|"Parent Column Name:"
operator|+
name|fkCol
operator|.
name|parentDatabaseName
operator|+
literal|"."
operator|+
name|fkCol
operator|.
name|parentTableName
operator|+
literal|"."
operator|+
name|fkCol
operator|.
name|parentColName
expr_stmt|;
name|fkcFields
index|[
literal|1
index|]
operator|=
literal|"Column Name:"
operator|+
name|fkCol
operator|.
name|childColName
expr_stmt|;
name|fkcFields
index|[
literal|2
index|]
operator|=
literal|"Key Sequence:"
operator|+
name|fkCol
operator|.
name|position
expr_stmt|;
name|formatOutput
argument_list|(
name|fkcFields
argument_list|,
name|constraintsInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|getForeignKeyRelInformation
parameter_list|(
name|StringBuilder
name|constraintsInfo
parameter_list|,
name|String
name|constraintName
parameter_list|,
name|List
argument_list|<
name|ForeignKeyCol
argument_list|>
name|fkRel
parameter_list|)
block|{
name|formatOutput
argument_list|(
literal|"Constraint Name:"
argument_list|,
name|constraintName
argument_list|,
name|constraintsInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|fkRel
operator|!=
literal|null
operator|&&
name|fkRel
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ForeignKeyCol
name|fkc
range|:
name|fkRel
control|)
block|{
name|getForeignKeyColInformation
argument_list|(
name|constraintsInfo
argument_list|,
name|fkc
argument_list|)
expr_stmt|;
block|}
block|}
name|constraintsInfo
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|getForeignKeysInformation
parameter_list|(
name|StringBuilder
name|constraintsInfo
parameter_list|,
name|ForeignKeyInfo
name|fkInfo
parameter_list|)
block|{
name|formatOutput
argument_list|(
literal|"Table:"
argument_list|,
name|fkInfo
operator|.
name|getChildDatabaseName
argument_list|()
operator|+
literal|"."
operator|+
name|fkInfo
operator|.
name|getChildTableName
argument_list|()
argument_list|,
name|constraintsInfo
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ForeignKeyCol
argument_list|>
argument_list|>
name|foreignKeys
init|=
name|fkInfo
operator|.
name|getForeignKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|foreignKeys
operator|!=
literal|null
operator|&&
name|foreignKeys
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ForeignKeyCol
argument_list|>
argument_list|>
name|me
range|:
name|foreignKeys
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|getForeignKeyRelInformation
argument_list|(
name|constraintsInfo
argument_list|,
name|me
operator|.
name|getKey
argument_list|()
argument_list|,
name|me
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|String
name|getPartitionInformation
parameter_list|(
name|Partition
name|part
parameter_list|)
block|{
name|StringBuilder
name|tableInfo
init|=
operator|new
name|StringBuilder
argument_list|(
name|DEFAULT_STRINGBUILDER_SIZE
argument_list|)
decl_stmt|;
comment|// Table Metadata
name|tableInfo
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
operator|.
name|append
argument_list|(
literal|"# Detailed Partition Information"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|getPartitionMetaDataInformation
argument_list|(
name|tableInfo
argument_list|,
name|part
argument_list|)
expr_stmt|;
comment|// Storage information.
if|if
condition|(
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getTableType
argument_list|()
operator|!=
name|TableType
operator|.
name|VIRTUAL_VIEW
condition|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
operator|.
name|append
argument_list|(
literal|"# Storage Information"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|getStorageDescriptorInfo
argument_list|(
name|tableInfo
argument_list|,
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tableInfo
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getTableInformation
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|isOutputPadded
parameter_list|)
block|{
name|StringBuilder
name|tableInfo
init|=
operator|new
name|StringBuilder
argument_list|(
name|DEFAULT_STRINGBUILDER_SIZE
argument_list|)
decl_stmt|;
comment|// Table Metadata
name|tableInfo
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
operator|.
name|append
argument_list|(
literal|"# Detailed Table Information"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|getTableMetaDataInformation
argument_list|(
name|tableInfo
argument_list|,
name|table
argument_list|,
name|isOutputPadded
argument_list|)
expr_stmt|;
comment|// Storage information.
name|tableInfo
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
operator|.
name|append
argument_list|(
literal|"# Storage Information"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|getStorageDescriptorInfo
argument_list|(
name|tableInfo
argument_list|,
name|table
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|isView
argument_list|()
operator|||
name|table
operator|.
name|isMaterializedView
argument_list|()
condition|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
operator|.
name|append
argument_list|(
literal|"# View Information"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|getViewInfo
argument_list|(
name|tableInfo
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
return|return
name|tableInfo
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|getViewInfo
parameter_list|(
name|StringBuilder
name|tableInfo
parameter_list|,
name|Table
name|tbl
parameter_list|)
block|{
name|formatOutput
argument_list|(
literal|"View Original Text:"
argument_list|,
name|tbl
operator|.
name|getViewOriginalText
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"View Expanded Text:"
argument_list|,
name|tbl
operator|.
name|getViewExpandedText
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"View Rewrite Enabled:"
argument_list|,
name|tbl
operator|.
name|isRewriteEnabled
argument_list|()
condition|?
literal|"Yes"
else|:
literal|"No"
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|getStorageDescriptorInfo
parameter_list|(
name|StringBuilder
name|tableInfo
parameter_list|,
name|StorageDescriptor
name|storageDesc
parameter_list|)
block|{
name|formatOutput
argument_list|(
literal|"SerDe Library:"
argument_list|,
name|storageDesc
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"InputFormat:"
argument_list|,
name|storageDesc
operator|.
name|getInputFormat
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"OutputFormat:"
argument_list|,
name|storageDesc
operator|.
name|getOutputFormat
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Compressed:"
argument_list|,
name|storageDesc
operator|.
name|isCompressed
argument_list|()
condition|?
literal|"Yes"
else|:
literal|"No"
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Num Buckets:"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|storageDesc
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Bucket Columns:"
argument_list|,
name|storageDesc
operator|.
name|getBucketCols
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Sort Columns:"
argument_list|,
name|storageDesc
operator|.
name|getSortCols
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|storageDesc
operator|.
name|isStoredAsSubDirectories
argument_list|()
condition|)
block|{
comment|// optional parameter
name|formatOutput
argument_list|(
literal|"Stored As SubDirectories:"
argument_list|,
literal|"Yes"
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|storageDesc
operator|.
name|getSkewedInfo
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|skewedColNames
init|=
name|sortedList
argument_list|(
name|storageDesc
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColNames
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|skewedColNames
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|skewedColNames
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|formatOutput
argument_list|(
literal|"Skewed Columns:"
argument_list|,
name|skewedColNames
operator|.
name|toString
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|skewedColValues
init|=
name|sortedList
argument_list|(
name|storageDesc
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValues
argument_list|()
argument_list|,
operator|new
name|VectorComparator
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|skewedColValues
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|skewedColValues
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|formatOutput
argument_list|(
literal|"Skewed Values:"
argument_list|,
name|skewedColValues
operator|.
name|toString
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|skewedColMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
operator|new
name|VectorComparator
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|skewedColMap
operator|.
name|putAll
argument_list|(
name|storageDesc
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|skewedColMap
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|skewedColMap
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|formatOutput
argument_list|(
literal|"Skewed Value to Path:"
argument_list|,
name|skewedColMap
operator|.
name|toString
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|truncatedSkewedColMap
init|=
operator|new
name|TreeMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|(
operator|new
name|VectorComparator
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// walk through existing map to truncate path so that test won't mask it
comment|// then we can verify location is right
name|Set
argument_list|<
name|Entry
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|>
name|entries
init|=
name|skewedColMap
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|truncatedSkewedColMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|PlanUtils
operator|.
name|removePrefixFromWarehouseConfig
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|formatOutput
argument_list|(
literal|"Skewed Value to Truncated Path:"
argument_list|,
name|truncatedSkewedColMap
operator|.
name|toString
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|storageDesc
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParametersSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
literal|"Storage Desc Params:"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|displayAllParameters
argument_list|(
name|storageDesc
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|getTableMetaDataInformation
parameter_list|(
name|StringBuilder
name|tableInfo
parameter_list|,
name|Table
name|tbl
parameter_list|,
name|boolean
name|isOutputPadded
parameter_list|)
block|{
name|formatOutput
argument_list|(
literal|"Database:"
argument_list|,
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Owner:"
argument_list|,
name|tbl
operator|.
name|getOwner
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"CreateTime:"
argument_list|,
name|formatDate
argument_list|(
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getCreateTime
argument_list|()
argument_list|)
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"LastAccessTime:"
argument_list|,
name|formatDate
argument_list|(
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Retention:"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|tbl
operator|.
name|getRetention
argument_list|()
argument_list|)
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tbl
operator|.
name|isView
argument_list|()
condition|)
block|{
name|formatOutput
argument_list|(
literal|"Location:"
argument_list|,
name|tbl
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
name|formatOutput
argument_list|(
literal|"Table Type:"
argument_list|,
name|tbl
operator|.
name|getTableType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
literal|"Table Parameters:"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|displayAllParameters
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tableInfo
argument_list|,
literal|false
argument_list|,
name|isOutputPadded
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|getPartitionMetaDataInformation
parameter_list|(
name|StringBuilder
name|tableInfo
parameter_list|,
name|Partition
name|part
parameter_list|)
block|{
name|formatOutput
argument_list|(
literal|"Partition Value:"
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Database:"
argument_list|,
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Table:"
argument_list|,
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"CreateTime:"
argument_list|,
name|formatDate
argument_list|(
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getCreateTime
argument_list|()
argument_list|)
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"LastAccessTime:"
argument_list|,
name|formatDate
argument_list|(
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Location:"
argument_list|,
name|part
operator|.
name|getLocation
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
literal|"Partition Parameters:"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|displayAllParameters
argument_list|(
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Display key, value pairs of the parameters. The characters will be escaped    * including unicode.    */
specifier|private
specifier|static
name|void
name|displayAllParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|StringBuilder
name|tableInfo
parameter_list|)
block|{
name|displayAllParameters
argument_list|(
name|params
argument_list|,
name|tableInfo
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Display key, value pairs of the parameters. The characters will be escaped    * including unicode if escapeUnicode is true; otherwise the characters other    * than unicode will be escaped.    */
specifier|private
specifier|static
name|void
name|displayAllParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|StringBuilder
name|tableInfo
parameter_list|,
name|boolean
name|escapeUnicode
parameter_list|,
name|boolean
name|isOutputPadded
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|params
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|keys
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
comment|// Ensures all params are indented.
name|formatOutput
argument_list|(
name|key
argument_list|,
name|escapeUnicode
condition|?
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
else|:
name|HiveStringUtils
operator|.
name|escapeJava
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|,
name|tableInfo
argument_list|,
name|isOutputPadded
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|String
name|getComment
parameter_list|(
name|FieldSchema
name|col
parameter_list|)
block|{
return|return
name|col
operator|.
name|getComment
argument_list|()
operator|!=
literal|null
condition|?
name|col
operator|.
name|getComment
argument_list|()
else|:
literal|""
return|;
block|}
comment|/**    * Compares to lists of object T as vectors    *    * @param<T> the base object type. Must be {@link Comparable}    */
specifier|private
specifier|static
class|class
name|VectorComparator
parameter_list|<
name|T
extends|extends
name|Comparable
parameter_list|<
name|T
parameter_list|>
parameter_list|>
implements|implements
name|Comparator
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|listA
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|listB
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listA
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<
name|listB
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|T
name|valA
init|=
name|listA
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|T
name|valB
init|=
name|listB
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|valA
operator|!=
literal|null
condition|)
block|{
name|int
name|ret
init|=
name|valA
operator|.
name|compareTo
argument_list|(
name|valB
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
return|return
name|ret
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|valB
operator|!=
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|listA
operator|.
name|size
argument_list|()
argument_list|,
name|listB
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns a sorted version of the given list    */
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|sortedList
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
return|return
name|list
return|;
block|}
name|ArrayList
argument_list|<
name|T
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Returns a sorted version of the given list, using the provided comparator    */
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|sortedList
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|Comparator
argument_list|<
name|T
argument_list|>
name|comp
parameter_list|)
block|{
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
return|return
name|list
return|;
block|}
name|ArrayList
argument_list|<
name|T
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ret
argument_list|,
name|comp
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|String
name|formatDate
parameter_list|(
name|long
name|timeInSeconds
parameter_list|)
block|{
if|if
condition|(
name|timeInSeconds
operator|!=
literal|0
condition|)
block|{
name|Date
name|date
init|=
operator|new
name|Date
argument_list|(
name|timeInSeconds
operator|*
literal|1000
argument_list|)
decl_stmt|;
return|return
name|date
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|"UNKNOWN"
return|;
block|}
comment|/**    * Prints a row with the given fields into the builder    * The last field could be a multiline field, and the extra lines should be padded    * @param fields The fields to print    * @param tableInfo The target builder    * @param isLastLinePadded Is the last field could be printed in multiple lines, if contains    *                         newlines?    */
specifier|private
specifier|static
name|void
name|formatOutput
parameter_list|(
name|String
index|[]
name|fields
parameter_list|,
name|StringBuilder
name|tableInfo
parameter_list|,
name|boolean
name|isLastLinePadded
parameter_list|)
block|{
name|int
index|[]
name|paddings
init|=
operator|new
name|int
index|[
name|fields
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|length
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fields
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|tableInfo
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|fields
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|paddings
index|[
name|i
index|]
operator|=
name|ALIGNMENT
operator|>
name|fields
index|[
name|i
index|]
operator|.
name|length
argument_list|()
condition|?
name|ALIGNMENT
else|:
name|fields
index|[
name|i
index|]
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fields
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|value
init|=
name|fields
index|[
name|fields
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|String
name|unescapedValue
init|=
operator|(
name|isLastLinePadded
operator|&&
name|value
operator|!=
literal|null
operator|)
condition|?
name|value
operator|.
name|replaceAll
argument_list|(
literal|"\\\\n|\\\\r|\\\\r\\\\n"
argument_list|,
literal|"\n"
argument_list|)
else|:
name|value
decl_stmt|;
name|indentMultilineValue
argument_list|(
name|unescapedValue
argument_list|,
name|tableInfo
argument_list|,
name|paddings
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tableInfo
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Prints a row the given fields to a formatted line    * @param fields The fields to print    * @param tableInfo The target builder    */
specifier|private
specifier|static
name|void
name|formatOutput
parameter_list|(
name|String
index|[]
name|fields
parameter_list|,
name|StringBuilder
name|tableInfo
parameter_list|)
block|{
name|formatOutput
argument_list|(
name|fields
argument_list|,
name|tableInfo
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prints the name value pair, and if the value contains newlines, it add one more empty field    * before the two values (Assumes, the name value pair is already indented with it)    * @param name The field name to print    * @param value The value to print - might contain newlines    * @param tableInfo The target builder    */
specifier|private
specifier|static
name|void
name|formatOutput
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|StringBuilder
name|tableInfo
parameter_list|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|int
name|colNameLength
init|=
name|ALIGNMENT
operator|>
name|name
operator|.
name|length
argument_list|()
condition|?
name|ALIGNMENT
else|:
name|name
operator|.
name|length
argument_list|()
decl_stmt|;
name|indentMultilineValue
argument_list|(
name|value
argument_list|,
name|tableInfo
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
name|colNameLength
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prints the name value pair    * It the output is padded then unescape the value, so it could be printed in multiple lines.    * In this case it assumes the pair is already indented with a field delimiter    * @param name The field name to print    * @param value The value t print    * @param tableInfo The target builder    * @param isOutputPadded Should the value printed as a padded string?    */
specifier|protected
specifier|static
name|void
name|formatOutput
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|StringBuilder
name|tableInfo
parameter_list|,
name|boolean
name|isOutputPadded
parameter_list|)
block|{
name|String
name|unescapedValue
init|=
operator|(
name|isOutputPadded
operator|&&
name|value
operator|!=
literal|null
operator|)
condition|?
name|value
operator|.
name|replaceAll
argument_list|(
literal|"\\\\n|\\\\r|\\\\r\\\\n"
argument_list|,
literal|"\n"
argument_list|)
else|:
name|value
decl_stmt|;
name|formatOutput
argument_list|(
name|name
argument_list|,
name|unescapedValue
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|formatWithIndentation
parameter_list|(
name|String
name|colName
parameter_list|,
name|String
name|colType
parameter_list|,
name|String
name|colComment
parameter_list|,
name|StringBuilder
name|tableInfo
parameter_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
parameter_list|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|colName
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|tableInfo
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|colType
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
if|if
condition|(
name|colStats
operator|!=
literal|null
condition|)
block|{
name|ColumnStatisticsObj
name|cso
init|=
name|getColumnStatisticsObject
argument_list|(
name|colName
argument_list|,
name|colType
argument_list|,
name|colStats
argument_list|)
decl_stmt|;
if|if
condition|(
name|cso
operator|!=
literal|null
condition|)
block|{
name|ColumnStatisticsData
name|csd
init|=
name|cso
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
if|if
condition|(
name|csd
operator|.
name|isSetBinaryStats
argument_list|()
condition|)
block|{
name|BinaryColumnStatsData
name|bcsd
init|=
name|csd
operator|.
name|getBinaryStats
argument_list|()
decl_stmt|;
name|appendColumnStats
argument_list|(
name|tableInfo
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|bcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|,
literal|""
argument_list|,
name|bcsd
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
name|bcsd
operator|.
name|getMaxColLen
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csd
operator|.
name|isSetStringStats
argument_list|()
condition|)
block|{
name|StringColumnStatsData
name|scsd
init|=
name|csd
operator|.
name|getStringStats
argument_list|()
decl_stmt|;
name|appendColumnStats
argument_list|(
name|tableInfo
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|scsd
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|scsd
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|scsd
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
name|scsd
operator|.
name|getMaxColLen
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csd
operator|.
name|isSetBooleanStats
argument_list|()
condition|)
block|{
name|BooleanColumnStatsData
name|bcsd
init|=
name|csd
operator|.
name|getBooleanStats
argument_list|()
decl_stmt|;
name|appendColumnStats
argument_list|(
name|tableInfo
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|bcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|bcsd
operator|.
name|getNumTrues
argument_list|()
argument_list|,
name|bcsd
operator|.
name|getNumFalses
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csd
operator|.
name|isSetDecimalStats
argument_list|()
condition|)
block|{
name|DecimalColumnStatsData
name|dcsd
init|=
name|csd
operator|.
name|getDecimalStats
argument_list|()
decl_stmt|;
name|appendColumnStats
argument_list|(
name|tableInfo
argument_list|,
name|convertToString
argument_list|(
name|dcsd
operator|.
name|getLowValue
argument_list|()
argument_list|)
argument_list|,
name|convertToString
argument_list|(
name|dcsd
operator|.
name|getHighValue
argument_list|()
argument_list|)
argument_list|,
name|dcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|dcsd
operator|.
name|getNumDVs
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csd
operator|.
name|isSetDoubleStats
argument_list|()
condition|)
block|{
name|DoubleColumnStatsData
name|dcsd
init|=
name|csd
operator|.
name|getDoubleStats
argument_list|()
decl_stmt|;
name|appendColumnStats
argument_list|(
name|tableInfo
argument_list|,
name|dcsd
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|dcsd
operator|.
name|getHighValue
argument_list|()
argument_list|,
name|dcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|dcsd
operator|.
name|getNumDVs
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csd
operator|.
name|isSetLongStats
argument_list|()
condition|)
block|{
name|LongColumnStatsData
name|lcsd
init|=
name|csd
operator|.
name|getLongStats
argument_list|()
decl_stmt|;
name|appendColumnStats
argument_list|(
name|tableInfo
argument_list|,
name|lcsd
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|lcsd
operator|.
name|getHighValue
argument_list|()
argument_list|,
name|lcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|lcsd
operator|.
name|getNumDVs
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csd
operator|.
name|isSetDateStats
argument_list|()
condition|)
block|{
name|DateColumnStatsData
name|dcsd
init|=
name|csd
operator|.
name|getDateStats
argument_list|()
decl_stmt|;
name|appendColumnStats
argument_list|(
name|tableInfo
argument_list|,
name|convertToString
argument_list|(
name|dcsd
operator|.
name|getLowValue
argument_list|()
argument_list|)
argument_list|,
name|convertToString
argument_list|(
name|dcsd
operator|.
name|getHighValue
argument_list|()
argument_list|)
argument_list|,
name|dcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|dcsd
operator|.
name|getNumDVs
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|appendColumnStats
argument_list|(
name|tableInfo
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|colNameLength
init|=
name|ALIGNMENT
operator|>
name|colName
operator|.
name|length
argument_list|()
condition|?
name|ALIGNMENT
else|:
name|colName
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|colTypeLength
init|=
name|ALIGNMENT
operator|>
name|colType
operator|.
name|length
argument_list|()
condition|?
name|ALIGNMENT
else|:
name|colType
operator|.
name|length
argument_list|()
decl_stmt|;
name|indentMultilineValue
argument_list|(
name|colComment
argument_list|,
name|tableInfo
argument_list|,
operator|new
name|int
index|[]
block|{
name|colNameLength
block|,
name|colTypeLength
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * comment indent processing for multi-line values    * values should be indented the same amount on each line    * if the first line comment starts indented by k,    * the following line comments should also be indented by k    * @param value the value to write    * @param tableInfo the buffer to write to    * @param columnWidths the widths of the previous columns    * @param printNull print null as a string, or do not print anything    */
specifier|private
specifier|static
name|void
name|indentMultilineValue
parameter_list|(
name|String
name|value
parameter_list|,
name|StringBuilder
name|tableInfo
parameter_list|,
name|int
index|[]
name|columnWidths
parameter_list|,
name|boolean
name|printNull
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|printNull
condition|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tableInfo
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|valueSegments
init|=
name|value
operator|.
name|split
argument_list|(
literal|"\n|\r|\r\n"
argument_list|)
decl_stmt|;
name|tableInfo
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|valueSegments
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|valueSegments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|printPadding
argument_list|(
name|tableInfo
argument_list|,
name|columnWidths
argument_list|)
expr_stmt|;
name|tableInfo
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|valueSegments
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Print the rigth padding, with the given column widths    * @param tableInfo The buffer to write to    * @param columnWidths The column widths    */
specifier|private
specifier|static
name|void
name|printPadding
parameter_list|(
name|StringBuilder
name|tableInfo
parameter_list|,
name|int
index|[]
name|columnWidths
parameter_list|)
block|{
for|for
control|(
name|int
name|columnWidth
range|:
name|columnWidths
control|)
block|{
if|if
condition|(
name|columnWidth
operator|==
literal|0
condition|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tableInfo
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%"
operator|+
name|columnWidth
operator|+
literal|"s"
operator|+
name|FIELD_DELIM
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|appendColumnStats
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|Object
name|min
parameter_list|,
name|Object
name|max
parameter_list|,
name|Object
name|numNulls
parameter_list|,
name|Object
name|ndv
parameter_list|,
name|Object
name|avgColLen
parameter_list|,
name|Object
name|maxColLen
parameter_list|,
name|Object
name|numTrues
parameter_list|,
name|Object
name|numFalses
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|min
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|max
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|numNulls
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|ndv
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|avgColLen
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|maxColLen
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|numTrues
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|numFalses
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|appendColumnStatsNoFormatting
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|Object
name|min
parameter_list|,
name|Object
name|max
parameter_list|,
name|Object
name|numNulls
parameter_list|,
name|Object
name|ndv
parameter_list|,
name|Object
name|avgColLen
parameter_list|,
name|Object
name|maxColLen
parameter_list|,
name|Object
name|numTrues
parameter_list|,
name|Object
name|numFalses
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|min
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|max
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|numNulls
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ndv
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|avgColLen
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|maxColLen
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|numTrues
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|numFalses
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|getColumnsHeader
parameter_list|(
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
parameter_list|)
block|{
name|boolean
name|showColStats
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|colStats
operator|!=
literal|null
condition|)
block|{
name|showColStats
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|DescTableDesc
operator|.
name|getSchema
argument_list|(
name|showColStats
argument_list|)
operator|.
name|split
argument_list|(
literal|"#"
argument_list|)
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getIndexColumnsHeader
parameter_list|()
block|{
name|StringBuilder
name|indexCols
init|=
operator|new
name|StringBuilder
argument_list|(
name|DEFAULT_STRINGBUILDER_SIZE
argument_list|)
decl_stmt|;
name|formatOutput
argument_list|(
name|ShowIndexesDesc
operator|.
name|getSchema
argument_list|()
operator|.
name|split
argument_list|(
literal|"#"
argument_list|)
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|,
name|indexCols
argument_list|)
expr_stmt|;
return|return
name|indexCols
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|MetaDataFormatter
name|getFormatter
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
if|if
condition|(
literal|"json"
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DDL_OUTPUT_FORMAT
operator|.
name|varname
argument_list|,
literal|"text"
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|new
name|JsonMetaDataFormatter
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|TextMetaDataFormatter
argument_list|(
name|conf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|CLIPRETTYOUTPUTNUMCOLS
argument_list|)
argument_list|,
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_DISPLAY_PARTITION_COLUMNS_SEPARATELY
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

