begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|formatting
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SkewedValueList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|HiveIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|HiveIndex
operator|.
name|IndexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DescTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ShowIndexesDesc
import|;
end_import

begin_comment
comment|/**  * This class provides methods to format table and index information.  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|MetaDataFormatUtils
block|{
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_DELIM
init|=
literal|"\t"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LINE_DELIM
init|=
literal|"\n"
decl_stmt|;
specifier|static
specifier|final
name|int
name|DEFAULT_STRINGBUILDER_SIZE
init|=
literal|2048
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ALIGNMENT
init|=
literal|20
decl_stmt|;
specifier|private
name|MetaDataFormatUtils
parameter_list|()
block|{   }
specifier|private
specifier|static
name|void
name|formatColumnsHeader
parameter_list|(
name|StringBuilder
name|columnInformation
parameter_list|)
block|{
name|columnInformation
operator|.
name|append
argument_list|(
literal|"# "
argument_list|)
expr_stmt|;
comment|// Easy for shell scripts to ignore
name|formatOutput
argument_list|(
name|getColumnsHeader
argument_list|()
argument_list|,
name|columnInformation
argument_list|)
expr_stmt|;
name|columnInformation
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|getAllColumnsInformation
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|boolean
name|printHeader
parameter_list|)
block|{
name|StringBuilder
name|columnInformation
init|=
operator|new
name|StringBuilder
argument_list|(
name|DEFAULT_STRINGBUILDER_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|printHeader
condition|)
block|{
name|formatColumnsHeader
argument_list|(
name|columnInformation
argument_list|)
expr_stmt|;
block|}
name|formatAllFields
argument_list|(
name|columnInformation
argument_list|,
name|cols
argument_list|)
expr_stmt|;
return|return
name|columnInformation
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getAllColumnsInformation
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|,
name|boolean
name|printHeader
parameter_list|)
block|{
name|StringBuilder
name|columnInformation
init|=
operator|new
name|StringBuilder
argument_list|(
name|DEFAULT_STRINGBUILDER_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|printHeader
condition|)
block|{
name|formatColumnsHeader
argument_list|(
name|columnInformation
argument_list|)
expr_stmt|;
block|}
name|formatAllFields
argument_list|(
name|columnInformation
argument_list|,
name|cols
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|partCols
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|partCols
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|columnInformation
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
operator|.
name|append
argument_list|(
literal|"# Partition Information"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|formatColumnsHeader
argument_list|(
name|columnInformation
argument_list|)
expr_stmt|;
name|formatAllFields
argument_list|(
name|columnInformation
argument_list|,
name|partCols
argument_list|)
expr_stmt|;
block|}
return|return
name|columnInformation
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|formatAllFields
parameter_list|(
name|StringBuilder
name|tableInfo
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|)
block|{
for|for
control|(
name|FieldSchema
name|col
range|:
name|cols
control|)
block|{
name|formatOutput
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|,
name|col
operator|.
name|getType
argument_list|()
argument_list|,
name|getComment
argument_list|(
name|col
argument_list|)
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getAllColumnsInformation
parameter_list|(
name|Index
name|index
parameter_list|)
block|{
name|StringBuilder
name|indexInfo
init|=
operator|new
name|StringBuilder
argument_list|(
name|DEFAULT_STRINGBUILDER_SIZE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|indexColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|indexColumns
operator|.
name|add
argument_list|(
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|indexColumns
operator|.
name|add
argument_list|(
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|)
expr_stmt|;
comment|// index key names
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|indexKeys
init|=
name|index
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|StringBuilder
name|keyString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|FieldSchema
name|key
range|:
name|indexKeys
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|keyString
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|keyString
operator|.
name|append
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|indexColumns
operator|.
name|add
argument_list|(
name|keyString
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|indexColumns
operator|.
name|add
argument_list|(
name|index
operator|.
name|getIndexTableName
argument_list|()
argument_list|)
expr_stmt|;
comment|// index type
name|String
name|indexHandlerClass
init|=
name|index
operator|.
name|getIndexHandlerClass
argument_list|()
decl_stmt|;
name|IndexType
name|indexType
init|=
name|HiveIndex
operator|.
name|getIndexTypeByClassName
argument_list|(
name|indexHandlerClass
argument_list|)
decl_stmt|;
name|indexColumns
operator|.
name|add
argument_list|(
name|indexType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|indexColumns
operator|.
name|add
argument_list|(
name|index
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
name|indexColumns
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|indexInfo
argument_list|)
expr_stmt|;
return|return
name|indexInfo
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getPartitionInformation
parameter_list|(
name|Partition
name|part
parameter_list|)
block|{
name|StringBuilder
name|tableInfo
init|=
operator|new
name|StringBuilder
argument_list|(
name|DEFAULT_STRINGBUILDER_SIZE
argument_list|)
decl_stmt|;
comment|// Table Metadata
name|tableInfo
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
operator|.
name|append
argument_list|(
literal|"# Detailed Partition Information"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|getPartitionMetaDataInformation
argument_list|(
name|tableInfo
argument_list|,
name|part
argument_list|)
expr_stmt|;
comment|// Storage information.
if|if
condition|(
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getTableType
argument_list|()
operator|!=
name|TableType
operator|.
name|VIRTUAL_VIEW
condition|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
operator|.
name|append
argument_list|(
literal|"# Storage Information"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|getStorageDescriptorInfo
argument_list|(
name|tableInfo
argument_list|,
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tableInfo
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getTableInformation
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
name|StringBuilder
name|tableInfo
init|=
operator|new
name|StringBuilder
argument_list|(
name|DEFAULT_STRINGBUILDER_SIZE
argument_list|)
decl_stmt|;
comment|// Table Metadata
name|tableInfo
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
operator|.
name|append
argument_list|(
literal|"# Detailed Table Information"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|getTableMetaDataInformation
argument_list|(
name|tableInfo
argument_list|,
name|table
argument_list|)
expr_stmt|;
comment|// Storage information.
name|tableInfo
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
operator|.
name|append
argument_list|(
literal|"# Storage Information"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|getStorageDescriptorInfo
argument_list|(
name|tableInfo
argument_list|,
name|table
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|isView
argument_list|()
condition|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
operator|.
name|append
argument_list|(
literal|"# View Information"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|getViewInfo
argument_list|(
name|tableInfo
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
return|return
name|tableInfo
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|getViewInfo
parameter_list|(
name|StringBuilder
name|tableInfo
parameter_list|,
name|Table
name|tbl
parameter_list|)
block|{
name|formatOutput
argument_list|(
literal|"View Original Text:"
argument_list|,
name|tbl
operator|.
name|getViewOriginalText
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"View Expanded Text:"
argument_list|,
name|tbl
operator|.
name|getViewExpandedText
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|getStorageDescriptorInfo
parameter_list|(
name|StringBuilder
name|tableInfo
parameter_list|,
name|StorageDescriptor
name|storageDesc
parameter_list|)
block|{
name|formatOutput
argument_list|(
literal|"SerDe Library:"
argument_list|,
name|storageDesc
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"InputFormat:"
argument_list|,
name|storageDesc
operator|.
name|getInputFormat
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"OutputFormat:"
argument_list|,
name|storageDesc
operator|.
name|getOutputFormat
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Compressed:"
argument_list|,
name|storageDesc
operator|.
name|isCompressed
argument_list|()
condition|?
literal|"Yes"
else|:
literal|"No"
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Num Buckets:"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|storageDesc
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Bucket Columns:"
argument_list|,
name|storageDesc
operator|.
name|getBucketCols
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Sort Columns:"
argument_list|,
name|storageDesc
operator|.
name|getSortCols
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|storageDesc
operator|.
name|isStoredAsSubDirectories
argument_list|()
condition|)
block|{
comment|// optional parameter
name|formatOutput
argument_list|(
literal|"Stored As SubDirectories:"
argument_list|,
literal|"Yes"
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|storageDesc
operator|.
name|getSkewedInfo
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|skewedColNames
init|=
name|storageDesc
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColNames
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|skewedColNames
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|skewedColNames
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|formatOutput
argument_list|(
literal|"Skewed Columns:"
argument_list|,
name|skewedColNames
operator|.
name|toString
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|skewedColValues
init|=
name|storageDesc
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValues
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|skewedColValues
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|skewedColValues
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|formatOutput
argument_list|(
literal|"Skewed Values:"
argument_list|,
name|skewedColValues
operator|.
name|toString
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|SkewedValueList
argument_list|,
name|String
argument_list|>
name|skewedColMap
init|=
name|storageDesc
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|skewedColMap
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|skewedColMap
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|formatOutput
argument_list|(
literal|"Skewed Value to Path:"
argument_list|,
name|skewedColMap
operator|.
name|toString
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|truncatedSkewedColMap
init|=
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// walk through existing map to truncate path so that test won't mask it
comment|// then we can verify location is right
for|for
control|(
name|Entry
argument_list|<
name|SkewedValueList
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|skewedColMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|truncatedSkewedColMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSkewedValueList
argument_list|()
argument_list|,
name|PlanUtils
operator|.
name|removePrefixFromWarehouseConfig
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|formatOutput
argument_list|(
literal|"Skewed Value to Truncated Path:"
argument_list|,
name|truncatedSkewedColMap
operator|.
name|toString
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|storageDesc
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParametersSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
literal|"Storage Desc Params:"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|displayAllParameters
argument_list|(
name|storageDesc
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|getTableMetaDataInformation
parameter_list|(
name|StringBuilder
name|tableInfo
parameter_list|,
name|Table
name|tbl
parameter_list|)
block|{
name|formatOutput
argument_list|(
literal|"Database:"
argument_list|,
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Owner:"
argument_list|,
name|tbl
operator|.
name|getOwner
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"CreateTime:"
argument_list|,
name|formatDate
argument_list|(
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getCreateTime
argument_list|()
argument_list|)
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"LastAccessTime:"
argument_list|,
name|formatDate
argument_list|(
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|String
name|protectMode
init|=
name|tbl
operator|.
name|getProtectMode
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|formatOutput
argument_list|(
literal|"Protect Mode:"
argument_list|,
name|protectMode
operator|==
literal|null
condition|?
literal|"None"
else|:
name|protectMode
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Retention:"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|tbl
operator|.
name|getRetention
argument_list|()
argument_list|)
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tbl
operator|.
name|isView
argument_list|()
condition|)
block|{
name|formatOutput
argument_list|(
literal|"Location:"
argument_list|,
name|tbl
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
name|formatOutput
argument_list|(
literal|"Table Type:"
argument_list|,
name|tbl
operator|.
name|getTableType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
literal|"Table Parameters:"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|displayAllParameters
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|getPartitionMetaDataInformation
parameter_list|(
name|StringBuilder
name|tableInfo
parameter_list|,
name|Partition
name|part
parameter_list|)
block|{
name|formatOutput
argument_list|(
literal|"Partition Value:"
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Database:"
argument_list|,
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Table:"
argument_list|,
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"CreateTime:"
argument_list|,
name|formatDate
argument_list|(
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getCreateTime
argument_list|()
argument_list|)
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"LastAccessTime:"
argument_list|,
name|formatDate
argument_list|(
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|String
name|protectMode
init|=
name|part
operator|.
name|getProtectMode
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|formatOutput
argument_list|(
literal|"Protect Mode:"
argument_list|,
name|protectMode
operator|==
literal|null
condition|?
literal|"None"
else|:
name|protectMode
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
name|formatOutput
argument_list|(
literal|"Location:"
argument_list|,
name|part
operator|.
name|getLocation
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
literal|"Partition Parameters:"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|displayAllParameters
argument_list|(
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|displayAllParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|StringBuilder
name|tableInfo
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|params
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|keys
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
comment|// Ensures all params are indented.
name|formatOutput
argument_list|(
name|key
argument_list|,
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|,
name|tableInfo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|String
name|getComment
parameter_list|(
name|FieldSchema
name|col
parameter_list|)
block|{
return|return
name|col
operator|.
name|getComment
argument_list|()
operator|!=
literal|null
condition|?
name|col
operator|.
name|getComment
argument_list|()
else|:
literal|"None"
return|;
block|}
specifier|private
specifier|static
name|String
name|formatDate
parameter_list|(
name|long
name|timeInSeconds
parameter_list|)
block|{
if|if
condition|(
name|timeInSeconds
operator|!=
literal|0
condition|)
block|{
name|Date
name|date
init|=
operator|new
name|Date
argument_list|(
name|timeInSeconds
operator|*
literal|1000
argument_list|)
decl_stmt|;
return|return
name|date
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|"UNKNOWN"
return|;
block|}
specifier|private
specifier|static
name|void
name|formatOutput
parameter_list|(
name|String
index|[]
name|fields
parameter_list|,
name|StringBuilder
name|tableInfo
parameter_list|)
block|{
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|tableInfo
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|field
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
block|}
name|tableInfo
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|formatOutput
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|StringBuilder
name|tableInfo
parameter_list|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|tableInfo
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|value
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|formatOutput
parameter_list|(
name|String
name|colName
parameter_list|,
name|String
name|colType
parameter_list|,
name|String
name|colComment
parameter_list|,
name|StringBuilder
name|tableInfo
parameter_list|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|colName
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
name|tableInfo
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|colType
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|FIELD_DELIM
argument_list|)
expr_stmt|;
comment|// comment indent processing for multi-line comments
comment|// comments should be indented the same amount on each line
comment|// if the first line comment starts indented by k,
comment|// the following line comments should also be indented by k
name|String
index|[]
name|commentSegments
init|=
name|colComment
operator|.
name|split
argument_list|(
literal|"\n|\r|\r\n"
argument_list|)
decl_stmt|;
name|tableInfo
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-"
operator|+
name|ALIGNMENT
operator|+
literal|"s"
argument_list|,
name|commentSegments
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
name|int
name|colNameLength
init|=
name|ALIGNMENT
operator|>
name|colName
operator|.
name|length
argument_list|()
condition|?
name|ALIGNMENT
else|:
name|colName
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|colTypeLength
init|=
name|ALIGNMENT
operator|>
name|colType
operator|.
name|length
argument_list|()
condition|?
name|ALIGNMENT
else|:
name|colType
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|commentSegments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tableInfo
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%"
operator|+
name|colNameLength
operator|+
literal|"s"
operator|+
name|FIELD_DELIM
operator|+
literal|"%"
operator|+
name|colTypeLength
operator|+
literal|"s"
operator|+
name|FIELD_DELIM
operator|+
literal|"%s"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|commentSegments
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_DELIM
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
index|[]
name|getColumnsHeader
parameter_list|()
block|{
return|return
name|DescTableDesc
operator|.
name|getSchema
argument_list|()
operator|.
name|split
argument_list|(
literal|"#"
argument_list|)
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getIndexColumnsHeader
parameter_list|()
block|{
name|StringBuilder
name|indexCols
init|=
operator|new
name|StringBuilder
argument_list|(
name|DEFAULT_STRINGBUILDER_SIZE
argument_list|)
decl_stmt|;
name|formatOutput
argument_list|(
name|ShowIndexesDesc
operator|.
name|getSchema
argument_list|()
operator|.
name|split
argument_list|(
literal|"#"
argument_list|)
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|,
name|indexCols
argument_list|)
expr_stmt|;
return|return
name|indexCols
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|MetaDataFormatter
name|getFormatter
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
if|if
condition|(
literal|"json"
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DDL_OUTPUT_FORMAT
operator|.
name|varname
argument_list|,
literal|"text"
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|new
name|JsonMetaDataFormatter
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|TextMetaDataFormatter
argument_list|(
name|conf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|CLIPRETTYOUTPUTNUMCOLS
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

