begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|LockComponentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|LockRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * An implementation of HiveTxnManager that stores the transactions in the  * metastore database.  */
end_comment

begin_class
specifier|public
class|class
name|DbTxnManager
extends|extends
name|HiveTxnManagerImpl
block|{
specifier|static
specifier|final
specifier|private
name|String
name|CLASS_NAME
init|=
name|DbTxnManager
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CLASS_NAME
argument_list|)
decl_stmt|;
specifier|private
name|DbLockManager
name|lockMgr
init|=
literal|null
decl_stmt|;
specifier|private
name|SynchronizedMetaStoreClient
name|client
init|=
literal|null
decl_stmt|;
comment|/**    * The Metastore NEXT_TXN_ID.NTXN_NEXT is initialized to 1; it contains the next available    * transaction id.  Thus is 1 is first transaction id.    */
specifier|private
name|long
name|txnId
init|=
literal|0
decl_stmt|;
comment|/**    * assigns a unique monotonically increasing ID to each statement    * which is part of an open transaction.  This is used by storage    * layer (see {@link org.apache.hadoop.hive.ql.io.AcidUtils#deltaSubdir(long, long, int)})    * to keep apart multiple writes of the same data within the same transaction    * Also see {@link org.apache.hadoop.hive.ql.io.AcidOutputFormat.Options}    */
specifier|private
name|int
name|statementId
init|=
operator|-
literal|1
decl_stmt|;
comment|// QueryId for the query in current transaction
specifier|private
name|String
name|queryId
decl_stmt|;
comment|// ExecutorService for sending heartbeat to metastore periodically.
specifier|private
specifier|static
name|ScheduledExecutorService
name|heartbeatExecutorService
init|=
literal|null
decl_stmt|;
specifier|private
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|heartbeatTask
init|=
literal|null
decl_stmt|;
specifier|private
name|Runnable
name|shutdownRunner
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SHUTDOWN_HOOK_PRIORITY
init|=
literal|0
decl_stmt|;
comment|// SynchronizedMetaStoreClient object per heartbeater thread.
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|SynchronizedMetaStoreClient
argument_list|>
name|threadLocalMSClient
init|=
operator|new
name|ThreadLocal
argument_list|<
name|SynchronizedMetaStoreClient
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SynchronizedMetaStoreClient
name|initialValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|remove
parameter_list|()
block|{
name|SynchronizedMetaStoreClient
name|client
init|=
name|this
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
name|AtomicInteger
name|heartbeaterMSClientCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|int
name|heartbeaterThreadPoolSize
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|SynchronizedMetaStoreClient
name|getThreadLocalMSClient
parameter_list|()
block|{
return|return
name|threadLocalMSClient
operator|.
name|get
argument_list|()
return|;
block|}
name|DbTxnManager
parameter_list|()
block|{
name|shutdownRunner
operator|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|heartbeatExecutorService
operator|!=
literal|null
operator|&&
operator|!
name|heartbeatExecutorService
operator|.
name|isShutdown
argument_list|()
operator|&&
operator|!
name|heartbeatExecutorService
operator|.
name|isTerminated
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down Heartbeater thread pool."
argument_list|)
expr_stmt|;
name|heartbeatExecutorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|ShutdownHookManager
operator|.
name|addShutdownHook
argument_list|(
name|shutdownRunner
argument_list|,
name|SHUTDOWN_HOOK_PRIORITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setHiveConf
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setHiveConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ErrorMsg
operator|.
name|DBTXNMGR_REQUIRES_CONCURRENCY
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|openTxn
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|LockException
block|{
comment|//todo: why don't we lock the snapshot here???  Instead of having client make an explicit call
comment|//whenever it chooses
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|isTxnOpen
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Transaction already opened. "
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
name|txnId
operator|=
name|client
operator|.
name|openTxn
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|statementId
operator|=
literal|0
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Opened "
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|txnId
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|METASTORE_COMMUNICATION_FAILED
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HiveLockManager
name|getLockManager
parameter_list|()
throws|throws
name|LockException
block|{
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|lockMgr
operator|==
literal|null
condition|)
block|{
name|lockMgr
operator|=
operator|new
name|DbLockManager
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|lockMgr
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|acquireLocks
parameter_list|(
name|QueryPlan
name|plan
parameter_list|,
name|Context
name|ctx
parameter_list|,
name|String
name|username
parameter_list|)
throws|throws
name|LockException
block|{
try|try
block|{
name|acquireLocksWithHeartbeatDelay
argument_list|(
name|plan
argument_list|,
name|ctx
argument_list|,
name|username
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TxnAbortedException
condition|)
block|{
name|txnId
operator|=
literal|0
expr_stmt|;
name|statementId
operator|=
operator|-
literal|1
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * This is for testing only.  Normally client should call {@link #acquireLocks(org.apache.hadoop.hive.ql.QueryPlan, org.apache.hadoop.hive.ql.Context, String)}    * @param isBlocking if false, the method will return immediately; thus the locks may be in LockState.WAITING    * @return null if no locks were needed    */
name|LockState
name|acquireLocks
parameter_list|(
name|QueryPlan
name|plan
parameter_list|,
name|Context
name|ctx
parameter_list|,
name|String
name|username
parameter_list|,
name|boolean
name|isBlocking
parameter_list|)
throws|throws
name|LockException
block|{
name|init
argument_list|()
expr_stmt|;
comment|// Make sure we've built the lock manager
name|getLockManager
argument_list|()
expr_stmt|;
name|boolean
name|atLeastOneLock
init|=
literal|false
decl_stmt|;
name|queryId
operator|=
name|plan
operator|.
name|getQueryId
argument_list|()
expr_stmt|;
name|LockRequestBuilder
name|rqstBuilder
init|=
operator|new
name|LockRequestBuilder
argument_list|(
name|queryId
argument_list|)
decl_stmt|;
comment|//link queryId to txnId
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting lock request transaction to "
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId
argument_list|)
operator|+
literal|" for queryId="
operator|+
name|queryId
argument_list|)
expr_stmt|;
name|rqstBuilder
operator|.
name|setTransactionId
argument_list|(
name|txnId
argument_list|)
operator|.
name|setUser
argument_list|(
name|username
argument_list|)
expr_stmt|;
comment|// For each source to read, get a shared lock
for|for
control|(
name|ReadEntity
name|input
range|:
name|plan
operator|.
name|getInputs
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|input
operator|.
name|needsLock
argument_list|()
operator|||
name|input
operator|.
name|isUpdateOrDelete
argument_list|()
operator|||
operator|(
name|input
operator|.
name|getType
argument_list|()
operator|==
name|Entity
operator|.
name|Type
operator|.
name|TABLE
operator|&&
name|input
operator|.
name|getTable
argument_list|()
operator|.
name|isTemporary
argument_list|()
operator|)
condition|)
block|{
comment|// We don't want to acquire read locks during update or delete as we'll be acquiring write
comment|// locks instead. Also, there's no need to lock temp tables since they're session wide
continue|continue;
block|}
name|LockComponentBuilder
name|compBuilder
init|=
operator|new
name|LockComponentBuilder
argument_list|()
decl_stmt|;
name|compBuilder
operator|.
name|setShared
argument_list|()
expr_stmt|;
name|compBuilder
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|SELECT
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|input
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|DATABASE
case|:
name|compBuilder
operator|.
name|setDbName
argument_list|(
name|input
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE
case|:
name|t
operator|=
name|input
operator|.
name|getTable
argument_list|()
expr_stmt|;
name|compBuilder
operator|.
name|setDbName
argument_list|(
name|t
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|compBuilder
operator|.
name|setTableName
argument_list|(
name|t
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PARTITION
case|:
case|case
name|DUMMYPARTITION
case|:
name|compBuilder
operator|.
name|setPartitionName
argument_list|(
name|input
operator|.
name|getPartition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|input
operator|.
name|getPartition
argument_list|()
operator|.
name|getTable
argument_list|()
expr_stmt|;
name|compBuilder
operator|.
name|setDbName
argument_list|(
name|t
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|compBuilder
operator|.
name|setTableName
argument_list|(
name|t
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// This is a file or something we don't hold locks for.
continue|continue;
block|}
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|AcidUtils
operator|.
name|isAcidTable
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|compBuilder
operator|.
name|setIsAcid
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|LockComponent
name|comp
init|=
name|compBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding lock component to lock request "
operator|+
name|comp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rqstBuilder
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|atLeastOneLock
operator|=
literal|true
expr_stmt|;
block|}
comment|// For each source to write to, get the appropriate lock type.  If it's
comment|// an OVERWRITE, we need to get an exclusive lock.  If it's an insert (no
comment|// overwrite) than we need a shared.  If it's update or delete then we
comment|// need a SEMI-SHARED.
for|for
control|(
name|WriteEntity
name|output
range|:
name|plan
operator|.
name|getOutputs
argument_list|()
control|)
block|{
if|if
condition|(
name|output
operator|.
name|getType
argument_list|()
operator|==
name|Entity
operator|.
name|Type
operator|.
name|DFS_DIR
operator|||
name|output
operator|.
name|getType
argument_list|()
operator|==
name|Entity
operator|.
name|Type
operator|.
name|LOCAL_DIR
operator|||
operator|(
name|output
operator|.
name|getType
argument_list|()
operator|==
name|Entity
operator|.
name|Type
operator|.
name|TABLE
operator|&&
name|output
operator|.
name|getTable
argument_list|()
operator|.
name|isTemporary
argument_list|()
operator|)
condition|)
block|{
comment|// We don't lock files or directories. We also skip locking temp tables.
continue|continue;
block|}
name|LockComponentBuilder
name|compBuilder
init|=
operator|new
name|LockComponentBuilder
argument_list|()
decl_stmt|;
name|Table
name|t
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"output is null "
operator|+
operator|(
name|output
operator|==
literal|null
operator|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|output
operator|.
name|getWriteType
argument_list|()
condition|)
block|{
case|case
name|DDL_EXCLUSIVE
case|:
case|case
name|INSERT_OVERWRITE
case|:
name|compBuilder
operator|.
name|setExclusive
argument_list|()
expr_stmt|;
name|compBuilder
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|NO_TXN
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSERT
case|:
name|t
operator|=
name|getTable
argument_list|(
name|output
argument_list|)
expr_stmt|;
if|if
condition|(
name|AcidUtils
operator|.
name|isAcidTable
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|compBuilder
operator|.
name|setShared
argument_list|()
expr_stmt|;
name|compBuilder
operator|.
name|setIsAcid
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compBuilder
operator|.
name|setExclusive
argument_list|()
expr_stmt|;
name|compBuilder
operator|.
name|setIsAcid
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|compBuilder
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|INSERT
argument_list|)
expr_stmt|;
break|break;
case|case
name|DDL_SHARED
case|:
name|compBuilder
operator|.
name|setShared
argument_list|()
expr_stmt|;
name|compBuilder
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|NO_TXN
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPDATE
case|:
name|compBuilder
operator|.
name|setSemiShared
argument_list|()
expr_stmt|;
name|compBuilder
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|t
operator|=
name|getTable
argument_list|(
name|output
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|compBuilder
operator|.
name|setSemiShared
argument_list|()
expr_stmt|;
name|compBuilder
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|t
operator|=
name|getTable
argument_list|(
name|output
argument_list|)
expr_stmt|;
break|break;
case|case
name|DDL_NO_LOCK
case|:
continue|continue;
comment|// No lock required here
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown write type "
operator|+
name|output
operator|.
name|getWriteType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|output
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|DATABASE
case|:
name|compBuilder
operator|.
name|setDbName
argument_list|(
name|output
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE
case|:
case|case
name|DUMMYPARTITION
case|:
comment|// in case of dynamic partitioning lock the table
name|t
operator|=
name|output
operator|.
name|getTable
argument_list|()
expr_stmt|;
name|compBuilder
operator|.
name|setDbName
argument_list|(
name|t
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|compBuilder
operator|.
name|setTableName
argument_list|(
name|t
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PARTITION
case|:
name|compBuilder
operator|.
name|setPartitionName
argument_list|(
name|output
operator|.
name|getPartition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|output
operator|.
name|getPartition
argument_list|()
operator|.
name|getTable
argument_list|()
expr_stmt|;
name|compBuilder
operator|.
name|setDbName
argument_list|(
name|t
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|compBuilder
operator|.
name|setTableName
argument_list|(
name|t
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// This is a file or something we don't hold locks for.
continue|continue;
block|}
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|AcidUtils
operator|.
name|isAcidTable
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|compBuilder
operator|.
name|setIsAcid
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|LockComponent
name|comp
init|=
name|compBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding lock component to lock request "
operator|+
name|comp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rqstBuilder
operator|.
name|addLockComponent
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|atLeastOneLock
operator|=
literal|true
expr_stmt|;
block|}
comment|//plan
comment|// Make sure we need locks.  It's possible there's nothing to lock in
comment|// this operation.
if|if
condition|(
operator|!
name|atLeastOneLock
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No locks needed for queryId"
operator|+
name|queryId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveLock
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTxnOpen
argument_list|()
condition|)
block|{
name|statementId
operator|++
expr_stmt|;
block|}
name|LockState
name|lockState
init|=
name|lockMgr
operator|.
name|lock
argument_list|(
name|rqstBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|queryId
argument_list|,
name|isBlocking
argument_list|,
name|locks
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setHiveLocks
argument_list|(
name|locks
argument_list|)
expr_stmt|;
return|return
name|lockState
return|;
block|}
specifier|private
specifier|static
name|Table
name|getTable
parameter_list|(
name|WriteEntity
name|we
parameter_list|)
block|{
name|Table
name|t
init|=
name|we
operator|.
name|getTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No table info for "
operator|+
name|we
argument_list|)
throw|;
block|}
return|return
name|t
return|;
block|}
comment|/**    * @param delay time to delay for first heartbeat    */
annotation|@
name|VisibleForTesting
name|void
name|acquireLocksWithHeartbeatDelay
parameter_list|(
name|QueryPlan
name|plan
parameter_list|,
name|Context
name|ctx
parameter_list|,
name|String
name|username
parameter_list|,
name|long
name|delay
parameter_list|)
throws|throws
name|LockException
block|{
name|acquireLocks
argument_list|(
name|plan
argument_list|,
name|ctx
argument_list|,
name|username
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setHeartbeater
argument_list|(
name|startHeartbeat
argument_list|(
name|delay
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseLocks
parameter_list|(
name|List
argument_list|<
name|HiveLock
argument_list|>
name|hiveLocks
parameter_list|)
throws|throws
name|LockException
block|{
if|if
condition|(
name|lockMgr
operator|!=
literal|null
condition|)
block|{
name|stopHeartbeat
argument_list|()
expr_stmt|;
name|lockMgr
operator|.
name|releaseLocks
argument_list|(
name|hiveLocks
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitTxn
parameter_list|()
throws|throws
name|LockException
block|{
if|if
condition|(
operator|!
name|isTxnOpen
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Attempt to commit before opening a transaction"
argument_list|)
throw|;
block|}
try|try
block|{
name|lockMgr
operator|.
name|clearLocalLockRecords
argument_list|()
expr_stmt|;
name|stopHeartbeat
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Committing txn "
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|commitTxn
argument_list|(
name|txnId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchTxnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Metastore could not find "
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|TXN_NO_SUCH_TRANSACTION
argument_list|,
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TxnAbortedException
name|e
parameter_list|)
block|{
name|LockException
name|le
init|=
operator|new
name|LockException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|TXN_ABORTED
argument_list|,
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|le
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|le
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
name|ErrorMsg
operator|.
name|METASTORE_COMMUNICATION_FAILED
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|txnId
operator|=
literal|0
expr_stmt|;
name|statementId
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollbackTxn
parameter_list|()
throws|throws
name|LockException
block|{
if|if
condition|(
operator|!
name|isTxnOpen
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Attempt to rollback before opening a transaction"
argument_list|)
throw|;
block|}
try|try
block|{
name|lockMgr
operator|.
name|clearLocalLockRecords
argument_list|()
expr_stmt|;
name|stopHeartbeat
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Rolling back "
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|rollbackTxn
argument_list|(
name|txnId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchTxnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Metastore could not find "
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|TXN_NO_SUCH_TRANSACTION
argument_list|,
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
name|ErrorMsg
operator|.
name|METASTORE_COMMUNICATION_FAILED
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|txnId
operator|=
literal|0
expr_stmt|;
name|statementId
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|heartbeat
parameter_list|()
throws|throws
name|LockException
block|{
name|List
argument_list|<
name|HiveLock
argument_list|>
name|locks
decl_stmt|;
if|if
condition|(
name|isTxnOpen
argument_list|()
condition|)
block|{
comment|// Create one dummy lock so we can go through the loop below, though we only
comment|//really need txnId
name|DbLockManager
operator|.
name|DbHiveLock
name|dummyLock
init|=
operator|new
name|DbLockManager
operator|.
name|DbHiveLock
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
name|locks
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|locks
operator|.
name|add
argument_list|(
name|dummyLock
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|locks
operator|=
name|lockMgr
operator|.
name|getLocks
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Sending heartbeat for "
argument_list|)
operator|.
name|append
argument_list|(
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" and"
argument_list|)
decl_stmt|;
for|for
control|(
name|HiveLock
name|lock
range|:
name|locks
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|lock
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isTxnOpen
argument_list|()
operator|&&
name|locks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// No locks, no txn, we outta here.
return|return;
block|}
for|for
control|(
name|HiveLock
name|lock
range|:
name|locks
control|)
block|{
name|long
name|lockId
init|=
operator|(
operator|(
name|DbLockManager
operator|.
name|DbHiveLock
operator|)
name|lock
operator|)
operator|.
name|lockId
decl_stmt|;
try|try
block|{
comment|// Get the threadlocal metastore client for the heartbeat calls.
name|SynchronizedMetaStoreClient
name|heartbeaterClient
init|=
name|getThreadLocalMSClient
argument_list|()
decl_stmt|;
if|if
condition|(
name|heartbeaterClient
operator|==
literal|null
condition|)
block|{
name|Hive
name|db
decl_stmt|;
try|try
block|{
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Create a new threadlocal synchronized metastore client for use in hearbeater threads.
comment|// This makes the concurrent use of heartbeat thread safe, and won't cause transaction
comment|// abort due to a long metastore client call blocking the heartbeat call.
name|heartbeaterClient
operator|=
operator|new
name|SynchronizedMetaStoreClient
argument_list|(
name|db
operator|.
name|getMSC
argument_list|()
argument_list|)
expr_stmt|;
name|threadLocalMSClient
operator|.
name|set
argument_list|(
name|heartbeaterClient
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create new metastore client for heartbeating"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Increment the threadlocal metastore client count
if|if
condition|(
name|heartbeaterMSClientCount
operator|.
name|incrementAndGet
argument_list|()
operator|>=
name|heartbeaterThreadPoolSize
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The number of hearbeater metastore clients - + "
operator|+
name|heartbeaterMSClientCount
operator|.
name|get
argument_list|()
operator|+
literal|", has exceeded the max limit - "
operator|+
name|heartbeaterThreadPoolSize
argument_list|)
expr_stmt|;
block|}
block|}
name|heartbeaterClient
operator|.
name|heartbeat
argument_list|(
name|txnId
argument_list|,
name|lockId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchLockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to find lock "
operator|+
name|JavaUtils
operator|.
name|lockIdToString
argument_list|(
name|lockId
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|LOCK_NO_SUCH_LOCK
argument_list|,
name|JavaUtils
operator|.
name|lockIdToString
argument_list|(
name|lockId
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchTxnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to find transaction "
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LockException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|TXN_NO_SUCH_TRANSACTION
argument_list|,
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TxnAbortedException
name|e
parameter_list|)
block|{
name|LockException
name|le
init|=
operator|new
name|LockException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|TXN_ABORTED
argument_list|,
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|le
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|le
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
name|ErrorMsg
operator|.
name|METASTORE_COMMUNICATION_FAILED
operator|.
name|getMsg
argument_list|()
operator|+
literal|"("
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|txnId
argument_list|)
operator|+
literal|","
operator|+
name|lock
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Start the heartbeater threadpool and return the task.    * @param initialDelay time to delay before first execution, in milliseconds    * @return heartbeater    */
specifier|private
name|Heartbeater
name|startHeartbeat
parameter_list|(
name|long
name|initialDelay
parameter_list|)
throws|throws
name|LockException
block|{
name|long
name|heartbeatInterval
init|=
name|getHeartbeatInterval
argument_list|(
name|conf
argument_list|)
decl_stmt|;
assert|assert
name|heartbeatInterval
operator|>
literal|0
assert|;
name|Heartbeater
name|heartbeater
init|=
operator|new
name|Heartbeater
argument_list|(
name|this
argument_list|,
name|conf
argument_list|,
name|queryId
argument_list|)
decl_stmt|;
comment|// For negative testing purpose..
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
operator|&&
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEFAILHEARTBEATER
argument_list|)
condition|)
block|{
name|initialDelay
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|initialDelay
operator|==
literal|0
condition|)
block|{
name|initialDelay
operator|=
name|heartbeatInterval
expr_stmt|;
block|}
name|heartbeatTask
operator|=
name|heartbeatExecutorService
operator|.
name|scheduleAtFixedRate
argument_list|(
name|heartbeater
argument_list|,
name|initialDelay
argument_list|,
name|heartbeatInterval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started heartbeat with delay/interval = "
operator|+
name|initialDelay
operator|+
literal|"/"
operator|+
name|heartbeatInterval
operator|+
literal|" "
operator|+
name|TimeUnit
operator|.
name|MILLISECONDS
operator|+
literal|" for query: "
operator|+
name|queryId
argument_list|)
expr_stmt|;
return|return
name|heartbeater
return|;
block|}
specifier|private
name|void
name|stopHeartbeat
parameter_list|()
throws|throws
name|LockException
block|{
if|if
condition|(
name|heartbeatTask
operator|!=
literal|null
condition|)
block|{
name|heartbeatTask
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|sleepInterval
init|=
literal|100
decl_stmt|;
while|while
condition|(
operator|!
name|heartbeatTask
operator|.
name|isCancelled
argument_list|()
operator|&&
operator|!
name|heartbeatTask
operator|.
name|isDone
argument_list|()
condition|)
block|{
comment|// We will wait for 30 seconds for the task to be cancelled.
comment|// If it's still not cancelled (unlikely), we will just move on.
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|startTime
operator|>
literal|30000
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Heartbeat task cannot be cancelled for unknown reason. QueryId: "
operator|+
name|queryId
argument_list|)
expr_stmt|;
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
name|sleepInterval
operator|*=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|heartbeatTask
operator|.
name|isCancelled
argument_list|()
operator|||
name|heartbeatTask
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopped heartbeat for query: "
operator|+
name|queryId
argument_list|)
expr_stmt|;
block|}
name|heartbeatTask
operator|=
literal|null
expr_stmt|;
name|queryId
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ValidTxnList
name|getValidTxns
parameter_list|()
throws|throws
name|LockException
block|{
name|init
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|client
operator|.
name|getValidTxns
argument_list|(
name|txnId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
name|ErrorMsg
operator|.
name|METASTORE_COMMUNICATION_FAILED
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTxnManagerName
parameter_list|()
block|{
return|return
name|CLASS_NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsExplicitLock
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|useNewShowLocksFormat
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsAcid
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|destruct
parameter_list|()
block|{
try|try
block|{
name|stopHeartbeat
argument_list|()
expr_stmt|;
if|if
condition|(
name|shutdownRunner
operator|!=
literal|null
condition|)
block|{
name|ShutdownHookManager
operator|.
name|removeShutdownHook
argument_list|(
name|shutdownRunner
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isTxnOpen
argument_list|()
condition|)
name|rollbackTxn
argument_list|()
expr_stmt|;
if|if
condition|(
name|lockMgr
operator|!=
literal|null
condition|)
name|lockMgr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught exception "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" with message<"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|">, swallowing as there is nothing we can do with it."
argument_list|)
expr_stmt|;
comment|// Not much we can do about it here.
block|}
block|}
specifier|private
name|void
name|init
parameter_list|()
throws|throws
name|LockException
block|{
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Must call setHiveConf before any other "
operator|+
literal|"methods."
argument_list|)
throw|;
block|}
try|try
block|{
name|Hive
name|db
init|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|client
operator|=
operator|new
name|SynchronizedMetaStoreClient
argument_list|(
name|db
operator|.
name|getMSC
argument_list|()
argument_list|)
expr_stmt|;
name|initHeartbeatExecutorService
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
name|ErrorMsg
operator|.
name|METASTORE_COULD_NOT_INITIATE
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
name|ErrorMsg
operator|.
name|METASTORE_COULD_NOT_INITIATE
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|initHeartbeatExecutorService
parameter_list|()
block|{
if|if
condition|(
name|heartbeatExecutorService
operator|!=
literal|null
operator|&&
operator|!
name|heartbeatExecutorService
operator|.
name|isShutdown
argument_list|()
operator|&&
operator|!
name|heartbeatExecutorService
operator|.
name|isTerminated
argument_list|()
condition|)
block|{
return|return;
block|}
name|heartbeaterThreadPoolSize
operator|=
name|conf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_HEARTBEAT_THREADPOOL_SIZE
argument_list|)
expr_stmt|;
name|heartbeatExecutorService
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
name|heartbeaterThreadPoolSize
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|private
specifier|final
name|AtomicInteger
name|threadCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
return|return
operator|new
name|HeartbeaterThread
argument_list|(
name|r
argument_list|,
literal|"Heartbeater-"
operator|+
name|threadCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ScheduledThreadPoolExecutor
operator|)
name|heartbeatExecutorService
operator|)
operator|.
name|setRemoveOnCancelPolicy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|HeartbeaterThread
extends|extends
name|Thread
block|{
specifier|public
name|HeartbeaterThread
parameter_list|(
name|Runnable
name|target
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|target
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|/**      * We're overriding finalize so that we can do an orderly cleanup of resources held by      * the threadlocal metastore client.      */
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
name|threadLocalMSClient
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// Adjust the metastore client count
name|DbTxnManager
operator|.
name|heartbeaterMSClientCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTxnOpen
parameter_list|()
block|{
return|return
name|txnId
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCurrentTxnId
parameter_list|()
block|{
return|return
name|txnId
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getStatementId
parameter_list|()
block|{
return|return
name|statementId
return|;
block|}
specifier|private
specifier|static
name|long
name|getHeartbeatInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|LockException
block|{
comment|// Retrieve HIVE_TXN_TIMEOUT in MILLISECONDS (it's defined as SECONDS),
comment|// then divide it by 2 to give us a safety factor.
name|long
name|interval
init|=
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|interval
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_MANAGER
operator|.
name|toString
argument_list|()
operator|+
literal|" not set,"
operator|+
literal|" heartbeats won't be sent"
argument_list|)
throw|;
block|}
return|return
name|interval
return|;
block|}
comment|/**    * Heartbeater thread    */
specifier|public
specifier|static
class|class
name|Heartbeater
implements|implements
name|Runnable
block|{
specifier|private
name|HiveTxnManager
name|txnMgr
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
name|LockException
name|lockException
decl_stmt|;
specifier|private
specifier|final
name|String
name|queryId
decl_stmt|;
specifier|public
name|LockException
name|getLockException
parameter_list|()
block|{
return|return
name|lockException
return|;
block|}
comment|/**      *      * @param txnMgr transaction manager for this operation      */
name|Heartbeater
parameter_list|(
name|HiveTxnManager
name|txnMgr
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|String
name|queryId
parameter_list|)
block|{
name|this
operator|.
name|txnMgr
operator|=
name|txnMgr
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|lockException
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|queryId
operator|=
name|queryId
expr_stmt|;
block|}
comment|/**      * Send a heartbeat to the metastore for locks and transactions.      */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// For negative testing purpose..
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
operator|&&
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEFAILHEARTBEATER
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEFAILHEARTBEATER
operator|.
name|name
argument_list|()
operator|+
literal|"=true"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Heartbeating..."
argument_list|)
expr_stmt|;
name|txnMgr
operator|.
name|heartbeat
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed trying to heartbeat queryId="
operator|+
name|queryId
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|lockException
operator|=
name|e
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed trying to heartbeat queryId="
operator|+
name|queryId
operator|+
literal|": "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|lockException
operator|=
operator|new
name|LockException
argument_list|(
literal|"Failed trying to heartbeat queryId="
operator|+
name|queryId
operator|+
literal|": "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Synchronized MetaStoreClient wrapper    */
specifier|final
class|class
name|SynchronizedMetaStoreClient
block|{
specifier|private
specifier|final
name|IMetaStoreClient
name|client
decl_stmt|;
name|SynchronizedMetaStoreClient
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
specifier|synchronized
name|long
name|openTxn
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|openTxn
argument_list|(
name|user
argument_list|)
return|;
block|}
specifier|synchronized
name|void
name|commitTxn
parameter_list|(
name|long
name|txnid
parameter_list|)
throws|throws
name|TException
block|{
name|client
operator|.
name|commitTxn
argument_list|(
name|txnid
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|void
name|rollbackTxn
parameter_list|(
name|long
name|txnid
parameter_list|)
throws|throws
name|TException
block|{
name|client
operator|.
name|rollbackTxn
argument_list|(
name|txnid
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|void
name|heartbeat
parameter_list|(
name|long
name|txnid
parameter_list|,
name|long
name|lockid
parameter_list|)
throws|throws
name|TException
block|{
name|client
operator|.
name|heartbeat
argument_list|(
name|txnid
argument_list|,
name|lockid
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|ValidTxnList
name|getValidTxns
parameter_list|(
name|long
name|currentTxn
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|getValidTxns
argument_list|(
name|currentTxn
argument_list|)
return|;
block|}
specifier|synchronized
name|LockResponse
name|lock
parameter_list|(
name|LockRequest
name|request
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|lock
argument_list|(
name|request
argument_list|)
return|;
block|}
specifier|synchronized
name|LockResponse
name|checkLock
parameter_list|(
name|long
name|lockid
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|checkLock
argument_list|(
name|lockid
argument_list|)
return|;
block|}
specifier|synchronized
name|void
name|unlock
parameter_list|(
name|long
name|lockid
parameter_list|)
throws|throws
name|TException
block|{
name|client
operator|.
name|unlock
argument_list|(
name|lockid
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|ShowLocksResponse
name|showLocks
parameter_list|(
name|ShowLocksRequest
name|showLocksRequest
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|showLocks
argument_list|(
name|showLocksRequest
argument_list|)
return|;
block|}
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

