begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|status
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|log
operator|.
name|ProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|log
operator|.
name|InPlaceUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
specifier|abstract
class|class
name|SparkJobMonitor
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
name|SparkJobMonitor
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CLASS_NAME
argument_list|)
decl_stmt|;
specifier|protected
specifier|transient
specifier|final
name|SessionState
operator|.
name|LogHelper
name|console
decl_stmt|;
specifier|protected
specifier|final
name|PerfLogger
name|perfLogger
init|=
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|int
name|checkInterval
init|=
literal|1000
decl_stmt|;
specifier|protected
specifier|final
name|long
name|monitorTimeoutInterval
decl_stmt|;
specifier|final
name|RenderStrategy
operator|.
name|UpdateFunction
name|updateFunction
decl_stmt|;
specifier|protected
name|long
name|startTime
decl_stmt|;
specifier|protected
enum|enum
name|StageState
block|{
name|PENDING
block|,
name|RUNNING
block|,
name|FINISHED
block|}
specifier|protected
specifier|final
name|boolean
name|inPlaceUpdate
decl_stmt|;
specifier|protected
name|SparkJobMonitor
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
block|{
name|monitorTimeoutInterval
operator|=
name|hiveConf
operator|.
name|getTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SPARK_JOB_MONITOR_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|inPlaceUpdate
operator|=
name|InPlaceUpdate
operator|.
name|canRenderInPlace
argument_list|(
name|hiveConf
argument_list|)
operator|&&
operator|!
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|getIsSilent
argument_list|()
expr_stmt|;
name|console
operator|=
operator|new
name|SessionState
operator|.
name|LogHelper
argument_list|(
name|LOG
argument_list|)
expr_stmt|;
name|updateFunction
operator|=
name|updateFunction
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|int
name|startMonitor
parameter_list|()
function_decl|;
specifier|protected
name|int
name|getTotalTaskCount
parameter_list|(
name|Map
argument_list|<
name|SparkStage
argument_list|,
name|SparkStageProgress
argument_list|>
name|progressMap
parameter_list|)
block|{
name|int
name|totalTasks
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SparkStageProgress
name|progress
range|:
name|progressMap
operator|.
name|values
argument_list|()
control|)
block|{
name|totalTasks
operator|+=
name|progress
operator|.
name|getTotalTaskCount
argument_list|()
expr_stmt|;
block|}
return|return
name|totalTasks
return|;
block|}
specifier|protected
name|int
name|getStageMaxTaskCount
parameter_list|(
name|Map
argument_list|<
name|SparkStage
argument_list|,
name|SparkStageProgress
argument_list|>
name|progressMap
parameter_list|)
block|{
name|int
name|stageMaxTasks
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SparkStageProgress
name|progress
range|:
name|progressMap
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|tasks
init|=
name|progress
operator|.
name|getTotalTaskCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|tasks
operator|>
name|stageMaxTasks
condition|)
block|{
name|stageMaxTasks
operator|=
name|tasks
expr_stmt|;
block|}
block|}
return|return
name|stageMaxTasks
return|;
block|}
name|ProgressMonitor
name|getProgressMonitor
parameter_list|(
name|Map
argument_list|<
name|SparkStage
argument_list|,
name|SparkStageProgress
argument_list|>
name|progressMap
parameter_list|)
block|{
return|return
operator|new
name|SparkProgressMonitor
argument_list|(
name|progressMap
argument_list|,
name|startTime
argument_list|)
return|;
block|}
specifier|private
name|RenderStrategy
operator|.
name|UpdateFunction
name|updateFunction
parameter_list|()
block|{
return|return
name|inPlaceUpdate
operator|&&
operator|!
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isHiveServerQuery
argument_list|()
condition|?
operator|new
name|RenderStrategy
operator|.
name|InPlaceUpdateFunction
argument_list|(
name|this
argument_list|)
else|:
operator|new
name|RenderStrategy
operator|.
name|LogToFileFunction
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

