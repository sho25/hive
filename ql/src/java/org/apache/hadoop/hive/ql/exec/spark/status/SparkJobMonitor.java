begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|status
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|JobExecutionStatus
import|;
end_import

begin_comment
comment|/**  * SparkJobMonitor monitor a single Spark job status in a loop until job finished/failed/killed.  * It print current job status to console and sleep current thread between monitor interval.  */
end_comment

begin_class
specifier|public
class|class
name|SparkJobMonitor
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
name|SparkJobMonitor
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CLASS_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|transient
name|LogHelper
name|console
decl_stmt|;
specifier|private
specifier|final
name|int
name|checkInterval
init|=
literal|200
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxRetryInterval
init|=
literal|2500
decl_stmt|;
specifier|private
specifier|final
name|int
name|printInterval
init|=
literal|3000
decl_stmt|;
specifier|private
name|long
name|lastPrintTime
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|completed
decl_stmt|;
specifier|private
name|SparkJobStatus
name|sparkJobStatus
decl_stmt|;
specifier|public
name|SparkJobMonitor
parameter_list|(
name|SparkJobStatus
name|sparkJobStatus
parameter_list|)
block|{
name|this
operator|.
name|sparkJobStatus
operator|=
name|sparkJobStatus
expr_stmt|;
name|console
operator|=
operator|new
name|LogHelper
argument_list|(
name|LOG
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|startMonitor
parameter_list|()
block|{
name|completed
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|boolean
name|running
init|=
literal|false
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|int
name|failedCounter
init|=
literal|0
decl_stmt|;
name|int
name|rc
init|=
literal|0
decl_stmt|;
name|JobExecutionStatus
name|lastState
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SparkStageProgress
argument_list|>
name|lastProgressMap
init|=
literal|null
decl_stmt|;
name|long
name|startTime
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|JobExecutionStatus
name|state
init|=
name|sparkJobStatus
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"state = "
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|!=
literal|null
operator|&&
name|state
operator|!=
name|JobExecutionStatus
operator|.
name|UNKNOWN
operator|&&
operator|(
name|state
operator|!=
name|lastState
operator|||
name|state
operator|==
name|JobExecutionStatus
operator|.
name|RUNNING
operator|)
condition|)
block|{
name|lastState
operator|=
name|state
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SparkStageProgress
argument_list|>
name|progressMap
init|=
name|sparkJobStatus
operator|.
name|getSparkStageProgress
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|RUNNING
case|:
if|if
condition|(
operator|!
name|running
condition|)
block|{
comment|// print job stages.
name|console
operator|.
name|printInfo
argument_list|(
literal|"\nQuery Hive on Spark job["
operator|+
name|sparkJobStatus
operator|.
name|getJobId
argument_list|()
operator|+
literal|"] stages:"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|stageId
range|:
name|sparkJobStatus
operator|.
name|getStageIds
argument_list|()
control|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|stageId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|console
operator|.
name|printInfo
argument_list|(
literal|"\nStatus: Running (Hive on Spark job["
operator|+
name|sparkJobStatus
operator|.
name|getJobId
argument_list|()
operator|+
literal|"])"
argument_list|)
expr_stmt|;
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|running
operator|=
literal|true
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Job Progress Format\nCurrentTime StageId_StageAttemptId: "
operator|+
literal|"SucceededTasksCount(+RunningTasksCount-FailedTasksCount)/TotalTasksCount [StageCost]"
argument_list|)
expr_stmt|;
block|}
name|printStatus
argument_list|(
name|progressMap
argument_list|,
name|lastProgressMap
argument_list|)
expr_stmt|;
name|lastProgressMap
operator|=
name|progressMap
expr_stmt|;
break|break;
case|case
name|SUCCEEDED
case|:
name|printStatus
argument_list|(
name|progressMap
argument_list|,
name|lastProgressMap
argument_list|)
expr_stmt|;
name|lastProgressMap
operator|=
name|progressMap
expr_stmt|;
if|if
condition|(
name|startTime
operator|<
literal|0
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Status: Finished successfully within a check interval."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|double
name|duration
init|=
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Status: Finished successfully in "
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%.2f seconds"
argument_list|,
name|duration
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|running
operator|=
literal|false
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|FAILED
case|:
name|console
operator|.
name|printError
argument_list|(
literal|"Status: Failed"
argument_list|)
expr_stmt|;
name|running
operator|=
literal|false
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
name|rc
operator|=
literal|2
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|done
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|checkInterval
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|failedCounter
operator|%
name|maxRetryInterval
operator|/
name|checkInterval
operator|==
literal|0
operator|||
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Killing Job..."
argument_list|)
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
literal|"Execution has failed."
argument_list|)
expr_stmt|;
name|rc
operator|=
literal|1
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Retrying..."
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|done
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|rc
return|;
block|}
specifier|private
name|void
name|printStatus
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|SparkStageProgress
argument_list|>
name|progressMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SparkStageProgress
argument_list|>
name|lastProgressMap
parameter_list|)
block|{
comment|// do not print duplicate status while still in middle of print interval.
name|boolean
name|isDuplicateState
init|=
name|isSameAsPreviousProgress
argument_list|(
name|progressMap
argument_list|,
name|lastProgressMap
argument_list|)
decl_stmt|;
name|boolean
name|isPassedInterval
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<=
name|lastPrintTime
operator|+
name|printInterval
decl_stmt|;
if|if
condition|(
name|isDuplicateState
operator|&&
name|isPassedInterval
condition|)
block|{
return|return;
block|}
name|StringBuffer
name|reportBuffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|SimpleDateFormat
name|dt
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss,SSS"
argument_list|)
decl_stmt|;
name|String
name|currentDate
init|=
name|dt
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|reportBuffer
operator|.
name|append
argument_list|(
name|currentDate
operator|+
literal|"\t"
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|progressMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|keys
control|)
block|{
name|SparkStageProgress
name|progress
init|=
name|progressMap
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
specifier|final
name|int
name|complete
init|=
name|progress
operator|.
name|getSucceededTaskCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|total
init|=
name|progress
operator|.
name|getTotalTaskCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|running
init|=
name|progress
operator|.
name|getRunningTaskCount
argument_list|()
decl_stmt|;
specifier|final
name|int
name|failed
init|=
name|progress
operator|.
name|getFailedTaskCount
argument_list|()
decl_stmt|;
name|String
name|stageName
init|=
literal|"Stage-"
operator|+
name|s
decl_stmt|;
if|if
condition|(
name|total
operator|<=
literal|0
condition|)
block|{
name|reportBuffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: -/-\t"
argument_list|,
name|stageName
argument_list|,
name|complete
argument_list|,
name|total
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|complete
operator|==
name|total
operator|&&
operator|!
name|completed
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|completed
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|complete
operator|<
name|total
operator|&&
operator|(
name|complete
operator|>
literal|0
operator|||
name|running
operator|>
literal|0
operator|||
name|failed
operator|>
literal|0
operator|)
condition|)
block|{
comment|/* stage is started, but not complete */
if|if
condition|(
name|failed
operator|>
literal|0
condition|)
block|{
name|reportBuffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: %d(+%d,-%d)/%d\t"
argument_list|,
name|stageName
argument_list|,
name|complete
argument_list|,
name|running
argument_list|,
name|failed
argument_list|,
name|total
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reportBuffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: %d(+%d)/%d\t"
argument_list|,
name|stageName
argument_list|,
name|complete
argument_list|,
name|running
argument_list|,
name|total
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|/* stage is waiting for input/slots or complete */
if|if
condition|(
name|failed
operator|>
literal|0
condition|)
block|{
comment|/* tasks finished but some failed */
name|reportBuffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: %d(-%d)/%d Finished with failed tasks\t"
argument_list|,
name|stageName
argument_list|,
name|complete
argument_list|,
name|failed
argument_list|,
name|total
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|complete
operator|==
name|total
condition|)
block|{
name|reportBuffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: %d/%d Finished\t"
argument_list|,
name|stageName
argument_list|,
name|complete
argument_list|,
name|total
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reportBuffer
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: %d/%d\t"
argument_list|,
name|stageName
argument_list|,
name|complete
argument_list|,
name|total
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|lastPrintTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|reportBuffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isSameAsPreviousProgress
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|SparkStageProgress
argument_list|>
name|progressMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SparkStageProgress
argument_list|>
name|lastProgressMap
parameter_list|)
block|{
if|if
condition|(
name|lastProgressMap
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|progressMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|lastProgressMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|lastProgressMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|progressMap
operator|.
name|size
argument_list|()
operator|!=
name|lastProgressMap
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|key
range|:
name|progressMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|lastProgressMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|||
operator|!
name|progressMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|equals
argument_list|(
name|lastProgressMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

