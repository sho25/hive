begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|optimized
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|optimized
operator|.
name|VectorMapJoinOptimizedHashTable
operator|.
name|SerializedBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|fast
operator|.
name|BinarySortableSerializeWrite
import|;
end_import

begin_comment
comment|/*  * An single byte array value hash map based on the BytesBytesMultiHashMap.  *  * Since BytesBytesMultiHashMap does not interpret the key as BinarySortable we optimize  * this case and just reference the byte array key directly for the lookup instead of serializing  * the byte array into BinarySortable. We rely on it just doing byte array equality comparisons.  */
end_comment

begin_class
specifier|public
class|class
name|VectorMapJoinOptimizedStringCommon
block|{
comment|// private boolean isOuterJoin;
comment|// private BinarySortableDeserializeRead keyBinarySortableDeserializeRead;
comment|// private ReadStringResults readStringResults;
specifier|private
name|BinarySortableSerializeWrite
name|keyBinarySortableSerializeWrite
decl_stmt|;
specifier|private
specifier|transient
name|Output
name|output
decl_stmt|;
specifier|private
specifier|transient
name|SerializedBytes
name|serializedBytes
decl_stmt|;
specifier|public
name|SerializedBytes
name|serialize
parameter_list|(
name|byte
index|[]
name|keyBytes
parameter_list|,
name|int
name|keyStart
parameter_list|,
name|int
name|keyLength
parameter_list|)
throws|throws
name|IOException
block|{
name|keyBinarySortableSerializeWrite
operator|.
name|reset
argument_list|()
expr_stmt|;
name|keyBinarySortableSerializeWrite
operator|.
name|writeString
argument_list|(
name|keyBytes
argument_list|,
name|keyStart
argument_list|,
name|keyLength
argument_list|)
expr_stmt|;
name|serializedBytes
operator|.
name|bytes
operator|=
name|output
operator|.
name|getData
argument_list|()
expr_stmt|;
name|serializedBytes
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|serializedBytes
operator|.
name|length
operator|=
name|output
operator|.
name|getLength
argument_list|()
expr_stmt|;
return|return
name|serializedBytes
return|;
block|}
specifier|public
name|VectorMapJoinOptimizedStringCommon
parameter_list|(
name|boolean
name|isOuterJoin
parameter_list|)
block|{
comment|// this.isOuterJoin = isOuterJoin;
comment|// PrimitiveTypeInfo[] primitiveTypeInfos = { TypeInfoFactory.stringTypeInfo };
comment|// keyBinarySortableDeserializeRead = new BinarySortableDeserializeRead(primitiveTypeInfos);
comment|// readStringResults = keyBinarySortableDeserializeRead.createReadStringResults();
comment|// bytesWritable = new BytesWritable();
name|keyBinarySortableSerializeWrite
operator|=
operator|new
name|BinarySortableSerializeWrite
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|output
operator|=
operator|new
name|Output
argument_list|()
expr_stmt|;
name|keyBinarySortableSerializeWrite
operator|.
name|set
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|serializedBytes
operator|=
operator|new
name|SerializedBytes
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

