begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|DoubleObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|IntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Generic UDF for format_number function  *<code>FORMAT_NUMBER(X, D)</code>.  * This is supposed to function like MySQL's FORMAT,  * http://dev.mysql.com/doc/refman/5.1/en/string-functions.html#  * function_format  *  * @see org.apache.hadoop.hive.ql.udf.generic.GenericUDF  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"format_number"
argument_list|,
name|value
operator|=
literal|"_FUNC_(X, D) - Formats the number X to "
operator|+
literal|"a format like '#,###,###.##', rounded to D decimal places,"
operator|+
literal|" and returns the result as a string. If D is 0, the result"
operator|+
literal|" has no decimal point or fractional part."
operator|+
literal|" This is supposed to function like MySQL's FORMAT"
argument_list|,
name|extended
operator|=
literal|"Example:\n"
operator|+
literal|"> SELECT _FUNC_(12332.123456, 4) FROM src LIMIT 1;\n"
operator|+
literal|"  '12,332.1235'"
argument_list|)
specifier|public
class|class
name|GenericUDFFormatNumber
extends|extends
name|GenericUDF
block|{
specifier|private
specifier|transient
name|ObjectInspector
index|[]
name|argumentOIs
decl_stmt|;
specifier|private
specifier|final
name|Text
name|resultText
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StringBuilder
name|pattern
init|=
operator|new
name|StringBuilder
argument_list|(
literal|""
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DecimalFormat
name|numberFormat
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|""
argument_list|)
decl_stmt|;
specifier|private
name|int
name|lastDValue
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"The function FORMAT_NUMBER(X, D) needs two arguments."
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|arguments
index|[
literal|0
index|]
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
break|break;
default|default:
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"Argument 1"
operator|+
literal|" of function FORMAT_NUMBER must be \""
operator|+
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|INT_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
operator|+
literal|"\", but \""
operator|+
name|arguments
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\" was found."
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|arguments
index|[
literal|1
index|]
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
break|break;
default|default:
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"Argument 2"
operator|+
literal|" of function FORMAT_NUMBER must be \""
operator|+
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|INT_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
operator|+
literal|"\", but \""
operator|+
name|arguments
index|[
literal|1
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\" was found."
argument_list|)
throw|;
block|}
name|PrimitiveObjectInspector
name|xObjectInspector
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
decl_stmt|;
name|PrimitiveObjectInspector
name|dObjectInspector
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
decl_stmt|;
switch|switch
condition|(
name|xObjectInspector
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
break|break;
default|default:
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"Argument 1"
operator|+
literal|" of function FORMAT_NUMBER must be \""
operator|+
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|INT_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
operator|+
literal|"\", but \""
operator|+
name|arguments
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\" was found."
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|dObjectInspector
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
break|break;
default|default:
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"Argument 2"
operator|+
literal|" of function FORMAT_NUMBER must be \""
operator|+
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|INT_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
operator|+
literal|"\", but \""
operator|+
name|arguments
index|[
literal|1
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\" was found."
argument_list|)
throw|;
block|}
name|argumentOIs
operator|=
name|arguments
expr_stmt|;
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|dValue
init|=
operator|(
operator|(
name|IntObjectInspector
operator|)
name|argumentOIs
index|[
literal|1
index|]
operator|)
operator|.
name|get
argument_list|(
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dValue
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Argument 2 of function FORMAT_NUMBER must be>= 0, but \""
operator|+
name|dValue
operator|+
literal|"\" was found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|dValue
operator|!=
name|lastDValue
condition|)
block|{
comment|// construct a new DecimalFormat only if a new dValue
name|pattern
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|pattern
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|append
argument_list|(
literal|"#,###,###,###,###,###,##0"
argument_list|)
expr_stmt|;
comment|//decimal place
if|if
condition|(
name|dValue
operator|>
literal|0
condition|)
block|{
name|pattern
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dValue
condition|;
name|i
operator|++
control|)
block|{
name|pattern
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
block|}
name|DecimalFormat
name|dFormat
init|=
operator|new
name|DecimalFormat
argument_list|(
name|pattern
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|lastDValue
operator|=
name|dValue
expr_stmt|;
name|numberFormat
operator|.
name|applyPattern
argument_list|(
name|dFormat
operator|.
name|toPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|double
name|xDoubleValue
init|=
literal|0.0
decl_stmt|;
name|int
name|xIntValue
init|=
literal|0
decl_stmt|;
name|long
name|xLongValue
init|=
literal|0L
decl_stmt|;
name|PrimitiveObjectInspector
name|xObjectInspector
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|argumentOIs
index|[
literal|0
index|]
decl_stmt|;
switch|switch
condition|(
name|xObjectInspector
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
name|xDoubleValue
operator|=
operator|(
operator|(
name|DoubleObjectInspector
operator|)
name|argumentOIs
index|[
literal|0
index|]
operator|)
operator|.
name|get
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|resultText
operator|.
name|set
argument_list|(
name|numberFormat
operator|.
name|format
argument_list|(
name|xDoubleValue
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
name|xIntValue
operator|=
operator|(
operator|(
name|IntObjectInspector
operator|)
name|argumentOIs
index|[
literal|0
index|]
operator|)
operator|.
name|get
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|resultText
operator|.
name|set
argument_list|(
name|numberFormat
operator|.
name|format
argument_list|(
name|xIntValue
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|xLongValue
operator|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|argumentOIs
index|[
literal|0
index|]
operator|)
operator|.
name|get
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|resultText
operator|.
name|set
argument_list|(
name|numberFormat
operator|.
name|format
argument_list|(
name|xLongValue
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Argument 1 of function FORMAT_NUMBER must be "
operator|+
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|INT_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
operator|+
literal|"\""
operator|+
literal|" or \""
operator|+
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
operator|+
literal|"\", but \""
operator|+
name|argumentOIs
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\" was found."
argument_list|)
throw|;
block|}
return|return
name|resultText
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
assert|assert
operator|(
name|children
operator|.
name|length
operator|==
literal|2
operator|)
assert|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"format_number("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|children
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|children
index|[
name|children
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

