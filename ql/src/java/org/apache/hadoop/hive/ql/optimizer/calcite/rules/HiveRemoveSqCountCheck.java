begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPredicateList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * Planner rule that removes UDF sq_count_check from a plan if  *  1) either group by keys in a subquery are constant and there is no windowing or grouping sets  *  2) OR there are no group by keys but only aggregate  *  Both of the above case will produce at most one row, therefore it is safe to remove sq_count_check  *    which was introduced earlier in the plan to ensure that this condition is met at run time  */
end_comment

begin_class
specifier|public
class|class
name|HiveRemoveSqCountCheck
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|HiveRemoveSqCountCheck
name|INSTANCE
init|=
operator|new
name|HiveRemoveSqCountCheck
argument_list|()
decl_stmt|;
comment|//match if there is filter (sq_count_check) as right input of a join which is left
comment|// input of another join
specifier|public
name|HiveRemoveSqCountCheck
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Join
operator|.
name|class
argument_list|,
name|some
argument_list|(
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|Join
operator|.
name|class
argument_list|,
name|some
argument_list|(
name|operand
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|operand
argument_list|(
name|Filter
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|Aggregate
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
argument_list|,
literal|"HiveRemoveSqCountCheck"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|RelNode
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|instanceof
name|HiveFilter
condition|)
block|{
name|HiveFilter
name|hiveFilter
init|=
operator|(
name|HiveFilter
operator|)
name|filter
decl_stmt|;
comment|// check if it has sq_count_check
if|if
condition|(
name|isSqlCountCheck
argument_list|(
name|hiveFilter
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isSqlCountCheck
parameter_list|(
specifier|final
name|HiveFilter
name|filter
parameter_list|)
block|{
comment|// look at hivesubqueryremoverule to see how is this filter created
if|if
condition|(
name|filter
operator|.
name|getCondition
argument_list|()
operator|instanceof
name|RexCall
condition|)
block|{
specifier|final
name|RexCall
name|condition
init|=
operator|(
name|RexCall
operator|)
name|filter
operator|.
name|getCondition
argument_list|()
decl_stmt|;
if|if
condition|(
name|condition
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|LESS_THAN_OR_EQUAL
condition|)
block|{
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
name|condition
operator|.
name|getOperands
argument_list|()
decl_stmt|;
if|if
condition|(
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|RexCall
condition|)
block|{
specifier|final
name|RexCall
name|op
init|=
operator|(
name|RexCall
operator|)
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getOperator
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"sq_count_check"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isAggregateWithoutGbyKeys
parameter_list|(
specifier|final
name|Aggregate
name|agg
parameter_list|)
block|{
return|return
name|agg
operator|.
name|getGroupCount
argument_list|()
operator|==
literal|0
condition|?
literal|true
else|:
literal|false
return|;
block|}
specifier|private
name|boolean
name|isAggWithConstantGbyKeys
parameter_list|(
specifier|final
name|Aggregate
name|aggregate
parameter_list|,
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|aggregate
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|RelMetadataQuery
name|mq
init|=
name|call
operator|.
name|getMetadataQuery
argument_list|()
decl_stmt|;
specifier|final
name|RelOptPredicateList
name|predicates
init|=
name|mq
operator|.
name|getPulledUpPredicates
argument_list|(
name|aggregate
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|predicates
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|NavigableMap
argument_list|<
name|Integer
argument_list|,
name|RexNode
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|key
range|:
name|aggregate
operator|.
name|getGroupSet
argument_list|()
control|)
block|{
specifier|final
name|RexInputRef
name|ref
init|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|aggregate
operator|.
name|getInput
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|predicates
operator|.
name|constantMap
operator|.
name|containsKey
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|predicates
operator|.
name|constantMap
operator|.
name|get
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// None of the group expressions are constant. Nothing to do.
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|int
name|groupCount
init|=
name|aggregate
operator|.
name|getGroupCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupCount
operator|==
name|map
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Join
name|topJoin
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|Aggregate
name|aggregate
init|=
name|call
operator|.
name|rel
argument_list|(
literal|6
argument_list|)
decl_stmt|;
comment|// in presence of grouping sets we can't remove sq_count_check
if|if
condition|(
name|aggregate
operator|.
name|indicator
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|isAggregateWithoutGbyKeys
argument_list|(
name|aggregate
argument_list|)
operator|||
name|isAggWithConstantGbyKeys
argument_list|(
name|aggregate
argument_list|,
name|call
argument_list|)
condition|)
block|{
comment|// join(left, join.getRight)
name|RelNode
name|newJoin
init|=
name|HiveJoin
operator|.
name|getJoin
argument_list|(
name|topJoin
operator|.
name|getCluster
argument_list|()
argument_list|,
name|join
operator|.
name|getLeft
argument_list|()
argument_list|,
name|topJoin
operator|.
name|getRight
argument_list|()
argument_list|,
name|topJoin
operator|.
name|getCondition
argument_list|()
argument_list|,
name|topJoin
operator|.
name|getJoinType
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newJoin
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

