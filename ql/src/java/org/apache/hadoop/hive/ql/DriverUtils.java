begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|DriverUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DriverUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|runOnDriver
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|user
parameter_list|,
name|SessionState
name|sessionState
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|HiveException
block|{
name|runOnDriver
argument_list|(
name|conf
argument_list|,
name|user
argument_list|,
name|sessionState
argument_list|,
name|query
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * For Query Based compaction to run the query to generate the compacted data.    */
specifier|public
specifier|static
name|void
name|runOnDriver
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|user
parameter_list|,
name|SessionState
name|sessionState
parameter_list|,
name|String
name|query
parameter_list|,
name|ValidWriteIdList
name|writeIds
parameter_list|,
name|long
name|compactorTxnId
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|writeIds
operator|!=
literal|null
operator|&&
name|compactorTxnId
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|compactorTxnId
argument_list|)
operator|+
literal|" is not valid. Context: "
operator|+
name|query
argument_list|)
throw|;
block|}
name|SessionState
operator|.
name|setCurrentSessionState
argument_list|(
name|sessionState
argument_list|)
expr_stmt|;
name|boolean
name|isOk
init|=
literal|false
decl_stmt|;
try|try
block|{
name|QueryState
name|qs
init|=
operator|new
name|QueryState
operator|.
name|Builder
argument_list|()
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withGenerateNewQueryId
argument_list|(
literal|true
argument_list|)
operator|.
name|nonIsolated
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|Driver
name|driver
init|=
operator|new
name|Driver
argument_list|(
name|qs
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|driver
operator|.
name|setCompactionWriteIds
argument_list|(
name|writeIds
argument_list|,
name|compactorTxnId
argument_list|)
expr_stmt|;
try|try
block|{
try|try
block|{
name|driver
operator|.
name|run
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandProcessorException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to run "
operator|+
name|query
argument_list|,
name|e
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Failed to run "
operator|+
name|query
argument_list|,
name|e
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|driver
operator|.
name|close
argument_list|()
expr_stmt|;
name|driver
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|isOk
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|isOk
condition|)
block|{
try|try
block|{
name|sessionState
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// This also resets SessionState.get.
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close a bad session"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|detachSession
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|SessionState
name|setUpSessionState
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|user
parameter_list|,
name|boolean
name|doStart
parameter_list|)
block|{
name|SessionState
name|sessionState
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionState
operator|==
literal|null
condition|)
block|{
comment|// Note: we assume that workers run on the same threads repeatedly, so we can set up
comment|//       the session here and it will be reused without explicitly storing in the worker.
name|sessionState
operator|=
operator|new
name|SessionState
argument_list|(
name|conf
argument_list|,
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
name|doStart
condition|)
block|{
comment|// TODO: Required due to SessionState.getHDFSSessionPath. Why wasn't it required before?
name|sessionState
operator|.
name|setIsHiveServerQuery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|sessionState
argument_list|)
expr_stmt|;
block|}
name|SessionState
operator|.
name|setCurrentSessionState
argument_list|(
name|sessionState
argument_list|)
expr_stmt|;
block|}
return|return
name|sessionState
return|;
block|}
block|}
end_class

end_unit

