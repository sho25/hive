begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|DefaultHiveAuthorizationTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizationTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzPluginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveV1Authorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * Common utilities for Role related ddl operations.  */
end_comment

begin_class
specifier|final
class|class
name|RoleUtils
block|{
specifier|private
name|RoleUtils
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"RoleUtils should not be instantiated"
argument_list|)
throw|;
block|}
specifier|static
name|HiveAuthorizer
name|getSessionAuthorizer
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|HiveAuthorizer
name|authorizer
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getAuthorizerV2
argument_list|()
decl_stmt|;
if|if
condition|(
name|authorizer
operator|==
literal|null
condition|)
block|{
name|authorizer
operator|=
operator|new
name|HiveV1Authorizer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|authorizer
return|;
block|}
specifier|static
name|void
name|writeListToFileAfterSort
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|entries
parameter_list|,
name|String
name|resFile
parameter_list|,
name|DDLOperationContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|entry
range|:
name|entries
control|)
block|{
name|DDLUtils
operator|.
name|appendNonNull
argument_list|(
name|sb
argument_list|,
name|entry
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|DDLUtils
operator|.
name|writeToFile
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|resFile
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|HiveAuthorizationTranslator
name|DEFAULT_AUTHORIZATION_TRANSLATOR
init|=
operator|new
name|DefaultHiveAuthorizationTranslator
argument_list|()
decl_stmt|;
specifier|static
name|HiveAuthorizationTranslator
name|getAuthorizationTranslator
parameter_list|(
name|HiveAuthorizer
name|authorizer
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
if|if
condition|(
name|authorizer
operator|.
name|getHiveAuthorizationTranslator
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|DEFAULT_AUTHORIZATION_TRANSLATOR
return|;
block|}
else|else
block|{
return|return
operator|(
name|HiveAuthorizationTranslator
operator|)
name|authorizer
operator|.
name|getHiveAuthorizationTranslator
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

