begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"unhex"
argument_list|,
name|value
operator|=
literal|"_FUNC_(str) - Converts hexadecimal argument to string"
argument_list|,
name|extended
operator|=
literal|"Performs the inverse operation of HEX(str). That is, it interprets\n"
operator|+
literal|"each pair of hexadecimal digits in the argument as a number and\n"
operator|+
literal|"converts it to the character represented by the number. The\n"
operator|+
literal|"resulting characters are returned as a binary string.\n\n"
operator|+
literal|"Example:\n"
operator|+
literal|"> SELECT UNHEX('4D7953514C') from src limit 1;\n"
operator|+
literal|"'MySQL'\n"
operator|+
literal|"> SELECT UNHEX(HEX('string')) from src limit 1;\n"
operator|+
literal|"'string'\n"
operator|+
literal|"> SELECT HEX(UNHEX('1267')) from src limit 1;\n"
operator|+
literal|"'1267'\n\n"
operator|+
literal|"The characters in the argument string must be legal hexadecimal\n"
operator|+
literal|"digits: '0' .. '9', 'A' .. 'F', 'a' .. 'f'. If UNHEX() encounters\n"
operator|+
literal|"any nonhexadecimal digits in the argument, it returns NULL. Also,\n"
operator|+
literal|"if there are an odd number of characters a leading 0 is appended."
argument_list|)
specifier|public
class|class
name|UDFUnhex
extends|extends
name|UDF
block|{
comment|/**    * Convert every two hex digits in s into    *     */
specifier|public
name|Text
name|evaluate
parameter_list|(
name|Text
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// append a leading 0 if needed
name|String
name|str
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getLength
argument_list|()
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|str
operator|=
literal|"0"
operator|+
name|s
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|str
operator|=
name|s
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|str
operator|.
name|length
argument_list|()
operator|/
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
block|{
try|try
block|{
name|result
index|[
name|i
operator|/
literal|2
index|]
operator|=
operator|(
operator|(
name|byte
operator|)
name|Integer
operator|.
name|parseInt
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|2
argument_list|)
argument_list|,
literal|16
argument_list|)
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// invalid character present, return null
return|return
literal|null
return|;
block|}
block|}
return|return
operator|new
name|Text
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
end_class

end_unit

