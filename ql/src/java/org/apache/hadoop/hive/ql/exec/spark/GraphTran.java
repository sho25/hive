begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|api
operator|.
name|java
operator|.
name|JavaPairRDD
import|;
end_import

begin_class
specifier|public
class|class
name|GraphTran
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|SparkTran
argument_list|>
name|rootTrans
init|=
operator|new
name|HashSet
argument_list|<
name|SparkTran
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|SparkTran
argument_list|>
name|leafTrans
init|=
operator|new
name|HashSet
argument_list|<
name|SparkTran
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|SparkTran
argument_list|,
name|List
argument_list|<
name|SparkTran
argument_list|>
argument_list|>
name|transGraph
init|=
operator|new
name|HashMap
argument_list|<
name|SparkTran
argument_list|,
name|List
argument_list|<
name|SparkTran
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|SparkTran
argument_list|,
name|List
argument_list|<
name|SparkTran
argument_list|>
argument_list|>
name|invertedTransGraph
init|=
operator|new
name|HashMap
argument_list|<
name|SparkTran
argument_list|,
name|List
argument_list|<
name|SparkTran
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|SparkTran
argument_list|,
name|List
argument_list|<
name|JavaPairRDD
argument_list|<
name|HiveKey
argument_list|,
name|BytesWritable
argument_list|>
argument_list|>
argument_list|>
name|unionInputs
init|=
operator|new
name|HashMap
argument_list|<
name|SparkTran
argument_list|,
name|List
argument_list|<
name|JavaPairRDD
argument_list|<
name|HiveKey
argument_list|,
name|BytesWritable
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|SparkTran
argument_list|,
name|JavaPairRDD
argument_list|<
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|>
argument_list|>
name|mapInputs
init|=
operator|new
name|HashMap
argument_list|<
name|SparkTran
argument_list|,
name|JavaPairRDD
argument_list|<
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addRootTranWithInput
parameter_list|(
name|SparkTran
name|tran
parameter_list|,
name|JavaPairRDD
argument_list|<
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|>
name|input
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rootTrans
operator|.
name|contains
argument_list|(
name|tran
argument_list|)
condition|)
block|{
name|rootTrans
operator|.
name|add
argument_list|(
name|tran
argument_list|)
expr_stmt|;
name|leafTrans
operator|.
name|add
argument_list|(
name|tran
argument_list|)
expr_stmt|;
name|transGraph
operator|.
name|put
argument_list|(
name|tran
argument_list|,
operator|new
name|LinkedList
argument_list|<
name|SparkTran
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|invertedTransGraph
operator|.
name|put
argument_list|(
name|tran
argument_list|,
operator|new
name|LinkedList
argument_list|<
name|SparkTran
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|mapInputs
operator|.
name|put
argument_list|(
name|tran
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|IllegalStateException
block|{
name|Map
argument_list|<
name|SparkTran
argument_list|,
name|JavaPairRDD
argument_list|<
name|HiveKey
argument_list|,
name|BytesWritable
argument_list|>
argument_list|>
name|resultRDDs
init|=
operator|new
name|HashMap
argument_list|<
name|SparkTran
argument_list|,
name|JavaPairRDD
argument_list|<
name|HiveKey
argument_list|,
name|BytesWritable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SparkTran
name|tran
range|:
name|rootTrans
control|)
block|{
comment|// make sure all the root trans are MapTran
if|if
condition|(
operator|!
operator|(
name|tran
operator|instanceof
name|MapTran
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"root transformations must be MapTran!"
argument_list|)
throw|;
block|}
name|JavaPairRDD
argument_list|<
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|>
name|input
init|=
name|mapInputs
operator|.
name|get
argument_list|(
name|tran
argument_list|)
decl_stmt|;
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"input is missing for transformation!"
argument_list|)
throw|;
block|}
name|JavaPairRDD
argument_list|<
name|HiveKey
argument_list|,
name|BytesWritable
argument_list|>
name|rdd
init|=
name|tran
operator|.
name|transform
argument_list|(
name|input
argument_list|)
decl_stmt|;
while|while
condition|(
name|getChildren
argument_list|(
name|tran
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|SparkTran
name|childTran
init|=
name|getChildren
argument_list|(
name|tran
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|childTran
operator|instanceof
name|UnionTran
condition|)
block|{
name|List
argument_list|<
name|JavaPairRDD
argument_list|<
name|HiveKey
argument_list|,
name|BytesWritable
argument_list|>
argument_list|>
name|unionInputList
init|=
name|unionInputs
operator|.
name|get
argument_list|(
name|childTran
argument_list|)
decl_stmt|;
if|if
condition|(
name|unionInputList
operator|==
literal|null
condition|)
block|{
comment|// process the first union input RDD, cache it in the hash map
name|unionInputList
operator|=
operator|new
name|LinkedList
argument_list|<
name|JavaPairRDD
argument_list|<
name|HiveKey
argument_list|,
name|BytesWritable
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|unionInputList
operator|.
name|add
argument_list|(
name|rdd
argument_list|)
expr_stmt|;
name|unionInputs
operator|.
name|put
argument_list|(
name|childTran
argument_list|,
name|unionInputList
argument_list|)
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|unionInputList
operator|.
name|size
argument_list|()
operator|<
name|this
operator|.
name|getParents
argument_list|(
name|childTran
argument_list|)
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
comment|// not the last input RDD yet, continue caching it in the hash map
name|unionInputList
operator|.
name|add
argument_list|(
name|rdd
argument_list|)
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|unionInputList
operator|.
name|size
argument_list|()
operator|==
name|this
operator|.
name|getParents
argument_list|(
name|childTran
argument_list|)
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
comment|// process
comment|// process the last input RDD
for|for
control|(
name|JavaPairRDD
argument_list|<
name|HiveKey
argument_list|,
name|BytesWritable
argument_list|>
name|inputRDD
range|:
name|unionInputList
control|)
block|{
operator|(
operator|(
name|UnionTran
operator|)
name|childTran
operator|)
operator|.
name|setOtherInput
argument_list|(
name|inputRDD
argument_list|)
expr_stmt|;
name|rdd
operator|=
name|childTran
operator|.
name|transform
argument_list|(
name|rdd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|rdd
operator|=
name|childTran
operator|.
name|transform
argument_list|(
name|rdd
argument_list|)
expr_stmt|;
block|}
name|tran
operator|=
name|childTran
expr_stmt|;
block|}
comment|// if the current transformation is a leaf tran and it has not got processed yet, cache its corresponding RDD
if|if
condition|(
operator|!
name|resultRDDs
operator|.
name|containsKey
argument_list|(
name|tran
argument_list|)
operator|&&
name|getChildren
argument_list|(
name|tran
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resultRDDs
operator|.
name|put
argument_list|(
name|tran
argument_list|,
name|rdd
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|JavaPairRDD
argument_list|<
name|HiveKey
argument_list|,
name|BytesWritable
argument_list|>
name|resultRDD
range|:
name|resultRDDs
operator|.
name|values
argument_list|()
control|)
block|{
name|resultRDD
operator|.
name|foreach
argument_list|(
name|HiveVoidFunction
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Connects the two SparkTrans in the graph.  Does not allow multiple connections    * between the same pair of SparkTrans.    * @param parent    * @param child    */
specifier|public
name|void
name|connect
parameter_list|(
name|SparkTran
name|parent
parameter_list|,
name|SparkTran
name|child
parameter_list|)
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
name|getChildren
argument_list|(
name|parent
argument_list|)
operator|.
name|contains
argument_list|(
name|child
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Connection already exists"
argument_list|)
throw|;
block|}
name|leafTrans
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|transGraph
operator|.
name|get
argument_list|(
name|child
argument_list|)
operator|==
literal|null
condition|)
block|{
name|transGraph
operator|.
name|put
argument_list|(
name|child
argument_list|,
operator|new
name|LinkedList
argument_list|<
name|SparkTran
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|invertedTransGraph
operator|.
name|get
argument_list|(
name|child
argument_list|)
operator|==
literal|null
condition|)
block|{
name|invertedTransGraph
operator|.
name|put
argument_list|(
name|child
argument_list|,
operator|new
name|LinkedList
argument_list|<
name|SparkTran
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transGraph
operator|.
name|get
argument_list|(
name|parent
argument_list|)
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|invertedTransGraph
operator|.
name|get
argument_list|(
name|child
argument_list|)
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SparkTran
argument_list|>
name|getParents
parameter_list|(
name|SparkTran
name|tran
parameter_list|)
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
operator|!
name|invertedTransGraph
operator|.
name|containsKey
argument_list|(
name|tran
argument_list|)
operator|||
name|invertedTransGraph
operator|.
name|get
argument_list|(
name|tran
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot get parent transformations for "
operator|+
name|tran
argument_list|)
throw|;
block|}
return|return
operator|new
name|LinkedList
argument_list|<
name|SparkTran
argument_list|>
argument_list|(
name|invertedTransGraph
operator|.
name|get
argument_list|(
name|tran
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|SparkTran
argument_list|>
name|getChildren
parameter_list|(
name|SparkTran
name|tran
parameter_list|)
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
operator|!
name|transGraph
operator|.
name|containsKey
argument_list|(
name|tran
argument_list|)
operator|||
name|transGraph
operator|.
name|get
argument_list|(
name|tran
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot get children transformations for "
operator|+
name|tran
argument_list|)
throw|;
block|}
return|return
operator|new
name|LinkedList
argument_list|<
name|SparkTran
argument_list|>
argument_list|(
name|transGraph
operator|.
name|get
argument_list|(
name|tran
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

