begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|MapRedTask
operator|.
name|HADOOP_CLIENT_OPTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|MapRedTask
operator|.
name|HADOOP_MEM_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|MapRedTask
operator|.
name|HADOOP_OPTS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|MapRedTask
operator|.
name|HIVE_SYS_PROP
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|CachingPrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|log
operator|.
name|LogRedirector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsConstant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|BucketMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FetchOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SecureCmdDoAs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SerializationUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mapjoin
operator|.
name|MapJoinMemoryExhaustionError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BucketMapJoinContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FetchWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredLocalWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|StageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|InspectableObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|StreamPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * MapredLocalTask represents any local work (i.e.: client side work) that hive needs to  * execute. E.g.: This is used for generating Hashtables for Mapjoins on the client  * before the Join is executed on the cluster.  *  * MapRedLocalTask does not actually execute the work in process, but rather generates  * a command using ExecDriver. ExecDriver is what will finally drive processing the records.  */
end_comment

begin_class
specifier|public
class|class
name|MapredLocalTask
extends|extends
name|Task
argument_list|<
name|MapredLocalWork
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
name|fetchOperators
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|HadoopJobExecHelper
name|jobExecHelper
decl_stmt|;
specifier|private
name|JobConf
name|job
decl_stmt|;
specifier|public
specifier|static
specifier|transient
specifier|final
name|Logger
name|l4j
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MapredLocalTask
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|HIVE_LOCAL_TASK_CHILD_OPTS_KEY
init|=
literal|"HIVE_LOCAL_TASK_CHILD_OPTS"
decl_stmt|;
specifier|public
specifier|static
name|MemoryMXBean
name|memoryMXBean
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MapredLocalTask
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// not sure we need this exec context; but all the operators in the work
comment|// will pass this context throught
specifier|private
name|ExecMapperContext
name|execContext
init|=
literal|null
decl_stmt|;
specifier|private
name|Process
name|executor
decl_stmt|;
specifier|private
name|SecureCmdDoAs
name|secureDoAs
decl_stmt|;
specifier|public
name|MapredLocalTask
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|MapredLocalTask
parameter_list|(
name|MapredLocalWork
name|plan
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|boolean
name|isSilent
parameter_list|)
throws|throws
name|HiveException
block|{
name|setWork
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
name|console
operator|=
operator|new
name|LogHelper
argument_list|(
name|LOG
argument_list|,
name|isSilent
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setExecContext
parameter_list|(
name|ExecMapperContext
name|execContext
parameter_list|)
block|{
name|this
operator|.
name|execContext
operator|=
name|execContext
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateTaskMetrics
parameter_list|(
name|Metrics
name|metrics
parameter_list|)
block|{
name|metrics
operator|.
name|incrementCounter
argument_list|(
name|MetricsConstant
operator|.
name|HIVE_MR_TASKS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|QueryState
name|queryState
parameter_list|,
name|QueryPlan
name|queryPlan
parameter_list|,
name|DriverContext
name|driverContext
parameter_list|,
name|CompilationOpContext
name|opContext
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|queryState
argument_list|,
name|queryPlan
argument_list|,
name|driverContext
argument_list|,
name|opContext
argument_list|)
expr_stmt|;
name|job
operator|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|ExecDriver
operator|.
name|class
argument_list|)
expr_stmt|;
name|execContext
operator|=
operator|new
name|ExecMapperContext
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|//we don't use the HadoopJobExecHooks for local tasks
name|this
operator|.
name|jobExecHelper
operator|=
operator|new
name|HadoopJobExecHelper
argument_list|(
name|job
argument_list|,
name|console
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|now
parameter_list|()
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
return|return
name|sdf
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|requireLock
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|(
name|DriverContext
name|driverContext
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SUBMITLOCALTASKVIACHILD
argument_list|)
condition|)
block|{
comment|// send task off to another jvm
return|return
name|executeInChildVM
argument_list|(
name|driverContext
argument_list|)
return|;
block|}
else|else
block|{
comment|// execute in process
return|return
name|executeInProcess
argument_list|(
name|driverContext
argument_list|)
return|;
block|}
block|}
specifier|public
name|int
name|executeInChildVM
parameter_list|(
name|DriverContext
name|driverContext
parameter_list|)
block|{
comment|// execute in child jvm
try|try
block|{
comment|// generate the cmd line to run in the child jvm
name|Context
name|ctx
init|=
name|driverContext
operator|.
name|getCtx
argument_list|()
decl_stmt|;
name|String
name|hiveJar
init|=
name|conf
operator|.
name|getJar
argument_list|()
decl_stmt|;
name|String
name|hadoopExec
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPBIN
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVEADDEDJARS
argument_list|,
name|Utilities
operator|.
name|getResourceFiles
argument_list|(
name|conf
argument_list|,
name|SessionState
operator|.
name|ResourceType
operator|.
name|JAR
argument_list|)
argument_list|)
expr_stmt|;
comment|// write out the plan to a local file
name|Path
name|planPath
init|=
operator|new
name|Path
argument_list|(
name|ctx
operator|.
name|getLocalTmpPath
argument_list|()
argument_list|,
literal|"plan.xml"
argument_list|)
decl_stmt|;
name|MapredLocalWork
name|plan
init|=
name|getWork
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Generating plan file "
operator|+
name|planPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|create
argument_list|(
name|planPath
argument_list|)
expr_stmt|;
name|SerializationUtilities
operator|.
name|serializePlan
argument_list|(
name|plan
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|String
name|isSilent
init|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.silent"
argument_list|)
argument_list|)
condition|?
literal|"-nolog"
else|:
literal|""
decl_stmt|;
name|String
name|libJars
init|=
name|ExecDriver
operator|.
name|getResource
argument_list|(
name|conf
argument_list|,
name|ResourceType
operator|.
name|JAR
argument_list|)
decl_stmt|;
name|String
name|libJarsOption
init|=
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|libJars
argument_list|)
condition|?
literal|" "
else|:
literal|" -libjars "
operator|+
name|libJars
operator|+
literal|" "
decl_stmt|;
name|String
name|jarCmd
init|=
name|hiveJar
operator|+
literal|" "
operator|+
name|ExecDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
name|libJarsOption
decl_stmt|;
name|String
name|hiveConfArgs
init|=
name|ExecDriver
operator|.
name|generateCmdLine
argument_list|(
name|conf
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|String
name|cmdLine
init|=
name|hadoopExec
operator|+
literal|" jar "
operator|+
name|jarCmd
operator|+
literal|" -localtask -plan "
operator|+
name|planPath
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|isSilent
operator|+
literal|" "
operator|+
name|hiveConfArgs
decl_stmt|;
name|String
name|workDir
init|=
operator|(
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|)
operator|.
name|getCanonicalPath
argument_list|()
decl_stmt|;
name|String
name|files
init|=
name|Utilities
operator|.
name|getResourceFiles
argument_list|(
name|conf
argument_list|,
name|SessionState
operator|.
name|ResourceType
operator|.
name|FILE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cmdLine
operator|=
name|cmdLine
operator|+
literal|" -files "
operator|+
name|files
expr_stmt|;
name|workDir
operator|=
name|ctx
operator|.
name|getLocalTmpPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|workDir
argument_list|)
operator|)
operator|.
name|mkdir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create tmp working dir: "
operator|+
name|workDir
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|f
range|:
name|StringUtils
operator|.
name|split
argument_list|(
name|files
argument_list|,
literal|','
argument_list|)
control|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|target
init|=
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|link
init|=
name|workDir
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|FileUtil
operator|.
name|symLink
argument_list|(
name|target
argument_list|,
name|link
argument_list|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot link to added file: "
operator|+
name|target
operator|+
literal|" from: "
operator|+
name|link
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Inherit Java system variables
name|String
name|hadoopOpts
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Properties
name|p
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|HIVE_SYS_PROP
control|)
block|{
if|if
condition|(
name|p
operator|.
name|containsKey
argument_list|(
name|element
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" -D"
operator|+
name|element
operator|+
literal|"="
operator|+
name|p
operator|.
name|getProperty
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|hadoopOpts
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// Inherit the environment variables
name|String
index|[]
name|env
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|variables
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|System
operator|.
name|getenv
argument_list|()
argument_list|)
decl_stmt|;
comment|// The user can specify the hadoop memory
comment|// if ("local".equals(conf.getVar(HiveConf.ConfVars.HADOOPJT))) {
comment|// if we are running in local mode - then the amount of memory used
comment|// by the child jvm can no longer default to the memory used by the
comment|// parent jvm
comment|// int hadoopMem = conf.getIntVar(HiveConf.ConfVars.HIVEHADOOPMAXMEM);
name|int
name|hadoopMem
init|=
name|conf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEHADOOPMAXMEM
argument_list|)
decl_stmt|;
if|if
condition|(
name|hadoopMem
operator|==
literal|0
condition|)
block|{
comment|// remove env var that would default child jvm to use parent's memory
comment|// as default. child jvm would use default memory for a hadoop client
name|variables
operator|.
name|remove
argument_list|(
name|HADOOP_MEM_KEY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// user specified the memory for local mode hadoop run
name|console
operator|.
name|printInfo
argument_list|(
literal|" set heap size\t"
operator|+
name|hadoopMem
operator|+
literal|"MB"
argument_list|)
expr_stmt|;
name|variables
operator|.
name|put
argument_list|(
name|HADOOP_MEM_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|hadoopMem
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// } else {
comment|// nothing to do - we are not running in local mode - only submitting
comment|// the job via a child process. in this case it's appropriate that the
comment|// child jvm use the same memory as the parent jvm
comment|// }
comment|//Set HADOOP_USER_NAME env variable for child process, so that
comment|// it also runs with hadoop permissions for the user the job is running as
comment|// This will be used by hadoop only in unsecure(/non kerberos) mode
name|String
name|endUserName
init|=
name|Utils
operator|.
name|getUGI
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"setting HADOOP_USER_NAME\t"
operator|+
name|endUserName
argument_list|)
expr_stmt|;
name|variables
operator|.
name|put
argument_list|(
literal|"HADOOP_USER_NAME"
argument_list|,
name|endUserName
argument_list|)
expr_stmt|;
if|if
condition|(
name|variables
operator|.
name|containsKey
argument_list|(
name|HADOOP_OPTS_KEY
argument_list|)
condition|)
block|{
name|variables
operator|.
name|put
argument_list|(
name|HADOOP_OPTS_KEY
argument_list|,
name|variables
operator|.
name|get
argument_list|(
name|HADOOP_OPTS_KEY
argument_list|)
operator|+
name|hadoopOpts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|variables
operator|.
name|put
argument_list|(
name|HADOOP_OPTS_KEY
argument_list|,
name|hadoopOpts
argument_list|)
expr_stmt|;
block|}
comment|//For Windows OS, we need to pass HIVE_HADOOP_CLASSPATH Java parameter while starting
comment|//Hiveserver2 using "-hiveconf hive.hadoop.classpath=%HIVE_LIB%". This is to combine path(s).
if|if
condition|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_HADOOP_CLASSPATH
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|variables
operator|.
name|containsKey
argument_list|(
literal|"HADOOP_CLASSPATH"
argument_list|)
condition|)
block|{
name|variables
operator|.
name|put
argument_list|(
literal|"HADOOP_CLASSPATH"
argument_list|,
name|variables
operator|.
name|get
argument_list|(
literal|"HADOOP_CLASSPATH"
argument_list|)
operator|+
literal|";"
operator|+
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_HADOOP_CLASSPATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|variables
operator|.
name|put
argument_list|(
literal|"HADOOP_CLASSPATH"
argument_list|,
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_HADOOP_CLASSPATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|variables
operator|.
name|containsKey
argument_list|(
name|MapRedTask
operator|.
name|HIVE_DEBUG_RECURSIVE
argument_list|)
condition|)
block|{
name|MapRedTask
operator|.
name|configureDebugVariablesForChildJVM
argument_list|(
name|variables
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
name|UserGroupInformation
operator|.
name|isLoginKeytabBased
argument_list|()
condition|)
block|{
comment|//If kerberos security is enabled, and HS2 doAs is enabled,
comment|// then additional params need to be set so that the command is run as
comment|// intended user
name|secureDoAs
operator|=
operator|new
name|SecureCmdDoAs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|secureDoAs
operator|.
name|addEnv
argument_list|(
name|variables
argument_list|)
expr_stmt|;
block|}
comment|// If HIVE_LOCAL_TASK_CHILD_OPTS is set, child VM environment setting
comment|// HADOOP_CLIENT_OPTS will be replaced with HIVE_LOCAL_TASK_CHILD_OPTS.
comment|// HADOOP_OPTS is updated too since HADOOP_CLIENT_OPTS is appended
comment|// to HADOOP_OPTS in most cases. This way, the local task JVM can
comment|// have different settings from those of HiveServer2.
if|if
condition|(
name|variables
operator|.
name|containsKey
argument_list|(
name|HIVE_LOCAL_TASK_CHILD_OPTS_KEY
argument_list|)
condition|)
block|{
name|String
name|childOpts
init|=
name|variables
operator|.
name|get
argument_list|(
name|HIVE_LOCAL_TASK_CHILD_OPTS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|childOpts
operator|==
literal|null
condition|)
block|{
name|childOpts
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|clientOpts
init|=
name|variables
operator|.
name|put
argument_list|(
name|HADOOP_CLIENT_OPTS
argument_list|,
name|childOpts
argument_list|)
decl_stmt|;
name|String
name|tmp
init|=
name|variables
operator|.
name|get
argument_list|(
name|HADOOP_OPTS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|clientOpts
argument_list|)
condition|)
block|{
name|tmp
operator|=
name|tmp
operator|.
name|replace
argument_list|(
name|clientOpts
argument_list|,
name|childOpts
argument_list|)
expr_stmt|;
name|variables
operator|.
name|put
argument_list|(
name|HADOOP_OPTS_KEY
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
block|}
name|env
operator|=
operator|new
name|String
index|[
name|variables
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|variables
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|env
index|[
name|pos
operator|++
index|]
operator|=
name|name
operator|+
literal|"="
operator|+
name|value
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting env: "
operator|+
name|name
operator|+
literal|"="
operator|+
name|LogUtils
operator|.
name|maskIfPassword
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing: "
operator|+
name|cmdLine
argument_list|)
expr_stmt|;
comment|// Run ExecDriver in another JVM
name|executor
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdLine
argument_list|,
name|env
argument_list|,
operator|new
name|File
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|LogRedirector
operator|.
name|LogSourceCallback
name|callback
init|=
parameter_list|()
lambda|->
block|{
return|return
name|executor
operator|.
name|isAlive
argument_list|()
return|;
block|}
decl_stmt|;
name|LogRedirector
operator|.
name|redirect
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-LocalTask-"
operator|+
name|getName
argument_list|()
operator|+
literal|"-stdout"
argument_list|,
operator|new
name|LogRedirector
argument_list|(
name|executor
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|LOG
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
name|LogRedirector
operator|.
name|redirect
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-LocalTask-"
operator|+
name|getName
argument_list|()
operator|+
literal|"-stderr"
argument_list|,
operator|new
name|LogRedirector
argument_list|(
name|executor
operator|.
name|getErrorStream
argument_list|()
argument_list|,
name|LOG
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
name|CachingPrintStream
name|errPrintStream
init|=
operator|new
name|CachingPrintStream
argument_list|(
name|System
operator|.
name|err
argument_list|)
decl_stmt|;
name|StreamPrinter
name|outPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|out
argument_list|)
decl_stmt|;
name|StreamPrinter
name|errPrinter
init|=
operator|new
name|StreamPrinter
argument_list|(
name|executor
operator|.
name|getErrorStream
argument_list|()
argument_list|,
literal|null
argument_list|,
name|errPrintStream
argument_list|)
decl_stmt|;
name|outPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|errPrinter
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|exitVal
init|=
name|jobExecHelper
operator|.
name|progressLocal
argument_list|(
name|executor
argument_list|,
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|// wait for stream threads to finish
name|outPrinter
operator|.
name|join
argument_list|()
expr_stmt|;
name|errPrinter
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|exitVal
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Execution failed with exit status: "
operator|+
name|exitVal
argument_list|)
expr_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|addLocalMapRedErrors
argument_list|(
name|getId
argument_list|()
argument_list|,
name|errPrintStream
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Execution completed successfully"
argument_list|)
expr_stmt|;
block|}
return|return
name|exitVal
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|(
literal|1
operator|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|secureDoAs
operator|!=
literal|null
condition|)
block|{
name|secureDoAs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|executeInProcess
parameter_list|(
name|DriverContext
name|driverContext
parameter_list|)
block|{
comment|// check the local work
if|if
condition|(
name|work
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|execContext
operator|==
literal|null
condition|)
block|{
name|execContext
operator|=
operator|new
name|ExecMapperContext
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
name|memoryMXBean
operator|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|Utilities
operator|.
name|now
argument_list|()
operator|+
literal|"\tStarting to launch local task to process map join;\tmaximum memory = "
operator|+
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|execContext
operator|.
name|setJc
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// set the local work, so all the operator can get this context
name|execContext
operator|.
name|setLocalWork
argument_list|(
name|work
argument_list|)
expr_stmt|;
try|try
block|{
name|startForward
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|elapsed
init|=
name|currentTime
operator|-
name|startTime
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|Utilities
operator|.
name|now
argument_list|()
operator|+
literal|"\tEnd of local task; Time Taken: "
operator|+
name|Utilities
operator|.
name|showTime
argument_list|(
name|elapsed
argument_list|)
operator|+
literal|" sec."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|int
name|retVal
decl_stmt|;
name|String
name|message
decl_stmt|;
if|if
condition|(
name|throwable
operator|instanceof
name|OutOfMemoryError
operator|||
operator|(
name|throwable
operator|instanceof
name|MapJoinMemoryExhaustionError
operator|)
condition|)
block|{
name|message
operator|=
literal|"Hive Runtime Error: Map local work exhausted memory"
expr_stmt|;
name|retVal
operator|=
literal|3
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
literal|"Hive Runtime Error: Map local work failed"
expr_stmt|;
name|retVal
operator|=
literal|2
expr_stmt|;
block|}
name|l4j
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|message
argument_list|,
name|HiveStringUtils
operator|.
name|stringifyException
argument_list|(
name|throwable
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|startForward
parameter_list|(
name|String
name|bigTableBucket
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|inputFileChangeSenstive
init|=
name|work
operator|.
name|getInputFileChangeSensitive
argument_list|()
decl_stmt|;
name|initializeOperators
argument_list|(
operator|new
name|HashMap
argument_list|<
name|FetchOperator
argument_list|,
name|JobConf
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// for each big table's bucket, call the start forward
if|if
condition|(
name|inputFileChangeSenstive
condition|)
block|{
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|bigTableBucketFiles
range|:
name|work
operator|.
name|getBucketMapjoinContext
argument_list|()
operator|.
name|getAliasBucketFileNameMapping
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|bigTableBucket
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|String
name|bigTableBucketFile
range|:
name|bigTableBucketFiles
operator|.
name|keySet
argument_list|()
control|)
block|{
name|startForward
argument_list|(
name|inputFileChangeSenstive
argument_list|,
name|bigTableBucketFile
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|bigTableBucketFiles
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|bigTableBucket
argument_list|)
condition|)
block|{
name|startForward
argument_list|(
name|inputFileChangeSenstive
argument_list|,
name|bigTableBucket
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|startForward
argument_list|(
name|inputFileChangeSenstive
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|startForward
parameter_list|(
name|boolean
name|inputFileChangeSenstive
parameter_list|,
name|String
name|bigTableBucket
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|source
range|:
name|work
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|source
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|inputFileChangeSenstive
condition|)
block|{
name|execContext
operator|.
name|setCurrentBigBucketFile
argument_list|(
name|bigTableBucket
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
name|entry
range|:
name|fetchOperators
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|alias
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|FetchOperator
name|fetchOp
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputFileChangeSenstive
condition|)
block|{
name|fetchOp
operator|.
name|clearFetchContext
argument_list|()
expr_stmt|;
name|setUpFetchOpContext
argument_list|(
name|fetchOp
argument_list|,
name|alias
argument_list|,
name|bigTableBucket
argument_list|)
expr_stmt|;
block|}
comment|// get the root operator
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|forwardOp
init|=
name|work
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
comment|// walk through the operator tree
while|while
condition|(
operator|!
name|forwardOp
operator|.
name|getDone
argument_list|()
condition|)
block|{
name|InspectableObject
name|row
init|=
name|fetchOp
operator|.
name|getNextRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|forwardOp
operator|.
name|process
argument_list|(
name|row
operator|.
name|o
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|forwardOp
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|source
range|:
name|work
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|source
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initializeOperators
parameter_list|(
name|Map
argument_list|<
name|FetchOperator
argument_list|,
name|JobConf
argument_list|>
name|fetchOpJobConfMap
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|entry
range|:
name|work
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"initializeOperators: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|", children = "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getChildOperators
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// this mapper operator is used to initialize all the operators
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FetchWork
argument_list|>
name|entry
range|:
name|work
operator|.
name|getAliasToFetchWork
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|JobConf
name|jobClone
init|=
operator|new
name|JobConf
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|TableScanOperator
name|ts
init|=
operator|(
name|TableScanOperator
operator|)
name|work
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// push down projections
name|ColumnProjectionUtils
operator|.
name|appendReadColumns
argument_list|(
name|jobClone
argument_list|,
name|ts
operator|.
name|getNeededColumnIDs
argument_list|()
argument_list|,
name|ts
operator|.
name|getNeededColumns
argument_list|()
argument_list|,
name|ts
operator|.
name|getNeededNestedColumnPaths
argument_list|()
argument_list|)
expr_stmt|;
comment|// push down filters
name|HiveInputFormat
operator|.
name|pushFilters
argument_list|(
name|jobClone
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|AcidUtils
operator|.
name|setAcidTableScan
argument_list|(
name|jobClone
argument_list|,
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|isAcidTable
argument_list|()
argument_list|)
expr_stmt|;
name|AcidUtils
operator|.
name|setAcidOperationalProperties
argument_list|(
name|jobClone
argument_list|,
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|getAcidOperationalProperties
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a fetch operator
name|FetchOperator
name|fetchOp
init|=
operator|new
name|FetchOperator
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|jobClone
argument_list|)
decl_stmt|;
name|fetchOpJobConfMap
operator|.
name|put
argument_list|(
name|fetchOp
argument_list|,
name|jobClone
argument_list|)
expr_stmt|;
name|fetchOperators
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|fetchOp
argument_list|)
expr_stmt|;
name|l4j
operator|.
name|info
argument_list|(
literal|"fetchoperator for "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" created"
argument_list|)
expr_stmt|;
block|}
comment|// initialize all forward operator
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
name|entry
range|:
name|fetchOperators
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// get the forward op
name|String
name|alias
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|forwardOp
init|=
name|work
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
comment|// put the exe context into all the operators
name|forwardOp
operator|.
name|passExecContext
argument_list|(
name|execContext
argument_list|)
expr_stmt|;
comment|// All the operators need to be initialized before process
name|FetchOperator
name|fetchOp
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|JobConf
name|jobConf
init|=
name|fetchOpJobConfMap
operator|.
name|get
argument_list|(
name|fetchOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobConf
operator|==
literal|null
condition|)
block|{
name|jobConf
operator|=
name|job
expr_stmt|;
block|}
comment|// initialize the forward operator
name|ObjectInspector
name|objectInspector
init|=
name|fetchOp
operator|.
name|getOutputObjectInspector
argument_list|()
decl_stmt|;
name|forwardOp
operator|.
name|initialize
argument_list|(
name|jobConf
argument_list|,
operator|new
name|ObjectInspector
index|[]
block|{
name|objectInspector
block|}
argument_list|)
expr_stmt|;
name|l4j
operator|.
name|info
argument_list|(
literal|"fetchoperator for "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" initialized"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setUpFetchOpContext
parameter_list|(
name|FetchOperator
name|fetchOp
parameter_list|,
name|String
name|alias
parameter_list|,
name|String
name|currentInputFile
parameter_list|)
throws|throws
name|Exception
block|{
name|BucketMapJoinContext
name|bucketMatcherCxt
init|=
name|this
operator|.
name|work
operator|.
name|getBucketMapjoinContext
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|BucketMatcher
argument_list|>
name|bucketMatcherCls
init|=
name|bucketMatcherCxt
operator|.
name|getBucketMatcherClass
argument_list|()
decl_stmt|;
name|BucketMatcher
name|bucketMatcher
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|bucketMatcherCls
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|bucketMatcher
operator|.
name|setAliasBucketFileNameMapping
argument_list|(
name|bucketMatcherCxt
operator|.
name|getAliasBucketFileNameMapping
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|aliasFiles
init|=
name|bucketMatcher
operator|.
name|getAliasBucketFiles
argument_list|(
name|currentInputFile
argument_list|,
name|bucketMatcherCxt
operator|.
name|getMapJoinBigTableAlias
argument_list|()
argument_list|,
name|alias
argument_list|)
decl_stmt|;
name|fetchOp
operator|.
name|setupContext
argument_list|(
name|aliasFiles
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMapRedLocalTask
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|getTopOperators
parameter_list|()
block|{
return|return
name|getWork
argument_list|()
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"MAPREDLOCAL"
return|;
block|}
annotation|@
name|Override
specifier|public
name|StageType
name|getType
parameter_list|()
block|{
comment|//assert false;
return|return
name|StageType
operator|.
name|MAPREDLOCAL
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
name|executor
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|executor
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

