begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpressionWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_comment
comment|/**  * Descriptor for function argument.  */
end_comment

begin_class
specifier|public
class|class
name|VectorUDFArgDesc
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|boolean
name|isConstant
decl_stmt|;
specifier|private
name|int
name|columnNum
decl_stmt|;
specifier|private
specifier|transient
name|GenericUDF
operator|.
name|DeferredJavaObject
name|constObjVal
decl_stmt|;
specifier|private
name|ExprNodeConstantDesc
name|constExpr
decl_stmt|;
specifier|public
name|VectorUDFArgDesc
parameter_list|()
block|{   }
comment|/**    * Set this argument to a constant value extracted from the    * expression tree.    */
specifier|public
name|void
name|setConstant
parameter_list|(
name|ExprNodeConstantDesc
name|expr
parameter_list|)
block|{
name|isConstant
operator|=
literal|true
expr_stmt|;
name|constExpr
operator|=
name|expr
expr_stmt|;
block|}
comment|/* Prepare the constant for use when the function is called. To be used    * during initialization.    */
specifier|public
name|void
name|prepareConstant
parameter_list|()
block|{
name|PrimitiveCategory
name|pc
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|constExpr
operator|.
name|getTypeInfo
argument_list|()
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
comment|// Convert from Java to Writable
name|Object
name|writableValue
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveJavaObjectInspector
argument_list|(
name|pc
argument_list|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|constExpr
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|constObjVal
operator|=
operator|new
name|GenericUDF
operator|.
name|DeferredJavaObject
argument_list|(
name|writableValue
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set this argument to be a "variable" one which is to be taken from    * a specified column vector number i.    */
specifier|public
name|void
name|setVariable
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|columnNum
operator|=
name|i
expr_stmt|;
block|}
specifier|public
name|boolean
name|isConstant
parameter_list|()
block|{
return|return
name|isConstant
return|;
block|}
specifier|public
name|boolean
name|isVariable
parameter_list|()
block|{
return|return
operator|!
name|isConstant
return|;
block|}
specifier|public
name|int
name|getColumn
parameter_list|()
block|{
return|return
name|columnNum
return|;
block|}
specifier|public
name|DeferredObject
name|getDeferredJavaObject
parameter_list|(
name|int
name|row
parameter_list|,
name|VectorizedRowBatch
name|b
parameter_list|,
name|int
name|argPosition
parameter_list|,
name|VectorExpressionWriter
index|[]
name|writers
parameter_list|)
block|{
if|if
condition|(
name|isConstant
argument_list|()
condition|)
block|{
return|return
name|this
operator|.
name|constObjVal
return|;
block|}
else|else
block|{
comment|// get column
name|ColumnVector
name|cv
init|=
name|b
operator|.
name|cols
index|[
name|columnNum
index|]
decl_stmt|;
comment|// write value to object that can be inspected
name|Object
name|o
decl_stmt|;
try|try
block|{
name|o
operator|=
name|writers
index|[
name|argPosition
index|]
operator|.
name|writeValue
argument_list|(
name|cv
argument_list|,
name|row
argument_list|)
expr_stmt|;
return|return
operator|new
name|GenericUDF
operator|.
name|DeferredJavaObject
argument_list|(
name|o
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to get Java object from VectorizedRowBatch"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|boolean
name|getIsConstant
parameter_list|()
block|{
return|return
name|isConstant
return|;
block|}
specifier|public
name|void
name|setIsConstant
parameter_list|(
name|boolean
name|isConstant
parameter_list|)
block|{
name|this
operator|.
name|isConstant
operator|=
name|isConstant
expr_stmt|;
block|}
specifier|public
name|int
name|getColumnNum
parameter_list|()
block|{
return|return
name|columnNum
return|;
block|}
specifier|public
name|void
name|setColumnNum
parameter_list|(
name|int
name|columnNum
parameter_list|)
block|{
name|this
operator|.
name|columnNum
operator|=
name|columnNum
expr_stmt|;
block|}
specifier|public
name|ExprNodeConstantDesc
name|getConstExpr
parameter_list|()
block|{
return|return
name|constExpr
return|;
block|}
specifier|public
name|void
name|setConstExpr
parameter_list|(
name|ExprNodeConstantDesc
name|constExpr
parameter_list|)
block|{
name|this
operator|.
name|constExpr
operator|=
name|constExpr
expr_stmt|;
block|}
block|}
end_class

end_unit

