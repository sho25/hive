begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|TezTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|counters
operator|.
name|TezCounters
import|;
end_import

begin_class
specifier|public
class|class
name|CounterStatsAggregatorTez
implements|implements
name|StatsAggregator
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CounterStatsAggregatorTez
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|TezCounters
name|counters
decl_stmt|;
specifier|private
name|CounterStatsAggregator
name|mrAggregator
decl_stmt|;
specifier|private
name|boolean
name|delegate
decl_stmt|;
specifier|public
name|CounterStatsAggregatorTez
parameter_list|()
block|{
name|mrAggregator
operator|=
operator|new
name|CounterStatsAggregator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|connect
parameter_list|(
name|Configuration
name|hconf
parameter_list|,
name|Task
argument_list|<
name|?
argument_list|>
name|sourceTask
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|sourceTask
operator|instanceof
name|TezTask
operator|)
condition|)
block|{
name|delegate
operator|=
literal|true
expr_stmt|;
return|return
name|mrAggregator
operator|.
name|connect
argument_list|(
name|hconf
argument_list|,
name|sourceTask
argument_list|)
return|;
block|}
name|counters
operator|=
operator|(
operator|(
name|TezTask
operator|)
name|sourceTask
operator|)
operator|.
name|getTezCounters
argument_list|()
expr_stmt|;
return|return
name|counters
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|aggregateStats
parameter_list|(
name|String
name|keyPrefix
parameter_list|,
name|String
name|statType
parameter_list|)
block|{
if|if
condition|(
name|delegate
condition|)
block|{
return|return
name|mrAggregator
operator|.
name|aggregateStats
argument_list|(
name|keyPrefix
argument_list|,
name|statType
argument_list|)
return|;
block|}
name|long
name|value
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|counters
operator|.
name|getGroupNames
argument_list|()
control|)
block|{
if|if
condition|(
name|groupName
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
name|value
operator|+=
name|counters
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
operator|.
name|findCounter
argument_list|(
name|statType
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|closeConnection
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|cleanUp
parameter_list|(
name|String
name|keyPrefix
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

