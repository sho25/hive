begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_comment
comment|/**  * GenericUDFLevenshtein.  *  * This function calculates the Levenshtein distance between two strings.  * Levenshtein distance is a string metric for measuring the difference between  * two sequences. Informally, the Levenshtein distance between two words is the  * minimum number of single-character edits (i.e. insertions, deletions or  * substitutions) required to change one word into the other. It is named after  * Vladimir Levenshtein, who considered this distance in 1965  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"levenshtein"
argument_list|,
name|value
operator|=
literal|"_FUNC_(str1, str2) - This function calculates the Levenshtein distance between two strings."
argument_list|,
name|extended
operator|=
literal|"Levenshtein distance is a string metric for measuring the difference between"
operator|+
literal|" two sequences. Informally, the Levenshtein distance between two words is the"
operator|+
literal|" minimum number of single-character edits (i.e. insertions, deletions or"
operator|+
literal|" substitutions) required to change one word into the other. It is named after"
operator|+
literal|" Vladimir Levenshtein, who considered this distance in 1965."
operator|+
literal|"Example:\n "
operator|+
literal|"> SELECT _FUNC_('kitten', 'sitting');\n 3"
argument_list|)
specifier|public
class|class
name|GenericUDFLevenshtein
extends|extends
name|GenericUDF
block|{
specifier|private
specifier|transient
name|Converter
index|[]
name|textConverters
init|=
operator|new
name|Converter
index|[
literal|2
index|]
decl_stmt|;
specifier|private
specifier|transient
name|PrimitiveCategory
index|[]
name|inputTypes
init|=
operator|new
name|PrimitiveCategory
index|[
literal|2
index|]
decl_stmt|;
specifier|private
specifier|final
name|IntWritable
name|output
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
name|getFuncName
argument_list|()
operator|+
literal|" requires 2 arguments, got "
operator|+
name|arguments
operator|.
name|length
argument_list|)
throw|;
block|}
name|checkIfPrimitive
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
literal|"1st"
argument_list|)
expr_stmt|;
name|checkIfPrimitive
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
literal|"2nd"
argument_list|)
expr_stmt|;
name|checkIfStringGroup
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
literal|"1st"
argument_list|)
expr_stmt|;
name|checkIfStringGroup
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
literal|"2nd"
argument_list|)
expr_stmt|;
name|getStringConverter
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
literal|"1st"
argument_list|)
expr_stmt|;
name|getStringConverter
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
literal|"2nd"
argument_list|)
expr_stmt|;
name|ObjectInspector
name|outputOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
decl_stmt|;
return|return
name|outputOI
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|obj0
decl_stmt|;
name|Object
name|obj1
decl_stmt|;
if|if
condition|(
operator|(
name|obj0
operator|=
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
operator|)
operator|==
literal|null
operator|||
operator|(
name|obj1
operator|=
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
operator|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|str0
init|=
name|textConverters
index|[
literal|0
index|]
operator|.
name|convert
argument_list|(
name|obj0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|str1
init|=
name|textConverters
index|[
literal|1
index|]
operator|.
name|convert
argument_list|(
name|obj1
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|dist
init|=
name|StringUtils
operator|.
name|getLevenshteinDistance
argument_list|(
name|str0
argument_list|,
name|str1
argument_list|)
decl_stmt|;
name|output
operator|.
name|set
argument_list|(
name|dist
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
return|return
name|getStandardDisplayString
argument_list|(
name|getFuncName
argument_list|()
argument_list|,
name|children
argument_list|)
return|;
block|}
specifier|protected
name|void
name|checkIfPrimitive
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|,
name|int
name|i
parameter_list|,
name|String
name|argOrder
parameter_list|)
throws|throws
name|UDFArgumentTypeException
block|{
name|ObjectInspector
operator|.
name|Category
name|oiCat
init|=
name|arguments
index|[
name|i
index|]
operator|.
name|getCategory
argument_list|()
decl_stmt|;
if|if
condition|(
name|oiCat
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|i
argument_list|,
name|getFuncName
argument_list|()
operator|+
literal|" only takes primitive types as "
operator|+
name|argOrder
operator|+
literal|" argument, got "
operator|+
name|oiCat
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|checkIfStringGroup
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|,
name|int
name|i
parameter_list|,
name|String
name|argOrder
parameter_list|)
throws|throws
name|UDFArgumentTypeException
block|{
name|inputTypes
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
name|i
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
expr_stmt|;
if|if
condition|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|inputTypes
index|[
name|i
index|]
argument_list|)
operator|!=
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|i
argument_list|,
name|getFuncName
argument_list|()
operator|+
literal|" only takes STRING_GROUP types as "
operator|+
name|argOrder
operator|+
literal|" argument, got "
operator|+
name|inputTypes
index|[
name|i
index|]
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|getStringConverter
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|,
name|int
name|i
parameter_list|,
name|String
name|argOrder
parameter_list|)
throws|throws
name|UDFArgumentTypeException
block|{
name|textConverters
index|[
name|i
index|]
operator|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
name|i
index|]
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getFuncName
parameter_list|()
block|{
return|return
literal|"levenshtein"
return|;
block|}
block|}
end_class

end_unit

