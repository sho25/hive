begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|RowResolver
import|;
end_import

begin_class
specifier|public
class|class
name|exprNodeFieldDesc
extends|extends
name|exprNodeDesc
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
name|exprNodeDesc
name|desc
decl_stmt|;
name|String
name|fieldName
decl_stmt|;
comment|// Used to support a.b where a is a list of struct that contains a field called b.
comment|// a.b will return an array that contains field b of all elements of array a.
name|Boolean
name|isList
decl_stmt|;
specifier|public
name|exprNodeFieldDesc
parameter_list|()
block|{}
specifier|public
name|exprNodeFieldDesc
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|exprNodeDesc
name|desc
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Boolean
name|isList
parameter_list|)
block|{
name|super
argument_list|(
name|typeInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|desc
operator|=
name|desc
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|isList
operator|=
name|isList
expr_stmt|;
block|}
specifier|public
name|exprNodeDesc
name|getDesc
parameter_list|()
block|{
return|return
name|this
operator|.
name|desc
return|;
block|}
specifier|public
name|void
name|setDesc
parameter_list|(
name|exprNodeDesc
name|desc
parameter_list|)
block|{
name|this
operator|.
name|desc
operator|=
name|desc
expr_stmt|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|this
operator|.
name|fieldName
return|;
block|}
specifier|public
name|void
name|setFieldName
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|Boolean
name|getIsList
parameter_list|()
block|{
return|return
name|isList
return|;
block|}
specifier|public
name|void
name|setIsList
parameter_list|(
name|Boolean
name|isList
parameter_list|)
block|{
name|this
operator|.
name|isList
operator|=
name|isList
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|desc
operator|.
name|toString
argument_list|()
operator|+
literal|"."
operator|+
name|this
operator|.
name|fieldName
return|;
block|}
annotation|@
name|explain
argument_list|(
name|displayName
operator|=
literal|"expr"
argument_list|)
annotation|@
name|Override
specifier|public
name|String
name|getExprString
parameter_list|()
block|{
return|return
name|this
operator|.
name|desc
operator|.
name|getExprString
argument_list|()
operator|+
literal|"."
operator|+
name|this
operator|.
name|fieldName
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCols
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|colList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
name|colList
operator|=
name|Utilities
operator|.
name|mergeUniqElems
argument_list|(
name|colList
argument_list|,
name|desc
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|colList
return|;
block|}
block|}
end_class

end_unit

