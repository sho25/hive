begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ObjectPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_class
specifier|public
class|class
name|FooterBuffer
block|{
specifier|private
name|ArrayList
argument_list|<
name|ObjectPair
argument_list|>
name|buffer
decl_stmt|;
specifier|private
name|int
name|cur
decl_stmt|;
specifier|public
name|FooterBuffer
parameter_list|()
block|{   }
specifier|public
name|void
name|setCursor
parameter_list|(
name|int
name|cur
parameter_list|)
block|{
name|this
operator|.
name|cur
operator|=
name|cur
expr_stmt|;
block|}
comment|/**    * Initialize footer buffer in order to keep footer records at the end of file.    *    * @param job    *          Current job configuration.    *    * @param recordreader    *          Record reader.    *    * @param footerCount    *          Footer line number of the table files.    *    * @param key    *          Key of current reading record.    *    * @param value    *          Value of current reading record.    *    * @return Return true if there are 0 or more records left in the file    *         after initializing the footer buffer, otherwise return false.    */
specifier|public
name|boolean
name|initializeBuffer
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|RecordReader
name|recordreader
parameter_list|,
name|int
name|footerCount
parameter_list|,
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Fill the buffer with key value pairs.
name|this
operator|.
name|buffer
operator|=
operator|new
name|ArrayList
argument_list|<
name|ObjectPair
argument_list|>
argument_list|()
expr_stmt|;
while|while
condition|(
name|buffer
operator|.
name|size
argument_list|()
operator|<
name|footerCount
condition|)
block|{
name|boolean
name|notEOF
init|=
name|recordreader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|notEOF
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ObjectPair
name|tem
init|=
operator|new
name|ObjectPair
argument_list|()
decl_stmt|;
name|tem
operator|.
name|setFirst
argument_list|(
name|ReflectionUtils
operator|.
name|copy
argument_list|(
name|job
argument_list|,
name|key
argument_list|,
name|tem
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tem
operator|.
name|setSecond
argument_list|(
name|ReflectionUtils
operator|.
name|copy
argument_list|(
name|job
argument_list|,
name|value
argument_list|,
name|tem
operator|.
name|getSecond
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|add
argument_list|(
name|tem
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|cur
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Enqueue most recent record read, and dequeue earliest result in the queue.    *    * @param job    *          Current job configuration.    *    * @param recordreader    *          Record reader.    *    * @param key    *          Key of current reading record.    *    * @param value    *          Value of current reading record.    *    * @return Return false if reaches the end of file, otherwise return true.    */
specifier|public
name|boolean
name|updateBuffer
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|RecordReader
name|recordreader
parameter_list|,
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|key
operator|=
name|ReflectionUtils
operator|.
name|copy
argument_list|(
name|job
argument_list|,
operator|(
name|WritableComparable
operator|)
name|buffer
operator|.
name|get
argument_list|(
name|cur
argument_list|)
operator|.
name|getFirst
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|value
operator|=
name|ReflectionUtils
operator|.
name|copy
argument_list|(
name|job
argument_list|,
operator|(
name|Writable
operator|)
name|buffer
operator|.
name|get
argument_list|(
name|cur
argument_list|)
operator|.
name|getSecond
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|boolean
name|notEOF
init|=
name|recordreader
operator|.
name|next
argument_list|(
name|buffer
operator|.
name|get
argument_list|(
name|cur
argument_list|)
operator|.
name|getFirst
argument_list|()
argument_list|,
name|buffer
operator|.
name|get
argument_list|(
name|cur
argument_list|)
operator|.
name|getSecond
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|notEOF
condition|)
block|{
name|cur
operator|=
operator|(
operator|++
name|cur
operator|)
operator|%
name|buffer
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|notEOF
return|;
block|}
block|}
end_class

end_unit

