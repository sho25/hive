begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|profiler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|System
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_class
specifier|public
class|class
name|HiveProfiler
implements|implements
name|OperatorHook
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HiveProfilePublisher
name|pub
init|=
operator|new
name|HiveProfilePublisher
argument_list|()
decl_stmt|;
specifier|private
name|LinkedList
argument_list|<
name|HiveProfilerEntry
argument_list|>
name|operatorCallStack
init|=
operator|new
name|LinkedList
argument_list|<
name|HiveProfilerEntry
argument_list|>
argument_list|()
decl_stmt|;
comment|// Aggregates stats for each operator in memory so that stats are written to DB
comment|// all at once - this allows the profiler to be extremely lightweight in
comment|// communication with the DB
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|HiveProfilerStats
argument_list|>
name|aggrStats
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HiveProfilerStats
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|enter
parameter_list|(
name|OperatorHookContext
name|opHookContext
parameter_list|)
throws|throws
name|HiveException
block|{
name|HiveProfilerEntry
name|curEntry
init|=
operator|new
name|HiveProfilerEntry
argument_list|(
name|opHookContext
argument_list|)
decl_stmt|;
name|operatorCallStack
operator|.
name|addFirst
argument_list|(
name|curEntry
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exit
parameter_list|(
name|HiveProfilerEntry
name|curEntry
parameter_list|,
name|HiveProfilerEntry
name|parentEntry
parameter_list|)
block|{
name|OperatorHookContext
name|opHookContext
init|=
name|curEntry
operator|.
name|getOperatorHookContext
argument_list|()
decl_stmt|;
comment|// update the metrics we are
name|long
name|exitTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|wallTime
init|=
name|exitTime
operator|-
name|curEntry
operator|.
name|wallStartTime
decl_stmt|;
name|String
name|opName
init|=
name|opHookContext
operator|.
name|getOperatorName
argument_list|()
decl_stmt|;
name|OperatorHookContext
name|parentContext
init|=
name|parentEntry
operator|!=
literal|null
condition|?
name|parentEntry
operator|.
name|getOperatorHookContext
argument_list|()
else|:
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
name|opHookContext
operator|.
name|getOperator
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|opId
init|=
name|opHookContext
operator|.
name|getOperatorId
argument_list|()
decl_stmt|;
if|if
condition|(
name|aggrStats
operator|.
name|containsKey
argument_list|(
name|opId
argument_list|)
condition|)
block|{
name|aggrStats
operator|.
name|get
argument_list|(
name|opId
argument_list|)
operator|.
name|updateStats
argument_list|(
name|wallTime
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HiveProfilerStats
name|stats
init|=
operator|new
name|HiveProfilerStats
argument_list|(
name|opHookContext
argument_list|,
name|parentContext
argument_list|,
literal|1
argument_list|,
name|wallTime
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|aggrStats
operator|.
name|put
argument_list|(
name|opId
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|exit
parameter_list|(
name|OperatorHookContext
name|opHookContext
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|operatorCallStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected state: Operator Call Stack is empty on exit."
argument_list|)
expr_stmt|;
block|}
comment|// grab the top item on the call stack since that should be
comment|// the first operator to exit.
name|HiveProfilerEntry
name|curEntry
init|=
name|operatorCallStack
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|curEntry
operator|.
name|getOperatorHookContext
argument_list|()
operator|.
name|equals
argument_list|(
name|opHookContext
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Expected to exit from: "
operator|+
name|curEntry
operator|.
name|getOperatorHookContext
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" but exit called on "
operator|+
name|opHookContext
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HiveProfilerEntry
name|parentEntry
init|=
name|operatorCallStack
operator|.
name|peekFirst
argument_list|()
decl_stmt|;
name|exit
argument_list|(
name|curEntry
argument_list|,
name|parentEntry
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|(
name|OperatorHookContext
name|opHookContext
parameter_list|)
block|{
name|Configuration
name|conf
init|=
name|opHookContext
operator|.
name|getOperator
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|HiveProfilerStats
argument_list|>
name|stats
init|=
name|aggrStats
operator|.
name|values
argument_list|()
decl_stmt|;
comment|// example:
comment|// queryId=pamelavagata_20130115163838_4a1cb4ae-43c1-4656-bfae-118557896eec,
comment|// operatorName=TS,
comment|// id=3,
comment|// parentName="" (root),
comment|// inclTime=1202710
comment|// callCount
name|Iterator
argument_list|<
name|HiveProfilerStats
argument_list|>
name|statsIter
init|=
name|stats
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|statsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HiveProfilerStats
name|stat
init|=
name|statsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|pub
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|boolean
name|published
init|=
name|pub
operator|.
name|publishStat
argument_list|(
literal|null
argument_list|,
name|stat
operator|.
name|getStatsMap
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
operator|(
name|published
condition|?
literal|"did "
else|:
literal|"did not "
operator|)
operator|+
literal|"publish stat for: "
operator|+
name|stat
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pub
operator|.
name|closeConnection
argument_list|()
expr_stmt|;
block|}
name|stats
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
class|class
name|HiveProfilerEntry
block|{
name|OperatorHookContext
name|ctxt
decl_stmt|;
specifier|protected
name|long
name|wallStartTime
decl_stmt|;
specifier|protected
name|HiveProfilerEntry
parameter_list|(
name|OperatorHookContext
name|opHookContext
parameter_list|)
block|{
name|this
operator|.
name|ctxt
operator|=
name|opHookContext
expr_stmt|;
name|this
operator|.
name|wallStartTime
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|OperatorHookContext
name|getOperatorHookContext
parameter_list|()
block|{
return|return
name|ctxt
return|;
block|}
block|}
block|}
end_class

end_unit

