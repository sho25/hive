begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
operator|.
name|views
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|VirtualColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|RelOptHiveTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|TxnIdUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * This rule will rewrite the materialized view with information about  * its invalidation data. In particular, if any of the tables used by the  * materialization has been updated since the materialization was created,  * it will introduce a filter operator on top of that table in the materialization  * definition, making explicit the data contained in it so the rewriting  * algorithm can use this information to rewrite the query as a combination of the  * outdated materialization data and the new original data in the source tables.  * If the data in the source table matches the current data in the snapshot,  * no filter is created.  */
end_comment

begin_class
specifier|public
class|class
name|HiveAugmentMaterializationRule
extends|extends
name|RelOptRule
block|{
specifier|private
specifier|final
name|RexBuilder
name|rexBuilder
decl_stmt|;
specifier|private
specifier|final
name|ValidTxnWriteIdList
name|currentTxnList
decl_stmt|;
specifier|private
specifier|final
name|ValidTxnWriteIdList
name|materializationTxnList
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|RelNode
argument_list|>
name|visited
decl_stmt|;
specifier|public
name|HiveAugmentMaterializationRule
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|ValidTxnWriteIdList
name|currentTxnList
parameter_list|,
name|ValidTxnWriteIdList
name|materializationTxnList
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|TableScan
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
argument_list|,
literal|"HiveAugmentMaterializationRule"
argument_list|)
expr_stmt|;
name|this
operator|.
name|rexBuilder
operator|=
name|rexBuilder
expr_stmt|;
name|this
operator|.
name|currentTxnList
operator|=
name|currentTxnList
expr_stmt|;
name|this
operator|.
name|materializationTxnList
operator|=
name|materializationTxnList
expr_stmt|;
name|this
operator|.
name|visited
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|TableScan
name|tableScan
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|visited
operator|.
name|add
argument_list|(
name|tableScan
argument_list|)
condition|)
block|{
comment|// Already visited
return|return;
block|}
specifier|final
name|String
name|tableQName
init|=
operator|(
operator|(
name|RelOptHiveTable
operator|)
name|tableScan
operator|.
name|getTable
argument_list|()
operator|)
operator|.
name|getHiveTableMD
argument_list|()
operator|.
name|getFullyQualifiedName
argument_list|()
decl_stmt|;
specifier|final
name|ValidWriteIdList
name|tableCurrentTxnList
init|=
name|currentTxnList
operator|.
name|getTableValidWriteIdList
argument_list|(
name|tableQName
argument_list|)
decl_stmt|;
specifier|final
name|ValidWriteIdList
name|tableMaterializationTxnList
init|=
name|materializationTxnList
operator|.
name|getTableValidWriteIdList
argument_list|(
name|tableQName
argument_list|)
decl_stmt|;
if|if
condition|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|tableCurrentTxnList
argument_list|,
name|tableMaterializationTxnList
argument_list|)
condition|)
block|{
comment|// This table has not been modified since materialization was created,
comment|// nothing to do
return|return;
block|}
comment|// ROW__ID: struct<transactionid:bigint,bucketid:int,rowid:bigint>
name|int
name|rowIDPos
init|=
name|tableScan
operator|.
name|getTable
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getField
argument_list|(
name|VirtualColumn
operator|.
name|ROWID
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|RexNode
name|rowIDFieldAccess
init|=
name|rexBuilder
operator|.
name|makeFieldAccess
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|tableScan
operator|.
name|getTable
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|rowIDPos
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
name|rowIDPos
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Now we create the filter with the transactions information.
comment|// In particular, each table in the materialization will only have contents such that:
comment|// ROW_ID.writeid<= high_watermark and ROW_ID.writeid not in (open/invalid_ids)
comment|// Hence, we add that condition on top of the source table.
comment|// The rewriting will then have the possibility to create partial rewritings that read
comment|// the materialization and the source tables, and hence, produce an incremental
comment|// rebuild that is more efficient than the full rebuild.
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
name|relBuilder
operator|.
name|push
argument_list|(
name|tableScan
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|conds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|RelDataType
name|bigIntType
init|=
name|relBuilder
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|literalHighWatermark
init|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|tableMaterializationTxnList
operator|.
name|getHighWatermark
argument_list|()
argument_list|,
name|bigIntType
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|conds
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN_OR_EQUAL
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rowIDFieldAccess
argument_list|,
name|literalHighWatermark
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|invalidTxn
range|:
name|tableMaterializationTxnList
operator|.
name|getInvalidWriteIds
argument_list|()
control|)
block|{
specifier|final
name|RexNode
name|literalInvalidTxn
init|=
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
name|invalidTxn
argument_list|,
name|bigIntType
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|conds
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|NOT_EQUALS
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rowIDFieldAccess
argument_list|,
name|literalInvalidTxn
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|relBuilder
operator|.
name|filter
argument_list|(
name|conds
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|relBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

