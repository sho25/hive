begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DataFormatException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Deflater
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Inflater
import|;
end_import

begin_class
class|class
name|ZlibCodec
implements|implements
name|CompressionCodec
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|compress
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
name|ByteBuffer
name|out
parameter_list|,
name|ByteBuffer
name|overflow
parameter_list|)
throws|throws
name|IOException
block|{
name|Deflater
name|deflater
init|=
operator|new
name|Deflater
argument_list|(
name|Deflater
operator|.
name|DEFAULT_COMPRESSION
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|in
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|deflater
operator|.
name|setInput
argument_list|(
name|in
operator|.
name|array
argument_list|()
argument_list|,
name|in
operator|.
name|arrayOffset
argument_list|()
operator|+
name|in
operator|.
name|position
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|deflater
operator|.
name|finish
argument_list|()
expr_stmt|;
name|int
name|outSize
init|=
literal|0
decl_stmt|;
name|int
name|offset
init|=
name|out
operator|.
name|arrayOffset
argument_list|()
operator|+
name|out
operator|.
name|position
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|deflater
operator|.
name|finished
argument_list|()
operator|&&
operator|(
name|length
operator|>
name|outSize
operator|)
condition|)
block|{
name|int
name|size
init|=
name|deflater
operator|.
name|deflate
argument_list|(
name|out
operator|.
name|array
argument_list|()
argument_list|,
name|offset
argument_list|,
name|out
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|position
argument_list|(
name|size
operator|+
name|out
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|outSize
operator|+=
name|size
expr_stmt|;
name|offset
operator|+=
name|size
expr_stmt|;
comment|// if we run out of space in the out buffer, use the overflow
if|if
condition|(
name|out
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|overflow
operator|==
literal|null
condition|)
block|{
name|deflater
operator|.
name|end
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|out
operator|=
name|overflow
expr_stmt|;
name|offset
operator|=
name|out
operator|.
name|arrayOffset
argument_list|()
operator|+
name|out
operator|.
name|position
argument_list|()
expr_stmt|;
block|}
block|}
name|deflater
operator|.
name|end
argument_list|()
expr_stmt|;
return|return
name|length
operator|>
name|outSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|decompress
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
name|ByteBuffer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Inflater
name|inflater
init|=
operator|new
name|Inflater
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|inflater
operator|.
name|setInput
argument_list|(
name|in
operator|.
name|array
argument_list|()
argument_list|,
name|in
operator|.
name|arrayOffset
argument_list|()
operator|+
name|in
operator|.
name|position
argument_list|()
argument_list|,
name|in
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
operator|(
name|inflater
operator|.
name|finished
argument_list|()
operator|||
name|inflater
operator|.
name|needsDictionary
argument_list|()
operator|||
name|inflater
operator|.
name|needsInput
argument_list|()
operator|)
condition|)
block|{
try|try
block|{
name|int
name|count
init|=
name|inflater
operator|.
name|inflate
argument_list|(
name|out
operator|.
name|array
argument_list|()
argument_list|,
name|out
operator|.
name|arrayOffset
argument_list|()
operator|+
name|out
operator|.
name|position
argument_list|()
argument_list|,
name|out
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|position
argument_list|(
name|count
operator|+
name|out
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataFormatException
name|dfe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Bad compression data"
argument_list|,
name|dfe
argument_list|)
throw|;
block|}
block|}
name|out
operator|.
name|flip
argument_list|()
expr_stmt|;
name|inflater
operator|.
name|end
argument_list|()
expr_stmt|;
name|in
operator|.
name|position
argument_list|(
name|in
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

