begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DataFormatException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Deflater
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Inflater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|DirectCompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|DirectDecompressorShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_class
class|class
name|ZlibCodec
implements|implements
name|CompressionCodec
implements|,
name|DirectDecompressionCodec
block|{
specifier|private
name|Boolean
name|direct
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|int
name|level
decl_stmt|;
specifier|private
specifier|final
name|int
name|strategy
decl_stmt|;
specifier|public
name|ZlibCodec
parameter_list|()
block|{
name|level
operator|=
name|Deflater
operator|.
name|DEFAULT_COMPRESSION
expr_stmt|;
name|strategy
operator|=
name|Deflater
operator|.
name|DEFAULT_STRATEGY
expr_stmt|;
block|}
specifier|private
name|ZlibCodec
parameter_list|(
name|int
name|level
parameter_list|,
name|int
name|strategy
parameter_list|)
block|{
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
name|this
operator|.
name|strategy
operator|=
name|strategy
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|compress
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
name|ByteBuffer
name|out
parameter_list|,
name|ByteBuffer
name|overflow
parameter_list|)
throws|throws
name|IOException
block|{
name|Deflater
name|deflater
init|=
operator|new
name|Deflater
argument_list|(
name|level
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|deflater
operator|.
name|setStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|in
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|deflater
operator|.
name|setInput
argument_list|(
name|in
operator|.
name|array
argument_list|()
argument_list|,
name|in
operator|.
name|arrayOffset
argument_list|()
operator|+
name|in
operator|.
name|position
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|deflater
operator|.
name|finish
argument_list|()
expr_stmt|;
name|int
name|outSize
init|=
literal|0
decl_stmt|;
name|int
name|offset
init|=
name|out
operator|.
name|arrayOffset
argument_list|()
operator|+
name|out
operator|.
name|position
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|deflater
operator|.
name|finished
argument_list|()
operator|&&
operator|(
name|length
operator|>
name|outSize
operator|)
condition|)
block|{
name|int
name|size
init|=
name|deflater
operator|.
name|deflate
argument_list|(
name|out
operator|.
name|array
argument_list|()
argument_list|,
name|offset
argument_list|,
name|out
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|position
argument_list|(
name|size
operator|+
name|out
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|outSize
operator|+=
name|size
expr_stmt|;
name|offset
operator|+=
name|size
expr_stmt|;
comment|// if we run out of space in the out buffer, use the overflow
if|if
condition|(
name|out
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|overflow
operator|==
literal|null
condition|)
block|{
name|deflater
operator|.
name|end
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|out
operator|=
name|overflow
expr_stmt|;
name|offset
operator|=
name|out
operator|.
name|arrayOffset
argument_list|()
operator|+
name|out
operator|.
name|position
argument_list|()
expr_stmt|;
block|}
block|}
name|deflater
operator|.
name|end
argument_list|()
expr_stmt|;
return|return
name|length
operator|>
name|outSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|decompress
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
name|ByteBuffer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|.
name|isDirect
argument_list|()
operator|&&
name|out
operator|.
name|isDirect
argument_list|()
condition|)
block|{
name|directDecompress
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
return|return;
block|}
name|Inflater
name|inflater
init|=
operator|new
name|Inflater
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|inflater
operator|.
name|setInput
argument_list|(
name|in
operator|.
name|array
argument_list|()
argument_list|,
name|in
operator|.
name|arrayOffset
argument_list|()
operator|+
name|in
operator|.
name|position
argument_list|()
argument_list|,
name|in
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
operator|(
name|inflater
operator|.
name|finished
argument_list|()
operator|||
name|inflater
operator|.
name|needsDictionary
argument_list|()
operator|||
name|inflater
operator|.
name|needsInput
argument_list|()
operator|)
condition|)
block|{
try|try
block|{
name|int
name|count
init|=
name|inflater
operator|.
name|inflate
argument_list|(
name|out
operator|.
name|array
argument_list|()
argument_list|,
name|out
operator|.
name|arrayOffset
argument_list|()
operator|+
name|out
operator|.
name|position
argument_list|()
argument_list|,
name|out
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|position
argument_list|(
name|count
operator|+
name|out
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataFormatException
name|dfe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Bad compression data"
argument_list|,
name|dfe
argument_list|)
throw|;
block|}
block|}
name|out
operator|.
name|flip
argument_list|()
expr_stmt|;
name|inflater
operator|.
name|end
argument_list|()
expr_stmt|;
name|in
operator|.
name|position
argument_list|(
name|in
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
if|if
condition|(
name|direct
operator|==
literal|null
condition|)
block|{
comment|// see nowrap option in new Inflater(boolean) which disables zlib headers
try|try
block|{
if|if
condition|(
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getDirectDecompressor
argument_list|(
name|DirectCompressionType
operator|.
name|ZLIB_NOHEADER
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|direct
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|direct
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsatisfiedLinkError
name|ule
parameter_list|)
block|{
name|direct
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|direct
operator|.
name|booleanValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|directDecompress
parameter_list|(
name|ByteBuffer
name|in
parameter_list|,
name|ByteBuffer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|DirectDecompressorShim
name|decompressShim
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getDirectDecompressor
argument_list|(
name|DirectCompressionType
operator|.
name|ZLIB_NOHEADER
argument_list|)
decl_stmt|;
name|decompressShim
operator|.
name|decompress
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flip
argument_list|()
expr_stmt|;
comment|// flip for read
block|}
annotation|@
name|Override
specifier|public
name|CompressionCodec
name|modify
parameter_list|(
name|EnumSet
argument_list|<
name|Modifier
argument_list|>
name|modifiers
parameter_list|)
block|{
name|int
name|l
init|=
name|this
operator|.
name|level
decl_stmt|;
name|int
name|s
init|=
name|this
operator|.
name|strategy
decl_stmt|;
for|for
control|(
name|Modifier
name|m
range|:
name|modifiers
control|)
block|{
switch|switch
condition|(
name|m
condition|)
block|{
case|case
name|BINARY
case|:
comment|/* filtered == less LZ77, more huffman */
name|s
operator|=
name|Deflater
operator|.
name|FILTERED
expr_stmt|;
break|break;
case|case
name|TEXT
case|:
name|s
operator|=
name|Deflater
operator|.
name|DEFAULT_STRATEGY
expr_stmt|;
break|break;
case|case
name|FASTEST
case|:
comment|// deflate_fast looking for 8 byte patterns
name|l
operator|=
name|Deflater
operator|.
name|BEST_SPEED
expr_stmt|;
break|break;
case|case
name|FAST
case|:
comment|// deflate_fast looking for 16 byte patterns
name|l
operator|=
name|Deflater
operator|.
name|BEST_SPEED
operator|+
literal|1
expr_stmt|;
break|break;
case|case
name|DEFAULT
case|:
comment|// deflate_slow looking for 128 byte patterns
name|l
operator|=
name|Deflater
operator|.
name|DEFAULT_COMPRESSION
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
return|return
operator|new
name|ZlibCodec
argument_list|(
name|l
argument_list|,
name|s
argument_list|)
return|;
block|}
block|}
end_class

end_unit

