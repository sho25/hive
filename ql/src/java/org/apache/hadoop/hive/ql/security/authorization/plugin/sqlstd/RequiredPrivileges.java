begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|sqlstd
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzPluginException
import|;
end_import

begin_comment
comment|/**  * Captures privilege sets, and can be used to compare required and available privileges  * to find missing privileges (if any).  * ADMIN_PRIV is considered a special privilege, if the user has that, then no privilege is  * missing.  */
end_comment

begin_class
specifier|public
class|class
name|RequiredPrivileges
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|SQLPrivTypeGrant
argument_list|>
name|privilegeGrantSet
init|=
operator|new
name|HashSet
argument_list|<
name|SQLPrivTypeGrant
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addPrivilege
parameter_list|(
name|String
name|priv
parameter_list|,
name|boolean
name|withGrant
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
name|SQLPrivTypeGrant
name|privType
init|=
name|SQLPrivTypeGrant
operator|.
name|getSQLPrivTypeGrant
argument_list|(
name|priv
argument_list|,
name|withGrant
argument_list|)
decl_stmt|;
name|addPrivilege
argument_list|(
name|privType
argument_list|)
expr_stmt|;
name|privilegeGrantSet
operator|.
name|add
argument_list|(
name|privType
argument_list|)
expr_stmt|;
if|if
condition|(
name|withGrant
condition|)
block|{
comment|//as with grant also implies without grant privilege, add without privilege as well
name|addPrivilege
argument_list|(
name|priv
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|SQLPrivTypeGrant
argument_list|>
name|getRequiredPrivilegeSet
parameter_list|()
block|{
return|return
name|privilegeGrantSet
return|;
block|}
comment|/**    * Find the missing privileges in availPrivs    *    * @param availPrivs    *          - available privileges    * @return missing privileges as RequiredPrivileges object    */
specifier|public
name|Collection
argument_list|<
name|SQLPrivTypeGrant
argument_list|>
name|findMissingPrivs
parameter_list|(
name|RequiredPrivileges
name|availPrivs
parameter_list|)
block|{
name|MissingPrivilegeCapturer
name|missingPrivCapturer
init|=
operator|new
name|MissingPrivilegeCapturer
argument_list|()
decl_stmt|;
if|if
condition|(
name|availPrivs
operator|.
name|privilegeGrantSet
operator|.
name|contains
argument_list|(
name|SQLPrivTypeGrant
operator|.
name|ADMIN_PRIV
argument_list|)
condition|)
block|{
comment|//you are an admin! You have all privileges, no missing privileges
return|return
name|missingPrivCapturer
operator|.
name|getMissingPrivileges
argument_list|()
return|;
block|}
comment|// check the mere mortals!
for|for
control|(
name|SQLPrivTypeGrant
name|requiredPriv
range|:
name|privilegeGrantSet
control|)
block|{
if|if
condition|(
operator|!
name|availPrivs
operator|.
name|privilegeGrantSet
operator|.
name|contains
argument_list|(
name|requiredPriv
argument_list|)
condition|)
block|{
name|missingPrivCapturer
operator|.
name|addMissingPrivilege
argument_list|(
name|requiredPriv
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|missingPrivCapturer
operator|.
name|getMissingPrivileges
argument_list|()
return|;
block|}
name|void
name|addPrivilege
parameter_list|(
name|SQLPrivTypeGrant
name|requiredPriv
parameter_list|)
block|{
name|privilegeGrantSet
operator|.
name|add
argument_list|(
name|requiredPriv
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|SQLPrivTypeGrant
argument_list|>
name|getPrivilegeWithGrants
parameter_list|()
block|{
return|return
name|privilegeGrantSet
return|;
block|}
comment|/**    * Capture privileges that are missing. If privilege "X with grant" and "X without grant"    * are reported missing, capture only "X with grant". This is useful for better error messages.    */
class|class
name|MissingPrivilegeCapturer
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|SQLPrivilegeType
argument_list|,
name|SQLPrivTypeGrant
argument_list|>
name|priv2privWithGrant
init|=
operator|new
name|HashMap
argument_list|<
name|SQLPrivilegeType
argument_list|,
name|SQLPrivTypeGrant
argument_list|>
argument_list|()
decl_stmt|;
name|void
name|addMissingPrivilege
parameter_list|(
name|SQLPrivTypeGrant
name|newPrivWGrant
parameter_list|)
block|{
name|SQLPrivTypeGrant
name|matchingPrivWGrant
init|=
name|priv2privWithGrant
operator|.
name|get
argument_list|(
name|newPrivWGrant
operator|.
name|getPrivType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchingPrivWGrant
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|matchingPrivWGrant
operator|.
name|isWithGrant
argument_list|()
operator|||
operator|!
name|newPrivWGrant
operator|.
name|isWithGrant
argument_list|()
condition|)
block|{
comment|// the existing entry already has grant, or new priv does not have
comment|// grant
comment|// no update needs to be done.
return|return;
block|}
block|}
comment|// add the new entry
name|priv2privWithGrant
operator|.
name|put
argument_list|(
name|newPrivWGrant
operator|.
name|getPrivType
argument_list|()
argument_list|,
name|newPrivWGrant
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|SQLPrivTypeGrant
argument_list|>
name|getMissingPrivileges
parameter_list|()
block|{
return|return
name|priv2privWithGrant
operator|.
name|values
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|addAll
parameter_list|(
name|SQLPrivTypeGrant
index|[]
name|inputPrivs
parameter_list|)
block|{
if|if
condition|(
name|inputPrivs
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|SQLPrivTypeGrant
name|privType
range|:
name|inputPrivs
control|)
block|{
name|addPrivilege
argument_list|(
name|privType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

