begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PTFPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PTFPartition
operator|.
name|PTFPartitionIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PTFRollingPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|WindowFunctionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|BoundarySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|WindowType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PTFDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|BoundaryDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|PTFExpressionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|PartitionedTableFunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowFrameDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowFunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowTableFunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
operator|.
name|AggregationBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|ISupportStreamingModeForWindowing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|WindowingTableFunction
extends|extends
name|TableFunctionEvaluator
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WindowingTableFunction
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
class|class
name|WindowingFunctionInfoHelper
block|{
specifier|private
name|boolean
name|supportsWindow
decl_stmt|;
name|WindowingFunctionInfoHelper
parameter_list|()
block|{     }
specifier|public
name|WindowingFunctionInfoHelper
parameter_list|(
name|boolean
name|supportsWindow
parameter_list|)
block|{
name|this
operator|.
name|supportsWindow
operator|=
name|supportsWindow
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSupportsWindow
parameter_list|()
block|{
return|return
name|supportsWindow
return|;
block|}
specifier|public
name|void
name|setSupportsWindow
parameter_list|(
name|boolean
name|supportsWindow
parameter_list|)
block|{
name|this
operator|.
name|supportsWindow
operator|=
name|supportsWindow
expr_stmt|;
block|}
block|}
name|StreamingState
name|streamingState
decl_stmt|;
name|RankLimit
name|rnkLimitDef
decl_stmt|;
comment|// There is some information about the windowing functions that needs to be initialized
comment|// during query compilation time, and made available to during the map/reduce tasks via
comment|// plan serialization.
name|Map
argument_list|<
name|String
argument_list|,
name|WindowingFunctionInfoHelper
argument_list|>
name|windowingFunctionHelpers
init|=
literal|null
decl_stmt|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|WindowingFunctionInfoHelper
argument_list|>
name|getWindowingFunctionHelpers
parameter_list|()
block|{
return|return
name|windowingFunctionHelpers
return|;
block|}
specifier|public
name|void
name|setWindowingFunctionHelpers
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|WindowingFunctionInfoHelper
argument_list|>
name|windowingFunctionHelpers
parameter_list|)
block|{
name|this
operator|.
name|windowingFunctionHelpers
operator|=
name|windowingFunctionHelpers
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|PTFPartitionIterator
argument_list|<
name|Object
argument_list|>
name|pItr
parameter_list|,
name|PTFPartition
name|outP
parameter_list|)
throws|throws
name|HiveException
block|{
name|ArrayList
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|oColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|PTFPartition
name|iPart
init|=
name|pItr
operator|.
name|getPartition
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|inputOI
init|=
name|iPart
operator|.
name|getOutputOI
argument_list|()
decl_stmt|;
name|WindowTableFunctionDef
name|wTFnDef
init|=
operator|(
name|WindowTableFunctionDef
operator|)
name|getTableDef
argument_list|()
decl_stmt|;
for|for
control|(
name|WindowFunctionDef
name|wFn
range|:
name|wTFnDef
operator|.
name|getWindowFunctions
argument_list|()
control|)
block|{
name|boolean
name|processWindow
init|=
name|processWindow
argument_list|(
name|wFn
operator|.
name|getWindowFrame
argument_list|()
argument_list|)
decl_stmt|;
name|pItr
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|processWindow
condition|)
block|{
name|Object
name|out
init|=
name|evaluateFunctionOnPartition
argument_list|(
name|wFn
argument_list|,
name|iPart
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|wFn
operator|.
name|isPivotResult
argument_list|()
condition|)
block|{
name|out
operator|=
operator|new
name|SameList
argument_list|(
name|iPart
operator|.
name|size
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|oColumns
operator|.
name|add
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|oColumns
operator|.
name|add
argument_list|(
name|executeFnwithWindow
argument_list|(
name|wFn
argument_list|,
name|iPart
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Output Columns in the following order      * - the columns representing the output from Window Fns      * - the input Rows columns      */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iPart
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ArrayList
name|oRow
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Object
name|iRow
init|=
name|iPart
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|oColumns
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|oRow
operator|.
name|add
argument_list|(
name|oColumns
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StructField
name|f
range|:
name|inputOI
operator|.
name|getAllStructFieldRefs
argument_list|()
control|)
block|{
name|oRow
operator|.
name|add
argument_list|(
name|inputOI
operator|.
name|getStructFieldData
argument_list|(
name|iRow
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outP
operator|.
name|append
argument_list|(
name|oRow
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Evaluate the result given a partition and the row number to process
specifier|private
name|Object
name|evaluateWindowFunction
parameter_list|(
name|WindowFunctionDef
name|wFn
parameter_list|,
name|int
name|rowToProcess
parameter_list|,
name|PTFPartition
name|partition
parameter_list|)
throws|throws
name|HiveException
block|{
name|BasePartitionEvaluator
name|partitionEval
init|=
name|wFn
operator|.
name|getWFnEval
argument_list|()
operator|.
name|getPartitionWindowingEvaluator
argument_list|(
name|wFn
operator|.
name|getWindowFrame
argument_list|()
argument_list|,
name|partition
argument_list|,
name|wFn
operator|.
name|getArgs
argument_list|()
argument_list|,
name|wFn
operator|.
name|getOI
argument_list|()
argument_list|,
name|nullsLast
argument_list|)
decl_stmt|;
return|return
name|partitionEval
operator|.
name|iterate
argument_list|(
name|rowToProcess
argument_list|,
name|ptfDesc
operator|.
name|getLlInfo
argument_list|()
argument_list|)
return|;
block|}
comment|// Evaluate the result given a partition
specifier|private
name|Object
name|evaluateFunctionOnPartition
parameter_list|(
name|WindowFunctionDef
name|wFn
parameter_list|,
name|PTFPartition
name|partition
parameter_list|)
throws|throws
name|HiveException
block|{
name|BasePartitionEvaluator
name|partitionEval
init|=
name|wFn
operator|.
name|getWFnEval
argument_list|()
operator|.
name|getPartitionWindowingEvaluator
argument_list|(
name|wFn
operator|.
name|getWindowFrame
argument_list|()
argument_list|,
name|partition
argument_list|,
name|wFn
operator|.
name|getArgs
argument_list|()
argument_list|,
name|wFn
operator|.
name|getOI
argument_list|()
argument_list|,
name|nullsLast
argument_list|)
decl_stmt|;
return|return
name|partitionEval
operator|.
name|getPartitionAgg
argument_list|()
return|;
block|}
comment|// Evaluate the function result for each row in the partition
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|executeFnwithWindow
parameter_list|(
name|WindowFunctionDef
name|wFnDef
parameter_list|,
name|PTFPartition
name|iPart
parameter_list|)
throws|throws
name|HiveException
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iPart
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|out
init|=
name|evaluateWindowFunction
argument_list|(
name|wFnDef
argument_list|,
name|i
argument_list|,
name|iPart
argument_list|)
decl_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
return|return
name|vals
return|;
block|}
specifier|private
specifier|static
name|boolean
name|processWindow
parameter_list|(
name|WindowFrameDef
name|frame
parameter_list|)
block|{
if|if
condition|(
name|frame
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|frame
operator|.
name|getStart
argument_list|()
operator|.
name|getAmt
argument_list|()
operator|==
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
operator|&&
name|frame
operator|.
name|getEnd
argument_list|()
operator|.
name|getAmt
argument_list|()
operator|==
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|streamingPossible
parameter_list|(
name|Configuration
name|cfg
parameter_list|,
name|WindowFunctionDef
name|wFnDef
parameter_list|)
throws|throws
name|HiveException
block|{
name|WindowFrameDef
name|wdwFrame
init|=
name|wFnDef
operator|.
name|getWindowFrame
argument_list|()
decl_stmt|;
name|WindowingFunctionInfoHelper
name|wFnInfo
init|=
name|getWindowingFunctionInfoHelper
argument_list|(
name|wFnDef
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|wFnInfo
operator|.
name|isSupportsWindow
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|BoundaryDef
name|start
init|=
name|wdwFrame
operator|.
name|getStart
argument_list|()
decl_stmt|;
name|BoundaryDef
name|end
init|=
name|wdwFrame
operator|.
name|getEnd
argument_list|()
decl_stmt|;
comment|/*      * Currently we are not handling dynamic sized windows implied by range      * based windows.      */
if|if
condition|(
name|wdwFrame
operator|.
name|getWindowType
argument_list|()
operator|==
name|WindowType
operator|.
name|RANGE
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|/*      * Windows that are unbounded following don't benefit from Streaming.      */
if|if
condition|(
name|end
operator|.
name|getAmt
argument_list|()
operator|==
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|/*      * let function decide if it can handle this special case.      */
if|if
condition|(
name|start
operator|.
name|getAmt
argument_list|()
operator|==
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
return|return
literal|true
return|;
block|}
name|int
name|windowLimit
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|cfg
argument_list|,
name|ConfVars
operator|.
name|HIVEJOINCACHESIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|windowLimit
operator|<
operator|(
name|start
operator|.
name|getAmt
argument_list|()
operator|+
name|end
operator|.
name|getAmt
argument_list|()
operator|+
literal|1
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.hadoop.hive.ql.udf.ptf.TableFunctionEvaluator#canAcceptInputAsStream    * ()    *     * WindowTableFunction supports streaming if all functions meet one of these    * conditions: 1. The Function implements ISupportStreamingModeForWindowing 2.    * Or returns a non null Object for the getWindowingEvaluator, that implements    * ISupportStreamingModeForWindowing. 3. Is an invocation on a 'fixed' window.    * So no Unbounded Preceding or Following.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
specifier|private
name|int
index|[]
name|setCanAcceptInputAsStream
parameter_list|(
name|Configuration
name|cfg
parameter_list|)
throws|throws
name|HiveException
block|{
name|canAcceptInputAsStream
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|ptfDesc
operator|.
name|getLlInfo
argument_list|()
operator|.
name|getLeadLagExprs
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|WindowTableFunctionDef
name|tabDef
init|=
operator|(
name|WindowTableFunctionDef
operator|)
name|getTableDef
argument_list|()
decl_stmt|;
name|int
name|startPos
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|endPos
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|WindowFunctionDef
name|wFnDef
init|=
name|tabDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|WindowFrameDef
name|wdwFrame
init|=
name|wFnDef
operator|.
name|getWindowFrame
argument_list|()
decl_stmt|;
name|GenericUDAFEvaluator
name|fnEval
init|=
name|wFnDef
operator|.
name|getWFnEval
argument_list|()
decl_stmt|;
name|boolean
name|streamingPossible
init|=
name|streamingPossible
argument_list|(
name|cfg
argument_list|,
name|wFnDef
argument_list|)
decl_stmt|;
name|GenericUDAFEvaluator
name|streamingEval
init|=
name|streamingPossible
condition|?
name|fnEval
operator|.
name|getWindowingEvaluator
argument_list|(
name|wdwFrame
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|streamingEval
operator|!=
literal|null
operator|&&
name|streamingEval
operator|instanceof
name|ISupportStreamingModeForWindowing
condition|)
block|{
continue|continue;
block|}
name|BoundaryDef
name|start
init|=
name|wdwFrame
operator|.
name|getStart
argument_list|()
decl_stmt|;
name|BoundaryDef
name|end
init|=
name|wdwFrame
operator|.
name|getEnd
argument_list|()
decl_stmt|;
if|if
condition|(
name|wdwFrame
operator|.
name|getWindowType
argument_list|()
operator|==
name|WindowType
operator|.
name|ROWS
condition|)
block|{
if|if
condition|(
operator|!
name|end
operator|.
name|isUnbounded
argument_list|()
operator|&&
operator|!
name|start
operator|.
name|isUnbounded
argument_list|()
condition|)
block|{
name|startPos
operator|=
name|Math
operator|.
name|min
argument_list|(
name|startPos
argument_list|,
name|wdwFrame
operator|.
name|getStart
argument_list|()
operator|.
name|getRelativeOffset
argument_list|()
argument_list|)
expr_stmt|;
name|endPos
operator|=
name|Math
operator|.
name|max
argument_list|(
name|endPos
argument_list|,
name|wdwFrame
operator|.
name|getEnd
argument_list|()
operator|.
name|getRelativeOffset
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
return|return
literal|null
return|;
block|}
name|int
name|windowLimit
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|cfg
argument_list|,
name|ConfVars
operator|.
name|HIVEJOINCACHESIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|windowLimit
operator|<
operator|(
name|endPos
operator|-
name|startPos
operator|+
literal|1
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|canAcceptInputAsStream
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|int
index|[]
block|{
name|startPos
block|,
name|endPos
block|}
return|;
block|}
specifier|private
name|void
name|initializeWindowingFunctionInfoHelpers
parameter_list|()
throws|throws
name|SemanticException
block|{
comment|// getWindowFunctionInfo() cannot be called during map/reduce tasks. So cache necessary
comment|// values during query compilation, and rely on plan serialization to bring this info
comment|// to the object during the map/reduce tasks.
if|if
condition|(
name|windowingFunctionHelpers
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|windowingFunctionHelpers
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|WindowingFunctionInfoHelper
argument_list|>
argument_list|()
expr_stmt|;
name|WindowTableFunctionDef
name|tabDef
init|=
operator|(
name|WindowTableFunctionDef
operator|)
name|getTableDef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|WindowFunctionDef
name|wFn
init|=
name|tabDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|WindowFunctionInfo
name|wFnInfo
init|=
name|FunctionRegistry
operator|.
name|getWindowFunctionInfo
argument_list|(
name|wFn
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|supportsWindow
init|=
name|wFnInfo
operator|.
name|isSupportsWindow
argument_list|()
decl_stmt|;
name|windowingFunctionHelpers
operator|.
name|put
argument_list|(
name|wFn
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|WindowingFunctionInfoHelper
argument_list|(
name|supportsWindow
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setOutputOI
parameter_list|(
name|StructObjectInspector
name|outputOI
parameter_list|)
block|{
name|super
operator|.
name|setOutputOI
argument_list|(
name|outputOI
argument_list|)
expr_stmt|;
comment|// Call here because at this point the WindowTableFunctionDef has been set
try|try
block|{
name|initializeWindowingFunctionInfoHelpers
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected error while setting up windowing function"
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
specifier|private
name|WindowingFunctionInfoHelper
name|getWindowingFunctionInfoHelper
parameter_list|(
name|String
name|fnName
parameter_list|)
block|{
name|WindowingFunctionInfoHelper
name|wFnInfoHelper
init|=
name|windowingFunctionHelpers
operator|.
name|get
argument_list|(
name|fnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|wFnInfoHelper
operator|==
literal|null
condition|)
block|{
comment|// Should not happen
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No cached WindowingFunctionInfoHelper for "
operator|+
name|fnName
argument_list|)
throw|;
block|}
return|return
name|wFnInfoHelper
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initializeStreaming
parameter_list|(
name|Configuration
name|cfg
parameter_list|,
name|StructObjectInspector
name|inputOI
parameter_list|,
name|boolean
name|isMapSide
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
index|[]
name|span
init|=
name|setCanAcceptInputAsStream
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|canAcceptInputAsStream
condition|)
block|{
return|return;
block|}
name|WindowTableFunctionDef
name|tabDef
init|=
operator|(
name|WindowTableFunctionDef
operator|)
name|getTableDef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|WindowFunctionDef
name|wFnDef
init|=
name|tabDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|WindowFrameDef
name|wdwFrame
init|=
name|wFnDef
operator|.
name|getWindowFrame
argument_list|()
decl_stmt|;
name|GenericUDAFEvaluator
name|fnEval
init|=
name|wFnDef
operator|.
name|getWFnEval
argument_list|()
decl_stmt|;
name|GenericUDAFEvaluator
name|streamingEval
init|=
name|fnEval
operator|.
name|getWindowingEvaluator
argument_list|(
name|wdwFrame
argument_list|)
decl_stmt|;
if|if
condition|(
name|streamingEval
operator|!=
literal|null
condition|)
block|{
name|wFnDef
operator|.
name|setWFnEval
argument_list|(
name|streamingEval
argument_list|)
expr_stmt|;
if|if
condition|(
name|wFnDef
operator|.
name|isPivotResult
argument_list|()
condition|)
block|{
name|ListObjectInspector
name|listOI
init|=
operator|(
name|ListObjectInspector
operator|)
name|wFnDef
operator|.
name|getOI
argument_list|()
decl_stmt|;
name|wFnDef
operator|.
name|setOI
argument_list|(
name|listOI
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|tabDef
operator|.
name|getRankLimit
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|rnkLimitDef
operator|=
operator|new
name|RankLimit
argument_list|(
name|tabDef
operator|.
name|getRankLimit
argument_list|()
argument_list|,
name|tabDef
operator|.
name|getRankLimitFunction
argument_list|()
argument_list|,
name|tabDef
operator|.
name|getWindowFunctions
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|streamingState
operator|=
operator|new
name|StreamingState
argument_list|(
name|cfg
argument_list|,
name|inputOI
argument_list|,
name|isMapSide
argument_list|,
name|tabDef
argument_list|,
name|span
index|[
literal|0
index|]
argument_list|,
name|span
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.hadoop.hive.ql.udf.ptf.TableFunctionEvaluator#startPartition()    */
annotation|@
name|Override
specifier|public
name|void
name|startPartition
parameter_list|()
throws|throws
name|HiveException
block|{
name|WindowTableFunctionDef
name|tabDef
init|=
operator|(
name|WindowTableFunctionDef
operator|)
name|getTableDef
argument_list|()
decl_stmt|;
name|streamingState
operator|.
name|reset
argument_list|(
name|tabDef
argument_list|)
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.hadoop.hive.ql.udf.ptf.TableFunctionEvaluator#processRow(java    * .lang.Object)    *     * - hand row to each Function, provided there are enough rows for Function's    * window. - call getNextObject on each Function. - output as many rows as    * possible, based on minimum sz of Output List    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|processRow
parameter_list|(
name|Object
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
comment|/*      * Once enough rows have been output, there is no need to process input rows.      */
if|if
condition|(
name|streamingState
operator|.
name|rankLimitReached
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|streamingState
operator|.
name|rollingPart
operator|.
name|append
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|WindowTableFunctionDef
name|tabDef
init|=
operator|(
name|WindowTableFunctionDef
operator|)
name|tableDef
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|WindowFunctionDef
name|wFn
init|=
name|tabDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|GenericUDAFEvaluator
name|fnEval
init|=
name|wFn
operator|.
name|getWFnEval
argument_list|()
decl_stmt|;
name|int
name|a
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|wFn
operator|.
name|getArgs
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PTFExpressionDef
name|arg
range|:
name|wFn
operator|.
name|getArgs
argument_list|()
control|)
block|{
name|streamingState
operator|.
name|funcArgs
index|[
name|i
index|]
index|[
name|a
operator|++
index|]
operator|=
name|arg
operator|.
name|getExprEvaluator
argument_list|()
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fnEval
operator|!=
literal|null
operator|&&
name|fnEval
operator|instanceof
name|ISupportStreamingModeForWindowing
condition|)
block|{
name|fnEval
operator|.
name|aggregate
argument_list|(
name|streamingState
operator|.
name|aggBuffers
index|[
name|i
index|]
argument_list|,
name|streamingState
operator|.
name|funcArgs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|Object
name|out
init|=
operator|(
operator|(
name|ISupportStreamingModeForWindowing
operator|)
name|fnEval
operator|)
operator|.
name|getNextResult
argument_list|(
name|streamingState
operator|.
name|aggBuffers
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|streamingState
operator|.
name|fnOutputs
index|[
name|i
index|]
operator|.
name|add
argument_list|(
name|out
operator|==
name|ISupportStreamingModeForWindowing
operator|.
name|NULL_RESULT
condition|?
literal|null
else|:
name|out
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|rowToProcess
init|=
name|streamingState
operator|.
name|rollingPart
operator|.
name|rowToProcess
argument_list|(
name|wFn
operator|.
name|getWindowFrame
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowToProcess
operator|>=
literal|0
condition|)
block|{
name|Object
name|out
init|=
name|evaluateWindowFunction
argument_list|(
name|wFn
argument_list|,
name|rowToProcess
argument_list|,
name|streamingState
operator|.
name|rollingPart
argument_list|)
decl_stmt|;
name|streamingState
operator|.
name|fnOutputs
index|[
name|i
index|]
operator|.
name|add
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|oRows
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|hasRow
init|=
name|streamingState
operator|.
name|hasOutputRow
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hasRow
condition|)
block|{
break|break;
block|}
name|oRows
operator|.
name|add
argument_list|(
name|streamingState
operator|.
name|nextOutputRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|oRows
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|oRows
return|;
block|}
comment|/*    * (non-Javadoc)    *     * @see    * org.apache.hadoop.hive.ql.udf.ptf.TableFunctionEvaluator#finishPartition()    *     * for fns that are not ISupportStreamingModeForWindowing give them the    * remaining rows (rows whose span went beyond the end of the partition) for    * rest of the functions invoke terminate.    *     * while numOutputRows< numInputRows for each Fn that doesn't have enough o/p    * invoke getNextObj if there is no O/p then flag this as an error.    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|finishPartition
parameter_list|()
throws|throws
name|HiveException
block|{
comment|/*      * Once enough rows have been output, there is no need to generate more output.      */
if|if
condition|(
name|streamingState
operator|.
name|rankLimitReached
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|WindowTableFunctionDef
name|tabDef
init|=
operator|(
name|WindowTableFunctionDef
operator|)
name|getTableDef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|WindowFunctionDef
name|wFn
init|=
name|tabDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|GenericUDAFEvaluator
name|fnEval
init|=
name|wFn
operator|.
name|getWFnEval
argument_list|()
decl_stmt|;
name|int
name|numRowsRemaining
init|=
name|wFn
operator|.
name|getWindowFrame
argument_list|()
operator|.
name|getEnd
argument_list|()
operator|.
name|getRelativeOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|fnEval
operator|!=
literal|null
operator|&&
name|fnEval
operator|instanceof
name|ISupportStreamingModeForWindowing
condition|)
block|{
name|fnEval
operator|.
name|terminate
argument_list|(
name|streamingState
operator|.
name|aggBuffers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|WindowingFunctionInfoHelper
name|wFnInfo
init|=
name|getWindowingFunctionInfoHelper
argument_list|(
name|wFn
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|wFnInfo
operator|.
name|isSupportsWindow
argument_list|()
condition|)
block|{
name|numRowsRemaining
operator|=
operator|(
operator|(
name|ISupportStreamingModeForWindowing
operator|)
name|fnEval
operator|)
operator|.
name|getRowsRemainingAfterTerminate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|numRowsRemaining
operator|!=
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
while|while
condition|(
name|numRowsRemaining
operator|>
literal|0
condition|)
block|{
name|Object
name|out
init|=
operator|(
operator|(
name|ISupportStreamingModeForWindowing
operator|)
name|fnEval
operator|)
operator|.
name|getNextResult
argument_list|(
name|streamingState
operator|.
name|aggBuffers
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|streamingState
operator|.
name|fnOutputs
index|[
name|i
index|]
operator|.
name|add
argument_list|(
name|out
operator|==
name|ISupportStreamingModeForWindowing
operator|.
name|NULL_RESULT
condition|?
literal|null
else|:
name|out
argument_list|)
expr_stmt|;
block|}
name|numRowsRemaining
operator|--
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
while|while
condition|(
name|numRowsRemaining
operator|>
literal|0
condition|)
block|{
name|int
name|rowToProcess
init|=
name|streamingState
operator|.
name|rollingPart
operator|.
name|size
argument_list|()
operator|-
name|numRowsRemaining
decl_stmt|;
if|if
condition|(
name|rowToProcess
operator|>=
literal|0
condition|)
block|{
name|Object
name|out
init|=
name|evaluateWindowFunction
argument_list|(
name|wFn
argument_list|,
name|rowToProcess
argument_list|,
name|streamingState
operator|.
name|rollingPart
argument_list|)
decl_stmt|;
name|streamingState
operator|.
name|fnOutputs
index|[
name|i
index|]
operator|.
name|add
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|numRowsRemaining
operator|--
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|oRows
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|streamingState
operator|.
name|rollingPart
operator|.
name|processedAllRows
argument_list|()
operator|&&
operator|!
name|streamingState
operator|.
name|rankLimitReached
argument_list|()
condition|)
block|{
name|boolean
name|hasRow
init|=
name|streamingState
operator|.
name|hasOutputRow
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hasRow
operator|&&
operator|!
name|streamingState
operator|.
name|rankLimitReached
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Internal Error: cannot generate all output rows for a Partition"
argument_list|)
throw|;
block|}
if|if
condition|(
name|hasRow
condition|)
block|{
name|oRows
operator|.
name|add
argument_list|(
name|streamingState
operator|.
name|nextOutputRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|oRows
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|oRows
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canIterateOutput
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iterator
parameter_list|(
name|PTFPartitionIterator
argument_list|<
name|Object
argument_list|>
name|pItr
parameter_list|)
throws|throws
name|HiveException
block|{
name|WindowTableFunctionDef
name|wTFnDef
init|=
operator|(
name|WindowTableFunctionDef
operator|)
name|getTableDef
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|output
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
index|[]
name|outputFromPivotFunctions
init|=
operator|new
name|List
argument_list|<
name|?
argument_list|>
index|[
name|wTFnDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|wFnsWithWindows
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|PTFPartition
name|iPart
init|=
name|pItr
operator|.
name|getPartition
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|WindowFunctionDef
name|wFn
range|:
name|wTFnDef
operator|.
name|getWindowFunctions
argument_list|()
control|)
block|{
name|boolean
name|processWindow
init|=
name|processWindow
argument_list|(
name|wFn
operator|.
name|getWindowFrame
argument_list|()
argument_list|)
decl_stmt|;
name|pItr
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|processWindow
operator|&&
operator|!
name|wFn
operator|.
name|isPivotResult
argument_list|()
condition|)
block|{
name|Object
name|out
init|=
name|evaluateFunctionOnPartition
argument_list|(
name|wFn
argument_list|,
name|iPart
argument_list|)
decl_stmt|;
name|output
operator|.
name|add
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wFn
operator|.
name|isPivotResult
argument_list|()
condition|)
block|{
name|GenericUDAFEvaluator
name|streamingEval
init|=
name|wFn
operator|.
name|getWFnEval
argument_list|()
operator|.
name|getWindowingEvaluator
argument_list|(
name|wFn
operator|.
name|getWindowFrame
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|streamingEval
operator|!=
literal|null
operator|&&
name|streamingEval
operator|instanceof
name|ISupportStreamingModeForWindowing
condition|)
block|{
name|ISupportStreamingModeForWindowing
name|strEval
init|=
operator|(
name|ISupportStreamingModeForWindowing
operator|)
name|streamingEval
decl_stmt|;
if|if
condition|(
name|strEval
operator|.
name|getRowsRemainingAfterTerminate
argument_list|()
operator|==
literal|0
condition|)
block|{
name|wFn
operator|.
name|setWFnEval
argument_list|(
name|streamingEval
argument_list|)
expr_stmt|;
if|if
condition|(
name|wFn
operator|.
name|getOI
argument_list|()
operator|instanceof
name|ListObjectInspector
condition|)
block|{
name|ListObjectInspector
name|listOI
init|=
operator|(
name|ListObjectInspector
operator|)
name|wFn
operator|.
name|getOI
argument_list|()
decl_stmt|;
name|wFn
operator|.
name|setOI
argument_list|(
name|listOI
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|wFnsWithWindows
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outputFromPivotFunctions
index|[
name|i
index|]
operator|=
operator|(
name|List
operator|)
name|evaluateFunctionOnPartition
argument_list|(
name|wFn
argument_list|,
name|iPart
argument_list|)
expr_stmt|;
name|output
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|outputFromPivotFunctions
index|[
name|i
index|]
operator|=
operator|(
name|List
operator|)
name|evaluateFunctionOnPartition
argument_list|(
name|wFn
argument_list|,
name|iPart
argument_list|)
expr_stmt|;
name|output
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|output
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|wFnsWithWindows
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|iPart
operator|.
name|getOutputOI
argument_list|()
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wTFnDef
operator|.
name|getRankLimit
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|rnkLimitDef
operator|=
operator|new
name|RankLimit
argument_list|(
name|wTFnDef
operator|.
name|getRankLimit
argument_list|()
argument_list|,
name|wTFnDef
operator|.
name|getRankLimitFunction
argument_list|()
argument_list|,
name|wTFnDef
operator|.
name|getWindowFunctions
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|WindowingIterator
argument_list|(
name|iPart
argument_list|,
name|output
argument_list|,
name|outputFromPivotFunctions
argument_list|,
name|ArrayUtils
operator|.
name|toPrimitive
argument_list|(
name|wFnsWithWindows
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|wFnsWithWindows
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|WindowingTableFunctionResolver
extends|extends
name|TableFunctionResolver
block|{
comment|/*      * OI of object constructed from output of Wdw Fns; before it is put      * in the Wdw Processing Partition. Set by Translator/Deserializer.      */
specifier|private
specifier|transient
name|StructObjectInspector
name|wdwProcessingOutputOI
decl_stmt|;
specifier|public
name|StructObjectInspector
name|getWdwProcessingOutputOI
parameter_list|()
block|{
return|return
name|wdwProcessingOutputOI
return|;
block|}
specifier|public
name|void
name|setWdwProcessingOutputOI
parameter_list|(
name|StructObjectInspector
name|wdwProcessingOutputOI
parameter_list|)
block|{
name|this
operator|.
name|wdwProcessingOutputOI
operator|=
name|wdwProcessingOutputOI
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|TableFunctionEvaluator
name|createEvaluator
parameter_list|(
name|PTFDesc
name|ptfDesc
parameter_list|,
name|PartitionedTableFunctionDef
name|tDef
parameter_list|)
block|{
return|return
operator|new
name|WindowingTableFunction
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setupOutputOI
parameter_list|()
throws|throws
name|SemanticException
block|{
name|setOutputOI
argument_list|(
name|wdwProcessingOutputOI
argument_list|)
expr_stmt|;
block|}
comment|/*      * Setup the OI based on the:      * - Input TableDef's columns      * - the Window Functions.      */
annotation|@
name|Override
specifier|public
name|void
name|initializeOutputOI
parameter_list|()
throws|throws
name|HiveException
block|{
name|setupOutputOI
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|transformsRawInput
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/*      * (non-Javadoc)      * @see org.apache.hadoop.hive.ql.udf.ptf.TableFunctionResolver#carryForwardNames()      * Setting to true is correct only for special internal Functions.      */
annotation|@
name|Override
specifier|public
name|boolean
name|carryForwardNames
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/*      * (non-Javadoc)      * @see org.apache.hadoop.hive.ql.udf.ptf.TableFunctionResolver#getOutputNames()      * Set to null only because carryForwardNames is true.      */
annotation|@
name|Override
specifier|public
name|ArrayList
argument_list|<
name|String
argument_list|>
name|getOutputColumnNames
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SameList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractList
argument_list|<
name|E
argument_list|>
block|{
name|int
name|sz
decl_stmt|;
name|E
name|val
decl_stmt|;
specifier|public
name|SameList
parameter_list|(
name|int
name|sz
parameter_list|,
name|E
name|val
parameter_list|)
block|{
name|this
operator|.
name|sz
operator|=
name|sz
expr_stmt|;
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|E
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|val
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|sz
return|;
block|}
block|}
specifier|public
class|class
name|WindowingIterator
implements|implements
name|Iterator
argument_list|<
name|Object
argument_list|>
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|output
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
index|[]
name|outputFromPivotFunctions
decl_stmt|;
name|int
name|currIdx
decl_stmt|;
name|PTFPartition
name|iPart
decl_stmt|;
comment|/*      * these are the functions that have a Window.      * Fns w/o a Window have already been processed.      */
name|int
index|[]
name|wFnsToProcess
decl_stmt|;
name|WindowTableFunctionDef
name|wTFnDef
decl_stmt|;
name|PTFDesc
name|ptfDesc
decl_stmt|;
name|StructObjectInspector
name|inputOI
decl_stmt|;
name|AggregationBuffer
index|[]
name|aggBuffers
decl_stmt|;
name|Object
index|[]
index|[]
name|args
decl_stmt|;
name|RankLimit
name|rnkLimit
decl_stmt|;
name|WindowingIterator
parameter_list|(
name|PTFPartition
name|iPart
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|output
parameter_list|,
name|List
argument_list|<
name|?
argument_list|>
index|[]
name|outputFromPivotFunctions
parameter_list|,
name|int
index|[]
name|wFnsToProcess
parameter_list|)
block|{
name|this
operator|.
name|iPart
operator|=
name|iPart
expr_stmt|;
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
name|this
operator|.
name|outputFromPivotFunctions
operator|=
name|outputFromPivotFunctions
expr_stmt|;
name|this
operator|.
name|wFnsToProcess
operator|=
name|wFnsToProcess
expr_stmt|;
name|this
operator|.
name|currIdx
operator|=
literal|0
expr_stmt|;
name|wTFnDef
operator|=
operator|(
name|WindowTableFunctionDef
operator|)
name|getTableDef
argument_list|()
expr_stmt|;
name|ptfDesc
operator|=
name|getQueryDef
argument_list|()
expr_stmt|;
name|inputOI
operator|=
name|iPart
operator|.
name|getOutputOI
argument_list|()
expr_stmt|;
name|aggBuffers
operator|=
operator|new
name|AggregationBuffer
index|[
name|wTFnDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|args
operator|=
operator|new
name|Object
index|[
name|wTFnDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|size
argument_list|()
index|]
index|[]
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|j
range|:
name|wFnsToProcess
control|)
block|{
name|WindowFunctionDef
name|wFn
init|=
name|wTFnDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|aggBuffers
index|[
name|j
index|]
operator|=
name|wFn
operator|.
name|getWFnEval
argument_list|()
operator|.
name|getNewAggregationBuffer
argument_list|()
expr_stmt|;
name|args
index|[
name|j
index|]
operator|=
operator|new
name|Object
index|[
name|wFn
operator|.
name|getArgs
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|wFn
operator|.
name|getArgs
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|he
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|he
argument_list|)
throw|;
block|}
if|if
condition|(
name|WindowingTableFunction
operator|.
name|this
operator|.
name|rnkLimitDef
operator|!=
literal|null
condition|)
block|{
name|rnkLimit
operator|=
operator|new
name|RankLimit
argument_list|(
name|WindowingTableFunction
operator|.
name|this
operator|.
name|rnkLimitDef
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|rnkLimit
operator|!=
literal|null
operator|&&
name|rnkLimit
operator|.
name|limitReached
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|currIdx
operator|<
name|iPart
operator|.
name|size
argument_list|()
return|;
block|}
comment|// Given the data in a partition, evaluate the result for the next row for
comment|// streaming and batch mode
annotation|@
name|Override
specifier|public
name|Object
name|next
parameter_list|()
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|outputFromPivotFunctions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|outputFromPivotFunctions
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|outputFromPivotFunctions
index|[
name|i
index|]
operator|.
name|get
argument_list|(
name|currIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
for|for
control|(
name|int
name|j
range|:
name|wFnsToProcess
control|)
block|{
name|WindowFunctionDef
name|wFn
init|=
name|wTFnDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|wFn
operator|.
name|getWFnEval
argument_list|()
operator|instanceof
name|ISupportStreamingModeForWindowing
condition|)
block|{
name|Object
name|iRow
init|=
name|iPart
operator|.
name|getAt
argument_list|(
name|currIdx
argument_list|)
decl_stmt|;
name|int
name|a
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|wFn
operator|.
name|getArgs
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PTFExpressionDef
name|arg
range|:
name|wFn
operator|.
name|getArgs
argument_list|()
control|)
block|{
name|args
index|[
name|j
index|]
index|[
name|a
operator|++
index|]
operator|=
name|arg
operator|.
name|getExprEvaluator
argument_list|()
operator|.
name|evaluate
argument_list|(
name|iRow
argument_list|)
expr_stmt|;
block|}
block|}
name|wFn
operator|.
name|getWFnEval
argument_list|()
operator|.
name|aggregate
argument_list|(
name|aggBuffers
index|[
name|j
index|]
argument_list|,
name|args
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|Object
name|out
init|=
operator|(
operator|(
name|ISupportStreamingModeForWindowing
operator|)
name|wFn
operator|.
name|getWFnEval
argument_list|()
operator|)
operator|.
name|getNextResult
argument_list|(
name|aggBuffers
index|[
name|j
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|out
operator|==
name|ISupportStreamingModeForWindowing
operator|.
name|NULL_RESULT
condition|)
block|{
name|out
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|out
operator|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|out
argument_list|,
name|wFn
operator|.
name|getOI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|output
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|out
init|=
name|evaluateWindowFunction
argument_list|(
name|wFn
argument_list|,
name|currIdx
argument_list|,
name|iPart
argument_list|)
decl_stmt|;
name|output
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
name|Object
name|iRow
init|=
name|iPart
operator|.
name|getAt
argument_list|(
name|currIdx
argument_list|)
decl_stmt|;
name|i
operator|=
name|wTFnDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|StructField
name|f
range|:
name|inputOI
operator|.
name|getAllStructFieldRefs
argument_list|()
control|)
block|{
name|output
operator|.
name|set
argument_list|(
name|i
operator|++
argument_list|,
name|inputOI
operator|.
name|getStructFieldData
argument_list|(
name|iRow
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|he
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|he
argument_list|)
throw|;
block|}
if|if
condition|(
name|rnkLimit
operator|!=
literal|null
condition|)
block|{
name|rnkLimit
operator|.
name|updateRank
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
name|currIdx
operator|++
expr_stmt|;
return|return
name|output
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
class|class
name|StreamingState
block|{
name|PTFRollingPartition
name|rollingPart
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
index|[]
name|fnOutputs
decl_stmt|;
name|AggregationBuffer
index|[]
name|aggBuffers
decl_stmt|;
name|Object
index|[]
index|[]
name|funcArgs
decl_stmt|;
name|RankLimit
name|rnkLimit
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|StreamingState
parameter_list|(
name|Configuration
name|cfg
parameter_list|,
name|StructObjectInspector
name|inputOI
parameter_list|,
name|boolean
name|isMapSide
parameter_list|,
name|WindowTableFunctionDef
name|tabDef
parameter_list|,
name|int
name|precedingSpan
parameter_list|,
name|int
name|followingSpan
parameter_list|)
throws|throws
name|HiveException
block|{
name|AbstractSerDe
name|serde
init|=
name|isMapSide
condition|?
name|tabDef
operator|.
name|getInput
argument_list|()
operator|.
name|getOutputShape
argument_list|()
operator|.
name|getSerde
argument_list|()
else|:
name|tabDef
operator|.
name|getRawInputShape
argument_list|()
operator|.
name|getSerde
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|outputOI
init|=
name|isMapSide
condition|?
name|tabDef
operator|.
name|getInput
argument_list|()
operator|.
name|getOutputShape
argument_list|()
operator|.
name|getOI
argument_list|()
else|:
name|tabDef
operator|.
name|getRawInputShape
argument_list|()
operator|.
name|getOI
argument_list|()
decl_stmt|;
name|rollingPart
operator|=
name|PTFPartition
operator|.
name|createRolling
argument_list|(
name|cfg
argument_list|,
name|serde
argument_list|,
name|inputOI
argument_list|,
name|outputOI
argument_list|,
name|precedingSpan
argument_list|,
name|followingSpan
argument_list|)
expr_stmt|;
name|int
name|numFns
init|=
name|tabDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|fnOutputs
operator|=
operator|new
name|ArrayList
index|[
name|numFns
index|]
expr_stmt|;
name|aggBuffers
operator|=
operator|new
name|AggregationBuffer
index|[
name|numFns
index|]
expr_stmt|;
name|funcArgs
operator|=
operator|new
name|Object
index|[
name|numFns
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFns
condition|;
name|i
operator|++
control|)
block|{
name|fnOutputs
index|[
name|i
index|]
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|WindowFunctionDef
name|wFn
init|=
name|tabDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|funcArgs
index|[
name|i
index|]
operator|=
operator|new
name|Object
index|[
name|wFn
operator|.
name|getArgs
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|wFn
operator|.
name|getArgs
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|aggBuffers
index|[
name|i
index|]
operator|=
name|wFn
operator|.
name|getWFnEval
argument_list|()
operator|.
name|getNewAggregationBuffer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|WindowingTableFunction
operator|.
name|this
operator|.
name|rnkLimitDef
operator|!=
literal|null
condition|)
block|{
name|rnkLimit
operator|=
operator|new
name|RankLimit
argument_list|(
name|WindowingTableFunction
operator|.
name|this
operator|.
name|rnkLimitDef
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|reset
parameter_list|(
name|WindowTableFunctionDef
name|tabDef
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|numFns
init|=
name|tabDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|rollingPart
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fnOutputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fnOutputs
index|[
name|i
index|]
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFns
condition|;
name|i
operator|++
control|)
block|{
name|WindowFunctionDef
name|wFn
init|=
name|tabDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|aggBuffers
index|[
name|i
index|]
operator|=
name|wFn
operator|.
name|getWFnEval
argument_list|()
operator|.
name|getNewAggregationBuffer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rnkLimit
operator|!=
literal|null
condition|)
block|{
name|rnkLimit
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
name|boolean
name|hasOutputRow
parameter_list|()
block|{
if|if
condition|(
name|rankLimitReached
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fnOutputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fnOutputs
index|[
name|i
index|]
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|nextOutputRow
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|oRow
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Object
name|iRow
init|=
name|rollingPart
operator|.
name|nextOutputRow
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|fnOutputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|oRow
operator|.
name|add
argument_list|(
name|fnOutputs
index|[
name|i
index|]
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StructField
name|f
range|:
name|rollingPart
operator|.
name|getOutputOI
argument_list|()
operator|.
name|getAllStructFieldRefs
argument_list|()
control|)
block|{
name|oRow
operator|.
name|add
argument_list|(
name|rollingPart
operator|.
name|getOutputOI
argument_list|()
operator|.
name|getStructFieldData
argument_list|(
name|iRow
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rnkLimit
operator|!=
literal|null
condition|)
block|{
name|rnkLimit
operator|.
name|updateRank
argument_list|(
name|oRow
argument_list|)
expr_stmt|;
block|}
return|return
name|oRow
return|;
block|}
name|boolean
name|rankLimitReached
parameter_list|()
block|{
return|return
name|rnkLimit
operator|!=
literal|null
operator|&&
name|rnkLimit
operator|.
name|limitReached
argument_list|()
return|;
block|}
block|}
specifier|static
class|class
name|RankLimit
block|{
comment|/*      * Rows with a rank<= rankLimit are output.      * Only the first row with rank = rankLimit is output.      */
specifier|final
name|int
name|rankLimit
decl_stmt|;
comment|/*      * the rankValue of the last row output.      */
name|int
name|currentRank
decl_stmt|;
comment|/*      * index of Rank function.      */
specifier|final
name|int
name|rankFnIdx
decl_stmt|;
specifier|final
name|PrimitiveObjectInspector
name|fnOutOI
decl_stmt|;
name|RankLimit
parameter_list|(
name|int
name|rankLimit
parameter_list|,
name|int
name|rankFnIdx
parameter_list|,
name|List
argument_list|<
name|WindowFunctionDef
argument_list|>
name|wdwFnDefs
parameter_list|)
block|{
name|this
operator|.
name|rankLimit
operator|=
name|rankLimit
expr_stmt|;
name|this
operator|.
name|rankFnIdx
operator|=
name|rankFnIdx
expr_stmt|;
name|this
operator|.
name|fnOutOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|wdwFnDefs
operator|.
name|get
argument_list|(
name|rankFnIdx
argument_list|)
operator|.
name|getOI
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentRank
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|RankLimit
parameter_list|(
name|RankLimit
name|rl
parameter_list|)
block|{
name|this
operator|.
name|rankLimit
operator|=
name|rl
operator|.
name|rankLimit
expr_stmt|;
name|this
operator|.
name|rankFnIdx
operator|=
name|rl
operator|.
name|rankFnIdx
expr_stmt|;
name|this
operator|.
name|fnOutOI
operator|=
name|rl
operator|.
name|fnOutOI
expr_stmt|;
name|this
operator|.
name|currentRank
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|currentRank
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|void
name|updateRank
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|oRow
parameter_list|)
block|{
name|int
name|r
init|=
operator|(
name|Integer
operator|)
name|fnOutOI
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|oRow
operator|.
name|get
argument_list|(
name|rankFnIdx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|>
name|currentRank
condition|)
block|{
name|currentRank
operator|=
name|r
expr_stmt|;
block|}
block|}
name|boolean
name|limitReached
parameter_list|()
block|{
return|return
name|currentRank
operator|>=
name|rankLimit
return|;
block|}
block|}
block|}
end_class

end_unit

