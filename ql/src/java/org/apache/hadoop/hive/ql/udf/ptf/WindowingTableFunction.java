begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PTFOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PTFPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PTFPartition
operator|.
name|PTFPartitionIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|BoundarySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|Direction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PTFDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|BoundaryDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|PTFExpressionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|PartitionedTableFunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|ValueBoundaryDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowFrameDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowFunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowTableFunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
operator|.
name|AggregationBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|WindowingTableFunction
extends|extends
name|TableFunctionEvaluator
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|PTFPartitionIterator
argument_list|<
name|Object
argument_list|>
name|pItr
parameter_list|,
name|PTFPartition
name|outP
parameter_list|)
throws|throws
name|HiveException
block|{
name|ArrayList
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|oColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|PTFPartition
name|iPart
init|=
name|pItr
operator|.
name|getPartition
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|inputOI
decl_stmt|;
name|inputOI
operator|=
operator|(
name|StructObjectInspector
operator|)
name|iPart
operator|.
name|getOutputOI
argument_list|()
expr_stmt|;
name|WindowTableFunctionDef
name|wTFnDef
init|=
operator|(
name|WindowTableFunctionDef
operator|)
name|getTableDef
argument_list|()
decl_stmt|;
name|Order
name|order
init|=
name|wTFnDef
operator|.
name|getOrder
argument_list|()
operator|.
name|getExpressions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOrder
argument_list|()
decl_stmt|;
for|for
control|(
name|WindowFunctionDef
name|wFn
range|:
name|wTFnDef
operator|.
name|getWindowFunctions
argument_list|()
control|)
block|{
name|boolean
name|processWindow
init|=
name|processWindow
argument_list|(
name|wFn
argument_list|)
decl_stmt|;
name|pItr
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|processWindow
condition|)
block|{
name|Object
name|out
init|=
name|evaluateWindowFunction
argument_list|(
name|wFn
argument_list|,
name|pItr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|wFn
operator|.
name|isPivotResult
argument_list|()
condition|)
block|{
name|out
operator|=
operator|new
name|SameList
argument_list|(
name|iPart
operator|.
name|size
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|oColumns
operator|.
name|add
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|oColumns
operator|.
name|add
argument_list|(
name|executeFnwithWindow
argument_list|(
name|getQueryDef
argument_list|()
argument_list|,
name|wFn
argument_list|,
name|iPart
argument_list|,
name|order
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Output Columns in the following order      * - the columns representing the output from Window Fns      * - the input Rows columns      */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iPart
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ArrayList
name|oRow
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Object
name|iRow
init|=
name|iPart
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|oColumns
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|oRow
operator|.
name|add
argument_list|(
name|oColumns
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StructField
name|f
range|:
name|inputOI
operator|.
name|getAllStructFieldRefs
argument_list|()
control|)
block|{
name|oRow
operator|.
name|add
argument_list|(
name|inputOI
operator|.
name|getStructFieldData
argument_list|(
name|iRow
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outP
operator|.
name|append
argument_list|(
name|oRow
argument_list|)
expr_stmt|;
block|}
block|}
name|Object
name|evaluateWindowFunction
parameter_list|(
name|WindowFunctionDef
name|wFn
parameter_list|,
name|PTFPartitionIterator
argument_list|<
name|Object
argument_list|>
name|pItr
parameter_list|)
throws|throws
name|HiveException
block|{
name|GenericUDAFEvaluator
name|fEval
init|=
name|wFn
operator|.
name|getWFnEval
argument_list|()
decl_stmt|;
name|Object
index|[]
name|args
init|=
operator|new
name|Object
index|[
name|wFn
operator|.
name|getArgs
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|wFn
operator|.
name|getArgs
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|AggregationBuffer
name|aggBuffer
init|=
name|fEval
operator|.
name|getNewAggregationBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|pItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|row
init|=
name|pItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|wFn
operator|.
name|getArgs
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PTFExpressionDef
name|arg
range|:
name|wFn
operator|.
name|getArgs
argument_list|()
control|)
block|{
name|args
index|[
name|i
operator|++
index|]
operator|=
name|arg
operator|.
name|getExprEvaluator
argument_list|()
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
name|fEval
operator|.
name|aggregate
argument_list|(
name|aggBuffer
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
name|Object
name|out
init|=
name|fEval
operator|.
name|evaluate
argument_list|(
name|aggBuffer
argument_list|)
decl_stmt|;
name|out
operator|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|out
argument_list|,
name|wFn
operator|.
name|getOI
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
specifier|private
name|boolean
name|processWindow
parameter_list|(
name|WindowFunctionDef
name|wFn
parameter_list|)
block|{
name|WindowFrameDef
name|frame
init|=
name|wFn
operator|.
name|getWindowFrame
argument_list|()
decl_stmt|;
if|if
condition|(
name|frame
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|frame
operator|.
name|getStart
argument_list|()
operator|.
name|getAmt
argument_list|()
operator|==
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
operator|&&
name|frame
operator|.
name|getEnd
argument_list|()
operator|.
name|getAmt
argument_list|()
operator|==
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canIterateOutput
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iterator
parameter_list|(
name|PTFPartitionIterator
argument_list|<
name|Object
argument_list|>
name|pItr
parameter_list|)
throws|throws
name|HiveException
block|{
name|WindowTableFunctionDef
name|wTFnDef
init|=
operator|(
name|WindowTableFunctionDef
operator|)
name|getTableDef
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|output
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
index|[]
name|outputFromPivotFunctions
init|=
operator|new
name|List
argument_list|<
name|?
argument_list|>
index|[
name|wTFnDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|wFnsWithWindows
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|PTFPartition
name|iPart
init|=
name|pItr
operator|.
name|getPartition
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|WindowFunctionDef
name|wFn
range|:
name|wTFnDef
operator|.
name|getWindowFunctions
argument_list|()
control|)
block|{
name|boolean
name|processWindow
init|=
name|processWindow
argument_list|(
name|wFn
argument_list|)
decl_stmt|;
name|pItr
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|processWindow
operator|&&
operator|!
name|wFn
operator|.
name|isPivotResult
argument_list|()
condition|)
block|{
name|Object
name|out
init|=
name|evaluateWindowFunction
argument_list|(
name|wFn
argument_list|,
name|pItr
argument_list|)
decl_stmt|;
name|output
operator|.
name|add
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wFn
operator|.
name|isPivotResult
argument_list|()
condition|)
block|{
comment|/*          * for functions that currently return the output as a List,          * for e.g. the ranking functions, lead/lag, ntile, cume_dist          * - for now continue to execute them here. The functions need to provide a way to get          *   each output row as we are iterating through the input. This is relative          *   easy to do for ranking functions; not possible for lead, ntile, cume_dist.          *          */
name|outputFromPivotFunctions
index|[
name|i
index|]
operator|=
operator|(
name|List
operator|)
name|evaluateWindowFunction
argument_list|(
name|wFn
argument_list|,
name|pItr
argument_list|)
expr_stmt|;
name|output
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|wFnsWithWindows
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|i
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|iPart
operator|.
name|getOutputOI
argument_list|()
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|WindowingIterator
argument_list|(
name|iPart
argument_list|,
name|output
argument_list|,
name|outputFromPivotFunctions
argument_list|,
name|ArrayUtils
operator|.
name|toPrimitive
argument_list|(
name|wFnsWithWindows
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|wFnsWithWindows
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|WindowingTableFunctionResolver
extends|extends
name|TableFunctionResolver
block|{
comment|/*      * OI of object constructed from output of Wdw Fns; before it is put      * in the Wdw Processing Partition. Set by Translator/Deserializer.      */
specifier|private
specifier|transient
name|StructObjectInspector
name|wdwProcessingOutputOI
decl_stmt|;
specifier|public
name|StructObjectInspector
name|getWdwProcessingOutputOI
parameter_list|()
block|{
return|return
name|wdwProcessingOutputOI
return|;
block|}
specifier|public
name|void
name|setWdwProcessingOutputOI
parameter_list|(
name|StructObjectInspector
name|wdwProcessingOutputOI
parameter_list|)
block|{
name|this
operator|.
name|wdwProcessingOutputOI
operator|=
name|wdwProcessingOutputOI
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|TableFunctionEvaluator
name|createEvaluator
parameter_list|(
name|PTFDesc
name|ptfDesc
parameter_list|,
name|PartitionedTableFunctionDef
name|tDef
parameter_list|)
block|{
return|return
operator|new
name|WindowingTableFunction
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setupOutputOI
parameter_list|()
throws|throws
name|SemanticException
block|{
name|setOutputOI
argument_list|(
name|wdwProcessingOutputOI
argument_list|)
expr_stmt|;
block|}
comment|/*      * Setup the OI based on the:      * - Input TableDef's columns      * - the Window Functions.      */
annotation|@
name|Override
specifier|public
name|void
name|initializeOutputOI
parameter_list|()
throws|throws
name|HiveException
block|{
name|setupOutputOI
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|transformsRawInput
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/*      * (non-Javadoc)      * @see org.apache.hadoop.hive.ql.udf.ptf.TableFunctionResolver#carryForwardNames()      * Setting to true is correct only for special internal Functions.      */
annotation|@
name|Override
specifier|public
name|boolean
name|carryForwardNames
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/*      * (non-Javadoc)      * @see org.apache.hadoop.hive.ql.udf.ptf.TableFunctionResolver#getOutputNames()      * Set to null only because carryForwardNames is true.      */
annotation|@
name|Override
specifier|public
name|ArrayList
argument_list|<
name|String
argument_list|>
name|getOutputColumnNames
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|executeFnwithWindow
parameter_list|(
name|PTFDesc
name|ptfDesc
parameter_list|,
name|WindowFunctionDef
name|wFnDef
parameter_list|,
name|PTFPartition
name|iPart
parameter_list|,
name|Order
name|order
parameter_list|)
throws|throws
name|HiveException
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iPart
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Range
name|rng
init|=
name|getRange
argument_list|(
name|wFnDef
argument_list|,
name|i
argument_list|,
name|iPart
argument_list|,
name|order
argument_list|)
decl_stmt|;
name|PTFPartitionIterator
argument_list|<
name|Object
argument_list|>
name|rItr
init|=
name|rng
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|PTFOperator
operator|.
name|connectLeadLagFunctionsToPartition
argument_list|(
name|ptfDesc
argument_list|,
name|rItr
argument_list|)
expr_stmt|;
name|Object
name|out
init|=
name|evaluateWindowFunction
argument_list|(
name|wFnDef
argument_list|,
name|rItr
argument_list|)
decl_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
return|return
name|vals
return|;
block|}
name|Range
name|getRange
parameter_list|(
name|WindowFunctionDef
name|wFnDef
parameter_list|,
name|int
name|currRow
parameter_list|,
name|PTFPartition
name|p
parameter_list|,
name|Order
name|order
parameter_list|)
throws|throws
name|HiveException
block|{
name|BoundaryDef
name|startB
init|=
name|wFnDef
operator|.
name|getWindowFrame
argument_list|()
operator|.
name|getStart
argument_list|()
decl_stmt|;
name|BoundaryDef
name|endB
init|=
name|wFnDef
operator|.
name|getWindowFrame
argument_list|()
operator|.
name|getEnd
argument_list|()
decl_stmt|;
name|boolean
name|rowFrame
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|startB
operator|instanceof
name|ValueBoundaryDef
operator|||
name|endB
operator|instanceof
name|ValueBoundaryDef
condition|)
block|{
name|rowFrame
operator|=
literal|false
expr_stmt|;
block|}
name|int
name|start
decl_stmt|,
name|end
decl_stmt|;
if|if
condition|(
name|rowFrame
condition|)
block|{
name|start
operator|=
name|getRowBoundaryStart
argument_list|(
name|startB
argument_list|,
name|currRow
argument_list|)
expr_stmt|;
name|end
operator|=
name|getRowBoundaryEnd
argument_list|(
name|endB
argument_list|,
name|currRow
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ValueBoundaryScanner
name|vbs
decl_stmt|;
if|if
condition|(
name|startB
operator|instanceof
name|ValueBoundaryDef
condition|)
block|{
name|vbs
operator|=
name|ValueBoundaryScanner
operator|.
name|getScanner
argument_list|(
operator|(
name|ValueBoundaryDef
operator|)
name|startB
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vbs
operator|=
name|ValueBoundaryScanner
operator|.
name|getScanner
argument_list|(
operator|(
name|ValueBoundaryDef
operator|)
name|endB
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
name|vbs
operator|.
name|reset
argument_list|(
name|startB
argument_list|)
expr_stmt|;
name|start
operator|=
name|vbs
operator|.
name|computeStart
argument_list|(
name|currRow
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|vbs
operator|.
name|reset
argument_list|(
name|endB
argument_list|)
expr_stmt|;
name|end
operator|=
name|vbs
operator|.
name|computeEnd
argument_list|(
name|currRow
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|start
operator|=
name|start
operator|<
literal|0
condition|?
literal|0
else|:
name|start
expr_stmt|;
name|end
operator|=
name|end
operator|>
name|p
operator|.
name|size
argument_list|()
condition|?
name|p
operator|.
name|size
argument_list|()
else|:
name|end
expr_stmt|;
return|return
operator|new
name|Range
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|p
argument_list|)
return|;
block|}
name|int
name|getRowBoundaryStart
parameter_list|(
name|BoundaryDef
name|b
parameter_list|,
name|int
name|currRow
parameter_list|)
throws|throws
name|HiveException
block|{
name|Direction
name|d
init|=
name|b
operator|.
name|getDirection
argument_list|()
decl_stmt|;
name|int
name|amt
init|=
name|b
operator|.
name|getAmt
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|d
condition|)
block|{
case|case
name|PRECEDING
case|:
if|if
condition|(
name|amt
operator|==
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|currRow
operator|-
name|amt
return|;
block|}
case|case
name|CURRENT
case|:
return|return
name|currRow
return|;
case|case
name|FOLLOWING
case|:
return|return
name|currRow
operator|+
name|amt
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unknown Start Boundary Direction: "
operator|+
name|d
argument_list|)
throw|;
block|}
name|int
name|getRowBoundaryEnd
parameter_list|(
name|BoundaryDef
name|b
parameter_list|,
name|int
name|currRow
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|Direction
name|d
init|=
name|b
operator|.
name|getDirection
argument_list|()
decl_stmt|;
name|int
name|amt
init|=
name|b
operator|.
name|getAmt
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|d
condition|)
block|{
case|case
name|PRECEDING
case|:
if|if
condition|(
name|amt
operator|==
literal|0
condition|)
block|{
return|return
name|currRow
operator|+
literal|1
return|;
block|}
return|return
name|currRow
operator|-
name|amt
return|;
case|case
name|CURRENT
case|:
return|return
name|currRow
operator|+
literal|1
return|;
case|case
name|FOLLOWING
case|:
if|if
condition|(
name|amt
operator|==
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
return|return
name|p
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|currRow
operator|+
name|amt
operator|+
literal|1
return|;
block|}
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unknown End Boundary Direction: "
operator|+
name|d
argument_list|)
throw|;
block|}
specifier|static
class|class
name|Range
block|{
name|int
name|start
decl_stmt|;
name|int
name|end
decl_stmt|;
name|PTFPartition
name|p
decl_stmt|;
specifier|public
name|Range
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|p
operator|=
name|p
expr_stmt|;
block|}
specifier|public
name|PTFPartitionIterator
argument_list|<
name|Object
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|p
operator|.
name|range
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
block|}
comment|/*    * - starting from the given rowIdx scan in the given direction until a row's expr    * evaluates to an amt that crosses the 'amt' threshold specified in the ValueBoundaryDef.    */
specifier|static
specifier|abstract
class|class
name|ValueBoundaryScanner
block|{
name|BoundaryDef
name|bndDef
decl_stmt|;
name|Order
name|order
decl_stmt|;
name|PTFExpressionDef
name|expressionDef
decl_stmt|;
specifier|public
name|ValueBoundaryScanner
parameter_list|(
name|BoundaryDef
name|bndDef
parameter_list|,
name|Order
name|order
parameter_list|,
name|PTFExpressionDef
name|expressionDef
parameter_list|)
block|{
name|this
operator|.
name|bndDef
operator|=
name|bndDef
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
name|this
operator|.
name|expressionDef
operator|=
name|expressionDef
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|BoundaryDef
name|bndDef
parameter_list|)
block|{
name|this
operator|.
name|bndDef
operator|=
name|bndDef
expr_stmt|;
block|}
comment|/* |  Use | Boundary1.type | Boundary1. amt | Sort Key | Order | Behavior                          | | Case |                |                |          |       |                                   | |------+----------------+----------------+----------+-------+-----------------------------------| |   1. | PRECEDING      | UNB            | ANY      | ANY   | start = 0                         | |   2. | PRECEDING      | unsigned int   | NULL     | ASC   | start = 0                         | |   3. |                |                |          | DESC  | scan backwards to row R2          | |      |                |                |          |       | such that R2.sk is not null       | |      |                |                |          |       | start = R2.idx + 1                | |   4. | PRECEDING      | unsigned int   | not NULL | DESC  | scan backwards until row R2       | |      |                |                |          |       | such that R2.sk - R.sk> amt      | |      |                |                |          |       | start = R2.idx + 1                | |   5. | PRECEDING      | unsigned int   | not NULL | ASC   | scan backward until row R2        | |      |                |                |          |       | such that R.sk - R2.sk> bnd1.amt | |      |                |                |          |       | start = R2.idx + 1                | |   6. | CURRENT ROW    |                | NULL     | ANY   | scan backwards until row R2       | |      |                |                |          |       | such that R2.sk is not null       | |      |                |                |          |       | start = R2.idx + 1                | |   7. | CURRENT ROW    |                | not NULL | ANY   | scan backwards until row R2       | |      |                |                |          |       | such R2.sk != R.sk                | |      |                |                |          |       | start = R2.idx + 1                | |   8. | FOLLOWING      | UNB            | ANY      | ANY   | Error                             | |   9. | FOLLOWING      | unsigned int   | NULL     | DESC  | start = partition.size            | |  10. |                |                |          | ASC   | scan forward until R2             | |      |                |                |          |       | such that R2.sk is not null       | |      |                |                |          |       | start = R2.idx                    | |  11. | FOLLOWING      | unsigned int   | not NULL | DESC  | scan forward until row R2         | |      |                |                |          |       | such that R.sk - R2.sk> amt      | |      |                |                |          |       | start = R2.idx                    | |  12. |                |                |          | ASC   | scan forward until row R2         | |      |                |                |          |       | such that R2.sk - R.sk> amt      | |------+----------------+----------------+----------+-------+-----------------------------------|      */
specifier|protected
name|int
name|computeStart
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
switch|switch
condition|(
name|bndDef
operator|.
name|getDirection
argument_list|()
condition|)
block|{
case|case
name|PRECEDING
case|:
return|return
name|computeStartPreceding
argument_list|(
name|rowIdx
argument_list|,
name|p
argument_list|)
return|;
case|case
name|CURRENT
case|:
return|return
name|computeStartCurrentRow
argument_list|(
name|rowIdx
argument_list|,
name|p
argument_list|)
return|;
case|case
name|FOLLOWING
case|:
default|default:
return|return
name|computeStartFollowing
argument_list|(
name|rowIdx
argument_list|,
name|p
argument_list|)
return|;
block|}
block|}
comment|/*      *      */
specifier|protected
name|int
name|computeStartPreceding
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|amt
init|=
name|bndDef
operator|.
name|getAmt
argument_list|()
decl_stmt|;
comment|// Use Case 1.
if|if
condition|(
name|amt
operator|==
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
return|return
literal|0
return|;
block|}
name|Object
name|sortKey
init|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortKey
operator|==
literal|null
condition|)
block|{
comment|// Use Case 2.
if|if
condition|(
name|order
operator|==
name|Order
operator|.
name|ASC
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
comment|// Use Case 3.
while|while
condition|(
name|sortKey
operator|==
literal|null
operator|&&
name|rowIdx
operator|>=
literal|0
condition|)
block|{
operator|--
name|rowIdx
expr_stmt|;
if|if
condition|(
name|rowIdx
operator|>=
literal|0
condition|)
block|{
name|sortKey
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rowIdx
operator|+
literal|1
return|;
block|}
block|}
name|Object
name|rowVal
init|=
name|sortKey
decl_stmt|;
name|int
name|r
init|=
name|rowIdx
decl_stmt|;
comment|// Use Case 4.
if|if
condition|(
name|order
operator|==
name|Order
operator|.
name|DESC
condition|)
block|{
while|while
condition|(
name|r
operator|>=
literal|0
operator|&&
operator|!
name|isGreater
argument_list|(
name|rowVal
argument_list|,
name|sortKey
argument_list|,
name|amt
argument_list|)
condition|)
block|{
name|r
operator|--
expr_stmt|;
if|if
condition|(
name|r
operator|>=
literal|0
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
operator|+
literal|1
return|;
block|}
else|else
block|{
comment|// Use Case 5.
while|while
condition|(
name|r
operator|>=
literal|0
operator|&&
operator|!
name|isGreater
argument_list|(
name|sortKey
argument_list|,
name|rowVal
argument_list|,
name|amt
argument_list|)
condition|)
block|{
name|r
operator|--
expr_stmt|;
if|if
condition|(
name|r
operator|>=
literal|0
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
operator|+
literal|1
return|;
block|}
block|}
specifier|protected
name|int
name|computeStartCurrentRow
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|sortKey
init|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
decl_stmt|;
comment|// Use Case 6.
if|if
condition|(
name|sortKey
operator|==
literal|null
condition|)
block|{
while|while
condition|(
name|sortKey
operator|==
literal|null
operator|&&
name|rowIdx
operator|>=
literal|0
condition|)
block|{
operator|--
name|rowIdx
expr_stmt|;
if|if
condition|(
name|rowIdx
operator|>=
literal|0
condition|)
block|{
name|sortKey
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rowIdx
operator|+
literal|1
return|;
block|}
name|Object
name|rowVal
init|=
name|sortKey
decl_stmt|;
name|int
name|r
init|=
name|rowIdx
decl_stmt|;
comment|// Use Case 7.
while|while
condition|(
name|r
operator|>=
literal|0
operator|&&
name|isEqual
argument_list|(
name|rowVal
argument_list|,
name|sortKey
argument_list|)
condition|)
block|{
name|r
operator|--
expr_stmt|;
if|if
condition|(
name|r
operator|>=
literal|0
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
operator|+
literal|1
return|;
block|}
specifier|protected
name|int
name|computeStartFollowing
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|amt
init|=
name|bndDef
operator|.
name|getAmt
argument_list|()
decl_stmt|;
name|Object
name|sortKey
init|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|rowVal
init|=
name|sortKey
decl_stmt|;
name|int
name|r
init|=
name|rowIdx
decl_stmt|;
if|if
condition|(
name|sortKey
operator|==
literal|null
condition|)
block|{
comment|// Use Case 9.
if|if
condition|(
name|order
operator|==
name|Order
operator|.
name|DESC
condition|)
block|{
return|return
name|p
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
comment|// Use Case 10.
while|while
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
operator|&&
name|rowVal
operator|==
literal|null
condition|)
block|{
name|r
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
block|}
comment|// Use Case 11.
if|if
condition|(
name|order
operator|==
name|Order
operator|.
name|DESC
condition|)
block|{
while|while
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|isGreater
argument_list|(
name|sortKey
argument_list|,
name|rowVal
argument_list|,
name|amt
argument_list|)
condition|)
block|{
name|r
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
else|else
block|{
comment|// Use Case 12.
while|while
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|isGreater
argument_list|(
name|rowVal
argument_list|,
name|sortKey
argument_list|,
name|amt
argument_list|)
condition|)
block|{
name|r
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
block|}
comment|/* |  Use | Boundary2.type | Boundary2.amt | Sort Key | Order | Behavior                          | | Case |                |               |          |       |                                   | |------+----------------+---------------+----------+-------+-----------------------------------| |   1. | PRECEDING      | UNB           | ANY      | ANY   | Error                             | |   2. | PRECEDING      | unsigned int  | NULL     | DESC  | end = partition.size()            | |   3. |                |               |          | ASC   | end = 0                           | |   4. | PRECEDING      | unsigned int  | not null | DESC  | scan backward until row R2        | |      |                |               |          |       | such that R2.sk - R.sk> bnd.amt  | |      |                |               |          |       | end = R2.idx + 1                  | |   5. | PRECEDING      | unsigned int  | not null | ASC   | scan backward until row R2        | |      |                |               |          |       | such that R.sk -  R2.sk> bnd.amt | |      |                |               |          |       | end = R2.idx + 1                  | |   6. | CURRENT ROW    |               | NULL     | ANY   | scan forward until row R2         | |      |                |               |          |       | such that R2.sk is not null       | |      |                |               |          |       | end = R2.idx                      | |   7. | CURRENT ROW    |               | not null | ANY   | scan forward until row R2         | |      |                |               |          |       | such that R2.sk != R.sk           | |      |                |               |          |       | end = R2.idx                      | |   8. | FOLLOWING      | UNB           | ANY      | ANY   | end = partition.size()            | |   9. | FOLLOWING      | unsigned int  | NULL     | DESC  | end = partition.size()            | |  10. |                |               |          | ASC   | scan forward until row R2         | |      |                |               |          |       | such that R2.sk is not null       | |      |                |               |          |       | end = R2.idx                      | |  11. | FOLLOWING      | unsigned int  | not NULL | DESC  | scan forward until row R2         | |      |                |               |          |       | such R.sk - R2.sk> bnd.amt       | |      |                |               |          |       | end = R2.idx                      | |  12. |                |               |          | ASC   | scan forward until row R2         | |      |                |               |          |       | such R2.sk - R2.sk> bnd.amt      | |      |                |               |          |       | end = R2.idx                      | |------+----------------+---------------+----------+-------+-----------------------------------|      */
specifier|protected
name|int
name|computeEnd
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
switch|switch
condition|(
name|bndDef
operator|.
name|getDirection
argument_list|()
condition|)
block|{
case|case
name|PRECEDING
case|:
return|return
name|computeEndPreceding
argument_list|(
name|rowIdx
argument_list|,
name|p
argument_list|)
return|;
case|case
name|CURRENT
case|:
return|return
name|computeEndCurrentRow
argument_list|(
name|rowIdx
argument_list|,
name|p
argument_list|)
return|;
case|case
name|FOLLOWING
case|:
default|default:
return|return
name|computeEndFollowing
argument_list|(
name|rowIdx
argument_list|,
name|p
argument_list|)
return|;
block|}
block|}
specifier|protected
name|int
name|computeEndPreceding
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|amt
init|=
name|bndDef
operator|.
name|getAmt
argument_list|()
decl_stmt|;
comment|// Use Case 1.
comment|// amt == UNBOUNDED, is caught during translation
name|Object
name|sortKey
init|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortKey
operator|==
literal|null
condition|)
block|{
comment|// Use Case 2.
if|if
condition|(
name|order
operator|==
name|Order
operator|.
name|DESC
condition|)
block|{
return|return
name|p
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
comment|// Use Case 3.
return|return
literal|0
return|;
block|}
block|}
name|Object
name|rowVal
init|=
name|sortKey
decl_stmt|;
name|int
name|r
init|=
name|rowIdx
decl_stmt|;
comment|// Use Case 4.
if|if
condition|(
name|order
operator|==
name|Order
operator|.
name|DESC
condition|)
block|{
while|while
condition|(
name|r
operator|>=
literal|0
operator|&&
operator|!
name|isGreater
argument_list|(
name|rowVal
argument_list|,
name|sortKey
argument_list|,
name|amt
argument_list|)
condition|)
block|{
name|r
operator|--
expr_stmt|;
if|if
condition|(
name|r
operator|>=
literal|0
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
operator|+
literal|1
return|;
block|}
else|else
block|{
comment|// Use Case 5.
while|while
condition|(
name|r
operator|>=
literal|0
operator|&&
operator|!
name|isGreater
argument_list|(
name|sortKey
argument_list|,
name|rowVal
argument_list|,
name|amt
argument_list|)
condition|)
block|{
name|r
operator|--
expr_stmt|;
if|if
condition|(
name|r
operator|>=
literal|0
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
operator|+
literal|1
return|;
block|}
block|}
specifier|protected
name|int
name|computeEndCurrentRow
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|sortKey
init|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
decl_stmt|;
comment|// Use Case 6.
if|if
condition|(
name|sortKey
operator|==
literal|null
condition|)
block|{
while|while
condition|(
name|sortKey
operator|==
literal|null
operator|&&
name|rowIdx
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
operator|++
name|rowIdx
expr_stmt|;
if|if
condition|(
name|rowIdx
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|sortKey
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rowIdx
return|;
block|}
name|Object
name|rowVal
init|=
name|sortKey
decl_stmt|;
name|int
name|r
init|=
name|rowIdx
decl_stmt|;
comment|// Use Case 7.
while|while
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
operator|&&
name|isEqual
argument_list|(
name|sortKey
argument_list|,
name|rowVal
argument_list|)
condition|)
block|{
name|r
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
specifier|protected
name|int
name|computeEndFollowing
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|PTFPartition
name|p
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|amt
init|=
name|bndDef
operator|.
name|getAmt
argument_list|()
decl_stmt|;
comment|// Use Case 8.
if|if
condition|(
name|amt
operator|==
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
condition|)
block|{
return|return
name|p
operator|.
name|size
argument_list|()
return|;
block|}
name|Object
name|sortKey
init|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|rowVal
init|=
name|sortKey
decl_stmt|;
name|int
name|r
init|=
name|rowIdx
decl_stmt|;
if|if
condition|(
name|sortKey
operator|==
literal|null
condition|)
block|{
comment|// Use Case 9.
if|if
condition|(
name|order
operator|==
name|Order
operator|.
name|DESC
condition|)
block|{
return|return
name|p
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
comment|// Use Case 10.
while|while
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
operator|&&
name|rowVal
operator|==
literal|null
condition|)
block|{
name|r
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
block|}
comment|// Use Case 11.
if|if
condition|(
name|order
operator|==
name|Order
operator|.
name|DESC
condition|)
block|{
while|while
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|isGreater
argument_list|(
name|sortKey
argument_list|,
name|rowVal
argument_list|,
name|amt
argument_list|)
condition|)
block|{
name|r
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
else|else
block|{
comment|// Use Case 12.
while|while
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|isGreater
argument_list|(
name|rowVal
argument_list|,
name|sortKey
argument_list|,
name|amt
argument_list|)
condition|)
block|{
name|r
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|<
name|p
operator|.
name|size
argument_list|()
condition|)
block|{
name|rowVal
operator|=
name|computeValue
argument_list|(
name|p
operator|.
name|getAt
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
block|}
specifier|public
name|Object
name|computeValue
parameter_list|(
name|Object
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|o
init|=
name|expressionDef
operator|.
name|getExprEvaluator
argument_list|()
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
decl_stmt|;
return|return
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|o
argument_list|,
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|abstract
name|boolean
name|isGreater
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|,
name|int
name|amt
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|isEqual
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|)
function_decl|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"incomplete-switch"
argument_list|)
specifier|public
specifier|static
name|ValueBoundaryScanner
name|getScanner
parameter_list|(
name|ValueBoundaryDef
name|vbDef
parameter_list|,
name|Order
name|order
parameter_list|)
throws|throws
name|HiveException
block|{
name|PrimitiveObjectInspector
name|pOI
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|vbDef
operator|.
name|getOI
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|pOI
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BYTE
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|SHORT
case|:
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|LongValueBoundaryScanner
argument_list|(
name|vbDef
argument_list|,
name|order
argument_list|,
name|vbDef
operator|.
name|getExpressionDef
argument_list|()
argument_list|)
return|;
case|case
name|DOUBLE
case|:
case|case
name|FLOAT
case|:
return|return
operator|new
name|DoubleValueBoundaryScanner
argument_list|(
name|vbDef
argument_list|,
name|order
argument_list|,
name|vbDef
operator|.
name|getExpressionDef
argument_list|()
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
operator|new
name|HiveDecimalValueBoundaryScanner
argument_list|(
name|vbDef
argument_list|,
name|order
argument_list|,
name|vbDef
operator|.
name|getExpressionDef
argument_list|()
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
operator|new
name|StringValueBoundaryScanner
argument_list|(
name|vbDef
argument_list|,
name|order
argument_list|,
name|vbDef
operator|.
name|getExpressionDef
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Internal Error: attempt to setup a Window for datatype %s"
argument_list|,
name|pOI
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
class|class
name|LongValueBoundaryScanner
extends|extends
name|ValueBoundaryScanner
block|{
specifier|public
name|LongValueBoundaryScanner
parameter_list|(
name|BoundaryDef
name|bndDef
parameter_list|,
name|Order
name|order
parameter_list|,
name|PTFExpressionDef
name|expressionDef
parameter_list|)
block|{
name|super
argument_list|(
name|bndDef
argument_list|,
name|order
argument_list|,
name|expressionDef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGreater
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|,
name|int
name|amt
parameter_list|)
block|{
name|long
name|l1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getLong
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|l2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getLong
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|l1
operator|-
name|l2
operator|)
operator|>
name|amt
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEqual
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|)
block|{
name|long
name|l1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getLong
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|l2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getLong
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|l1
operator|==
name|l2
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DoubleValueBoundaryScanner
extends|extends
name|ValueBoundaryScanner
block|{
specifier|public
name|DoubleValueBoundaryScanner
parameter_list|(
name|BoundaryDef
name|bndDef
parameter_list|,
name|Order
name|order
parameter_list|,
name|PTFExpressionDef
name|expressionDef
parameter_list|)
block|{
name|super
argument_list|(
name|bndDef
argument_list|,
name|order
argument_list|,
name|expressionDef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGreater
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|,
name|int
name|amt
parameter_list|)
block|{
name|double
name|d1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getDouble
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|d2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getDouble
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|d1
operator|-
name|d2
operator|)
operator|>
name|amt
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEqual
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|)
block|{
name|double
name|d1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getDouble
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|d2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getDouble
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|d1
operator|==
name|d2
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|HiveDecimalValueBoundaryScanner
extends|extends
name|ValueBoundaryScanner
block|{
specifier|public
name|HiveDecimalValueBoundaryScanner
parameter_list|(
name|BoundaryDef
name|bndDef
parameter_list|,
name|Order
name|order
parameter_list|,
name|PTFExpressionDef
name|expressionDef
parameter_list|)
block|{
name|super
argument_list|(
name|bndDef
argument_list|,
name|order
argument_list|,
name|expressionDef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGreater
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|,
name|int
name|amt
parameter_list|)
block|{
name|HiveDecimal
name|d1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getHiveDecimal
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|HiveDecimal
name|d2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getHiveDecimal
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d1
operator|==
literal|null
operator|||
name|d2
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|d1
operator|.
name|subtract
argument_list|(
name|d2
argument_list|)
operator|.
name|intValue
argument_list|()
operator|>
name|amt
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEqual
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|)
block|{
name|HiveDecimal
name|d1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getHiveDecimal
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|HiveDecimal
name|d2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getHiveDecimal
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d1
operator|==
literal|null
operator|||
name|d2
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|d1
operator|.
name|equals
argument_list|(
name|d2
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|StringValueBoundaryScanner
extends|extends
name|ValueBoundaryScanner
block|{
specifier|public
name|StringValueBoundaryScanner
parameter_list|(
name|BoundaryDef
name|bndDef
parameter_list|,
name|Order
name|order
parameter_list|,
name|PTFExpressionDef
name|expressionDef
parameter_list|)
block|{
name|super
argument_list|(
name|bndDef
argument_list|,
name|order
argument_list|,
name|expressionDef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGreater
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|,
name|int
name|amt
parameter_list|)
block|{
name|String
name|s1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getString
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getString
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|s1
operator|!=
literal|null
operator|&&
name|s2
operator|!=
literal|null
operator|&&
name|s1
operator|.
name|compareTo
argument_list|(
name|s2
argument_list|)
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEqual
parameter_list|(
name|Object
name|v1
parameter_list|,
name|Object
name|v2
parameter_list|)
block|{
name|String
name|s1
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getString
argument_list|(
name|v1
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getString
argument_list|(
name|v2
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|expressionDef
operator|.
name|getOI
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|s1
operator|==
literal|null
operator|&&
name|s2
operator|==
literal|null
operator|)
operator|||
name|s1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SameList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|AbstractList
argument_list|<
name|E
argument_list|>
block|{
name|int
name|sz
decl_stmt|;
name|E
name|val
decl_stmt|;
specifier|public
name|SameList
parameter_list|(
name|int
name|sz
parameter_list|,
name|E
name|val
parameter_list|)
block|{
name|this
operator|.
name|sz
operator|=
name|sz
expr_stmt|;
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|E
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|val
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|sz
return|;
block|}
block|}
specifier|public
class|class
name|WindowingIterator
implements|implements
name|Iterator
argument_list|<
name|Object
argument_list|>
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|output
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
index|[]
name|outputFromPivotFunctions
decl_stmt|;
name|int
name|currIdx
decl_stmt|;
name|PTFPartition
name|iPart
decl_stmt|;
comment|/*      * these are the functions that have a Window.      * Fns w/o a Window have already been processed.      */
name|int
index|[]
name|wFnsToProcess
decl_stmt|;
name|WindowTableFunctionDef
name|wTFnDef
decl_stmt|;
name|Order
name|order
decl_stmt|;
name|PTFDesc
name|ptfDesc
decl_stmt|;
name|StructObjectInspector
name|inputOI
decl_stmt|;
name|WindowingIterator
parameter_list|(
name|PTFPartition
name|iPart
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|output
parameter_list|,
name|List
argument_list|<
name|?
argument_list|>
index|[]
name|outputFromPivotFunctions
parameter_list|,
name|int
index|[]
name|wFnsToProcess
parameter_list|)
block|{
name|this
operator|.
name|iPart
operator|=
name|iPart
expr_stmt|;
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
name|this
operator|.
name|outputFromPivotFunctions
operator|=
name|outputFromPivotFunctions
expr_stmt|;
name|this
operator|.
name|wFnsToProcess
operator|=
name|wFnsToProcess
expr_stmt|;
name|this
operator|.
name|currIdx
operator|=
literal|0
expr_stmt|;
name|wTFnDef
operator|=
operator|(
name|WindowTableFunctionDef
operator|)
name|getTableDef
argument_list|()
expr_stmt|;
name|order
operator|=
name|wTFnDef
operator|.
name|getOrder
argument_list|()
operator|.
name|getExpressions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOrder
argument_list|()
expr_stmt|;
name|ptfDesc
operator|=
name|getQueryDef
argument_list|()
expr_stmt|;
name|inputOI
operator|=
name|iPart
operator|.
name|getOutputOI
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|currIdx
operator|<
name|iPart
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|next
parameter_list|()
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|outputFromPivotFunctions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|outputFromPivotFunctions
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|outputFromPivotFunctions
index|[
name|i
index|]
operator|.
name|get
argument_list|(
name|currIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
for|for
control|(
name|int
name|j
range|:
name|wFnsToProcess
control|)
block|{
name|WindowFunctionDef
name|wFn
init|=
name|wTFnDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Range
name|rng
init|=
name|getRange
argument_list|(
name|wFn
argument_list|,
name|currIdx
argument_list|,
name|iPart
argument_list|,
name|order
argument_list|)
decl_stmt|;
name|PTFPartitionIterator
argument_list|<
name|Object
argument_list|>
name|rItr
init|=
name|rng
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|PTFOperator
operator|.
name|connectLeadLagFunctionsToPartition
argument_list|(
name|ptfDesc
argument_list|,
name|rItr
argument_list|)
expr_stmt|;
name|output
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|evaluateWindowFunction
argument_list|(
name|wFn
argument_list|,
name|rItr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Object
name|iRow
init|=
name|iPart
operator|.
name|getAt
argument_list|(
name|currIdx
argument_list|)
decl_stmt|;
name|i
operator|=
name|wTFnDef
operator|.
name|getWindowFunctions
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|StructField
name|f
range|:
name|inputOI
operator|.
name|getAllStructFieldRefs
argument_list|()
control|)
block|{
name|output
operator|.
name|set
argument_list|(
name|i
operator|++
argument_list|,
name|inputOI
operator|.
name|getStructFieldData
argument_list|(
name|iRow
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|he
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|he
argument_list|)
throw|;
block|}
name|currIdx
operator|++
expr_stmt|;
return|return
name|output
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

