begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardUnionObjectInspector
operator|.
name|StandardUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorPartitionConversion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalDayTimeWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalYearMonthWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * This class assigns specified columns of a row from a Writable row objects.  *  * The caller provides the data types and projection column numbers of a subset of the columns  * to assign.  */
end_comment

begin_class
specifier|public
class|class
name|VectorAssignRow
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VectorAssignRow
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/*    * These members have information for assigning a row column objects into the VectorizedRowBatch    * columns.    *    * We say "target" because when there is conversion the data type being converted is the source.    */
name|boolean
index|[]
name|isConvert
decl_stmt|;
comment|// For each column, are we converting the row column object?
name|int
index|[]
name|projectionColumnNums
decl_stmt|;
comment|// Assigning can be a subset of columns, so this is the projection --
comment|// the batch column numbers.
name|TypeInfo
index|[]
name|targetTypeInfos
decl_stmt|;
comment|// The type info of each column being assigned.
name|int
index|[]
name|maxLengths
decl_stmt|;
comment|// For the CHAR and VARCHAR data types, the maximum character length of
comment|// the columns.  Otherwise, 0.
comment|/*    * These members have information for data type conversion.    * Not defined if there is no conversion.    */
name|ObjectInspector
index|[]
name|convertSourceOI
decl_stmt|;
comment|// The primitive object inspector of the source data type for any column being
comment|// converted.  Otherwise, null.
name|Writable
index|[]
name|convertTargetWritables
decl_stmt|;
comment|// Conversion to the target data type requires a "helper" target writable in a
comment|// few cases.
comment|/*    * Allocate the target related arrays.    */
specifier|private
name|void
name|allocateArrays
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|isConvert
operator|=
operator|new
name|boolean
index|[
name|count
index|]
expr_stmt|;
name|projectionColumnNums
operator|=
operator|new
name|int
index|[
name|count
index|]
expr_stmt|;
name|targetTypeInfos
operator|=
operator|new
name|TypeInfo
index|[
name|count
index|]
expr_stmt|;
name|maxLengths
operator|=
operator|new
name|int
index|[
name|count
index|]
expr_stmt|;
block|}
comment|/*    * Allocate the source conversion related arrays (optional).    */
specifier|private
name|void
name|allocateConvertArrays
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|convertSourceOI
operator|=
operator|new
name|ObjectInspector
index|[
name|count
index|]
expr_stmt|;
name|convertTargetWritables
operator|=
operator|new
name|Writable
index|[
name|count
index|]
expr_stmt|;
block|}
comment|/*    * Initialize one column's target related arrays.    */
specifier|private
name|void
name|initTargetEntry
parameter_list|(
name|int
name|logicalColumnIndex
parameter_list|,
name|int
name|projectionColumnNum
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
name|isConvert
index|[
name|logicalColumnIndex
index|]
operator|=
literal|false
expr_stmt|;
name|projectionColumnNums
index|[
name|logicalColumnIndex
index|]
operator|=
name|projectionColumnNum
expr_stmt|;
name|targetTypeInfos
index|[
name|logicalColumnIndex
index|]
operator|=
name|typeInfo
expr_stmt|;
if|if
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
specifier|final
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|PrimitiveCategory
name|primitiveCategory
init|=
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
case|case
name|CHAR
case|:
name|maxLengths
index|[
name|logicalColumnIndex
index|]
operator|=
operator|(
operator|(
name|CharTypeInfo
operator|)
name|primitiveTypeInfo
operator|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
break|break;
case|case
name|VARCHAR
case|:
name|maxLengths
index|[
name|logicalColumnIndex
index|]
operator|=
operator|(
operator|(
name|VarcharTypeInfo
operator|)
name|primitiveTypeInfo
operator|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
break|break;
default|default:
comment|// No additional data type specific setting.
break|break;
block|}
block|}
block|}
comment|/*    * Initialize one column's source conversion related arrays.    * Assumes initTargetEntry has already been called.    */
specifier|private
name|void
name|initConvertSourceEntry
parameter_list|(
name|int
name|logicalColumnIndex
parameter_list|,
name|TypeInfo
name|convertSourceTypeInfo
parameter_list|)
block|{
name|isConvert
index|[
name|logicalColumnIndex
index|]
operator|=
literal|true
expr_stmt|;
specifier|final
name|Category
name|convertSourceCategory
init|=
name|convertSourceTypeInfo
operator|.
name|getCategory
argument_list|()
decl_stmt|;
name|convertSourceOI
index|[
name|logicalColumnIndex
index|]
operator|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|convertSourceTypeInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|convertSourceCategory
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
comment|// These need to be based on the target.
specifier|final
name|PrimitiveCategory
name|targetPrimitiveCategory
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|targetTypeInfos
index|[
name|logicalColumnIndex
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|targetPrimitiveCategory
condition|)
block|{
case|case
name|DATE
case|:
name|convertTargetWritables
index|[
name|logicalColumnIndex
index|]
operator|=
operator|new
name|DateWritableV2
argument_list|()
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|convertTargetWritables
index|[
name|logicalColumnIndex
index|]
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
break|break;
default|default:
comment|// No additional data type specific setting.
break|break;
block|}
block|}
block|}
comment|/*    * Initialize using an StructObjectInspector and a column projection list.    */
specifier|public
name|void
name|init
parameter_list|(
name|StructObjectInspector
name|structObjectInspector
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|projectedColumns
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|structObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|fields
operator|.
name|size
argument_list|()
decl_stmt|;
name|allocateArrays
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|projectionColumnNum
init|=
name|projectedColumns
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|StructField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|ObjectInspector
name|fieldInspector
init|=
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
specifier|final
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|fieldInspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
decl_stmt|;
name|initTargetEntry
argument_list|(
name|i
argument_list|,
name|projectionColumnNum
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Initialize using an StructObjectInspector.    * No projection -- the column range 0 .. fields.size()-1    */
specifier|public
name|void
name|init
parameter_list|(
name|StructObjectInspector
name|structObjectInspector
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|structObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|fields
operator|.
name|size
argument_list|()
decl_stmt|;
name|allocateArrays
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StructField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|ObjectInspector
name|fieldInspector
init|=
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
specifier|final
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|fieldInspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
decl_stmt|;
name|initTargetEntry
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Initialize using target data type names.    * No projection -- the column range 0 .. types.size()-1    */
specifier|public
name|void
name|init
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|typeNames
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|int
name|count
init|=
name|typeNames
operator|.
name|size
argument_list|()
decl_stmt|;
name|allocateArrays
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|initTargetEntry
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Initialize using one target data type info.    */
specifier|public
name|void
name|init
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|int
name|outputColumnNum
parameter_list|)
throws|throws
name|HiveException
block|{
name|allocateArrays
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|initTargetEntry
argument_list|(
literal|0
argument_list|,
name|outputColumnNum
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialize for conversion from a provided (source) data types to the target data types    * desired in the VectorizedRowBatch.    *    * No projection -- the column range 0 .. count-1    *    *    where count is the minimum of the target data type array size, included array size,    *       and source data type array size.    *    * @param sourceTypeInfos    * @param targetTypeInfos    * @param columnsToIncludeTruncated    *                Flag array indicating which columns are to be included.    *                "Truncated" because all false entries on the end of the array have been    *                eliminated.    * @return the minimum count described above is returned.  That is, the number of columns    *         that will be processed by assign.    */
specifier|public
name|int
name|initConversion
parameter_list|(
name|TypeInfo
index|[]
name|sourceTypeInfos
parameter_list|,
name|TypeInfo
index|[]
name|targetTypeInfos
parameter_list|,
name|boolean
index|[]
name|columnsToIncludeTruncated
parameter_list|)
block|{
specifier|final
name|int
name|targetColumnCount
decl_stmt|;
if|if
condition|(
name|columnsToIncludeTruncated
operator|==
literal|null
condition|)
block|{
name|targetColumnCount
operator|=
name|targetTypeInfos
operator|.
name|length
expr_stmt|;
block|}
else|else
block|{
name|targetColumnCount
operator|=
name|Math
operator|.
name|min
argument_list|(
name|targetTypeInfos
operator|.
name|length
argument_list|,
name|columnsToIncludeTruncated
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|sourceColumnCount
init|=
name|Math
operator|.
name|min
argument_list|(
name|sourceTypeInfos
operator|.
name|length
argument_list|,
name|targetColumnCount
argument_list|)
decl_stmt|;
name|allocateArrays
argument_list|(
name|sourceColumnCount
argument_list|)
expr_stmt|;
name|allocateConvertArrays
argument_list|(
name|sourceColumnCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceColumnCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|columnsToIncludeTruncated
operator|!=
literal|null
operator|&&
operator|!
name|columnsToIncludeTruncated
index|[
name|i
index|]
condition|)
block|{
comment|// Field not included in query.
block|}
else|else
block|{
specifier|final
name|TypeInfo
name|targetTypeInfo
init|=
name|targetTypeInfos
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|TypeInfo
name|sourceTypeInfo
init|=
name|sourceTypeInfos
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|sourceTypeInfo
operator|.
name|equals
argument_list|(
name|targetTypeInfo
argument_list|)
condition|)
block|{
if|if
condition|(
name|VectorPartitionConversion
operator|.
name|isImplicitVectorColumnConversion
argument_list|(
name|sourceTypeInfo
argument_list|,
name|targetTypeInfo
argument_list|)
condition|)
block|{
comment|// Do implicit conversion accepting the source type and putting it in the same
comment|// target type ColumnVector type.
name|initTargetEntry
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|sourceTypeInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Do formal conversion...
name|initTargetEntry
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|targetTypeInfo
argument_list|)
expr_stmt|;
name|initConvertSourceEntry
argument_list|(
name|i
argument_list|,
name|sourceTypeInfo
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// No conversion.
name|initTargetEntry
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|targetTypeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|sourceColumnCount
return|;
block|}
comment|/**    * Assign a row's column object to the ColumnVector at batchIndex in the VectorizedRowBatch.    *    * @param batch    * @param batchIndex    * @param logicalColumnIndex    * @param object    The row column object whose type is the target data type.    */
specifier|public
name|void
name|assignRowColumn
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|int
name|logicalColumnIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
specifier|final
name|int
name|projectionColumnNum
init|=
name|projectionColumnNums
index|[
name|logicalColumnIndex
index|]
decl_stmt|;
specifier|final
name|TypeInfo
name|targetTypeInfo
init|=
name|targetTypeInfos
index|[
name|logicalColumnIndex
index|]
decl_stmt|;
if|if
condition|(
name|targetTypeInfo
operator|==
literal|null
operator|||
name|targetTypeInfo
operator|.
name|getCategory
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|/*        * This is a column that we don't want (i.e. not included) -- we are done.        */
return|return;
block|}
name|assignRowColumn
argument_list|(
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
argument_list|,
name|batchIndex
argument_list|,
name|targetTypeInfo
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assignRowColumn
parameter_list|(
name|ColumnVector
name|columnVector
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|TypeInfo
name|targetTypeInfo
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|columnVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|targetTypeInfo
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
specifier|final
name|PrimitiveCategory
name|targetPrimitiveCategory
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|targetTypeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|targetPrimitiveCategory
condition|)
block|{
case|case
name|VOID
case|:
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|columnVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
case|case
name|BOOLEAN
case|:
if|if
condition|(
name|object
operator|instanceof
name|Boolean
condition|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
operator|(
operator|(
name|Boolean
operator|)
name|object
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
operator|(
operator|(
name|BooleanWritable
operator|)
name|object
operator|)
operator|.
name|get
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
block|}
break|break;
case|case
name|BYTE
case|:
if|if
condition|(
name|object
operator|instanceof
name|Byte
condition|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
operator|(
name|Byte
operator|)
name|object
operator|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
operator|(
name|ByteWritable
operator|)
name|object
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|SHORT
case|:
if|if
condition|(
name|object
operator|instanceof
name|Short
condition|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
operator|(
name|Short
operator|)
name|object
operator|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
operator|(
name|ShortWritable
operator|)
name|object
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|INT
case|:
if|if
condition|(
name|object
operator|instanceof
name|Integer
condition|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
operator|(
name|Integer
operator|)
name|object
operator|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
operator|(
name|IntWritable
operator|)
name|object
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|LONG
case|:
if|if
condition|(
name|object
operator|instanceof
name|Long
condition|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
operator|(
name|Long
operator|)
name|object
operator|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
operator|(
name|LongWritable
operator|)
name|object
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|object
operator|instanceof
name|Timestamp
condition|)
block|{
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
operator|(
operator|(
name|Timestamp
operator|)
name|object
operator|)
operator|.
name|toSqlTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
operator|(
operator|(
name|TimestampWritableV2
operator|)
name|object
operator|)
operator|.
name|getTimestamp
argument_list|()
operator|.
name|toSqlTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DATE
case|:
if|if
condition|(
name|object
operator|instanceof
name|Date
condition|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|DateWritableV2
operator|.
name|dateToDays
argument_list|(
operator|(
name|Date
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
operator|(
name|DateWritableV2
operator|)
name|object
operator|)
operator|.
name|getDays
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|FLOAT
case|:
if|if
condition|(
name|object
operator|instanceof
name|Float
condition|)
block|{
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
operator|(
name|Float
operator|)
name|object
operator|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
operator|(
name|FloatWritable
operator|)
name|object
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|DOUBLE
case|:
if|if
condition|(
name|object
operator|instanceof
name|Double
condition|)
block|{
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
operator|(
name|Double
operator|)
name|object
operator|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
operator|(
name|DoubleWritable
operator|)
name|object
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|BINARY
case|:
block|{
if|if
condition|(
name|object
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|(
name|byte
index|[]
operator|)
name|object
decl_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BytesWritable
name|bw
init|=
operator|(
name|BytesWritable
operator|)
name|object
decl_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|bw
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bw
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|STRING
case|:
block|{
if|if
condition|(
name|object
operator|instanceof
name|String
condition|)
block|{
name|String
name|string
init|=
operator|(
name|String
operator|)
name|object
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|string
operator|.
name|getBytes
argument_list|()
decl_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Text
name|tw
init|=
operator|(
name|Text
operator|)
name|object
decl_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|tw
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|tw
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|VARCHAR
case|:
block|{
comment|// UNDONE: Performance problem with conversion to String, then bytes...
comment|// We store VARCHAR type stripped of pads.
name|HiveVarchar
name|hiveVarchar
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|HiveVarchar
condition|)
block|{
name|hiveVarchar
operator|=
operator|(
name|HiveVarchar
operator|)
name|object
expr_stmt|;
block|}
else|else
block|{
name|hiveVarchar
operator|=
operator|(
operator|(
name|HiveVarcharWritable
operator|)
name|object
operator|)
operator|.
name|getHiveVarchar
argument_list|()
expr_stmt|;
block|}
comment|// TODO: HIVE-13624 Do we need maxLength checking?
name|byte
index|[]
name|bytes
init|=
name|hiveVarchar
operator|.
name|getValue
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CHAR
case|:
block|{
comment|// UNDONE: Performance problem with conversion to String, then bytes...
comment|// We store CHAR type stripped of pads.
name|HiveChar
name|hiveChar
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|HiveChar
condition|)
block|{
name|hiveChar
operator|=
operator|(
name|HiveChar
operator|)
name|object
expr_stmt|;
block|}
else|else
block|{
name|hiveChar
operator|=
operator|(
operator|(
name|HiveCharWritable
operator|)
name|object
operator|)
operator|.
name|getHiveChar
argument_list|()
expr_stmt|;
block|}
comment|// TODO: HIVE-13624 Do we need maxLength checking?
comment|// We store CHAR in vector row batch with padding stripped.
name|byte
index|[]
name|bytes
init|=
name|hiveChar
operator|.
name|getStrippedValue
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DECIMAL
case|:
if|if
condition|(
name|columnVector
operator|instanceof
name|DecimalColumnVector
condition|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|HiveDecimal
condition|)
block|{
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
operator|(
name|HiveDecimal
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
operator|(
name|HiveDecimalWritable
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|object
operator|instanceof
name|HiveDecimal
condition|)
block|{
operator|(
operator|(
name|Decimal64ColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
operator|(
name|HiveDecimal
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|Decimal64ColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
operator|(
name|HiveDecimalWritable
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
if|if
condition|(
name|object
operator|instanceof
name|HiveIntervalYearMonth
condition|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
operator|(
name|HiveIntervalYearMonth
operator|)
name|object
operator|)
operator|.
name|getTotalMonths
argument_list|()
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
operator|(
name|HiveIntervalYearMonthWritable
operator|)
name|object
operator|)
operator|.
name|getHiveIntervalYearMonth
argument_list|()
operator|.
name|getTotalMonths
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
if|if
condition|(
name|object
operator|instanceof
name|HiveIntervalDayTime
condition|)
block|{
operator|(
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
operator|(
name|HiveIntervalDayTime
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
operator|(
operator|(
name|HiveIntervalDayTimeWritable
operator|)
name|object
operator|)
operator|.
name|getHiveIntervalDayTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Primitive category "
operator|+
name|targetPrimitiveCategory
operator|.
name|name
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|LIST
case|:
block|{
specifier|final
name|ListColumnVector
name|listColumnVector
init|=
operator|(
name|ListColumnVector
operator|)
name|columnVector
decl_stmt|;
specifier|final
name|ListTypeInfo
name|listTypeInfo
init|=
operator|(
name|ListTypeInfo
operator|)
name|targetTypeInfo
decl_stmt|;
specifier|final
name|TypeInfo
name|elementTypeInfo
init|=
name|listTypeInfo
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
specifier|final
name|List
name|list
init|=
operator|(
name|List
operator|)
name|object
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|int
name|childCount
init|=
name|listColumnVector
operator|.
name|childCount
decl_stmt|;
name|listColumnVector
operator|.
name|offsets
index|[
name|batchIndex
index|]
operator|=
name|childCount
expr_stmt|;
name|listColumnVector
operator|.
name|lengths
index|[
name|batchIndex
index|]
operator|=
name|size
expr_stmt|;
name|listColumnVector
operator|.
name|childCount
operator|=
name|childCount
operator|+
name|size
expr_stmt|;
name|listColumnVector
operator|.
name|child
operator|.
name|ensureSize
argument_list|(
name|childCount
operator|+
name|size
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|assignRowColumn
argument_list|(
name|listColumnVector
operator|.
name|child
argument_list|,
name|childCount
operator|+
name|i
argument_list|,
name|elementTypeInfo
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|MAP
case|:
block|{
specifier|final
name|MapColumnVector
name|mapColumnVector
init|=
operator|(
name|MapColumnVector
operator|)
name|columnVector
decl_stmt|;
specifier|final
name|MapTypeInfo
name|mapTypeInfo
init|=
operator|(
name|MapTypeInfo
operator|)
name|targetTypeInfo
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|childCount
init|=
name|mapColumnVector
operator|.
name|childCount
decl_stmt|;
name|mapColumnVector
operator|.
name|offsets
index|[
name|batchIndex
index|]
operator|=
name|childCount
expr_stmt|;
name|mapColumnVector
operator|.
name|lengths
index|[
name|batchIndex
index|]
operator|=
name|size
expr_stmt|;
name|mapColumnVector
operator|.
name|keys
operator|.
name|ensureSize
argument_list|(
name|childCount
operator|+
name|size
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mapColumnVector
operator|.
name|values
operator|.
name|ensureSize
argument_list|(
name|childCount
operator|+
name|size
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assignRowColumn
argument_list|(
name|mapColumnVector
operator|.
name|keys
argument_list|,
name|childCount
argument_list|,
name|mapTypeInfo
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assignRowColumn
argument_list|(
name|mapColumnVector
operator|.
name|values
argument_list|,
name|childCount
argument_list|,
name|mapTypeInfo
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|childCount
operator|++
expr_stmt|;
block|}
name|mapColumnVector
operator|.
name|childCount
operator|=
name|childCount
expr_stmt|;
block|}
break|break;
case|case
name|STRUCT
case|:
block|{
specifier|final
name|StructColumnVector
name|structColumnVector
init|=
operator|(
name|StructColumnVector
operator|)
name|columnVector
decl_stmt|;
specifier|final
name|StructTypeInfo
name|targetStructTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|targetTypeInfo
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|targetFieldTypeInfos
init|=
name|targetStructTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|targetFieldTypeInfos
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|List
condition|)
block|{
specifier|final
name|List
name|struct
init|=
operator|(
name|List
operator|)
name|object
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|assignRowColumn
argument_list|(
name|structColumnVector
operator|.
name|fields
index|[
name|i
index|]
argument_list|,
name|batchIndex
argument_list|,
name|targetFieldTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|struct
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|Object
index|[]
name|array
init|=
operator|(
name|Object
index|[]
operator|)
name|object
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|assignRowColumn
argument_list|(
name|structColumnVector
operator|.
name|fields
index|[
name|i
index|]
argument_list|,
name|batchIndex
argument_list|,
name|targetFieldTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|UNION
case|:
block|{
specifier|final
name|StandardUnion
name|union
init|=
operator|(
name|StandardUnion
operator|)
name|object
decl_stmt|;
specifier|final
name|UnionColumnVector
name|unionColumnVector
init|=
operator|(
name|UnionColumnVector
operator|)
name|columnVector
decl_stmt|;
specifier|final
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|(
name|UnionTypeInfo
operator|)
name|targetTypeInfo
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|objectTypeInfos
init|=
name|unionTypeInfo
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|byte
name|tag
init|=
name|union
operator|.
name|getTag
argument_list|()
decl_stmt|;
name|unionColumnVector
operator|.
name|tags
index|[
name|batchIndex
index|]
operator|=
name|tag
expr_stmt|;
name|assignRowColumn
argument_list|(
name|unionColumnVector
operator|.
name|fields
index|[
name|tag
index|]
argument_list|,
name|batchIndex
argument_list|,
name|objectTypeInfos
operator|.
name|get
argument_list|(
name|tag
argument_list|)
argument_list|,
name|union
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Category "
operator|+
name|targetTypeInfo
operator|.
name|getCategory
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
comment|/*      * We always set the null flag to false when there is a value.      */
name|columnVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Convert row's column object and then assign it the ColumnVector at batchIndex    * in the VectorizedRowBatch.    *    * Public so VectorDeserializeRow can use this method to convert a row's column object.    *    * @param batch    * @param batchIndex    * @param logicalColumnIndex    * @param object    The row column object whose type is the VectorAssignRow.initConversion    *                  source data type.    *    */
specifier|public
name|void
name|assignConvertRowColumn
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|int
name|logicalColumnIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|isConvert
index|[
name|logicalColumnIndex
index|]
argument_list|)
expr_stmt|;
specifier|final
name|int
name|projectionColumnNum
init|=
name|projectionColumnNums
index|[
name|logicalColumnIndex
index|]
decl_stmt|;
name|assignConvertRowColumn
argument_list|(
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
argument_list|,
name|batchIndex
argument_list|,
name|targetTypeInfos
index|[
name|logicalColumnIndex
index|]
argument_list|,
name|convertSourceOI
index|[
name|logicalColumnIndex
index|]
argument_list|,
name|convertTargetWritables
index|[
name|logicalColumnIndex
index|]
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assignConvertRowColumn
parameter_list|(
name|ColumnVector
name|columnVector
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|TypeInfo
name|targetTypeInfo
parameter_list|,
name|ObjectInspector
name|sourceObjectInspector
parameter_list|,
name|Writable
name|convertTargetWritable
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
specifier|final
name|Category
name|targetCategory
init|=
name|targetTypeInfo
operator|.
name|getCategory
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetCategory
operator|==
literal|null
condition|)
block|{
comment|/*        * This is a column that we don't want (i.e. not included) -- we are done.        */
return|return;
block|}
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|columnVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
switch|switch
condition|(
name|targetCategory
condition|)
block|{
case|case
name|PRIMITIVE
case|:
specifier|final
name|PrimitiveObjectInspector
name|sourcePrimitiveOI
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|sourceObjectInspector
decl_stmt|;
specifier|final
name|PrimitiveCategory
name|targetPrimitiveCategory
init|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|targetTypeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|targetPrimitiveCategory
condition|)
block|{
case|case
name|VOID
case|:
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|columnVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
case|case
name|BOOLEAN
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getBoolean
argument_list|(
name|object
argument_list|,
name|sourcePrimitiveOI
argument_list|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getByte
argument_list|(
name|object
argument_list|,
name|sourcePrimitiveOI
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getShort
argument_list|(
name|object
argument_list|,
name|sourcePrimitiveOI
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getInt
argument_list|(
name|object
argument_list|,
name|sourcePrimitiveOI
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getLong
argument_list|(
name|object
argument_list|,
name|sourcePrimitiveOI
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
block|{
specifier|final
name|Timestamp
name|timestamp
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTimestamp
argument_list|(
name|object
argument_list|,
name|sourcePrimitiveOI
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|columnVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
block|}
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
name|timestamp
operator|.
name|toSqlTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DATE
case|:
block|{
specifier|final
name|Date
name|date
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getDate
argument_list|(
name|object
argument_list|,
name|sourcePrimitiveOI
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|columnVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
block|}
name|DateWritableV2
name|dateWritable
init|=
operator|(
name|DateWritableV2
operator|)
name|convertTargetWritable
decl_stmt|;
if|if
condition|(
name|dateWritable
operator|==
literal|null
condition|)
block|{
name|dateWritable
operator|=
operator|new
name|DateWritableV2
argument_list|()
expr_stmt|;
block|}
name|dateWritable
operator|.
name|set
argument_list|(
name|date
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|dateWritable
operator|.
name|getDays
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|FLOAT
case|:
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getFloat
argument_list|(
name|object
argument_list|,
name|sourcePrimitiveOI
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getDouble
argument_list|(
name|object
argument_list|,
name|sourcePrimitiveOI
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
block|{
specifier|final
name|BytesWritable
name|bytesWritable
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getBinary
argument_list|(
name|object
argument_list|,
name|sourcePrimitiveOI
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesWritable
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|columnVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
block|}
operator|(
operator|(
name|BytesColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|bytesWritable
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytesWritable
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STRING
case|:
block|{
specifier|final
name|String
name|string
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getString
argument_list|(
name|object
argument_list|,
name|sourcePrimitiveOI
argument_list|)
decl_stmt|;
if|if
condition|(
name|string
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|columnVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
block|}
name|Text
name|text
init|=
operator|(
name|Text
operator|)
name|convertTargetWritable
decl_stmt|;
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
name|text
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
name|text
operator|.
name|set
argument_list|(
name|string
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|text
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VARCHAR
case|:
block|{
comment|// UNDONE: Performance problem with conversion to String, then bytes...
specifier|final
name|HiveVarchar
name|hiveVarchar
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getHiveVarchar
argument_list|(
name|object
argument_list|,
name|sourcePrimitiveOI
argument_list|)
decl_stmt|;
if|if
condition|(
name|hiveVarchar
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|columnVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// TODO: Do we need maxLength checking?
name|byte
index|[]
name|bytes
init|=
name|hiveVarchar
operator|.
name|getValue
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CHAR
case|:
block|{
comment|// UNDONE: Performance problem with conversion to String, then bytes...
specifier|final
name|HiveChar
name|hiveChar
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getHiveChar
argument_list|(
name|object
argument_list|,
name|sourcePrimitiveOI
argument_list|)
decl_stmt|;
if|if
condition|(
name|hiveChar
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|columnVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// We store CHAR in vector row batch with padding stripped.
comment|// TODO: Do we need maxLength checking?
specifier|final
name|byte
index|[]
name|bytes
init|=
name|hiveChar
operator|.
name|getStrippedValue
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DECIMAL
case|:
block|{
specifier|final
name|HiveDecimal
name|hiveDecimal
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getHiveDecimal
argument_list|(
name|object
argument_list|,
name|sourcePrimitiveOI
argument_list|)
decl_stmt|;
if|if
condition|(
name|hiveDecimal
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|columnVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|columnVector
operator|instanceof
name|Decimal64ColumnVector
condition|)
block|{
name|Decimal64ColumnVector
name|dec64ColVector
init|=
operator|(
name|Decimal64ColumnVector
operator|)
name|columnVector
decl_stmt|;
name|dec64ColVector
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
name|hiveDecimal
argument_list|)
expr_stmt|;
if|if
condition|(
name|dec64ColVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
condition|)
block|{
return|return;
block|}
block|}
else|else
block|{
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
name|hiveDecimal
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
block|{
specifier|final
name|HiveIntervalYearMonth
name|intervalYearMonth
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getHiveIntervalYearMonth
argument_list|(
name|object
argument_list|,
name|sourcePrimitiveOI
argument_list|)
decl_stmt|;
if|if
condition|(
name|intervalYearMonth
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|columnVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
block|}
operator|(
operator|(
name|LongColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|intervalYearMonth
operator|.
name|getTotalMonths
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
block|{
specifier|final
name|HiveIntervalDayTime
name|intervalDayTime
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getHiveIntervalDayTime
argument_list|(
name|object
argument_list|,
name|sourcePrimitiveOI
argument_list|)
decl_stmt|;
if|if
condition|(
name|intervalDayTime
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|columnVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
block|}
operator|(
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|columnVector
operator|)
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
name|intervalDayTime
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Primitive category "
operator|+
name|targetPrimitiveCategory
operator|.
name|name
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
break|break;
case|case
name|LIST
case|:
block|{
specifier|final
name|ListColumnVector
name|listColumnVector
init|=
operator|(
name|ListColumnVector
operator|)
name|columnVector
decl_stmt|;
specifier|final
name|ListObjectInspector
name|sourceListOI
init|=
operator|(
name|ListObjectInspector
operator|)
name|sourceObjectInspector
decl_stmt|;
specifier|final
name|ObjectInspector
name|sourceElementOI
init|=
name|sourceListOI
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|sourceListOI
operator|.
name|getListLength
argument_list|(
name|object
argument_list|)
decl_stmt|;
specifier|final
name|TypeInfo
name|targetElementTypeInfo
init|=
operator|(
operator|(
name|ListTypeInfo
operator|)
name|targetTypeInfo
operator|)
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
name|listColumnVector
operator|.
name|offsets
index|[
name|batchIndex
index|]
operator|=
name|listColumnVector
operator|.
name|childCount
expr_stmt|;
name|listColumnVector
operator|.
name|childCount
operator|+=
name|size
expr_stmt|;
name|listColumnVector
operator|.
name|ensureSize
argument_list|(
name|listColumnVector
operator|.
name|childCount
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|listColumnVector
operator|.
name|lengths
index|[
name|batchIndex
index|]
operator|=
name|size
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Object
name|element
init|=
name|sourceListOI
operator|.
name|getListElement
argument_list|(
name|object
argument_list|,
name|i
argument_list|)
decl_stmt|;
specifier|final
name|int
name|offset
init|=
call|(
name|int
call|)
argument_list|(
name|listColumnVector
operator|.
name|offsets
index|[
name|batchIndex
index|]
operator|+
name|i
argument_list|)
decl_stmt|;
name|assignConvertRowColumn
argument_list|(
name|listColumnVector
operator|.
name|child
argument_list|,
name|offset
argument_list|,
name|targetElementTypeInfo
argument_list|,
name|sourceElementOI
argument_list|,
literal|null
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|MAP
case|:
block|{
specifier|final
name|MapColumnVector
name|mapColumnVector
init|=
operator|(
name|MapColumnVector
operator|)
name|columnVector
decl_stmt|;
specifier|final
name|MapObjectInspector
name|mapObjectInspector
init|=
operator|(
name|MapObjectInspector
operator|)
name|sourceObjectInspector
decl_stmt|;
specifier|final
name|MapTypeInfo
name|mapTypeInfo
init|=
operator|(
name|MapTypeInfo
operator|)
name|targetTypeInfo
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|mapObjectInspector
operator|.
name|getMap
argument_list|(
name|object
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assignConvertRowColumn
argument_list|(
name|mapColumnVector
operator|.
name|keys
argument_list|,
name|batchIndex
argument_list|,
name|mapTypeInfo
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|,
name|mapObjectInspector
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|,
literal|null
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assignConvertRowColumn
argument_list|(
name|mapColumnVector
operator|.
name|values
argument_list|,
name|batchIndex
argument_list|,
name|mapTypeInfo
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|,
name|mapObjectInspector
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|,
literal|null
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|STRUCT
case|:
block|{
specifier|final
name|StructColumnVector
name|structColumnVector
init|=
operator|(
name|StructColumnVector
operator|)
name|columnVector
decl_stmt|;
specifier|final
name|StructObjectInspector
name|sourceStructOI
init|=
operator|(
name|StructObjectInspector
operator|)
name|sourceObjectInspector
decl_stmt|;
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|sourceFields
init|=
name|sourceStructOI
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
specifier|final
name|StructTypeInfo
name|targetStructTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|targetTypeInfo
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|targetTypeInfos
init|=
name|targetStructTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|targetTypeInfos
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|sourceFields
operator|.
name|size
argument_list|()
condition|)
block|{
specifier|final
name|StructField
name|sourceStructField
init|=
name|sourceFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|ObjectInspector
name|sourceFieldOI
init|=
name|sourceStructField
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|sourceData
init|=
name|sourceStructOI
operator|.
name|getStructFieldData
argument_list|(
name|object
argument_list|,
name|sourceStructField
argument_list|)
decl_stmt|;
name|assignConvertRowColumn
argument_list|(
name|structColumnVector
operator|.
name|fields
index|[
name|i
index|]
argument_list|,
name|batchIndex
argument_list|,
name|targetTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|sourceFieldOI
argument_list|,
literal|null
argument_list|,
name|sourceData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|ColumnVector
name|fieldColumnVector
init|=
name|structColumnVector
operator|.
name|fields
index|[
name|i
index|]
decl_stmt|;
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|fieldColumnVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|UNION
case|:
block|{
specifier|final
name|UnionColumnVector
name|unionColumnVector
init|=
operator|(
name|UnionColumnVector
operator|)
name|columnVector
decl_stmt|;
specifier|final
name|UnionObjectInspector
name|unionObjectInspector
init|=
operator|(
name|UnionObjectInspector
operator|)
name|sourceObjectInspector
decl_stmt|;
specifier|final
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|(
name|UnionTypeInfo
operator|)
name|targetTypeInfo
decl_stmt|;
specifier|final
name|int
name|tag
init|=
name|unionObjectInspector
operator|.
name|getTag
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|assignConvertRowColumn
argument_list|(
name|unionColumnVector
operator|.
name|fields
index|[
name|tag
index|]
argument_list|,
name|batchIndex
argument_list|,
name|unionTypeInfo
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
operator|.
name|get
argument_list|(
name|tag
argument_list|)
argument_list|,
name|unionObjectInspector
operator|.
name|getObjectInspectors
argument_list|()
operator|.
name|get
argument_list|(
name|tag
argument_list|)
argument_list|,
literal|null
argument_list|,
name|unionObjectInspector
operator|.
name|getField
argument_list|(
name|tag
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Category "
operator|+
name|targetCategory
operator|.
name|name
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// Some of the conversion methods throw this exception on numeric parsing errors.
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|columnVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// We always set the null flag to false when there is a value.
name|columnVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
comment|/*    * Assign a row from an array of objects.    */
specifier|public
name|void
name|assignRow
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|Object
index|[]
name|objects
parameter_list|)
block|{
specifier|final
name|int
name|count
init|=
name|isConvert
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isConvert
index|[
name|i
index|]
condition|)
block|{
name|assignConvertRowColumn
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|i
argument_list|,
name|objects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assignRowColumn
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|i
argument_list|,
name|objects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Assign a row from a list of standard objects up to a count    */
specifier|public
name|void
name|assignRow
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|standardObjects
parameter_list|,
name|int
name|columnCount
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isConvert
index|[
name|i
index|]
condition|)
block|{
name|assignConvertRowColumn
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|i
argument_list|,
name|standardObjects
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assignRowColumn
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|i
argument_list|,
name|standardObjects
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

