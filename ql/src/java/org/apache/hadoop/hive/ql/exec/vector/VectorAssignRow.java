begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalDayTimeWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalYearMonthWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_comment
comment|/**  * This class assigns specified columns of a row from a Writable row Object[].  *  * The caller provides the hive type names and target column numbers in the order desired to  * assign from the Writable row Object[].  *  * This class is abstract to allow the subclasses to control batch reuse.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|VectorAssignRow
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VectorAssignRow
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|abstract
class|class
name|Assigner
block|{
specifier|protected
name|int
name|columnIndex
decl_stmt|;
name|Assigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|this
operator|.
name|columnIndex
operator|=
name|columnIndex
expr_stmt|;
block|}
specifier|public
name|int
name|getColumnIndex
parameter_list|()
block|{
return|return
name|columnIndex
return|;
block|}
specifier|abstract
name|void
name|setColumnVector
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
function_decl|;
specifier|abstract
name|void
name|forgetColumnVector
parameter_list|()
function_decl|;
specifier|abstract
name|void
name|assign
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
name|object
parameter_list|)
function_decl|;
block|}
specifier|private
class|class
name|VoidAssigner
extends|extends
name|Assigner
block|{
name|VoidAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setColumnVector
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{     }
annotation|@
name|Override
name|void
name|forgetColumnVector
parameter_list|()
block|{     }
annotation|@
name|Override
name|void
name|assign
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
comment|// This is no-op, there is no column to assign to and the object is expected to be null.
assert|assert
operator|(
name|object
operator|==
literal|null
operator|)
assert|;
block|}
block|}
specifier|private
specifier|abstract
class|class
name|AbstractLongAssigner
extends|extends
name|Assigner
block|{
specifier|protected
name|LongColumnVector
name|colVector
decl_stmt|;
specifier|protected
name|long
index|[]
name|vector
decl_stmt|;
name|AbstractLongAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setColumnVector
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
name|colVector
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
expr_stmt|;
name|vector
operator|=
name|colVector
operator|.
name|vector
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|forgetColumnVector
parameter_list|()
block|{
name|colVector
operator|=
literal|null
expr_stmt|;
name|vector
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
class|class
name|BooleanAssigner
extends|extends
name|AbstractLongAssigner
block|{
name|BooleanAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|assign
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BooleanWritable
name|bw
init|=
operator|(
name|BooleanWritable
operator|)
name|object
decl_stmt|;
name|vector
index|[
name|batchIndex
index|]
operator|=
operator|(
name|bw
operator|.
name|get
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|protected
class|class
name|ByteAssigner
extends|extends
name|AbstractLongAssigner
block|{
name|ByteAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|assign
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteWritable
name|bw
init|=
operator|(
name|ByteWritable
operator|)
name|object
decl_stmt|;
name|vector
index|[
name|batchIndex
index|]
operator|=
name|bw
operator|.
name|get
argument_list|()
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|ShortAssigner
extends|extends
name|AbstractLongAssigner
block|{
name|ShortAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|assign
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ShortWritable
name|sw
init|=
operator|(
name|ShortWritable
operator|)
name|object
decl_stmt|;
name|vector
index|[
name|batchIndex
index|]
operator|=
name|sw
operator|.
name|get
argument_list|()
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|IntAssigner
extends|extends
name|AbstractLongAssigner
block|{
name|IntAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|assign
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IntWritable
name|iw
init|=
operator|(
name|IntWritable
operator|)
name|object
decl_stmt|;
name|vector
index|[
name|batchIndex
index|]
operator|=
name|iw
operator|.
name|get
argument_list|()
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|LongAssigner
extends|extends
name|AbstractLongAssigner
block|{
name|LongAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|assign
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LongWritable
name|lw
init|=
operator|(
name|LongWritable
operator|)
name|object
decl_stmt|;
name|vector
index|[
name|batchIndex
index|]
operator|=
name|lw
operator|.
name|get
argument_list|()
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|DateAssigner
extends|extends
name|AbstractLongAssigner
block|{
name|DateAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|assign
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DateWritable
name|bw
init|=
operator|(
name|DateWritable
operator|)
name|object
decl_stmt|;
name|vector
index|[
name|batchIndex
index|]
operator|=
name|bw
operator|.
name|getDays
argument_list|()
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|abstract
class|class
name|AbstractTimestampAssigner
extends|extends
name|Assigner
block|{
specifier|protected
name|TimestampColumnVector
name|colVector
decl_stmt|;
name|AbstractTimestampAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setColumnVector
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
name|colVector
operator|=
operator|(
name|TimestampColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|forgetColumnVector
parameter_list|()
block|{
name|colVector
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|TimestampAssigner
extends|extends
name|AbstractTimestampAssigner
block|{
name|TimestampAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|assign
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|colVector
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
operator|(
operator|(
name|TimestampWritable
operator|)
name|object
operator|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|IntervalYearMonthAssigner
extends|extends
name|AbstractLongAssigner
block|{
name|IntervalYearMonthAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|assign
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HiveIntervalYearMonthWritable
name|iymw
init|=
operator|(
name|HiveIntervalYearMonthWritable
operator|)
name|object
decl_stmt|;
name|HiveIntervalYearMonth
name|iym
init|=
name|iymw
operator|.
name|getHiveIntervalYearMonth
argument_list|()
decl_stmt|;
name|vector
index|[
name|batchIndex
index|]
operator|=
name|iym
operator|.
name|getTotalMonths
argument_list|()
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|IntervalDayTimeAssigner
extends|extends
name|AbstractTimestampAssigner
block|{
name|IntervalDayTimeAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|assign
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HiveIntervalDayTimeWritable
name|idtw
init|=
operator|(
name|HiveIntervalDayTimeWritable
operator|)
name|object
decl_stmt|;
name|HiveIntervalDayTime
name|idt
init|=
name|idtw
operator|.
name|getHiveIntervalDayTime
argument_list|()
decl_stmt|;
name|colVector
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
name|idt
operator|.
name|pisaTimestampUpdate
argument_list|(
name|colVector
operator|.
name|useScratchPisaTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|abstract
class|class
name|AbstractDoubleAssigner
extends|extends
name|Assigner
block|{
specifier|protected
name|DoubleColumnVector
name|colVector
decl_stmt|;
specifier|protected
name|double
index|[]
name|vector
decl_stmt|;
name|AbstractDoubleAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setColumnVector
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
name|colVector
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
expr_stmt|;
name|vector
operator|=
name|colVector
operator|.
name|vector
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|forgetColumnVector
parameter_list|()
block|{
name|colVector
operator|=
literal|null
expr_stmt|;
name|vector
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|FloatAssigner
extends|extends
name|AbstractDoubleAssigner
block|{
name|FloatAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|assign
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FloatWritable
name|fw
init|=
operator|(
name|FloatWritable
operator|)
name|object
decl_stmt|;
name|vector
index|[
name|batchIndex
index|]
operator|=
name|fw
operator|.
name|get
argument_list|()
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|DoubleAssigner
extends|extends
name|AbstractDoubleAssigner
block|{
name|DoubleAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|assign
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DoubleWritable
name|dw
init|=
operator|(
name|DoubleWritable
operator|)
name|object
decl_stmt|;
name|vector
index|[
name|batchIndex
index|]
operator|=
name|dw
operator|.
name|get
argument_list|()
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|abstract
class|class
name|AbstractBytesAssigner
extends|extends
name|Assigner
block|{
specifier|protected
name|BytesColumnVector
name|colVector
decl_stmt|;
name|AbstractBytesAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setColumnVector
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
name|colVector
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|forgetColumnVector
parameter_list|()
block|{
name|colVector
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|BinaryAssigner
extends|extends
name|AbstractBytesAssigner
block|{
name|BinaryAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|assign
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BytesWritable
name|bw
init|=
operator|(
name|BytesWritable
operator|)
name|object
decl_stmt|;
name|colVector
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|bw
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bw
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|StringAssigner
extends|extends
name|AbstractBytesAssigner
block|{
name|StringAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|assign
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Text
name|tw
init|=
operator|(
name|Text
operator|)
name|object
decl_stmt|;
name|colVector
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|tw
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|tw
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|VarCharAssigner
extends|extends
name|AbstractBytesAssigner
block|{
name|VarCharAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|assign
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We store VARCHAR type stripped of pads.
name|HiveVarchar
name|hiveVarchar
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|HiveVarchar
condition|)
block|{
name|hiveVarchar
operator|=
operator|(
name|HiveVarchar
operator|)
name|object
expr_stmt|;
block|}
else|else
block|{
name|hiveVarchar
operator|=
operator|(
operator|(
name|HiveVarcharWritable
operator|)
name|object
operator|)
operator|.
name|getHiveVarchar
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|bytes
init|=
name|hiveVarchar
operator|.
name|getValue
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|colVector
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|CharAssigner
extends|extends
name|AbstractBytesAssigner
block|{
name|CharAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|assign
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We store CHAR type stripped of pads.
name|HiveChar
name|hiveChar
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|HiveChar
condition|)
block|{
name|hiveChar
operator|=
operator|(
name|HiveChar
operator|)
name|object
expr_stmt|;
block|}
else|else
block|{
name|hiveChar
operator|=
operator|(
operator|(
name|HiveCharWritable
operator|)
name|object
operator|)
operator|.
name|getHiveChar
argument_list|()
expr_stmt|;
block|}
comment|// We store CHAR in vector row batch with padding stripped.
name|byte
index|[]
name|bytes
init|=
name|hiveChar
operator|.
name|getStrippedValue
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|colVector
operator|.
name|setVal
argument_list|(
name|batchIndex
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|DecimalAssigner
extends|extends
name|Assigner
block|{
specifier|protected
name|DecimalColumnVector
name|colVector
decl_stmt|;
name|DecimalAssigner
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setColumnVector
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
name|colVector
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|forgetColumnVector
parameter_list|()
block|{
name|colVector
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|assign
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|VectorizedBatchUtil
operator|.
name|setNullColIsNullValue
argument_list|(
name|colVector
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|object
operator|instanceof
name|HiveDecimal
condition|)
block|{
name|colVector
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
operator|(
name|HiveDecimal
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|colVector
operator|.
name|set
argument_list|(
name|batchIndex
argument_list|,
operator|(
name|HiveDecimalWritable
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Assigner
name|createAssigner
parameter_list|(
name|PrimitiveTypeInfo
name|primitiveTypeInfo
parameter_list|,
name|int
name|columnIndex
parameter_list|)
throws|throws
name|HiveException
block|{
name|PrimitiveCategory
name|primitiveCategory
init|=
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
name|Assigner
name|assigner
decl_stmt|;
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
case|case
name|VOID
case|:
name|assigner
operator|=
operator|new
name|VoidAssigner
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
name|assigner
operator|=
operator|new
name|BooleanAssigner
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|assigner
operator|=
operator|new
name|ByteAssigner
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|assigner
operator|=
operator|new
name|ShortAssigner
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|assigner
operator|=
operator|new
name|IntAssigner
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|assigner
operator|=
operator|new
name|LongAssigner
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|assigner
operator|=
operator|new
name|TimestampAssigner
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|assigner
operator|=
operator|new
name|DateAssigner
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|assigner
operator|=
operator|new
name|FloatAssigner
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|assigner
operator|=
operator|new
name|DoubleAssigner
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
name|assigner
operator|=
operator|new
name|BinaryAssigner
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|assigner
operator|=
operator|new
name|StringAssigner
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|VARCHAR
case|:
name|assigner
operator|=
operator|new
name|VarCharAssigner
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
name|assigner
operator|=
operator|new
name|CharAssigner
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|assigner
operator|=
operator|new
name|DecimalAssigner
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
name|assigner
operator|=
operator|new
name|IntervalYearMonthAssigner
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
name|assigner
operator|=
operator|new
name|IntervalDayTimeAssigner
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"No vector row assigner for primitive category "
operator|+
name|primitiveCategory
argument_list|)
throw|;
block|}
return|return
name|assigner
return|;
block|}
name|Assigner
index|[]
name|assigners
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|(
name|StructObjectInspector
name|structObjectInspector
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|projectedColumns
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|structObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|assigners
operator|=
operator|new
name|Assigner
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StructField
name|field
range|:
name|fields
control|)
block|{
name|int
name|columnIndex
init|=
name|projectedColumns
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ObjectInspector
name|fieldInspector
init|=
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|fieldInspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
decl_stmt|;
name|assigners
index|[
name|i
index|]
operator|=
name|createAssigner
argument_list|(
name|primitiveTypeInfo
argument_list|,
name|columnIndex
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|typeNames
parameter_list|)
throws|throws
name|HiveException
block|{
name|assigners
operator|=
operator|new
name|Assigner
index|[
name|typeNames
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|typeName
range|:
name|typeNames
control|)
block|{
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|assigners
index|[
name|i
index|]
operator|=
name|createAssigner
argument_list|(
name|primitiveTypeInfo
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|assigners
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assigner
name|assigner
init|=
name|assigners
index|[
name|i
index|]
decl_stmt|;
name|int
name|columnIndex
init|=
name|assigner
operator|.
name|getColumnIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unexpected null vector column "
operator|+
name|columnIndex
argument_list|)
throw|;
block|}
name|assigner
operator|.
name|setColumnVector
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|forgetBatch
parameter_list|()
block|{
for|for
control|(
name|Assigner
name|assigner
range|:
name|assigners
control|)
block|{
name|assigner
operator|.
name|forgetColumnVector
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|assignRowColumn
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|int
name|logicalColumnIndex
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
name|assigners
index|[
name|logicalColumnIndex
index|]
operator|.
name|assign
argument_list|(
name|batchIndex
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assignRow
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
index|[]
name|objects
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Assigner
name|assigner
range|:
name|assigners
control|)
block|{
name|assigner
operator|.
name|assign
argument_list|(
name|batchIndex
argument_list|,
name|objects
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

