begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|makePartName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|makePartNameMatcher
import|;
end_import

begin_comment
comment|/**  * Always clone objects before adding or returning them so that callers don't modify them  * via references.  */
end_comment

begin_class
specifier|final
class|class
name|PartitionTree
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
argument_list|>
name|parts
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|tTable
decl_stmt|;
name|PartitionTree
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|t
parameter_list|)
block|{
name|this
operator|.
name|tTable
operator|=
name|t
expr_stmt|;
block|}
name|Partition
name|addPartition
parameter_list|(
name|Partition
name|partition
parameter_list|,
name|String
name|partName
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|)
throws|throws
name|AlreadyExistsException
block|{
name|partition
operator|.
name|setDbName
argument_list|(
name|partition
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|partition
operator|.
name|setTableName
argument_list|(
name|partition
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ifNotExists
operator|&&
name|parts
operator|.
name|containsKey
argument_list|(
name|partName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Partition "
operator|+
name|partName
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
return|return
name|parts
operator|.
name|putIfAbsent
argument_list|(
name|partName
argument_list|,
name|partition
argument_list|)
return|;
block|}
comment|/**    * @param partName - "p=1/q=2" full partition name {@link Warehouse#makePartName(List, List)}    * @return null if doesn't exist    */
name|Partition
name|getPartition
parameter_list|(
name|String
name|partName
parameter_list|)
block|{
return|return
name|parts
operator|.
name|get
argument_list|(
name|partName
argument_list|)
return|;
block|}
comment|/**    * Get a partition matching the partition values.    *    * @param partVals partition values for this partition, must be in the same order as the    *                 partition keys of the table.    * @return the partition object, or if not found null.    * @throws MetaException partition values are incorrect.    */
name|Partition
name|getPartition
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|MetaException
block|{
name|String
name|partName
init|=
name|makePartName
argument_list|(
name|tTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
return|return
name|getPartition
argument_list|(
name|partName
argument_list|)
return|;
block|}
comment|/**    * Add partitions to the partition tree.    *    * @param partitions  The partitions to add    * @param ifNotExists only add partitions if they don't exist    * @return the partitions that were added    * @throws MetaException partition metadata is incorrect    * @throws AlreadyExistsException if the partition with the same name already exists.    */
name|List
argument_list|<
name|Partition
argument_list|>
name|addPartitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|)
throws|throws
name|MetaException
throws|,
name|AlreadyExistsException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitionsAdded
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Partition
argument_list|>
name|partNameToPartition
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// validate that the new partition values is not already added to the table
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|String
name|partName
init|=
name|makePartName
argument_list|(
name|tTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partition
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ifNotExists
operator|&&
name|parts
operator|.
name|containsKey
argument_list|(
name|partName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Partition "
operator|+
name|partName
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|partNameToPartition
operator|.
name|put
argument_list|(
name|partName
argument_list|,
name|partition
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Partition
argument_list|>
name|entry
range|:
name|partNameToPartition
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|addPartition
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|ifNotExists
argument_list|)
operator|==
literal|null
condition|)
block|{
name|partitionsAdded
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|partitionsAdded
return|;
block|}
comment|/**    * Provided values for the 1st N partition columns, will return all matching PartitionS    * The list is a partial list of partition values in the same order as partition columns.    * Missing values should be represented as "" (empty strings).  May provide fewer values.    * So if part cols are a,b,c, {"",2} is a valid list    * {@link MetaStoreUtils#getPvals(List, Map)}    */
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByPartitionVals
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partialPartVals
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|partialPartVals
operator|==
literal|null
operator|||
name|partialPartVals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Partition partial vals cannot be null or empty"
argument_list|)
throw|;
block|}
name|String
name|partNameMatcher
init|=
name|makePartNameMatcher
argument_list|(
name|tTable
argument_list|,
name|partialPartVals
argument_list|,
literal|".*"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|matchedPartitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Partition
argument_list|>
name|entry
range|:
name|parts
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|matches
argument_list|(
name|partNameMatcher
argument_list|)
condition|)
block|{
name|matchedPartitions
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|matchedPartitions
return|;
block|}
comment|/**    * Get all the partitions.    *    * @return partitions list    */
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitions
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|parts
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Remove a partition from the table.    * @param partVals partition values, must be not null    * @return the instance of the dropped partition, if the remove was successful, otherwise false    * @throws MetaException partition with the provided partition values cannot be found.    */
name|Partition
name|dropPartition
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|String
name|partName
init|=
name|makePartName
argument_list|(
name|tTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parts
operator|.
name|containsKey
argument_list|(
name|partName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Partition with partition values "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|partVals
operator|.
name|toArray
argument_list|()
argument_list|)
operator|+
literal|" is not found."
argument_list|)
throw|;
block|}
return|return
name|parts
operator|.
name|remove
argument_list|(
name|partName
argument_list|)
return|;
block|}
comment|/**    * Alter an existing partition. The flow is following:    *<p>    *   1) search for existing partition    *   2) if found delete it    *   3) insert new partition    *</p>    * @param oldPartitionVals the values of existing partition, which is altered, must be not null.    * @param newPartition the new partition, must be not null.    * @param isRename true, if rename is requested, meaning that all properties of partition can be changed, except    *                 of its location.    * @throws MetaException table or db name is altered.    * @throws InvalidOperationException the new partition values are null, or the old partition cannot be found.    */
name|void
name|alterPartition
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|oldPartitionVals
parameter_list|,
name|Partition
name|newPartition
parameter_list|,
name|boolean
name|isRename
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
throws|,
name|NoSuchObjectException
block|{
if|if
condition|(
name|oldPartitionVals
operator|==
literal|null
operator|||
name|oldPartitionVals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Old partition values cannot be null or empty."
argument_list|)
throw|;
block|}
if|if
condition|(
name|newPartition
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"New partition cannot be null."
argument_list|)
throw|;
block|}
name|Partition
name|oldPartition
init|=
name|getPartition
argument_list|(
name|oldPartitionVals
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldPartition
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Partition with partition values "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|oldPartitionVals
operator|.
name|toArray
argument_list|()
argument_list|)
operator|+
literal|" is not found."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|oldPartition
operator|.
name|getDbName
argument_list|()
operator|.
name|equals
argument_list|(
name|newPartition
operator|.
name|getDbName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Db name cannot be altered."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|oldPartition
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|newPartition
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Table name cannot be altered."
argument_list|)
throw|;
block|}
if|if
condition|(
name|isRename
condition|)
block|{
name|newPartition
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|oldPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dropPartition
argument_list|(
name|oldPartitionVals
argument_list|)
expr_stmt|;
name|String
name|partName
init|=
name|makePartName
argument_list|(
name|tTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|newPartition
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|containsKey
argument_list|(
name|partName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Partition "
operator|+
name|partName
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|parts
operator|.
name|put
argument_list|(
name|partName
argument_list|,
name|newPartition
argument_list|)
expr_stmt|;
block|}
comment|/**    * Alter multiple partitions. This operation is transactional.    * @param newParts list of new partitions, must be not null.    * @throws MetaException table or db name is altered.    * @throws InvalidOperationException the new partition values are null, or the old partition cannot be found.    * @throws NoSuchObjectException the old partition cannot be found.    */
name|void
name|alterPartitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|newParts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
throws|,
name|NoSuchObjectException
block|{
comment|//altering partitions in a batch must be transactional, therefore bofore starting the altering, clone the original
comment|//partitions map. If something fails, revert it back.
name|Map
argument_list|<
name|String
argument_list|,
name|Partition
argument_list|>
name|clonedPartitions
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parts
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
name|clonedPartitions
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Partition
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|newParts
control|)
block|{
try|try
block|{
if|if
condition|(
name|partition
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"New partition cannot be null."
argument_list|)
throw|;
block|}
name|alterPartition
argument_list|(
name|partition
operator|.
name|getValues
argument_list|()
argument_list|,
name|partition
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
decl||
name|InvalidOperationException
decl||
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|parts
operator|=
name|clonedPartitions
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/**    * Rename an existing partition.    * @param oldPartitionVals the values of existing partition, which is renamed, must be not null.    * @param newPart the new partition, must be not null.    * @throws MetaException table or db name is altered.    * @throws InvalidOperationException the new partition values are null, or the old partition cannot be altered.    * @throws NoSuchObjectException the old partition cannot be found.    */
name|void
name|renamePartition
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|oldPartitionVals
parameter_list|,
name|Partition
name|newPart
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
throws|,
name|NoSuchObjectException
block|{
name|alterPartition
argument_list|(
name|oldPartitionVals
argument_list|,
name|newPart
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

