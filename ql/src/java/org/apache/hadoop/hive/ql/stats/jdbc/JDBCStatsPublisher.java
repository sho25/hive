begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsSetupConst
import|;
end_import

begin_class
specifier|public
class|class
name|JDBCStatsPublisher
implements|implements
name|StatsPublisher
block|{
specifier|private
name|Connection
name|conn
decl_stmt|;
specifier|private
name|String
name|connectionString
decl_stmt|;
specifier|private
name|Configuration
name|hiveconf
decl_stmt|;
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|PreparedStatement
name|selStmt
decl_stmt|,
name|updStmt
decl_stmt|,
name|insStmt
decl_stmt|;
specifier|private
name|int
name|timeout
init|=
literal|30
decl_stmt|;
comment|// default timeout in sec. for JDBC connection and statements
specifier|public
name|JDBCStatsPublisher
parameter_list|()
block|{
name|selStmt
operator|=
name|updStmt
operator|=
name|insStmt
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|boolean
name|connect
parameter_list|(
name|Configuration
name|hiveconf
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|hiveconf
operator|=
name|hiveconf
expr_stmt|;
name|connectionString
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSDBCONNECTIONSTRING
argument_list|)
expr_stmt|;
name|timeout
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_JDBC_TIMEOUT
argument_list|)
expr_stmt|;
name|String
name|driver
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSJDBCDRIVER
argument_list|)
decl_stmt|;
name|Class
operator|.
name|forName
argument_list|(
name|driver
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|DriverManager
operator|.
name|setLoginTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
comment|// stats is non-blocking
name|conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|connectionString
argument_list|)
expr_stmt|;
comment|// prepare the SELECT/UPDATE/INSERT statements
name|String
name|select
init|=
literal|"SELECT "
operator|+
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_ROW_COUNT_COLUMN_NAME
operator|+
literal|" FROM "
operator|+
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_TABLE_NAME
operator|+
literal|" WHERE "
operator|+
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_ID_COLUMN_NAME
operator|+
literal|" = ?"
decl_stmt|;
name|String
name|update
init|=
literal|"UPDATE "
operator|+
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_TABLE_NAME
operator|+
literal|" SET "
operator|+
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_ROW_COUNT_COLUMN_NAME
operator|+
literal|"= ? "
operator|+
literal|" WHERE "
operator|+
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_ID_COLUMN_NAME
operator|+
literal|" = ?"
decl_stmt|;
name|String
name|insert
init|=
literal|"INSERT INTO "
operator|+
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_TABLE_NAME
operator|+
literal|" VALUES (?, ?)"
decl_stmt|;
name|selStmt
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|select
argument_list|)
expr_stmt|;
name|updStmt
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|insStmt
operator|=
name|conn
operator|.
name|prepareStatement
argument_list|(
name|insert
argument_list|)
expr_stmt|;
comment|// make the statements non-blocking
name|selStmt
operator|.
name|setQueryTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|updStmt
operator|.
name|setQueryTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|insStmt
operator|.
name|setQueryTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during JDBC connection to "
operator|+
name|connectionString
operator|+
literal|". "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|publishStat
parameter_list|(
name|String
name|fileID
parameter_list|,
name|String
name|statType
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|conn
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"JDBC connection is null. Cannot publish stats without JDBC connection."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|statType
operator|!=
name|StatsSetupConst
operator|.
name|ROW_COUNT
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Warning. Invalid statistic. Currently "
operator|+
literal|"row count is the only supported statistic"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Stats publishing for key "
operator|+
name|fileID
operator|+
literal|". Value = "
operator|+
name|value
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Check to see if a previous task (mapper attempt) had published a previous stat
name|selStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|fileID
argument_list|)
expr_stmt|;
name|ResultSet
name|result
init|=
name|selStmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|next
argument_list|()
condition|)
block|{
name|long
name|currval
init|=
name|result
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Only update if the previous value is smaller (i.e. the previous attempt was a fail and
comment|// hopefully this attempt is a success (as it has a greater value).
if|if
condition|(
name|currval
operator|<
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|updStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|updStmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|fileID
argument_list|)
expr_stmt|;
name|updStmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// No previous attempts.
name|insStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|fileID
argument_list|)
expr_stmt|;
name|insStmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|insStmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during publishing statistics. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|closeConnection
parameter_list|()
block|{
if|if
condition|(
name|conn
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
if|if
condition|(
name|insStmt
operator|!=
literal|null
condition|)
block|{
name|insStmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|updStmt
operator|!=
literal|null
condition|)
block|{
name|updStmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|selStmt
operator|!=
literal|null
condition|)
block|{
name|selStmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// In case of derby, explicitly shutdown the database otherwise it reports error when
comment|// trying to connect to the same JDBC connection string again.
if|if
condition|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSDBCLASS
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"jdbc:derby"
argument_list|)
condition|)
block|{
try|try
block|{
comment|// The following closes the derby connection. It throws an exception that has to be caught and ignored.
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|connectionString
operator|+
literal|";shutdown=true"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Do nothing because we know that an exception is thrown anyway.
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during JDBC termination. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|init
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|hiveconf
operator|=
name|hconf
expr_stmt|;
name|connectionString
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSDBCONNECTIONSTRING
argument_list|)
expr_stmt|;
name|String
name|driver
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSJDBCDRIVER
argument_list|)
decl_stmt|;
name|Class
operator|.
name|forName
argument_list|(
name|driver
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|DriverManager
operator|.
name|setLoginTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|connectionString
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|setQueryTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
comment|// Check if the table exists
name|DatabaseMetaData
name|dbm
init|=
name|conn
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|ResultSet
name|rs
init|=
name|dbm
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_TABLE_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|tblExists
init|=
name|rs
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tblExists
condition|)
block|{
comment|// Table does not exist, create it
name|String
name|createTable
init|=
literal|"CREATE TABLE "
operator|+
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_TABLE_NAME
operator|+
literal|" ("
operator|+
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_ID_COLUMN_NAME
operator|+
literal|" VARCHAR(255), "
operator|+
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_ROW_COUNT_COLUMN_NAME
operator|+
literal|" BIGINT)"
decl_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|createTable
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|closeConnection
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during JDBC initialization. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

