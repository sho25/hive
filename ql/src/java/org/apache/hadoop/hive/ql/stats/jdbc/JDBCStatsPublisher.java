begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLIntegrityConstraintViolationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLRecoverableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsPublisher
import|;
end_import

begin_class
specifier|public
class|class
name|JDBCStatsPublisher
implements|implements
name|StatsPublisher
block|{
specifier|private
name|Connection
name|conn
decl_stmt|;
specifier|private
name|String
name|connectionString
decl_stmt|;
specifier|private
name|Configuration
name|hiveconf
decl_stmt|;
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|PreparedStatement
name|updStmt
decl_stmt|,
name|insStmt
decl_stmt|;
specifier|private
name|int
name|timeout
decl_stmt|;
comment|// default timeout in sec. for JDBC connection and statements
comment|// SQL comment that identifies where the SQL statement comes from
specifier|private
specifier|final
name|String
name|comment
init|=
literal|"Hive stats publishing: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
name|int
name|maxRetries
decl_stmt|;
specifier|private
name|long
name|waitWindow
decl_stmt|;
specifier|private
specifier|final
name|Random
name|r
decl_stmt|;
specifier|public
name|JDBCStatsPublisher
parameter_list|()
block|{
name|r
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|connect
parameter_list|(
name|Configuration
name|hiveconf
parameter_list|)
block|{
name|this
operator|.
name|hiveconf
operator|=
name|hiveconf
expr_stmt|;
name|maxRetries
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_RETRIES_MAX
argument_list|)
expr_stmt|;
name|waitWindow
operator|=
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_RETRIES_WAIT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|connectionString
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSDBCONNECTIONSTRING
argument_list|)
expr_stmt|;
name|timeout
operator|=
operator|(
name|int
operator|)
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_JDBC_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|String
name|driver
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSJDBCDRIVER
argument_list|)
decl_stmt|;
try|try
block|{
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|driver
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during instantiating JDBC driver "
operator|+
name|driver
operator|+
literal|". "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|DriverManager
operator|.
name|setLoginTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
comment|// stats is non-blocking
comment|// function pointer for executeWithRetry to setQueryTimeout
name|Utilities
operator|.
name|SQLCommand
argument_list|<
name|Void
argument_list|>
name|setQueryTimeout
init|=
operator|new
name|Utilities
operator|.
name|SQLCommand
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|(
name|PreparedStatement
name|stmt
parameter_list|)
throws|throws
name|SQLException
block|{
name|Utilities
operator|.
name|setQueryTimeout
argument_list|(
name|stmt
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|failures
init|=
literal|0
init|;
condition|;
name|failures
operator|++
control|)
block|{
try|try
block|{
name|conn
operator|=
name|Utilities
operator|.
name|connectWithRetry
argument_list|(
name|connectionString
argument_list|,
name|waitWindow
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
comment|// prepare statements
name|updStmt
operator|=
name|Utilities
operator|.
name|prepareWithRetry
argument_list|(
name|conn
argument_list|,
name|JDBCStatsUtils
operator|.
name|getUpdate
argument_list|(
name|comment
argument_list|)
argument_list|,
name|waitWindow
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
name|insStmt
operator|=
name|Utilities
operator|.
name|prepareWithRetry
argument_list|(
name|conn
argument_list|,
name|JDBCStatsUtils
operator|.
name|getInsert
argument_list|(
name|comment
argument_list|)
argument_list|,
name|waitWindow
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
comment|// set query timeout
name|Utilities
operator|.
name|executeWithRetry
argument_list|(
name|setQueryTimeout
argument_list|,
name|updStmt
argument_list|,
name|waitWindow
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|executeWithRetry
argument_list|(
name|setQueryTimeout
argument_list|,
name|insStmt
argument_list|,
name|waitWindow
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SQLRecoverableException
name|e
parameter_list|)
block|{
if|if
condition|(
name|failures
operator|>=
name|maxRetries
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during JDBC connection to "
operator|+
name|connectionString
operator|+
literal|". "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|// just return false without fail the task
block|}
name|long
name|waitTime
init|=
name|Utilities
operator|.
name|getRandomWaitTime
argument_list|(
name|waitWindow
argument_list|,
name|failures
argument_list|,
name|r
argument_list|)
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{         }
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// for SQLTransientException (maxRetries already achieved at Utilities retry functions
comment|// or SQLNonTransientException, declare a real failure
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during JDBC connection to "
operator|+
name|connectionString
operator|+
literal|". "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|publishStat
parameter_list|(
name|String
name|fileID
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stats
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If there are no stats to publish, nothing to do.
return|return
literal|true
return|;
block|}
if|if
condition|(
name|conn
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"JDBC connection is null. Cannot publish stats without JDBC connection."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|JDBCStatsUtils
operator|.
name|isValidStatisticSet
argument_list|(
name|stats
operator|.
name|keySet
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid statistic:"
operator|+
name|stats
operator|.
name|keySet
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|", supported "
operator|+
literal|" stats: "
operator|+
name|JDBCStatsUtils
operator|.
name|getSupportedStatistics
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|JDBCStatsUtils
operator|.
name|validateRowId
argument_list|(
name|fileID
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stats publishing for key "
operator|+
name|fileID
argument_list|)
expr_stmt|;
block|}
name|Utilities
operator|.
name|SQLCommand
argument_list|<
name|Void
argument_list|>
name|execUpdate
init|=
operator|new
name|Utilities
operator|.
name|SQLCommand
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|(
name|PreparedStatement
name|stmt
parameter_list|)
throws|throws
name|SQLException
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|supportedStatistics
init|=
name|JDBCStatsUtils
operator|.
name|getSupportedStatistics
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|failures
init|=
literal|0
init|;
condition|;
name|failures
operator|++
control|)
block|{
try|try
block|{
name|insStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|fileID
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|JDBCStatsUtils
operator|.
name|getSupportedStatistics
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|insStmt
operator|.
name|setString
argument_list|(
name|i
operator|+
literal|2
argument_list|,
name|stats
operator|.
name|get
argument_list|(
name|supportedStatistics
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Utilities
operator|.
name|executeWithRetry
argument_list|(
name|execUpdate
argument_list|,
name|insStmt
argument_list|,
name|waitWindow
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SQLIntegrityConstraintViolationException
name|e
parameter_list|)
block|{
comment|// We assume that the table used for partial statistics has a primary key declared on the
comment|// "fileID". The exception will be thrown if two tasks report results for the same fileID.
comment|// In such case, we either update the row, or abandon changes depending on which statistic
comment|// is newer.
for|for
control|(
name|int
name|updateFailures
init|=
literal|0
init|;
condition|;
name|updateFailures
operator|++
control|)
block|{
try|try
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|JDBCStatsUtils
operator|.
name|getSupportedStatistics
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|updStmt
operator|.
name|setString
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|stats
operator|.
name|get
argument_list|(
name|supportedStatistics
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|updStmt
operator|.
name|setString
argument_list|(
name|supportedStatistics
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|fileID
argument_list|)
expr_stmt|;
name|updStmt
operator|.
name|setString
argument_list|(
name|supportedStatistics
operator|.
name|size
argument_list|()
operator|+
literal|2
argument_list|,
name|stats
operator|.
name|get
argument_list|(
name|JDBCStatsUtils
operator|.
name|getBasicStat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|updStmt
operator|.
name|setString
argument_list|(
name|supportedStatistics
operator|.
name|size
argument_list|()
operator|+
literal|3
argument_list|,
name|fileID
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|executeWithRetry
argument_list|(
name|execUpdate
argument_list|,
name|updStmt
argument_list|,
name|waitWindow
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SQLRecoverableException
name|ue
parameter_list|)
block|{
comment|// need to start from scratch (connection)
if|if
condition|(
operator|!
name|handleSQLRecoverableException
argument_list|(
name|ue
argument_list|,
name|updateFailures
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ue
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during publishing statistics. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLRecoverableException
name|e
parameter_list|)
block|{
comment|// need to start from scratch (connection)
if|if
condition|(
operator|!
name|handleSQLRecoverableException
argument_list|(
name|e
argument_list|,
name|failures
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during publishing statistics. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|private
name|boolean
name|handleSQLRecoverableException
parameter_list|(
name|Exception
name|e
parameter_list|,
name|int
name|failures
parameter_list|)
block|{
if|if
condition|(
name|failures
operator|>=
name|maxRetries
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// close the current connection
name|closeConnection
argument_list|()
expr_stmt|;
name|long
name|waitTime
init|=
name|Utilities
operator|.
name|getRandomWaitTime
argument_list|(
name|waitWindow
argument_list|,
name|failures
argument_list|,
name|r
argument_list|)
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|iex
parameter_list|)
block|{     }
comment|// get a new connection
if|if
condition|(
operator|!
name|connect
argument_list|(
name|hiveconf
argument_list|)
condition|)
block|{
comment|// if cannot reconnect, just fail because connect() already handles retries.
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during publishing aggregation. "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|closeConnection
parameter_list|()
block|{
if|if
condition|(
name|conn
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
if|if
condition|(
name|updStmt
operator|!=
literal|null
condition|)
block|{
name|updStmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|insStmt
operator|!=
literal|null
condition|)
block|{
name|insStmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// In case of derby, explicitly shutdown the database otherwise it reports error when
comment|// trying to connect to the same JDBC connection string again.
if|if
condition|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSDBCLASS
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"jdbc:derby"
argument_list|)
condition|)
block|{
try|try
block|{
comment|// The following closes the derby connection. It throws an exception that has to be caught
comment|// and ignored.
synchronized|synchronized
init|(
name|DriverManager
operator|.
name|class
init|)
block|{
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|connectionString
operator|+
literal|";shutdown=true"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Do nothing because we know that an exception is thrown anyway.
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during JDBC termination. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Initialize the intermediate stats DB for the first time it is running (e.g.,    * creating tables.).    */
annotation|@
name|Override
specifier|public
name|boolean
name|init
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
block|{
name|Statement
name|stmt
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|this
operator|.
name|hiveconf
operator|=
name|hconf
expr_stmt|;
name|connectionString
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSDBCONNECTIONSTRING
argument_list|)
expr_stmt|;
name|String
name|driver
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSJDBCDRIVER
argument_list|)
decl_stmt|;
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|driver
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|DriverManager
operator|.
name|class
init|)
block|{
name|DriverManager
operator|.
name|setLoginTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|connectionString
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|Utilities
operator|.
name|setQueryTimeout
argument_list|(
name|stmt
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
comment|// TODO: why is this not done using Hive db scripts?
comment|// Check if the table exists
name|DatabaseMetaData
name|dbm
init|=
name|conn
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|JDBCStatsUtils
operator|.
name|getStatTableName
argument_list|()
decl_stmt|;
name|rs
operator|=
name|dbm
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|boolean
name|tblExists
init|=
name|rs
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tblExists
condition|)
block|{
comment|// Table does not exist, create it
name|String
name|createTable
init|=
name|JDBCStatsUtils
operator|.
name|getCreate
argument_list|(
literal|""
argument_list|)
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|createTable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|String
name|msg
init|=
name|ex
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
operator|&&
name|msg
operator|.
name|contains
argument_list|(
literal|"Specified key was too long"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
operator|+
literal|"; try using innodb with "
operator|+
literal|"Barracuda file format and innodb_large_prefix"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
throw|throw
name|ex
throw|;
block|}
block|}
else|else
block|{
comment|// Upgrade column name to allow for longer paths.
name|String
name|idColName
init|=
name|JDBCStatsUtils
operator|.
name|getIdColumnName
argument_list|()
decl_stmt|;
name|int
name|colSize
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|rs
operator|=
name|dbm
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|,
name|idColName
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|colSize
operator|=
name|rs
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
expr_stmt|;
if|if
condition|(
name|colSize
operator|<
name|JDBCStatsSetupConstants
operator|.
name|ID_COLUMN_VARCHAR_SIZE
condition|)
block|{
name|String
name|alterTable
init|=
name|JDBCStatsUtils
operator|.
name|getAlterIdColumn
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|alterTable
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to update "
operator|+
name|idColName
operator|+
literal|" - column not found"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to update "
operator|+
name|idColName
operator|+
literal|" (size "
operator|+
operator|(
name|colSize
operator|==
operator|-
literal|1
condition|?
literal|"unknown"
else|:
name|colSize
operator|)
operator|+
literal|")"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during JDBC initialization. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
if|if
condition|(
name|stmt
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
name|closeConnection
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

