begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AggrStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Decimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PrunedPartitionList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ColStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnListDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeFieldDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeNullDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Statistics
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|JavaDataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ConstantObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardConstantListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardConstantMapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardMapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableBinaryObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableBooleanObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableByteObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableConstantBinaryObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableConstantHiveCharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableConstantHiveVarcharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableConstantStringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableDateObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableDoubleObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableFloatObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveCharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveDecimalObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveVarcharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableIntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableLongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableShortObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableStringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableTimestampObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|mapreduce
operator|.
name|hadoop
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|StatsUtils
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StatsUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Collect table, partition and column level statistics    * @param conf    *          - hive configuration    * @param partList    *          - partition list    * @param table    *          - table    * @param tableScanOperator    *          - table scan operator    * @return statistics object    * @throws HiveException    */
specifier|public
specifier|static
name|Statistics
name|collectStatistics
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|PrunedPartitionList
name|partList
parameter_list|,
name|Table
name|table
parameter_list|,
name|TableScanOperator
name|tableScanOperator
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// column level statistics are required only for the columns that are needed
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|schema
init|=
name|tableScanOperator
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|neededColumns
init|=
name|tableScanOperator
operator|.
name|getNeededColumns
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|referencedColumns
init|=
name|tableScanOperator
operator|.
name|getReferencedColumns
argument_list|()
decl_stmt|;
return|return
name|collectStatistics
argument_list|(
name|conf
argument_list|,
name|partList
argument_list|,
name|table
argument_list|,
name|schema
argument_list|,
name|neededColumns
argument_list|,
name|referencedColumns
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Statistics
name|collectStatistics
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|PrunedPartitionList
name|partList
parameter_list|,
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|schema
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|neededColumns
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|referencedColumns
parameter_list|)
throws|throws
name|HiveException
block|{
name|boolean
name|fetchColStats
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_FETCH_COLUMN_STATS
argument_list|)
decl_stmt|;
name|boolean
name|fetchPartStats
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_FETCH_PARTITION_STATS
argument_list|)
decl_stmt|;
return|return
name|collectStatistics
argument_list|(
name|conf
argument_list|,
name|partList
argument_list|,
name|table
argument_list|,
name|schema
argument_list|,
name|neededColumns
argument_list|,
name|referencedColumns
argument_list|,
name|fetchColStats
argument_list|,
name|fetchPartStats
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Statistics
name|collectStatistics
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|PrunedPartitionList
name|partList
parameter_list|,
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|schema
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|neededColumns
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|referencedColumns
parameter_list|,
name|boolean
name|fetchColStats
parameter_list|,
name|boolean
name|fetchPartStats
parameter_list|)
throws|throws
name|HiveException
block|{
name|Statistics
name|stats
init|=
operator|new
name|Statistics
argument_list|()
decl_stmt|;
name|float
name|deserFactor
init|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_DESERIALIZATION_FACTOR
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|long
name|nr
init|=
name|getNumRows
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|long
name|ds
init|=
name|getRawDataSize
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|ds
operator|<=
literal|0
condition|)
block|{
name|ds
operator|=
name|getTotalSize
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// if data size is still 0 then get file size
if|if
condition|(
name|ds
operator|<=
literal|0
condition|)
block|{
name|ds
operator|=
name|getFileSizeForTable
argument_list|(
name|conf
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
name|ds
operator|=
call|(
name|long
call|)
argument_list|(
name|ds
operator|*
name|deserFactor
argument_list|)
expr_stmt|;
block|}
comment|// number of rows -1 means that statistics from metastore is not reliable
comment|// and 0 means statistics gathering is disabled
if|if
condition|(
name|nr
operator|<=
literal|0
condition|)
block|{
name|int
name|avgRowSize
init|=
name|estimateRowSizeFromSchema
argument_list|(
name|conf
argument_list|,
name|schema
argument_list|,
name|neededColumns
argument_list|)
decl_stmt|;
if|if
condition|(
name|avgRowSize
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Estimated average row size: "
operator|+
name|avgRowSize
argument_list|)
expr_stmt|;
block|}
name|nr
operator|=
name|ds
operator|/
name|avgRowSize
expr_stmt|;
block|}
block|}
name|stats
operator|.
name|setNumRows
argument_list|(
name|nr
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setDataSize
argument_list|(
name|ds
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|colStats
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|fetchColStats
condition|)
block|{
name|colStats
operator|=
name|getTableColumnStats
argument_list|(
name|table
argument_list|,
name|schema
argument_list|,
name|neededColumns
argument_list|)
expr_stmt|;
block|}
comment|// infer if any column can be primary key based on column statistics
name|inferAndSetPrimaryKey
argument_list|(
name|stats
operator|.
name|getNumRows
argument_list|()
argument_list|,
name|colStats
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setColumnStatsState
argument_list|(
name|deriveStatType
argument_list|(
name|colStats
argument_list|,
name|neededColumns
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addToColumnStats
argument_list|(
name|colStats
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|partList
operator|!=
literal|null
condition|)
block|{
comment|// For partitioned tables, get the size of all the partitions after pruning
comment|// the partitions that are not required
name|long
name|nr
init|=
literal|0
decl_stmt|;
name|long
name|ds
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|rowCounts
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|dataSizes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|fetchPartStats
condition|)
block|{
name|rowCounts
operator|=
name|getBasicStatForPartitions
argument_list|(
name|table
argument_list|,
name|partList
operator|.
name|getNotDeniedPartns
argument_list|()
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
expr_stmt|;
name|dataSizes
operator|=
name|getBasicStatForPartitions
argument_list|(
name|table
argument_list|,
name|partList
operator|.
name|getNotDeniedPartns
argument_list|()
argument_list|,
name|StatsSetupConst
operator|.
name|RAW_DATA_SIZE
argument_list|)
expr_stmt|;
name|nr
operator|=
name|getSumIgnoreNegatives
argument_list|(
name|rowCounts
argument_list|)
expr_stmt|;
name|ds
operator|=
name|getSumIgnoreNegatives
argument_list|(
name|dataSizes
argument_list|)
expr_stmt|;
if|if
condition|(
name|ds
operator|<=
literal|0
condition|)
block|{
name|dataSizes
operator|=
name|getBasicStatForPartitions
argument_list|(
name|table
argument_list|,
name|partList
operator|.
name|getNotDeniedPartns
argument_list|()
argument_list|,
name|StatsSetupConst
operator|.
name|TOTAL_SIZE
argument_list|)
expr_stmt|;
name|ds
operator|=
name|getSumIgnoreNegatives
argument_list|(
name|dataSizes
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if data size still could not be determined, then fall back to filesytem to get file
comment|// sizes
if|if
condition|(
name|ds
operator|<=
literal|0
condition|)
block|{
name|dataSizes
operator|=
name|getFileSizeForPartitions
argument_list|(
name|conf
argument_list|,
name|partList
operator|.
name|getNotDeniedPartns
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ds
operator|=
name|getSumIgnoreNegatives
argument_list|(
name|dataSizes
argument_list|)
expr_stmt|;
name|ds
operator|=
call|(
name|long
call|)
argument_list|(
name|ds
operator|*
name|deserFactor
argument_list|)
expr_stmt|;
name|int
name|avgRowSize
init|=
name|estimateRowSizeFromSchema
argument_list|(
name|conf
argument_list|,
name|schema
argument_list|,
name|neededColumns
argument_list|)
decl_stmt|;
if|if
condition|(
name|avgRowSize
operator|>
literal|0
condition|)
block|{
name|setUnknownRcDsToAverage
argument_list|(
name|rowCounts
argument_list|,
name|dataSizes
argument_list|,
name|avgRowSize
argument_list|)
expr_stmt|;
name|nr
operator|=
name|getSumIgnoreNegatives
argument_list|(
name|rowCounts
argument_list|)
expr_stmt|;
name|ds
operator|=
name|getSumIgnoreNegatives
argument_list|(
name|dataSizes
argument_list|)
expr_stmt|;
comment|// number of rows -1 means that statistics from metastore is not reliable
if|if
condition|(
name|nr
operator|<=
literal|0
condition|)
block|{
name|nr
operator|=
name|ds
operator|/
name|avgRowSize
expr_stmt|;
block|}
block|}
name|stats
operator|.
name|addToNumRows
argument_list|(
name|nr
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addToDataSize
argument_list|(
name|ds
argument_list|)
expr_stmt|;
comment|// if at least a partition does not contain row count then mark basic stats state as PARTIAL
if|if
condition|(
name|containsNonPositives
argument_list|(
name|rowCounts
argument_list|)
operator|&&
name|stats
operator|.
name|getBasicStatsState
argument_list|()
operator|.
name|equals
argument_list|(
name|State
operator|.
name|COMPLETE
argument_list|)
condition|)
block|{
name|stats
operator|.
name|setBasicStatsState
argument_list|(
name|State
operator|.
name|PARTIAL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchColStats
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|partList
operator|.
name|getNotDeniedPartns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|partList
operator|.
name|getNotDeniedPartns
argument_list|()
control|)
block|{
name|partNames
operator|.
name|add
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|colToTabAlias
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|neededColumns
operator|=
name|processNeededColumns
argument_list|(
name|schema
argument_list|,
name|neededColumns
argument_list|,
name|colToTabAlias
argument_list|)
expr_stmt|;
name|AggrStats
name|aggrStats
init|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getAggrColStatsFor
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|neededColumns
argument_list|,
name|partNames
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|aggrStats
condition|)
block|{
comment|// There are some partitions with no state (or we didn't fetch any state).
comment|// Update the stats with empty list to reflect that in the
comment|// state/initialize structures.
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|emptyStats
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// add partition column stats
name|addParitionColumnStats
argument_list|(
name|conf
argument_list|,
name|neededColumns
argument_list|,
name|referencedColumns
argument_list|,
name|schema
argument_list|,
name|table
argument_list|,
name|partList
argument_list|,
name|emptyStats
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addToColumnStats
argument_list|(
name|emptyStats
argument_list|)
expr_stmt|;
name|stats
operator|.
name|updateColumnStatsState
argument_list|(
name|deriveStatType
argument_list|(
name|emptyStats
argument_list|,
name|referencedColumns
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
init|=
name|aggrStats
operator|.
name|getColStats
argument_list|()
decl_stmt|;
if|if
condition|(
name|colStats
operator|.
name|size
argument_list|()
operator|!=
name|neededColumns
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Column stats requested for : "
operator|+
name|neededColumns
operator|.
name|size
argument_list|()
operator|+
literal|" columns. Able to"
operator|+
literal|" retrieve for "
operator|+
name|colStats
operator|.
name|size
argument_list|()
operator|+
literal|" columns"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|columnStats
init|=
name|convertColStats
argument_list|(
name|colStats
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|colToTabAlias
argument_list|)
decl_stmt|;
name|addParitionColumnStats
argument_list|(
name|conf
argument_list|,
name|neededColumns
argument_list|,
name|referencedColumns
argument_list|,
name|schema
argument_list|,
name|table
argument_list|,
name|partList
argument_list|,
name|columnStats
argument_list|)
expr_stmt|;
comment|// infer if any column can be primary key based on column statistics
name|inferAndSetPrimaryKey
argument_list|(
name|stats
operator|.
name|getNumRows
argument_list|()
argument_list|,
name|columnStats
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addToColumnStats
argument_list|(
name|columnStats
argument_list|)
expr_stmt|;
name|State
name|colState
init|=
name|deriveStatType
argument_list|(
name|columnStats
argument_list|,
name|referencedColumns
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggrStats
operator|.
name|getPartsFound
argument_list|()
operator|!=
name|partNames
operator|.
name|size
argument_list|()
operator|&&
name|colState
operator|!=
name|State
operator|.
name|NONE
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Column stats requested for : "
operator|+
name|partNames
operator|.
name|size
argument_list|()
operator|+
literal|" partitions. "
operator|+
literal|"Able to retrieve for "
operator|+
name|aggrStats
operator|.
name|getPartsFound
argument_list|()
operator|+
literal|" partitions"
argument_list|)
expr_stmt|;
name|colState
operator|=
name|State
operator|.
name|PARTIAL
expr_stmt|;
block|}
name|stats
operator|.
name|setColumnStatsState
argument_list|(
name|colState
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|stats
return|;
block|}
comment|/**    * Based on the provided column statistics and number of rows, this method infers if the column    * can be primary key. It checks if the difference between the min and max value is equal to    * number of rows specified.    * @param numRows - number of rows    * @param colStats - column statistics    */
specifier|public
specifier|static
name|void
name|inferAndSetPrimaryKey
parameter_list|(
name|long
name|numRows
parameter_list|,
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|colStats
parameter_list|)
block|{
if|if
condition|(
name|colStats
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ColStatistics
name|cs
range|:
name|colStats
control|)
block|{
if|if
condition|(
name|cs
operator|!=
literal|null
operator|&&
name|cs
operator|.
name|getRange
argument_list|()
operator|!=
literal|null
operator|&&
name|cs
operator|.
name|getRange
argument_list|()
operator|.
name|minValue
operator|!=
literal|null
operator|&&
name|cs
operator|.
name|getRange
argument_list|()
operator|.
name|maxValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|numRows
operator|==
operator|(
operator|(
name|cs
operator|.
name|getRange
argument_list|()
operator|.
name|maxValue
operator|.
name|longValue
argument_list|()
operator|-
name|cs
operator|.
name|getRange
argument_list|()
operator|.
name|minValue
operator|.
name|longValue
argument_list|()
operator|)
operator|+
literal|1
operator|)
condition|)
block|{
name|cs
operator|.
name|setPrimaryKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Infer foreign key relationship from given column statistics.    * @param csPK - column statistics of primary key    * @param csFK - column statistics of potential foreign key    * @return    */
specifier|public
specifier|static
name|boolean
name|inferForeignKey
parameter_list|(
name|ColStatistics
name|csPK
parameter_list|,
name|ColStatistics
name|csFK
parameter_list|)
block|{
if|if
condition|(
name|csPK
operator|!=
literal|null
operator|&&
name|csFK
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|csPK
operator|.
name|isPrimaryKey
argument_list|()
condition|)
block|{
if|if
condition|(
name|csPK
operator|.
name|getRange
argument_list|()
operator|!=
literal|null
operator|&&
name|csFK
operator|.
name|getRange
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ColStatistics
operator|.
name|Range
name|pkRange
init|=
name|csPK
operator|.
name|getRange
argument_list|()
decl_stmt|;
name|ColStatistics
operator|.
name|Range
name|fkRange
init|=
name|csFK
operator|.
name|getRange
argument_list|()
decl_stmt|;
return|return
name|isWithin
argument_list|(
name|fkRange
argument_list|,
name|pkRange
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isWithin
parameter_list|(
name|ColStatistics
operator|.
name|Range
name|range1
parameter_list|,
name|ColStatistics
operator|.
name|Range
name|range2
parameter_list|)
block|{
if|if
condition|(
name|range1
operator|.
name|minValue
operator|!=
literal|null
operator|&&
name|range2
operator|.
name|minValue
operator|!=
literal|null
operator|&&
name|range1
operator|.
name|maxValue
operator|!=
literal|null
operator|&&
name|range2
operator|.
name|maxValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|range1
operator|.
name|minValue
operator|.
name|longValue
argument_list|()
operator|>=
name|range2
operator|.
name|minValue
operator|.
name|longValue
argument_list|()
operator|&&
name|range1
operator|.
name|maxValue
operator|.
name|longValue
argument_list|()
operator|<=
name|range2
operator|.
name|maxValue
operator|.
name|longValue
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|void
name|addParitionColumnStats
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|neededColumns
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|referencedColumns
parameter_list|,
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|schema
parameter_list|,
name|Table
name|table
parameter_list|,
name|PrunedPartitionList
name|partList
parameter_list|,
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|colStats
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// extra columns is difference between referenced columns vs needed
comment|// columns. The difference could be partition columns.
name|List
argument_list|<
name|String
argument_list|>
name|extraCols
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|referencedColumns
argument_list|)
decl_stmt|;
if|if
condition|(
name|referencedColumns
operator|.
name|size
argument_list|()
operator|>
name|neededColumns
operator|.
name|size
argument_list|()
condition|)
block|{
name|extraCols
operator|.
name|removeAll
argument_list|(
name|neededColumns
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|col
range|:
name|extraCols
control|)
block|{
for|for
control|(
name|ColumnInfo
name|ci
range|:
name|schema
control|)
block|{
comment|// conditions for being partition column
if|if
condition|(
name|col
operator|.
name|equals
argument_list|(
name|ci
operator|.
name|getInternalName
argument_list|()
argument_list|)
operator|&&
name|ci
operator|.
name|getIsVirtualCol
argument_list|()
operator|&&
operator|!
name|ci
operator|.
name|isHiddenVirtualCol
argument_list|()
condition|)
block|{
comment|// currently metastore does not store column stats for
comment|// partition column, so we calculate the NDV from pruned
comment|// partition list
name|ColStatistics
name|partCS
init|=
operator|new
name|ColStatistics
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|ci
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|ci
operator|.
name|getType
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|numPartitions
init|=
name|getNDVPartitionColumn
argument_list|(
name|partList
operator|.
name|getPartitions
argument_list|()
argument_list|,
name|ci
operator|.
name|getInternalName
argument_list|()
argument_list|)
decl_stmt|;
name|partCS
operator|.
name|setCountDistint
argument_list|(
name|numPartitions
argument_list|)
expr_stmt|;
name|partCS
operator|.
name|setAvgColLen
argument_list|(
name|StatsUtils
operator|.
name|getAvgColLenOfVariableLengthTypes
argument_list|(
name|conf
argument_list|,
name|ci
operator|.
name|getObjectInspector
argument_list|()
argument_list|,
name|partCS
operator|.
name|getColumnType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|add
argument_list|(
name|partCS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|int
name|getNDVPartitionColumn
parameter_list|(
name|Set
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|,
name|String
name|partColName
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|distinctVals
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|distinctVals
operator|.
name|add
argument_list|(
name|partition
operator|.
name|getSpec
argument_list|()
operator|.
name|get
argument_list|(
name|partColName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|distinctVals
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|setUnknownRcDsToAverage
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|rowCounts
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|dataSizes
parameter_list|,
name|int
name|avgRowSize
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Estimated average row size: "
operator|+
name|avgRowSize
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCounts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|long
name|rc
init|=
name|rowCounts
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|s
init|=
name|dataSizes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|<=
literal|0
operator|&&
name|s
operator|>
literal|0
condition|)
block|{
name|rc
operator|=
name|s
operator|/
name|avgRowSize
expr_stmt|;
name|rowCounts
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|<=
literal|0
operator|&&
name|rc
operator|>
literal|0
condition|)
block|{
name|s
operator|=
name|rc
operator|*
name|avgRowSize
expr_stmt|;
name|dataSizes
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|int
name|estimateRowSizeFromSchema
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|schema
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|neededColumns
parameter_list|)
block|{
name|int
name|avgRowSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|neededCol
range|:
name|neededColumns
control|)
block|{
name|ColumnInfo
name|ci
init|=
name|getColumnInfoForColumn
argument_list|(
name|neededCol
argument_list|,
name|schema
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|==
literal|null
condition|)
block|{
comment|// No need to collect statistics of index columns
continue|continue;
block|}
name|ObjectInspector
name|oi
init|=
name|ci
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|String
name|colType
init|=
name|ci
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|BINARY_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|VARCHAR_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|CHAR_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|LIST_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|MAP_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|STRUCT_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|UNION_TYPE_NAME
argument_list|)
condition|)
block|{
name|avgRowSize
operator|+=
name|getAvgColLenOfVariableLengthTypes
argument_list|(
name|conf
argument_list|,
name|oi
argument_list|,
name|colType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|avgRowSize
operator|+=
name|getAvgColLenOfFixedLengthTypes
argument_list|(
name|colType
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|avgRowSize
return|;
block|}
specifier|private
specifier|static
name|ColumnInfo
name|getColumnInfoForColumn
parameter_list|(
name|String
name|neededCol
parameter_list|,
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|schema
parameter_list|)
block|{
for|for
control|(
name|ColumnInfo
name|ci
range|:
name|schema
control|)
block|{
if|if
condition|(
name|ci
operator|.
name|getInternalName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|neededCol
argument_list|)
condition|)
block|{
return|return
name|ci
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Find the bytes on disk occupied by a table    * @param conf    *          - hive conf    * @param table    *          - table    * @return size on disk    */
specifier|public
specifier|static
name|long
name|getFileSizeForTable
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|Table
name|table
parameter_list|)
block|{
name|Path
name|path
init|=
name|table
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|size
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|path
argument_list|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|size
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
comment|/**    * Find the bytes on disks occupied by list of partitions    * @param conf    *          - hive conf    * @param parts    *          - partition list    * @return sizes of patitions    */
specifier|public
specifier|static
name|List
argument_list|<
name|Long
argument_list|>
name|getFileSizeForPartitions
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|sizes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|Path
name|path
init|=
name|part
operator|.
name|getDataLocation
argument_list|()
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|size
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|path
argument_list|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|size
operator|=
literal|0
expr_stmt|;
block|}
name|sizes
operator|.
name|add
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
return|return
name|sizes
return|;
block|}
specifier|private
specifier|static
name|boolean
name|containsNonPositives
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|vals
parameter_list|)
block|{
for|for
control|(
name|Long
name|val
range|:
name|vals
control|)
block|{
if|if
condition|(
name|val
operator|<=
literal|0L
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Get sum of all values in the list that are>0    * @param vals    *          - list of values    * @return sum    */
specifier|public
specifier|static
name|long
name|getSumIgnoreNegatives
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|vals
parameter_list|)
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Long
name|l
range|:
name|vals
control|)
block|{
if|if
condition|(
name|l
operator|>
literal|0
condition|)
block|{
name|result
operator|+=
name|l
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|Statistics
operator|.
name|State
name|deriveStatType
parameter_list|(
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|colStats
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|neededColumns
parameter_list|)
block|{
name|boolean
name|hasStats
init|=
literal|false
decl_stmt|,
name|hasNull
init|=
operator|(
name|colStats
operator|==
literal|null
operator|)
operator|||
operator|(
name|colStats
operator|.
name|size
argument_list|()
operator|<
name|neededColumns
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|colStats
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ColStatistics
name|cs
range|:
name|colStats
control|)
block|{
name|boolean
name|isNull
init|=
name|cs
operator|==
literal|null
decl_stmt|;
name|hasStats
operator||=
operator|!
name|isNull
expr_stmt|;
name|hasNull
operator||=
name|isNull
expr_stmt|;
if|if
condition|(
name|hasNull
operator|&&
name|hasStats
condition|)
break|break;
block|}
block|}
name|State
name|result
init|=
operator|(
name|hasStats
condition|?
operator|(
name|hasNull
condition|?
name|Statistics
operator|.
name|State
operator|.
name|PARTIAL
else|:
name|Statistics
operator|.
name|State
operator|.
name|COMPLETE
operator|)
else|:
operator|(
name|neededColumns
operator|.
name|isEmpty
argument_list|()
condition|?
name|Statistics
operator|.
name|State
operator|.
name|COMPLETE
else|:
name|Statistics
operator|.
name|State
operator|.
name|NONE
operator|)
operator|)
decl_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Convert ColumnStatisticsObj to ColStatistics    * @param cso    *          - ColumnStatisticsObj    * @param tabName    *          - table name    * @param colName    *          - column name    * @return ColStatistics    */
specifier|public
specifier|static
name|ColStatistics
name|getColStatistics
parameter_list|(
name|ColumnStatisticsObj
name|cso
parameter_list|,
name|String
name|tabName
parameter_list|,
name|String
name|colName
parameter_list|)
block|{
name|ColStatistics
name|cs
init|=
operator|new
name|ColStatistics
argument_list|(
name|tabName
argument_list|,
name|colName
argument_list|,
name|cso
operator|.
name|getColType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|colType
init|=
name|cso
operator|.
name|getColType
argument_list|()
decl_stmt|;
name|ColumnStatisticsData
name|csd
init|=
name|cso
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|INT_TYPE_NAME
argument_list|)
condition|)
block|{
name|cs
operator|.
name|setCountDistint
argument_list|(
name|csd
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setNumNulls
argument_list|(
name|csd
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setAvgColLen
argument_list|(
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive1
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRange
argument_list|(
name|csd
operator|.
name|getLongStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|csd
operator|.
name|getLongStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
condition|)
block|{
name|cs
operator|.
name|setCountDistint
argument_list|(
name|csd
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setNumNulls
argument_list|(
name|csd
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setAvgColLen
argument_list|(
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive2
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRange
argument_list|(
name|csd
operator|.
name|getLongStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|csd
operator|.
name|getLongStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
argument_list|)
condition|)
block|{
name|cs
operator|.
name|setCountDistint
argument_list|(
name|csd
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setNumNulls
argument_list|(
name|csd
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setAvgColLen
argument_list|(
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive1
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRange
argument_list|(
name|csd
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|csd
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|)
condition|)
block|{
name|cs
operator|.
name|setCountDistint
argument_list|(
name|csd
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setNumNulls
argument_list|(
name|csd
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setAvgColLen
argument_list|(
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive2
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRange
argument_list|(
name|csd
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|csd
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|CHAR_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|VARCHAR_TYPE_NAME
argument_list|)
condition|)
block|{
name|cs
operator|.
name|setCountDistint
argument_list|(
name|csd
operator|.
name|getStringStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setNumNulls
argument_list|(
name|csd
operator|.
name|getStringStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setAvgColLen
argument_list|(
name|csd
operator|.
name|getStringStats
argument_list|()
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|)
condition|)
block|{
if|if
condition|(
name|csd
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|getNumFalses
argument_list|()
operator|>
literal|0
operator|&&
name|csd
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|getNumTrues
argument_list|()
operator|>
literal|0
condition|)
block|{
name|cs
operator|.
name|setCountDistint
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cs
operator|.
name|setCountDistint
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|cs
operator|.
name|setNumTrues
argument_list|(
name|csd
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|getNumTrues
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setNumFalses
argument_list|(
name|csd
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|getNumFalses
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setNumNulls
argument_list|(
name|csd
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setAvgColLen
argument_list|(
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive1
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|BINARY_TYPE_NAME
argument_list|)
condition|)
block|{
name|cs
operator|.
name|setAvgColLen
argument_list|(
name|csd
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setNumNulls
argument_list|(
name|csd
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_TYPE_NAME
argument_list|)
condition|)
block|{
name|cs
operator|.
name|setAvgColLen
argument_list|(
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthOfTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
argument_list|)
condition|)
block|{
name|cs
operator|.
name|setAvgColLen
argument_list|(
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthOfDecimal
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setCountDistint
argument_list|(
name|csd
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setNumNulls
argument_list|(
name|csd
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Decimal
name|val
init|=
name|csd
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
decl_stmt|;
name|BigDecimal
name|maxVal
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|val
operator|.
name|getUnscaled
argument_list|()
argument_list|)
argument_list|,
name|val
operator|.
name|getScale
argument_list|()
argument_list|)
operator|.
name|bigDecimalValue
argument_list|()
decl_stmt|;
name|val
operator|=
name|csd
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
expr_stmt|;
name|BigDecimal
name|minVal
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|val
operator|.
name|getUnscaled
argument_list|()
argument_list|)
argument_list|,
name|val
operator|.
name|getScale
argument_list|()
argument_list|)
operator|.
name|bigDecimalValue
argument_list|()
decl_stmt|;
name|cs
operator|.
name|setRange
argument_list|(
name|minVal
argument_list|,
name|maxVal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|DATE_TYPE_NAME
argument_list|)
condition|)
block|{
name|cs
operator|.
name|setAvgColLen
argument_list|(
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthOfDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Columns statistics for complex datatypes are not supported yet
return|return
literal|null
return|;
block|}
return|return
name|cs
return|;
block|}
comment|/**    * Get table level column statistics from metastore for needed columns    * @param table    *          - table    * @param schema    *          - output schema    * @param neededColumns    *          - list of needed columns    * @return column statistics    */
specifier|public
specifier|static
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|getTableColumnStats
parameter_list|(
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|schema
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|neededColumns
parameter_list|)
block|{
name|String
name|dbName
init|=
name|table
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tabName
init|=
name|table
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|colToTabAlias
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|schema
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|neededColsInTable
init|=
name|processNeededColumns
argument_list|(
name|schema
argument_list|,
name|neededColumns
argument_list|,
name|colToTabAlias
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|stats
init|=
literal|null
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStat
init|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tabName
argument_list|,
name|neededColsInTable
argument_list|)
decl_stmt|;
name|stats
operator|=
name|convertColStats
argument_list|(
name|colStat
argument_list|,
name|tabName
argument_list|,
name|colToTabAlias
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to retrieve table statistics: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|stats
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|stats
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|convertColStats
parameter_list|(
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
parameter_list|,
name|String
name|tabName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|colToTabAlias
parameter_list|)
block|{
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|stats
init|=
operator|new
name|ArrayList
argument_list|<
name|ColStatistics
argument_list|>
argument_list|(
name|colStats
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|statObj
range|:
name|colStats
control|)
block|{
name|ColStatistics
name|cs
init|=
name|getColStatistics
argument_list|(
name|statObj
argument_list|,
name|tabName
argument_list|,
name|statObj
operator|.
name|getColName
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|setTableAlias
argument_list|(
name|colToTabAlias
operator|.
name|get
argument_list|(
name|cs
operator|.
name|getColumnName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
return|return
name|stats
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|processNeededColumns
parameter_list|(
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|schema
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|neededColumns
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|colToTabAlias
parameter_list|)
block|{
for|for
control|(
name|ColumnInfo
name|col
range|:
name|schema
control|)
block|{
if|if
condition|(
name|col
operator|.
name|isHiddenVirtualCol
argument_list|()
condition|)
continue|continue;
name|colToTabAlias
operator|.
name|put
argument_list|(
name|col
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|col
operator|.
name|getTabAlias
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Remove hidden virtual columns, as well as needed columns that are not
comment|// part of the table. TODO: the latter case should not really happen...
name|List
argument_list|<
name|String
argument_list|>
name|neededColsInTable
init|=
literal|null
decl_stmt|;
name|int
name|limit
init|=
name|neededColumns
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|colToTabAlias
operator|.
name|containsKey
argument_list|(
name|neededColumns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|neededColsInTable
operator|==
literal|null
condition|)
block|{
name|neededColsInTable
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|neededColumns
argument_list|)
expr_stmt|;
block|}
name|neededColsInTable
operator|.
name|remove
argument_list|(
name|i
operator|--
argument_list|)
expr_stmt|;
operator|--
name|limit
expr_stmt|;
block|}
return|return
operator|(
name|neededColsInTable
operator|==
literal|null
operator|)
condition|?
name|neededColumns
else|:
name|neededColsInTable
return|;
block|}
comment|/**    * Get the raw data size of variable length data types    * @param conf    *          - hive conf    * @param oi    *          - object inspector    * @param colType    *          - column type    * @return raw data size    */
specifier|public
specifier|static
name|long
name|getAvgColLenOfVariableLengthTypes
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|,
name|String
name|colType
parameter_list|)
block|{
name|long
name|configVarLen
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_MAX_VARIABLE_LENGTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
condition|)
block|{
comment|// constant string projection Ex: select "hello" from table
if|if
condition|(
name|oi
operator|instanceof
name|ConstantObjectInspector
condition|)
block|{
name|ConstantObjectInspector
name|coi
init|=
operator|(
name|ConstantObjectInspector
operator|)
name|oi
decl_stmt|;
comment|// if writable constant is null then return size 0
if|if
condition|(
name|coi
operator|.
name|getWritableConstantValue
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|coi
operator|.
name|getWritableConstantValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableConstantStringObjectInspector
condition|)
block|{
comment|// some UDFs return writable constant strings (fixed width)
comment|// Ex: select upper("hello") from table
name|WritableConstantStringObjectInspector
name|wcsoi
init|=
operator|(
name|WritableConstantStringObjectInspector
operator|)
name|oi
decl_stmt|;
return|return
name|wcsoi
operator|.
name|getWritableConstantValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableStringObjectInspector
condition|)
block|{
comment|// some UDFs may emit strings of variable length. like pattern matching
comment|// UDFs. it's hard to find the length of such UDFs.
comment|// return the variable length from config
return|return
name|configVarLen
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|VARCHAR_TYPE_NAME
argument_list|)
condition|)
block|{
comment|// constant varchar projection
if|if
condition|(
name|oi
operator|instanceof
name|ConstantObjectInspector
condition|)
block|{
name|ConstantObjectInspector
name|coi
init|=
operator|(
name|ConstantObjectInspector
operator|)
name|oi
decl_stmt|;
comment|// if writable constant is null then return size 0
if|if
condition|(
name|coi
operator|.
name|getWritableConstantValue
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|coi
operator|.
name|getWritableConstantValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableConstantHiveVarcharObjectInspector
condition|)
block|{
name|WritableConstantHiveVarcharObjectInspector
name|wcsoi
init|=
operator|(
name|WritableConstantHiveVarcharObjectInspector
operator|)
name|oi
decl_stmt|;
return|return
name|wcsoi
operator|.
name|getWritableConstantValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableHiveVarcharObjectInspector
condition|)
block|{
return|return
operator|(
operator|(
name|WritableHiveVarcharObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getMaxLength
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|CHAR_TYPE_NAME
argument_list|)
condition|)
block|{
comment|// constant char projection
if|if
condition|(
name|oi
operator|instanceof
name|ConstantObjectInspector
condition|)
block|{
name|ConstantObjectInspector
name|coi
init|=
operator|(
name|ConstantObjectInspector
operator|)
name|oi
decl_stmt|;
comment|// if writable constant is null then return size 0
if|if
condition|(
name|coi
operator|.
name|getWritableConstantValue
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|coi
operator|.
name|getWritableConstantValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableConstantHiveCharObjectInspector
condition|)
block|{
name|WritableConstantHiveCharObjectInspector
name|wcsoi
init|=
operator|(
name|WritableConstantHiveCharObjectInspector
operator|)
name|oi
decl_stmt|;
return|return
name|wcsoi
operator|.
name|getWritableConstantValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableHiveCharObjectInspector
condition|)
block|{
return|return
operator|(
operator|(
name|WritableHiveCharObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getMaxLength
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|BINARY_TYPE_NAME
argument_list|)
condition|)
block|{
comment|// constant byte arrays
if|if
condition|(
name|oi
operator|instanceof
name|ConstantObjectInspector
condition|)
block|{
name|ConstantObjectInspector
name|coi
init|=
operator|(
name|ConstantObjectInspector
operator|)
name|oi
decl_stmt|;
comment|// if writable constant is null then return size 0
if|if
condition|(
name|coi
operator|.
name|getWritableConstantValue
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|BytesWritable
name|bw
init|=
operator|(
operator|(
name|BytesWritable
operator|)
name|coi
operator|.
name|getWritableConstantValue
argument_list|()
operator|)
decl_stmt|;
return|return
name|bw
operator|.
name|getLength
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableConstantBinaryObjectInspector
condition|)
block|{
comment|// writable constant byte arrays
name|WritableConstantBinaryObjectInspector
name|wcboi
init|=
operator|(
name|WritableConstantBinaryObjectInspector
operator|)
name|oi
decl_stmt|;
return|return
name|wcboi
operator|.
name|getWritableConstantValue
argument_list|()
operator|.
name|getLength
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableBinaryObjectInspector
condition|)
block|{
comment|// return the variable length from config
return|return
name|configVarLen
return|;
block|}
block|}
else|else
block|{
comment|// complex types (map, list, struct, union)
return|return
name|getSizeOfComplexTypes
argument_list|(
name|conf
argument_list|,
name|oi
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Get the size of complex data types    * @param conf    *          - hive conf    * @param oi    *          - object inspector    * @return raw data size    */
specifier|public
specifier|static
name|long
name|getSizeOfComplexTypes
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|)
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
name|int
name|listEntries
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_LIST_NUM_ENTRIES
argument_list|)
decl_stmt|;
name|int
name|mapEntries
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_MAP_NUM_ENTRIES
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
name|String
name|colType
init|=
name|oi
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|VARCHAR_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|CHAR_TYPE_NAME
argument_list|)
condition|)
block|{
name|int
name|avgColLen
init|=
operator|(
name|int
operator|)
name|getAvgColLenOfVariableLengthTypes
argument_list|(
name|conf
argument_list|,
name|oi
argument_list|,
name|colType
argument_list|)
decl_stmt|;
name|result
operator|+=
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthForStringOfLength
argument_list|(
name|avgColLen
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|BINARY_TYPE_NAME
argument_list|)
condition|)
block|{
name|int
name|avgColLen
init|=
operator|(
name|int
operator|)
name|getAvgColLenOfVariableLengthTypes
argument_list|(
name|conf
argument_list|,
name|oi
argument_list|,
name|colType
argument_list|)
decl_stmt|;
name|result
operator|+=
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthForByteArrayOfSize
argument_list|(
name|avgColLen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|+=
name|getAvgColLenOfFixedLengthTypes
argument_list|(
name|colType
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LIST
case|:
if|if
condition|(
name|oi
operator|instanceof
name|StandardConstantListObjectInspector
condition|)
block|{
comment|// constant list projection of known length
name|StandardConstantListObjectInspector
name|scloi
init|=
operator|(
name|StandardConstantListObjectInspector
operator|)
name|oi
decl_stmt|;
name|length
operator|=
name|scloi
operator|.
name|getWritableConstantValue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// check if list elements are primitive or Objects
name|ObjectInspector
name|leoi
init|=
name|scloi
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
name|leoi
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
argument_list|)
condition|)
block|{
name|result
operator|+=
name|getSizeOfPrimitiveTypeArraysFromType
argument_list|(
name|leoi
operator|.
name|getTypeName
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|+=
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthForObjectArrayOfSize
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|StandardListObjectInspector
name|sloi
init|=
operator|(
name|StandardListObjectInspector
operator|)
name|oi
decl_stmt|;
comment|// list overhead + (configured number of element in list * size of element)
name|long
name|elemSize
init|=
name|getSizeOfComplexTypes
argument_list|(
name|conf
argument_list|,
name|sloi
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|+=
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|arrayList
argument_list|()
operator|+
operator|(
name|listEntries
operator|*
name|elemSize
operator|)
expr_stmt|;
block|}
break|break;
case|case
name|MAP
case|:
if|if
condition|(
name|oi
operator|instanceof
name|StandardConstantMapObjectInspector
condition|)
block|{
comment|// constant map projection of known length
name|StandardConstantMapObjectInspector
name|scmoi
init|=
operator|(
name|StandardConstantMapObjectInspector
operator|)
name|oi
decl_stmt|;
name|result
operator|+=
name|getSizeOfMap
argument_list|(
name|scmoi
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StandardMapObjectInspector
name|smoi
init|=
operator|(
name|StandardMapObjectInspector
operator|)
name|oi
decl_stmt|;
name|result
operator|+=
name|getSizeOfComplexTypes
argument_list|(
name|conf
argument_list|,
name|smoi
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|+=
name|getSizeOfComplexTypes
argument_list|(
name|conf
argument_list|,
name|smoi
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
comment|// hash map overhead
name|result
operator|+=
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|hashMap
argument_list|(
name|mapEntries
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STRUCT
case|:
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
comment|// add constant object overhead for struct
name|result
operator|+=
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|object
argument_list|()
expr_stmt|;
comment|// add constant struct field names references overhead
name|result
operator|+=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|size
argument_list|()
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|ref
argument_list|()
expr_stmt|;
for|for
control|(
name|StructField
name|field
range|:
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
control|)
block|{
name|result
operator|+=
name|getSizeOfComplexTypes
argument_list|(
name|conf
argument_list|,
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|UNION
case|:
name|UnionObjectInspector
name|uoi
init|=
operator|(
name|UnionObjectInspector
operator|)
name|oi
decl_stmt|;
comment|// add constant object overhead for union
name|result
operator|+=
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|object
argument_list|()
expr_stmt|;
comment|// add constant size for unions tags
name|result
operator|+=
name|uoi
operator|.
name|getObjectInspectors
argument_list|()
operator|.
name|size
argument_list|()
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive1
argument_list|()
expr_stmt|;
for|for
control|(
name|ObjectInspector
name|foi
range|:
name|uoi
operator|.
name|getObjectInspectors
argument_list|()
control|)
block|{
name|result
operator|+=
name|getSizeOfComplexTypes
argument_list|(
name|conf
argument_list|,
name|foi
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get size of fixed length primitives    * @param colType    *          - column type    * @return raw data size    */
specifier|public
specifier|static
name|long
name|getAvgColLenOfFixedLengthTypes
parameter_list|(
name|String
name|colType
parameter_list|)
block|{
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|INT_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
argument_list|)
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive1
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive2
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_TYPE_NAME
argument_list|)
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthOfTimestamp
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|DATE_TYPE_NAME
argument_list|)
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthOfDate
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
argument_list|)
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthOfDecimal
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
comment|/**    * Get the size of arrays of primitive types    * @param colType    *          - column type    * @param length    *          - array length    * @return raw data size    */
specifier|public
specifier|static
name|long
name|getSizeOfPrimitiveTypeArraysFromType
parameter_list|(
name|String
name|colType
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|INT_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
argument_list|)
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthForIntArrayOfSize
argument_list|(
name|length
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|)
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthForDoubleArrayOfSize
argument_list|(
name|length
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthForLongArrayOfSize
argument_list|(
name|length
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|BINARY_TYPE_NAME
argument_list|)
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthForByteArrayOfSize
argument_list|(
name|length
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|)
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthForBooleanArrayOfSize
argument_list|(
name|length
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_TYPE_NAME
argument_list|)
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthForTimestampArrayOfSize
argument_list|(
name|length
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|DATE_TYPE_NAME
argument_list|)
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthForDateArrayOfSize
argument_list|(
name|length
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
argument_list|)
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthForDecimalArrayOfSize
argument_list|(
name|length
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
comment|/**    * Estimate the size of map object    * @param scmoi    *          - object inspector    * @return size of map    */
specifier|public
specifier|static
name|long
name|getSizeOfMap
parameter_list|(
name|StandardConstantMapObjectInspector
name|scmoi
parameter_list|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|scmoi
operator|.
name|getWritableConstantValue
argument_list|()
decl_stmt|;
name|ObjectInspector
name|koi
init|=
name|scmoi
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|voi
init|=
name|scmoi
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|result
operator|+=
name|getWritableSize
argument_list|(
name|koi
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|+=
name|getWritableSize
argument_list|(
name|voi
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add additional overhead of each map entries
name|result
operator|+=
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|hashMap
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Get size of primitive data types based on their respective writable object inspector    * @param oi    *          - object inspector    * @param value    *          - value    * @return raw data size    */
specifier|public
specifier|static
name|long
name|getWritableSize
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|oi
operator|instanceof
name|WritableStringObjectInspector
condition|)
block|{
name|WritableStringObjectInspector
name|woi
init|=
operator|(
name|WritableStringObjectInspector
operator|)
name|oi
decl_stmt|;
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthForStringOfLength
argument_list|(
name|woi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|value
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableBinaryObjectInspector
condition|)
block|{
name|WritableBinaryObjectInspector
name|woi
init|=
operator|(
name|WritableBinaryObjectInspector
operator|)
name|oi
decl_stmt|;
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthForByteArrayOfSize
argument_list|(
name|woi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|value
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableBooleanObjectInspector
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive1
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableByteObjectInspector
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive1
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableDateObjectInspector
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthOfDate
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableDoubleObjectInspector
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive2
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableFloatObjectInspector
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive1
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableHiveDecimalObjectInspector
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthOfDecimal
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableIntObjectInspector
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive1
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableLongObjectInspector
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive2
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableShortObjectInspector
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive1
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|WritableTimestampObjectInspector
condition|)
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthOfTimestamp
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Get column statistics from parent statistics.    * @param conf    *          - hive conf    * @param parentStats    *          - parent statistics    * @param colExprMap    *          - column expression map    * @param rowSchema    *          - row schema    * @return column statistics    */
specifier|public
specifier|static
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|getColStatisticsFromExprMap
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|Statistics
name|parentStats
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
parameter_list|,
name|RowSchema
name|rowSchema
parameter_list|)
block|{
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|cs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|colExprMap
operator|!=
literal|null
operator|&&
name|rowSchema
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ColumnInfo
name|ci
range|:
name|rowSchema
operator|.
name|getSignature
argument_list|()
control|)
block|{
name|String
name|outColName
init|=
name|ci
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
name|outColName
operator|=
name|StatsUtils
operator|.
name|stripPrefixFromColumnName
argument_list|(
name|outColName
argument_list|)
expr_stmt|;
name|String
name|outTabAlias
init|=
name|ci
operator|.
name|getTabAlias
argument_list|()
decl_stmt|;
name|ExprNodeDesc
name|end
init|=
name|colExprMap
operator|.
name|get
argument_list|(
name|outColName
argument_list|)
decl_stmt|;
name|ColStatistics
name|colStat
init|=
name|getColStatisticsFromExpression
argument_list|(
name|conf
argument_list|,
name|parentStats
argument_list|,
name|end
argument_list|)
decl_stmt|;
if|if
condition|(
name|colStat
operator|!=
literal|null
condition|)
block|{
name|outColName
operator|=
name|StatsUtils
operator|.
name|stripPrefixFromColumnName
argument_list|(
name|outColName
argument_list|)
expr_stmt|;
name|colStat
operator|.
name|setColumnName
argument_list|(
name|outColName
argument_list|)
expr_stmt|;
name|colStat
operator|.
name|setTableAlias
argument_list|(
name|outTabAlias
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|colStat
operator|!=
literal|null
condition|)
block|{
name|cs
operator|.
name|add
argument_list|(
name|colStat
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cs
return|;
block|}
comment|// In cases where column expression map or row schema is missing, just pass on the parent column
comment|// stats. This could happen in cases like TS -> FIL where FIL does not map input column names to
comment|// internal names.
if|if
condition|(
name|colExprMap
operator|==
literal|null
operator|||
name|rowSchema
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|parentStats
operator|.
name|getColumnStats
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cs
operator|.
name|addAll
argument_list|(
name|parentStats
operator|.
name|getColumnStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cs
return|;
block|}
comment|/**    * Get column statistics expression nodes    * @param conf    *          - hive conf    * @param parentStats    *          - parent statistics    * @param end    *          - expression nodes    * @return column statistics    */
specifier|public
specifier|static
name|ColStatistics
name|getColStatisticsFromExpression
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|Statistics
name|parentStats
parameter_list|,
name|ExprNodeDesc
name|end
parameter_list|)
block|{
if|if
condition|(
name|end
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|colName
init|=
literal|null
decl_stmt|;
name|String
name|colType
init|=
literal|null
decl_stmt|;
name|double
name|avgColSize
init|=
literal|0
decl_stmt|;
name|long
name|countDistincts
init|=
literal|0
decl_stmt|;
name|long
name|numNulls
init|=
literal|0
decl_stmt|;
name|ObjectInspector
name|oi
init|=
literal|null
decl_stmt|;
name|long
name|numRows
init|=
name|parentStats
operator|.
name|getNumRows
argument_list|()
decl_stmt|;
name|String
name|tabAlias
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|end
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
comment|// column projection
name|ExprNodeColumnDesc
name|encd
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|end
decl_stmt|;
name|colName
operator|=
name|encd
operator|.
name|getColumn
argument_list|()
expr_stmt|;
name|tabAlias
operator|=
name|encd
operator|.
name|getTabAlias
argument_list|()
expr_stmt|;
name|colName
operator|=
name|stripPrefixFromColumnName
argument_list|(
name|colName
argument_list|)
expr_stmt|;
if|if
condition|(
name|encd
operator|.
name|getIsPartitionColOrVirtualCol
argument_list|()
condition|)
block|{
name|ColStatistics
name|colStats
init|=
name|parentStats
operator|.
name|getColumnStatisticsFromColName
argument_list|(
name|colName
argument_list|)
decl_stmt|;
if|if
condition|(
name|colStats
operator|!=
literal|null
condition|)
block|{
comment|/* If statistics for the column already exist use it. */
return|return
name|colStats
return|;
block|}
comment|// virtual columns
name|colType
operator|=
name|encd
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getTypeName
argument_list|()
expr_stmt|;
name|countDistincts
operator|=
name|numRows
expr_stmt|;
name|oi
operator|=
name|encd
operator|.
name|getWritableObjectInspector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// clone the column stats and return
name|ColStatistics
name|result
init|=
name|parentStats
operator|.
name|getColumnStatisticsForColumn
argument_list|(
name|tabAlias
argument_list|,
name|colName
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|result
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|end
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
comment|// constant projection
name|ExprNodeConstantDesc
name|encd
init|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|end
decl_stmt|;
comment|// null projection
if|if
condition|(
name|encd
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|colName
operator|=
name|encd
operator|.
name|getName
argument_list|()
expr_stmt|;
name|colType
operator|=
literal|"null"
expr_stmt|;
name|numNulls
operator|=
name|numRows
expr_stmt|;
block|}
else|else
block|{
name|colName
operator|=
name|encd
operator|.
name|getName
argument_list|()
expr_stmt|;
name|colType
operator|=
name|encd
operator|.
name|getTypeString
argument_list|()
expr_stmt|;
name|countDistincts
operator|=
literal|1
expr_stmt|;
name|oi
operator|=
name|encd
operator|.
name|getWritableObjectInspector
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|end
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
comment|// udf projection
name|ExprNodeGenericFuncDesc
name|engfd
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|end
decl_stmt|;
name|colName
operator|=
name|engfd
operator|.
name|getName
argument_list|()
expr_stmt|;
name|colType
operator|=
name|engfd
operator|.
name|getTypeString
argument_list|()
expr_stmt|;
name|countDistincts
operator|=
name|numRows
expr_stmt|;
name|oi
operator|=
name|engfd
operator|.
name|getWritableObjectInspector
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|end
operator|instanceof
name|ExprNodeNullDesc
condition|)
block|{
comment|// null projection
name|ExprNodeNullDesc
name|ennd
init|=
operator|(
name|ExprNodeNullDesc
operator|)
name|end
decl_stmt|;
name|colName
operator|=
name|ennd
operator|.
name|getName
argument_list|()
expr_stmt|;
name|colType
operator|=
literal|"null"
expr_stmt|;
name|numNulls
operator|=
name|numRows
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|end
operator|instanceof
name|ExprNodeColumnListDesc
condition|)
block|{
comment|// column list
name|ExprNodeColumnListDesc
name|encd
init|=
operator|(
name|ExprNodeColumnListDesc
operator|)
name|end
decl_stmt|;
name|colName
operator|=
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|encd
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|colType
operator|=
literal|"array"
expr_stmt|;
name|countDistincts
operator|=
name|numRows
expr_stmt|;
name|oi
operator|=
name|encd
operator|.
name|getWritableObjectInspector
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|end
operator|instanceof
name|ExprNodeFieldDesc
condition|)
block|{
comment|// field within complex type
name|ExprNodeFieldDesc
name|enfd
init|=
operator|(
name|ExprNodeFieldDesc
operator|)
name|end
decl_stmt|;
name|colName
operator|=
name|enfd
operator|.
name|getFieldName
argument_list|()
expr_stmt|;
name|colType
operator|=
name|enfd
operator|.
name|getTypeString
argument_list|()
expr_stmt|;
name|countDistincts
operator|=
name|numRows
expr_stmt|;
name|oi
operator|=
name|enfd
operator|.
name|getWritableObjectInspector
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|BINARY_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|VARCHAR_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|CHAR_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|LIST_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|MAP_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|STRUCT_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|UNION_TYPE_NAME
argument_list|)
condition|)
block|{
name|avgColSize
operator|=
name|getAvgColLenOfVariableLengthTypes
argument_list|(
name|conf
argument_list|,
name|oi
argument_list|,
name|colType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|avgColSize
operator|=
name|getAvgColLenOfFixedLengthTypes
argument_list|(
name|colType
argument_list|)
expr_stmt|;
block|}
name|ColStatistics
name|colStats
init|=
operator|new
name|ColStatistics
argument_list|(
name|tabAlias
argument_list|,
name|colName
argument_list|,
name|colType
argument_list|)
decl_stmt|;
name|colStats
operator|.
name|setAvgColLen
argument_list|(
name|avgColSize
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setCountDistint
argument_list|(
name|countDistincts
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setNumNulls
argument_list|(
name|numNulls
argument_list|)
expr_stmt|;
return|return
name|colStats
return|;
block|}
comment|/**    * Get number of rows of a give table    * @return number of rows    */
specifier|public
specifier|static
name|long
name|getNumRows
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
return|return
name|getBasicStatForTable
argument_list|(
name|table
argument_list|,
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
return|;
block|}
comment|/**    * Get raw data size of a give table    * @return raw data size    */
specifier|public
specifier|static
name|long
name|getRawDataSize
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
return|return
name|getBasicStatForTable
argument_list|(
name|table
argument_list|,
name|StatsSetupConst
operator|.
name|RAW_DATA_SIZE
argument_list|)
return|;
block|}
comment|/**    * Get total size of a give table    * @return total size    */
specifier|public
specifier|static
name|long
name|getTotalSize
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
return|return
name|getBasicStatForTable
argument_list|(
name|table
argument_list|,
name|StatsSetupConst
operator|.
name|TOTAL_SIZE
argument_list|)
return|;
block|}
comment|/**    * Get basic stats of table    * @param table    *          - table    * @param statType    *          - type of stats    * @return value of stats    */
specifier|public
specifier|static
name|long
name|getBasicStatForTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|String
name|statType
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|table
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|long
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|result
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|statType
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|result
operator|=
literal|0
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get basic stats of partitions    * @param table    *          - table    * @param parts    *          - partitions    * @param statType    *          - type of stats    * @return value of stats    */
specifier|public
specifier|static
name|List
argument_list|<
name|Long
argument_list|>
name|getBasicStatForPartitions
parameter_list|(
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
parameter_list|,
name|String
name|statType
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|stats
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|part
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|long
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|result
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|statType
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|result
operator|=
literal|0
expr_stmt|;
block|}
name|stats
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|stats
return|;
block|}
comment|/**    * Compute raw data size from column statistics    * @param numRows    *          - number of rows    * @param colStats    *          - column statistics    * @return raw data size    */
specifier|public
specifier|static
name|long
name|getDataSizeFromColumnStats
parameter_list|(
name|long
name|numRows
parameter_list|,
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|colStats
parameter_list|)
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|numRows
operator|<=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
for|for
control|(
name|ColStatistics
name|cs
range|:
name|colStats
control|)
block|{
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|String
name|colType
init|=
name|cs
operator|.
name|getColumnType
argument_list|()
decl_stmt|;
name|long
name|nonNullCount
init|=
name|numRows
operator|-
name|cs
operator|.
name|getNumNulls
argument_list|()
decl_stmt|;
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|INT_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|)
condition|)
block|{
name|result
operator|+=
name|nonNullCount
operator|*
name|cs
operator|.
name|getAvgColLen
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|VARCHAR_TYPE_NAME
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|CHAR_TYPE_NAME
argument_list|)
condition|)
block|{
name|int
name|acl
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|cs
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|+=
name|nonNullCount
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthForStringOfLength
argument_list|(
name|acl
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|BINARY_TYPE_NAME
argument_list|)
condition|)
block|{
name|int
name|acl
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|cs
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|+=
name|nonNullCount
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthForByteArrayOfSize
argument_list|(
name|acl
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_TYPE_NAME
argument_list|)
condition|)
block|{
name|result
operator|+=
name|nonNullCount
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthOfTimestamp
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|startsWith
argument_list|(
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
argument_list|)
condition|)
block|{
name|result
operator|+=
name|nonNullCount
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthOfDecimal
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|DATE_TYPE_NAME
argument_list|)
condition|)
block|{
name|result
operator|+=
name|nonNullCount
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthOfDate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|+=
name|nonNullCount
operator|*
name|cs
operator|.
name|getAvgColLen
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Remove KEY/VALUE prefix from column name    * @param colName    *          - column name    * @return column name    */
specifier|public
specifier|static
name|String
name|stripPrefixFromColumnName
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
name|String
name|stripedName
init|=
name|colName
decl_stmt|;
if|if
condition|(
name|colName
operator|.
name|startsWith
argument_list|(
literal|"KEY"
argument_list|)
operator|||
name|colName
operator|.
name|startsWith
argument_list|(
literal|"VALUE"
argument_list|)
condition|)
block|{
comment|// strip off KEY./VALUE. from column name
name|stripedName
operator|=
name|colName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
index|[
literal|1
index|]
expr_stmt|;
block|}
return|return
name|stripedName
return|;
block|}
comment|/**    * Returns fully qualified name of column    * @param tabName    * @param colName    * @return    */
specifier|public
specifier|static
name|String
name|getFullyQualifiedColumnName
parameter_list|(
name|String
name|tabName
parameter_list|,
name|String
name|colName
parameter_list|)
block|{
return|return
name|getFullyQualifiedName
argument_list|(
literal|null
argument_list|,
name|tabName
argument_list|,
name|colName
argument_list|)
return|;
block|}
comment|/**    * Returns fully qualified name of column    * @param dbName    * @param tabName    * @param colName    * @return    */
specifier|public
specifier|static
name|String
name|getFullyQualifiedColumnName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tabName
parameter_list|,
name|String
name|colName
parameter_list|)
block|{
return|return
name|getFullyQualifiedName
argument_list|(
name|dbName
argument_list|,
name|tabName
argument_list|,
name|colName
argument_list|)
return|;
block|}
comment|/**    * Returns fully qualified name of column    * @param dbName    * @param tabName    * @param partName    * @param colName    * @return    */
specifier|public
specifier|static
name|String
name|getFullyQualifiedColumnName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tabName
parameter_list|,
name|String
name|partName
parameter_list|,
name|String
name|colName
parameter_list|)
block|{
return|return
name|getFullyQualifiedName
argument_list|(
name|dbName
argument_list|,
name|tabName
argument_list|,
name|partName
argument_list|,
name|colName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getFullyQualifiedTableName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tabName
parameter_list|)
block|{
return|return
name|getFullyQualifiedName
argument_list|(
name|dbName
argument_list|,
name|tabName
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getFullyQualifiedName
parameter_list|(
name|String
modifier|...
name|names
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nonNullAndEmptyNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nonNullAndEmptyNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|join
argument_list|(
name|nonNullAndEmptyNames
argument_list|)
return|;
block|}
comment|/**    * Try to get fully qualified column name from expression node    * @param keyExprs    *          - expression nodes    * @param map    *          - column expression map    * @return list of fully qualified names    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getFullQualifedColNameFromExprs
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyExprs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|map
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyExprs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|end
range|:
name|keyExprs
control|)
block|{
name|String
name|outColName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isSame
argument_list|(
name|end
argument_list|)
condition|)
block|{
name|outColName
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|outColName
operator|=
name|stripPrefixFromColumnName
argument_list|(
name|outColName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|end
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|encd
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|end
decl_stmt|;
if|if
condition|(
name|outColName
operator|==
literal|null
condition|)
block|{
name|outColName
operator|=
name|encd
operator|.
name|getColumn
argument_list|()
expr_stmt|;
name|outColName
operator|=
name|stripPrefixFromColumnName
argument_list|(
name|outColName
argument_list|)
expr_stmt|;
block|}
name|String
name|tabAlias
init|=
name|encd
operator|.
name|getTabAlias
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|getFullyQualifiedColumnName
argument_list|(
name|tabAlias
argument_list|,
name|outColName
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|end
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
name|ExprNodeGenericFuncDesc
name|enf
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|end
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
name|getFullQualifedColNameFromExprs
argument_list|(
name|enf
operator|.
name|getChildren
argument_list|()
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|String
name|joinedStr
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|skipNulls
argument_list|()
operator|.
name|join
argument_list|(
name|cols
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|joinedStr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|end
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
name|ExprNodeConstantDesc
name|encd
init|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|end
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|encd
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Returns all table aliases from expression nodes    * @param columnExprMap - column expression map    * @return    */
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getAllTableAlias
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|columnExprMap
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnExprMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|end
range|:
name|columnExprMap
operator|.
name|values
argument_list|()
control|)
block|{
name|getTableAliasFromExprNode
argument_list|(
name|end
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|void
name|getTableAliasFromExprNode
parameter_list|(
name|ExprNodeDesc
name|end
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|output
parameter_list|)
block|{
if|if
condition|(
name|end
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|output
operator|.
name|add
argument_list|(
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|end
operator|)
operator|.
name|getTabAlias
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|end
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|child
range|:
name|end
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|getTableAliasFromExprNode
argument_list|(
name|child
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|long
name|getAvailableMemory
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|memory
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETEZCONTAINERSIZE
argument_list|)
operator|>
literal|0
condition|?
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETEZCONTAINERSIZE
argument_list|)
else|:
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MAP_MEMORY_MB
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MAP_MEMORY_MB
argument_list|)
decl_stmt|;
return|return
name|memory
return|;
block|}
block|}
end_class

end_unit

