begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|exprNodeFieldDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|InspectableObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_class
specifier|public
class|class
name|ExprNodeFieldEvaluator
extends|extends
name|ExprNodeEvaluator
block|{
specifier|protected
name|exprNodeFieldDesc
name|desc
decl_stmt|;
specifier|transient
name|ExprNodeEvaluator
name|leftEvaluator
decl_stmt|;
specifier|transient
name|InspectableObject
name|leftInspectableObject
decl_stmt|;
specifier|transient
name|StructObjectInspector
name|cachedLeftObjectInspector
decl_stmt|;
specifier|transient
name|StructField
name|field
decl_stmt|;
specifier|transient
name|ObjectInspector
name|fieldObjectInspector
decl_stmt|;
specifier|public
name|ExprNodeFieldEvaluator
parameter_list|(
name|exprNodeFieldDesc
name|desc
parameter_list|)
block|{
name|this
operator|.
name|desc
operator|=
name|desc
expr_stmt|;
name|leftEvaluator
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|desc
operator|.
name|getDesc
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|=
literal|null
expr_stmt|;
name|leftInspectableObject
operator|=
operator|new
name|InspectableObject
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|evaluate
parameter_list|(
name|Object
name|row
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|,
name|InspectableObject
name|result
parameter_list|)
throws|throws
name|HiveException
block|{
assert|assert
operator|(
name|result
operator|!=
literal|null
operator|)
assert|;
comment|// Get the result in leftInspectableObject
name|leftEvaluator
operator|.
name|evaluate
argument_list|(
name|row
argument_list|,
name|rowInspector
argument_list|,
name|leftInspectableObject
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|cachedLeftObjectInspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|leftInspectableObject
operator|.
name|oi
expr_stmt|;
name|field
operator|=
name|cachedLeftObjectInspector
operator|.
name|getStructFieldRef
argument_list|(
name|desc
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|fieldObjectInspector
operator|=
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
assert|assert
operator|(
name|cachedLeftObjectInspector
operator|==
name|leftInspectableObject
operator|.
name|oi
operator|)
assert|;
block|}
name|result
operator|.
name|oi
operator|=
name|fieldObjectInspector
expr_stmt|;
name|result
operator|.
name|o
operator|=
name|cachedLeftObjectInspector
operator|.
name|getStructFieldData
argument_list|(
name|leftInspectableObject
operator|.
name|o
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ObjectInspector
name|evaluateInspector
parameter_list|(
name|ObjectInspector
name|rowInspector
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// If this is the first row, or the dynamic structure of the evaluatorInspectableObject
comment|// is different from the previous row
name|leftInspectableObject
operator|.
name|oi
operator|=
name|leftEvaluator
operator|.
name|evaluateInspector
argument_list|(
name|rowInspector
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|cachedLeftObjectInspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|leftInspectableObject
operator|.
name|oi
expr_stmt|;
name|field
operator|=
name|cachedLeftObjectInspector
operator|.
name|getStructFieldRef
argument_list|(
name|desc
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|fieldObjectInspector
operator|=
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
assert|assert
operator|(
name|cachedLeftObjectInspector
operator|==
name|leftInspectableObject
operator|.
name|oi
operator|)
assert|;
block|}
return|return
name|fieldObjectInspector
return|;
block|}
block|}
end_class

end_unit

