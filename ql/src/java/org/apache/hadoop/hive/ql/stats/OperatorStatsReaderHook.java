begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|TezTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ExecuteWithHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookContext
operator|.
name|HookType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|PrivateHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BaseWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|counters
operator|.
name|TezCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|counters
operator|.
name|TezCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|OperatorStatsReaderHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OperatorStatsReaderHook
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|collectOnSuccess
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|hookContext
operator|.
name|getHookType
argument_list|()
operator|==
name|HookType
operator|.
name|PRE_EXEC_HOOK
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|hookContext
operator|.
name|getHookType
argument_list|()
operator|==
name|HookType
operator|.
name|POST_EXEC_HOOK
operator|&&
operator|!
name|isCollectOnSuccess
argument_list|()
condition|)
block|{
return|return;
block|}
name|HiveConf
name|conf
init|=
name|hookContext
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|QueryPlan
name|plan
init|=
name|hookContext
operator|.
name|getQueryPlan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TezTask
argument_list|>
name|rootTasks
init|=
name|Utilities
operator|.
name|getTezTasks
argument_list|(
name|plan
operator|.
name|getRootTasks
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TezTask
name|tezTask
range|:
name|rootTasks
control|)
block|{
name|List
argument_list|<
name|BaseWork
argument_list|>
name|baseWorks
init|=
name|tezTask
operator|.
name|getWork
argument_list|()
operator|.
name|getAllWork
argument_list|()
decl_stmt|;
for|for
control|(
name|BaseWork
name|baseWork
range|:
name|baseWorks
control|)
block|{
name|String
name|vertexName
init|=
name|baseWork
operator|.
name|getName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reading runtime statistics for tez vertex task: {}"
argument_list|,
name|vertexName
argument_list|)
expr_stmt|;
name|TezCounters
name|counters
init|=
name|tezTask
operator|.
name|getTezCounters
argument_list|()
decl_stmt|;
if|if
condition|(
name|counters
operator|!=
literal|null
condition|)
block|{
name|String
name|groupName
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECOUNTERGROUP
argument_list|)
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|baseWork
operator|.
name|getAllOperators
argument_list|()
control|)
block|{
name|String
name|operatorId
init|=
name|op
operator|.
name|getOperatorId
argument_list|()
decl_stmt|;
name|OperatorStats
name|operatorStats
init|=
literal|null
decl_stmt|;
name|String
name|counterName
init|=
name|Operator
operator|.
name|Counter
operator|.
name|RECORDS_OUT_OPERATOR
operator|.
name|toString
argument_list|()
operator|+
literal|"_"
operator|+
name|operatorId
decl_stmt|;
name|TezCounter
name|tezCounter
init|=
name|counters
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
operator|.
name|findCounter
argument_list|(
name|counterName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|tezCounter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|operatorStats
operator|==
literal|null
condition|)
block|{
name|operatorStats
operator|=
operator|new
name|OperatorStats
argument_list|(
name|operatorId
argument_list|)
expr_stmt|;
block|}
name|operatorStats
operator|.
name|setOutputRecords
argument_list|(
name|tezCounter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|operatorStats
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|PrivateHookContext
operator|)
name|hookContext
operator|)
operator|.
name|getContext
argument_list|()
operator|.
name|getPlanMapper
argument_list|()
operator|.
name|link
argument_list|(
name|op
argument_list|,
name|operatorStats
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unable to get statistics for vertex: {} opId: {} groupName: {}"
argument_list|,
name|vertexName
argument_list|,
name|operatorId
argument_list|,
name|groupName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|public
name|boolean
name|isCollectOnSuccess
parameter_list|()
block|{
return|return
name|collectOnSuccess
return|;
block|}
specifier|public
name|void
name|setCollectOnSuccess
parameter_list|(
name|boolean
name|collectOnSuccess
parameter_list|)
block|{
name|this
operator|.
name|collectOnSuccess
operator|=
name|collectOnSuccess
expr_stmt|;
block|}
block|}
end_class

end_unit

