begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_comment
comment|/**  * Class to keep information on a set of typed vector columns.  Used by  * other classes to efficiently access the set of columns.  */
end_comment

begin_class
specifier|public
class|class
name|VectorColumnSetInfo
block|{
comment|// For simpler access, we make these members protected instead of
comment|// providing get methods.
comment|/**    * indices of LONG primitive keys.    */
specifier|public
name|int
index|[]
name|longIndices
decl_stmt|;
comment|/**    * indices of DOUBLE primitive keys.    */
specifier|public
name|int
index|[]
name|doubleIndices
decl_stmt|;
comment|/**    * indices of string (byte[]) primitive keys.    */
specifier|public
name|int
index|[]
name|stringIndices
decl_stmt|;
comment|/**    * indices of decimal primitive keys.    */
specifier|public
name|int
index|[]
name|decimalIndices
decl_stmt|;
comment|/**    * indices of TIMESTAMP primitive keys.    */
specifier|public
name|int
index|[]
name|timestampIndices
decl_stmt|;
comment|/**    * indices of INTERVAL_DAY_TIME primitive keys.    */
specifier|public
name|int
index|[]
name|intervalDayTimeIndices
decl_stmt|;
specifier|final
specifier|public
name|int
name|keyCount
decl_stmt|;
specifier|private
name|int
name|addKeyIndex
decl_stmt|;
specifier|private
name|int
name|addLongIndex
decl_stmt|;
specifier|private
name|int
name|addDoubleIndex
decl_stmt|;
specifier|private
name|int
name|addStringIndex
decl_stmt|;
specifier|private
name|int
name|addDecimalIndex
decl_stmt|;
specifier|private
name|int
name|addTimestampIndex
decl_stmt|;
specifier|private
name|int
name|addIntervalDayTimeIndex
decl_stmt|;
comment|// Given the keyIndex these arrays return:
comment|//   The ColumnVector.Type,
comment|//   The type specific index into longIndices, doubleIndices, etc...
specifier|public
name|TypeInfo
index|[]
name|typeInfos
decl_stmt|;
specifier|public
name|ColumnVector
operator|.
name|Type
index|[]
name|columnVectorTypes
decl_stmt|;
specifier|public
name|int
index|[]
name|columnTypeSpecificIndices
decl_stmt|;
specifier|protected
name|VectorColumnSetInfo
parameter_list|(
name|int
name|keyCount
parameter_list|)
block|{
name|this
operator|.
name|keyCount
operator|=
name|keyCount
expr_stmt|;
name|this
operator|.
name|addKeyIndex
operator|=
literal|0
expr_stmt|;
comment|// We'll over allocate and then shrink the array for each type
name|longIndices
operator|=
operator|new
name|int
index|[
name|this
operator|.
name|keyCount
index|]
expr_stmt|;
name|addLongIndex
operator|=
literal|0
expr_stmt|;
name|doubleIndices
operator|=
operator|new
name|int
index|[
name|this
operator|.
name|keyCount
index|]
expr_stmt|;
name|addDoubleIndex
operator|=
literal|0
expr_stmt|;
name|stringIndices
operator|=
operator|new
name|int
index|[
name|this
operator|.
name|keyCount
index|]
expr_stmt|;
name|addStringIndex
operator|=
literal|0
expr_stmt|;
name|decimalIndices
operator|=
operator|new
name|int
index|[
name|this
operator|.
name|keyCount
index|]
expr_stmt|;
name|addDecimalIndex
operator|=
literal|0
expr_stmt|;
name|timestampIndices
operator|=
operator|new
name|int
index|[
name|this
operator|.
name|keyCount
index|]
expr_stmt|;
name|addTimestampIndex
operator|=
literal|0
expr_stmt|;
name|intervalDayTimeIndices
operator|=
operator|new
name|int
index|[
name|this
operator|.
name|keyCount
index|]
expr_stmt|;
name|addIntervalDayTimeIndex
operator|=
literal|0
expr_stmt|;
name|typeInfos
operator|=
operator|new
name|TypeInfo
index|[
name|this
operator|.
name|keyCount
index|]
expr_stmt|;
name|columnVectorTypes
operator|=
operator|new
name|ColumnVector
operator|.
name|Type
index|[
name|this
operator|.
name|keyCount
index|]
expr_stmt|;
name|columnTypeSpecificIndices
operator|=
operator|new
name|int
index|[
name|this
operator|.
name|keyCount
index|]
expr_stmt|;
block|}
specifier|protected
name|void
name|addKey
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
throws|throws
name|HiveException
block|{
name|Type
name|columnVectorType
init|=
name|VectorizationContext
operator|.
name|getColumnVectorTypeFromTypeInfo
argument_list|(
name|typeInfo
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|columnVectorType
condition|)
block|{
case|case
name|LONG
case|:
case|case
name|DECIMAL_64
case|:
name|longIndices
index|[
name|addLongIndex
index|]
operator|=
name|addKeyIndex
expr_stmt|;
name|columnTypeSpecificIndices
index|[
name|addKeyIndex
index|]
operator|=
name|addLongIndex
operator|++
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|doubleIndices
index|[
name|addDoubleIndex
index|]
operator|=
name|addKeyIndex
expr_stmt|;
name|columnTypeSpecificIndices
index|[
name|addKeyIndex
index|]
operator|=
name|addDoubleIndex
operator|++
expr_stmt|;
break|break;
case|case
name|BYTES
case|:
name|stringIndices
index|[
name|addStringIndex
index|]
operator|=
name|addKeyIndex
expr_stmt|;
name|columnTypeSpecificIndices
index|[
name|addKeyIndex
index|]
operator|=
name|addStringIndex
operator|++
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|decimalIndices
index|[
name|addDecimalIndex
index|]
operator|=
name|addKeyIndex
expr_stmt|;
name|columnTypeSpecificIndices
index|[
name|addKeyIndex
index|]
operator|=
name|addDecimalIndex
operator|++
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|timestampIndices
index|[
name|addTimestampIndex
index|]
operator|=
name|addKeyIndex
expr_stmt|;
name|columnTypeSpecificIndices
index|[
name|addKeyIndex
index|]
operator|=
name|addTimestampIndex
operator|++
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
name|intervalDayTimeIndices
index|[
name|addIntervalDayTimeIndex
index|]
operator|=
name|addKeyIndex
expr_stmt|;
name|columnTypeSpecificIndices
index|[
name|addKeyIndex
index|]
operator|=
name|addIntervalDayTimeIndex
operator|++
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unexpected column vector type "
operator|+
name|columnVectorType
argument_list|)
throw|;
block|}
name|typeInfos
index|[
name|addKeyIndex
index|]
operator|=
name|typeInfo
expr_stmt|;
name|columnVectorTypes
index|[
name|addKeyIndex
index|]
operator|=
name|columnVectorType
expr_stmt|;
name|addKeyIndex
operator|++
expr_stmt|;
block|}
specifier|protected
name|void
name|finishAdding
parameter_list|()
throws|throws
name|HiveException
block|{
name|longIndices
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|longIndices
argument_list|,
name|addLongIndex
argument_list|)
expr_stmt|;
name|doubleIndices
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|doubleIndices
argument_list|,
name|addDoubleIndex
argument_list|)
expr_stmt|;
name|stringIndices
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|stringIndices
argument_list|,
name|addStringIndex
argument_list|)
expr_stmt|;
name|decimalIndices
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|decimalIndices
argument_list|,
name|addDecimalIndex
argument_list|)
expr_stmt|;
name|timestampIndices
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|timestampIndices
argument_list|,
name|addTimestampIndex
argument_list|)
expr_stmt|;
name|intervalDayTimeIndices
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|intervalDayTimeIndices
argument_list|,
name|addIntervalDayTimeIndex
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

