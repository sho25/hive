begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_comment
comment|/**  * The Hive class contains information about this instance of Hive.  * An instance of Hive represents a set of data in a file system (usually HDFS)  * organized for easy query processing  *  */
end_comment

begin_class
specifier|public
class|class
name|Hive
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"hive.ql.metadata.Hive"
argument_list|)
decl_stmt|;
specifier|static
name|Hive
name|db
init|=
literal|null
decl_stmt|;
specifier|private
name|HiveConf
name|conf
init|=
literal|null
decl_stmt|;
specifier|private
name|ThreadLocal
argument_list|<
name|IMetaStoreClient
argument_list|>
name|threadLocalMSC
init|=
operator|new
name|ThreadLocal
argument_list|()
block|{
specifier|protected
specifier|synchronized
name|Object
name|initialValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|remove
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|IMetaStoreClient
operator|)
name|this
operator|.
name|get
argument_list|()
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**    * Returns hive object for the current thread. If one is not initialized then a new one is created     * If the new configuration is different in metadata conf vars then a new one is created.    * @param c new Hive Configuration    * @return Hive object for current thread    * @exception    *    */
specifier|public
specifier|static
name|Hive
name|get
parameter_list|(
name|HiveConf
name|c
parameter_list|)
throws|throws
name|HiveException
block|{
name|boolean
name|needsRefresh
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HiveConf
operator|.
name|ConfVars
name|oneVar
range|:
name|HiveConf
operator|.
name|metaVars
control|)
block|{
name|String
name|oldVar
init|=
name|db
operator|.
name|getConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|oneVar
argument_list|)
decl_stmt|;
name|String
name|newVar
init|=
name|c
operator|.
name|getVar
argument_list|(
name|oneVar
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldVar
operator|.
name|compareToIgnoreCase
argument_list|(
name|newVar
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|needsRefresh
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|get
argument_list|(
name|c
argument_list|,
name|needsRefresh
argument_list|)
return|;
block|}
comment|/**    * get a connection to metastore. see get(HiveConf) function for comments    * @param c new conf    * @param needsRefresh if true then creates a new one    * @return    * @throws HiveException    */
specifier|public
specifier|static
name|Hive
name|get
parameter_list|(
name|HiveConf
name|c
parameter_list|,
name|boolean
name|needsRefresh
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|db
operator|==
literal|null
operator|||
name|needsRefresh
condition|)
block|{
name|closeCurrent
argument_list|()
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
literal|"fs.scheme.class"
argument_list|,
literal|"dfs"
argument_list|)
expr_stmt|;
name|db
operator|=
operator|new
name|Hive
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|db
return|;
block|}
specifier|public
specifier|static
name|Hive
name|get
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
name|db
operator|=
operator|new
name|Hive
argument_list|(
operator|new
name|HiveConf
argument_list|(
name|Hive
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|db
return|;
block|}
specifier|public
specifier|static
name|void
name|closeCurrent
parameter_list|()
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Hive    *    * @param argFsRoot    * @param c    *    */
specifier|private
name|Hive
parameter_list|(
name|HiveConf
name|c
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
operator|.
name|conf
operator|=
name|c
expr_stmt|;
block|}
comment|/**    * closes the connection to metastore for the calling thread    */
specifier|private
name|void
name|close
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing current thread's connection to Hive Metastore."
argument_list|)
expr_stmt|;
name|db
operator|.
name|threadLocalMSC
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates a table metdata and the directory for the table data    * @param tableName name of the table    * @param columns list of fields of the table    * @param partCols partition keys of the table    * @param fileInputFormat Class of the input format of the table data file    * @param fileOutputFormat Class of the output format of the table data file    * @throws HiveException thrown if the args are invalid or if the metadata or the data directory couldn't be created    */
specifier|public
name|void
name|createTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partCols
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|fileInputFormat
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|fileOutputFormat
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|columns
argument_list|,
name|partCols
argument_list|,
name|fileInputFormat
argument_list|,
name|fileOutputFormat
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a table metdata and the directory for the table data    * @param tableName name of the table    * @param columns list of fields of the table    * @param partCols partition keys of the table    * @param fileInputFormat Class of the input format of the table data file    * @param fileOutputFormat Class of the output format of the table data file    * @param bucketCount number of buckets that each partition (or the table itself) should be divided into    * @throws HiveException thrown if the args are invalid or if the metadata or the data directory couldn't be created    */
specifier|public
name|void
name|createTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partCols
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|fileInputFormat
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|fileOutputFormat
parameter_list|,
name|int
name|bucketCount
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|columns
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"columns not specified for table "
operator|+
name|tableName
argument_list|)
throw|;
block|}
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|setInputFormatClass
argument_list|(
name|fileInputFormat
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setOutputFormatClass
argument_list|(
name|fileOutputFormat
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|col
range|:
name|columns
control|)
block|{
name|FieldSchema
name|field
init|=
operator|new
name|FieldSchema
argument_list|(
name|col
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|tbl
operator|.
name|getCols
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|partCols
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|partCol
range|:
name|partCols
control|)
block|{
name|FieldSchema
name|part
init|=
operator|new
name|FieldSchema
argument_list|()
decl_stmt|;
name|part
operator|.
name|setName
argument_list|(
name|partCol
argument_list|)
expr_stmt|;
name|part
operator|.
name|setType
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
comment|// default partition key
name|tbl
operator|.
name|getPartCols
argument_list|()
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|MetadataTypedColumnsetSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setNumBuckets
argument_list|(
name|bucketCount
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setBucketCols
argument_list|(
name|bucketCols
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates the existing table metadata with the new metadata.     * @param tblName name of the existing table    * @param newTbl new name of the table. could be the old name    * @throws InvalidOperationException if the changes in metadata is not acceptable    * @throws TException    */
specifier|public
name|void
name|alterTable
parameter_list|(
name|String
name|tblName
parameter_list|,
name|Table
name|newTbl
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|HiveException
block|{
try|try
block|{
name|getMSC
argument_list|()
operator|.
name|alter_table
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tblName
argument_list|,
name|newTbl
operator|.
name|getTTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unable to alter table."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unable to alter table."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates the table with the give objects    * @param tbl a table object    * @throws HiveException    */
specifier|public
name|void
name|createTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|HiveException
block|{
name|createTable
argument_list|(
name|tbl
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates the table with the give objects    * @param tbl a table object    * @param ifNotExists if true, ignore AlreadyExistsException    * @throws HiveException    */
specifier|public
name|void
name|createTable
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|tbl
operator|.
name|initSerDe
argument_list|()
expr_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|tbl
operator|.
name|setFields
argument_list|(
name|MetaStoreUtils
operator|.
name|getFieldsFromDeserializer
argument_list|(
name|tbl
operator|.
name|getName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getDeserializer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tbl
operator|.
name|checkValidity
argument_list|()
expr_stmt|;
name|getMSC
argument_list|()
operator|.
name|createTable
argument_list|(
name|tbl
operator|.
name|getTTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ifNotExists
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Drops table along with the data in it. If the table doesn't exist then it is a no-op    * @param tableName    * @throws HiveException    * @deprecated Use {@link #dropTable(String, String)} instead    */
specifier|public
name|void
name|dropTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|HiveException
block|{
name|dropTable
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Drops table along with the data in it. If the table doesn't exist    * then it is a no-op    * @param dbName database where the table lives    * @param tableName table to drop    * @throws HiveException thrown if the drop fails    */
specifier|public
name|void
name|dropTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|HiveException
block|{
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Drops the table.     * @param tableName    * @param deleteData deletes the underlying data along with metadata    * @param ignoreUnknownTab an exception if thrown if this is falser    * and table doesn't exist    * @throws HiveException    * @deprecated Use {@link #dropTable(String, String, boolean, boolean)} instead    */
specifier|public
name|void
name|dropTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownTab
parameter_list|)
throws|throws
name|HiveException
block|{
name|dropTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|,
name|deleteData
argument_list|,
name|ignoreUnknownTab
argument_list|)
expr_stmt|;
block|}
comment|/**    * Drops the table.     * @param tableName    * @param deleteData deletes the underlying data along with metadata    * @param ignoreUnknownTab an exception if thrown if this is falser and    * table doesn't exist    * @throws HiveException    */
specifier|public
name|void
name|dropTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownTab
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|getMSC
argument_list|()
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|deleteData
argument_list|,
name|ignoreUnknownTab
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ignoreUnknownTab
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|HiveConf
name|getConf
parameter_list|()
block|{
return|return
operator|(
name|conf
operator|)
return|;
block|}
comment|/**    * Returns metadata of the table.     * @param tableName the name of the table    * @return the table    * @exception HiveException if there's an internal error or if the     * table doesn't exist     * @deprecated Use {@link #getTable(String, String)} instead    */
specifier|public
name|Table
name|getTable
parameter_list|(
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
name|this
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Returns metadata of the table.     * @param dbName the name of the database    * @param tableName the name of the table    * @return the table    * @exception HiveException if there's an internal error or if the     * table doesn't exist     */
specifier|public
name|Table
name|getTable
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
name|this
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Returns metadata of the table    * @param tableName the name of the table    * @param throwException controls whether an exception is     * thrown or a null returned    * @return the table or if something false and     * throwException is false a null value.    * @throws HiveException    * @deprecated Use {@link #getTable(String, String, boolean)} instead    */
specifier|public
name|Table
name|getTable
parameter_list|(
specifier|final
name|String
name|tableName
parameter_list|,
name|boolean
name|throwException
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
name|getTable
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|,
name|throwException
argument_list|)
return|;
block|}
comment|/**    * Returns metadata of the table    * @param dbName the name of the database    * @param tableName the name of the table    * @param throwException controls whether an exception is thrown     * or a returns a null    * @return the table or if throwException is false a null value.    * @throws HiveException    */
specifier|public
name|Table
name|getTable
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
name|boolean
name|throwException
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
operator|||
name|tableName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"empty table creation??"
argument_list|)
throw|;
block|}
name|Table
name|table
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|tTable
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tTable
operator|=
name|getMSC
argument_list|()
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwException
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidTableException
argument_list|(
literal|"Table not found "
argument_list|,
name|tableName
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unable to fetch table "
operator|+
name|tableName
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// just a sanity check
assert|assert
operator|(
name|tTable
operator|!=
literal|null
operator|)
assert|;
try|try
block|{
comment|// first get a schema (in key / vals)
name|Properties
name|p
init|=
name|MetaStoreUtils
operator|.
name|getSchema
argument_list|(
name|tTable
argument_list|)
decl_stmt|;
comment|// Map hive1 to hive3 class names, can be removed when migration is done.
name|p
operator|=
name|MetaStoreUtils
operator|.
name|hive1Tohive3ClassNames
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|table
operator|.
name|setSchema
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|table
operator|.
name|setTTable
argument_list|(
name|tTable
argument_list|)
expr_stmt|;
name|table
operator|.
name|setInputFormatClass
argument_list|(
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|table
operator|.
name|getSchema
argument_list|()
operator|.
name|getProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Constants
operator|.
name|FILE_INPUT_FORMAT
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setOutputFormatClass
argument_list|(
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|table
operator|.
name|getSchema
argument_list|()
operator|.
name|getProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Constants
operator|.
name|FILE_OUTPUT_FORMAT
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setDeserializer
argument_list|(
name|MetaStoreUtils
operator|.
name|getDeserializer
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setDataLocation
argument_list|(
operator|new
name|URI
argument_list|(
name|tTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|String
name|sf
init|=
name|table
operator|.
name|getSerdeParam
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|char
index|[]
name|b
init|=
name|sf
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|b
operator|.
name|length
operator|==
literal|1
operator|)
operator|&&
operator|(
name|b
index|[
literal|0
index|]
operator|<
literal|10
operator|)
condition|)
block|{
comment|// ^A, ^B, ^C, ^D, \t
name|table
operator|.
name|setSerdeParam
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|b
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|checkValidity
argument_list|()
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTables
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
name|getTablesByPattern
argument_list|(
literal|".*"
argument_list|)
return|;
block|}
comment|/**    * returns all existing tables that match the given pattern. The matching occurs as per Java regular expressions    * @param tablePattern java re pattern    * @return list of table names    * @throws HiveException    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTablesByPattern
parameter_list|(
name|String
name|tablePattern
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
return|return
name|getMSC
argument_list|()
operator|.
name|getTables
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tablePattern
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// for testing purposes
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getTablesForDb
parameter_list|(
name|String
name|database
parameter_list|,
name|String
name|tablePattern
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
return|return
name|getMSC
argument_list|()
operator|.
name|getTables
argument_list|(
name|database
argument_list|,
name|tablePattern
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param name    * @param location_uri    * @return    * @throws AlreadyExistsException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.HiveMetaStoreClient#createDatabase(java.lang.String, java.lang.String)    */
specifier|protected
name|boolean
name|createDatabase
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|locationUri
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|getMSC
argument_list|()
operator|.
name|createDatabase
argument_list|(
name|name
argument_list|,
name|locationUri
argument_list|)
return|;
block|}
comment|/**    * @param name    * @return    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.HiveMetaStoreClient#dropDatabase(java.lang.String)    */
specifier|protected
name|boolean
name|dropDatabase
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|getMSC
argument_list|()
operator|.
name|dropDatabase
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Load a directory into a Hive Table Partition    * - Alters existing content of the partition with the contents of loadPath.    * - If he partition does not exist - one is created    * - files in loadPath are moved into Hive. But the directory itself is not removed.    *    * @param jc Job configuration    * @param loadPath Directory containing files to load into Table    * @param tableName name of table to be loaded.    * @param partSpec defines which partition needs to be loaded    * @param replace if true - replace files in the partition, otherwise add files to the partition    */
specifier|public
name|void
name|loadPartition
parameter_list|(
name|Path
name|loadPath
parameter_list|,
name|String
name|tableName
parameter_list|,
name|AbstractMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|,
name|boolean
name|replace
parameter_list|)
throws|throws
name|HiveException
block|{
name|Table
name|tbl
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Partition
name|part
init|=
name|getPartition
argument_list|(
name|tbl
argument_list|,
name|partSpec
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|replace
condition|)
block|{
name|part
operator|.
name|replaceFiles
argument_list|(
name|loadPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|part
operator|.
name|copyFiles
argument_list|(
name|loadPath
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Load a directory into a Hive Table.    * - Alters existing content of table with the contents of loadPath.    * - If table does not exist - an exception is thrown    * - files in loadPath are moved into Hive. But the directory itself is not removed.    *    * @param jc Job configuration    * @param loadPath Directory containing files to load into Table    * @param tableName name of table to be loaded.    * @param replace if true - replace files in the table, otherwise add files to table    */
specifier|public
name|void
name|loadTable
parameter_list|(
name|Path
name|loadPath
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|replace
parameter_list|)
throws|throws
name|HiveException
block|{
name|Table
name|tbl
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|replace
condition|)
block|{
name|tbl
operator|.
name|replaceFiles
argument_list|(
name|loadPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tbl
operator|.
name|copyFiles
argument_list|(
name|loadPath
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a partition     * @param tbl table for which partition needs to be created    * @param partSpec partition keys and their values    * @return created partition object    * @throws HiveException if table doesn't exist or partition already exists    */
specifier|public
name|Partition
name|createPartition
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|)
throws|throws
name|HiveException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
name|tpart
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|pvals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|field
range|:
name|tbl
operator|.
name|getPartCols
argument_list|()
control|)
block|{
name|pvals
operator|.
name|add
argument_list|(
name|partSpec
operator|.
name|get
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|tpart
operator|=
name|getMSC
argument_list|()
operator|.
name|appendPartition
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getName
argument_list|()
argument_list|,
name|pvals
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|Partition
argument_list|(
name|tbl
argument_list|,
name|tpart
argument_list|)
return|;
block|}
comment|/**    * Returns partition metadata    * @param tableName name of the partition's table    * @param partSpec partition keys and values    * @param forceCreate if this is true and partition doesn't exist then a partition is created    * @return result partition object or null if there is no partition    * @throws HiveException    */
specifier|public
name|Partition
name|getPartition
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|,
name|boolean
name|forceCreate
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|tbl
operator|.
name|isValidSpec
argument_list|(
name|partSpec
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Invalid partition: "
operator|+
name|partSpec
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|pvals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|field
range|:
name|tbl
operator|.
name|getPartCols
argument_list|()
control|)
block|{
name|String
name|val
init|=
name|partSpec
operator|.
name|get
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
operator|||
name|val
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Value for key "
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|" is null or empty"
argument_list|)
throw|;
block|}
name|pvals
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
name|tpart
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tpart
operator|=
name|getMSC
argument_list|()
operator|.
name|getPartition
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getName
argument_list|()
argument_list|,
name|pvals
argument_list|)
expr_stmt|;
if|if
condition|(
name|tpart
operator|==
literal|null
operator|&&
name|forceCreate
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating partition for table "
operator|+
name|tbl
operator|.
name|getName
argument_list|()
operator|+
literal|" with partition spec : "
operator|+
name|partSpec
argument_list|)
expr_stmt|;
name|tpart
operator|=
name|getMSC
argument_list|()
operator|.
name|appendPartition
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getName
argument_list|()
argument_list|,
name|pvals
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
if|if
condition|(
name|tpart
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|Partition
argument_list|(
name|tbl
argument_list|,
name|tpart
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
return|return
name|getMSC
argument_list|()
operator|.
name|dropPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|deleteData
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Partition or table doesn't exist."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unknow error. Please check logs."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPartitionNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|short
name|max
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
name|names
init|=
literal|null
decl_stmt|;
try|try
block|{
name|names
operator|=
name|getMSC
argument_list|()
operator|.
name|listPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|names
return|;
block|}
comment|/**    * get all the partitions that the table has    * @param tbl object for which partition is needed    * @return list of partition objects    * @throws HiveException    */
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitions
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|tbl
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
argument_list|>
name|tParts
decl_stmt|;
try|try
block|{
name|tParts
operator|=
name|getMSC
argument_list|()
operator|.
name|listPartitions
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|(
name|tParts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
name|tpart
range|:
name|tParts
control|)
block|{
name|parts
operator|.
name|add
argument_list|(
operator|new
name|Partition
argument_list|(
name|tbl
argument_list|,
name|tpart
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|parts
return|;
block|}
else|else
block|{
comment|// create an empty partition.
comment|// HACK, HACK. SemanticAnalyzer code requires that an empty partition when the table is not partitioned
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
name|tPart
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
argument_list|()
decl_stmt|;
name|tPart
operator|.
name|setSd
argument_list|(
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: get a copy
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|tbl
argument_list|,
name|tPart
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|parts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
return|return
name|parts
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|needsDeletion
parameter_list|(
name|FileStatus
name|file
parameter_list|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// There is a race condition in hadoop as a result of which
comment|// the _task files created in the output directory at the time
comment|// of the mapper is reported in the output directory even though
comment|// it is actually removed. The first check works around that
comment|// NOTE: it's not clear that this still affects recent versions of hadoop
comment|// the second check deals with uncommitted output files produced by hive tasks
comment|// this would typically happen on task failures or due to speculation
return|return
operator|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"_task"
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
literal|"_tmp."
argument_list|)
operator|)
return|;
block|}
specifier|private
name|void
name|checkPaths
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
index|[]
name|srcs
parameter_list|,
name|Path
name|destf
parameter_list|,
name|boolean
name|replace
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FileStatus
index|[]
name|items
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|srcs
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|items
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|needsDeletion
argument_list|(
name|items
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|items
index|[
name|j
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|items
index|[
name|j
index|]
operator|.
name|isDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"checkPaths: "
operator|+
name|srcs
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|" has nested directory"
operator|+
name|items
index|[
name|j
index|]
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|Path
name|tmpDest
init|=
operator|new
name|Path
argument_list|(
name|destf
argument_list|,
name|items
index|[
name|j
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|replace
operator|&&
name|fs
operator|.
name|exists
argument_list|(
name|tmpDest
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"checkPaths: "
operator|+
name|tmpDest
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"checkPaths: filesystem error in check phase"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|copyFiles
parameter_list|(
name|Path
name|srcf
parameter_list|,
name|Path
name|destf
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|HiveException
block|{
name|FileStatus
index|[]
name|srcs
decl_stmt|;
try|try
block|{
name|srcs
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
name|srcf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"addFiles: filesystem error in check phase"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|srcs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No sources specified to move: "
operator|+
name|srcf
argument_list|)
expr_stmt|;
return|return;
comment|//srcs = new FileStatus[0]; Why is this needed?
block|}
comment|// check that source and target paths exist
name|checkPaths
argument_list|(
name|fs
argument_list|,
name|srcs
argument_list|,
name|destf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// move it, move it
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FileStatus
index|[]
name|items
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|srcs
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|items
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|fs
operator|.
name|rename
argument_list|(
name|items
index|[
name|j
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|destf
argument_list|,
name|items
index|[
name|j
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"addFiles: error while moving files!!!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Replaces files in the partition with new data set specifed by srcf. Works by moving files    *    * @param srcf Files to be moved. Leaf Directories or Globbed File Paths    */
specifier|protected
name|void
name|replaceFiles
parameter_list|(
name|Path
name|srcf
parameter_list|,
name|Path
name|destf
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|HiveException
block|{
name|FileStatus
index|[]
name|srcs
decl_stmt|;
try|try
block|{
name|srcs
operator|=
name|fs
operator|.
name|globStatus
argument_list|(
name|srcf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"addFiles: filesystem error in check phase"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|srcs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No sources specified to move: "
operator|+
name|srcf
argument_list|)
expr_stmt|;
return|return;
comment|//srcs = new FileStatus[0]; Why is this needed?
block|}
name|checkPaths
argument_list|(
name|fs
argument_list|,
name|srcs
argument_list|,
name|destf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Random
name|randGen
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|Path
name|tmppath
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/"
operator|+
name|randGen
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|tmppath
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FileStatus
index|[]
name|items
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|srcs
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|items
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|boolean
name|b
init|=
name|fs
operator|.
name|rename
argument_list|(
name|items
index|[
name|j
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|tmppath
argument_list|,
name|items
index|[
name|j
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renaming:"
operator|+
name|items
index|[
name|j
index|]
operator|+
literal|",Status:"
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
block|}
comment|// point of no return
name|boolean
name|b
init|=
name|fs
operator|.
name|delete
argument_list|(
name|destf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting:"
operator|+
name|destf
operator|.
name|toString
argument_list|()
operator|+
literal|",Status:"
operator|+
name|b
argument_list|)
expr_stmt|;
name|b
operator|=
name|fs
operator|.
name|rename
argument_list|(
name|tmppath
argument_list|,
name|destf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renaming:"
operator|+
name|tmppath
operator|.
name|toString
argument_list|()
operator|+
literal|",Status:"
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"replaceFiles: error while moving files!!!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|fs
operator|.
name|delete
argument_list|(
name|tmppath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable delete path "
operator|+
name|tmppath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @return    * @throws HiveMetaException     */
specifier|private
name|IMetaStoreClient
name|createMetaStoreClient
parameter_list|()
throws|throws
name|MetaException
block|{
name|boolean
name|useFileStore
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"hive.metastore.usefilestore"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|useFileStore
condition|)
block|{
return|return
operator|new
name|HiveMetaStoreClient
argument_list|(
name|this
operator|.
name|conf
argument_list|)
return|;
block|}
return|return
operator|new
name|MetaStoreClient
argument_list|(
name|this
operator|.
name|conf
argument_list|)
return|;
block|}
comment|/**    *     * @return the metastore client for the current thread    * @throws MetaException    */
specifier|private
name|IMetaStoreClient
name|getMSC
parameter_list|()
throws|throws
name|MetaException
block|{
name|IMetaStoreClient
name|msc
init|=
name|threadLocalMSC
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|msc
operator|==
literal|null
condition|)
block|{
name|msc
operator|=
name|this
operator|.
name|createMetaStoreClient
argument_list|()
expr_stmt|;
block|}
return|return
name|msc
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getFieldsFromDeserializer
parameter_list|(
name|String
name|name
parameter_list|,
name|Deserializer
name|serde
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
return|return
name|MetaStoreUtils
operator|.
name|getFieldsFromDeserializer
argument_list|(
name|name
argument_list|,
name|serde
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Error in getting fields from serde. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Error in getting fields from serde."
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

