begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|recipes
operator|.
name|leader
operator|.
name|LeaderLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|DefaultMetaStoreFilterHookImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeGrantInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
operator|.
name|HivePrivilegeObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveResourceACLs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * PrivilegeSynchonizer defines a thread to synchronize privileges from  * external authorizer to Hive metastore.  */
end_comment

begin_class
specifier|public
class|class
name|PrivilegeSynchonizer
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PrivilegeSynchonizer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|GRANTOR
init|=
literal|"ranger"
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|hiveClient
decl_stmt|;
specifier|private
name|LeaderLatch
name|privilegeSynchonizerLatch
decl_stmt|;
specifier|private
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
name|PolicyProviderContainer
name|policyProviderContainer
decl_stmt|;
specifier|public
name|PrivilegeSynchonizer
parameter_list|(
name|LeaderLatch
name|privilegeSynchonizerLatch
parameter_list|,
name|PolicyProviderContainer
name|policyProviderContainer
parameter_list|,
name|HiveConf
name|hiveConf
parameter_list|)
block|{
name|this
operator|.
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|this
operator|.
name|hiveConf
operator|.
name|set
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|FILTER_HOOK
operator|.
name|getVarname
argument_list|()
argument_list|,
name|DefaultMetaStoreFilterHookImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|hiveClient
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|this
operator|.
name|hiveConf
argument_list|)
operator|.
name|getMSC
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error creating HiveMetastoreClient"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|privilegeSynchonizerLatch
operator|=
name|privilegeSynchonizerLatch
expr_stmt|;
name|this
operator|.
name|policyProviderContainer
operator|=
name|policyProviderContainer
expr_stmt|;
name|this
operator|.
name|hiveConf
operator|=
name|hiveConf
expr_stmt|;
block|}
specifier|private
name|void
name|addACLsToBag
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|HiveResourceACLs
operator|.
name|Privilege
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
argument_list|>
argument_list|>
name|principalAclsMap
parameter_list|,
name|PrivilegeBag
name|privBag
parameter_list|,
name|HiveObjectType
name|objectType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|authorizer
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|HiveResourceACLs
operator|.
name|Privilege
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
argument_list|>
argument_list|>
name|principalAcls
range|:
name|principalAclsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|principal
init|=
name|principalAcls
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HiveResourceACLs
operator|.
name|Privilege
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
argument_list|>
name|acl
range|:
name|principalAcls
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|acl
operator|.
name|getValue
argument_list|()
operator|==
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
condition|)
block|{
switch|switch
condition|(
name|objectType
condition|)
block|{
case|case
name|DATABASE
case|:
name|privBag
operator|.
name|addToPrivileges
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|principal
argument_list|,
name|principalType
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|acl
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|,
name|GRANTOR
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
argument_list|,
name|authorizer
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE
case|:
name|privBag
operator|.
name|addToPrivileges
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|principal
argument_list|,
name|principalType
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|acl
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|,
name|GRANTOR
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
argument_list|,
name|authorizer
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|COLUMN
case|:
name|privBag
operator|.
name|addToPrivileges
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|COLUMN
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|,
name|columnName
argument_list|)
argument_list|,
name|principal
argument_list|,
name|principalType
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|acl
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|,
name|GRANTOR
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
argument_list|,
name|authorizer
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Get unknown object type "
operator|+
name|objectType
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|HiveObjectRef
name|getObjToRefresh
parameter_list|(
name|HiveObjectType
name|type
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveObjectRef
name|objToRefresh
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DATABASE
case|:
name|objToRefresh
operator|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE
case|:
name|objToRefresh
operator|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
case|case
name|COLUMN
case|:
name|objToRefresh
operator|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|COLUMN
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Get unknown object type "
operator|+
name|type
argument_list|)
throw|;
block|}
return|return
name|objToRefresh
return|;
block|}
specifier|private
name|void
name|addGrantPrivilegesToBag
parameter_list|(
name|HivePolicyProvider
name|policyProvider
parameter_list|,
name|PrivilegeBag
name|privBag
parameter_list|,
name|HiveObjectType
name|type
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|String
name|authorizer
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveResourceACLs
name|objectAcls
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DATABASE
case|:
name|objectAcls
operator|=
name|policyProvider
operator|.
name|getResourceACLs
argument_list|(
operator|new
name|HivePrivilegeObject
argument_list|(
name|HivePrivilegeObjectType
operator|.
name|DATABASE
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE
case|:
name|objectAcls
operator|=
name|policyProvider
operator|.
name|getResourceACLs
argument_list|(
operator|new
name|HivePrivilegeObject
argument_list|(
name|HivePrivilegeObjectType
operator|.
name|TABLE_OR_VIEW
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|COLUMN
case|:
name|objectAcls
operator|=
name|policyProvider
operator|.
name|getResourceACLs
argument_list|(
operator|new
name|HivePrivilegeObject
argument_list|(
name|HivePrivilegeObjectType
operator|.
name|COLUMN
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|,
name|columnName
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Get unknown object type "
operator|+
name|type
argument_list|)
throw|;
block|}
if|if
condition|(
name|objectAcls
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|addACLsToBag
argument_list|(
name|objectAcls
operator|.
name|getUserPermissions
argument_list|()
argument_list|,
name|privBag
argument_list|,
name|type
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|columnName
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
name|addACLsToBag
argument_list|(
name|objectAcls
operator|.
name|getGroupPermissions
argument_list|()
argument_list|,
name|privBag
argument_list|,
name|type
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|columnName
argument_list|,
name|PrincipalType
operator|.
name|GROUP
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|interval
init|=
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|hiveConf
argument_list|,
name|ConfVars
operator|.
name|HIVE_PRIVILEGE_SYNCHRONIZER_INTERVAL
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|HivePolicyProvider
name|policyProvider
range|:
name|policyProviderContainer
control|)
block|{
name|String
name|authorizer
init|=
name|policyProvider
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|privilegeSynchonizerLatch
operator|.
name|await
argument_list|(
name|interval
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Start synchonize privilege"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|hiveClient
operator|.
name|getAllDatabases
argument_list|()
control|)
block|{
name|HiveObjectRef
name|dbToRefresh
init|=
name|getObjToRefresh
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|PrivilegeBag
name|grantDatabaseBag
init|=
operator|new
name|PrivilegeBag
argument_list|()
decl_stmt|;
name|addGrantPrivilegesToBag
argument_list|(
name|policyProvider
argument_list|,
name|grantDatabaseBag
argument_list|,
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
name|hiveClient
operator|.
name|refresh_privileges
argument_list|(
name|dbToRefresh
argument_list|,
name|authorizer
argument_list|,
name|grantDatabaseBag
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|hiveClient
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|)
control|)
block|{
name|HiveObjectRef
name|tableToRefresh
init|=
name|getObjToRefresh
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|PrivilegeBag
name|grantTableBag
init|=
operator|new
name|PrivilegeBag
argument_list|()
decl_stmt|;
name|addGrantPrivilegesToBag
argument_list|(
name|policyProvider
argument_list|,
name|grantTableBag
argument_list|,
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
name|hiveClient
operator|.
name|refresh_privileges
argument_list|(
name|tableToRefresh
argument_list|,
name|authorizer
argument_list|,
name|grantTableBag
argument_list|)
expr_stmt|;
name|HiveObjectRef
name|tableOfColumnsToRefresh
init|=
name|getObjToRefresh
argument_list|(
name|HiveObjectType
operator|.
name|COLUMN
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|PrivilegeBag
name|grantColumnBag
init|=
operator|new
name|PrivilegeBag
argument_list|()
decl_stmt|;
name|Table
name|tbl
init|=
name|hiveClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|addGrantPrivilegesToBag
argument_list|(
name|policyProvider
argument_list|,
name|grantColumnBag
argument_list|,
name|HiveObjectType
operator|.
name|COLUMN
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|fs
operator|.
name|getName
argument_list|()
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FieldSchema
name|fs
range|:
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
control|)
block|{
name|addGrantPrivilegesToBag
argument_list|(
name|policyProvider
argument_list|,
name|grantColumnBag
argument_list|,
name|HiveObjectType
operator|.
name|COLUMN
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|fs
operator|.
name|getName
argument_list|()
argument_list|,
name|authorizer
argument_list|)
expr_stmt|;
block|}
name|hiveClient
operator|.
name|refresh_privileges
argument_list|(
name|tableOfColumnsToRefresh
argument_list|,
name|authorizer
argument_list|,
name|grantColumnBag
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Wait if no exception happens, otherwise, retry immediately
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|interval
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Success synchonize privilege"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error initializing PrivilegeSynchonizer: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

