begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ConditionalTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExecDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FetchTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|history
operator|.
name|HiveHistory
operator|.
name|Keys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|PostExecute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|PreExecute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IOPrepareCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UnixUserGroupInformation
import|;
end_import

begin_class
specifier|public
class|class
name|Driver
implements|implements
name|CommandProcessor
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Driver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|LogHelper
name|console
init|=
operator|new
name|LogHelper
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
specifier|private
name|int
name|maxRows
init|=
literal|100
decl_stmt|;
name|ByteStream
operator|.
name|Output
name|bos
init|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|DataInput
name|resStream
decl_stmt|;
specifier|private
name|Context
name|ctx
decl_stmt|;
specifier|private
name|QueryPlan
name|plan
decl_stmt|;
specifier|private
name|Schema
name|schema
decl_stmt|;
specifier|private
name|String
name|errorMessage
decl_stmt|;
specifier|private
name|String
name|SQLState
decl_stmt|;
comment|// A limit on the number of threads that can be launched
specifier|private
name|int
name|maxthreads
decl_stmt|;
specifier|private
specifier|final
name|int
name|sleeptime
init|=
literal|2000
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|()
block|{
name|Operator
operator|.
name|resetId
argument_list|()
expr_stmt|;
block|}
comment|/**    * Return the status information about the Map-Reduce cluster    */
specifier|public
name|ClusterStatus
name|getClusterStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|ClusterStatus
name|cs
decl_stmt|;
try|try
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|ExecDriver
operator|.
name|class
argument_list|)
decl_stmt|;
name|JobClient
name|jc
init|=
operator|new
name|JobClient
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|cs
operator|=
name|jc
operator|.
name|getClusterStatus
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning cluster status: "
operator|+
name|cs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cs
return|;
block|}
specifier|public
name|Schema
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
comment|/**    * Get a Schema with fields represented with native Hive types    */
specifier|public
specifier|static
name|Schema
name|getSchema
parameter_list|(
name|BaseSemanticAnalyzer
name|sem
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
block|{
name|Schema
name|schema
init|=
literal|null
decl_stmt|;
comment|// If we have a plan, prefer its logical result schema if it's
comment|// available; otherwise, try digging out a fetch task; failing that,
comment|// give up.
if|if
condition|(
name|sem
operator|==
literal|null
condition|)
block|{
comment|// can't get any info without a plan
block|}
elseif|else
if|if
condition|(
name|sem
operator|.
name|getResultSchema
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|lst
init|=
name|sem
operator|.
name|getResultSchema
argument_list|()
decl_stmt|;
name|schema
operator|=
operator|new
name|Schema
argument_list|(
name|lst
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sem
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|FetchTask
name|ft
init|=
name|sem
operator|.
name|getFetchTask
argument_list|()
decl_stmt|;
name|TableDesc
name|td
init|=
name|ft
operator|.
name|getTblDesc
argument_list|()
decl_stmt|;
comment|// partitioned tables don't have tableDesc set on the FetchTask. Instead
comment|// they have a list of PartitionDesc objects, each with a table desc.
comment|// Let's
comment|// try to fetch the desc for the first partition and use it's
comment|// deserializer.
if|if
condition|(
name|td
operator|==
literal|null
operator|&&
name|ft
operator|.
name|getWork
argument_list|()
operator|!=
literal|null
operator|&&
name|ft
operator|.
name|getWork
argument_list|()
operator|.
name|getPartDesc
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ft
operator|.
name|getWork
argument_list|()
operator|.
name|getPartDesc
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|td
operator|=
name|ft
operator|.
name|getWork
argument_list|()
operator|.
name|getPartDesc
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTableDesc
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|td
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No returning schema."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|tableName
init|=
literal|"result"
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|lst
init|=
literal|null
decl_stmt|;
try|try
block|{
name|lst
operator|=
name|MetaStoreUtils
operator|.
name|getFieldsFromDeserializer
argument_list|(
name|tableName
argument_list|,
name|td
operator|.
name|getDeserializer
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error getting schema: "
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lst
operator|!=
literal|null
condition|)
block|{
name|schema
operator|=
operator|new
name|Schema
argument_list|(
name|lst
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|schema
operator|=
operator|new
name|Schema
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning Hive schema: "
operator|+
name|schema
argument_list|)
expr_stmt|;
return|return
name|schema
return|;
block|}
comment|/**    * Get a Schema with fields represented with Thrift DDL types    */
specifier|public
name|Schema
name|getThriftSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|Schema
name|schema
decl_stmt|;
try|try
block|{
name|schema
operator|=
name|getSchema
argument_list|()
expr_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|lst
init|=
name|schema
operator|.
name|getFieldSchemas
argument_list|()
decl_stmt|;
comment|// Go over the schema and convert type to thrift type
if|if
condition|(
name|lst
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FieldSchema
name|f
range|:
name|lst
control|)
block|{
name|f
operator|.
name|setType
argument_list|(
name|MetaStoreUtils
operator|.
name|typeToThriftType
argument_list|(
name|f
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning Thrift schema: "
operator|+
name|schema
argument_list|)
expr_stmt|;
return|return
name|schema
return|;
block|}
comment|/**    * Return the maximum number of rows returned by getResults    */
specifier|public
name|int
name|getMaxRows
parameter_list|()
block|{
return|return
name|maxRows
return|;
block|}
comment|/**    * Set the maximum number of rows returned by getResults    */
specifier|public
name|void
name|setMaxRows
parameter_list|(
name|int
name|maxRows
parameter_list|)
block|{
name|this
operator|.
name|maxRows
operator|=
name|maxRows
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasReduceTasks
parameter_list|(
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|tasks
parameter_list|)
block|{
if|if
condition|(
name|tasks
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|hasReduce
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
range|:
name|tasks
control|)
block|{
if|if
condition|(
name|task
operator|.
name|hasReduce
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|hasReduce
operator|=
operator|(
name|hasReduce
operator|||
name|hasReduceTasks
argument_list|(
name|task
operator|.
name|getChildTasks
argument_list|()
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|hasReduce
return|;
block|}
comment|/**    * for backwards compatibility with current tests    */
specifier|public
name|Driver
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
try|try
block|{
name|UnixUserGroupInformation
operator|.
name|login
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Driver
parameter_list|()
block|{
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|conf
operator|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
expr_stmt|;
try|try
block|{
name|UnixUserGroupInformation
operator|.
name|login
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Compile a new query. Any currently-planned query associated with this    * Driver is discarded.    *    * @param command    *          The SQL query to compile.    */
specifier|public
name|int
name|compile
parameter_list|(
name|String
name|command
parameter_list|)
block|{
if|if
condition|(
name|plan
operator|!=
literal|null
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
name|plan
operator|=
literal|null
expr_stmt|;
block|}
name|TaskFactory
operator|.
name|resetId
argument_list|()
expr_stmt|;
try|try
block|{
name|ctx
operator|=
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ParseDriver
name|pd
init|=
operator|new
name|ParseDriver
argument_list|()
decl_stmt|;
name|ASTNode
name|tree
init|=
name|pd
operator|.
name|parse
argument_list|(
name|command
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|tree
operator|=
name|ParseUtils
operator|.
name|findRootNonNullToken
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|BaseSemanticAnalyzer
name|sem
init|=
name|SemanticAnalyzerFactory
operator|.
name|get
argument_list|(
name|conf
argument_list|,
name|tree
argument_list|)
decl_stmt|;
comment|// Do semantic analysis and plan generation
name|sem
operator|.
name|analyze
argument_list|(
name|tree
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Semantic Analysis Completed"
argument_list|)
expr_stmt|;
comment|// validate the plan
name|sem
operator|.
name|validate
argument_list|()
expr_stmt|;
name|plan
operator|=
operator|new
name|QueryPlan
argument_list|(
name|command
argument_list|,
name|sem
argument_list|)
expr_stmt|;
comment|// initialize FetchTask right here
if|if
condition|(
name|plan
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|plan
operator|.
name|getFetchTask
argument_list|()
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|plan
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// get the output schema
name|schema
operator|=
name|getSchema
argument_list|(
name|sem
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// test Only - serialize the query plan and deserialize it
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.serialize.qplan"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|queryPlanFileName
init|=
name|ctx
operator|.
name|getLocalScratchDir
argument_list|(
literal|true
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR_CHAR
operator|+
literal|"queryplan.xml"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"query plan = "
operator|+
name|queryPlanFileName
argument_list|)
expr_stmt|;
name|queryPlanFileName
operator|=
operator|new
name|Path
argument_list|(
name|queryPlanFileName
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
comment|//   serialize the queryPlan
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|queryPlanFileName
argument_list|)
decl_stmt|;
name|Utilities
operator|.
name|serializeQueryPlan
argument_list|(
name|plan
argument_list|,
name|fos
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//   deserialize the queryPlan
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|queryPlanFileName
argument_list|)
decl_stmt|;
name|QueryPlan
name|newPlan
init|=
name|Utilities
operator|.
name|deserializeQueryPlan
argument_list|(
name|fis
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Use the deserialized plan
name|plan
operator|=
name|newPlan
expr_stmt|;
block|}
comment|// initialize FetchTask right here
if|if
condition|(
name|plan
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|plan
operator|.
name|getFetchTask
argument_list|()
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|plan
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
literal|0
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
name|errorMessage
operator|=
literal|"FAILED: Error in semantic analysis: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|SQLState
operator|=
name|ErrorMsg
operator|.
name|findSQLState
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|errorMessage
argument_list|,
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
literal|10
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|errorMessage
operator|=
literal|"FAILED: Parse Error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|SQLState
operator|=
name|ErrorMsg
operator|.
name|findSQLState
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|errorMessage
argument_list|,
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
literal|11
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|errorMessage
operator|=
literal|"FAILED: Hive Internal Error: "
operator|+
name|Utilities
operator|.
name|getNameMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|SQLState
operator|=
name|ErrorMsg
operator|.
name|findSQLState
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|errorMessage
operator|+
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
literal|12
operator|)
return|;
block|}
block|}
comment|/**    * @return The current query plan associated with this Driver, if any.    */
specifier|public
name|QueryPlan
name|getPlan
parameter_list|()
block|{
return|return
name|plan
return|;
block|}
specifier|public
name|CommandProcessorResponse
name|run
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|errorMessage
operator|=
literal|null
expr_stmt|;
name|SQLState
operator|=
literal|null
expr_stmt|;
name|int
name|ret
init|=
name|compile
argument_list|(
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
name|ret
argument_list|,
name|errorMessage
argument_list|,
name|SQLState
argument_list|)
return|;
block|}
name|ret
operator|=
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
name|ret
argument_list|,
name|errorMessage
argument_list|,
name|SQLState
argument_list|)
return|;
block|}
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
name|ret
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|PreExecute
argument_list|>
name|getPreExecHooks
parameter_list|()
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|PreExecute
argument_list|>
name|pehooks
init|=
operator|new
name|ArrayList
argument_list|<
name|PreExecute
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|pestr
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
argument_list|)
decl_stmt|;
name|pestr
operator|=
name|pestr
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|pestr
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
name|pehooks
return|;
block|}
name|String
index|[]
name|peClasses
init|=
name|pestr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|peClass
range|:
name|peClasses
control|)
block|{
try|try
block|{
name|pehooks
operator|.
name|add
argument_list|(
operator|(
name|PreExecute
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|peClass
operator|.
name|trim
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JavaUtils
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Pre Exec Hook Class not found:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
return|return
name|pehooks
return|;
block|}
specifier|private
name|List
argument_list|<
name|PostExecute
argument_list|>
name|getPostExecHooks
parameter_list|()
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|PostExecute
argument_list|>
name|pehooks
init|=
operator|new
name|ArrayList
argument_list|<
name|PostExecute
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|pestr
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
argument_list|)
decl_stmt|;
name|pestr
operator|=
name|pestr
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|pestr
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
name|pehooks
return|;
block|}
name|String
index|[]
name|peClasses
init|=
name|pestr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|peClass
range|:
name|peClasses
control|)
block|{
try|try
block|{
name|pehooks
operator|.
name|add
argument_list|(
operator|(
name|PostExecute
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|peClass
operator|.
name|trim
argument_list|()
argument_list|,
literal|true
argument_list|,
name|JavaUtils
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Post Exec Hook Class not found:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
return|return
name|pehooks
return|;
block|}
specifier|public
name|int
name|execute
parameter_list|()
block|{
name|boolean
name|noName
init|=
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPJOBNAME
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxlen
init|=
name|conf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEJOBNAMELENGTH
argument_list|)
decl_stmt|;
name|int
name|curJobNo
init|=
literal|0
decl_stmt|;
name|String
name|queryId
init|=
name|plan
operator|.
name|getQueryId
argument_list|()
decl_stmt|;
name|String
name|queryStr
init|=
name|plan
operator|.
name|getQueryStr
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|,
name|queryId
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYSTRING
argument_list|,
name|queryStr
argument_list|)
expr_stmt|;
name|maxthreads
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|EXECPARALLETHREADNUMBER
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting command: "
operator|+
name|queryStr
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setStarted
argument_list|()
expr_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|startQuery
argument_list|(
name|queryStr
argument_list|,
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|logPlanProgress
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
name|resStream
operator|=
literal|null
expr_stmt|;
comment|// Get all the pre execution hooks and execute them.
for|for
control|(
name|PreExecute
name|peh
range|:
name|getPreExecHooks
argument_list|()
control|)
block|{
name|peh
operator|.
name|run
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
argument_list|,
name|plan
operator|.
name|getInputs
argument_list|()
argument_list|,
name|plan
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|UnixUserGroupInformation
operator|.
name|readFromConf
argument_list|(
name|conf
argument_list|,
name|UnixUserGroupInformation
operator|.
name|UGI_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|jobs
init|=
name|Utilities
operator|.
name|getMRTasks
argument_list|(
name|plan
operator|.
name|getRootTasks
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|jobs
operator|>
literal|0
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Total MapReduce jobs = "
operator|+
name|jobs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|setQueryProperty
argument_list|(
name|queryId
argument_list|,
name|Keys
operator|.
name|QUERY_NUM_TASKS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|jobs
argument_list|)
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|setIdToTableMap
argument_list|(
name|plan
operator|.
name|getIdToTableNameMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|jobname
init|=
name|Utilities
operator|.
name|abbreviate
argument_list|(
name|queryStr
argument_list|,
name|maxlen
operator|-
literal|6
argument_list|)
decl_stmt|;
comment|// A runtime that launches runnable tasks as separate Threads through
comment|// TaskRunners
comment|// As soon as a task isRunnable, it is put in a queue
comment|// At any time, at most maxthreads tasks can be running
comment|// The main thread polls the TaskRunners to check if they have finished.
name|Queue
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|runnable
init|=
operator|new
name|LinkedList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TaskResult
argument_list|,
name|TaskRunner
argument_list|>
name|running
init|=
operator|new
name|HashMap
argument_list|<
name|TaskResult
argument_list|,
name|TaskRunner
argument_list|>
argument_list|()
decl_stmt|;
name|DriverContext
name|driverCxt
init|=
operator|new
name|DriverContext
argument_list|(
name|runnable
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
comment|// Add root Tasks to runnable
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|plan
operator|.
name|getRootTasks
argument_list|()
control|)
block|{
name|driverCxt
operator|.
name|addToRunnable
argument_list|(
name|tsk
argument_list|)
expr_stmt|;
block|}
comment|// Loop while you either have tasks running, or tasks queued up
while|while
condition|(
name|running
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|||
name|runnable
operator|.
name|peek
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Launch upto maxthreads tasks
while|while
condition|(
name|runnable
operator|.
name|peek
argument_list|()
operator|!=
literal|null
operator|&&
name|running
operator|.
name|size
argument_list|()
operator|<
name|maxthreads
condition|)
block|{
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
init|=
name|runnable
operator|.
name|remove
argument_list|()
decl_stmt|;
name|launchTask
argument_list|(
name|tsk
argument_list|,
name|queryId
argument_list|,
name|noName
argument_list|,
name|running
argument_list|,
name|jobname
argument_list|,
name|jobs
argument_list|,
name|driverCxt
argument_list|)
expr_stmt|;
block|}
comment|// poll the Tasks to see which one completed
name|TaskResult
name|tskRes
init|=
name|pollTasks
argument_list|(
name|running
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|TaskRunner
name|tskRun
init|=
name|running
operator|.
name|remove
argument_list|(
name|tskRes
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
init|=
name|tskRun
operator|.
name|getTask
argument_list|()
decl_stmt|;
name|int
name|exitVal
init|=
name|tskRes
operator|.
name|getExitVal
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitVal
operator|!=
literal|0
condition|)
block|{
comment|// TODO: This error messaging is not very informative. Fix that.
name|errorMessage
operator|=
literal|"FAILED: Execution Error, return code "
operator|+
name|exitVal
operator|+
literal|" from "
operator|+
name|tsk
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|SQLState
operator|=
literal|"08S01"
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
if|if
condition|(
name|running
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|taskCleanup
argument_list|()
expr_stmt|;
block|}
return|return
literal|9
return|;
block|}
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|setTaskProperty
argument_list|(
name|queryId
argument_list|,
name|tsk
operator|.
name|getId
argument_list|()
argument_list|,
name|Keys
operator|.
name|TASK_RET_CODE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|exitVal
argument_list|)
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|endTask
argument_list|(
name|queryId
argument_list|,
name|tsk
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tsk
operator|.
name|getChildTasks
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|child
range|:
name|tsk
operator|.
name|getChildTasks
argument_list|()
control|)
block|{
if|if
condition|(
name|DriverContext
operator|.
name|isLaunchable
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|driverCxt
operator|.
name|addToRunnable
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// in case we decided to run everything in local mode, restore the
comment|// the jobtracker setting to its initial value
name|ctx
operator|.
name|restoreOriginalTracker
argument_list|()
expr_stmt|;
comment|// Get all the post execution hooks and execute them.
for|for
control|(
name|PostExecute
name|peh
range|:
name|getPostExecHooks
argument_list|()
control|)
block|{
name|peh
operator|.
name|run
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
argument_list|,
name|plan
operator|.
name|getInputs
argument_list|()
argument_list|,
name|plan
operator|.
name|getOutputs
argument_list|()
argument_list|,
operator|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|?
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getLineageState
argument_list|()
operator|.
name|getLineageInfo
argument_list|()
else|:
literal|null
operator|)
argument_list|,
name|UnixUserGroupInformation
operator|.
name|readFromConf
argument_list|(
name|conf
argument_list|,
name|UnixUserGroupInformation
operator|.
name|UGI_PROPERTY_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|setQueryProperty
argument_list|(
name|queryId
argument_list|,
name|Keys
operator|.
name|QUERY_RET_CODE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|printRowCount
argument_list|(
name|queryId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|setQueryProperty
argument_list|(
name|queryId
argument_list|,
name|Keys
operator|.
name|QUERY_RET_CODE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: do better with handling types of Exception here
name|errorMessage
operator|=
literal|"FAILED: Hive Internal Error: "
operator|+
name|Utilities
operator|.
name|getNameMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|SQLState
operator|=
literal|"08S01"
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|errorMessage
operator|+
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
literal|12
operator|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|endQuery
argument_list|(
name|queryId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|noName
condition|)
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPJOBNAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
name|plan
operator|.
name|setDone
argument_list|()
expr_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|logPlanProgress
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{       }
block|}
name|console
operator|.
name|printInfo
argument_list|(
literal|"OK"
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
comment|/**    * Launches a new task    *    * @param tsk    *          task being launched    * @param queryId    *          Id of the query containing the task    * @param noName    *          whether the task has a name set    * @param running    *          map from taskresults to taskrunners    * @param jobname    *          name of the task, if it is a map-reduce job    * @param jobs    *          number of map-reduce jobs    * @param curJobNo    *          the sequential number of the next map-reduce job    * @return the updated number of last the map-reduce job launched    */
specifier|public
name|void
name|launchTask
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
parameter_list|,
name|String
name|queryId
parameter_list|,
name|boolean
name|noName
parameter_list|,
name|Map
argument_list|<
name|TaskResult
argument_list|,
name|TaskRunner
argument_list|>
name|running
parameter_list|,
name|String
name|jobname
parameter_list|,
name|int
name|jobs
parameter_list|,
name|DriverContext
name|cxt
parameter_list|)
block|{
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|startTask
argument_list|(
name|queryId
argument_list|,
name|tsk
argument_list|,
name|tsk
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tsk
operator|.
name|isMapRedTask
argument_list|()
operator|&&
operator|!
operator|(
name|tsk
operator|instanceof
name|ConditionalTask
operator|)
condition|)
block|{
if|if
condition|(
name|noName
condition|)
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPJOBNAME
argument_list|,
name|jobname
operator|+
literal|"("
operator|+
name|tsk
operator|.
name|getId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|cxt
operator|.
name|incCurJobNo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Launching Job "
operator|+
name|cxt
operator|.
name|getCurJobNo
argument_list|()
operator|+
literal|" out of "
operator|+
name|jobs
argument_list|)
expr_stmt|;
block|}
name|tsk
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|plan
argument_list|,
name|cxt
argument_list|)
expr_stmt|;
name|TaskResult
name|tskRes
init|=
operator|new
name|TaskResult
argument_list|()
decl_stmt|;
name|TaskRunner
name|tskRun
init|=
operator|new
name|TaskRunner
argument_list|(
name|tsk
argument_list|,
name|tskRes
argument_list|)
decl_stmt|;
comment|// Launch Task
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|EXECPARALLEL
argument_list|)
operator|&&
name|tsk
operator|.
name|isMapRedTask
argument_list|()
condition|)
block|{
comment|// Launch it in the parallel mode, as a separate thread only for MR tasks
name|tskRun
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tskRun
operator|.
name|runSequential
argument_list|()
expr_stmt|;
block|}
name|running
operator|.
name|put
argument_list|(
name|tskRes
argument_list|,
name|tskRun
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/**    * Cleans up remaining tasks in case of failure    */
specifier|public
name|void
name|taskCleanup
parameter_list|()
block|{
comment|// The currently existing Shutdown hooks will be automatically called,
comment|// killing the map-reduce processes.
comment|// The non MR processes will be killed as well.
name|System
operator|.
name|exit
argument_list|(
literal|9
argument_list|)
expr_stmt|;
block|}
comment|/**    * Polls running tasks to see if a task has ended.    *    * @param results    *          Set of result objects for running tasks    * @return The result object for any completed/failed task    */
specifier|public
name|TaskResult
name|pollTasks
parameter_list|(
name|Set
argument_list|<
name|TaskResult
argument_list|>
name|results
parameter_list|)
block|{
name|Iterator
argument_list|<
name|TaskResult
argument_list|>
name|resultIterator
init|=
name|results
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
while|while
condition|(
name|resultIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TaskResult
name|tskRes
init|=
name|resultIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tskRes
operator|.
name|isRunning
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
name|tskRes
return|;
block|}
block|}
comment|// In this loop, nothing was found
comment|// Sleep 10 seconds and restart
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleeptime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// Do Nothing
empty_stmt|;
block|}
name|resultIterator
operator|=
name|results
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|getResults
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|plan
operator|!=
literal|null
operator|&&
name|plan
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|FetchTask
name|ft
init|=
name|plan
operator|.
name|getFetchTask
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setMaxRows
argument_list|(
name|maxRows
argument_list|)
expr_stmt|;
return|return
name|ft
operator|.
name|fetch
argument_list|(
name|res
argument_list|)
return|;
block|}
if|if
condition|(
name|resStream
operator|==
literal|null
condition|)
block|{
name|resStream
operator|=
name|ctx
operator|.
name|getStream
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|resStream
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|numRows
init|=
literal|0
decl_stmt|;
name|String
name|row
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|numRows
operator|<
name|maxRows
condition|)
block|{
if|if
condition|(
name|resStream
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|numRows
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
name|bos
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Utilities
operator|.
name|StreamStatus
name|ss
decl_stmt|;
try|try
block|{
name|ss
operator|=
name|Utilities
operator|.
name|readColumn
argument_list|(
name|resStream
argument_list|,
name|bos
argument_list|)
expr_stmt|;
if|if
condition|(
name|bos
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|row
operator|=
operator|new
name|String
argument_list|(
name|bos
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bos
operator|.
name|getCount
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ss
operator|==
name|Utilities
operator|.
name|StreamStatus
operator|.
name|TERMINATED
condition|)
block|{
name|row
operator|=
operator|new
name|String
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
block|{
name|numRows
operator|++
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"FAILED: Unexpected IO exception : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|ss
operator|==
name|Utilities
operator|.
name|StreamStatus
operator|.
name|EOF
condition|)
block|{
name|resStream
operator|=
name|ctx
operator|.
name|getStream
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|close
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"FAILED: Hive Internal Error: "
operator|+
name|Utilities
operator|.
name|getNameMessage
argument_list|(
name|e
argument_list|)
operator|+
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|13
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Query
name|getQueryPlan
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|plan
operator|.
name|getQueryPlan
argument_list|()
return|;
block|}
block|}
end_class

end_unit

