begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|tree
operator|.
name|CommonTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapRedTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExecDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|Driver
implements|implements
name|CommandProcessor
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"hive.ql.Driver"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|int
name|separator
init|=
name|Utilities
operator|.
name|ctrlaCode
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|int
name|terminator
init|=
name|Utilities
operator|.
name|newLineCode
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|int
name|MAX_ROWS
init|=
literal|100
decl_stmt|;
specifier|private
name|ParseDriver
name|pd
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|InputStream
name|resStream
decl_stmt|;
specifier|private
name|LogHelper
name|console
decl_stmt|;
specifier|private
name|Context
name|ctx
decl_stmt|;
specifier|public
specifier|static
name|int
name|getSeparator
parameter_list|()
block|{
return|return
name|separator
return|;
block|}
specifier|public
specifier|static
name|int
name|getTerminator
parameter_list|()
block|{
return|return
name|terminator
return|;
block|}
specifier|public
name|int
name|countJobs
parameter_list|(
name|Collection
name|tasks
parameter_list|)
block|{
if|if
condition|(
name|tasks
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|int
name|jobs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|task
range|:
name|tasks
control|)
block|{
if|if
condition|(
operator|(
name|task
operator|instanceof
name|ExecDriver
operator|)
operator|||
operator|(
name|task
operator|instanceof
name|MapRedTask
operator|)
condition|)
block|{
name|jobs
operator|++
expr_stmt|;
block|}
name|jobs
operator|+=
name|countJobs
argument_list|(
operator|(
operator|(
name|Task
operator|)
name|task
operator|)
operator|.
name|getChildTasks
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|jobs
return|;
block|}
comment|/**    * for backwards compatibility with current tests    */
specifier|public
name|Driver
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|console
operator|=
operator|new
name|LogHelper
argument_list|(
name|LOG
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|ctx
operator|=
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Driver
parameter_list|()
block|{
name|console
operator|=
operator|new
name|LogHelper
argument_list|(
name|LOG
argument_list|)
expr_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|conf
operator|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
expr_stmt|;
name|ctx
operator|=
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|run
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|boolean
name|noName
init|=
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPJOBNAME
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxlen
init|=
name|conf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEJOBNAMELENGTH
argument_list|)
decl_stmt|;
name|int
name|jobs
init|=
literal|0
decl_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|,
name|command
argument_list|)
expr_stmt|;
try|try
block|{
name|BaseSemanticAnalyzer
name|sem
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting command: "
operator|+
name|command
argument_list|)
expr_stmt|;
if|if
condition|(
name|resStream
operator|!=
literal|null
condition|)
block|{
name|resStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|resStream
operator|=
literal|null
expr_stmt|;
block|}
name|ctx
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pd
operator|=
operator|new
name|ParseDriver
argument_list|()
expr_stmt|;
name|CommonTree
name|tree
init|=
name|pd
operator|.
name|parse
argument_list|(
name|command
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|tree
operator|.
name|getToken
argument_list|()
operator|==
literal|null
operator|)
operator|&&
operator|(
name|tree
operator|.
name|getChildCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|tree
operator|=
operator|(
name|CommonTree
operator|)
name|tree
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|sem
operator|=
name|SemanticAnalyzerFactory
operator|.
name|get
argument_list|(
name|conf
argument_list|,
name|tree
argument_list|)
expr_stmt|;
comment|// Do semantic analysis and plan generation
name|sem
operator|.
name|analyze
argument_list|(
name|tree
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Semantic Analysis Completed"
argument_list|)
expr_stmt|;
for|for
control|(
name|Task
name|rootTask
range|:
name|sem
operator|.
name|getRootTasks
argument_list|()
control|)
block|{
name|rootTask
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|jobs
operator|=
name|countJobs
argument_list|(
name|sem
operator|.
name|getRootTasks
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobs
operator|>
literal|0
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Total MapReduce jobs = "
operator|+
name|jobs
argument_list|)
expr_stmt|;
block|}
comment|// A very simple runtime that keeps putting runnable takss
comment|// on a list and when a job completes, it puts the children at the back of the list
comment|// while taking the job to run from the front of the list
name|Queue
argument_list|<
name|Task
argument_list|>
name|runnable
init|=
operator|new
name|LinkedList
argument_list|<
name|Task
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
name|rootTask
range|:
name|sem
operator|.
name|getRootTasks
argument_list|()
control|)
block|{
if|if
condition|(
name|runnable
operator|.
name|offer
argument_list|(
name|rootTask
argument_list|)
operator|==
literal|false
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not insert the first task into the queue"
argument_list|)
expr_stmt|;
return|return
operator|(
literal|1
operator|)
return|;
block|}
block|}
while|while
condition|(
name|runnable
operator|.
name|peek
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Task
name|tsk
init|=
name|runnable
operator|.
name|remove
argument_list|()
decl_stmt|;
if|if
condition|(
name|noName
condition|)
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPJOBNAME
argument_list|,
name|Utilities
operator|.
name|abbreviate
argument_list|(
name|command
argument_list|,
name|maxlen
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|exitVal
init|=
name|tsk
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitVal
operator|!=
literal|0
condition|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"FAILED: Execution Error, return code "
operator|+
name|exitVal
operator|+
literal|" from "
operator|+
name|tsk
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|9
return|;
block|}
name|tsk
operator|.
name|setDone
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsk
operator|.
name|getChildTasks
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Object
name|child
range|:
name|tsk
operator|.
name|getChildTasks
argument_list|()
control|)
block|{
comment|// Check if the child is runnable
if|if
condition|(
operator|!
operator|(
operator|(
name|Task
operator|)
name|child
operator|)
operator|.
name|isRunnable
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|runnable
operator|.
name|offer
argument_list|(
operator|(
name|Task
operator|)
name|child
argument_list|)
operator|==
literal|false
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not add child task to queue"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"FAILED: Error in semantic analysis: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
literal|10
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"FAILED: Parse Error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
literal|11
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Has to use full name to make sure it does not conflict with org.apache.commons.lang.StringUtils
name|console
operator|.
name|printError
argument_list|(
literal|"FAILED: Unknown exception : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
literal|12
operator|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|noName
condition|)
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPJOBNAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|jobs
operator|>
literal|0
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"OK"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
literal|0
operator|)
return|;
block|}
specifier|public
name|boolean
name|getResults
parameter_list|(
name|Vector
argument_list|<
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|>
name|res
parameter_list|)
block|{
if|if
condition|(
name|resStream
operator|==
literal|null
condition|)
name|resStream
operator|=
name|ctx
operator|.
name|getStream
argument_list|()
expr_stmt|;
if|if
condition|(
name|resStream
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|int
name|sizeArr
init|=
literal|128
decl_stmt|;
name|char
index|[]
name|tmpCharArr
init|=
operator|new
name|char
index|[
name|sizeArr
index|]
decl_stmt|;
for|for
control|(
name|int
name|numRows
init|=
literal|0
init|;
name|numRows
operator|<
name|MAX_ROWS
condition|;
name|numRows
operator|++
control|)
block|{
if|if
condition|(
name|resStream
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|numRows
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
name|boolean
name|eof
init|=
literal|false
decl_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|row
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|col
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|char
name|c
decl_stmt|;
try|try
block|{
name|int
name|i
init|=
name|resStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
block|{
name|eof
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|c
operator|=
operator|(
name|char
operator|)
name|i
expr_stmt|;
if|if
condition|(
name|c
operator|==
name|terminator
condition|)
block|{
name|col
operator|=
operator|new
name|String
argument_list|(
name|tmpCharArr
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
literal|0
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|col
operator|.
name|equals
argument_list|(
name|Utilities
operator|.
name|nullStringStorage
argument_list|)
condition|?
literal|null
else|:
name|col
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
name|separator
condition|)
block|{
name|col
operator|=
operator|new
name|String
argument_list|(
name|tmpCharArr
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
literal|0
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|col
operator|.
name|equals
argument_list|(
name|Utilities
operator|.
name|nullStringStorage
argument_list|)
condition|?
literal|null
else|:
name|col
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sizeArr
operator|==
name|len
condition|)
block|{
name|char
index|[]
name|tmp
init|=
operator|new
name|char
index|[
literal|2
operator|*
name|sizeArr
index|]
decl_stmt|;
name|sizeArr
operator|*=
literal|2
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|len
condition|;
name|idx
operator|++
control|)
name|tmp
index|[
name|idx
index|]
operator|=
name|tmpCharArr
index|[
name|idx
index|]
expr_stmt|;
name|tmpCharArr
operator|=
name|tmp
expr_stmt|;
block|}
name|tmpCharArr
index|[
name|len
operator|++
index|]
operator|=
name|c
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"FAILED: Unknown exception : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|eof
condition|)
block|{
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|col
operator|=
operator|new
name|String
argument_list|(
name|tmpCharArr
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|len
operator|=
literal|0
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|col
operator|.
name|equals
argument_list|(
name|Utilities
operator|.
name|nullStringStorage
argument_list|)
condition|?
literal|null
else|:
name|col
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|resStream
operator|=
name|ctx
operator|.
name|getStream
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

