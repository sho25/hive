begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ConditionalTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FetchTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|history
operator|.
name|HiveHistory
operator|.
name|Keys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ExecuteWithHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|Hook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|PostExecute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|PreExecute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLockObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLockObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLockObject
operator|.
name|HiveLockObjectData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveTxnManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|TxnManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|DummyPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|formatting
operator|.
name|JsonMetaDataFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|formatting
operator|.
name|MetaDataFormatUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|formatting
operator|.
name|MetaDataFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|ppr
operator|.
name|PartitionPruner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ColumnAccessInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveSemanticAnalyzerHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveSemanticAnalyzerHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveSemanticAnalyzerHookContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ImportSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PrunedPartitionList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|VariableSubstitution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|HiveAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzContext
operator|.
name|CLIENT_TYPE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveOperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
operator|.
name|HivePrivObjectActionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
operator|.
name|HivePrivilegeObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_class
specifier|public
class|class
name|Driver
implements|implements
name|CommandProcessor
block|{
specifier|static
specifier|final
specifier|private
name|String
name|CLASS_NAME
init|=
name|Driver
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CLASS_NAME
argument_list|)
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|LogHelper
name|console
init|=
operator|new
name|LogHelper
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Object
name|compileMonitor
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|int
name|maxRows
init|=
literal|100
decl_stmt|;
name|ByteStream
operator|.
name|Output
name|bos
init|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|DataInput
name|resStream
decl_stmt|;
specifier|private
name|Context
name|ctx
decl_stmt|;
specifier|private
name|DriverContext
name|driverCxt
decl_stmt|;
specifier|private
name|QueryPlan
name|plan
decl_stmt|;
specifier|private
name|Schema
name|schema
decl_stmt|;
specifier|private
name|String
name|errorMessage
decl_stmt|;
specifier|private
name|String
name|SQLState
decl_stmt|;
specifier|private
name|Throwable
name|downstreamError
decl_stmt|;
specifier|private
name|HiveTxnManager
name|txnMgr
decl_stmt|;
comment|// A limit on the number of threads that can be launched
specifier|private
name|int
name|maxthreads
decl_stmt|;
specifier|private
name|int
name|tryCount
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|boolean
name|destroyed
decl_stmt|;
specifier|private
name|String
name|userName
decl_stmt|;
specifier|private
name|void
name|createTxnManager
parameter_list|()
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|txnMgr
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|txnMgr
operator|=
name|TxnManagerFactory
operator|.
name|getTxnManagerFactory
argument_list|()
operator|.
name|getTxnManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|boolean
name|checkConcurrency
parameter_list|()
throws|throws
name|SemanticException
block|{
name|boolean
name|supportConcurrency
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|supportConcurrency
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Concurrency mode is disabled, not creating a lock manager"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
block|{
name|Operator
operator|.
name|resetId
argument_list|()
expr_stmt|;
block|}
comment|/**    * Return the status information about the Map-Reduce cluster    */
specifier|public
name|ClusterStatus
name|getClusterStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|ClusterStatus
name|cs
decl_stmt|;
try|try
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|JobClient
name|jc
init|=
operator|new
name|JobClient
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|cs
operator|=
name|jc
operator|.
name|getClusterStatus
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning cluster status: "
operator|+
name|cs
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cs
return|;
block|}
specifier|public
name|Schema
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
comment|/**    * Get a Schema with fields represented with native Hive types    */
specifier|public
specifier|static
name|Schema
name|getSchema
parameter_list|(
name|BaseSemanticAnalyzer
name|sem
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
block|{
name|Schema
name|schema
init|=
literal|null
decl_stmt|;
comment|// If we have a plan, prefer its logical result schema if it's
comment|// available; otherwise, try digging out a fetch task; failing that,
comment|// give up.
if|if
condition|(
name|sem
operator|==
literal|null
condition|)
block|{
comment|// can't get any info without a plan
block|}
elseif|else
if|if
condition|(
name|sem
operator|.
name|getResultSchema
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|lst
init|=
name|sem
operator|.
name|getResultSchema
argument_list|()
decl_stmt|;
name|schema
operator|=
operator|new
name|Schema
argument_list|(
name|lst
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sem
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|FetchTask
name|ft
init|=
name|sem
operator|.
name|getFetchTask
argument_list|()
decl_stmt|;
name|TableDesc
name|td
init|=
name|ft
operator|.
name|getTblDesc
argument_list|()
decl_stmt|;
comment|// partitioned tables don't have tableDesc set on the FetchTask. Instead
comment|// they have a list of PartitionDesc objects, each with a table desc.
comment|// Let's
comment|// try to fetch the desc for the first partition and use it's
comment|// deserializer.
if|if
condition|(
name|td
operator|==
literal|null
operator|&&
name|ft
operator|.
name|getWork
argument_list|()
operator|!=
literal|null
operator|&&
name|ft
operator|.
name|getWork
argument_list|()
operator|.
name|getPartDesc
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ft
operator|.
name|getWork
argument_list|()
operator|.
name|getPartDesc
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|td
operator|=
name|ft
operator|.
name|getWork
argument_list|()
operator|.
name|getPartDesc
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTableDesc
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|td
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No returning schema."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|tableName
init|=
literal|"result"
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|lst
init|=
literal|null
decl_stmt|;
try|try
block|{
name|lst
operator|=
name|MetaStoreUtils
operator|.
name|getFieldsFromDeserializer
argument_list|(
name|tableName
argument_list|,
name|td
operator|.
name|getDeserializer
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error getting schema: "
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lst
operator|!=
literal|null
condition|)
block|{
name|schema
operator|=
operator|new
name|Schema
argument_list|(
name|lst
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|schema
operator|=
operator|new
name|Schema
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning Hive schema: "
operator|+
name|schema
argument_list|)
expr_stmt|;
return|return
name|schema
return|;
block|}
comment|/**    * Get a Schema with fields represented with Thrift DDL types    */
specifier|public
name|Schema
name|getThriftSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|Schema
name|schema
decl_stmt|;
try|try
block|{
name|schema
operator|=
name|getSchema
argument_list|()
expr_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|lst
init|=
name|schema
operator|.
name|getFieldSchemas
argument_list|()
decl_stmt|;
comment|// Go over the schema and convert type to thrift type
if|if
condition|(
name|lst
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FieldSchema
name|f
range|:
name|lst
control|)
block|{
name|f
operator|.
name|setType
argument_list|(
name|MetaStoreUtils
operator|.
name|typeToThriftType
argument_list|(
name|f
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Returning Thrift schema: "
operator|+
name|schema
argument_list|)
expr_stmt|;
return|return
name|schema
return|;
block|}
comment|/**    * Return the maximum number of rows returned by getResults    */
specifier|public
name|int
name|getMaxRows
parameter_list|()
block|{
return|return
name|maxRows
return|;
block|}
comment|/**    * Set the maximum number of rows returned by getResults    */
specifier|public
name|void
name|setMaxRows
parameter_list|(
name|int
name|maxRows
parameter_list|)
block|{
name|this
operator|.
name|maxRows
operator|=
name|maxRows
expr_stmt|;
block|}
comment|/**    * for backwards compatibility with current tests    */
specifier|public
name|Driver
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
name|Driver
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|userName
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
block|}
specifier|public
name|Driver
parameter_list|()
block|{
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|conf
operator|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Compile a new query. Any currently-planned query associated with this Driver is discarded.    * Do not reset id for inner queries(index, etc). Task ids are used for task identity check.    *    * @param command    *          The SQL query to compile.    */
specifier|public
name|int
name|compile
parameter_list|(
name|String
name|command
parameter_list|)
block|{
return|return
name|compile
argument_list|(
name|command
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Hold state variables specific to each query being executed, that may not    * be consistent in the overall SessionState    */
specifier|private
specifier|static
class|class
name|QueryState
block|{
specifier|private
name|HiveOperation
name|op
decl_stmt|;
specifier|private
name|String
name|cmd
decl_stmt|;
specifier|private
name|boolean
name|init
init|=
literal|false
decl_stmt|;
comment|/**      * Initialize the queryState with the query state variables      */
specifier|public
name|void
name|init
parameter_list|(
name|HiveOperation
name|op
parameter_list|,
name|String
name|cmd
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
name|this
operator|.
name|cmd
operator|=
name|cmd
expr_stmt|;
name|this
operator|.
name|init
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|this
operator|.
name|init
return|;
block|}
specifier|public
name|HiveOperation
name|getOp
parameter_list|()
block|{
return|return
name|this
operator|.
name|op
return|;
block|}
specifier|public
name|String
name|getCmd
parameter_list|()
block|{
return|return
name|this
operator|.
name|cmd
return|;
block|}
block|}
specifier|public
name|void
name|saveSession
parameter_list|(
name|QueryState
name|qs
parameter_list|)
block|{
name|SessionState
name|oldss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldss
operator|!=
literal|null
operator|&&
name|oldss
operator|.
name|getHiveOperation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|qs
operator|.
name|init
argument_list|(
name|oldss
operator|.
name|getHiveOperation
argument_list|()
argument_list|,
name|oldss
operator|.
name|getCmd
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|restoreSession
parameter_list|(
name|QueryState
name|qs
parameter_list|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|!=
literal|null
operator|&&
name|qs
operator|!=
literal|null
operator|&&
name|qs
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
name|ss
operator|.
name|setCmd
argument_list|(
name|qs
operator|.
name|getCmd
argument_list|()
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setCommandType
argument_list|(
name|qs
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Compile a new query, but potentially reset taskID counter.  Not resetting task counter    * is useful for generating re-entrant QL queries.    * @param command  The HiveQL query to compile    * @param resetTaskIds Resets taskID counter if true.    * @return 0 for ok    */
specifier|public
name|int
name|compile
parameter_list|(
name|String
name|command
parameter_list|,
name|boolean
name|resetTaskIds
parameter_list|)
block|{
name|PerfLogger
name|perfLogger
init|=
name|PerfLogger
operator|.
name|getPerfLogger
argument_list|()
decl_stmt|;
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|COMPILE
argument_list|)
expr_stmt|;
comment|//holder for parent command type/string when executing reentrant queries
name|QueryState
name|queryState
init|=
operator|new
name|QueryState
argument_list|()
decl_stmt|;
if|if
condition|(
name|plan
operator|!=
literal|null
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
name|plan
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|resetTaskIds
condition|)
block|{
name|TaskFactory
operator|.
name|resetId
argument_list|()
expr_stmt|;
block|}
name|saveSession
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
comment|// generate new query id
name|String
name|queryId
init|=
name|QueryPlan
operator|.
name|makeQueryId
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|,
name|queryId
argument_list|)
expr_stmt|;
try|try
block|{
name|command
operator|=
operator|new
name|VariableSubstitution
argument_list|()
operator|.
name|substitute
argument_list|(
name|conf
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|ctx
operator|=
operator|new
name|Context
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setTryCount
argument_list|(
name|getTryCount
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setCmd
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setHDFSCleanup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|PARSE
argument_list|)
expr_stmt|;
name|ParseDriver
name|pd
init|=
operator|new
name|ParseDriver
argument_list|()
decl_stmt|;
name|ASTNode
name|tree
init|=
name|pd
operator|.
name|parse
argument_list|(
name|command
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|tree
operator|=
name|ParseUtils
operator|.
name|findRootNonNullToken
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|PARSE
argument_list|)
expr_stmt|;
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|ANALYZE
argument_list|)
expr_stmt|;
name|BaseSemanticAnalyzer
name|sem
init|=
name|SemanticAnalyzerFactory
operator|.
name|get
argument_list|(
name|conf
argument_list|,
name|tree
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HiveSemanticAnalyzerHook
argument_list|>
name|saHooks
init|=
name|getHooks
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SEMANTIC_ANALYZER_HOOK
argument_list|,
name|HiveSemanticAnalyzerHook
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Do semantic analysis and plan generation
if|if
condition|(
name|saHooks
operator|!=
literal|null
condition|)
block|{
name|HiveSemanticAnalyzerHookContext
name|hookCtx
init|=
operator|new
name|HiveSemanticAnalyzerHookContextImpl
argument_list|()
decl_stmt|;
name|hookCtx
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|hookCtx
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
for|for
control|(
name|HiveSemanticAnalyzerHook
name|hook
range|:
name|saHooks
control|)
block|{
name|tree
operator|=
name|hook
operator|.
name|preAnalyze
argument_list|(
name|hookCtx
argument_list|,
name|tree
argument_list|)
expr_stmt|;
block|}
name|sem
operator|.
name|analyze
argument_list|(
name|tree
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|hookCtx
operator|.
name|update
argument_list|(
name|sem
argument_list|)
expr_stmt|;
for|for
control|(
name|HiveSemanticAnalyzerHook
name|hook
range|:
name|saHooks
control|)
block|{
name|hook
operator|.
name|postAnalyze
argument_list|(
name|hookCtx
argument_list|,
name|sem
operator|.
name|getRootTasks
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sem
operator|.
name|analyze
argument_list|(
name|tree
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Semantic Analysis Completed"
argument_list|)
expr_stmt|;
comment|// validate the plan
name|sem
operator|.
name|validate
argument_list|()
expr_stmt|;
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|ANALYZE
argument_list|)
expr_stmt|;
name|plan
operator|=
operator|new
name|QueryPlan
argument_list|(
name|command
argument_list|,
name|sem
argument_list|,
name|perfLogger
operator|.
name|getStartTime
argument_list|(
name|PerfLogger
operator|.
name|DRIVER_RUN
argument_list|)
argument_list|,
name|queryId
argument_list|)
expr_stmt|;
name|String
name|queryStr
init|=
name|plan
operator|.
name|getQueryStr
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYSTRING
argument_list|,
name|queryStr
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.workflow.id"
argument_list|,
literal|"hive_"
operator|+
name|queryId
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.workflow.name"
argument_list|,
name|queryStr
argument_list|)
expr_stmt|;
comment|// initialize FetchTask right here
if|if
condition|(
name|plan
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|plan
operator|.
name|getFetchTask
argument_list|()
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|plan
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// get the output schema
name|schema
operator|=
name|getSchema
argument_list|(
name|sem
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|//do the authorization check
if|if
condition|(
operator|!
name|sem
operator|.
name|skipAuthorization
argument_list|()
operator|&&
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_ENABLED
argument_list|)
condition|)
block|{
try|try
block|{
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|DO_AUTHORIZATION
argument_list|)
expr_stmt|;
name|doAuthorization
argument_list|(
name|sem
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|authExp
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Authorization failed:"
operator|+
name|authExp
operator|.
name|getMessage
argument_list|()
operator|+
literal|". Use SHOW GRANT to get more details."
argument_list|)
expr_stmt|;
name|errorMessage
operator|=
name|authExp
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|SQLState
operator|=
literal|"42000"
expr_stmt|;
return|return
literal|403
return|;
block|}
finally|finally
block|{
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|DO_AUTHORIZATION
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ErrorMsg
name|error
init|=
name|ErrorMsg
operator|.
name|getErrorMsg
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|errorMessage
operator|=
literal|"FAILED: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
if|if
condition|(
name|error
operator|!=
name|ErrorMsg
operator|.
name|GENERIC_ERROR
condition|)
block|{
name|errorMessage
operator|+=
literal|" [Error "
operator|+
name|error
operator|.
name|getErrorCode
argument_list|()
operator|+
literal|"]:"
expr_stmt|;
block|}
comment|// HIVE-4889
if|if
condition|(
operator|(
name|e
operator|instanceof
name|IllegalArgumentException
operator|)
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|errorMessage
operator|+=
literal|" "
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|errorMessage
operator|+=
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|SQLState
operator|=
name|error
operator|.
name|getSQLState
argument_list|()
expr_stmt|;
name|downstreamError
operator|=
name|e
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|errorMessage
argument_list|,
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|error
operator|.
name|getErrorCode
argument_list|()
return|;
block|}
finally|finally
block|{
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|COMPILE
argument_list|)
expr_stmt|;
name|restoreSession
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Do authorization using post semantic analysis information in the semantic analyzer    * The original command is also passed so that authorization interface can provide    * more useful information in logs.    * @param sem    * @param command    * @throws HiveException    * @throws AuthorizationException    */
specifier|public
specifier|static
name|void
name|doAuthorization
parameter_list|(
name|BaseSemanticAnalyzer
name|sem
parameter_list|,
name|String
name|command
parameter_list|)
throws|throws
name|HiveException
throws|,
name|AuthorizationException
block|{
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
name|sem
operator|.
name|getInputs
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
init|=
name|sem
operator|.
name|getOutputs
argument_list|()
decl_stmt|;
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|HiveOperation
name|op
init|=
name|ss
operator|.
name|getHiveOperation
argument_list|()
decl_stmt|;
name|Hive
name|db
init|=
name|sem
operator|.
name|getDb
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|isAuthorizationModeV2
argument_list|()
condition|)
block|{
comment|// get mapping of tables to columns used
name|ColumnAccessInfo
name|colAccessInfo
init|=
name|sem
operator|.
name|getColumnAccessInfo
argument_list|()
decl_stmt|;
comment|// colAccessInfo is set only in case of SemanticAnalyzer
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|tab2Cols
init|=
name|colAccessInfo
operator|!=
literal|null
condition|?
name|colAccessInfo
operator|.
name|getTableToColumnAccessMap
argument_list|()
else|:
literal|null
decl_stmt|;
name|doAuthorizationV2
argument_list|(
name|ss
argument_list|,
name|op
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|,
name|command
argument_list|,
name|tab2Cols
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Operation should not be null"
argument_list|)
throw|;
block|}
name|HiveAuthorizationProvider
name|authorizer
init|=
name|ss
operator|.
name|getAuthorizer
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|CREATEDATABASE
argument_list|)
condition|)
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|op
operator|.
name|getInputRequiredPrivileges
argument_list|()
argument_list|,
name|op
operator|.
name|getOutputRequiredPrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|CREATETABLE_AS_SELECT
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|CREATETABLE
argument_list|)
condition|)
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|db
operator|.
name|getDatabase
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|HiveOperation
operator|.
name|CREATETABLE_AS_SELECT
operator|.
name|getOutputRequiredPrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|IMPORT
argument_list|)
condition|)
block|{
name|ImportSemanticAnalyzer
name|isa
init|=
operator|(
name|ImportSemanticAnalyzer
operator|)
name|sem
decl_stmt|;
if|if
condition|(
operator|!
name|isa
operator|.
name|existsTable
argument_list|()
condition|)
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|db
operator|.
name|getDatabase
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|HiveOperation
operator|.
name|CREATETABLE_AS_SELECT
operator|.
name|getOutputRequiredPrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|outputs
operator|!=
literal|null
operator|&&
name|outputs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|WriteEntity
name|write
range|:
name|outputs
control|)
block|{
if|if
condition|(
name|write
operator|.
name|isDummy
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|write
operator|.
name|getType
argument_list|()
operator|==
name|Entity
operator|.
name|Type
operator|.
name|DATABASE
condition|)
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|write
operator|.
name|getDatabase
argument_list|()
argument_list|,
literal|null
argument_list|,
name|op
operator|.
name|getOutputRequiredPrivileges
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|write
operator|.
name|getType
argument_list|()
operator|==
name|WriteEntity
operator|.
name|Type
operator|.
name|PARTITION
condition|)
block|{
name|Partition
name|part
init|=
name|db
operator|.
name|getPartition
argument_list|(
name|write
operator|.
name|getTable
argument_list|()
argument_list|,
name|write
operator|.
name|getPartition
argument_list|()
operator|.
name|getSpec
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|write
operator|.
name|getPartition
argument_list|()
argument_list|,
literal|null
argument_list|,
name|op
operator|.
name|getOutputRequiredPrivileges
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|write
operator|.
name|getTable
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|write
operator|.
name|getTable
argument_list|()
argument_list|,
literal|null
argument_list|,
name|op
operator|.
name|getOutputRequiredPrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|inputs
operator|!=
literal|null
operator|&&
name|inputs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|Table
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tab2Cols
init|=
operator|new
name|HashMap
argument_list|<
name|Table
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Partition
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|part2Cols
init|=
operator|new
name|HashMap
argument_list|<
name|Partition
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|//determine if partition level privileges should be checked for input tables
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tableUsePartLevelAuth
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReadEntity
name|read
range|:
name|inputs
control|)
block|{
if|if
condition|(
name|read
operator|.
name|isDummy
argument_list|()
operator|||
name|read
operator|.
name|getType
argument_list|()
operator|==
name|Entity
operator|.
name|Type
operator|.
name|DATABASE
condition|)
block|{
continue|continue;
block|}
name|Table
name|tbl
init|=
name|read
operator|.
name|getTable
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|read
operator|.
name|getPartition
argument_list|()
operator|!=
literal|null
operator|)
operator|||
operator|(
name|tbl
operator|!=
literal|null
operator|&&
name|tbl
operator|.
name|isPartitioned
argument_list|()
operator|)
condition|)
block|{
name|String
name|tblName
init|=
name|tbl
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableUsePartLevelAuth
operator|.
name|get
argument_list|(
name|tblName
argument_list|)
operator|==
literal|null
condition|)
block|{
name|boolean
name|usePartLevelPriv
init|=
operator|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"PARTITION_LEVEL_PRIVILEGE"
argument_list|)
operator|!=
literal|null
operator|&&
operator|(
literal|"TRUE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"PARTITION_LEVEL_PRIVILEGE"
argument_list|)
argument_list|)
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|usePartLevelPriv
condition|)
block|{
name|tableUsePartLevelAuth
operator|.
name|put
argument_list|(
name|tblName
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tableUsePartLevelAuth
operator|.
name|put
argument_list|(
name|tblName
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|getTablePartitionUsedColumns
argument_list|(
name|op
argument_list|,
name|sem
argument_list|,
name|tab2Cols
argument_list|,
name|part2Cols
argument_list|,
name|tableUsePartLevelAuth
argument_list|)
expr_stmt|;
comment|// cache the results for table authorization
name|Set
argument_list|<
name|String
argument_list|>
name|tableAuthChecked
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReadEntity
name|read
range|:
name|inputs
control|)
block|{
if|if
condition|(
name|read
operator|.
name|isDummy
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|read
operator|.
name|getType
argument_list|()
operator|==
name|Entity
operator|.
name|Type
operator|.
name|DATABASE
condition|)
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|read
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|op
operator|.
name|getInputRequiredPrivileges
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Table
name|tbl
init|=
name|read
operator|.
name|getTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|read
operator|.
name|getPartition
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Partition
name|partition
init|=
name|read
operator|.
name|getPartition
argument_list|()
decl_stmt|;
name|tbl
operator|=
name|partition
operator|.
name|getTable
argument_list|()
expr_stmt|;
comment|// use partition level authorization
if|if
condition|(
name|tableUsePartLevelAuth
operator|.
name|get
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|==
name|Boolean
operator|.
name|TRUE
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
name|part2Cols
operator|.
name|get
argument_list|(
name|partition
argument_list|)
decl_stmt|;
if|if
condition|(
name|cols
operator|!=
literal|null
operator|&&
name|cols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|partition
operator|.
name|getTable
argument_list|()
argument_list|,
name|partition
argument_list|,
name|cols
argument_list|,
name|op
operator|.
name|getInputRequiredPrivileges
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|partition
argument_list|,
name|op
operator|.
name|getInputRequiredPrivileges
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
block|}
comment|// if we reach here, it means it needs to do a table authorization
comment|// check, and the table authorization may already happened because of other
comment|// partitions
if|if
condition|(
name|tbl
operator|!=
literal|null
operator|&&
operator|!
name|tableAuthChecked
operator|.
name|contains
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|&&
operator|!
operator|(
name|tableUsePartLevelAuth
operator|.
name|get
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|==
name|Boolean
operator|.
name|TRUE
operator|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
name|tab2Cols
operator|.
name|get
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
if|if
condition|(
name|cols
operator|!=
literal|null
operator|&&
name|cols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|tbl
argument_list|,
literal|null
argument_list|,
name|cols
argument_list|,
name|op
operator|.
name|getInputRequiredPrivileges
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authorizer
operator|.
name|authorize
argument_list|(
name|tbl
argument_list|,
name|op
operator|.
name|getInputRequiredPrivileges
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|tableAuthChecked
operator|.
name|add
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|getTablePartitionUsedColumns
parameter_list|(
name|HiveOperation
name|op
parameter_list|,
name|BaseSemanticAnalyzer
name|sem
parameter_list|,
name|Map
argument_list|<
name|Table
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tab2Cols
parameter_list|,
name|Map
argument_list|<
name|Partition
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|part2Cols
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|tableUsePartLevelAuth
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// for a select or create-as-select query, populate the partition to column
comment|// (par2Cols) or
comment|// table to columns mapping (tab2Cols)
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|CREATETABLE_AS_SELECT
argument_list|)
operator|||
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|QUERY
argument_list|)
condition|)
block|{
name|SemanticAnalyzer
name|querySem
init|=
operator|(
name|SemanticAnalyzer
operator|)
name|sem
decl_stmt|;
name|ParseContext
name|parseCtx
init|=
name|querySem
operator|.
name|getParseContext
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TableScanOperator
argument_list|,
name|Table
argument_list|>
name|tsoTopMap
init|=
name|parseCtx
operator|.
name|getTopToTable
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|topOpMap
range|:
name|querySem
operator|.
name|getParseContext
argument_list|()
operator|.
name|getTopOps
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|topOp
init|=
name|topOpMap
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|topOp
operator|instanceof
name|TableScanOperator
operator|&&
name|tsoTopMap
operator|.
name|containsKey
argument_list|(
name|topOp
argument_list|)
condition|)
block|{
name|TableScanOperator
name|tableScanOp
init|=
operator|(
name|TableScanOperator
operator|)
name|topOp
decl_stmt|;
name|Table
name|tbl
init|=
name|tsoTopMap
operator|.
name|get
argument_list|(
name|tableScanOp
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|neededColumnIds
init|=
name|tableScanOp
operator|.
name|getNeededColumnIDs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|columns
init|=
name|tbl
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|neededColumnIds
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|cols
operator|.
name|add
argument_list|(
name|columns
operator|.
name|get
argument_list|(
name|neededColumnIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//map may not contain all sources, since input list may have been optimized out
comment|//or non-existent tho such sources may still be referenced by the TableScanOperator
comment|//if it's null then the partition probably doesn't exist so let's use table permission
if|if
condition|(
name|tbl
operator|.
name|isPartitioned
argument_list|()
operator|&&
name|tableUsePartLevelAuth
operator|.
name|get
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|==
name|Boolean
operator|.
name|TRUE
condition|)
block|{
name|String
name|alias_id
init|=
name|topOpMap
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|PrunedPartitionList
name|partsList
init|=
name|PartitionPruner
operator|.
name|prune
argument_list|(
name|tableScanOp
argument_list|,
name|parseCtx
argument_list|,
name|alias_id
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|partsList
operator|.
name|getPartitions
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|existingCols
init|=
name|part2Cols
operator|.
name|get
argument_list|(
name|part
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingCols
operator|==
literal|null
condition|)
block|{
name|existingCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|existingCols
operator|.
name|addAll
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|part2Cols
operator|.
name|put
argument_list|(
name|part
argument_list|,
name|existingCols
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|existingCols
init|=
name|tab2Cols
operator|.
name|get
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingCols
operator|==
literal|null
condition|)
block|{
name|existingCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|existingCols
operator|.
name|addAll
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|tab2Cols
operator|.
name|put
argument_list|(
name|tbl
argument_list|,
name|existingCols
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|doAuthorizationV2
parameter_list|(
name|SessionState
name|ss
parameter_list|,
name|HiveOperation
name|op
parameter_list|,
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|,
name|String
name|command
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|tab2cols
parameter_list|)
throws|throws
name|HiveException
block|{
name|HiveAuthzContext
operator|.
name|Builder
name|authzContextBuilder
init|=
operator|new
name|HiveAuthzContext
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|authzContextBuilder
operator|.
name|setClientType
argument_list|(
name|ss
operator|.
name|isHiveServerQuery
argument_list|()
condition|?
name|CLIENT_TYPE
operator|.
name|HIVESERVER2
else|:
name|CLIENT_TYPE
operator|.
name|HIVECLI
argument_list|)
expr_stmt|;
name|authzContextBuilder
operator|.
name|setUserIpAddress
argument_list|(
name|ss
operator|.
name|getUserIpAddress
argument_list|()
argument_list|)
expr_stmt|;
name|authzContextBuilder
operator|.
name|setSessionString
argument_list|(
name|ss
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|authzContextBuilder
operator|.
name|setCommandString
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|HiveOperationType
name|hiveOpType
init|=
name|getHiveOperationType
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|inputsHObjs
init|=
name|getHivePrivObjects
argument_list|(
name|inputs
argument_list|)
decl_stmt|;
name|updateInputColumnInfo
argument_list|(
name|inputsHObjs
argument_list|,
name|tab2cols
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|outputHObjs
init|=
name|getHivePrivObjects
argument_list|(
name|outputs
argument_list|)
decl_stmt|;
name|ss
operator|.
name|getAuthorizerV2
argument_list|()
operator|.
name|checkPrivileges
argument_list|(
name|hiveOpType
argument_list|,
name|inputsHObjs
argument_list|,
name|outputHObjs
argument_list|,
name|authzContextBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/**    * Add column information for input table objects    * @param inputsHObjs input HivePrivilegeObject    * @param map table to used input columns mapping    */
specifier|private
specifier|static
name|void
name|updateInputColumnInfo
parameter_list|(
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|inputsHObjs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableName2Cols
parameter_list|)
block|{
if|if
condition|(
name|tableName2Cols
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|HivePrivilegeObject
name|inputObj
range|:
name|inputsHObjs
control|)
block|{
if|if
condition|(
name|inputObj
operator|.
name|getType
argument_list|()
operator|!=
name|HivePrivilegeObjectType
operator|.
name|TABLE_OR_VIEW
condition|)
block|{
comment|// input columns are relevant only for tables or views
continue|continue;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|cols
init|=
name|tableName2Cols
operator|.
name|get
argument_list|(
name|Table
operator|.
name|getCompleteName
argument_list|(
name|inputObj
operator|.
name|getDbname
argument_list|()
argument_list|,
name|inputObj
operator|.
name|getObjectName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|inputObj
operator|.
name|setColumns
argument_list|(
name|cols
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|getHivePrivObjects
parameter_list|(
name|HashSet
argument_list|<
name|?
extends|extends
name|Entity
argument_list|>
name|privObjects
parameter_list|)
block|{
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|hivePrivobjs
init|=
operator|new
name|ArrayList
argument_list|<
name|HivePrivilegeObject
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|privObjects
operator|==
literal|null
condition|)
block|{
return|return
name|hivePrivobjs
return|;
block|}
for|for
control|(
name|Entity
name|privObject
range|:
name|privObjects
control|)
block|{
name|HivePrivilegeObjectType
name|privObjType
init|=
name|AuthorizationUtils
operator|.
name|getHivePrivilegeObjectType
argument_list|(
name|privObject
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|privObject
operator|instanceof
name|ReadEntity
operator|&&
operator|!
operator|(
operator|(
name|ReadEntity
operator|)
name|privObject
operator|)
operator|.
name|isDirect
argument_list|()
condition|)
block|{
comment|// In case of views, the underlying views or tables are not direct dependencies
comment|// and are not used for authorization checks.
comment|// This ReadEntity represents one of the underlying tables/views, so skip it.
comment|// See description of the isDirect in ReadEntity
continue|continue;
block|}
if|if
condition|(
name|privObject
operator|instanceof
name|WriteEntity
operator|&&
operator|(
operator|(
name|WriteEntity
operator|)
name|privObject
operator|)
operator|.
name|isTempURI
argument_list|()
condition|)
block|{
comment|//do not authorize temporary uris
continue|continue;
block|}
comment|//support for authorization on partitions needs to be added
name|String
name|dbname
init|=
literal|null
decl_stmt|;
name|String
name|objName
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|privObject
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|DATABASE
case|:
name|dbname
operator|=
name|privObject
operator|.
name|getDatabase
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|privObject
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
break|break;
case|case
name|TABLE
case|:
name|dbname
operator|=
name|privObject
operator|.
name|getTable
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|privObject
operator|.
name|getTable
argument_list|()
operator|.
name|getDbName
argument_list|()
expr_stmt|;
name|objName
operator|=
name|privObject
operator|.
name|getTable
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|privObject
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
expr_stmt|;
break|break;
case|case
name|DFS_DIR
case|:
case|case
name|LOCAL_DIR
case|:
name|objName
operator|=
name|privObject
operator|.
name|getD
argument_list|()
expr_stmt|;
break|break;
case|case
name|FUNCTION
case|:
name|objName
operator|=
name|privObject
operator|.
name|getFunctionName
argument_list|()
expr_stmt|;
break|break;
case|case
name|DUMMYPARTITION
case|:
case|case
name|PARTITION
case|:
comment|// not currently handled
continue|continue;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unexpected object type"
argument_list|)
throw|;
block|}
name|HivePrivObjectActionType
name|actionType
init|=
name|AuthorizationUtils
operator|.
name|getActionType
argument_list|(
name|privObject
argument_list|)
decl_stmt|;
name|HivePrivilegeObject
name|hPrivObject
init|=
operator|new
name|HivePrivilegeObject
argument_list|(
name|privObjType
argument_list|,
name|dbname
argument_list|,
name|objName
argument_list|,
name|actionType
argument_list|)
decl_stmt|;
name|hivePrivobjs
operator|.
name|add
argument_list|(
name|hPrivObject
argument_list|)
expr_stmt|;
block|}
return|return
name|hivePrivobjs
return|;
block|}
specifier|private
specifier|static
name|HiveOperationType
name|getHiveOperationType
parameter_list|(
name|HiveOperation
name|op
parameter_list|)
block|{
return|return
name|HiveOperationType
operator|.
name|valueOf
argument_list|(
name|op
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return The current query plan associated with this Driver, if any.    */
specifier|public
name|QueryPlan
name|getPlan
parameter_list|()
block|{
return|return
name|plan
return|;
block|}
comment|/**    * @param d    *          The database to be locked    * @param t    *          The table to be locked    * @param p    *          The partition to be locked    * @param mode    *          The mode of the lock (SHARED/EXCLUSIVE) Get the list of objects to be locked. If a    *          partition needs to be locked (in any mode), all its parents should also be locked in    *          SHARED mode.    */
specifier|private
name|List
argument_list|<
name|HiveLockObj
argument_list|>
name|getLockObjects
parameter_list|(
name|Database
name|d
parameter_list|,
name|Table
name|t
parameter_list|,
name|Partition
name|p
parameter_list|,
name|HiveLockMode
name|mode
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|HiveLockObj
argument_list|>
name|locks
init|=
operator|new
name|LinkedList
argument_list|<
name|HiveLockObj
argument_list|>
argument_list|()
decl_stmt|;
name|HiveLockObjectData
name|lockData
init|=
operator|new
name|HiveLockObjectData
argument_list|(
name|plan
operator|.
name|getQueryId
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|,
literal|"IMPLICIT"
argument_list|,
name|plan
operator|.
name|getQueryStr
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|locks
operator|.
name|add
argument_list|(
operator|new
name|HiveLockObj
argument_list|(
operator|new
name|HiveLockObject
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|,
name|lockData
argument_list|)
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|locks
return|;
block|}
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|locks
operator|.
name|add
argument_list|(
operator|new
name|HiveLockObj
argument_list|(
operator|new
name|HiveLockObject
argument_list|(
name|t
operator|.
name|getDbName
argument_list|()
argument_list|,
name|lockData
argument_list|)
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|locks
operator|.
name|add
argument_list|(
operator|new
name|HiveLockObj
argument_list|(
operator|new
name|HiveLockObject
argument_list|(
name|t
argument_list|,
name|lockData
argument_list|)
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|mode
operator|=
name|HiveLockMode
operator|.
name|SHARED
expr_stmt|;
name|locks
operator|.
name|add
argument_list|(
operator|new
name|HiveLockObj
argument_list|(
operator|new
name|HiveLockObject
argument_list|(
name|t
operator|.
name|getDbName
argument_list|()
argument_list|,
name|lockData
argument_list|)
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|locks
return|;
block|}
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|locks
operator|.
name|add
argument_list|(
operator|new
name|HiveLockObj
argument_list|(
operator|new
name|HiveLockObject
argument_list|(
name|p
operator|.
name|getTable
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|,
name|lockData
argument_list|)
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|p
operator|instanceof
name|DummyPartition
operator|)
condition|)
block|{
name|locks
operator|.
name|add
argument_list|(
operator|new
name|HiveLockObj
argument_list|(
operator|new
name|HiveLockObject
argument_list|(
name|p
argument_list|,
name|lockData
argument_list|)
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// All the parents are locked in shared mode
name|mode
operator|=
name|HiveLockMode
operator|.
name|SHARED
expr_stmt|;
comment|// For dummy partitions, only partition name is needed
name|String
name|name
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|DummyPartition
condition|)
block|{
name|name
operator|=
name|p
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|"@"
argument_list|)
index|[
literal|2
index|]
expr_stmt|;
block|}
name|String
name|partialName
init|=
literal|""
decl_stmt|;
name|String
index|[]
name|partns
init|=
name|name
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|p
operator|instanceof
name|DummyPartition
condition|?
name|partns
operator|.
name|length
else|:
name|partns
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partialSpec
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|len
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|partn
init|=
name|partns
index|[
name|idx
index|]
decl_stmt|;
name|partialName
operator|+=
name|partn
expr_stmt|;
name|String
index|[]
name|nameValue
init|=
name|partn
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|nameValue
operator|.
name|length
operator|==
literal|2
operator|)
assert|;
name|partialSpec
operator|.
name|put
argument_list|(
name|nameValue
index|[
literal|0
index|]
argument_list|,
name|nameValue
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
try|try
block|{
name|locks
operator|.
name|add
argument_list|(
operator|new
name|HiveLockObj
argument_list|(
operator|new
name|HiveLockObject
argument_list|(
operator|new
name|DummyPartition
argument_list|(
name|p
operator|.
name|getTable
argument_list|()
argument_list|,
name|p
operator|.
name|getTable
argument_list|()
operator|.
name|getDbName
argument_list|()
operator|+
literal|"/"
operator|+
name|p
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|+
literal|"/"
operator|+
name|partialName
argument_list|,
name|partialSpec
argument_list|)
argument_list|,
name|lockData
argument_list|)
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|partialName
operator|+=
literal|"/"
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|locks
operator|.
name|add
argument_list|(
operator|new
name|HiveLockObj
argument_list|(
operator|new
name|HiveLockObject
argument_list|(
name|p
operator|.
name|getTable
argument_list|()
argument_list|,
name|lockData
argument_list|)
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|locks
operator|.
name|add
argument_list|(
operator|new
name|HiveLockObj
argument_list|(
operator|new
name|HiveLockObject
argument_list|(
name|p
operator|.
name|getTable
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|,
name|lockData
argument_list|)
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|locks
return|;
block|}
comment|// Write the current set of valid transactions into the conf file so that it can be read by
comment|// the input format.
specifier|private
name|int
name|recordValidTxns
parameter_list|()
block|{
try|try
block|{
name|ValidTxnList
name|txns
init|=
name|txnMgr
operator|.
name|getValidTxns
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ValidTxnList
operator|.
name|VALID_TXNS_KEY
argument_list|,
name|txns
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|errorMessage
operator|=
literal|"FAILED: Error in determing valid transactions: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|SQLState
operator|=
name|ErrorMsg
operator|.
name|findSQLState
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|downstreamError
operator|=
name|e
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|errorMessage
argument_list|,
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|10
return|;
block|}
block|}
comment|/**    * Acquire read and write locks needed by the statement. The list of objects to be locked are    * obtained from he inputs and outputs populated by the compiler. The lock acuisition scheme is    * pretty simple. If all the locks cannot be obtained, error out. Deadlock is avoided by making    * sure that the locks are lexicographically sorted.    **/
specifier|private
name|int
name|acquireReadWriteLocks
parameter_list|()
block|{
name|PerfLogger
name|perfLogger
init|=
name|PerfLogger
operator|.
name|getPerfLogger
argument_list|()
decl_stmt|;
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|ACQUIRE_READ_WRITE_LOCKS
argument_list|)
expr_stmt|;
try|try
block|{
name|txnMgr
operator|.
name|acquireLocks
argument_list|(
name|plan
argument_list|,
name|ctx
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|errorMessage
operator|=
literal|"FAILED: Error in acquiring locks: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|SQLState
operator|=
name|ErrorMsg
operator|.
name|findSQLState
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|downstreamError
operator|=
name|e
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|errorMessage
argument_list|,
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|10
return|;
block|}
finally|finally
block|{
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|ACQUIRE_READ_WRITE_LOCKS
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param hiveLocks    *          list of hive locks to be released Release all the locks specified. If some of the    *          locks have already been released, ignore them    **/
specifier|private
name|void
name|releaseLocks
parameter_list|(
name|List
argument_list|<
name|HiveLock
argument_list|>
name|hiveLocks
parameter_list|)
throws|throws
name|LockException
block|{
name|PerfLogger
name|perfLogger
init|=
name|PerfLogger
operator|.
name|getPerfLogger
argument_list|()
decl_stmt|;
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|RELEASE_LOCKS
argument_list|)
expr_stmt|;
if|if
condition|(
name|hiveLocks
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|getHiveTxnManager
argument_list|()
operator|.
name|getLockManager
argument_list|()
operator|.
name|releaseLocks
argument_list|(
name|hiveLocks
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|setHiveLocks
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|RELEASE_LOCKS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CommandProcessorResponse
name|run
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|CommandNeedRetryException
block|{
return|return
name|run
argument_list|(
name|command
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|CommandProcessorResponse
name|run
parameter_list|()
throws|throws
name|CommandNeedRetryException
block|{
return|return
name|run
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|CommandProcessorResponse
name|run
parameter_list|(
name|String
name|command
parameter_list|,
name|boolean
name|alreadyCompiled
parameter_list|)
throws|throws
name|CommandNeedRetryException
block|{
name|CommandProcessorResponse
name|cpr
init|=
name|runInternal
argument_list|(
name|command
argument_list|,
name|alreadyCompiled
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|cpr
return|;
block|}
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
return|return
name|cpr
return|;
block|}
name|MetaDataFormatter
name|mdf
init|=
name|MetaDataFormatUtils
operator|.
name|getFormatter
argument_list|(
name|ss
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|mdf
operator|instanceof
name|JsonMetaDataFormatter
operator|)
condition|)
block|{
return|return
name|cpr
return|;
block|}
comment|/*Here we want to encode the error in machine readable way (e.g. JSON)      * Ideally, errorCode would always be set to a canonical error defined in ErrorMsg.      * In practice that is rarely the case, so the messy logic below tries to tease      * out canonical error code if it can.  Exclude stack trace from output when      * the error is a specific/expected one.      * It's written to stdout for backward compatibility (WebHCat consumes it).*/
try|try
block|{
if|if
condition|(
name|downstreamError
operator|==
literal|null
condition|)
block|{
name|mdf
operator|.
name|error
argument_list|(
name|ss
operator|.
name|out
argument_list|,
name|errorMessage
argument_list|,
name|cpr
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|SQLState
argument_list|)
expr_stmt|;
return|return
name|cpr
return|;
block|}
name|ErrorMsg
name|canonicalErr
init|=
name|ErrorMsg
operator|.
name|getErrorMsg
argument_list|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|canonicalErr
operator|!=
literal|null
operator|&&
name|canonicalErr
operator|!=
name|ErrorMsg
operator|.
name|GENERIC_ERROR
condition|)
block|{
comment|/*Some HiveExceptions (e.g. SemanticException) don't set           canonical ErrorMsg explicitly, but there is logic           (e.g. #compile()) to find an appropriate canonical error and           return its code as error code. In this case we want to           preserve it for downstream code to interpret*/
name|mdf
operator|.
name|error
argument_list|(
name|ss
operator|.
name|out
argument_list|,
name|errorMessage
argument_list|,
name|cpr
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|SQLState
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|cpr
return|;
block|}
if|if
condition|(
name|downstreamError
operator|instanceof
name|HiveException
condition|)
block|{
name|HiveException
name|rc
init|=
operator|(
name|HiveException
operator|)
name|downstreamError
decl_stmt|;
name|mdf
operator|.
name|error
argument_list|(
name|ss
operator|.
name|out
argument_list|,
name|errorMessage
argument_list|,
name|rc
operator|.
name|getCanonicalErrorMsg
argument_list|()
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|SQLState
argument_list|,
name|rc
operator|.
name|getCanonicalErrorMsg
argument_list|()
operator|==
name|ErrorMsg
operator|.
name|GENERIC_ERROR
condition|?
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|rc
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ErrorMsg
name|canonicalMsg
init|=
name|ErrorMsg
operator|.
name|getErrorMsg
argument_list|(
name|downstreamError
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|mdf
operator|.
name|error
argument_list|(
name|ss
operator|.
name|out
argument_list|,
name|errorMessage
argument_list|,
name|canonicalMsg
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|SQLState
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|downstreamError
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|ex
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"Unable to JSON-encode the error"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|cpr
return|;
block|}
specifier|public
name|CommandProcessorResponse
name|compileAndRespond
parameter_list|(
name|String
name|command
parameter_list|)
block|{
return|return
name|createProcessorResponse
argument_list|(
name|compileInternal
argument_list|(
name|command
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|int
name|compileInternal
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
synchronized|synchronized
init|(
name|compileMonitor
init|)
block|{
name|ret
operator|=
name|compile
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
try|try
block|{
name|releaseLocks
argument_list|(
name|ctx
operator|.
name|getHiveLocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception in releasing locks. "
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|CommandProcessorResponse
name|runInternal
parameter_list|(
name|String
name|command
parameter_list|,
name|boolean
name|alreadyCompiled
parameter_list|)
throws|throws
name|CommandNeedRetryException
block|{
name|errorMessage
operator|=
literal|null
expr_stmt|;
name|SQLState
operator|=
literal|null
expr_stmt|;
name|downstreamError
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|validateConfVariables
argument_list|()
condition|)
block|{
return|return
name|createProcessorResponse
argument_list|(
literal|12
argument_list|)
return|;
block|}
name|HiveDriverRunHookContext
name|hookContext
init|=
operator|new
name|HiveDriverRunHookContextImpl
argument_list|(
name|conf
argument_list|,
name|command
argument_list|)
decl_stmt|;
comment|// Get all the driver run hooks and pre-execute them.
name|List
argument_list|<
name|HiveDriverRunHook
argument_list|>
name|driverRunHooks
decl_stmt|;
try|try
block|{
name|driverRunHooks
operator|=
name|getHooks
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DRIVER_RUN_HOOKS
argument_list|,
name|HiveDriverRunHook
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|HiveDriverRunHook
name|driverRunHook
range|:
name|driverRunHooks
control|)
block|{
name|driverRunHook
operator|.
name|preDriverRun
argument_list|(
name|hookContext
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|errorMessage
operator|=
literal|"FAILED: Hive Internal Error: "
operator|+
name|Utilities
operator|.
name|getNameMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|SQLState
operator|=
name|ErrorMsg
operator|.
name|findSQLState
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|downstreamError
operator|=
name|e
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|errorMessage
operator|+
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|createProcessorResponse
argument_list|(
literal|12
argument_list|)
return|;
block|}
comment|// Reset the perf logger
name|PerfLogger
name|perfLogger
init|=
name|PerfLogger
operator|.
name|getPerfLogger
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|DRIVER_RUN
argument_list|)
expr_stmt|;
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TIME_TO_SUBMIT
argument_list|)
expr_stmt|;
name|boolean
name|requireLock
init|=
literal|false
decl_stmt|;
name|boolean
name|ckLock
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ckLock
operator|=
name|checkConcurrency
argument_list|()
expr_stmt|;
name|createTxnManager
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
name|errorMessage
operator|=
literal|"FAILED: Error in semantic analysis: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|SQLState
operator|=
name|ErrorMsg
operator|.
name|findSQLState
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|downstreamError
operator|=
name|e
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|errorMessage
argument_list|,
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|createProcessorResponse
argument_list|(
literal|10
argument_list|)
return|;
block|}
name|int
name|ret
init|=
name|recordValidTxns
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
return|return
name|createProcessorResponse
argument_list|(
name|ret
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|alreadyCompiled
condition|)
block|{
name|ret
operator|=
name|compileInternal
argument_list|(
name|command
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
return|return
name|createProcessorResponse
argument_list|(
name|ret
argument_list|)
return|;
block|}
block|}
comment|// the reason that we set the txn manager for the cxt here is because each
comment|// query has its own ctx object. The txn mgr is shared across the
comment|// same instance of Driver, which can run multiple queries.
name|ctx
operator|.
name|setHiveTxnManager
argument_list|(
name|txnMgr
argument_list|)
expr_stmt|;
if|if
condition|(
name|ckLock
condition|)
block|{
name|boolean
name|lockOnlyMapred
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_LOCK_MAPRED_ONLY
argument_list|)
decl_stmt|;
if|if
condition|(
name|lockOnlyMapred
condition|)
block|{
name|Queue
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|taskQueue
init|=
operator|new
name|LinkedList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|taskQueue
operator|.
name|addAll
argument_list|(
name|plan
operator|.
name|getRootTasks
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|taskQueue
operator|.
name|peek
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
init|=
name|taskQueue
operator|.
name|remove
argument_list|()
decl_stmt|;
name|requireLock
operator|=
name|requireLock
operator|||
name|tsk
operator|.
name|requireLock
argument_list|()
expr_stmt|;
if|if
condition|(
name|requireLock
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|tsk
operator|instanceof
name|ConditionalTask
condition|)
block|{
name|taskQueue
operator|.
name|addAll
argument_list|(
operator|(
operator|(
name|ConditionalTask
operator|)
name|tsk
operator|)
operator|.
name|getListTasks
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tsk
operator|.
name|getChildTasks
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|taskQueue
operator|.
name|addAll
argument_list|(
name|tsk
operator|.
name|getChildTasks
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// does not add back up task here, because back up task should be the same
comment|// type of the original task.
block|}
block|}
else|else
block|{
name|requireLock
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|requireLock
condition|)
block|{
name|ret
operator|=
name|acquireReadWriteLocks
argument_list|()
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
try|try
block|{
name|releaseLocks
argument_list|(
name|ctx
operator|.
name|getHiveLocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
comment|// Not much to do here
block|}
return|return
name|createProcessorResponse
argument_list|(
name|ret
argument_list|)
return|;
block|}
block|}
name|ret
operator|=
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
comment|//if needRequireLock is false, the release here will do nothing because there is no lock
try|try
block|{
name|releaseLocks
argument_list|(
name|ctx
operator|.
name|getHiveLocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
comment|// Nothing to do here
block|}
return|return
name|createProcessorResponse
argument_list|(
name|ret
argument_list|)
return|;
block|}
comment|//if needRequireLock is false, the release here will do nothing because there is no lock
try|try
block|{
name|releaseLocks
argument_list|(
name|ctx
operator|.
name|getHiveLocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|errorMessage
operator|=
literal|"FAILED: Hive Internal Error: "
operator|+
name|Utilities
operator|.
name|getNameMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|SQLState
operator|=
name|ErrorMsg
operator|.
name|findSQLState
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|downstreamError
operator|=
name|e
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|errorMessage
operator|+
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|createProcessorResponse
argument_list|(
literal|12
argument_list|)
return|;
block|}
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|DRIVER_RUN
argument_list|)
expr_stmt|;
name|perfLogger
operator|.
name|close
argument_list|(
name|LOG
argument_list|,
name|plan
argument_list|)
expr_stmt|;
comment|// Take all the driver run hooks and post-execute them.
try|try
block|{
for|for
control|(
name|HiveDriverRunHook
name|driverRunHook
range|:
name|driverRunHooks
control|)
block|{
name|driverRunHook
operator|.
name|postDriverRun
argument_list|(
name|hookContext
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|errorMessage
operator|=
literal|"FAILED: Hive Internal Error: "
operator|+
name|Utilities
operator|.
name|getNameMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|SQLState
operator|=
name|ErrorMsg
operator|.
name|findSQLState
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|downstreamError
operator|=
name|e
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|errorMessage
operator|+
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|createProcessorResponse
argument_list|(
literal|12
argument_list|)
return|;
block|}
return|return
name|createProcessorResponse
argument_list|(
name|ret
argument_list|)
return|;
block|}
specifier|private
name|CommandProcessorResponse
name|createProcessorResponse
parameter_list|(
name|int
name|ret
parameter_list|)
block|{
return|return
operator|new
name|CommandProcessorResponse
argument_list|(
name|ret
argument_list|,
name|errorMessage
argument_list|,
name|SQLState
argument_list|,
name|downstreamError
argument_list|)
return|;
block|}
comment|/**    * Validate configuration variables.    *    * @return    */
specifier|private
name|boolean
name|validateConfVariables
parameter_list|()
block|{
name|boolean
name|valid
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_HADOOP_SUPPORTS_SUBDIRECTORIES
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPMAPREDINPUTDIRRECURSIVE
argument_list|)
operator|)
operator|||
operator|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEOPTLISTBUCKETING
argument_list|)
operator|)
operator|||
operator|(
operator|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_OPTIMIZE_UNION_REMOVE
argument_list|)
operator|)
operator|)
operator|)
condition|)
block|{
name|errorMessage
operator|=
literal|"FAILED: Hive Internal Error: "
operator|+
name|ErrorMsg
operator|.
name|SUPPORT_DIR_MUST_TRUE_FOR_LIST_BUCKETING
operator|.
name|getMsg
argument_list|()
expr_stmt|;
name|SQLState
operator|=
name|ErrorMsg
operator|.
name|SUPPORT_DIR_MUST_TRUE_FOR_LIST_BUCKETING
operator|.
name|getSQLState
argument_list|()
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|errorMessage
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|valid
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|valid
return|;
block|}
comment|/**    * Returns a set of hooks specified in a configuration variable.    * See getHooks(HiveConf.ConfVars hookConfVar, Class<T> clazz)    */
specifier|private
name|List
argument_list|<
name|Hook
argument_list|>
name|getHooks
parameter_list|(
name|HiveConf
operator|.
name|ConfVars
name|hookConfVar
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getHooks
argument_list|(
name|hookConfVar
argument_list|,
name|Hook
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Returns the hooks specified in a configuration variable.    *    * @param hookConfVar The configuration variable specifying a comma separated list of the hook    *                    class names.    * @param clazz       The super type of the hooks.    * @return            A list of the hooks cast as the type specified in clazz, in the order    *                    they are listed in the value of hookConfVar    * @throws Exception    */
specifier|private
parameter_list|<
name|T
extends|extends
name|Hook
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getHooks
parameter_list|(
name|ConfVars
name|hookConfVar
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|HookUtils
operator|.
name|getHooks
argument_list|(
name|conf
argument_list|,
name|hookConfVar
argument_list|,
name|clazz
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
name|hookConfVar
operator|.
name|varname
operator|+
literal|" Class not found:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|CommandNeedRetryException
block|{
name|PerfLogger
name|perfLogger
init|=
name|PerfLogger
operator|.
name|getPerfLogger
argument_list|()
decl_stmt|;
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|DRIVER_EXECUTE
argument_list|)
expr_stmt|;
name|boolean
name|noName
init|=
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPJOBNAME
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxlen
init|=
name|conf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEJOBNAMELENGTH
argument_list|)
decl_stmt|;
name|String
name|queryId
init|=
name|plan
operator|.
name|getQueryId
argument_list|()
decl_stmt|;
name|String
name|queryStr
init|=
name|plan
operator|.
name|getQueryStr
argument_list|()
decl_stmt|;
name|maxthreads
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|EXECPARALLETHREADNUMBER
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting command: "
operator|+
name|queryStr
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setStarted
argument_list|()
expr_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|startQuery
argument_list|(
name|queryStr
argument_list|,
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|logPlanProgress
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
name|resStream
operator|=
literal|null
expr_stmt|;
name|HookContext
name|hookContext
init|=
operator|new
name|HookContext
argument_list|(
name|plan
argument_list|,
name|conf
argument_list|,
name|ctx
operator|.
name|getPathToCS
argument_list|()
argument_list|)
decl_stmt|;
name|hookContext
operator|.
name|setHookType
argument_list|(
name|HookContext
operator|.
name|HookType
operator|.
name|PRE_EXEC_HOOK
argument_list|)
expr_stmt|;
for|for
control|(
name|Hook
name|peh
range|:
name|getHooks
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
argument_list|)
control|)
block|{
if|if
condition|(
name|peh
operator|instanceof
name|ExecuteWithHookContext
condition|)
block|{
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|PRE_HOOK
operator|+
name|peh
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ExecuteWithHookContext
operator|)
name|peh
operator|)
operator|.
name|run
argument_list|(
name|hookContext
argument_list|)
expr_stmt|;
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|PRE_HOOK
operator|+
name|peh
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|peh
operator|instanceof
name|PreExecute
condition|)
block|{
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|PRE_HOOK
operator|+
name|peh
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|PreExecute
operator|)
name|peh
operator|)
operator|.
name|run
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
argument_list|,
name|plan
operator|.
name|getInputs
argument_list|()
argument_list|,
name|plan
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getUGIForConf
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|PRE_HOOK
operator|+
name|peh
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|jobs
init|=
name|Utilities
operator|.
name|getMRTasks
argument_list|(
name|plan
operator|.
name|getRootTasks
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|+
name|Utilities
operator|.
name|getTezTasks
argument_list|(
name|plan
operator|.
name|getRootTasks
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|jobs
operator|>
literal|0
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Query ID = "
operator|+
name|plan
operator|.
name|getQueryId
argument_list|()
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Total jobs = "
operator|+
name|jobs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|setQueryProperty
argument_list|(
name|queryId
argument_list|,
name|Keys
operator|.
name|QUERY_NUM_TASKS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|jobs
argument_list|)
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|setIdToTableMap
argument_list|(
name|plan
operator|.
name|getIdToTableNameMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|jobname
init|=
name|Utilities
operator|.
name|abbreviate
argument_list|(
name|queryStr
argument_list|,
name|maxlen
operator|-
literal|6
argument_list|)
decl_stmt|;
comment|// A runtime that launches runnable tasks as separate Threads through
comment|// TaskRunners
comment|// As soon as a task isRunnable, it is put in a queue
comment|// At any time, at most maxthreads tasks can be running
comment|// The main thread polls the TaskRunners to check if they have finished.
name|DriverContext
name|driverCxt
init|=
operator|new
name|DriverContext
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|driverCxt
operator|.
name|prepare
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setHDFSCleanup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|driverCxt
operator|=
name|driverCxt
expr_stmt|;
comment|// for canceling the query (should be bound to session?)
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setMapRedStats
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|MapRedStats
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setStackTraces
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setLocalMapRedErrors
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add root Tasks to runnable
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|plan
operator|.
name|getRootTasks
argument_list|()
control|)
block|{
comment|// This should never happen, if it does, it's a bug with the potential to produce
comment|// incorrect results.
assert|assert
name|tsk
operator|.
name|getParentTasks
argument_list|()
operator|==
literal|null
operator|||
name|tsk
operator|.
name|getParentTasks
argument_list|()
operator|.
name|isEmpty
argument_list|()
assert|;
name|driverCxt
operator|.
name|addToRunnable
argument_list|(
name|tsk
argument_list|)
expr_stmt|;
block|}
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TIME_TO_SUBMIT
argument_list|)
expr_stmt|;
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|RUN_TASKS
argument_list|)
expr_stmt|;
comment|// Loop while you either have tasks running, or tasks queued up
while|while
condition|(
operator|!
name|destroyed
operator|&&
name|driverCxt
operator|.
name|isRunning
argument_list|()
condition|)
block|{
comment|// Launch upto maxthreads tasks
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
decl_stmt|;
while|while
condition|(
operator|(
name|task
operator|=
name|driverCxt
operator|.
name|getRunnable
argument_list|(
name|maxthreads
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TASK
operator|+
name|task
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|task
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|TaskRunner
name|runner
init|=
name|launchTask
argument_list|(
name|task
argument_list|,
name|queryId
argument_list|,
name|noName
argument_list|,
name|jobname
argument_list|,
name|jobs
argument_list|,
name|driverCxt
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|runner
operator|.
name|isRunning
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
comment|// poll the Tasks to see which one completed
name|TaskRunner
name|tskRun
init|=
name|driverCxt
operator|.
name|pollFinished
argument_list|()
decl_stmt|;
if|if
condition|(
name|tskRun
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|hookContext
operator|.
name|addCompleteTask
argument_list|(
name|tskRun
argument_list|)
expr_stmt|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
init|=
name|tskRun
operator|.
name|getTask
argument_list|()
decl_stmt|;
name|TaskResult
name|result
init|=
name|tskRun
operator|.
name|getTaskResult
argument_list|()
decl_stmt|;
name|int
name|exitVal
init|=
name|result
operator|.
name|getExitVal
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitVal
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|tsk
operator|.
name|ifRetryCmdWhenFail
argument_list|()
condition|)
block|{
name|driverCxt
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// in case we decided to run everything in local mode, restore the
comment|// the jobtracker setting to its initial value
name|ctx
operator|.
name|restoreOriginalTracker
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|CommandNeedRetryException
argument_list|()
throw|;
block|}
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|backupTask
init|=
name|tsk
operator|.
name|getAndInitBackupTask
argument_list|()
decl_stmt|;
if|if
condition|(
name|backupTask
operator|!=
literal|null
condition|)
block|{
name|setErrorMsgAndDetail
argument_list|(
name|exitVal
argument_list|,
name|result
operator|.
name|getTaskError
argument_list|()
argument_list|,
name|tsk
argument_list|)
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
name|errorMessage
operator|=
literal|"ATTEMPT: Execute BackupTask: "
operator|+
name|backupTask
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
comment|// add backup task to runnable
if|if
condition|(
name|DriverContext
operator|.
name|isLaunchable
argument_list|(
name|backupTask
argument_list|)
condition|)
block|{
name|driverCxt
operator|.
name|addToRunnable
argument_list|(
name|backupTask
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
else|else
block|{
name|hookContext
operator|.
name|setHookType
argument_list|(
name|HookContext
operator|.
name|HookType
operator|.
name|ON_FAILURE_HOOK
argument_list|)
expr_stmt|;
comment|// Get all the failure execution hooks and execute them.
for|for
control|(
name|Hook
name|ofh
range|:
name|getHooks
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|ONFAILUREHOOKS
argument_list|)
control|)
block|{
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|FAILURE_HOOK
operator|+
name|ofh
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ExecuteWithHookContext
operator|)
name|ofh
operator|)
operator|.
name|run
argument_list|(
name|hookContext
argument_list|)
expr_stmt|;
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|FAILURE_HOOK
operator|+
name|ofh
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setErrorMsgAndDetail
argument_list|(
name|exitVal
argument_list|,
name|result
operator|.
name|getTaskError
argument_list|()
argument_list|,
name|tsk
argument_list|)
expr_stmt|;
name|SQLState
operator|=
literal|"08S01"
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
name|driverCxt
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// in case we decided to run everything in local mode, restore the
comment|// the jobtracker setting to its initial value
name|ctx
operator|.
name|restoreOriginalTracker
argument_list|()
expr_stmt|;
return|return
name|exitVal
return|;
block|}
block|}
name|driverCxt
operator|.
name|finished
argument_list|(
name|tskRun
argument_list|)
expr_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|setTaskProperty
argument_list|(
name|queryId
argument_list|,
name|tsk
operator|.
name|getId
argument_list|()
argument_list|,
name|Keys
operator|.
name|TASK_RET_CODE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|exitVal
argument_list|)
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|endTask
argument_list|(
name|queryId
argument_list|,
name|tsk
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tsk
operator|.
name|getChildTasks
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|child
range|:
name|tsk
operator|.
name|getChildTasks
argument_list|()
control|)
block|{
if|if
condition|(
name|DriverContext
operator|.
name|isLaunchable
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|driverCxt
operator|.
name|addToRunnable
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|RUN_TASKS
argument_list|)
expr_stmt|;
comment|// in case we decided to run everything in local mode, restore the
comment|// the jobtracker setting to its initial value
name|ctx
operator|.
name|restoreOriginalTracker
argument_list|()
expr_stmt|;
if|if
condition|(
name|driverCxt
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
name|SQLState
operator|=
literal|"HY008"
expr_stmt|;
name|errorMessage
operator|=
literal|"FAILED: Operation cancelled"
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
return|return
literal|1000
return|;
block|}
comment|// remove incomplete outputs.
comment|// Some incomplete outputs may be added at the beginning, for eg: for dynamic partitions.
comment|// remove them
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|remOutputs
init|=
operator|new
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WriteEntity
name|output
range|:
name|plan
operator|.
name|getOutputs
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|output
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|remOutputs
operator|.
name|add
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|WriteEntity
name|output
range|:
name|remOutputs
control|)
block|{
name|plan
operator|.
name|getOutputs
argument_list|()
operator|.
name|remove
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
name|hookContext
operator|.
name|setHookType
argument_list|(
name|HookContext
operator|.
name|HookType
operator|.
name|POST_EXEC_HOOK
argument_list|)
expr_stmt|;
comment|// Get all the post execution hooks and execute them.
for|for
control|(
name|Hook
name|peh
range|:
name|getHooks
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
argument_list|)
control|)
block|{
if|if
condition|(
name|peh
operator|instanceof
name|ExecuteWithHookContext
condition|)
block|{
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|POST_HOOK
operator|+
name|peh
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ExecuteWithHookContext
operator|)
name|peh
operator|)
operator|.
name|run
argument_list|(
name|hookContext
argument_list|)
expr_stmt|;
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|POST_HOOK
operator|+
name|peh
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|peh
operator|instanceof
name|PostExecute
condition|)
block|{
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|POST_HOOK
operator|+
name|peh
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|PostExecute
operator|)
name|peh
operator|)
operator|.
name|run
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
argument_list|,
name|plan
operator|.
name|getInputs
argument_list|()
argument_list|,
name|plan
operator|.
name|getOutputs
argument_list|()
argument_list|,
operator|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|?
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getLineageState
argument_list|()
operator|.
name|getLineageInfo
argument_list|()
else|:
literal|null
operator|)
argument_list|,
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getUGIForConf
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|POST_HOOK
operator|+
name|peh
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|setQueryProperty
argument_list|(
name|queryId
argument_list|,
name|Keys
operator|.
name|QUERY_RET_CODE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|printRowCount
argument_list|(
name|queryId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CommandNeedRetryException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ctx
operator|.
name|restoreOriginalTracker
argument_list|()
expr_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|setQueryProperty
argument_list|(
name|queryId
argument_list|,
name|Keys
operator|.
name|QUERY_RET_CODE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: do better with handling types of Exception here
name|errorMessage
operator|=
literal|"FAILED: Hive Internal Error: "
operator|+
name|Utilities
operator|.
name|getNameMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|SQLState
operator|=
literal|"08S01"
expr_stmt|;
name|downstreamError
operator|=
name|e
expr_stmt|;
name|console
operator|.
name|printError
argument_list|(
name|errorMessage
operator|+
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
literal|12
operator|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|endQuery
argument_list|(
name|queryId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|noName
condition|)
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPJOBNAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|DRIVER_EXECUTE
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|MapRedStats
argument_list|>
name|stats
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getMapRedStats
argument_list|()
decl_stmt|;
if|if
condition|(
name|stats
operator|!=
literal|null
operator|&&
operator|!
name|stats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|long
name|totalCpu
init|=
literal|0
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"MapReduce Jobs Launched: "
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MapRedStats
argument_list|>
name|entry
range|:
name|stats
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Stage-"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|": "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|totalCpu
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getCpuMSec
argument_list|()
expr_stmt|;
block|}
name|console
operator|.
name|printInfo
argument_list|(
literal|"Total MapReduce CPU Time Spent: "
operator|+
name|Utilities
operator|.
name|formatMsecToStr
argument_list|(
name|totalCpu
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|plan
operator|.
name|setDone
argument_list|()
expr_stmt|;
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getLineageState
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|logPlanProgress
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|console
operator|.
name|printInfo
argument_list|(
literal|"OK"
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
specifier|private
name|void
name|setErrorMsgAndDetail
parameter_list|(
name|int
name|exitVal
parameter_list|,
name|Throwable
name|downstreamError
parameter_list|,
name|Task
name|tsk
parameter_list|)
block|{
name|this
operator|.
name|downstreamError
operator|=
name|downstreamError
expr_stmt|;
name|errorMessage
operator|=
literal|"FAILED: Execution Error, return code "
operator|+
name|exitVal
operator|+
literal|" from "
operator|+
name|tsk
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|downstreamError
operator|!=
literal|null
condition|)
block|{
comment|//here we assume that upstream code may have parametrized the msg from ErrorMsg
comment|//so we want to keep it
name|errorMessage
operator|+=
literal|". "
operator|+
name|downstreamError
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ErrorMsg
name|em
init|=
name|ErrorMsg
operator|.
name|getErrorMsg
argument_list|(
name|exitVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|em
operator|!=
literal|null
condition|)
block|{
name|errorMessage
operator|+=
literal|". "
operator|+
name|em
operator|.
name|getMsg
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Launches a new task    *    * @param tsk    *          task being launched    * @param queryId    *          Id of the query containing the task    * @param noName    *          whether the task has a name set    * @param jobname    *          name of the task, if it is a map-reduce job    * @param jobs    *          number of map-reduce jobs    * @param cxt    *          the driver context    */
specifier|private
name|TaskRunner
name|launchTask
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
parameter_list|,
name|String
name|queryId
parameter_list|,
name|boolean
name|noName
parameter_list|,
name|String
name|jobname
parameter_list|,
name|int
name|jobs
parameter_list|,
name|DriverContext
name|cxt
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHiveHistory
argument_list|()
operator|.
name|startTask
argument_list|(
name|queryId
argument_list|,
name|tsk
argument_list|,
name|tsk
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tsk
operator|.
name|isMapRedTask
argument_list|()
operator|&&
operator|!
operator|(
name|tsk
operator|instanceof
name|ConditionalTask
operator|)
condition|)
block|{
if|if
condition|(
name|noName
condition|)
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPJOBNAME
argument_list|,
name|jobname
operator|+
literal|"("
operator|+
name|tsk
operator|.
name|getId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.workflow.node.name"
argument_list|,
name|tsk
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|setWorkflowAdjacencies
argument_list|(
name|conf
argument_list|,
name|plan
argument_list|)
expr_stmt|;
name|cxt
operator|.
name|incCurJobNo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Launching Job "
operator|+
name|cxt
operator|.
name|getCurJobNo
argument_list|()
operator|+
literal|" out of "
operator|+
name|jobs
argument_list|)
expr_stmt|;
block|}
name|tsk
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|plan
argument_list|,
name|cxt
argument_list|)
expr_stmt|;
name|TaskResult
name|tskRes
init|=
operator|new
name|TaskResult
argument_list|()
decl_stmt|;
name|TaskRunner
name|tskRun
init|=
operator|new
name|TaskRunner
argument_list|(
name|tsk
argument_list|,
name|tskRes
argument_list|)
decl_stmt|;
name|cxt
operator|.
name|launching
argument_list|(
name|tskRun
argument_list|)
expr_stmt|;
comment|// Launch Task
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|EXECPARALLEL
argument_list|)
operator|&&
name|tsk
operator|.
name|isMapRedTask
argument_list|()
condition|)
block|{
comment|// Launch it in the parallel mode, as a separate thread only for MR tasks
name|tskRun
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tskRun
operator|.
name|runSequential
argument_list|()
expr_stmt|;
block|}
return|return
name|tskRun
return|;
block|}
specifier|public
name|boolean
name|isFetchingTable
parameter_list|()
block|{
return|return
name|plan
operator|!=
literal|null
operator|&&
name|plan
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|boolean
name|getResults
parameter_list|(
name|List
name|res
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
if|if
condition|(
name|destroyed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"FAILED: Operation cancelled"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isFetchingTable
argument_list|()
condition|)
block|{
name|FetchTask
name|ft
init|=
name|plan
operator|.
name|getFetchTask
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setMaxRows
argument_list|(
name|maxRows
argument_list|)
expr_stmt|;
return|return
name|ft
operator|.
name|fetch
argument_list|(
name|res
argument_list|)
return|;
block|}
if|if
condition|(
name|resStream
operator|==
literal|null
condition|)
block|{
name|resStream
operator|=
name|ctx
operator|.
name|getStream
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|resStream
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|numRows
init|=
literal|0
decl_stmt|;
name|String
name|row
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|numRows
operator|<
name|maxRows
condition|)
block|{
if|if
condition|(
name|resStream
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|numRows
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
name|bos
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Utilities
operator|.
name|StreamStatus
name|ss
decl_stmt|;
try|try
block|{
name|ss
operator|=
name|Utilities
operator|.
name|readColumn
argument_list|(
name|resStream
argument_list|,
name|bos
argument_list|)
expr_stmt|;
if|if
condition|(
name|bos
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|row
operator|=
operator|new
name|String
argument_list|(
name|bos
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bos
operator|.
name|getLength
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ss
operator|==
name|Utilities
operator|.
name|StreamStatus
operator|.
name|TERMINATED
condition|)
block|{
name|row
operator|=
operator|new
name|String
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
block|{
name|numRows
operator|++
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|row
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"FAILED: Unexpected IO exception : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|ss
operator|==
name|Utilities
operator|.
name|StreamStatus
operator|.
name|EOF
condition|)
block|{
name|resStream
operator|=
name|ctx
operator|.
name|getStream
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|resetFetch
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|plan
operator|!=
literal|null
operator|&&
name|plan
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|plan
operator|.
name|getFetchTask
argument_list|()
operator|.
name|clearFetch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error closing the current fetch task"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|plan
operator|.
name|getFetchTask
argument_list|()
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|plan
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ctx
operator|.
name|resetStream
argument_list|()
expr_stmt|;
name|resStream
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getTryCount
parameter_list|()
block|{
return|return
name|tryCount
return|;
block|}
specifier|public
name|void
name|setTryCount
parameter_list|(
name|int
name|tryCount
parameter_list|)
block|{
name|this
operator|.
name|tryCount
operator|=
name|tryCount
expr_stmt|;
block|}
specifier|public
name|int
name|close
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|plan
operator|!=
literal|null
condition|)
block|{
name|FetchTask
name|fetchTask
init|=
name|plan
operator|.
name|getFetchTask
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|fetchTask
condition|)
block|{
try|try
block|{
name|fetchTask
operator|.
name|clearFetch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|" Exception while clearing the Fetch task "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|driverCxt
operator|!=
literal|null
condition|)
block|{
name|driverCxt
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|driverCxt
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|resStream
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|FSDataInputStream
operator|)
name|resStream
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|" Exception while closing the resStream "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"FAILED: Hive Internal Error: "
operator|+
name|Utilities
operator|.
name|getNameMessage
argument_list|(
name|e
argument_list|)
operator|+
literal|"\n"
operator|+
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|13
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
if|if
condition|(
name|destroyed
condition|)
block|{
return|return;
block|}
name|destroyed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|releaseLocks
argument_list|(
name|ctx
operator|.
name|getHiveLocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception when releasing locking in destroy: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|txnMgr
operator|!=
literal|null
condition|)
block|{
name|txnMgr
operator|.
name|closeTxnManager
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|Query
name|getQueryPlan
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|plan
operator|.
name|getQueryPlan
argument_list|()
return|;
block|}
specifier|public
name|String
name|getErrorMsg
parameter_list|()
block|{
return|return
name|errorMessage
return|;
block|}
block|}
end_class

end_unit

