begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|WritableHiveObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|WritableComparableHiveObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapredWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExecMapper
operator|.
name|reportStats
import|;
end_import

begin_class
specifier|public
class|class
name|ExecReducer
extends|extends
name|MapReduceBase
implements|implements
name|Reducer
block|{
specifier|private
name|JobConf
name|jc
decl_stmt|;
specifier|private
name|OutputCollector
name|oc
decl_stmt|;
specifier|private
name|Operator
name|reducer
decl_stmt|;
specifier|private
name|Reporter
name|rp
decl_stmt|;
specifier|private
name|boolean
name|abort
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|isTagged
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|HiveObject
index|[]
name|tagObjects
init|=
operator|new
name|HiveObject
index|[
name|Byte
operator|.
name|MAX_VALUE
index|]
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|fieldNames
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Log
name|l4j
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"ExecReducer"
argument_list|)
decl_stmt|;
static|static
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldNameArray
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Utilities
operator|.
name|ReduceField
name|r
range|:
name|Utilities
operator|.
name|ReduceField
operator|.
name|values
argument_list|()
control|)
block|{
name|fieldNameArray
operator|.
name|add
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fieldNames
operator|=
name|fieldNameArray
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|jc
operator|=
name|job
expr_stmt|;
name|mapredWork
name|gWork
init|=
name|Utilities
operator|.
name|getMapRedWork
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|reducer
operator|=
name|gWork
operator|.
name|getReducer
argument_list|()
expr_stmt|;
name|reducer
operator|.
name|setMapredWork
argument_list|(
name|gWork
argument_list|)
expr_stmt|;
name|isTagged
operator|=
name|gWork
operator|.
name|getNeedsTagging
argument_list|()
expr_stmt|;
comment|// create a hive object to encapsulate each one of the potential tags
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Byte
operator|.
name|MAX_VALUE
condition|;
name|i
operator|++
control|)
block|{
name|tagObjects
index|[
name|i
index|]
operator|=
operator|new
name|PrimitiveHiveObject
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|reduce
parameter_list|(
name|Object
name|key
parameter_list|,
name|Iterator
name|values
parameter_list|,
name|OutputCollector
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|oc
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|oc
operator|=
name|output
expr_stmt|;
name|reducer
operator|.
name|setOutputCollector
argument_list|(
name|oc
argument_list|)
expr_stmt|;
name|reducer
operator|.
name|initialize
argument_list|(
name|jc
argument_list|)
expr_stmt|;
name|rp
operator|=
name|reporter
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|abort
operator|=
literal|true
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Reduce operator initialization failed"
argument_list|)
throw|;
block|}
block|}
try|try
block|{
comment|// the key is either a WritableComparable or a NoTagWritableComparable
name|HiveObject
name|keyObject
init|=
operator|(
operator|(
name|WritableComparableHiveObject
operator|)
name|key
operator|)
operator|.
name|getHo
argument_list|()
decl_stmt|;
comment|//System.err.print(keyObject.toString());
comment|// If a operator wants to do some work at the beginning of a group
name|reducer
operator|.
name|startGroup
argument_list|()
expr_stmt|;
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|WritableHiveObject
name|who
init|=
operator|(
name|WritableHiveObject
operator|)
name|values
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//System.err.print(who.getHo().toString());
name|LabeledCompositeHiveObject
name|lho
init|=
operator|new
name|LabeledCompositeHiveObject
argument_list|(
name|fieldNames
argument_list|)
decl_stmt|;
name|lho
operator|.
name|addHiveObject
argument_list|(
name|keyObject
argument_list|)
expr_stmt|;
name|lho
operator|.
name|addHiveObject
argument_list|(
name|who
operator|.
name|getHo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTagged
condition|)
block|{
name|lho
operator|.
name|addHiveObject
argument_list|(
name|tagObjects
index|[
name|who
operator|.
name|getTag
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
name|reducer
operator|.
name|process
argument_list|(
name|lho
argument_list|)
expr_stmt|;
block|}
comment|// If a operator wants to do some work at the end of a group
name|reducer
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|abort
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|reducer
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
name|reportStats
name|rps
init|=
operator|new
name|reportStats
argument_list|(
name|rp
argument_list|)
decl_stmt|;
name|reducer
operator|.
name|preorderMap
argument_list|(
name|rps
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|abort
condition|)
block|{
comment|// signal new failure to map-reduce
name|l4j
operator|.
name|error
argument_list|(
literal|"Hit error while closing operators - failing tree"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while closing operators: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

