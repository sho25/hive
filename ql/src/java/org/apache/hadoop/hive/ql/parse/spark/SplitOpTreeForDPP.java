begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SerializationUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|SparkUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|SemanticNodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * This processor triggers on SparkPartitionPruningSinkOperator. For a operator tree like  * this:  *  * Original Tree:  *     TS1       TS2  *      |          |  *      FIL       FIL  *      |          |  *      RS      /   \   \  *      |      |    \    \  *      |     RS  SEL  SEL  *      \   /      |     |  *      JOIN      GBY   GBY  *                  |    |  *                  |  SPARKPRUNINGSINK  *                  |  *              SPARKPRUNINGSINK  *  * It removes the branch containing SPARKPRUNINGSINK from the original operator tree, and splits it into  * two separate trees:  * Tree #1:                       Tree #2  *      TS1    TS2                 TS2  *      |      |                    |  *      FIL    FIL                 FIL  *      |       |                   |_____  *      RS     SEL                  |     \  *      |       |                   SEL    SEL  *      |     RS                    |      |  *      \   /                       GBY    GBY  *      JOIN                        |      |  *                                  |    SPARKPRUNINGSINK  *                                 SPARKPRUNINGSINK   * For MapJoinOperator, this optimizer will not do anything - it should be executed within  * the same SparkTask.  */
end_comment

begin_class
specifier|public
class|class
name|SplitOpTreeForDPP
implements|implements
name|SemanticNodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|SparkPartitionPruningSinkOperator
name|pruningSinkOp
init|=
operator|(
name|SparkPartitionPruningSinkOperator
operator|)
name|nd
decl_stmt|;
name|GenSparkProcContext
name|context
init|=
operator|(
name|GenSparkProcContext
operator|)
name|procCtx
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
range|:
name|context
operator|.
name|pruningSinkSet
control|)
block|{
if|if
condition|(
name|pruningSinkOp
operator|.
name|getOperatorId
argument_list|()
operator|.
name|equals
argument_list|(
name|op
operator|.
name|getOperatorId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// If pruning sink operator is with map join, then pruning sink need not be split to a
comment|// separate tree.  Add the pruning sink operator to context and return
if|if
condition|(
name|pruningSinkOp
operator|.
name|isWithMapjoin
argument_list|()
condition|)
block|{
name|context
operator|.
name|pruningSinkSet
operator|.
name|add
argument_list|(
name|pruningSinkOp
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|roots
init|=
operator|new
name|LinkedList
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|collectRoots
argument_list|(
name|roots
argument_list|,
name|pruningSinkOp
argument_list|)
expr_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|branchingOp
init|=
name|pruningSinkOp
operator|.
name|getBranchingOp
argument_list|()
decl_stmt|;
name|String
name|marker
init|=
literal|"SPARK_DPP_BRANCH_POINT_"
operator|+
name|branchingOp
operator|.
name|getOperatorId
argument_list|()
decl_stmt|;
name|branchingOp
operator|.
name|setMarker
argument_list|(
name|marker
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|savedChildOps
init|=
name|branchingOp
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|firstNodesOfPruningBranch
init|=
name|findFirstNodesOfPruningBranch
argument_list|(
name|branchingOp
argument_list|)
decl_stmt|;
name|branchingOp
operator|.
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// Now clone the tree above selOp
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|newRoots
init|=
name|SerializationUtilities
operator|.
name|cloneOperatorTree
argument_list|(
name|roots
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|roots
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TableScanOperator
name|newTs
init|=
operator|(
name|TableScanOperator
operator|)
name|newRoots
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|TableScanOperator
name|oldTs
init|=
operator|(
name|TableScanOperator
operator|)
name|roots
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|newTs
operator|.
name|getConf
argument_list|()
operator|.
name|setTableMetadata
argument_list|(
name|oldTs
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|clonedPruningTableScanSet
operator|.
name|addAll
argument_list|(
name|newRoots
argument_list|)
expr_stmt|;
name|Operator
name|newBranchingOp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newRoots
operator|.
name|size
argument_list|()
operator|&&
name|newBranchingOp
operator|==
literal|null
condition|;
name|i
operator|++
control|)
block|{
name|newBranchingOp
operator|=
name|OperatorUtils
operator|.
name|findOperatorByMarker
argument_list|(
name|newRoots
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|marker
argument_list|)
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|newBranchingOp
argument_list|,
literal|"Cannot find the branching operator in cloned tree."
argument_list|)
expr_stmt|;
name|newBranchingOp
operator|.
name|setChildOperators
argument_list|(
name|firstNodesOfPruningBranch
argument_list|)
expr_stmt|;
comment|// Restore broken links between operators, and remove the branch from the original tree
name|branchingOp
operator|.
name|setChildOperators
argument_list|(
name|savedChildOps
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
name|selOp
range|:
name|firstNodesOfPruningBranch
control|)
block|{
name|branchingOp
operator|.
name|removeChild
argument_list|(
name|selOp
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|sinkSet
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|sel
range|:
name|firstNodesOfPruningBranch
control|)
block|{
name|SparkUtilities
operator|.
name|collectOp
argument_list|(
name|sinkSet
argument_list|,
name|sel
argument_list|,
name|SparkPartitionPruningSinkOperator
operator|.
name|class
argument_list|)
expr_stmt|;
name|sel
operator|.
name|setParentOperators
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|newBranchingOp
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|pruningSinkSet
operator|.
name|addAll
argument_list|(
name|sinkSet
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|//find operators which are the children of specified filterOp and there are SparkPartitionPruningSink in these
comment|//branches.
specifier|private
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|findFirstNodesOfPruningBranch
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|branchingOp
parameter_list|)
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
name|child
range|:
name|branchingOp
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|SparkUtilities
operator|.
name|isDirectDPPBranch
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
comment|/**    * Recursively collect all roots (e.g., table scans) that can be reached via this op.    * @param result contains all roots can be reached via op    * @param op the op to examine.    */
specifier|private
name|void
name|collectRoots
parameter_list|(
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|op
parameter_list|)
block|{
if|if
condition|(
name|op
operator|.
name|getNumParent
argument_list|()
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|parentOp
range|:
name|op
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|collectRoots
argument_list|(
name|result
argument_list|,
name|parentOp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

