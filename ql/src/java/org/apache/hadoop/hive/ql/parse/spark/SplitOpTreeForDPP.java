begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SerializationUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|SparkUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * This processor triggers on SparkPartitionPruningSinkOperator. For a operator tree like  * this:  *  * Original Tree:  *     TS    TS  *      |     |  *     FIL   FIL  *      |     | \  *     RS     RS SEL  *       \   /    |  *        JOIN   GBY  *                |  *               SPARKPRUNINGSINK  *  * It removes the branch containing SPARKPRUNINGSINK from the original operator tree, and splits it into  * two separate trees:  *  * Tree #1:                 Tree #2:  *     TS    TS               TS  *      |     |                |  *     FIL   FIL              FIL  *      |     |                |  *     RS     RS              SEL  *       \   /                 |  *       JOIN                 GBY  *                             |  *                            SPARKPRUNINGSINK  *  * For MapJoinOperator, this optimizer will not do anything - it should be executed within  * the same SparkTask.  */
end_comment

begin_class
specifier|public
class|class
name|SplitOpTreeForDPP
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|SparkPartitionPruningSinkOperator
name|pruningSinkOp
init|=
operator|(
name|SparkPartitionPruningSinkOperator
operator|)
name|nd
decl_stmt|;
name|GenSparkProcContext
name|context
init|=
operator|(
name|GenSparkProcContext
operator|)
name|procCtx
decl_stmt|;
comment|// Locate the op where the branch starts
comment|// This is guaranteed to succeed since the branch always follow the pattern
comment|// as shown in the first picture above.
name|Operator
argument_list|<
name|?
argument_list|>
name|filterOp
init|=
name|pruningSinkOp
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|selOp
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|filterOp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|filterOp
operator|.
name|getNumChild
argument_list|()
operator|>
literal|1
condition|)
block|{
break|break;
block|}
else|else
block|{
name|selOp
operator|=
name|filterOp
expr_stmt|;
name|filterOp
operator|=
name|filterOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check if this is a MapJoin. If so, do not split.
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|childOp
range|:
name|filterOp
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|childOp
operator|instanceof
name|ReduceSinkOperator
operator|&&
name|childOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|MapJoinOperator
condition|)
block|{
name|context
operator|.
name|pruningSinkSet
operator|.
name|add
argument_list|(
name|pruningSinkOp
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|roots
init|=
operator|new
name|LinkedList
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|collectRoots
argument_list|(
name|roots
argument_list|,
name|pruningSinkOp
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|savedChildOps
init|=
name|filterOp
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
name|filterOp
operator|.
name|setChildOperators
argument_list|(
name|Utilities
operator|.
name|makeList
argument_list|(
name|selOp
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now clone the tree above selOp
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|newRoots
init|=
name|SerializationUtilities
operator|.
name|cloneOperatorTree
argument_list|(
name|context
operator|.
name|parseContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|roots
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|roots
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TableScanOperator
name|newTs
init|=
operator|(
name|TableScanOperator
operator|)
name|newRoots
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|TableScanOperator
name|oldTs
init|=
operator|(
name|TableScanOperator
operator|)
name|roots
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|newTs
operator|.
name|getConf
argument_list|()
operator|.
name|setTableMetadata
argument_list|(
name|oldTs
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|clonedPruningTableScanSet
operator|.
name|addAll
argument_list|(
name|newRoots
argument_list|)
expr_stmt|;
comment|// Restore broken links between operators, and remove the branch from the original tree
name|filterOp
operator|.
name|setChildOperators
argument_list|(
name|savedChildOps
argument_list|)
expr_stmt|;
name|filterOp
operator|.
name|removeChild
argument_list|(
name|selOp
argument_list|)
expr_stmt|;
comment|// Find the cloned PruningSink and add it to pruningSinkSet
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|sinkSet
init|=
operator|new
name|HashSet
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|root
range|:
name|newRoots
control|)
block|{
name|SparkUtilities
operator|.
name|collectOp
argument_list|(
name|sinkSet
argument_list|,
name|root
argument_list|,
name|SparkPartitionPruningSinkOperator
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|sinkSet
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|,
literal|"AssertionError: expected to only contain one SparkPartitionPruningSinkOperator,"
operator|+
literal|" but found "
operator|+
name|sinkSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SparkPartitionPruningSinkOperator
name|clonedPruningSinkOp
init|=
operator|(
name|SparkPartitionPruningSinkOperator
operator|)
name|sinkSet
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|clonedPruningSinkOp
operator|.
name|getConf
argument_list|()
operator|.
name|setTableScan
argument_list|(
name|pruningSinkOp
operator|.
name|getConf
argument_list|()
operator|.
name|getTableScan
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|pruningSinkSet
operator|.
name|add
argument_list|(
name|clonedPruningSinkOp
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**    * Recursively collect all roots (e.g., table scans) that can be reached via this op.    * @param result contains all roots can be reached via op    * @param op the op to examine.    */
specifier|private
name|void
name|collectRoots
parameter_list|(
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|op
parameter_list|)
block|{
if|if
condition|(
name|op
operator|.
name|getNumParent
argument_list|()
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|parentOp
range|:
name|op
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|collectRoots
argument_list|(
name|result
argument_list|,
name|parentOp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

