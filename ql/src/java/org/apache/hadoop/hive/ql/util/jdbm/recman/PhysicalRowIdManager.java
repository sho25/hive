begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * JDBM LICENSE v1.00  *  * Redistribution and use of this software and associated documentation  * ("Software"), with or without modification, are permitted provided  * that the following conditions are met:  *  * 1. Redistributions of source code must retain copyright  *    statements and notices.  Redistributions must also contain a  *    copy of this document.  *  * 2. Redistributions in binary form must reproduce the  *    above copyright notice, this list of conditions and the  *    following disclaimer in the documentation and/or other  *    materials provided with the distribution.  *  * 3. The name "JDBM" must not be used to endorse or promote  *    products derived from this Software without prior written  *    permission of Cees de Groot.  For written permission,  *    please contact cg@cdegroot.com.  *  * 4. Products derived from this Software may not be called "JDBM"  *    nor may "JDBM" appear in their names without prior written  *    permission of Cees de Groot.  *  * 5. Due credit should be given to the JDBM Project  *    (http://jdbm.sourceforge.net/).  *  * THIS SOFTWARE IS PROVIDED BY THE JDBM PROJECT AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL  * CEES DE GROOT OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  *  * Copyright 2000 (C) Cees de Groot. All Rights Reserved.  * Contributions are Copyright (C) 2000 by their associated contributors.  *  * $Id: PhysicalRowIdManager.java,v 1.3 2003/03/21 03:00:09 boisvert Exp $  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|recman
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  This class manages physical row ids, and their data.  */
end_comment

begin_class
specifier|final
class|class
name|PhysicalRowIdManager
block|{
comment|// The file we're talking to and the associated page manager.
specifier|private
name|RecordFile
name|file
decl_stmt|;
specifier|private
name|PageManager
name|pageman
decl_stmt|;
specifier|private
name|FreePhysicalRowIdPageManager
name|freeman
decl_stmt|;
comment|/**      *  Creates a new rowid manager using the indicated record file.      *  and page manager.      */
name|PhysicalRowIdManager
parameter_list|(
name|RecordFile
name|file
parameter_list|,
name|PageManager
name|pageManager
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|pageman
operator|=
name|pageManager
expr_stmt|;
name|this
operator|.
name|freeman
operator|=
operator|new
name|FreePhysicalRowIdPageManager
argument_list|(
name|file
argument_list|,
name|pageman
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Inserts a new record. Returns the new physical rowid.      */
name|Location
name|insert
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|Location
name|retval
init|=
name|alloc
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|retval
argument_list|,
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
comment|/**      *  Updates an existing record. Returns the possibly changed      *  physical rowid.      */
name|Location
name|update
parameter_list|(
name|Location
name|rowid
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
comment|// fetch the record header
name|BlockIo
name|block
init|=
name|file
operator|.
name|get
argument_list|(
name|rowid
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|RecordHeader
name|head
init|=
operator|new
name|RecordHeader
argument_list|(
name|block
argument_list|,
name|rowid
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|>
name|head
operator|.
name|getAvailableSize
argument_list|()
condition|)
block|{
comment|// not enough space - we need to copy to a new rowid.
name|file
operator|.
name|release
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|rowid
argument_list|)
expr_stmt|;
name|rowid
operator|=
name|alloc
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|.
name|release
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
comment|// 'nuff space, write it in and return the rowid.
name|write
argument_list|(
name|rowid
argument_list|,
name|data
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|rowid
return|;
block|}
comment|/**      *  Deletes a record.      */
name|void
name|delete
parameter_list|(
name|Location
name|rowid
parameter_list|)
throws|throws
name|IOException
block|{
name|free
argument_list|(
name|rowid
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Retrieves a record.      */
name|byte
index|[]
name|fetch
parameter_list|(
name|Location
name|rowid
parameter_list|)
throws|throws
name|IOException
block|{
comment|// fetch the record header
name|PageCursor
name|curs
init|=
operator|new
name|PageCursor
argument_list|(
name|pageman
argument_list|,
name|rowid
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|BlockIo
name|block
init|=
name|file
operator|.
name|get
argument_list|(
name|curs
operator|.
name|getCurrent
argument_list|()
argument_list|)
decl_stmt|;
name|RecordHeader
name|head
init|=
operator|new
name|RecordHeader
argument_list|(
name|block
argument_list|,
name|rowid
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
comment|// allocate a return buffer
name|byte
index|[]
name|retval
init|=
operator|new
name|byte
index|[
name|head
operator|.
name|getCurrentSize
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|retval
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|file
operator|.
name|release
argument_list|(
name|curs
operator|.
name|getCurrent
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
comment|// copy bytes in
name|int
name|offsetInBuffer
init|=
literal|0
decl_stmt|;
name|int
name|leftToRead
init|=
name|retval
operator|.
name|length
decl_stmt|;
name|short
name|dataOffset
init|=
call|(
name|short
call|)
argument_list|(
name|rowid
operator|.
name|getOffset
argument_list|()
operator|+
name|RecordHeader
operator|.
name|SIZE
argument_list|)
decl_stmt|;
while|while
condition|(
name|leftToRead
operator|>
literal|0
condition|)
block|{
comment|// copy current page's data to return buffer
name|int
name|toCopy
init|=
name|RecordFile
operator|.
name|BLOCK_SIZE
operator|-
name|dataOffset
decl_stmt|;
if|if
condition|(
name|leftToRead
operator|<
name|toCopy
condition|)
block|{
name|toCopy
operator|=
name|leftToRead
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|block
operator|.
name|getData
argument_list|()
argument_list|,
name|dataOffset
argument_list|,
name|retval
argument_list|,
name|offsetInBuffer
argument_list|,
name|toCopy
argument_list|)
expr_stmt|;
comment|// Go to the next block
name|leftToRead
operator|-=
name|toCopy
expr_stmt|;
name|offsetInBuffer
operator|+=
name|toCopy
expr_stmt|;
name|file
operator|.
name|release
argument_list|(
name|block
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftToRead
operator|>
literal|0
condition|)
block|{
name|block
operator|=
name|file
operator|.
name|get
argument_list|(
name|curs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|dataOffset
operator|=
name|DataPage
operator|.
name|O_DATA
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/**      *  Allocate a new rowid with the indicated size.      */
specifier|private
name|Location
name|alloc
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|Location
name|retval
init|=
name|freeman
operator|.
name|get
argument_list|(
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|retval
operator|==
literal|null
condition|)
block|{
name|retval
operator|=
name|allocNew
argument_list|(
literal|2
operator|*
name|size
argument_list|,
name|pageman
operator|.
name|getLast
argument_list|(
name|Magic
operator|.
name|USED_PAGE
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      *  Allocates a new rowid. The second parameter is there to      *  allow for a recursive call - it indicates where the search      *  should start.      */
specifier|private
name|Location
name|allocNew
parameter_list|(
name|int
name|size
parameter_list|,
name|long
name|start
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockIo
name|curBlock
decl_stmt|;
name|DataPage
name|curPage
decl_stmt|;
if|if
condition|(
name|start
operator|==
literal|0
condition|)
block|{
comment|// we need to create a new page.
name|start
operator|=
name|pageman
operator|.
name|allocate
argument_list|(
name|Magic
operator|.
name|USED_PAGE
argument_list|)
expr_stmt|;
name|curBlock
operator|=
name|file
operator|.
name|get
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|curPage
operator|=
name|DataPage
operator|.
name|getDataPageView
argument_list|(
name|curBlock
argument_list|)
expr_stmt|;
name|curPage
operator|.
name|setFirst
argument_list|(
name|DataPage
operator|.
name|O_DATA
argument_list|)
expr_stmt|;
name|RecordHeader
name|hdr
init|=
operator|new
name|RecordHeader
argument_list|(
name|curBlock
argument_list|,
name|DataPage
operator|.
name|O_DATA
argument_list|)
decl_stmt|;
name|hdr
operator|.
name|setAvailableSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|hdr
operator|.
name|setCurrentSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|curBlock
operator|=
name|file
operator|.
name|get
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|curPage
operator|=
name|DataPage
operator|.
name|getDataPageView
argument_list|(
name|curBlock
argument_list|)
expr_stmt|;
block|}
comment|// follow the rowids on this page to get to the last one. We don't
comment|// fall off, because this is the last page, remember?
name|short
name|pos
init|=
name|curPage
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|pos
operator|==
literal|0
condition|)
block|{
comment|// page is exactly filled by the last block of a record
name|file
operator|.
name|release
argument_list|(
name|curBlock
argument_list|)
expr_stmt|;
return|return
name|allocNew
argument_list|(
name|size
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|RecordHeader
name|hdr
init|=
operator|new
name|RecordHeader
argument_list|(
name|curBlock
argument_list|,
name|pos
argument_list|)
decl_stmt|;
while|while
condition|(
name|hdr
operator|.
name|getAvailableSize
argument_list|()
operator|!=
literal|0
operator|&&
name|pos
operator|<
name|RecordFile
operator|.
name|BLOCK_SIZE
condition|)
block|{
name|pos
operator|+=
name|hdr
operator|.
name|getAvailableSize
argument_list|()
operator|+
name|RecordHeader
operator|.
name|SIZE
expr_stmt|;
if|if
condition|(
name|pos
operator|==
name|RecordFile
operator|.
name|BLOCK_SIZE
condition|)
block|{
comment|// Again, a filled page.
name|file
operator|.
name|release
argument_list|(
name|curBlock
argument_list|)
expr_stmt|;
return|return
name|allocNew
argument_list|(
name|size
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|hdr
operator|=
operator|new
name|RecordHeader
argument_list|(
name|curBlock
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|==
name|RecordHeader
operator|.
name|SIZE
condition|)
block|{
comment|// the last record exactly filled the page. Restart forcing
comment|// a new page.
name|file
operator|.
name|release
argument_list|(
name|curBlock
argument_list|)
expr_stmt|;
block|}
comment|// we have the position, now tack on extra pages until we've got
comment|// enough space.
name|Location
name|retval
init|=
operator|new
name|Location
argument_list|(
name|start
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|int
name|freeHere
init|=
name|RecordFile
operator|.
name|BLOCK_SIZE
operator|-
name|pos
operator|-
name|RecordHeader
operator|.
name|SIZE
decl_stmt|;
if|if
condition|(
name|freeHere
operator|<
name|size
condition|)
block|{
comment|// check whether the last page would have only a small bit left.
comment|// if yes, increase the allocation. A small bit is a record
comment|// header plus 16 bytes.
name|int
name|lastSize
init|=
operator|(
name|size
operator|-
name|freeHere
operator|)
operator|%
name|DataPage
operator|.
name|DATA_PER_PAGE
decl_stmt|;
if|if
condition|(
operator|(
name|DataPage
operator|.
name|DATA_PER_PAGE
operator|-
name|lastSize
operator|)
operator|<
operator|(
name|RecordHeader
operator|.
name|SIZE
operator|+
literal|16
operator|)
condition|)
block|{
name|size
operator|+=
operator|(
name|DataPage
operator|.
name|DATA_PER_PAGE
operator|-
name|lastSize
operator|)
expr_stmt|;
block|}
comment|// write out the header now so we don't have to come back.
name|hdr
operator|.
name|setAvailableSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|file
operator|.
name|release
argument_list|(
name|start
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|neededLeft
init|=
name|size
operator|-
name|freeHere
decl_stmt|;
comment|// Refactor these two blocks!
while|while
condition|(
name|neededLeft
operator|>=
name|DataPage
operator|.
name|DATA_PER_PAGE
condition|)
block|{
name|start
operator|=
name|pageman
operator|.
name|allocate
argument_list|(
name|Magic
operator|.
name|USED_PAGE
argument_list|)
expr_stmt|;
name|curBlock
operator|=
name|file
operator|.
name|get
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|curPage
operator|=
name|DataPage
operator|.
name|getDataPageView
argument_list|(
name|curBlock
argument_list|)
expr_stmt|;
name|curPage
operator|.
name|setFirst
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
comment|// no rowids, just data
name|file
operator|.
name|release
argument_list|(
name|start
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|neededLeft
operator|-=
name|DataPage
operator|.
name|DATA_PER_PAGE
expr_stmt|;
block|}
if|if
condition|(
name|neededLeft
operator|>
literal|0
condition|)
block|{
comment|// done with whole chunks, allocate last fragment.
name|start
operator|=
name|pageman
operator|.
name|allocate
argument_list|(
name|Magic
operator|.
name|USED_PAGE
argument_list|)
expr_stmt|;
name|curBlock
operator|=
name|file
operator|.
name|get
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|curPage
operator|=
name|DataPage
operator|.
name|getDataPageView
argument_list|(
name|curBlock
argument_list|)
expr_stmt|;
name|curPage
operator|.
name|setFirst
argument_list|(
call|(
name|short
call|)
argument_list|(
name|DataPage
operator|.
name|O_DATA
operator|+
name|neededLeft
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|release
argument_list|(
name|start
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// just update the current page. If there's less than 16 bytes
comment|// left, we increase the allocation (16 bytes is an arbitrary
comment|// number).
if|if
condition|(
name|freeHere
operator|-
name|size
operator|<=
operator|(
literal|16
operator|+
name|RecordHeader
operator|.
name|SIZE
operator|)
condition|)
block|{
name|size
operator|=
name|freeHere
expr_stmt|;
block|}
name|hdr
operator|.
name|setAvailableSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|file
operator|.
name|release
argument_list|(
name|start
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
specifier|private
name|void
name|free
parameter_list|(
name|Location
name|id
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get the rowid, and write a zero current size into it.
name|BlockIo
name|curBlock
init|=
name|file
operator|.
name|get
argument_list|(
name|id
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|DataPage
name|curPage
init|=
name|DataPage
operator|.
name|getDataPageView
argument_list|(
name|curBlock
argument_list|)
decl_stmt|;
name|RecordHeader
name|hdr
init|=
operator|new
name|RecordHeader
argument_list|(
name|curBlock
argument_list|,
name|id
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
name|hdr
operator|.
name|setCurrentSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|file
operator|.
name|release
argument_list|(
name|id
operator|.
name|getBlock
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// write the rowid to the free list
name|freeman
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|hdr
operator|.
name|getAvailableSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Writes out data to a rowid. Assumes that any resizing has been      *  done.      */
specifier|private
name|void
name|write
parameter_list|(
name|Location
name|rowid
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|PageCursor
name|curs
init|=
operator|new
name|PageCursor
argument_list|(
name|pageman
argument_list|,
name|rowid
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|BlockIo
name|block
init|=
name|file
operator|.
name|get
argument_list|(
name|curs
operator|.
name|getCurrent
argument_list|()
argument_list|)
decl_stmt|;
name|RecordHeader
name|hdr
init|=
operator|new
name|RecordHeader
argument_list|(
name|block
argument_list|,
name|rowid
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
name|hdr
operator|.
name|setCurrentSize
argument_list|(
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
name|file
operator|.
name|release
argument_list|(
name|curs
operator|.
name|getCurrent
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// copy bytes in
name|int
name|offsetInBuffer
init|=
name|start
decl_stmt|;
name|int
name|leftToWrite
init|=
name|length
decl_stmt|;
name|short
name|dataOffset
init|=
call|(
name|short
call|)
argument_list|(
name|rowid
operator|.
name|getOffset
argument_list|()
operator|+
name|RecordHeader
operator|.
name|SIZE
argument_list|)
decl_stmt|;
while|while
condition|(
name|leftToWrite
operator|>
literal|0
condition|)
block|{
comment|// copy current page's data to return buffer
name|int
name|toCopy
init|=
name|RecordFile
operator|.
name|BLOCK_SIZE
operator|-
name|dataOffset
decl_stmt|;
if|if
condition|(
name|leftToWrite
operator|<
name|toCopy
condition|)
block|{
name|toCopy
operator|=
name|leftToWrite
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|offsetInBuffer
argument_list|,
name|block
operator|.
name|getData
argument_list|()
argument_list|,
name|dataOffset
argument_list|,
name|toCopy
argument_list|)
expr_stmt|;
comment|// Go to the next block
name|leftToWrite
operator|-=
name|toCopy
expr_stmt|;
name|offsetInBuffer
operator|+=
name|toCopy
expr_stmt|;
name|file
operator|.
name|release
argument_list|(
name|curs
operator|.
name|getCurrent
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftToWrite
operator|>
literal|0
condition|)
block|{
name|block
operator|=
name|file
operator|.
name|get
argument_list|(
name|curs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|dataOffset
operator|=
name|DataPage
operator|.
name|O_DATA
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

