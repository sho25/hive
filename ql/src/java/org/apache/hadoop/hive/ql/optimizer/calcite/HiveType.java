begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|AbstractSqlType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_comment
comment|/**  * Hive-specific type.  *  * TODO: Created to represent timestamp with time-zone type.  * It can be removed once the type exists in Calcite.  */
end_comment

begin_class
specifier|public
class|class
name|HiveType
extends|extends
name|AbstractSqlType
block|{
specifier|private
specifier|final
name|Class
name|clazz
decl_stmt|;
specifier|public
name|HiveType
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
name|super
argument_list|(
name|SqlTypeName
operator|.
name|NULL
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
name|computeDigest
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|generateTypeString
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|boolean
name|withDetail
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"HiveType("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Class
name|getTypeClass
parameter_list|()
block|{
return|return
name|clazz
return|;
block|}
block|}
end_class

end_unit

