begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedExpressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringConcatColCol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringConcatColScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringConcatScalarCol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|BinaryObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorConverter
operator|.
name|StringConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_comment
comment|/**  * GenericUDFConcat.  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"concat"
argument_list|,
name|value
operator|=
literal|"_FUNC_(str1, str2, ... strN) - returns the concatenation of str1, str2, ... strN or "
operator|+
literal|"_FUNC_(bin1, bin2, ... binN) - returns the concatenation of bytes in binary data "
operator|+
literal|" bin1, bin2, ... binN"
argument_list|,
name|extended
operator|=
literal|"Returns NULL if any argument is NULL.\n"
operator|+
literal|"Example:\n"
operator|+
literal|"> SELECT _FUNC_('abc', 'def') FROM src LIMIT 1;\n"
operator|+
literal|"  'abcdef'"
argument_list|)
annotation|@
name|VectorizedExpressions
argument_list|(
block|{
name|StringConcatColCol
operator|.
name|class
block|,
name|StringConcatColScalar
operator|.
name|class
block|,
name|StringConcatScalarCol
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|GenericUDFConcat
extends|extends
name|GenericUDF
block|{
specifier|private
specifier|transient
name|ObjectInspector
index|[]
name|argumentOIs
decl_stmt|;
specifier|private
specifier|transient
name|StringConverter
index|[]
name|stringConverters
decl_stmt|;
specifier|private
specifier|transient
name|PrimitiveCategory
name|returnType
init|=
name|PrimitiveCategory
operator|.
name|STRING
decl_stmt|;
specifier|private
specifier|transient
name|BytesWritable
index|[]
name|bw
decl_stmt|;
specifier|private
specifier|transient
name|GenericUDFUtils
operator|.
name|StringHelper
name|returnHelper
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
comment|// Loop through all the inputs to determine the appropriate return type/length.
comment|// Either all arguments are binary, or all columns are non-binary.
comment|// Return type:
comment|//  All VARCHAR inputs: return VARCHAR
comment|//  All BINARY inputs: return BINARY
comment|//  Otherwise return STRING
name|argumentOIs
operator|=
name|arguments
expr_stmt|;
name|PrimitiveCategory
name|currentCategory
decl_stmt|;
name|PrimitiveObjectInspector
name|poi
decl_stmt|;
name|boolean
name|fixedLengthReturnValue
init|=
literal|true
decl_stmt|;
name|int
name|returnLength
init|=
literal|0
decl_stmt|;
comment|// Only for char/varchar return types
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|arguments
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
if|if
condition|(
name|arguments
index|[
name|idx
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"CONCAT only takes primitive arguments"
argument_list|)
throw|;
block|}
name|poi
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
name|idx
index|]
expr_stmt|;
name|currentCategory
operator|=
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
expr_stmt|;
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
block|{
name|returnType
operator|=
name|currentCategory
expr_stmt|;
block|}
switch|switch
condition|(
name|currentCategory
condition|)
block|{
case|case
name|BINARY
case|:
name|fixedLengthReturnValue
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|returnType
operator|!=
name|currentCategory
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"CONCAT cannot take a mix of binary and non-binary arguments"
argument_list|)
throw|;
block|}
break|break;
case|case
name|VARCHAR
case|:
if|if
condition|(
name|returnType
operator|==
name|PrimitiveCategory
operator|.
name|BINARY
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"CONCAT cannot take a mix of binary and non-binary arguments"
argument_list|)
throw|;
block|}
break|break;
default|default:
if|if
condition|(
name|returnType
operator|==
name|PrimitiveCategory
operator|.
name|BINARY
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"CONCAT cannot take a mix of binary and non-binary arguments"
argument_list|)
throw|;
block|}
name|returnType
operator|=
name|PrimitiveCategory
operator|.
name|STRING
expr_stmt|;
name|fixedLengthReturnValue
operator|=
literal|false
expr_stmt|;
break|break;
block|}
comment|// If all arguments are of known length then we can keep track of the max
comment|// length of the return type. However if the return length exceeds the
comment|// max length for the char/varchar, then the return type reverts to string.
if|if
condition|(
name|fixedLengthReturnValue
condition|)
block|{
name|returnLength
operator|+=
name|GenericUDFUtils
operator|.
name|StringHelper
operator|.
name|getFixedStringSizeForType
argument_list|(
name|poi
argument_list|)
expr_stmt|;
if|if
condition|(
name|returnType
operator|==
name|PrimitiveCategory
operator|.
name|VARCHAR
operator|&&
name|returnLength
operator|>
name|HiveVarchar
operator|.
name|MAX_VARCHAR_LENGTH
condition|)
block|{
name|returnType
operator|=
name|PrimitiveCategory
operator|.
name|STRING
expr_stmt|;
name|fixedLengthReturnValue
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|returnType
operator|==
name|PrimitiveCategory
operator|.
name|BINARY
condition|)
block|{
name|bw
operator|=
operator|new
name|BytesWritable
index|[
name|arguments
operator|.
name|length
index|]
expr_stmt|;
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
return|;
block|}
else|else
block|{
comment|// treat all inputs as string, the return value will be converted to the appropriate type.
name|createStringConverters
argument_list|()
expr_stmt|;
name|returnHelper
operator|=
operator|new
name|GenericUDFUtils
operator|.
name|StringHelper
argument_list|(
name|returnType
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|returnType
condition|)
block|{
case|case
name|STRING
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
return|;
case|case
name|VARCHAR
case|:
name|VarcharTypeInfo
name|typeInfo
init|=
name|TypeInfoFactory
operator|.
name|getVarcharTypeInfo
argument_list|(
name|returnLength
argument_list|)
decl_stmt|;
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|typeInfo
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"Unexpected CONCAT return type of "
operator|+
name|returnType
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|createStringConverters
parameter_list|()
block|{
name|stringConverters
operator|=
operator|new
name|StringConverter
index|[
name|argumentOIs
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|argumentOIs
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|stringConverters
index|[
name|idx
index|]
operator|=
operator|new
name|StringConverter
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|argumentOIs
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|returnType
operator|==
name|PrimitiveCategory
operator|.
name|BINARY
condition|)
block|{
return|return
name|binaryEvaluate
argument_list|(
name|arguments
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|returnHelper
operator|.
name|setReturnValue
argument_list|(
name|stringEvaluate
argument_list|(
name|arguments
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
name|Object
name|binaryEvaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|len
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|arguments
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|bw
index|[
name|idx
index|]
operator|=
operator|(
operator|(
name|BinaryObjectInspector
operator|)
name|argumentOIs
index|[
name|idx
index|]
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|arguments
index|[
name|idx
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bw
index|[
name|idx
index|]
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|len
operator|+=
name|bw
index|[
name|idx
index|]
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|out
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|int
name|curLen
init|=
literal|0
decl_stmt|;
comment|// Need to iterate twice since BytesWritable doesn't support append.
for|for
control|(
name|BytesWritable
name|bytes
range|:
name|bw
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|out
argument_list|,
name|curLen
argument_list|,
name|bytes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|curLen
operator|+=
name|bytes
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|BytesWritable
argument_list|(
name|out
argument_list|)
return|;
block|}
specifier|public
name|String
name|stringEvaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|arguments
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|String
name|val
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|arguments
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
operator|(
name|String
operator|)
name|stringConverters
index|[
name|idx
index|]
operator|.
name|convert
argument_list|(
name|arguments
index|[
name|idx
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"concat("
argument_list|)
expr_stmt|;
if|if
condition|(
name|children
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|children
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|children
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

