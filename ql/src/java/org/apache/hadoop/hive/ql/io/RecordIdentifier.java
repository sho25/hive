begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Gives the Record identifier information for the current record.  */
end_comment

begin_class
specifier|public
class|class
name|RecordIdentifier
implements|implements
name|WritableComparable
argument_list|<
name|RecordIdentifier
argument_list|>
block|{
comment|/**    * This is in support of {@link org.apache.hadoop.hive.ql.metadata.VirtualColumn#ROWID}    * Contains metadata about each field in RecordIdentifier that needs to be part of ROWID    * which is represented as a struct {@link org.apache.hadoop.hive.ql.io.RecordIdentifier.StructInfo}.    * Each field of RecordIdentifier which should be part of ROWID should be in this enum... which     * really means that it should be part of VirtualColumn (so make a subclass for rowid).    */
specifier|public
enum|enum
name|Field
block|{
comment|//note the enum names match field names in the struct
name|writeId
parameter_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
parameter_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaLongObjectInspector
parameter_list|)
operator|,
constructor|bucketId(TypeInfoFactory.intTypeInfo
operator|,
constructor|PrimitiveObjectInspectorFactory.javaIntObjectInspector
block|)
enum|,
name|rowId
parameter_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
parameter_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaLongObjectInspector
parameter_list|)
constructor_decl|;
specifier|public
specifier|final
name|TypeInfo
name|fieldType
decl_stmt|;
specifier|public
specifier|final
name|ObjectInspector
name|fieldOI
decl_stmt|;
name|Field
parameter_list|(
name|TypeInfo
name|fieldType
parameter_list|,
name|ObjectInspector
name|fieldOI
parameter_list|)
block|{
name|this
operator|.
name|fieldType
operator|=
name|fieldType
expr_stmt|;
name|this
operator|.
name|fieldOI
operator|=
name|fieldOI
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**    * RecordIdentifier is passed along the operator tree as a struct.  This class contains a few    * utilities for that.    */
end_comment

begin_class
specifier|public
specifier|static
specifier|final
class|class
name|StructInfo
block|{
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Field
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|(
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldOis
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
static|static
block|{
for|for
control|(
name|Field
name|f
range|:
name|Field
operator|.
name|values
argument_list|()
control|)
block|{
name|fieldNames
operator|.
name|add
argument_list|(
name|f
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|fieldTypes
operator|.
name|add
argument_list|(
name|f
operator|.
name|fieldType
argument_list|)
expr_stmt|;
name|fieldOis
operator|.
name|add
argument_list|(
name|f
operator|.
name|fieldOI
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|fieldNames
argument_list|,
name|fieldTypes
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ObjectInspector
name|oi
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldOis
argument_list|)
decl_stmt|;
comment|/**      * Copies relevant fields from {@code ri} to {@code struct}      * @param ri      * @param struct must be of size Field.values().size()      */
specifier|public
specifier|static
name|void
name|toArray
parameter_list|(
name|RecordIdentifier
name|ri
parameter_list|,
name|Object
index|[]
name|struct
parameter_list|)
block|{
assert|assert
name|struct
operator|!=
literal|null
operator|&&
name|struct
operator|.
name|length
operator|==
name|Field
operator|.
name|values
argument_list|()
operator|.
name|length
assert|;
if|if
condition|(
name|ri
operator|==
literal|null
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|struct
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|struct
index|[
name|Field
operator|.
name|writeId
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|ri
operator|.
name|getWriteId
argument_list|()
expr_stmt|;
name|struct
index|[
name|Field
operator|.
name|bucketId
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|ri
operator|.
name|getBucketProperty
argument_list|()
expr_stmt|;
name|struct
index|[
name|Field
operator|.
name|rowId
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|ri
operator|.
name|getRowId
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_decl_stmt
specifier|private
name|long
name|writeId
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
name|int
name|bucketId
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
name|long
name|rowId
decl_stmt|;
end_decl_stmt

begin_constructor
specifier|public
name|RecordIdentifier
parameter_list|()
block|{   }
end_constructor

begin_constructor
specifier|public
name|RecordIdentifier
parameter_list|(
name|long
name|writeId
parameter_list|,
name|int
name|bucket
parameter_list|,
name|long
name|rowId
parameter_list|)
block|{
name|this
operator|.
name|writeId
operator|=
name|writeId
expr_stmt|;
name|this
operator|.
name|bucketId
operator|=
name|bucket
expr_stmt|;
name|this
operator|.
name|rowId
operator|=
name|rowId
expr_stmt|;
block|}
end_constructor

begin_comment
comment|/**    * Set the identifier.    * @param writeId the write id    * @param bucketId the bucket id    * @param rowId the row id    */
end_comment

begin_function
specifier|public
name|void
name|setValues
parameter_list|(
name|long
name|writeId
parameter_list|,
name|int
name|bucketId
parameter_list|,
name|long
name|rowId
parameter_list|)
block|{
name|this
operator|.
name|writeId
operator|=
name|writeId
expr_stmt|;
name|this
operator|.
name|bucketId
operator|=
name|bucketId
expr_stmt|;
name|this
operator|.
name|rowId
operator|=
name|rowId
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Set this object to match the given object.    * @param other the object to copy from    */
end_comment

begin_function
specifier|public
name|void
name|set
parameter_list|(
name|RecordIdentifier
name|other
parameter_list|)
block|{
name|this
operator|.
name|writeId
operator|=
name|other
operator|.
name|writeId
expr_stmt|;
name|this
operator|.
name|bucketId
operator|=
name|other
operator|.
name|bucketId
expr_stmt|;
name|this
operator|.
name|rowId
operator|=
name|other
operator|.
name|rowId
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|setRowId
parameter_list|(
name|long
name|rowId
parameter_list|)
block|{
name|this
operator|.
name|rowId
operator|=
name|rowId
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * What was the original write id for the last row?    * @return the write id    */
end_comment

begin_function
specifier|public
name|long
name|getWriteId
parameter_list|()
block|{
return|return
name|writeId
return|;
block|}
end_function

begin_comment
comment|/**    * See {@link BucketCodec} for details    * @return the bucket value;    */
end_comment

begin_function
specifier|public
name|int
name|getBucketProperty
parameter_list|()
block|{
return|return
name|bucketId
return|;
block|}
end_function

begin_comment
comment|/**    * What was the original row id for the last row?    * @return the row id    */
end_comment

begin_function
specifier|public
name|long
name|getRowId
parameter_list|()
block|{
return|return
name|rowId
return|;
block|}
end_function

begin_function
specifier|protected
name|int
name|compareToInternal
parameter_list|(
name|RecordIdentifier
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|writeId
operator|!=
name|other
operator|.
name|writeId
condition|)
block|{
return|return
name|writeId
operator|<
name|other
operator|.
name|writeId
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
if|if
condition|(
name|bucketId
operator|!=
name|other
operator|.
name|bucketId
condition|)
block|{
return|return
name|bucketId
operator|<
name|other
operator|.
name|bucketId
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
if|if
condition|(
name|rowId
operator|!=
name|other
operator|.
name|rowId
condition|)
block|{
return|return
name|rowId
operator|<
name|other
operator|.
name|rowId
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|RecordIdentifier
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|getClass
argument_list|()
operator|!=
name|RecordIdentifier
operator|.
name|class
condition|)
block|{
comment|//WTF?  assumes that other instanceof OrcRawRecordMerger.ReaderKey???
return|return
operator|-
name|other
operator|.
name|compareTo
argument_list|(
name|this
argument_list|)
return|;
block|}
return|return
name|compareToInternal
argument_list|(
name|other
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOutput
operator|.
name|writeLong
argument_list|(
name|writeId
argument_list|)
expr_stmt|;
name|dataOutput
operator|.
name|writeInt
argument_list|(
name|bucketId
argument_list|)
expr_stmt|;
name|dataOutput
operator|.
name|writeLong
argument_list|(
name|rowId
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
name|writeId
operator|=
name|dataInput
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|bucketId
operator|=
name|dataInput
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|rowId
operator|=
name|dataInput
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|other
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RecordIdentifier
name|oth
init|=
operator|(
name|RecordIdentifier
operator|)
name|other
decl_stmt|;
return|return
name|oth
operator|.
name|writeId
operator|==
name|writeId
operator|&&
name|oth
operator|.
name|bucketId
operator|==
name|bucketId
operator|&&
name|oth
operator|.
name|rowId
operator|==
name|rowId
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
literal|17
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|writeId
operator|^
operator|(
name|writeId
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|bucketId
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|rowId
operator|^
operator|(
name|rowId
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"RecordIdentifier("
operator|+
name|writeId
operator|+
literal|", "
operator|+
name|bucketToString
argument_list|(
name|bucketId
argument_list|)
operator|+
literal|","
operator|+
name|getRowId
argument_list|()
operator|+
literal|")"
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|String
name|bucketToString
parameter_list|(
name|int
name|bucketId
parameter_list|)
block|{
if|if
condition|(
name|bucketId
operator|==
operator|-
literal|1
condition|)
return|return
literal|""
operator|+
name|bucketId
return|;
name|BucketCodec
name|codec
init|=
name|BucketCodec
operator|.
name|determineVersion
argument_list|(
name|bucketId
argument_list|)
decl_stmt|;
return|return
name|bucketId
operator|+
literal|"("
operator|+
name|codec
operator|.
name|getVersion
argument_list|()
operator|+
literal|"."
operator|+
name|codec
operator|.
name|decodeWriterId
argument_list|(
name|bucketId
argument_list|)
operator|+
literal|"."
operator|+
name|codec
operator|.
name|decodeStatementId
argument_list|(
name|bucketId
argument_list|)
operator|+
literal|")"
return|;
block|}
end_function

unit|}
end_unit

