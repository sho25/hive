begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|rcfile
operator|.
name|merge
operator|.
name|RCFileKeyBufferWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|rcfile
operator|.
name|merge
operator|.
name|RCFileValueBufferWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|RCFileMergeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|CombineHiveKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Fast file merge operator for RC files.  */
end_comment

begin_class
specifier|public
class|class
name|RCFileMergeOperator
extends|extends
name|AbstractFileMergeOperator
argument_list|<
name|RCFileMergeDesc
argument_list|>
block|{
specifier|public
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"RCFileMergeMapper"
argument_list|)
decl_stmt|;
name|RCFile
operator|.
name|Writer
name|outWriter
decl_stmt|;
name|CompressionCodec
name|codec
init|=
literal|null
decl_stmt|;
name|int
name|columnNumber
init|=
literal|0
decl_stmt|;
comment|/** Kryo ctor. */
specifier|protected
name|RCFileMergeOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|RCFileMergeOperator
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
index|[]
name|keyValue
init|=
operator|(
name|Object
index|[]
operator|)
name|row
decl_stmt|;
name|processKeyValuePairs
argument_list|(
name|keyValue
index|[
literal|0
index|]
argument_list|,
name|keyValue
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processKeyValuePairs
parameter_list|(
name|Object
name|k
parameter_list|,
name|Object
name|v
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|RCFileKeyBufferWrapper
name|key
decl_stmt|;
if|if
condition|(
name|k
operator|instanceof
name|CombineHiveKey
condition|)
block|{
name|key
operator|=
call|(
name|RCFileKeyBufferWrapper
call|)
argument_list|(
operator|(
name|CombineHiveKey
operator|)
name|k
argument_list|)
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|key
operator|=
operator|(
name|RCFileKeyBufferWrapper
operator|)
name|k
expr_stmt|;
block|}
name|RCFileValueBufferWrapper
name|value
init|=
operator|(
name|RCFileValueBufferWrapper
operator|)
name|v
decl_stmt|;
name|fixTmpPath
argument_list|(
name|key
operator|.
name|getInputPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|outWriter
operator|==
literal|null
condition|)
block|{
name|codec
operator|=
name|key
operator|.
name|getCodec
argument_list|()
expr_stmt|;
name|columnNumber
operator|=
name|key
operator|.
name|getKeyBuffer
argument_list|()
operator|.
name|getColumnNumber
argument_list|()
expr_stmt|;
name|RCFileOutputFormat
operator|.
name|setColumnNumber
argument_list|(
name|jc
argument_list|,
name|columnNumber
argument_list|)
expr_stmt|;
name|outWriter
operator|=
operator|new
name|RCFile
operator|.
name|Writer
argument_list|(
name|fs
argument_list|,
name|jc
argument_list|,
name|getOutPath
argument_list|()
argument_list|,
literal|null
argument_list|,
name|codec
argument_list|)
expr_stmt|;
block|}
name|boolean
name|sameCodec
init|=
operator|(
operator|(
name|codec
operator|==
name|key
operator|.
name|getCodec
argument_list|()
operator|)
operator|||
name|codec
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getCodec
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|key
operator|.
name|getKeyBuffer
argument_list|()
operator|.
name|getColumnNumber
argument_list|()
operator|!=
name|columnNumber
operator|)
operator|||
operator|(
operator|!
name|sameCodec
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"RCFileMerge failed because the input files"
operator|+
literal|" use different CompressionCodec or have different column number"
operator|+
literal|" setting."
argument_list|)
throw|;
block|}
name|outWriter
operator|.
name|flushBlock
argument_list|(
name|key
operator|.
name|getKeyBuffer
argument_list|()
argument_list|,
name|value
operator|.
name|getValueBuffer
argument_list|()
argument_list|,
name|key
operator|.
name|getRecordLength
argument_list|()
argument_list|,
name|key
operator|.
name|getKeyLength
argument_list|()
argument_list|,
name|key
operator|.
name|getCompressedKeyLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|closeOp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// close writer
if|if
condition|(
name|outWriter
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|outWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unable to close RCFileMergeOperator"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|outWriter
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|closeOp
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|RCFILEMERGE
return|;
block|}
comment|/**    * @return the name of the operator    */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getOperatorName
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
literal|"RFM"
return|;
block|}
block|}
end_class

end_unit

