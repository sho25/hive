begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExtractOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ForwardOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ScriptOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|OpParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|RowResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDescUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GroupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinCondDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECONVERTJOIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECONVERTJOINNOCONDITIONALTASK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEOPTREDUCEDEDUPLICATIONMINREDUCER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESCRIPTOPERATORTRUST
import|;
end_import

begin_comment
comment|/**  * If two reducer sink operators share the same partition/sort columns and order,  * they can be merged. This should happen after map join optimization because map  * join optimization will remove reduce sink operators.  *  * This optimizer removes/replaces child-RS (not parent) which is safer way for DefaultGraphWalker.  */
end_comment

begin_class
specifier|public
class|class
name|ReduceSinkDeDuplication
implements|implements
name|Transform
block|{
specifier|private
specifier|static
specifier|final
name|String
name|RS
init|=
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GBY
init|=
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JOIN
init|=
name|JoinOperator
operator|.
name|getOperatorName
argument_list|()
decl_stmt|;
specifier|protected
name|ParseContext
name|pGraphContext
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ParseContext
name|transform
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|pGraphContext
operator|=
name|pctx
expr_stmt|;
comment|// generate pruned column list for all relevant operators
name|ReduceSinkDeduplicateProcCtx
name|cppCtx
init|=
operator|new
name|ReduceSinkDeduplicateProcCtx
argument_list|(
name|pGraphContext
argument_list|)
decl_stmt|;
comment|// for auto convert map-joins, it not safe to dedup in here (todo)
name|boolean
name|mergeJoins
init|=
operator|!
name|pctx
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HIVECONVERTJOIN
argument_list|)
operator|&&
operator|!
name|pctx
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HIVECONVERTJOINNOCONDITIONALTASK
argument_list|)
decl_stmt|;
comment|// If multiple rules can be matched with same cost, last rule will be choosen as a processor
comment|// see DefaultRuleDispatcher#dispatch()
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|RS
operator|+
literal|"%.*%"
operator|+
name|RS
operator|+
literal|"%"
argument_list|)
argument_list|,
name|ReduceSinkDeduplicateProcFactory
operator|.
name|getReducerReducerProc
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R2"
argument_list|,
name|RS
operator|+
literal|"%"
operator|+
name|GBY
operator|+
literal|"%.*%"
operator|+
name|RS
operator|+
literal|"%"
argument_list|)
argument_list|,
name|ReduceSinkDeduplicateProcFactory
operator|.
name|getGroupbyReducerProc
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergeJoins
condition|)
block|{
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R3"
argument_list|,
name|JOIN
operator|+
literal|"%.*%"
operator|+
name|RS
operator|+
literal|"%"
argument_list|)
argument_list|,
name|ReduceSinkDeduplicateProcFactory
operator|.
name|getJoinReducerProc
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO RS+JOIN
comment|// The dispatcher fires the processor corresponding to the closest matching
comment|// rule and passes the context along
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|ReduceSinkDeduplicateProcFactory
operator|.
name|getDefaultProc
argument_list|()
argument_list|,
name|opRules
argument_list|,
name|cppCtx
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// Create a list of topop nodes
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pGraphContext
operator|.
name|getTopOps
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|pGraphContext
return|;
block|}
class|class
name|ReduceSinkDeduplicateProcCtx
implements|implements
name|NodeProcessorCtx
block|{
name|ParseContext
name|pctx
decl_stmt|;
comment|// For queries using script, the optimization cannot be applied without user's confirmation
comment|// If script preserves alias and value for columns related to keys, user can set this true
name|boolean
name|trustScript
decl_stmt|;
comment|// This is min number of reducer for deduped RS to avoid query executed on
comment|// too small number of reducers. For example, queries GroupBy+OrderBy can be executed by
comment|// only one reducer if this configuration does not prevents
name|int
name|minReducer
decl_stmt|;
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|removedOps
decl_stmt|;
specifier|public
name|ReduceSinkDeduplicateProcCtx
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
block|{
name|removedOps
operator|=
operator|new
name|HashSet
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|trustScript
operator|=
name|pctx
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HIVESCRIPTOPERATORTRUST
argument_list|)
expr_stmt|;
name|minReducer
operator|=
name|pctx
operator|.
name|getConf
argument_list|()
operator|.
name|getIntVar
argument_list|(
name|HIVEOPTREDUCEDEDUPLICATIONMINREDUCER
argument_list|)
expr_stmt|;
name|this
operator|.
name|pctx
operator|=
name|pctx
expr_stmt|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|rsOp
parameter_list|)
block|{
return|return
name|removedOps
operator|.
name|contains
argument_list|(
name|rsOp
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|addRemovedOperator
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|rsOp
parameter_list|)
block|{
return|return
name|removedOps
operator|.
name|add
argument_list|(
name|rsOp
argument_list|)
return|;
block|}
specifier|public
name|ParseContext
name|getPctx
parameter_list|()
block|{
return|return
name|pctx
return|;
block|}
specifier|public
name|void
name|setPctx
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
block|{
name|this
operator|.
name|pctx
operator|=
name|pctx
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|ReduceSinkDeduplicateProcFactory
block|{
specifier|public
specifier|static
name|NodeProcessor
name|getReducerReducerProc
parameter_list|()
block|{
return|return
operator|new
name|ReducerReducerProc
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getGroupbyReducerProc
parameter_list|()
block|{
return|return
operator|new
name|GroupbyReducerProc
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getJoinReducerProc
parameter_list|()
block|{
return|return
operator|new
name|JoinReducerProc
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getDefaultProc
parameter_list|()
block|{
return|return
operator|new
name|DefaultProc
argument_list|()
return|;
block|}
block|}
comment|/*    * do nothing.    */
specifier|static
class|class
name|DefaultProc
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|abstract
specifier|static
class|class
name|AbstractReducerReducerProc
implements|implements
name|NodeProcessor
block|{
name|ReduceSinkDeduplicateProcCtx
name|dedupCtx
decl_stmt|;
specifier|protected
name|boolean
name|trustScript
parameter_list|()
block|{
return|return
name|dedupCtx
operator|.
name|trustScript
return|;
block|}
specifier|protected
name|int
name|minReducer
parameter_list|()
block|{
return|return
name|dedupCtx
operator|.
name|minReducer
return|;
block|}
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|dedupCtx
operator|=
operator|(
name|ReduceSinkDeduplicateProcCtx
operator|)
name|procCtx
expr_stmt|;
if|if
condition|(
name|dedupCtx
operator|.
name|contains
argument_list|(
operator|(
name|Operator
argument_list|<
name|?
argument_list|>
operator|)
name|nd
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ReduceSinkOperator
name|cRS
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|nd
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|child
init|=
name|getSingleChild
argument_list|(
name|cRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|JoinOperator
condition|)
block|{
return|return
literal|false
return|;
comment|// not supported
block|}
name|ParseContext
name|pctx
init|=
name|dedupCtx
operator|.
name|getPctx
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|GroupByOperator
condition|)
block|{
name|GroupByOperator
name|cGBY
init|=
operator|(
name|GroupByOperator
operator|)
name|child
decl_stmt|;
if|if
condition|(
operator|!
name|hasGroupingSet
argument_list|(
name|cRS
argument_list|)
operator|&&
operator|!
name|cGBY
operator|.
name|getConf
argument_list|()
operator|.
name|isGroupingSetsPresent
argument_list|()
condition|)
block|{
return|return
name|process
argument_list|(
name|cRS
argument_list|,
name|cGBY
argument_list|,
name|pctx
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
name|child
operator|instanceof
name|ExtractOperator
condition|)
block|{
return|return
name|process
argument_list|(
name|cRS
argument_list|,
name|pctx
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|hasGroupingSet
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|)
block|{
name|GroupByOperator
name|cGBYm
init|=
name|getSingleParent
argument_list|(
name|cRS
argument_list|,
name|GroupByOperator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|cGBYm
operator|!=
literal|null
operator|&&
name|cGBYm
operator|.
name|getConf
argument_list|()
operator|.
name|isGroupingSetsPresent
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|Operator
argument_list|<
name|?
argument_list|>
name|getSingleParent
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|operator
parameter_list|)
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|parents
init|=
name|operator
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
if|if
condition|(
name|parents
operator|!=
literal|null
operator|&&
name|parents
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|parents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Operator
argument_list|<
name|?
argument_list|>
name|getSingleChild
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|operator
parameter_list|)
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|children
init|=
name|operator
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
operator|&&
name|children
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|getSingleParent
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|operator
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
init|=
name|getSingleParent
argument_list|(
name|operator
argument_list|)
decl_stmt|;
return|return
name|type
operator|.
name|isInstance
argument_list|(
name|parent
argument_list|)
condition|?
operator|(
name|T
operator|)
name|parent
else|:
literal|null
return|;
block|}
specifier|protected
specifier|abstract
name|Object
name|process
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|SemanticException
function_decl|;
specifier|protected
specifier|abstract
name|Object
name|process
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|GroupByOperator
name|cGBY
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|SemanticException
function_decl|;
specifier|protected
name|Operator
argument_list|<
name|?
argument_list|>
name|getStartForGroupBy
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|parent
init|=
name|getSingleParent
argument_list|(
name|cRS
argument_list|)
decl_stmt|;
return|return
name|parent
operator|instanceof
name|GroupByOperator
condition|?
name|parent
else|:
name|cRS
return|;
comment|// skip map-aggr GBY
block|}
comment|// for JOIN-RS case, it's not possible generally to merge if child has
comment|// more key/partition columns than parents
specifier|protected
name|boolean
name|merge
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|JoinOperator
name|pJoin
parameter_list|,
name|int
name|minReducer
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|parents
init|=
name|pJoin
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
name|ReduceSinkOperator
index|[]
name|pRSs
init|=
name|parents
operator|.
name|toArray
argument_list|(
operator|new
name|ReduceSinkOperator
index|[
name|parents
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|ReduceSinkDesc
name|cRSc
init|=
name|cRS
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|ReduceSinkDesc
name|pRS0c
init|=
name|pRSs
index|[
literal|0
index|]
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|cRSc
operator|.
name|getKeyCols
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|pRS0c
operator|.
name|getKeyCols
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|cRSc
operator|.
name|getPartitionCols
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|pRS0c
operator|.
name|getPartitionCols
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Integer
name|moveReducerNumTo
init|=
name|checkNumReducer
argument_list|(
name|cRSc
operator|.
name|getNumReducers
argument_list|()
argument_list|,
name|pRS0c
operator|.
name|getNumReducers
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|moveReducerNumTo
operator|==
literal|null
operator|||
name|moveReducerNumTo
operator|>
literal|0
operator|&&
name|cRSc
operator|.
name|getNumReducers
argument_list|()
operator|<
name|minReducer
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Integer
name|moveRSOrderTo
init|=
name|checkOrder
argument_list|(
name|cRSc
operator|.
name|getOrder
argument_list|()
argument_list|,
name|pRS0c
operator|.
name|getOrder
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|moveRSOrderTo
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
index|[]
name|sorted
init|=
name|getSortedTags
argument_list|(
name|pJoin
argument_list|)
decl_stmt|;
name|int
name|cKeySize
init|=
name|cRSc
operator|.
name|getKeyCols
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cKeySize
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeDesc
name|cexpr
init|=
name|cRSc
operator|.
name|getKeyCols
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ExprNodeDesc
index|[]
name|pexprs
init|=
operator|new
name|ExprNodeDesc
index|[
name|pRSs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|tag
init|=
literal|0
init|;
name|tag
operator|<
name|pRSs
operator|.
name|length
condition|;
name|tag
operator|++
control|)
block|{
name|pexprs
index|[
name|tag
index|]
operator|=
name|pRSs
index|[
name|tag
index|]
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|found
init|=
name|indexOf
argument_list|(
name|cexpr
argument_list|,
name|pexprs
argument_list|,
name|cRS
argument_list|,
name|pRSs
argument_list|,
name|sorted
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|int
name|cPartSize
init|=
name|cRSc
operator|.
name|getPartitionCols
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cPartSize
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeDesc
name|cexpr
init|=
name|cRSc
operator|.
name|getPartitionCols
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ExprNodeDesc
index|[]
name|pexprs
init|=
operator|new
name|ExprNodeDesc
index|[
name|pRSs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|tag
init|=
literal|0
init|;
name|tag
operator|<
name|pRSs
operator|.
name|length
condition|;
name|tag
operator|++
control|)
block|{
name|pexprs
index|[
name|tag
index|]
operator|=
name|pRSs
index|[
name|tag
index|]
operator|.
name|getConf
argument_list|()
operator|.
name|getPartitionCols
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|found
init|=
name|indexOf
argument_list|(
name|cexpr
argument_list|,
name|pexprs
argument_list|,
name|cRS
argument_list|,
name|pRSs
argument_list|,
name|sorted
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|moveReducerNumTo
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ReduceSinkOperator
name|pRS
range|:
name|pRSs
control|)
block|{
name|pRS
operator|.
name|getConf
argument_list|()
operator|.
name|setNumReducers
argument_list|(
name|cRS
operator|.
name|getConf
argument_list|()
operator|.
name|getNumReducers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
index|[]
name|getSortedTags
parameter_list|(
name|JoinOperator
name|joinOp
parameter_list|)
block|{
name|boolean
index|[]
name|result
init|=
operator|new
name|boolean
index|[
name|joinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|tag
init|=
literal|0
init|;
name|tag
operator|<
name|result
operator|.
name|length
condition|;
name|tag
operator|++
control|)
block|{
name|result
index|[
name|tag
index|]
operator|=
name|isSortedTag
argument_list|(
name|joinOp
argument_list|,
name|tag
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// for left outer joins, left alias is sorted but right alias might be not
comment|// (nulls, etc.). vice versa.
specifier|private
name|boolean
name|isSortedTag
parameter_list|(
name|JoinOperator
name|joinOp
parameter_list|,
name|int
name|tag
parameter_list|)
block|{
for|for
control|(
name|JoinCondDesc
name|cond
range|:
name|joinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getConds
argument_list|()
control|)
block|{
switch|switch
condition|(
name|cond
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|JoinDesc
operator|.
name|LEFT_OUTER_JOIN
case|:
if|if
condition|(
name|cond
operator|.
name|getRight
argument_list|()
operator|==
name|tag
condition|)
block|{
return|return
literal|false
return|;
block|}
continue|continue;
case|case
name|JoinDesc
operator|.
name|RIGHT_OUTER_JOIN
case|:
if|if
condition|(
name|cond
operator|.
name|getLeft
argument_list|()
operator|==
name|tag
condition|)
block|{
return|return
literal|false
return|;
block|}
continue|continue;
case|case
name|JoinDesc
operator|.
name|FULL_OUTER_JOIN
case|:
if|if
condition|(
name|cond
operator|.
name|getLeft
argument_list|()
operator|==
name|tag
operator|||
name|cond
operator|.
name|getRight
argument_list|()
operator|==
name|tag
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|int
name|indexOf
parameter_list|(
name|ExprNodeDesc
name|cexpr
parameter_list|,
name|ExprNodeDesc
index|[]
name|pexprs
parameter_list|,
name|Operator
name|child
parameter_list|,
name|Operator
index|[]
name|parents
parameter_list|,
name|boolean
index|[]
name|sorted
parameter_list|)
throws|throws
name|SemanticException
block|{
for|for
control|(
name|int
name|tag
init|=
literal|0
init|;
name|tag
operator|<
name|parents
operator|.
name|length
condition|;
name|tag
operator|++
control|)
block|{
if|if
condition|(
name|sorted
index|[
name|tag
index|]
operator|&&
name|pexprs
index|[
name|tag
index|]
operator|.
name|isSame
argument_list|(
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|cexpr
argument_list|,
name|child
argument_list|,
name|parents
index|[
name|tag
index|]
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|tag
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Current RSDedup remove/replace child RS. So always copies      * more specific part of configurations of child RS to that of parent RS.      */
specifier|protected
name|boolean
name|merge
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|ReduceSinkOperator
name|pRS
parameter_list|,
name|int
name|minReducer
parameter_list|)
throws|throws
name|SemanticException
block|{
name|int
index|[]
name|result
init|=
name|checkStatus
argument_list|(
name|cRS
argument_list|,
name|pRS
argument_list|,
name|minReducer
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|result
index|[
literal|0
index|]
operator|>
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childKCs
init|=
name|cRS
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
name|pRS
operator|.
name|getConf
argument_list|()
operator|.
name|setKeyCols
argument_list|(
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|childKCs
argument_list|,
name|cRS
argument_list|,
name|pRS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
index|[
literal|1
index|]
operator|>
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childPCs
init|=
name|cRS
operator|.
name|getConf
argument_list|()
operator|.
name|getPartitionCols
argument_list|()
decl_stmt|;
name|pRS
operator|.
name|getConf
argument_list|()
operator|.
name|setPartitionCols
argument_list|(
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|childPCs
argument_list|,
name|cRS
argument_list|,
name|pRS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
index|[
literal|2
index|]
operator|>
literal|0
condition|)
block|{
name|pRS
operator|.
name|getConf
argument_list|()
operator|.
name|setOrder
argument_list|(
name|cRS
operator|.
name|getConf
argument_list|()
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
index|[
literal|3
index|]
operator|>
literal|0
condition|)
block|{
name|pRS
operator|.
name|getConf
argument_list|()
operator|.
name|setNumReducers
argument_list|(
name|cRS
operator|.
name|getConf
argument_list|()
operator|.
name|getNumReducers
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Returns merge directions between two RSs for criterias (ordering, number of reducers,      * reducer keys, partition keys). Returns null if any of categories is not mergeable.      *      * Values for each index can be -1, 0, 1      * 1. 0 means two configuration in the category is the same      * 2. for -1, configuration of parent RS is more specific than child RS      * 3. for 1, configuration of child RS is more specific than parent RS      */
specifier|private
name|int
index|[]
name|checkStatus
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|ReduceSinkOperator
name|pRS
parameter_list|,
name|int
name|minReducer
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ReduceSinkDesc
name|cConf
init|=
name|cRS
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|ReduceSinkDesc
name|pConf
init|=
name|pRS
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Integer
name|moveRSOrderTo
init|=
name|checkOrder
argument_list|(
name|cConf
operator|.
name|getOrder
argument_list|()
argument_list|,
name|pConf
operator|.
name|getOrder
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|moveRSOrderTo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Integer
name|moveReducerNumTo
init|=
name|checkNumReducer
argument_list|(
name|cConf
operator|.
name|getNumReducers
argument_list|()
argument_list|,
name|pConf
operator|.
name|getNumReducers
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|moveReducerNumTo
operator|==
literal|null
operator|||
name|moveReducerNumTo
operator|>
literal|0
operator|&&
name|cConf
operator|.
name|getNumReducers
argument_list|()
operator|<
name|minReducer
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|ckeys
init|=
name|cConf
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|pkeys
init|=
name|pConf
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
name|Integer
name|moveKeyColTo
init|=
name|checkExprs
argument_list|(
name|ckeys
argument_list|,
name|pkeys
argument_list|,
name|cRS
argument_list|,
name|pRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|moveKeyColTo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|cpars
init|=
name|cConf
operator|.
name|getPartitionCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|ppars
init|=
name|pConf
operator|.
name|getPartitionCols
argument_list|()
decl_stmt|;
name|Integer
name|movePartitionColTo
init|=
name|checkExprs
argument_list|(
name|cpars
argument_list|,
name|ppars
argument_list|,
name|cRS
argument_list|,
name|pRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|movePartitionColTo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|int
index|[]
block|{
name|moveKeyColTo
block|,
name|movePartitionColTo
block|,
name|moveRSOrderTo
block|,
name|moveReducerNumTo
block|}
return|;
block|}
comment|/**      * Overlapping part of keys should be the same between parent and child.      * And if child has more keys than parent, non-overlapping part of keys      * should be backtrackable to parent.      */
specifier|private
name|Integer
name|checkExprs
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|ckeys
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|pkeys
parameter_list|,
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|ReduceSinkOperator
name|pRS
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Integer
name|moveKeyColTo
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ckeys
operator|==
literal|null
operator|||
name|ckeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|pkeys
operator|!=
literal|null
operator|&&
operator|!
name|pkeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|moveKeyColTo
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|pkeys
operator|==
literal|null
operator|||
name|pkeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|ckey
range|:
name|ckeys
control|)
block|{
if|if
condition|(
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|ckey
argument_list|,
name|cRS
argument_list|,
name|pRS
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// cKey is not present in parent
return|return
literal|null
return|;
block|}
block|}
name|moveKeyColTo
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|moveKeyColTo
operator|=
name|sameKeys
argument_list|(
name|ckeys
argument_list|,
name|pkeys
argument_list|,
name|cRS
argument_list|,
name|pRS
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|moveKeyColTo
return|;
block|}
comment|// backtrack key exprs of child to parent and compare it with parent's
specifier|protected
name|Integer
name|sameKeys
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|cexprs
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|pexprs
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|child
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|)
throws|throws
name|SemanticException
block|{
name|int
name|common
init|=
name|Math
operator|.
name|min
argument_list|(
name|cexprs
operator|.
name|size
argument_list|()
argument_list|,
name|pexprs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|limit
init|=
name|Math
operator|.
name|max
argument_list|(
name|cexprs
operator|.
name|size
argument_list|()
argument_list|,
name|pexprs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|common
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeDesc
name|pexpr
init|=
name|pexprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|cexpr
init|=
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|cexprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|cexpr
operator|==
literal|null
operator|||
operator|!
name|pexpr
operator|.
name|isSame
argument_list|(
name|cexpr
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
for|for
control|(
init|;
name|i
operator|<
name|limit
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|cexprs
operator|.
name|size
argument_list|()
operator|>
name|pexprs
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|cexprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
argument_list|,
name|parent
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// cKey is not present in parent
return|return
literal|null
return|;
block|}
block|}
block|}
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|cexprs
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|pexprs
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
comment|// order of overlapping keys should be exactly the same
specifier|protected
name|Integer
name|checkOrder
parameter_list|(
name|String
name|corder
parameter_list|,
name|String
name|porder
parameter_list|)
block|{
if|if
condition|(
name|corder
operator|==
literal|null
operator|||
name|corder
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
if|if
condition|(
name|porder
operator|==
literal|null
operator|||
name|porder
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|porder
operator|==
literal|null
operator|||
name|porder
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
name|corder
operator|=
name|corder
operator|.
name|trim
argument_list|()
expr_stmt|;
name|porder
operator|=
name|porder
operator|.
name|trim
argument_list|()
expr_stmt|;
name|int
name|target
init|=
name|Math
operator|.
name|min
argument_list|(
name|corder
operator|.
name|length
argument_list|()
argument_list|,
name|porder
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|corder
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|target
argument_list|)
operator|.
name|equals
argument_list|(
name|porder
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|target
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|corder
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|porder
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * If number of reducers for RS is -1, the RS can have any number of reducers.      * It's generally true except for order-by or forced bucketing cases.      * if both of num-reducers are not -1, those number should be the same.      */
specifier|protected
name|Integer
name|checkNumReducer
parameter_list|(
name|int
name|creduce
parameter_list|,
name|int
name|preduce
parameter_list|)
block|{
if|if
condition|(
name|creduce
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|preduce
operator|<
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|preduce
operator|<
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|creduce
operator|!=
name|preduce
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|protected
parameter_list|<
name|T
extends|extends
name|Operator
argument_list|<
name|?
argument_list|>
parameter_list|>
name|T
name|findPossibleParent
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|start
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|target
parameter_list|,
name|boolean
name|trustScript
parameter_list|)
throws|throws
name|SemanticException
block|{
name|T
index|[]
name|parents
init|=
name|findPossibleParents
argument_list|(
name|start
argument_list|,
name|target
argument_list|,
name|trustScript
argument_list|)
decl_stmt|;
return|return
name|parents
operator|!=
literal|null
operator|&&
name|parents
operator|.
name|length
operator|==
literal|1
condition|?
name|parents
index|[
literal|0
index|]
else|:
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
parameter_list|<
name|T
extends|extends
name|Operator
argument_list|<
name|?
argument_list|>
parameter_list|>
name|T
index|[]
name|findPossibleParents
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|start
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|target
parameter_list|,
name|boolean
name|trustScript
parameter_list|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|cursor
init|=
name|getSingleParent
argument_list|(
name|start
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|cursor
operator|!=
literal|null
condition|;
name|cursor
operator|=
name|getSingleParent
argument_list|(
name|cursor
argument_list|)
control|)
block|{
if|if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|cursor
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|T
index|[]
name|array
init|=
operator|(
name|T
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|target
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|array
index|[
literal|0
index|]
operator|=
operator|(
name|T
operator|)
name|cursor
expr_stmt|;
return|return
name|array
return|;
block|}
if|if
condition|(
name|cursor
operator|instanceof
name|JoinOperator
condition|)
block|{
return|return
name|findParents
argument_list|(
operator|(
name|JoinOperator
operator|)
name|cursor
argument_list|,
name|target
argument_list|)
return|;
block|}
if|if
condition|(
name|cursor
operator|instanceof
name|ScriptOperator
operator|&&
operator|!
name|trustScript
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|cursor
operator|instanceof
name|SelectOperator
operator|||
name|cursor
operator|instanceof
name|FilterOperator
operator|||
name|cursor
operator|instanceof
name|ExtractOperator
operator|||
name|cursor
operator|instanceof
name|ForwardOperator
operator|||
name|cursor
operator|instanceof
name|ScriptOperator
operator|||
name|cursor
operator|instanceof
name|ReduceSinkOperator
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
parameter_list|<
name|T
extends|extends
name|Operator
argument_list|<
name|?
argument_list|>
parameter_list|>
name|T
index|[]
name|findParents
parameter_list|(
name|JoinOperator
name|join
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|target
parameter_list|)
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|parents
init|=
name|join
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
name|T
index|[]
name|result
init|=
operator|(
name|T
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|target
argument_list|,
name|parents
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|tag
init|=
literal|0
init|;
name|tag
operator|<
name|result
operator|.
name|length
condition|;
name|tag
operator|++
control|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|cursor
init|=
name|parents
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|cursor
operator|!=
literal|null
condition|;
name|cursor
operator|=
name|getSingleParent
argument_list|(
name|cursor
argument_list|)
control|)
block|{
if|if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|cursor
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|result
index|[
name|tag
index|]
operator|=
operator|(
name|T
operator|)
name|cursor
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|result
index|[
name|tag
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"failed to find "
operator|+
name|target
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" from "
operator|+
name|join
operator|+
literal|" on tag "
operator|+
name|tag
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|SelectOperator
name|replaceReduceSinkWithSelectOperator
parameter_list|(
name|ReduceSinkOperator
name|childRS
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|SemanticException
block|{
name|SelectOperator
name|select
init|=
name|replaceOperatorWithSelect
argument_list|(
name|childRS
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|select
operator|.
name|getConf
argument_list|()
operator|.
name|setOutputColumnNames
argument_list|(
name|childRS
operator|.
name|getConf
argument_list|()
operator|.
name|getOutputValueColumnNames
argument_list|()
argument_list|)
expr_stmt|;
name|select
operator|.
name|getConf
argument_list|()
operator|.
name|setColList
argument_list|(
name|childRS
operator|.
name|getConf
argument_list|()
operator|.
name|getValueCols
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|select
return|;
block|}
comment|// replace the cRS to SEL operator
comment|// If child if cRS is EXT, EXT also should be removed
specifier|private
name|SelectOperator
name|replaceOperatorWithSelect
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|operator
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|SemanticException
block|{
name|RowResolver
name|inputRR
init|=
name|context
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|get
argument_list|(
name|operator
argument_list|)
operator|.
name|getRowResolver
argument_list|()
decl_stmt|;
name|SelectDesc
name|select
init|=
operator|new
name|SelectDesc
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
init|=
name|getSingleParent
argument_list|(
name|operator
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|child
init|=
name|getSingleChild
argument_list|(
name|operator
argument_list|)
decl_stmt|;
name|parent
operator|.
name|getChildOperators
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|SelectOperator
name|sel
init|=
operator|(
name|SelectOperator
operator|)
name|putOpInsertMap
argument_list|(
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|select
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|inputRR
operator|.
name|getColumnInfos
argument_list|()
argument_list|)
argument_list|,
name|parent
argument_list|)
argument_list|,
name|inputRR
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|sel
operator|.
name|setColumnExprMap
argument_list|(
name|operator
operator|.
name|getColumnExprMap
argument_list|()
argument_list|)
expr_stmt|;
name|sel
operator|.
name|setChildOperators
argument_list|(
name|operator
operator|.
name|getChildOperators
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|ch
range|:
name|operator
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|ch
operator|.
name|replaceParent
argument_list|(
name|operator
argument_list|,
name|sel
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|child
operator|instanceof
name|ExtractOperator
condition|)
block|{
name|removeOperator
argument_list|(
name|child
argument_list|,
name|getSingleChild
argument_list|(
name|child
argument_list|)
argument_list|,
name|sel
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|dedupCtx
operator|.
name|addRemovedOperator
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|operator
operator|.
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|operator
operator|.
name|setParentOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|dedupCtx
operator|.
name|addRemovedOperator
argument_list|(
name|operator
argument_list|)
expr_stmt|;
return|return
name|sel
return|;
block|}
specifier|protected
name|void
name|removeReduceSinkForGroupBy
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|GroupByOperator
name|cGBYr
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
init|=
name|getSingleParent
argument_list|(
name|cRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|instanceof
name|GroupByOperator
condition|)
block|{
comment|// pRS-cGBYm-cRS-cGBYr (map aggregation) --> pRS-cGBYr(COMPLETE)
comment|// copies desc of cGBYm to cGBYr and remove cGBYm and cRS
name|GroupByOperator
name|cGBYm
init|=
operator|(
name|GroupByOperator
operator|)
name|parent
decl_stmt|;
name|cGBYr
operator|.
name|getConf
argument_list|()
operator|.
name|setKeys
argument_list|(
name|cGBYm
operator|.
name|getConf
argument_list|()
operator|.
name|getKeys
argument_list|()
argument_list|)
expr_stmt|;
name|cGBYr
operator|.
name|getConf
argument_list|()
operator|.
name|setAggregators
argument_list|(
name|cGBYm
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AggregationDesc
name|aggr
range|:
name|cGBYm
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
control|)
block|{
name|aggr
operator|.
name|setMode
argument_list|(
name|GenericUDAFEvaluator
operator|.
name|Mode
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
block|}
name|cGBYr
operator|.
name|setColumnExprMap
argument_list|(
name|cGBYm
operator|.
name|getColumnExprMap
argument_list|()
argument_list|)
expr_stmt|;
name|cGBYr
operator|.
name|setSchema
argument_list|(
name|cGBYm
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|RowResolver
name|resolver
init|=
name|context
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|get
argument_list|(
name|cGBYm
argument_list|)
operator|.
name|getRowResolver
argument_list|()
decl_stmt|;
name|context
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|get
argument_list|(
name|cGBYr
argument_list|)
operator|.
name|setRowResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// pRS-cRS-cGBYr (no map aggregation) --> pRS-cGBYr(COMPLETE)
comment|// revert expressions of cGBYr to that of cRS
name|cGBYr
operator|.
name|getConf
argument_list|()
operator|.
name|setKeys
argument_list|(
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|cGBYr
operator|.
name|getConf
argument_list|()
operator|.
name|getKeys
argument_list|()
argument_list|,
name|cGBYr
argument_list|,
name|cRS
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AggregationDesc
name|aggr
range|:
name|cGBYr
operator|.
name|getConf
argument_list|()
operator|.
name|getAggregators
argument_list|()
control|)
block|{
name|aggr
operator|.
name|setParameters
argument_list|(
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|aggr
operator|.
name|getParameters
argument_list|()
argument_list|,
name|cGBYr
argument_list|,
name|cRS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|oldMap
init|=
name|cGBYr
operator|.
name|getColumnExprMap
argument_list|()
decl_stmt|;
name|RowResolver
name|oldRR
init|=
name|context
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|get
argument_list|(
name|cGBYr
argument_list|)
operator|.
name|getRowResolver
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|newMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|RowResolver
name|newRR
init|=
operator|new
name|RowResolver
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|outputCols
init|=
name|cGBYr
operator|.
name|getConf
argument_list|()
operator|.
name|getOutputColumnNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|colName
init|=
name|outputCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
index|[]
name|nm
init|=
name|oldRR
operator|.
name|reverseLookup
argument_list|(
name|colName
argument_list|)
decl_stmt|;
name|ColumnInfo
name|colInfo
init|=
name|oldRR
operator|.
name|get
argument_list|(
name|nm
index|[
literal|0
index|]
argument_list|,
name|nm
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|newRR
operator|.
name|put
argument_list|(
name|nm
index|[
literal|0
index|]
argument_list|,
name|nm
index|[
literal|1
index|]
argument_list|,
name|colInfo
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|colExpr
init|=
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|oldMap
operator|.
name|get
argument_list|(
name|colName
argument_list|)
argument_list|,
name|cGBYr
argument_list|,
name|cRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|colExpr
operator|!=
literal|null
condition|)
block|{
name|newMap
operator|.
name|put
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|colExpr
argument_list|)
expr_stmt|;
block|}
block|}
name|cGBYr
operator|.
name|setColumnExprMap
argument_list|(
name|newMap
argument_list|)
expr_stmt|;
name|cGBYr
operator|.
name|setSchema
argument_list|(
operator|new
name|RowSchema
argument_list|(
name|newRR
operator|.
name|getColumnInfos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|get
argument_list|(
name|cGBYr
argument_list|)
operator|.
name|setRowResolver
argument_list|(
name|newRR
argument_list|)
expr_stmt|;
block|}
name|cGBYr
operator|.
name|getConf
argument_list|()
operator|.
name|setMode
argument_list|(
name|GroupByDesc
operator|.
name|Mode
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|removeOperator
argument_list|(
name|cRS
argument_list|,
name|cGBYr
argument_list|,
name|parent
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|dedupCtx
operator|.
name|addRemovedOperator
argument_list|(
name|cRS
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|instanceof
name|GroupByOperator
condition|)
block|{
name|removeOperator
argument_list|(
name|parent
argument_list|,
name|cGBYr
argument_list|,
name|getSingleParent
argument_list|(
name|parent
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|dedupCtx
operator|.
name|addRemovedOperator
argument_list|(
name|cGBYr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeOperator
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|target
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|child
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|,
name|ParseContext
name|context
parameter_list|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|aparent
range|:
name|target
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|aparent
operator|.
name|replaceChild
argument_list|(
name|target
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|achild
range|:
name|target
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|achild
operator|.
name|replaceParent
argument_list|(
name|target
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
name|target
operator|.
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|target
operator|.
name|setParentOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|remove
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|putOpInsertMap
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
parameter_list|,
name|RowResolver
name|rr
parameter_list|,
name|ParseContext
name|context
parameter_list|)
block|{
name|OpParseContext
name|ctx
init|=
operator|new
name|OpParseContext
argument_list|(
name|rr
argument_list|)
decl_stmt|;
name|context
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
return|return
name|op
return|;
block|}
block|}
specifier|static
class|class
name|GroupbyReducerProc
extends|extends
name|AbstractReducerReducerProc
block|{
comment|// pRS-pGBY-cRS
specifier|public
name|Object
name|process
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|SemanticException
block|{
name|GroupByOperator
name|pGBY
init|=
name|findPossibleParent
argument_list|(
name|cRS
argument_list|,
name|GroupByOperator
operator|.
name|class
argument_list|,
name|trustScript
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pGBY
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ReduceSinkOperator
name|pRS
init|=
name|findPossibleParent
argument_list|(
name|pGBY
argument_list|,
name|ReduceSinkOperator
operator|.
name|class
argument_list|,
name|trustScript
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pRS
operator|!=
literal|null
operator|&&
name|merge
argument_list|(
name|cRS
argument_list|,
name|pRS
argument_list|,
name|minReducer
argument_list|()
argument_list|)
condition|)
block|{
name|replaceReduceSinkWithSelectOperator
argument_list|(
name|cRS
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|// pRS-pGBY-cRS-cGBY
specifier|public
name|Object
name|process
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|GroupByOperator
name|cGBY
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|start
init|=
name|getStartForGroupBy
argument_list|(
name|cRS
argument_list|)
decl_stmt|;
name|GroupByOperator
name|pGBY
init|=
name|findPossibleParent
argument_list|(
name|start
argument_list|,
name|GroupByOperator
operator|.
name|class
argument_list|,
name|trustScript
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pGBY
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ReduceSinkOperator
name|pRS
init|=
name|getSingleParent
argument_list|(
name|pGBY
argument_list|,
name|ReduceSinkOperator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|pRS
operator|!=
literal|null
operator|&&
name|merge
argument_list|(
name|cRS
argument_list|,
name|pRS
argument_list|,
name|minReducer
argument_list|()
argument_list|)
condition|)
block|{
name|removeReduceSinkForGroupBy
argument_list|(
name|cRS
argument_list|,
name|cGBY
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|static
class|class
name|JoinReducerProc
extends|extends
name|AbstractReducerReducerProc
block|{
comment|// pRS-pJOIN-cRS
specifier|public
name|Object
name|process
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|SemanticException
block|{
name|JoinOperator
name|pJoin
init|=
name|findPossibleParent
argument_list|(
name|cRS
argument_list|,
name|JoinOperator
operator|.
name|class
argument_list|,
name|trustScript
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pJoin
operator|!=
literal|null
operator|&&
name|merge
argument_list|(
name|cRS
argument_list|,
name|pJoin
argument_list|,
name|minReducer
argument_list|()
argument_list|)
condition|)
block|{
name|pJoin
operator|.
name|getConf
argument_list|()
operator|.
name|setFixedAsSorted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|replaceReduceSinkWithSelectOperator
argument_list|(
name|cRS
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|// pRS-pJOIN-cRS-cGBY
specifier|public
name|Object
name|process
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|GroupByOperator
name|cGBY
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|start
init|=
name|getStartForGroupBy
argument_list|(
name|cRS
argument_list|)
decl_stmt|;
name|JoinOperator
name|pJoin
init|=
name|findPossibleParent
argument_list|(
name|start
argument_list|,
name|JoinOperator
operator|.
name|class
argument_list|,
name|trustScript
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pJoin
operator|!=
literal|null
operator|&&
name|merge
argument_list|(
name|cRS
argument_list|,
name|pJoin
argument_list|,
name|minReducer
argument_list|()
argument_list|)
condition|)
block|{
name|pJoin
operator|.
name|getConf
argument_list|()
operator|.
name|setFixedAsSorted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|removeReduceSinkForGroupBy
argument_list|(
name|cRS
argument_list|,
name|cGBY
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|static
class|class
name|ReducerReducerProc
extends|extends
name|AbstractReducerReducerProc
block|{
comment|// pRS-cRS
specifier|public
name|Object
name|process
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ReduceSinkOperator
name|pRS
init|=
name|findPossibleParent
argument_list|(
name|cRS
argument_list|,
name|ReduceSinkOperator
operator|.
name|class
argument_list|,
name|trustScript
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pRS
operator|!=
literal|null
operator|&&
name|merge
argument_list|(
name|cRS
argument_list|,
name|pRS
argument_list|,
name|minReducer
argument_list|()
argument_list|)
condition|)
block|{
name|replaceReduceSinkWithSelectOperator
argument_list|(
name|cRS
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|// pRS-cRS-cGBY
specifier|public
name|Object
name|process
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|GroupByOperator
name|cGBY
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|start
init|=
name|getStartForGroupBy
argument_list|(
name|cRS
argument_list|)
decl_stmt|;
name|ReduceSinkOperator
name|pRS
init|=
name|findPossibleParent
argument_list|(
name|start
argument_list|,
name|ReduceSinkOperator
operator|.
name|class
argument_list|,
name|trustScript
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pRS
operator|!=
literal|null
operator|&&
name|merge
argument_list|(
name|cRS
argument_list|,
name|pRS
argument_list|,
name|minReducer
argument_list|()
argument_list|)
condition|)
block|{
name|removeReduceSinkForGroupBy
argument_list|(
name|cRS
argument_list|,
name|cGBY
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

