begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_comment
comment|/**  * Class for handling vectorized hash map key wrappers. It evaluates the key columns in a   * row batch in a vectorized fashion.  * This class stores additional information about keys needed to evaluate and output the key values.  *  */
end_comment

begin_class
specifier|public
class|class
name|VectorHashKeyWrapperBatch
block|{
comment|/**    * Helper class for looking up a key value based on key index    *    */
specifier|private
specifier|static
class|class
name|KeyLookupHelper
block|{
specifier|public
name|int
name|longIndex
decl_stmt|;
specifier|public
name|int
name|doubleIndex
decl_stmt|;
block|}
comment|/**    * The key expressions that require evaluation and output the primitive values for each key.    */
specifier|private
name|VectorExpression
index|[]
name|keyExpressions
decl_stmt|;
comment|/**    * indices of LONG primitive keys    */
specifier|private
name|int
index|[]
name|longIndices
decl_stmt|;
comment|/**    * indices of DOUBLE primitive keys    */
specifier|private
name|int
index|[]
name|doubleIndices
decl_stmt|;
comment|/**    * pre-allocated batch size vector of keys wrappers.     * N.B. these keys are **mutable** and should never be used in a HashMap.    * Always clone the key wrapper to obtain an immutable keywrapper suitable     * to use a key in a HashMap.    */
specifier|private
name|VectorHashKeyWrapper
index|[]
name|vectorHashKeyWrappers
decl_stmt|;
comment|/**    * lookup vector to map from key index to primitive type index    */
specifier|private
name|KeyLookupHelper
index|[]
name|indexLookup
decl_stmt|;
comment|/**    * preallocated and reused LongWritable objects for emiting row mode key values     */
specifier|private
name|LongWritable
index|[]
name|longKeyValueOutput
decl_stmt|;
comment|/**    * preallocated and reused DoubleWritable objects for emiting row mode key values    */
specifier|private
name|DoubleWritable
index|[]
name|doubleKeyValueOutput
decl_stmt|;
comment|/**    * Accessor for the batch-sized array of key wrappers     */
specifier|public
name|VectorHashKeyWrapper
index|[]
name|getVectorHashKeyWrappers
parameter_list|()
block|{
return|return
name|vectorHashKeyWrappers
return|;
block|}
comment|/**    * Processes a batch:    *<ul>    *<li>Evaluates each key vector expression.</li>    *<li>Copies out each key's primitive values into the key wrappers</li>    *<li>computes the hashcode of the key wrappers</li>    *</ul>    * @param vrb    * @throws HiveException    */
specifier|public
name|void
name|evaluateBatch
parameter_list|(
name|VectorizedRowBatch
name|vrb
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyExpressions
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|keyExpressions
index|[
name|i
index|]
operator|.
name|evaluate
argument_list|(
name|vrb
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longIndices
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|int
name|keyIndex
init|=
name|longIndices
index|[
name|i
index|]
decl_stmt|;
name|int
name|columnIndex
init|=
name|keyExpressions
index|[
name|keyIndex
index|]
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|LongColumnVector
name|columnVector
init|=
operator|(
name|LongColumnVector
operator|)
name|vrb
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
operator|!
name|vrb
operator|.
name|selectedInUse
condition|)
block|{
name|assignLongNoNullsNoRepeatingNoSelection
argument_list|(
name|i
argument_list|,
name|vrb
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
name|vrb
operator|.
name|selectedInUse
condition|)
block|{
name|assignLongNoNullsNoRepeatingSelection
argument_list|(
name|i
argument_list|,
name|vrb
operator|.
name|size
argument_list|,
name|columnVector
argument_list|,
name|vrb
operator|.
name|selected
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
name|columnVector
operator|.
name|isRepeating
condition|)
block|{
name|assignLongNoNullsRepeating
argument_list|(
name|i
argument_list|,
name|vrb
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
operator|!
name|vrb
operator|.
name|selectedInUse
condition|)
block|{
name|assignLongNullsNoRepeatingNoSelection
argument_list|(
name|i
argument_list|,
name|vrb
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
name|columnVector
operator|.
name|isRepeating
condition|)
block|{
name|assignLongNullsRepeating
argument_list|(
name|i
argument_list|,
name|vrb
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
name|vrb
operator|.
name|selectedInUse
condition|)
block|{
name|assignLongNullsNoRepeatingSelection
argument_list|(
name|i
argument_list|,
name|vrb
operator|.
name|size
argument_list|,
name|columnVector
argument_list|,
name|vrb
operator|.
name|selected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unimplemented Long null/repeat/selected combination %b/%b/%b"
argument_list|,
name|columnVector
operator|.
name|noNulls
argument_list|,
name|columnVector
operator|.
name|isRepeating
argument_list|,
name|vrb
operator|.
name|selectedInUse
argument_list|)
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doubleIndices
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|int
name|keyIndex
init|=
name|doubleIndices
index|[
name|i
index|]
decl_stmt|;
name|int
name|columnIndex
init|=
name|keyExpressions
index|[
name|keyIndex
index|]
operator|.
name|getOutputColumn
argument_list|()
decl_stmt|;
name|DoubleColumnVector
name|columnVector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|vrb
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
operator|!
name|vrb
operator|.
name|selectedInUse
condition|)
block|{
name|assignDoubleNoNullsNoRepeatingNoSelection
argument_list|(
name|i
argument_list|,
name|vrb
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
name|vrb
operator|.
name|selectedInUse
condition|)
block|{
name|assignDoubleNoNullsNoRepeatingSelection
argument_list|(
name|i
argument_list|,
name|vrb
operator|.
name|size
argument_list|,
name|columnVector
argument_list|,
name|vrb
operator|.
name|selected
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnVector
operator|.
name|noNulls
operator|&&
name|columnVector
operator|.
name|isRepeating
condition|)
block|{
name|assignDoubleNoNullsRepeating
argument_list|(
name|i
argument_list|,
name|vrb
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
operator|!
name|vrb
operator|.
name|selectedInUse
condition|)
block|{
name|assignDoubleNullsNoRepeatingNoSelection
argument_list|(
name|i
argument_list|,
name|vrb
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
name|columnVector
operator|.
name|isRepeating
condition|)
block|{
name|assignDoubleNullsRepeating
argument_list|(
name|i
argument_list|,
name|vrb
operator|.
name|size
argument_list|,
name|columnVector
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|columnVector
operator|.
name|noNulls
operator|&&
operator|!
name|columnVector
operator|.
name|isRepeating
operator|&&
name|vrb
operator|.
name|selectedInUse
condition|)
block|{
name|assignDoubleNullsNoRepeatingSelection
argument_list|(
name|i
argument_list|,
name|vrb
operator|.
name|size
argument_list|,
name|columnVector
argument_list|,
name|vrb
operator|.
name|selected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unimplemented Double null/repeat/selected combination %b/%b/%b"
argument_list|,
name|columnVector
operator|.
name|noNulls
argument_list|,
name|columnVector
operator|.
name|isRepeating
argument_list|,
name|vrb
operator|.
name|selectedInUse
argument_list|)
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vrb
operator|.
name|size
condition|;
operator|++
name|i
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|.
name|setHashKey
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, possible nulls, no repeat values, batch selection vector.    */
specifier|private
name|void
name|assignDoubleNullsNoRepeatingSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|DoubleColumnVector
name|columnVector
parameter_list|,
name|int
index|[]
name|selected
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
operator|!
name|columnVector
operator|.
name|isNull
index|[
name|r
index|]
condition|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignDouble
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|selected
index|[
name|r
index|]
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignNullDouble
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for Double type, repeat null values.    */
specifier|private
name|void
name|assignDoubleNullsRepeating
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|DoubleColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignNullDouble
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for Double type, possible nulls, repeat values.    */
specifier|private
name|void
name|assignDoubleNullsNoRepeatingNoSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|DoubleColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
operator|!
name|columnVector
operator|.
name|isNull
index|[
name|r
index|]
condition|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignDouble
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|r
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignNullDouble
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, no nulls, repeat values, no selection vector.    */
specifier|private
name|void
name|assignDoubleNoNullsRepeating
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|DoubleColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignDouble
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, no nulls, no repeat values, batch selection vector.    */
specifier|private
name|void
name|assignDoubleNoNullsNoRepeatingSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|DoubleColumnVector
name|columnVector
parameter_list|,
name|int
index|[]
name|selected
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignDouble
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|selected
index|[
name|r
index|]
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, no nulls, no repeat values, no selection vector.    */
specifier|private
name|void
name|assignDoubleNoNullsNoRepeatingNoSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|DoubleColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignDouble
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|r
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, possible nulls, no repeat values, batch selection vector.    */
specifier|private
name|void
name|assignLongNullsNoRepeatingSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|LongColumnVector
name|columnVector
parameter_list|,
name|int
index|[]
name|selected
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
operator|!
name|columnVector
operator|.
name|isNull
index|[
name|selected
index|[
name|r
index|]
index|]
condition|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignLong
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|selected
index|[
name|r
index|]
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignNullLong
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, repeating nulls.    */
specifier|private
name|void
name|assignLongNullsRepeating
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|LongColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignNullLong
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, possible nulls, no repeat values, no selection vector.    */
specifier|private
name|void
name|assignLongNullsNoRepeatingNoSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|LongColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
operator|!
name|columnVector
operator|.
name|isNull
index|[
name|r
index|]
condition|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignLong
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|r
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignNullLong
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, no nulls, repeat values, no selection vector.    */
specifier|private
name|void
name|assignLongNoNullsRepeating
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|LongColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignLong
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, no nulls, no repeat values, batch selection vector.    */
specifier|private
name|void
name|assignLongNoNullsNoRepeatingSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|LongColumnVector
name|columnVector
parameter_list|,
name|int
index|[]
name|selected
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignLong
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|selected
index|[
name|r
index|]
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to assign values from a vector column into the key wrapper.    * Optimized for double type, no nulls, no repeat values, no selection vector.    */
specifier|private
name|void
name|assignLongNoNullsNoRepeatingNoSelection
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|,
name|LongColumnVector
name|columnVector
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|size
condition|;
operator|++
name|r
control|)
block|{
name|vectorHashKeyWrappers
index|[
name|r
index|]
operator|.
name|assignLong
argument_list|(
name|index
argument_list|,
name|columnVector
operator|.
name|vector
index|[
name|r
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Prepares a VectorHashKeyWrapperBatch to work for a specific set of keys.    * Computes the fast access lookup indices, preallocates all needed internal arrays.    * This step is done only once per query, not once per batch. The information computed now    * will be used to generate proper individual VectorKeyHashWrapper objects.    */
specifier|public
specifier|static
name|VectorHashKeyWrapperBatch
name|compileKeyWrapperBatch
parameter_list|(
name|VectorExpression
index|[]
name|keyExpressions
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorHashKeyWrapperBatch
name|compiledKeyWrapperBatch
init|=
operator|new
name|VectorHashKeyWrapperBatch
argument_list|()
decl_stmt|;
name|compiledKeyWrapperBatch
operator|.
name|keyExpressions
operator|=
name|keyExpressions
expr_stmt|;
comment|// We'll overallocate and then shrink the array for each type
name|int
index|[]
name|longIndices
init|=
operator|new
name|int
index|[
name|keyExpressions
operator|.
name|length
index|]
decl_stmt|;
name|int
name|longIndicesIndex
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|doubleIndices
init|=
operator|new
name|int
index|[
name|keyExpressions
operator|.
name|length
index|]
decl_stmt|;
name|int
name|doubleIndicesIndex
init|=
literal|0
decl_stmt|;
name|KeyLookupHelper
index|[]
name|indexLookup
init|=
operator|new
name|KeyLookupHelper
index|[
name|keyExpressions
operator|.
name|length
index|]
decl_stmt|;
comment|// Inspect the output type of each key expression.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyExpressions
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|indexLookup
index|[
name|i
index|]
operator|=
operator|new
name|KeyLookupHelper
argument_list|()
expr_stmt|;
name|String
name|outputType
init|=
name|keyExpressions
index|[
name|i
index|]
operator|.
name|getOutputType
argument_list|()
decl_stmt|;
if|if
condition|(
name|outputType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"long"
argument_list|)
operator|||
name|outputType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"bigint"
argument_list|)
condition|)
block|{
name|longIndices
index|[
name|longIndicesIndex
index|]
operator|=
name|i
expr_stmt|;
name|indexLookup
index|[
name|i
index|]
operator|.
name|longIndex
operator|=
name|longIndicesIndex
expr_stmt|;
name|indexLookup
index|[
name|i
index|]
operator|.
name|doubleIndex
operator|=
operator|-
literal|1
expr_stmt|;
operator|++
name|longIndicesIndex
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|outputType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
name|doubleIndices
index|[
name|doubleIndicesIndex
index|]
operator|=
name|i
expr_stmt|;
name|indexLookup
index|[
name|i
index|]
operator|.
name|longIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|indexLookup
index|[
name|i
index|]
operator|.
name|doubleIndex
operator|=
name|doubleIndicesIndex
expr_stmt|;
operator|++
name|doubleIndicesIndex
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unsuported vector output type: "
operator|+
name|outputType
argument_list|)
throw|;
block|}
block|}
name|compiledKeyWrapperBatch
operator|.
name|indexLookup
operator|=
name|indexLookup
expr_stmt|;
name|compiledKeyWrapperBatch
operator|.
name|longKeyValueOutput
operator|=
operator|new
name|LongWritable
index|[
name|longIndicesIndex
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longIndicesIndex
condition|;
operator|++
name|i
control|)
block|{
name|compiledKeyWrapperBatch
operator|.
name|longKeyValueOutput
index|[
name|i
index|]
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
block|}
name|compiledKeyWrapperBatch
operator|.
name|doubleKeyValueOutput
operator|=
operator|new
name|DoubleWritable
index|[
name|doubleIndicesIndex
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doubleIndicesIndex
condition|;
operator|++
name|i
control|)
block|{
name|compiledKeyWrapperBatch
operator|.
name|doubleKeyValueOutput
index|[
name|i
index|]
operator|=
operator|new
name|DoubleWritable
argument_list|()
expr_stmt|;
block|}
name|compiledKeyWrapperBatch
operator|.
name|longIndices
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|longIndices
argument_list|,
name|longIndicesIndex
argument_list|)
expr_stmt|;
name|compiledKeyWrapperBatch
operator|.
name|doubleIndices
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|doubleIndices
argument_list|,
name|doubleIndicesIndex
argument_list|)
expr_stmt|;
name|compiledKeyWrapperBatch
operator|.
name|vectorHashKeyWrappers
operator|=
operator|new
name|VectorHashKeyWrapper
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
operator|++
name|i
control|)
block|{
name|compiledKeyWrapperBatch
operator|.
name|vectorHashKeyWrappers
index|[
name|i
index|]
operator|=
operator|new
name|VectorHashKeyWrapper
argument_list|(
name|longIndicesIndex
argument_list|,
name|doubleIndicesIndex
argument_list|)
expr_stmt|;
block|}
return|return
name|compiledKeyWrapperBatch
return|;
block|}
comment|/**    * Get the row-mode writable object value of a key from a key wrapper    */
specifier|public
name|Object
name|getWritableKeyValue
parameter_list|(
name|VectorHashKeyWrapper
name|kw
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|kw
operator|.
name|getIsNull
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|KeyLookupHelper
name|klh
init|=
name|indexLookup
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|klh
operator|.
name|longIndex
operator|>=
literal|0
condition|)
block|{
name|longKeyValueOutput
index|[
name|klh
operator|.
name|longIndex
index|]
operator|.
name|set
argument_list|(
name|kw
operator|.
name|getLongValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|longKeyValueOutput
index|[
name|klh
operator|.
name|longIndex
index|]
return|;
block|}
elseif|else
if|if
condition|(
name|klh
operator|.
name|doubleIndex
operator|>=
literal|0
condition|)
block|{
name|doubleKeyValueOutput
index|[
name|klh
operator|.
name|doubleIndex
index|]
operator|.
name|set
argument_list|(
name|kw
operator|.
name|getDoubleValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|doubleKeyValueOutput
index|[
name|klh
operator|.
name|doubleIndex
index|]
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Internal inconsistent KeyLookupHelper at index [%d]:%d %d"
argument_list|,
name|i
argument_list|,
name|klh
operator|.
name|longIndex
argument_list|,
name|klh
operator|.
name|doubleIndex
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

