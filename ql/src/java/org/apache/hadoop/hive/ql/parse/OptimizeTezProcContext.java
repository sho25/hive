begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|AppMasterEventOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_comment
comment|/**  * OptimizeTezProcContext. OptimizeTezProcContext maintains information  * about the current operator plan as we walk the operator tree  * to do some additional optimizations on it.  *  */
end_comment

begin_class
specifier|public
class|class
name|OptimizeTezProcContext
implements|implements
name|NodeProcessorCtx
block|{
specifier|public
specifier|final
name|ParseContext
name|parseContext
decl_stmt|;
specifier|public
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|public
specifier|final
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
decl_stmt|;
specifier|public
specifier|final
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
decl_stmt|;
comment|/* Two of the optimization rules, ConvertJoinMapJoin and RemoveDynamicPruningBySize, are put into      stats dependent optimizations and run together in TezCompiler. There's no guarantee which one      runs first, but in either case, the prior one may have removed a chain which the latter one is      not aware of. So we need to remember the leaf node(s) of that chain so it can be skipped.       For example, as ConvertJoinMapJoin is removing the reduce sink, it may also have removed a      dynamic partition pruning operator chain. However, RemoveDynamicPruningBySize doesn't know this      and still tries to traverse that removed chain which will cause NPE.       This may also happen when RemoveDynamicPruningBySize happens first.     */
specifier|public
name|HashSet
argument_list|<
name|AppMasterEventOperator
argument_list|>
name|pruningOpsRemovedByPriorOpt
decl_stmt|;
specifier|public
specifier|final
name|Set
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|visitedReduceSinks
init|=
operator|new
name|HashSet
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|final
name|Multimap
argument_list|<
name|AppMasterEventOperator
argument_list|,
name|TableScanOperator
argument_list|>
name|eventOpToTableScanMap
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// rootOperators are all the table scan operators in sequence
comment|// of traversal
specifier|public
name|Deque
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|rootOperators
decl_stmt|;
specifier|public
name|OptimizeTezProcContext
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|parseContext
operator|=
name|parseContext
expr_stmt|;
name|this
operator|.
name|inputs
operator|=
name|inputs
expr_stmt|;
name|this
operator|.
name|outputs
operator|=
name|outputs
expr_stmt|;
name|this
operator|.
name|pruningOpsRemovedByPriorOpt
operator|=
operator|new
name|HashSet
argument_list|<
name|AppMasterEventOperator
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setRootOperators
parameter_list|(
name|Deque
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|roots
parameter_list|)
block|{
name|this
operator|.
name|rootOperators
operator|=
name|roots
expr_stmt|;
block|}
block|}
end_class

end_unit

