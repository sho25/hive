begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|profiler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_class
specifier|public
class|class
name|HiveProfilePublisherInfo
implements|implements
name|HiveProfilerConnectionInfo
block|{
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|String
name|statsDbClass
decl_stmt|;
specifier|private
specifier|final
name|String
name|tableName
init|=
literal|"PROFILER_STATS"
decl_stmt|;
specifier|private
name|int
name|maxRetries
decl_stmt|,
name|waitWindow
decl_stmt|,
name|timeout
decl_stmt|;
specifier|private
name|Connection
name|conn
decl_stmt|;
specifier|private
name|String
name|connectionString
decl_stmt|;
specifier|private
name|PreparedStatement
name|insStmt
decl_stmt|;
specifier|public
name|String
name|getDbClass
parameter_list|()
block|{
return|return
name|statsDbClass
return|;
block|}
specifier|public
name|int
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
specifier|public
name|int
name|getMaxRetries
parameter_list|()
block|{
return|return
name|maxRetries
return|;
block|}
specifier|public
name|int
name|getWaitWindow
parameter_list|()
block|{
return|return
name|waitWindow
return|;
block|}
specifier|public
name|String
name|getConnectionString
parameter_list|()
block|{
return|return
name|connectionString
return|;
block|}
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
specifier|public
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|conn
return|;
block|}
specifier|protected
name|PreparedStatement
name|getInsertStatement
parameter_list|()
block|{
return|return
name|insStmt
return|;
block|}
specifier|private
name|String
name|getInsert
parameter_list|()
block|{
name|String
name|colNames
init|=
literal|""
decl_stmt|;
name|String
name|val
init|=
literal|""
decl_stmt|;
name|int
name|numCols
init|=
name|HiveProfilerStats
operator|.
name|COLUMN_NAMES
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
name|i
operator|++
control|)
block|{
name|colNames
operator|+=
name|HiveProfilerStats
operator|.
name|COLUMN_NAMES
index|[
name|i
index|]
expr_stmt|;
name|val
operator|+=
literal|"?"
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|numCols
operator|-
literal|1
condition|)
block|{
name|colNames
operator|+=
literal|","
expr_stmt|;
name|val
operator|+=
literal|","
expr_stmt|;
block|}
block|}
return|return
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" ("
operator|+
name|colNames
operator|+
literal|") VALUES ("
operator|+
name|val
operator|+
literal|")"
return|;
block|}
specifier|public
name|HiveProfilePublisherInfo
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|maxRetries
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_PROFILER_RETRIES_MAX
argument_list|)
expr_stmt|;
name|waitWindow
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_PROFILER_RETRIES_WAIT
argument_list|)
expr_stmt|;
name|connectionString
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEPROFILERDBCONNECTIONSTRING
argument_list|)
expr_stmt|;
name|timeout
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_PROFILER_JDBC_TIMEOUT
argument_list|)
expr_stmt|;
name|String
name|driver
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEPROFILERJDBCDRIVER
argument_list|)
decl_stmt|;
name|statsDbClass
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEPROFILERDBCLASS
argument_list|)
expr_stmt|;
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|driver
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during instantiating JDBC driver "
operator|+
name|driver
operator|+
literal|". "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|DriverManager
operator|.
name|setLoginTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
comment|// stats is non-blocking
name|conn
operator|=
name|Utilities
operator|.
name|connectWithRetry
argument_list|(
name|connectionString
argument_list|,
name|waitWindow
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|prepareInsert
parameter_list|()
throws|throws
name|SQLException
block|{
name|insStmt
operator|=
name|Utilities
operator|.
name|prepareWithRetry
argument_list|(
name|conn
argument_list|,
name|getInsert
argument_list|()
argument_list|,
name|waitWindow
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|closeInsertStatement
parameter_list|()
throws|throws
name|SQLException
block|{
name|insStmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|PreparedStatement
name|getInsert
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stats
parameter_list|)
throws|throws
name|SQLException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|HiveProfilerStats
operator|.
name|COLUMN_NAMES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|insStmt
operator|.
name|setString
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|stats
operator|.
name|get
argument_list|(
name|HiveProfilerStats
operator|.
name|COLUMN_NAMES
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|insStmt
return|;
block|}
block|}
end_class

end_unit

