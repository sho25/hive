begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashMultiSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashTableResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashMultiSetResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_comment
comment|/**  * This class has methods for generating vectorized join results for the big table only  * variation of inner joins.  *  * When an inner join does not have any small table columns in the join result, we use this  * variation we call inner big only.  This variation uses a hash multi-set instead of hash map  * since there are no values (just a count).  *  * Note that if a inner key appears in the small table results area, we use the inner join  * projection optimization and are able to use this variation.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|VectorMapJoinInnerBigOnlyGenerateResultOperator
extends|extends
name|VectorMapJoinGenerateResultOperator
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VectorMapJoinInnerBigOnlyGenerateResultOperator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|//---------------------------------------------------------------------------
comment|// Inner big-table only join specific members.
comment|//
comment|// An array of hash multi-set results so we can do lookups on the whole batch before output result
comment|// generation.
specifier|protected
specifier|transient
name|VectorMapJoinHashMultiSetResult
name|hashMultiSetResults
index|[]
decl_stmt|;
comment|// Pre-allocated member for storing the (physical) batch index of matching row (single- or
comment|// multi-small-table-valued) indexes during a process call.
specifier|protected
specifier|transient
name|int
index|[]
name|allMatchs
decl_stmt|;
comment|/*    *  Pre-allocated members for storing information on single- and multi-valued-small-table matches.    *    *  ~ValueCounts    *                Number of (empty) small table values.    *  ~AllMatchIndices    *                (Logical) indices into allMatchs to the first row of a match of a    *                possible series of duplicate keys.    *  ~DuplicateCounts    *                The duplicate count for each matched key.    *    */
specifier|protected
specifier|transient
name|long
index|[]
name|equalKeySeriesValueCounts
decl_stmt|;
specifier|protected
specifier|transient
name|int
index|[]
name|equalKeySeriesAllMatchIndices
decl_stmt|;
specifier|protected
specifier|transient
name|int
index|[]
name|equalKeySeriesDuplicateCounts
decl_stmt|;
comment|// Pre-allocated member for storing the (physical) batch index of rows that need to be spilled.
specifier|protected
specifier|transient
name|int
index|[]
name|spills
decl_stmt|;
comment|// Pre-allocated member for storing index into the hashMultiSetResults for each spilled row.
specifier|protected
specifier|transient
name|int
index|[]
name|spillHashMapResultIndices
decl_stmt|;
specifier|public
name|VectorMapJoinInnerBigOnlyGenerateResultOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|VectorMapJoinInnerBigOnlyGenerateResultOperator
parameter_list|(
name|VectorizationContext
name|vContext
parameter_list|,
name|OperatorDesc
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
argument_list|(
name|vContext
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/*    * Setup our inner big table only join specific members.    */
specifier|protected
name|void
name|commonSetup
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|commonSetup
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// Inner big-table only join specific.
name|VectorMapJoinHashMultiSet
name|baseHashMultiSet
init|=
operator|(
name|VectorMapJoinHashMultiSet
operator|)
name|vectorMapJoinHashTable
decl_stmt|;
name|hashMultiSetResults
operator|=
operator|new
name|VectorMapJoinHashMultiSetResult
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hashMultiSetResults
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|hashMultiSetResults
index|[
name|i
index|]
operator|=
name|baseHashMultiSet
operator|.
name|createHashMultiSetResult
argument_list|()
expr_stmt|;
block|}
name|allMatchs
operator|=
operator|new
name|int
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|equalKeySeriesValueCounts
operator|=
operator|new
name|long
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|equalKeySeriesAllMatchIndices
operator|=
operator|new
name|int
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|equalKeySeriesDuplicateCounts
operator|=
operator|new
name|int
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|spills
operator|=
operator|new
name|int
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|spillHashMapResultIndices
operator|=
operator|new
name|int
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
block|}
comment|//-----------------------------------------------------------------------------------------------
comment|/*    * Inner big table only join (hash multi-set).    */
comment|/**    * Generate the inner big table only join output results for one vectorized row batch.    *    * @param batch    *          The big table batch with any matching and any non matching rows both as    *          selected in use.    * @param allMatchCount    *          Number of matches in allMatchs.    * @param equalKeySeriesCount    *          Number of single value matches.    * @param spillCount    *          Number of spills in spills.    * @param hashTableResults    *          The array of all hash table results for the batch. We need the    *          VectorMapJoinHashTableResult for the spill information.    * @param hashMapResultCount    *          Number of entries in hashMapResults.    *    **/
specifier|protected
name|void
name|finishInnerBigOnly
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|allMatchCount
parameter_list|,
name|int
name|equalKeySeriesCount
parameter_list|,
name|int
name|spillCount
parameter_list|,
name|VectorMapJoinHashTableResult
index|[]
name|hashTableResults
parameter_list|,
name|int
name|hashMapResultCount
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
block|{
comment|// Get rid of spills before we start modifying the batch.
if|if
condition|(
name|spillCount
operator|>
literal|0
condition|)
block|{
name|spillHashMapBatch
argument_list|(
name|batch
argument_list|,
name|hashTableResults
argument_list|,
name|spills
argument_list|,
name|spillHashMapResultIndices
argument_list|,
name|spillCount
argument_list|)
expr_stmt|;
block|}
comment|/*      * Optimize by running value expressions only over the matched rows.      */
if|if
condition|(
name|allMatchCount
operator|>
literal|0
operator|&&
name|bigTableValueExpressions
operator|!=
literal|null
condition|)
block|{
name|performValueExpressions
argument_list|(
name|batch
argument_list|,
name|allMatchs
argument_list|,
name|allMatchCount
argument_list|)
expr_stmt|;
block|}
name|int
name|numSel
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|equalKeySeriesCount
condition|;
name|i
operator|++
control|)
block|{
name|long
name|count
init|=
name|equalKeySeriesValueCounts
index|[
name|i
index|]
decl_stmt|;
name|int
name|allMatchesIndex
init|=
name|equalKeySeriesAllMatchIndices
index|[
name|i
index|]
decl_stmt|;
name|int
name|duplicateCount
init|=
name|equalKeySeriesDuplicateCounts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|1
condition|)
block|{
name|numSel
operator|=
name|generateHashMultiSetResultSingleValue
argument_list|(
name|batch
argument_list|,
name|allMatchs
argument_list|,
name|allMatchesIndex
argument_list|,
name|duplicateCount
argument_list|,
name|numSel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|generateHashMultiSetResultMultiValue
argument_list|(
name|batch
argument_list|,
name|allMatchs
argument_list|,
name|allMatchesIndex
argument_list|,
name|duplicateCount
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
name|batch
operator|.
name|size
operator|=
name|numSel
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Generate the single value match inner big table only join output results for a match.    *    * @param batch    *          The big table batch.    * @param allMatchs    *          A subset of the rows of the batch that are matches.    * @param allMatchesIndex    *          The logical index into allMatchs of the first equal key.    * @param duplicateCount    *          The number of duplicates or equal keys.    * @param numSel    *          The current count of rows in the rebuilding of the selected array.    *    * @return    *          The new count of selected rows.    */
specifier|private
name|int
name|generateHashMultiSetResultSingleValue
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
index|[]
name|allMatchs
parameter_list|,
name|int
name|allMatchesIndex
parameter_list|,
name|int
name|duplicateCount
parameter_list|,
name|int
name|numSel
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
block|{
comment|// LOG.debug("generateHashMultiSetResultSingleValue enter...");
comment|// Generate result within big table batch itself.
comment|// LOG.debug("generateHashMultiSetResultSingleValue with big table...");
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|duplicateCount
condition|;
name|i
operator|++
control|)
block|{
name|int
name|batchIndex
init|=
name|allMatchs
index|[
name|allMatchesIndex
operator|+
name|i
index|]
decl_stmt|;
comment|// Use the big table row as output.
name|batch
operator|.
name|selected
index|[
name|numSel
operator|++
index|]
operator|=
name|batchIndex
expr_stmt|;
block|}
return|return
name|numSel
return|;
block|}
comment|/**    * Generate results for a N x M cross product.    *    * @param batch    *          The big table batch.    * @param allMatchs    *          The all match selected array that contains (physical) batch indices.    * @param allMatchesIndex    *          The index of the match key.    * @param duplicateCount    *          Number of equal key rows.    * @param count    *          Value count.    */
specifier|private
name|void
name|generateHashMultiSetResultMultiValue
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
index|[]
name|allMatchs
parameter_list|,
name|int
name|allMatchesIndex
parameter_list|,
name|int
name|duplicateCount
parameter_list|,
name|long
name|count
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
block|{
comment|// LOG.debug("generateHashMultiSetResultMultiValue allMatchesIndex " + allMatchesIndex + " duplicateCount " + duplicateCount + " count " + count);
comment|// TODO: Look at repeating optimizations...
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|duplicateCount
condition|;
name|i
operator|++
control|)
block|{
name|int
name|batchIndex
init|=
name|allMatchs
index|[
name|allMatchesIndex
operator|+
name|i
index|]
decl_stmt|;
for|for
control|(
name|long
name|l
init|=
literal|0
init|;
name|l
operator|<
name|count
condition|;
name|l
operator|++
control|)
block|{
comment|// Copy the BigTable values into the overflow batch. Since the overflow batch may
comment|// not get flushed here, we must copy by value.
if|if
condition|(
name|bigTableRetainedVectorCopy
operator|!=
literal|null
condition|)
block|{
name|bigTableRetainedVectorCopy
operator|.
name|copyByValue
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|overflowBatch
argument_list|,
name|overflowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
name|overflowBatch
operator|.
name|size
operator|++
expr_stmt|;
if|if
condition|(
name|overflowBatch
operator|.
name|size
operator|==
name|overflowBatch
operator|.
name|DEFAULT_SIZE
condition|)
block|{
name|forwardOverflow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Generate the inner big table only join output results for one vectorized row batch with    * a repeated key.    *    * @param batch    *          The big table batch with any matching and any non matching rows both as    *          selected in use.    * @param hashMultiSetResult    *          The hash multi-set results for the batch.    */
specifier|protected
name|int
name|generateHashMultiSetResultRepeatedAll
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|VectorMapJoinHashMultiSetResult
name|hashMultiSetResult
parameter_list|)
throws|throws
name|HiveException
block|{
name|long
name|count
init|=
name|hashMultiSetResult
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
comment|// The selected array is already filled in as we want it.
block|}
else|else
block|{
name|int
index|[]
name|selected
init|=
name|batch
operator|.
name|selected
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
name|selected
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
block|}
do|do
block|{
name|forwardBigTableBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|count
operator|--
expr_stmt|;
block|}
do|while
condition|(
name|count
operator|>
literal|0
condition|)
do|;
comment|// We forwarded the batch in this method.
return|return
literal|0
return|;
block|}
specifier|protected
name|void
name|finishInnerBigOnlyRepeated
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
parameter_list|,
name|VectorMapJoinHashMultiSetResult
name|hashMultiSetResult
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
block|{
switch|switch
condition|(
name|joinResult
condition|)
block|{
case|case
name|MATCH
case|:
if|if
condition|(
name|bigTableValueExpressions
operator|!=
literal|null
condition|)
block|{
comment|// Run our value expressions over whole batch.
for|for
control|(
name|VectorExpression
name|ve
range|:
name|bigTableValueExpressions
control|)
block|{
name|ve
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Generate special repeated case.
name|int
name|numSel
init|=
name|generateHashMultiSetResultRepeatedAll
argument_list|(
name|batch
argument_list|,
name|hashMultiSetResult
argument_list|)
decl_stmt|;
name|batch
operator|.
name|size
operator|=
name|numSel
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|SPILL
case|:
comment|// Whole batch is spilled.
name|spillBatchRepeated
argument_list|(
name|batch
argument_list|,
operator|(
name|VectorMapJoinHashTableResult
operator|)
name|hashMultiSetResult
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|NOMATCH
case|:
comment|// No match for entire batch.
name|batch
operator|.
name|size
operator|=
literal|0
expr_stmt|;
break|break;
block|}
block|}
block|}
end_class

end_unit

