begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
operator|.
name|views
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|functions
operator|.
name|HiveSqlMinMaxAggFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|functions
operator|.
name|HiveSqlSumAggFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This rule will perform a rewriting to prepare the plan for incremental  * view maintenance in case there exist aggregation operator, so we can  * avoid the INSERT OVERWRITE and use a MERGE statement instead.  *  * In particular, the INSERT OVERWRITE maintenance will look like this  * (in SQL):  * INSERT OVERWRITE mv  * SELECT a, b, SUM(s) as s, SUM(c) AS c  * FROM (  *   SELECT * from mv --OLD DATA  *   UNION ALL  *   SELECT a, b, SUM(x) AS s, COUNT(*) AS c --NEW DATA  *   FROM TAB_A  *   JOIN TAB_B ON (TAB_A.a = TAB_B.z)  *   WHERE TAB_A.ROW_ID> 5  *   GROUP BY a, b) inner_subq  * GROUP BY a, b;  *  * We need to transform that into:  * MERGE INTO mv  * USING (  *   SELECT a, b, SUM(x) AS s, COUNT(*) AS c --NEW DATA  *   FROM TAB_A  *   JOIN TAB_B ON (TAB_A.a = TAB_B.z)  *   WHERE TAB_A.ROW_ID> 5  *   GROUP BY a, b) source  * ON (mv.a = source.a AND mv.b = source.b)  * WHEN MATCHED AND mv.c + source.c<> 0  *   THEN UPDATE SET mv.s = mv.s + source.s, mv.c = mv.c + source.c  * WHEN NOT MATCHED  *   THEN INSERT VALUES (source.a, source.b, s, c);  *  * To be precise, we need to convert it into a MERGE rewritten as:  * FROM mv right outer join _source_ source  * ON (mv.a = source.a AND mv.b = source.b)  * INSERT INTO TABLE mv  *   SELECT source.a, source.b, s, c  *   WHERE mv.a IS NULL AND mv2.b IS NULL  * INSERT INTO TABLE mv  *   SELECT mv.ROW__ID, source.a, source.b, mv.s + source.s, mv.c + source.c  *   WHERE source.a=mv.a AND source.b=mv.b  *   SORT BY mv.ROW__ID;  */
end_comment

begin_class
specifier|public
class|class
name|HiveAggregateIncrementalRewritingRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|HiveAggregateIncrementalRewritingRule
name|INSTANCE
init|=
operator|new
name|HiveAggregateIncrementalRewritingRule
argument_list|()
decl_stmt|;
specifier|private
name|HiveAggregateIncrementalRewritingRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Aggregate
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|Union
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
argument_list|,
literal|"HiveAggregateIncrementalRewritingRule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Aggregate
name|agg
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Union
name|union
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|agg
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
comment|// 1) First branch is query, second branch is MV
specifier|final
name|RelNode
name|joinLeftInput
init|=
name|union
operator|.
name|getInput
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RelNode
name|joinRightInput
init|=
name|union
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// 2) Build conditions for join and filter and start adding
comment|// expressions for project operator
name|List
argument_list|<
name|RexNode
argument_list|>
name|projExprs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|joinConjs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|filterConjs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|groupCount
init|=
name|agg
operator|.
name|getGroupCount
argument_list|()
decl_stmt|;
name|int
name|totalCount
init|=
name|agg
operator|.
name|getGroupCount
argument_list|()
operator|+
name|agg
operator|.
name|getAggCallList
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|leftPos
init|=
literal|0
init|,
name|rightPos
init|=
name|totalCount
init|;
name|leftPos
operator|<
name|groupCount
condition|;
name|leftPos
operator|++
operator|,
name|rightPos
operator|++
control|)
block|{
name|RexNode
name|leftRef
init|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|joinLeftInput
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|leftPos
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
name|leftPos
argument_list|)
decl_stmt|;
name|RexNode
name|rightRef
init|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|joinRightInput
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|leftPos
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
name|rightPos
argument_list|)
decl_stmt|;
name|projExprs
operator|.
name|add
argument_list|(
name|rightRef
argument_list|)
expr_stmt|;
name|joinConjs
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|EQUALS
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|leftRef
argument_list|,
name|rightRef
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filterConjs
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NULL
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|leftRef
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 3) Add the expressions that correspond to the aggregation
comment|// functions
name|RexNode
name|caseFilterCond
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|filterConjs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|leftPos
init|=
name|groupCount
init|,
name|rightPos
init|=
name|totalCount
operator|+
name|groupCount
init|;
name|leftPos
operator|<
name|totalCount
condition|;
name|i
operator|++
operator|,
name|leftPos
operator|++
operator|,
name|rightPos
operator|++
control|)
block|{
comment|// case when mv2.deptno IS NULL AND mv2.deptname IS NULL then s else source.s + mv2.s end
name|RexNode
name|leftRef
init|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|joinLeftInput
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|leftPos
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
name|leftPos
argument_list|)
decl_stmt|;
name|RexNode
name|rightRef
init|=
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|joinRightInput
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|leftPos
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
name|rightPos
argument_list|)
decl_stmt|;
comment|// Generate SQLOperator for merging the aggregations
name|RexNode
name|elseReturn
decl_stmt|;
name|SqlAggFunction
name|aggCall
init|=
name|agg
operator|.
name|getAggCallList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregation
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|aggCall
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|SUM
case|:
comment|// SUM and COUNT are rolled up as SUM, hence SUM represents both here
name|elseReturn
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|PLUS
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rightRef
argument_list|,
name|leftRef
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|MIN
case|:
block|{
name|RexNode
name|condInnerCase
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|LESS_THAN
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rightRef
argument_list|,
name|leftRef
argument_list|)
argument_list|)
decl_stmt|;
name|elseReturn
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|condInnerCase
argument_list|,
name|rightRef
argument_list|,
name|leftRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MAX
case|:
block|{
name|RexNode
name|condInnerCase
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|GREATER_THAN
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|rightRef
argument_list|,
name|leftRef
argument_list|)
argument_list|)
decl_stmt|;
name|elseReturn
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|condInnerCase
argument_list|,
name|rightRef
argument_list|,
name|leftRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Found an aggregation that could not be"
operator|+
literal|" recognized: "
operator|+
name|aggCall
argument_list|)
throw|;
block|}
name|projExprs
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|CASE
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|caseFilterCond
argument_list|,
name|rightRef
argument_list|,
name|elseReturn
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RexNode
name|joinCond
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|joinConjs
argument_list|)
decl_stmt|;
name|RexNode
name|filterCond
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|filterConjs
argument_list|)
decl_stmt|;
comment|// 3) Build plan
name|RelNode
name|newNode
init|=
name|call
operator|.
name|builder
argument_list|()
operator|.
name|push
argument_list|(
name|union
operator|.
name|getInput
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|push
argument_list|(
name|union
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|RIGHT
argument_list|,
name|joinCond
argument_list|)
operator|.
name|filter
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|OR
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|joinCond
argument_list|,
name|filterCond
argument_list|)
argument_list|)
argument_list|)
operator|.
name|project
argument_list|(
name|projExprs
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

