begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|MapColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_comment
comment|/**  * Superclass to support vectorized functions that take a parameter as key of Map  * and return the value of Map.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|VectorUDFMapIndexBase
extends|extends
name|VectorExpression
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|VectorUDFMapIndexBase
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|VectorUDFMapIndexBase
parameter_list|(
name|int
name|outputColumnNum
parameter_list|)
block|{
name|super
argument_list|(
name|outputColumnNum
argument_list|)
expr_stmt|;
block|}
comment|/**    * The index array of MapColumnVector is used to get the value from MapColumnVector based on the    * index, the following are the steps to get it:    *   1. Get the current key which is a scalar or from a ColumnVector.    *   2. Compare the current key and the key from MapColumnVector.    *   3. Set the index of MapColumnVector to the result array if the keys are same.    */
specifier|protected
name|int
index|[]
name|getMapValueIndex
parameter_list|(
name|MapColumnVector
name|mapV
parameter_list|,
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
name|int
index|[]
name|indexArray
init|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|findKey
init|=
literal|false
decl_stmt|;
name|int
name|offset
init|=
operator|(
name|batch
operator|.
name|selectedInUse
operator|)
condition|?
name|batch
operator|.
name|selected
index|[
name|i
index|]
else|:
name|i
decl_stmt|;
name|Object
name|columnKey
init|=
name|getCurrentKey
argument_list|(
name|offset
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|mapV
operator|.
name|lengths
index|[
name|offset
index|]
condition|;
name|j
operator|++
control|)
block|{
name|int
name|index
init|=
call|(
name|int
call|)
argument_list|(
name|mapV
operator|.
name|offsets
index|[
name|offset
index|]
operator|+
name|j
argument_list|)
decl_stmt|;
name|Object
name|tempKey
init|=
name|getKeyByIndex
argument_list|(
name|mapV
operator|.
name|keys
argument_list|,
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareKey
argument_list|(
name|columnKey
argument_list|,
name|tempKey
argument_list|)
condition|)
block|{
name|indexArray
index|[
name|offset
index|]
operator|=
name|j
expr_stmt|;
name|findKey
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|findKey
condition|)
block|{
name|indexArray
index|[
name|offset
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|mapV
operator|.
name|isRepeating
condition|)
block|{
break|break;
block|}
block|}
return|return
name|indexArray
return|;
block|}
specifier|protected
name|boolean
name|compareKey
parameter_list|(
name|Object
name|columnKey
parameter_list|,
name|Object
name|otherKey
parameter_list|)
block|{
if|if
condition|(
name|columnKey
operator|==
literal|null
operator|&&
name|otherKey
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|columnKey
operator|!=
literal|null
operator|&&
name|otherKey
operator|!=
literal|null
condition|)
block|{
return|return
name|compareKeyInternal
argument_list|(
name|columnKey
argument_list|,
name|otherKey
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|protected
name|boolean
name|compareKeyInternal
parameter_list|(
name|Object
name|columnKey
parameter_list|,
name|Object
name|otherKey
parameter_list|)
block|{
return|return
name|columnKey
operator|.
name|equals
argument_list|(
name|otherKey
argument_list|)
return|;
block|}
specifier|abstract
name|Object
name|getKeyByIndex
parameter_list|(
name|ColumnVector
name|cv
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
specifier|abstract
name|Object
name|getCurrentKey
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
block|}
end_class

end_unit

