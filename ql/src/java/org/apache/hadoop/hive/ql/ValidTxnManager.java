begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|DbTxnManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveLockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|TxnIdUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Helps the Driver finding the valid transactions/write ids, and record them for the plan.  */
end_comment

begin_class
class|class
name|ValidTxnManager
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
name|Driver
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CLASS_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Driver
name|driver
decl_stmt|;
specifier|private
specifier|final
name|DriverContext
name|driverContext
decl_stmt|;
name|ValidTxnManager
parameter_list|(
name|Driver
name|driver
parameter_list|,
name|DriverContext
name|driverContext
parameter_list|)
block|{
name|this
operator|.
name|driver
operator|=
name|driver
expr_stmt|;
name|this
operator|.
name|driverContext
operator|=
name|driverContext
expr_stmt|;
block|}
comment|/**    * Checks whether txn list has been invalidated while planning the query.    * This would happen if query requires exclusive/semi-shared lock, and there has been a committed transaction    * on the table over which the lock is required.    */
name|boolean
name|isValidTxnListState
parameter_list|()
throws|throws
name|LockException
block|{
comment|// 1) Get valid txn list.
name|String
name|txnString
init|=
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|ValidTxnList
operator|.
name|VALID_TXNS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|txnString
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
comment|// Not a transactional op, nothing more to do
block|}
name|String
name|currentTxnString
init|=
name|driverContext
operator|.
name|getTxnManager
argument_list|()
operator|.
name|getValidTxns
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTxnString
operator|.
name|equals
argument_list|(
name|txnString
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
comment|// Still valid, nothing more to do
block|}
comment|// 2) Get locks that are relevant:
comment|// - Exclusive for INSERT OVERWRITE.
comment|// - Semi-shared for UPDATE/DELETE.
name|Set
argument_list|<
name|String
argument_list|>
name|nonSharedLockedTables
init|=
name|getNonSharedLockedTables
argument_list|()
decl_stmt|;
if|if
condition|(
name|nonSharedLockedTables
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
comment|// Nothing to check
block|}
comment|// 3) Get txn tables that are being written
name|String
name|txnWriteIdListString
init|=
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|ValidTxnWriteIdList
operator|.
name|VALID_TABLES_WRITEIDS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|txnWriteIdListString
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
comment|// Nothing to check
block|}
return|return
name|checkWriteIds
argument_list|(
name|currentTxnString
argument_list|,
name|nonSharedLockedTables
argument_list|,
name|txnWriteIdListString
argument_list|)
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getNonSharedLockedTables
parameter_list|()
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|driver
operator|.
name|getContext
argument_list|()
operator|.
name|getHiveLocks
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
comment|// Nothing to check
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|nonSharedLockedTables
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|HiveLock
name|lock
range|:
name|driver
operator|.
name|getContext
argument_list|()
operator|.
name|getHiveLocks
argument_list|()
control|)
block|{
if|if
condition|(
name|lock
operator|.
name|mayContainComponents
argument_list|()
condition|)
block|{
comment|// The lock may have multiple components, e.g., DbHiveLock, hence we need to check for each of them
for|for
control|(
name|LockComponent
name|lockComponent
range|:
name|lock
operator|.
name|getHiveLockComponents
argument_list|()
control|)
block|{
comment|// We only consider tables for which we hold either an exclusive or a shared write lock
if|if
condition|(
operator|(
name|lockComponent
operator|.
name|getType
argument_list|()
operator|==
name|LockType
operator|.
name|EXCLUSIVE
operator|||
name|lockComponent
operator|.
name|getType
argument_list|()
operator|==
name|LockType
operator|.
name|SHARED_WRITE
operator|)
operator|&&
name|lockComponent
operator|.
name|getTablename
argument_list|()
operator|!=
literal|null
operator|&&
name|lockComponent
operator|.
name|getDbname
argument_list|()
operator|!=
name|DbTxnManager
operator|.
name|GLOBAL_LOCKS
condition|)
block|{
name|nonSharedLockedTables
operator|.
name|add
argument_list|(
name|TableName
operator|.
name|getDbTable
argument_list|(
name|lockComponent
operator|.
name|getDbname
argument_list|()
argument_list|,
name|lockComponent
operator|.
name|getTablename
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// The lock has a single components, e.g., SimpleHiveLock or ZooKeeperHiveLock.
comment|// Pos 0 of lock paths array contains dbname, pos 1 contains tblname
if|if
condition|(
operator|(
name|lock
operator|.
name|getHiveLockMode
argument_list|()
operator|==
name|HiveLockMode
operator|.
name|EXCLUSIVE
operator|||
name|lock
operator|.
name|getHiveLockMode
argument_list|()
operator|==
name|HiveLockMode
operator|.
name|SEMI_SHARED
operator|)
operator|&&
name|lock
operator|.
name|getHiveLockObject
argument_list|()
operator|.
name|getPaths
argument_list|()
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|nonSharedLockedTables
operator|.
name|add
argument_list|(
name|TableName
operator|.
name|getDbTable
argument_list|(
name|lock
operator|.
name|getHiveLockObject
argument_list|()
operator|.
name|getPaths
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|lock
operator|.
name|getHiveLockObject
argument_list|()
operator|.
name|getPaths
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|nonSharedLockedTables
return|;
block|}
specifier|private
name|boolean
name|checkWriteIds
parameter_list|(
name|String
name|currentTxnString
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|nonSharedLockedTables
parameter_list|,
name|String
name|txnWriteIdListString
parameter_list|)
throws|throws
name|LockException
block|{
name|ValidTxnWriteIdList
name|txnWriteIdList
init|=
operator|new
name|ValidTxnWriteIdList
argument_list|(
name|txnWriteIdListString
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|writtenTables
init|=
name|getTables
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ValidTxnWriteIdList
name|currentTxnWriteIds
init|=
name|driverContext
operator|.
name|getTxnManager
argument_list|()
operator|.
name|getValidWriteIds
argument_list|(
name|getTransactionalTables
argument_list|(
name|writtenTables
argument_list|)
argument_list|,
name|currentTxnString
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tableInfo
range|:
name|writtenTables
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fullQNameForLock
init|=
name|TableName
operator|.
name|getDbTable
argument_list|(
name|tableInfo
operator|.
name|getValue
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|,
name|MetaStoreUtils
operator|.
name|encodeTableName
argument_list|(
name|tableInfo
operator|.
name|getValue
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|nonSharedLockedTables
operator|.
name|contains
argument_list|(
name|fullQNameForLock
argument_list|)
condition|)
block|{
comment|// Check if table is transactional
if|if
condition|(
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|tableInfo
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
comment|// Check that write id is still valid
if|if
condition|(
operator|!
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|txnWriteIdList
operator|.
name|getTableValidWriteIdList
argument_list|(
name|tableInfo
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|currentTxnWriteIds
operator|.
name|getTableValidWriteIdList
argument_list|(
name|tableInfo
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
comment|// Write id has changed, it is not valid anymore, we need to recompile
return|return
literal|false
return|;
block|}
block|}
name|nonSharedLockedTables
operator|.
name|remove
argument_list|(
name|fullQNameForLock
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|nonSharedLockedTables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Wrong state: non-shared locks contain information for tables that have not"
operator|+
literal|" been visited when trying to validate the locks from query tables.\n"
operator|+
literal|"Tables: "
operator|+
name|writtenTables
operator|.
name|keySet
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Remaining locks after check: "
operator|+
name|nonSharedLockedTables
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
comment|// It passes the test, it is valid
block|}
comment|/**    *  Write the current set of valid write ids for the operated acid tables into the configuration so    *  that it can be read by the input format.    */
name|ValidTxnWriteIdList
name|recordValidWriteIds
parameter_list|()
throws|throws
name|LockException
block|{
name|String
name|txnString
init|=
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|ValidTxnList
operator|.
name|VALID_TXNS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|txnString
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"calling recordValidWritsIdss() without initializing ValidTxnList "
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|driverContext
operator|.
name|getTxnManager
argument_list|()
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|ValidTxnWriteIdList
name|txnWriteIds
init|=
name|getTxnWriteIds
argument_list|(
name|txnString
argument_list|)
decl_stmt|;
name|setValidWriteIds
argument_list|(
name|txnWriteIds
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Encoding valid txn write ids info {} txnid: {}"
argument_list|,
name|txnWriteIds
operator|.
name|toString
argument_list|()
argument_list|,
name|driverContext
operator|.
name|getTxnManager
argument_list|()
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|txnWriteIds
return|;
block|}
specifier|private
name|ValidTxnWriteIdList
name|getTxnWriteIds
parameter_list|(
name|String
name|txnString
parameter_list|)
throws|throws
name|LockException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|txnTables
init|=
name|getTransactionalTables
argument_list|(
name|getTables
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|ValidTxnWriteIdList
name|txnWriteIds
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|driverContext
operator|.
name|getCompactionWriteIds
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// This is kludgy: here we need to read with Compactor's snapshot/txn rather than the snapshot of the current
comment|// {@code txnMgr}, in effect simulating a "flashback query" but can't actually share compactor's txn since it
comment|// would run multiple statements.  See more comments in {@link org.apache.hadoop.hive.ql.txn.compactor.Worker}
comment|// where it start the compactor txn*/
if|if
condition|(
name|txnTables
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|LockException
argument_list|(
literal|"Unexpected tables in compaction: "
operator|+
name|txnTables
argument_list|)
throw|;
block|}
name|txnWriteIds
operator|=
operator|new
name|ValidTxnWriteIdList
argument_list|(
name|driverContext
operator|.
name|getCompactorTxnId
argument_list|()
argument_list|)
expr_stmt|;
name|txnWriteIds
operator|.
name|addTableValidWriteIdList
argument_list|(
name|driverContext
operator|.
name|getCompactionWriteIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|txnWriteIds
operator|=
name|driverContext
operator|.
name|getTxnManager
argument_list|()
operator|.
name|getValidWriteIds
argument_list|(
name|txnTables
argument_list|,
name|txnString
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|driverContext
operator|.
name|getTxnType
argument_list|()
operator|==
name|TxnType
operator|.
name|READ_ONLY
operator|&&
operator|!
name|getTables
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Inferred transaction type '%s' doesn't conform to the actual query string '%s'"
argument_list|,
name|driverContext
operator|.
name|getTxnType
argument_list|()
argument_list|,
name|driverContext
operator|.
name|getQueryState
argument_list|()
operator|.
name|getQueryString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|txnWriteIds
return|;
block|}
specifier|private
name|void
name|setValidWriteIds
parameter_list|(
name|ValidTxnWriteIdList
name|txnWriteIds
parameter_list|)
block|{
name|driverContext
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
name|ValidTxnWriteIdList
operator|.
name|VALID_TABLES_WRITEIDS_KEY
argument_list|,
name|txnWriteIds
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// This is needed for {@link HiveConf.ConfVars.HIVEFETCHTASKCONVERSION} optimization which initializes JobConf
comment|// in FetchOperator before recordValidTxns() but this has to be done after locks are acquired to avoid race
comment|// conditions in ACID. This case is supported only for single source query.
name|Operator
argument_list|<
name|?
argument_list|>
name|source
init|=
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|getFetchTask
argument_list|()
operator|.
name|getWork
argument_list|()
operator|.
name|getSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|instanceof
name|TableScanOperator
condition|)
block|{
name|TableScanOperator
name|tsOp
init|=
operator|(
name|TableScanOperator
operator|)
name|source
decl_stmt|;
name|String
name|fullTableName
init|=
name|AcidUtils
operator|.
name|getFullTableName
argument_list|(
name|tsOp
operator|.
name|getConf
argument_list|()
operator|.
name|getDatabaseName
argument_list|()
argument_list|,
name|tsOp
operator|.
name|getConf
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|ValidWriteIdList
name|writeIdList
init|=
name|txnWriteIds
operator|.
name|getTableValidWriteIdList
argument_list|(
name|fullTableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tsOp
operator|.
name|getConf
argument_list|()
operator|.
name|isTranscationalTable
argument_list|()
operator|&&
operator|(
name|writeIdList
operator|==
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"ACID table: %s is missing from the ValidWriteIdList config: %s"
argument_list|,
name|fullTableName
argument_list|,
name|txnWriteIds
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|writeIdList
operator|!=
literal|null
condition|)
block|{
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|getFetchTask
argument_list|()
operator|.
name|setValidWriteIdList
argument_list|(
name|writeIdList
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|getTables
parameter_list|(
name|boolean
name|inputNeeded
parameter_list|,
name|boolean
name|outputNeeded
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tables
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputNeeded
condition|)
block|{
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|getInputs
argument_list|()
operator|.
name|forEach
argument_list|(
name|input
lambda|->
name|addTableFromEntity
argument_list|(
name|input
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outputNeeded
condition|)
block|{
name|driverContext
operator|.
name|getPlan
argument_list|()
operator|.
name|getOutputs
argument_list|()
operator|.
name|forEach
argument_list|(
name|output
lambda|->
name|addTableFromEntity
argument_list|(
name|output
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tables
return|;
block|}
specifier|private
name|void
name|addTableFromEntity
parameter_list|(
name|Entity
name|entity
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tables
parameter_list|)
block|{
name|Table
name|table
decl_stmt|;
switch|switch
condition|(
name|entity
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|TABLE
case|:
name|table
operator|=
name|entity
operator|.
name|getTable
argument_list|()
expr_stmt|;
break|break;
case|case
name|PARTITION
case|:
case|case
name|DUMMYPARTITION
case|:
name|table
operator|=
name|entity
operator|.
name|getPartition
argument_list|()
operator|.
name|getTable
argument_list|()
expr_stmt|;
break|break;
default|default:
return|return;
block|}
name|String
name|fullTableName
init|=
name|AcidUtils
operator|.
name|getFullTableName
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|tables
operator|.
name|put
argument_list|(
name|fullTableName
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getTransactionalTables
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tables
parameter_list|)
block|{
return|return
name|tables
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|entry
lambda|->
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getKey
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

