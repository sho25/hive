begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
operator|.
name|Direction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_comment
comment|/**  * Utility class for converting different direction description types.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|DirectionUtils
block|{
specifier|private
name|DirectionUtils
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"DirectionUtils should not be instantiated"
argument_list|)
throw|;
block|}
specifier|public
specifier|static
specifier|final
name|int
name|ASCENDING_CODE
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DESCENDING_CODE
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ASCENDING_DATA
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"code"
argument_list|,
name|ASCENDING_CODE
argument_list|,
literal|"sign"
argument_list|,
literal|'+'
argument_list|,
literal|"text"
argument_list|,
literal|"ASC"
argument_list|,
literal|"direction"
argument_list|,
name|Direction
operator|.
name|ASCENDING
argument_list|,
literal|"token"
argument_list|,
name|HiveParser
operator|.
name|TOK_TABSORTCOLNAMEASC
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|DESCENDING_DATA
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"code"
argument_list|,
name|DESCENDING_CODE
argument_list|,
literal|"sign"
argument_list|,
literal|'-'
argument_list|,
literal|"text"
argument_list|,
literal|"DESC"
argument_list|,
literal|"direction"
argument_list|,
name|Direction
operator|.
name|DESCENDING
argument_list|,
literal|"token"
argument_list|,
name|HiveParser
operator|.
name|TOK_TABSORTCOLNAMEDESC
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|codeToText
parameter_list|(
name|int
name|code
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|convert
argument_list|(
literal|"code"
argument_list|,
name|code
argument_list|,
literal|"text"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|char
name|codeToSign
parameter_list|(
name|int
name|code
parameter_list|)
block|{
return|return
operator|(
name|char
operator|)
name|convert
argument_list|(
literal|"code"
argument_list|,
name|code
argument_list|,
literal|"sign"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|tokenToCode
parameter_list|(
name|int
name|token
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|convert
argument_list|(
literal|"token"
argument_list|,
name|token
argument_list|,
literal|"code"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|signToCode
parameter_list|(
name|char
name|sign
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|convert
argument_list|(
literal|"sign"
argument_list|,
name|sign
argument_list|,
literal|"code"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Direction
name|codeToDirection
parameter_list|(
name|int
name|code
parameter_list|)
block|{
return|return
operator|(
name|Direction
operator|)
name|convert
argument_list|(
literal|"code"
argument_list|,
name|code
argument_list|,
literal|"direction"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Object
name|convert
parameter_list|(
name|String
name|typeFrom
parameter_list|,
name|Object
name|value
parameter_list|,
name|String
name|typeTo
parameter_list|)
block|{
name|Object
name|ascObject
init|=
name|ASCENDING_DATA
operator|.
name|get
argument_list|(
name|typeFrom
argument_list|)
decl_stmt|;
name|Object
name|descObject
init|=
name|DESCENDING_DATA
operator|.
name|get
argument_list|(
name|typeFrom
argument_list|)
decl_stmt|;
if|if
condition|(
name|ascObject
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|ASCENDING_DATA
operator|.
name|get
argument_list|(
name|typeTo
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|descObject
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|DESCENDING_DATA
operator|.
name|get
argument_list|(
name|typeTo
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The value "
operator|+
name|value
operator|+
literal|" isn not a valid value for "
operator|+
name|typeFrom
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

