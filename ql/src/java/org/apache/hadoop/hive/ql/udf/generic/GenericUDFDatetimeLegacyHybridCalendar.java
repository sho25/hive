begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedExpressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorUDFDatetimeLegacyHybridCalendarDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorUDFDatetimeLegacyHybridCalendarTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_comment
comment|/**  * GenericUDFDatetimeLegacyHybridCalendar.  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"datetime_legacy_hybrid_calendar"
argument_list|,
name|value
operator|=
literal|"_FUNC_(date/timestamp) - Converts a date/timestamp to legacy hybrid Julian-Gregorian "
operator|+
literal|"calendar\n"
operator|+
literal|"assuming that its internal days/milliseconds since epoch is calculated using the "
operator|+
literal|"proleptic Gregorian calendar."
argument_list|,
name|extended
operator|=
literal|"Converts a date/timestamp to legacy Gregorian-Julian hybrid calendar, i.e., "
operator|+
literal|"calendar that supports both\n"
operator|+
literal|"the Julian and Gregorian calendar systems with the support of a single discontinuity, "
operator|+
literal|"which corresponds by\n"
operator|+
literal|"default to the Gregorian date when the Gregorian calendar was instituted; assuming "
operator|+
literal|"that its internal\n"
operator|+
literal|"days/milliseconds since epoch is calculated using new proleptic Gregorian calendar "
operator|+
literal|"(ISO 8601 standard), which\n"
operator|+
literal|"is produced by extending the Gregorian calendar backward to dates preceding its "
operator|+
literal|"official introduction in 1582.\n"
argument_list|)
annotation|@
name|VectorizedExpressions
argument_list|(
block|{
name|VectorUDFDatetimeLegacyHybridCalendarTimestamp
operator|.
name|class
block|,
name|VectorUDFDatetimeLegacyHybridCalendarDate
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|GenericUDFDatetimeLegacyHybridCalendar
extends|extends
name|GenericUDF
block|{
specifier|private
specifier|transient
name|PrimitiveObjectInspector
name|inputOI
decl_stmt|;
specifier|private
specifier|transient
name|PrimitiveObjectInspector
name|resultOI
decl_stmt|;
specifier|private
specifier|transient
name|Converter
name|converter
decl_stmt|;
specifier|private
specifier|transient
name|SimpleDateFormat
name|formatter
decl_stmt|;
specifier|private
name|DateWritableV2
name|dateWritable
init|=
operator|new
name|DateWritableV2
argument_list|()
decl_stmt|;
specifier|private
name|TimestampWritableV2
name|timestampWritable
init|=
operator|new
name|TimestampWritableV2
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"The function datetime_legacy_hybrid_calendar requires at least one argument, got "
operator|+
name|arguments
operator|.
name|length
argument_list|)
throw|;
block|}
try|try
block|{
name|inputOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
expr_stmt|;
name|PrimitiveCategory
name|pc
init|=
name|inputOI
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|pc
condition|)
block|{
case|case
name|DATE
case|:
name|formatter
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setLenient
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|converter
operator|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|inputOI
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
argument_list|)
expr_stmt|;
name|resultOI
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|formatter
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setLenient
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|converter
operator|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|inputOI
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
argument_list|)
expr_stmt|;
name|resultOI
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"datetime_legacy_hybrid_calendar only allows date or timestamp types"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"The function datetime_legacy_hybrid_calendar takes only primitive types"
argument_list|)
throw|;
block|}
return|return
name|resultOI
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|input
init|=
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|input
operator|=
name|converter
operator|.
name|convert
argument_list|(
name|input
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|resultOI
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|DATE
case|:
name|Date
name|date
init|=
operator|(
operator|(
name|DateWritableV2
operator|)
name|input
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|java
operator|.
name|sql
operator|.
name|Date
name|oldDate
init|=
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|(
name|date
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
decl_stmt|;
name|dateWritable
operator|.
name|set
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
name|formatter
operator|.
name|format
argument_list|(
name|oldDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|dateWritable
return|;
case|case
name|TIMESTAMP
case|:
name|Timestamp
name|timestamp
init|=
operator|(
operator|(
name|TimestampWritableV2
operator|)
name|input
operator|)
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|Timestamp
name|adjustedTimestamp
init|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|formatter
operator|.
name|format
argument_list|(
operator|new
name|java
operator|.
name|sql
operator|.
name|Timestamp
argument_list|(
name|timestamp
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|adjustedTimestamp
operator|.
name|setNanos
argument_list|(
name|timestamp
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
name|timestampWritable
operator|.
name|set
argument_list|(
name|adjustedTimestamp
argument_list|)
expr_stmt|;
return|return
name|timestampWritable
return|;
default|default:
comment|// Should never happen.
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected type in evaluating datetime_legacy_hybrid_calendar: "
operator|+
name|inputOI
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
return|return
name|getStandardDisplayString
argument_list|(
name|getFuncName
argument_list|()
argument_list|,
name|children
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getFuncName
parameter_list|()
block|{
return|return
literal|"datetime_legacy_hybrid_calendar"
return|;
block|}
block|}
end_class

end_unit

