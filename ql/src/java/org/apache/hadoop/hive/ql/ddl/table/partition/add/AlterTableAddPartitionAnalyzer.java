begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|partition
operator|.
name|add
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLSemanticAnalyzerFactory
operator|.
name|DDLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|partition
operator|.
name|PartitionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MoveWork
import|;
end_import

begin_comment
comment|/**  * Analyzer for add partition commands for tables.  */
end_comment

begin_class
annotation|@
name|DDLType
argument_list|(
name|types
operator|=
name|HiveParser
operator|.
name|TOK_ALTERTABLE_ADDPARTS
argument_list|)
specifier|public
class|class
name|AlterTableAddPartitionAnalyzer
extends|extends
name|AbstractAddPartitionAnalyzer
block|{
specifier|public
name|AlterTableAddPartitionAnalyzer
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|expectView
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|allowLocation
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**    * Add partition for Transactional tables needs to add (copy/rename) the data so that it lands    * in a delta_x_x/ folder in the partition dir.    */
annotation|@
name|Override
specifier|protected
name|void
name|postProcess
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Table
name|table
parameter_list|,
name|AlterTableAddPartitionDesc
name|desc
parameter_list|,
name|Task
argument_list|<
name|DDLWork
argument_list|>
name|ddlTask
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
operator|!
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
return|return;
block|}
name|Long
name|writeId
init|=
literal|null
decl_stmt|;
name|int
name|stmtId
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AlterTableAddPartitionDesc
operator|.
name|PartitionDesc
name|partitonDesc
range|:
name|desc
operator|.
name|getPartitions
argument_list|()
control|)
block|{
if|if
condition|(
name|partitonDesc
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|AcidUtils
operator|.
name|validateAcidPartitionLocation
argument_list|(
name|partitonDesc
operator|.
name|getLocation
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|.
name|isIfNotExists
argument_list|()
condition|)
block|{
comment|//Don't add partition data if it already exists
name|Partition
name|oldPart
init|=
name|PartitionUtils
operator|.
name|getPartition
argument_list|(
name|db
argument_list|,
name|table
argument_list|,
name|partitonDesc
operator|.
name|getPartSpec
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldPart
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|writeId
operator|==
literal|null
condition|)
block|{
comment|// so that we only allocate a writeId if actually adding data (vs. adding a partition w/o data)
try|try
block|{
name|writeId
operator|=
name|getTxnMgr
argument_list|()
operator|.
name|getTableWriteId
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Failed to allocate the write id"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|stmtId
operator|=
name|getTxnMgr
argument_list|()
operator|.
name|getStmtIdAndIncrement
argument_list|()
expr_stmt|;
block|}
name|LoadTableDesc
name|loadTableWork
init|=
operator|new
name|LoadTableDesc
argument_list|(
operator|new
name|Path
argument_list|(
name|partitonDesc
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|Utilities
operator|.
name|getTableDesc
argument_list|(
name|table
argument_list|)
argument_list|,
name|partitonDesc
operator|.
name|getPartSpec
argument_list|()
argument_list|,
name|LoadTableDesc
operator|.
name|LoadFileType
operator|.
name|KEEP_EXISTING
argument_list|,
comment|//not relevant - creating new partition
name|writeId
argument_list|)
decl_stmt|;
name|loadTableWork
operator|.
name|setStmtId
argument_list|(
name|stmtId
argument_list|)
expr_stmt|;
name|loadTableWork
operator|.
name|setInheritTableSpecs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|partitonDesc
operator|.
name|setLocation
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getDataLocation
argument_list|()
argument_list|,
name|Warehouse
operator|.
name|makePartPath
argument_list|(
name|partitonDesc
operator|.
name|getPartSpec
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Could not determine partition path due to: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|Task
argument_list|<
name|MoveWork
argument_list|>
name|moveTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|MoveWork
argument_list|(
name|getInputs
argument_list|()
argument_list|,
name|getOutputs
argument_list|()
argument_list|,
name|loadTableWork
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
comment|//make sure to check format
literal|false
argument_list|)
argument_list|)
decl_stmt|;
comment|//is this right?
name|ddlTask
operator|.
name|addDependentTask
argument_list|(
name|moveTask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

