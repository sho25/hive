begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * UDFChr converts an integer into its ASCII equivalent.  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"char"
argument_list|,
name|value
operator|=
literal|"_FUNC_(str) - convert n where n : [0, 256) into the ascii equivalent as a varchar."
operator|+
literal|"If n is less than 0 return the empty string. If n> 256, return _FUNC_(n % 256)."
argument_list|,
name|extended
operator|=
literal|"Example:\n"
operator|+
literal|"> SELECT _FUNC_('48') FROM src LIMIT 1;\n"
operator|+
literal|"  '0'\n"
operator|+
literal|"> SELECT _FUNC_('65') FROM src LIMIT 1;\n"
operator|+
literal|"  'A'"
argument_list|)
specifier|public
class|class
name|UDFChr
extends|extends
name|UDF
block|{
specifier|private
specifier|final
name|Text
name|result
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|final
name|String
name|nulString
init|=
name|String
operator|.
name|valueOf
argument_list|(
literal|'\u0000'
argument_list|)
decl_stmt|;
specifier|public
name|Text
name|evaluate
parameter_list|(
name|LongWritable
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|evaluateInternal
argument_list|(
name|n
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Text
name|evaluate
parameter_list|(
name|DoubleWritable
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|evaluateInternal
argument_list|(
name|n
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Text
name|evaluateInternal
parameter_list|(
name|long
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|==
literal|0L
condition|)
block|{
name|result
operator|.
name|set
argument_list|(
name|nulString
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
if|if
condition|(
name|n
operator|<
literal|0L
condition|)
block|{
name|result
operator|.
name|set
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// Should only down-cast if within valid range.
return|return
name|evaluateInternal
argument_list|(
operator|(
name|short
operator|)
name|n
argument_list|)
return|;
block|}
specifier|private
name|Text
name|evaluateInternal
parameter_list|(
name|double
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|==
literal|0.0d
condition|)
block|{
name|result
operator|.
name|set
argument_list|(
name|nulString
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
if|if
condition|(
name|n
operator|<
literal|0.0d
condition|)
block|{
name|result
operator|.
name|set
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// Should only down-cast and elimination precision if within valid range.
return|return
name|evaluateInternal
argument_list|(
operator|(
name|short
operator|)
name|n
argument_list|)
return|;
block|}
specifier|private
name|Text
name|evaluateInternal
parameter_list|(
name|short
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|>
literal|255
condition|)
block|{
name|n
operator|=
call|(
name|short
call|)
argument_list|(
name|n
operator|%
literal|256
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|set
argument_list|(
name|nulString
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|result
operator|.
name|set
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|result
operator|.
name|set
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|char
operator|)
name|n
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

