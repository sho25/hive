begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|coordinator
operator|.
name|LlapCoordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|impl
operator|.
name|LlapProtocolClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|security
operator|.
name|LlapTokenClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|security
operator|.
name|LlapTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tez
operator|.
name|LlapProtocolClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
operator|.
name|LlapContainerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
operator|.
name|LlapTaskCommunicator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
operator|.
name|LlapTaskSchedulerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|client
operator|.
name|TezClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|TezUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|PreWarmVertex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|SessionNotRunning
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|UserPayload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|mapreduce
operator|.
name|hadoop
operator|.
name|MRHelpers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|serviceplugins
operator|.
name|api
operator|.
name|ContainerLauncherDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|serviceplugins
operator|.
name|api
operator|.
name|ServicePluginsDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|serviceplugins
operator|.
name|api
operator|.
name|TaskCommunicatorDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|serviceplugins
operator|.
name|api
operator|.
name|TaskSchedulerDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|monitoring
operator|.
name|TezJobMonitor
import|;
end_import

begin_comment
comment|/**  * Holds session state related to Tez  */
end_comment

begin_class
specifier|public
class|class
name|TezSessionState
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TezSessionState
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEZ_DIR
init|=
literal|"_tez_session_dir"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LLAP_SERVICE
init|=
literal|"LLAP"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LLAP_SCHEDULER
init|=
name|LlapTaskSchedulerService
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LLAP_LAUNCHER
init|=
name|LlapContainerLauncher
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LLAP_TASK_COMMUNICATOR
init|=
name|LlapTaskCommunicator
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|Path
name|tezScratchDir
decl_stmt|;
specifier|private
name|LocalResource
name|appJarLr
decl_stmt|;
specifier|private
name|TezClient
name|session
decl_stmt|;
specifier|private
name|Future
argument_list|<
name|TezClient
argument_list|>
name|sessionFuture
decl_stmt|;
comment|/** Console used for user feedback during async session opening. */
specifier|private
name|LogHelper
name|console
decl_stmt|;
specifier|private
name|String
name|sessionId
decl_stmt|;
specifier|private
specifier|final
name|DagUtils
name|utils
decl_stmt|;
specifier|private
name|String
name|queueName
decl_stmt|;
specifier|private
name|boolean
name|defaultQueue
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|user
decl_stmt|;
specifier|private
name|AtomicReference
argument_list|<
name|String
argument_list|>
name|ownerThread
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|additionalFilesNotFromConf
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|LocalResource
argument_list|>
name|localizedResources
init|=
operator|new
name|HashSet
argument_list|<
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|doAsEnabled
decl_stmt|;
comment|/**    * Constructor. We do not automatically connect, because we only want to    * load tez classes when the user has tez installed.    */
specifier|public
name|TezSessionState
parameter_list|(
name|DagUtils
name|utils
parameter_list|)
block|{
name|this
operator|.
name|utils
operator|=
name|utils
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"sessionId="
operator|+
name|sessionId
operator|+
literal|", queueName="
operator|+
name|queueName
operator|+
literal|", user="
operator|+
name|user
operator|+
literal|", doAs="
operator|+
name|doAsEnabled
operator|+
literal|", isOpen="
operator|+
name|isOpen
argument_list|()
operator|+
literal|", isDefault="
operator|+
name|defaultQueue
return|;
block|}
comment|/**    * Constructor. We do not automatically connect, because we only want to    * load tez classes when the user has tez installed.    */
specifier|public
name|TezSessionState
parameter_list|(
name|String
name|sessionId
parameter_list|)
block|{
name|this
argument_list|(
name|DagUtils
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|sessionId
operator|=
name|sessionId
expr_stmt|;
block|}
specifier|public
name|boolean
name|isOpening
parameter_list|()
block|{
if|if
condition|(
name|session
operator|!=
literal|null
operator|||
name|sessionFuture
operator|==
literal|null
condition|)
return|return
literal|false
return|;
try|try
block|{
name|session
operator|=
name|sessionFuture
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isOpen
parameter_list|()
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|sessionFuture
operator|==
literal|null
condition|)
return|return
literal|false
return|;
try|try
block|{
name|session
operator|=
name|sessionFuture
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
decl||
name|CancellationException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Get all open sessions. Only used to clean up at shutdown.    * @return List<TezSessionState>    */
specifier|public
specifier|static
name|String
name|makeSessionId
parameter_list|()
block|{
return|return
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|open
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|URISyntaxException
throws|,
name|TezException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|noFiles
init|=
literal|null
decl_stmt|;
name|open
argument_list|(
name|conf
argument_list|,
name|noFiles
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a tez session. A session is tied to either a cli/hs2 session. You can    * submit multiple DAGs against a session (as long as they are executed serially).    * @throws IOException    * @throws URISyntaxException    * @throws LoginException    * @throws TezException    * @throws InterruptedException    */
specifier|public
name|void
name|open
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
index|[]
name|additionalFiles
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|IllegalArgumentException
throws|,
name|URISyntaxException
throws|,
name|TezException
block|{
name|openInternal
argument_list|(
name|conf
argument_list|,
name|setFromArray
argument_list|(
name|additionalFiles
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|setFromArray
parameter_list|(
name|String
index|[]
name|additionalFiles
parameter_list|)
block|{
if|if
condition|(
name|additionalFiles
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Set
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|originalFile
range|:
name|additionalFiles
control|)
block|{
name|files
operator|.
name|add
argument_list|(
name|originalFile
argument_list|)
expr_stmt|;
block|}
return|return
name|files
return|;
block|}
specifier|public
name|void
name|beginOpen
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
index|[]
name|additionalFiles
parameter_list|,
name|LogHelper
name|console
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|IllegalArgumentException
throws|,
name|URISyntaxException
throws|,
name|TezException
block|{
name|openInternal
argument_list|(
name|conf
argument_list|,
name|setFromArray
argument_list|(
name|additionalFiles
argument_list|)
argument_list|,
literal|true
argument_list|,
name|console
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|open
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|additionalFiles
parameter_list|,
name|Path
name|scratchDir
parameter_list|)
throws|throws
name|LoginException
throws|,
name|IOException
throws|,
name|URISyntaxException
throws|,
name|TezException
block|{
name|openInternal
argument_list|(
name|conf
argument_list|,
name|additionalFiles
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|scratchDir
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|openInternal
parameter_list|(
specifier|final
name|HiveConf
name|conf
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|additionalFiles
parameter_list|,
name|boolean
name|isAsync
parameter_list|,
name|LogHelper
name|console
parameter_list|,
name|Path
name|scratchDir
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|IllegalArgumentException
throws|,
name|URISyntaxException
throws|,
name|TezException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
comment|// TODO Why is the queue name set again. It has already been setup via setQueueName. Do only one of the two.
name|String
name|confQueueName
init|=
name|conf
operator|.
name|get
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_QUEUE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|queueName
operator|!=
literal|null
operator|&&
operator|!
name|queueName
operator|.
name|equals
argument_list|(
name|confQueueName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Resetting a queue name that was already set: was "
operator|+
name|queueName
operator|+
literal|", now "
operator|+
name|confQueueName
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|queueName
operator|=
name|confQueueName
expr_stmt|;
name|this
operator|.
name|doAsEnabled
operator|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_ENABLE_DOAS
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|llapMode
init|=
literal|"llap"
operator|.
name|equalsIgnoreCase
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_MODE
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO This - at least for the session pool - will always be the hive user. How does doAs above this affect things ?
name|UserGroupInformation
name|ugi
init|=
name|Utils
operator|.
name|getUGI
argument_list|()
decl_stmt|;
name|user
operator|=
name|ugi
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"User of session id "
operator|+
name|sessionId
operator|+
literal|" is "
operator|+
name|user
argument_list|)
expr_stmt|;
comment|// create the tez tmp dir
name|tezScratchDir
operator|=
name|scratchDir
operator|==
literal|null
condition|?
name|createTezDir
argument_list|(
name|sessionId
argument_list|)
else|:
name|scratchDir
expr_stmt|;
name|additionalFilesNotFromConf
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|additionalFiles
operator|!=
literal|null
condition|)
block|{
name|additionalFilesNotFromConf
operator|.
name|addAll
argument_list|(
name|additionalFiles
argument_list|)
expr_stmt|;
block|}
name|refreshLocalResourcesFromConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// unless already installed on all the cluster nodes, we'll have to
comment|// localize hive-exec.jar as well.
name|appJarLr
operator|=
name|createJarLocalResource
argument_list|(
name|utils
operator|.
name|getExecJarPathLocal
argument_list|()
argument_list|)
expr_stmt|;
comment|// configuration for the application master
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|commonLocalResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
decl_stmt|;
name|commonLocalResources
operator|.
name|put
argument_list|(
name|utils
operator|.
name|getBaseName
argument_list|(
name|appJarLr
argument_list|)
argument_list|,
name|appJarLr
argument_list|)
expr_stmt|;
for|for
control|(
name|LocalResource
name|lr
range|:
name|localizedResources
control|)
block|{
name|commonLocalResources
operator|.
name|put
argument_list|(
name|utils
operator|.
name|getBaseName
argument_list|(
name|lr
argument_list|)
argument_list|,
name|lr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|llapMode
condition|)
block|{
comment|// localize llap client jars
name|addJarLRByClass
argument_list|(
name|LlapTaskSchedulerService
operator|.
name|class
argument_list|,
name|commonLocalResources
argument_list|)
expr_stmt|;
name|addJarLRByClass
argument_list|(
name|LlapProtocolClientImpl
operator|.
name|class
argument_list|,
name|commonLocalResources
argument_list|)
expr_stmt|;
name|addJarLRByClass
argument_list|(
name|LlapProtocolClientProxy
operator|.
name|class
argument_list|,
name|commonLocalResources
argument_list|)
expr_stmt|;
name|addJarLRByClassName
argument_list|(
literal|"org.apache.hadoop.registry.client.api.RegistryOperations"
argument_list|,
name|commonLocalResources
argument_list|)
expr_stmt|;
block|}
comment|// Create environment for AM.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|amEnv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|MRHelpers
operator|.
name|updateEnvBasedOnMRAMEnv
argument_list|(
name|conf
argument_list|,
name|amEnv
argument_list|)
expr_stmt|;
comment|// and finally we're ready to create and start the session
comment|// generate basic tez config
specifier|final
name|TezConfiguration
name|tezConfig
init|=
operator|new
name|TezConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// set up the staging directory to use
name|tezConfig
operator|.
name|set
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_AM_STAGING_DIR
argument_list|,
name|tezScratchDir
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|stripHiddenConfigurations
argument_list|(
name|tezConfig
argument_list|)
expr_stmt|;
name|ServicePluginsDescriptor
name|servicePluginsDescriptor
decl_stmt|;
name|Credentials
name|llapCredentials
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|llapMode
condition|)
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|llapCredentials
operator|=
operator|new
name|Credentials
argument_list|()
expr_stmt|;
name|llapCredentials
operator|.
name|addToken
argument_list|(
name|LlapTokenIdentifier
operator|.
name|KIND_NAME
argument_list|,
name|getLlapToken
argument_list|(
name|user
argument_list|,
name|tezConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO Change this to not serialize the entire Configuration - minor.
name|UserPayload
name|servicePluginPayload
init|=
name|TezUtils
operator|.
name|createUserPayloadFromConf
argument_list|(
name|tezConfig
argument_list|)
decl_stmt|;
comment|// we need plugins to handle llap and uber mode
name|servicePluginsDescriptor
operator|=
name|ServicePluginsDescriptor
operator|.
name|create
argument_list|(
literal|true
argument_list|,
operator|new
name|TaskSchedulerDescriptor
index|[]
block|{
name|TaskSchedulerDescriptor
operator|.
name|create
argument_list|(
name|LLAP_SERVICE
argument_list|,
name|LLAP_SCHEDULER
argument_list|)
operator|.
name|setUserPayload
argument_list|(
name|servicePluginPayload
argument_list|)
block|}
argument_list|,
operator|new
name|ContainerLauncherDescriptor
index|[]
block|{
name|ContainerLauncherDescriptor
operator|.
name|create
argument_list|(
name|LLAP_SERVICE
argument_list|,
name|LLAP_LAUNCHER
argument_list|)
block|}
argument_list|,
operator|new
name|TaskCommunicatorDescriptor
index|[]
block|{
name|TaskCommunicatorDescriptor
operator|.
name|create
argument_list|(
name|LLAP_SERVICE
argument_list|,
name|LLAP_TASK_COMMUNICATOR
argument_list|)
operator|.
name|setUserPayload
argument_list|(
name|servicePluginPayload
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|servicePluginsDescriptor
operator|=
name|ServicePluginsDescriptor
operator|.
name|create
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// container prewarming. tell the am how many containers we need
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_PREWARM_ENABLED
argument_list|)
condition|)
block|{
name|int
name|n
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_PREWARM_NUM_CONTAINERS
argument_list|)
decl_stmt|;
name|n
operator|=
name|Math
operator|.
name|max
argument_list|(
name|tezConfig
operator|.
name|getInt
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_AM_SESSION_MIN_HELD_CONTAINERS
argument_list|,
name|TezConfiguration
operator|.
name|TEZ_AM_SESSION_MIN_HELD_CONTAINERS_DEFAULT
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|tezConfig
operator|.
name|setInt
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_AM_SESSION_MIN_HELD_CONTAINERS
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
specifier|final
name|TezClient
name|session
init|=
name|TezClient
operator|.
name|newBuilder
argument_list|(
literal|"HIVE-"
operator|+
name|sessionId
argument_list|,
name|tezConfig
argument_list|)
operator|.
name|setIsSession
argument_list|(
literal|true
argument_list|)
operator|.
name|setLocalResources
argument_list|(
name|commonLocalResources
argument_list|)
operator|.
name|setCredentials
argument_list|(
name|llapCredentials
argument_list|)
operator|.
name|setServicePluginDescriptor
argument_list|(
name|servicePluginsDescriptor
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Opening new Tez Session (id: "
operator|+
name|sessionId
operator|+
literal|", scratch dir: "
operator|+
name|tezScratchDir
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|TezJobMonitor
operator|.
name|initShutdownHook
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isAsync
condition|)
block|{
name|startSessionAndContainers
argument_list|(
name|session
argument_list|,
name|conf
argument_list|,
name|commonLocalResources
argument_list|,
name|tezConfig
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
block|}
else|else
block|{
name|FutureTask
argument_list|<
name|TezClient
argument_list|>
name|sessionFuture
init|=
operator|new
name|FutureTask
argument_list|<>
argument_list|(
operator|new
name|Callable
argument_list|<
name|TezClient
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TezClient
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|startSessionAndContainers
argument_list|(
name|session
argument_list|,
name|conf
argument_list|,
name|commonLocalResources
argument_list|,
name|tezConfig
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to start Tez session"
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|t
operator|instanceof
name|Exception
operator|)
condition|?
operator|(
name|Exception
operator|)
name|t
else|:
operator|new
name|Exception
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
name|sessionFuture
argument_list|,
literal|"Tez session start thread"
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// We assume here nobody will try to get session before open() returns.
name|this
operator|.
name|console
operator|=
name|console
expr_stmt|;
name|this
operator|.
name|sessionFuture
operator|=
name|sessionFuture
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Token
argument_list|<
name|LlapTokenIdentifier
argument_list|>
name|getLlapToken
parameter_list|(
name|String
name|user
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: parts of this should be moved out of TezSession to reuse the clients, but there's
comment|//       no good place for that right now (HIVE-13698).
name|SessionState
name|session
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|boolean
name|isInHs2
init|=
name|session
operator|!=
literal|null
operator|&&
name|session
operator|.
name|isHiveServerQuery
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|LlapTokenIdentifier
argument_list|>
name|token
init|=
literal|null
decl_stmt|;
comment|// For Tez, we don't use appId to distinguish the tokens.
name|LlapCoordinator
name|coordinator
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isInHs2
condition|)
block|{
comment|// We are in HS2, get the token locally.
comment|// TODO: coordinator should be passed in; HIVE-13698. Must be initialized for now.
name|coordinator
operator|=
name|LlapCoordinator
operator|.
name|getInstance
argument_list|()
expr_stmt|;
if|if
condition|(
name|coordinator
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"LLAP coordinator not initialized; cannot get LLAP tokens"
argument_list|)
throw|;
block|}
comment|// Signing is not required for Tez.
name|token
operator|=
name|coordinator
operator|.
name|getLocalTokenClient
argument_list|(
name|conf
argument_list|,
name|user
argument_list|)
operator|.
name|createToken
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We are not in HS2; always create a new client for now.
name|token
operator|=
operator|new
name|LlapTokenClient
argument_list|(
name|conf
argument_list|)
operator|.
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Obtained a LLAP token: "
operator|+
name|token
argument_list|)
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
specifier|private
name|TezClient
name|startSessionAndContainers
parameter_list|(
name|TezClient
name|session
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|commonLocalResources
parameter_list|,
name|TezConfiguration
name|tezConfig
parameter_list|,
name|boolean
name|isOnThread
parameter_list|)
throws|throws
name|TezException
throws|,
name|IOException
block|{
name|session
operator|.
name|start
argument_list|()
expr_stmt|;
name|boolean
name|isSuccessful
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_PREWARM_ENABLED
argument_list|)
condition|)
block|{
name|int
name|n
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_PREWARM_NUM_CONTAINERS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Prewarming "
operator|+
name|n
operator|+
literal|" containers  (id: "
operator|+
name|sessionId
operator|+
literal|", scratch dir: "
operator|+
name|tezScratchDir
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|PreWarmVertex
name|prewarmVertex
init|=
name|utils
operator|.
name|createPreWarmVertex
argument_list|(
name|tezConfig
argument_list|,
name|n
argument_list|,
name|commonLocalResources
argument_list|)
decl_stmt|;
try|try
block|{
name|session
operator|.
name|preWarm
argument_list|(
name|prewarmVertex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isOnThread
operator|&&
name|ie
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Interrupted while waiting"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Hive Prewarm threw an exception "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ie
throw|;
block|}
block|}
block|}
try|try
block|{
name|session
operator|.
name|waitTillReady
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
if|if
condition|(
name|isOnThread
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
name|ie
argument_list|)
throw|;
comment|//ignore
block|}
name|isSuccessful
operator|=
literal|true
expr_stmt|;
comment|// sessionState.getQueueName() comes from cluster wide configured queue names.
comment|// sessionState.getConf().get("tez.queue.name") is explicitly set by user in a session.
comment|// TezSessionPoolManager sets tez.queue.name if user has specified one or use the one from
comment|// cluster wide queue names.
comment|// There is no way to differentiate how this was set (user vs system).
comment|// Unset this after opening the session so that reopening of session uses the correct queue
comment|// names i.e, if client has not died and if the user has explicitly set a queue name
comment|// then reopened session will use user specified queue name else default cluster queue names.
name|conf
operator|.
name|unset
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_QUEUE_NAME
argument_list|)
expr_stmt|;
return|return
name|session
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|isOnThread
operator|&&
operator|!
name|isSuccessful
condition|)
block|{
name|closeAndIgnoreExceptions
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|closeAndIgnoreExceptions
parameter_list|(
name|TezClient
name|session
parameter_list|)
block|{
try|try
block|{
name|session
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SessionNotRunning
name|nr
parameter_list|)
block|{
comment|// Ignore.
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|TezException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to close Tez session after failure to initialize: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|endOpen
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|CancellationException
block|{
if|if
condition|(
name|this
operator|.
name|session
operator|!=
literal|null
operator|||
name|this
operator|.
name|sessionFuture
operator|==
literal|null
condition|)
return|return;
try|try
block|{
name|this
operator|.
name|session
operator|=
name|this
operator|.
name|sessionFuture
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|refreshLocalResourcesFromConf
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|IllegalArgumentException
throws|,
name|URISyntaxException
throws|,
name|TezException
block|{
name|String
name|dir
init|=
name|tezScratchDir
operator|.
name|toString
argument_list|()
decl_stmt|;
name|localizedResources
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// these are local resources set through add file, jar, etc
name|List
argument_list|<
name|LocalResource
argument_list|>
name|lrs
init|=
name|utils
operator|.
name|localizeTempFilesFromConf
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|lrs
operator|!=
literal|null
condition|)
block|{
name|localizedResources
operator|.
name|addAll
argument_list|(
name|lrs
argument_list|)
expr_stmt|;
block|}
comment|// these are local resources that are set through the mr "tmpjars" property
name|List
argument_list|<
name|LocalResource
argument_list|>
name|handlerLr
init|=
name|utils
operator|.
name|localizeTempFiles
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|,
name|additionalFilesNotFromConf
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|additionalFilesNotFromConf
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|handlerLr
operator|!=
literal|null
condition|)
block|{
name|localizedResources
operator|.
name|addAll
argument_list|(
name|handlerLr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|hasResources
parameter_list|(
name|String
index|[]
name|localAmResources
parameter_list|)
block|{
if|if
condition|(
name|localAmResources
operator|==
literal|null
operator|||
name|localAmResources
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|additionalFilesNotFromConf
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|String
name|s
range|:
name|localAmResources
control|)
block|{
if|if
condition|(
operator|!
name|additionalFilesNotFromConf
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Close a tez session. Will cleanup any tez/am related resources. After closing a session no    * further DAGs can be executed against it.    *    * @param keepTmpDir    *          whether or not to remove the scratch dir at the same time.    * @throws Exception    */
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|keepTmpDir
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing Tez Session"
argument_list|)
expr_stmt|;
name|closeClient
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sessionFuture
operator|!=
literal|null
condition|)
block|{
name|sessionFuture
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TezClient
name|asyncSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|asyncSession
operator|=
name|sessionFuture
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// In case it was done and noone looked at it.
block|}
catch|catch
parameter_list|(
name|ExecutionException
decl||
name|CancellationException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// ignore
block|}
if|if
condition|(
name|asyncSession
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing Tez Session"
argument_list|)
expr_stmt|;
name|closeClient
argument_list|(
name|asyncSession
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|keepTmpDir
condition|)
block|{
name|cleanupScratchDir
argument_list|()
expr_stmt|;
block|}
name|session
operator|=
literal|null
expr_stmt|;
name|sessionFuture
operator|=
literal|null
expr_stmt|;
name|console
operator|=
literal|null
expr_stmt|;
name|tezScratchDir
operator|=
literal|null
expr_stmt|;
name|conf
operator|=
literal|null
expr_stmt|;
name|appJarLr
operator|=
literal|null
expr_stmt|;
name|additionalFilesNotFromConf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|localizedResources
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAdditionalFilesNotFromConf
parameter_list|()
block|{
return|return
name|additionalFilesNotFromConf
return|;
block|}
specifier|private
name|void
name|closeClient
parameter_list|(
name|TezClient
name|client
parameter_list|)
throws|throws
name|TezException
throws|,
name|IOException
block|{
try|try
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SessionNotRunning
name|nr
parameter_list|)
block|{
comment|// ignore
block|}
block|}
specifier|public
name|void
name|cleanupScratchDir
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|tezScratchDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|tezScratchDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tezScratchDir
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getSessionId
parameter_list|()
block|{
return|return
name|sessionId
return|;
block|}
specifier|public
name|TezClient
name|getSession
parameter_list|()
block|{
if|if
condition|(
name|session
operator|==
literal|null
operator|&&
name|sessionFuture
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|sessionFuture
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Waiting for Tez session and AM to be ready..."
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|session
operator|=
name|sessionFuture
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Interrupted while waiting for the session"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Failed to get session"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"Cancelled while waiting for the session"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
name|session
return|;
block|}
specifier|public
name|Path
name|getTezScratchDir
parameter_list|()
block|{
return|return
name|tezScratchDir
return|;
block|}
specifier|public
name|LocalResource
name|getAppJarLr
parameter_list|()
block|{
return|return
name|appJarLr
return|;
block|}
comment|/**    * createTezDir creates a temporary directory in the scratchDir folder to    * be used with Tez. Assumes scratchDir exists.    */
specifier|private
name|Path
name|createTezDir
parameter_list|(
name|String
name|sessionId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// tez needs its own scratch dir (per session)
name|Path
name|tezDir
init|=
operator|new
name|Path
argument_list|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getHdfsScratchDirURIString
argument_list|()
argument_list|,
name|TEZ_DIR
argument_list|)
decl_stmt|;
name|tezDir
operator|=
operator|new
name|Path
argument_list|(
name|tezDir
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|tezDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FsPermission
name|fsPermission
init|=
operator|new
name|FsPermission
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SCRATCHDIRPERMISSION
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|tezDir
argument_list|,
name|fsPermission
argument_list|)
expr_stmt|;
comment|// Make sure the path is normalized (we expect validation to pass since we just created it).
name|tezDir
operator|=
name|DagUtils
operator|.
name|validateTargetDir
argument_list|(
name|tezDir
argument_list|,
name|conf
argument_list|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
comment|// Directory removal will be handled by cleanup at the SessionState level.
return|return
name|tezDir
return|;
block|}
comment|/**    * Returns a local resource representing a jar.    * This resource will be used to execute the plan on the cluster.    * @param localJarPath Local path to the jar to be localized.    * @return LocalResource corresponding to the localized hive exec resource.    * @throws IOException when any file system related call fails.    * @throws LoginException when we are unable to determine the user.    * @throws URISyntaxException when current jar location cannot be determined.    */
specifier|private
name|LocalResource
name|createJarLocalResource
parameter_list|(
name|String
name|localJarPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|IllegalArgumentException
throws|,
name|FileNotFoundException
block|{
comment|// TODO Reduce the number of lookups that happen here. This shouldn't go to HDFS for each call.
comment|// The hiveJarDir can be determined once per client.
name|FileStatus
name|destDirStatus
init|=
name|utils
operator|.
name|getHiveJarDirectory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
assert|assert
name|destDirStatus
operator|!=
literal|null
assert|;
name|Path
name|destDirPath
init|=
name|destDirStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
name|localFile
init|=
operator|new
name|Path
argument_list|(
name|localJarPath
argument_list|)
decl_stmt|;
name|String
name|sha
init|=
name|getSha
argument_list|(
name|localFile
argument_list|)
decl_stmt|;
name|String
name|destFileName
init|=
name|localFile
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Now, try to find the file based on SHA and name. Currently we require exact name match.
comment|// We could also allow cutting off versions and other stuff provided that SHA matches...
name|destFileName
operator|=
name|FilenameUtils
operator|.
name|removeExtension
argument_list|(
name|destFileName
argument_list|)
operator|+
literal|"-"
operator|+
name|sha
operator|+
name|FilenameUtils
operator|.
name|EXTENSION_SEPARATOR
operator|+
name|FilenameUtils
operator|.
name|getExtension
argument_list|(
name|destFileName
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The destination file name for ["
operator|+
name|localJarPath
operator|+
literal|"] is "
operator|+
name|destFileName
argument_list|)
expr_stmt|;
block|}
comment|// TODO: if this method is ever called on more than one jar, getting the dir and the
comment|//       list need to be refactored out to be done only once.
name|Path
name|destFile
init|=
operator|new
name|Path
argument_list|(
name|destDirPath
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|destFileName
argument_list|)
decl_stmt|;
return|return
name|utils
operator|.
name|localizeResource
argument_list|(
name|localFile
argument_list|,
name|destFile
argument_list|,
name|LocalResourceType
operator|.
name|FILE
argument_list|,
name|conf
argument_list|)
return|;
block|}
specifier|private
name|void
name|addJarLRByClassName
parameter_list|(
name|String
name|className
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|lrMap
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
try|try
block|{
name|clazz
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot find "
operator|+
name|className
operator|+
literal|" in classpath"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|addJarLRByClass
argument_list|(
name|clazz
argument_list|,
name|lrMap
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addJarLRByClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|lrMap
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
block|{
specifier|final
name|File
name|jar
init|=
operator|new
name|File
argument_list|(
name|Utilities
operator|.
name|jarFinderGetJar
argument_list|(
name|clazz
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|LocalResource
name|jarLr
init|=
name|createJarLocalResource
argument_list|(
name|jar
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
argument_list|)
decl_stmt|;
name|lrMap
operator|.
name|put
argument_list|(
name|utils
operator|.
name|getBaseName
argument_list|(
name|jarLr
argument_list|)
argument_list|,
name|jarLr
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getSha
parameter_list|(
name|Path
name|localFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalArgumentException
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|is
operator|=
name|localFs
operator|.
name|open
argument_list|(
name|localFile
argument_list|)
expr_stmt|;
return|return
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|is
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setQueueName
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
block|}
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|queueName
return|;
block|}
specifier|public
name|void
name|setDefault
parameter_list|()
block|{
name|defaultQueue
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDefault
parameter_list|()
block|{
return|return
name|defaultQueue
return|;
block|}
specifier|public
name|HiveConf
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
name|List
argument_list|<
name|LocalResource
argument_list|>
name|getLocalizedResources
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|localizedResources
argument_list|)
return|;
block|}
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
specifier|public
name|boolean
name|getDoAsEnabled
parameter_list|()
block|{
return|return
name|doAsEnabled
return|;
block|}
comment|/** Mark session as free for use from TezTask, for safety/debugging purposes. */
specifier|public
name|void
name|markFree
parameter_list|()
block|{
if|if
condition|(
name|ownerThread
operator|.
name|getAndSet
argument_list|(
literal|null
argument_list|)
operator|==
literal|null
condition|)
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Not in use"
argument_list|)
throw|;
block|}
comment|/** Mark session as being in use from TezTask, for safety/debugging purposes. */
specifier|public
name|void
name|markInUse
parameter_list|()
block|{
name|String
name|newName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
do|do
block|{
name|String
name|oldName
init|=
name|ownerThread
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldName
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Tez session is already in use from "
operator|+
name|oldName
operator|+
literal|"; cannot use from "
operator|+
name|newName
argument_list|)
throw|;
block|}
block|}
do|while
condition|(
operator|!
name|ownerThread
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|newName
argument_list|)
condition|)
do|;
block|}
block|}
end_class

end_unit

