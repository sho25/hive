begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_comment
comment|/**  * Base class for comparison UDF's (Greatest and Least).  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|GenericUDFBaseNwayCompare
extends|extends
name|GenericUDF
block|{
specifier|protected
specifier|transient
name|ObjectInspector
index|[]
name|argumentOIs
decl_stmt|;
specifier|protected
specifier|transient
name|Converter
index|[]
name|converters
decl_stmt|;
specifier|protected
specifier|transient
name|ObjectInspector
name|resultOI
decl_stmt|;
comment|/**    * @return desired comparison (positive for greatest, negative for least)    */
specifier|abstract
name|int
name|getOrder
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
name|getFuncName
argument_list|()
operator|+
literal|" requires at least 2 arguments, got "
operator|+
name|arguments
operator|.
name|length
argument_list|)
throw|;
block|}
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
name|getFuncName
argument_list|()
operator|+
literal|" only takes primitive types, got "
operator|+
name|arguments
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
name|argumentOIs
operator|=
name|arguments
expr_stmt|;
name|converters
operator|=
operator|new
name|Converter
index|[
name|arguments
operator|.
name|length
index|]
expr_stmt|;
name|TypeInfo
name|commonInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|arguments
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|PrimitiveTypeInfo
name|currInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|arguments
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|commonInfo
operator|=
name|FunctionRegistry
operator|.
name|getCommonClassForComparison
argument_list|(
name|commonInfo
argument_list|,
name|currInfo
argument_list|)
expr_stmt|;
block|}
name|resultOI
operator|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
operator|(
name|commonInfo
operator|==
literal|null
operator|)
condition|?
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
else|:
name|commonInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|converters
index|[
name|i
index|]
operator|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|arguments
index|[
name|i
index|]
argument_list|,
name|resultOI
argument_list|)
expr_stmt|;
block|}
return|return
name|resultOI
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|GenericUDF
operator|.
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|maxV
init|=
literal|null
decl_stmt|;
comment|//for case of conversion, convert both values to common type and then compare.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|ai
init|=
name|arguments
index|[
name|i
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ai
operator|==
literal|null
condition|)
block|{
comment|//NULL if any of the args are nulls
return|return
literal|null
return|;
block|}
if|if
condition|(
name|maxV
operator|==
literal|null
condition|)
block|{
comment|//First non-null item.
name|maxV
operator|=
name|converters
index|[
name|i
index|]
operator|.
name|convert
argument_list|(
name|ai
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Object
name|converted
init|=
name|converters
index|[
name|i
index|]
operator|.
name|convert
argument_list|(
name|ai
argument_list|)
decl_stmt|;
if|if
condition|(
name|converted
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|result
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|converted
argument_list|,
name|resultOI
argument_list|,
name|maxV
argument_list|,
name|resultOI
argument_list|)
decl_stmt|;
if|if
condition|(
name|getOrder
argument_list|()
operator|*
name|result
operator|>
literal|0
condition|)
block|{
name|maxV
operator|=
name|converted
expr_stmt|;
block|}
block|}
return|return
name|maxV
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
return|return
name|getStandardDisplayString
argument_list|(
name|getFuncName
argument_list|()
argument_list|,
name|children
argument_list|,
literal|","
argument_list|)
return|;
block|}
block|}
end_class

end_unit

