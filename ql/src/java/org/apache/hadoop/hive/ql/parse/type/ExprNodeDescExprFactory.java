begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|math
operator|.
name|NumberUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|TimestampTZ
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|TimestampTZUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|ConstantPropagateProcFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|CalciteSubquerySemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnListDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDescUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeFieldDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeSubQueryDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SubqueryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFWhen
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ConstantObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveTypeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Expression factory for Hive {@link ExprNodeDesc}.  */
end_comment

begin_class
specifier|public
class|class
name|ExprNodeDescExprFactory
extends|extends
name|ExprFactory
argument_list|<
name|ExprNodeDesc
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExprNodeDescExprFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|boolean
name|isExprInstance
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|ExprNodeDesc
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeDesc
name|toExpr
parameter_list|(
name|ColumnInfo
name|colInfo
parameter_list|)
block|{
name|ObjectInspector
name|inspector
init|=
name|colInfo
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
name|inspector
operator|instanceof
name|ConstantObjectInspector
operator|&&
name|inspector
operator|instanceof
name|PrimitiveObjectInspector
condition|)
block|{
return|return
name|toPrimitiveConstDesc
argument_list|(
name|colInfo
argument_list|,
name|inspector
argument_list|)
return|;
block|}
if|if
condition|(
name|inspector
operator|instanceof
name|ConstantObjectInspector
operator|&&
name|inspector
operator|instanceof
name|ListObjectInspector
condition|)
block|{
name|ObjectInspector
name|listElementOI
init|=
operator|(
operator|(
name|ListObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
name|listElementOI
operator|instanceof
name|PrimitiveObjectInspector
condition|)
block|{
return|return
name|toListConstDesc
argument_list|(
name|colInfo
argument_list|,
name|inspector
argument_list|,
name|listElementOI
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|inspector
operator|instanceof
name|ConstantObjectInspector
operator|&&
name|inspector
operator|instanceof
name|MapObjectInspector
condition|)
block|{
name|ObjectInspector
name|keyOI
init|=
operator|(
operator|(
name|MapObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI
init|=
operator|(
operator|(
name|MapObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyOI
operator|instanceof
name|PrimitiveObjectInspector
operator|&&
name|valueOI
operator|instanceof
name|PrimitiveObjectInspector
condition|)
block|{
return|return
name|toMapConstDesc
argument_list|(
name|colInfo
argument_list|,
name|inspector
argument_list|,
name|keyOI
argument_list|,
name|valueOI
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|inspector
operator|instanceof
name|ConstantObjectInspector
operator|&&
name|inspector
operator|instanceof
name|StructObjectInspector
condition|)
block|{
name|boolean
name|allPrimitive
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
operator|(
operator|(
name|StructObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|StructField
name|field
range|:
name|fields
control|)
block|{
name|allPrimitive
operator|&=
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
operator|instanceof
name|PrimitiveObjectInspector
expr_stmt|;
block|}
if|if
condition|(
name|allPrimitive
condition|)
block|{
return|return
name|toStructConstDesc
argument_list|(
name|colInfo
argument_list|,
name|inspector
argument_list|,
name|fields
argument_list|)
return|;
block|}
block|}
comment|// non-constant or non-primitive constants
name|ExprNodeColumnDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|colInfo
argument_list|)
decl_stmt|;
name|column
operator|.
name|setSkewedCol
argument_list|(
name|colInfo
operator|.
name|isSkewedCol
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|column
return|;
block|}
specifier|private
specifier|static
name|ExprNodeConstantDesc
name|toPrimitiveConstDesc
parameter_list|(
name|ColumnInfo
name|colInfo
parameter_list|,
name|ObjectInspector
name|inspector
parameter_list|)
block|{
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|inspector
decl_stmt|;
name|Object
name|constant
init|=
operator|(
operator|(
name|ConstantObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getWritableConstantValue
argument_list|()
decl_stmt|;
name|ExprNodeConstantDesc
name|constantExpr
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|colInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|poi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|constant
argument_list|)
argument_list|)
decl_stmt|;
name|constantExpr
operator|.
name|setFoldedFromCol
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
expr_stmt|;
name|constantExpr
operator|.
name|setFoldedFromTab
argument_list|(
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|constantExpr
return|;
block|}
specifier|private
specifier|static
name|ExprNodeConstantDesc
name|toListConstDesc
parameter_list|(
name|ColumnInfo
name|colInfo
parameter_list|,
name|ObjectInspector
name|inspector
parameter_list|,
name|ObjectInspector
name|listElementOI
parameter_list|)
block|{
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|listElementOI
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|values
init|=
call|(
name|List
argument_list|<
name|?
argument_list|>
call|)
argument_list|(
operator|(
name|ConstantObjectInspector
operator|)
name|inspector
argument_list|)
operator|.
name|getWritableConstantValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|constant
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|values
control|)
block|{
name|constant
operator|.
name|add
argument_list|(
name|poi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ExprNodeConstantDesc
name|constantExpr
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|colInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|constant
argument_list|)
decl_stmt|;
name|constantExpr
operator|.
name|setFoldedFromCol
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
expr_stmt|;
name|constantExpr
operator|.
name|setFoldedFromTab
argument_list|(
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|constantExpr
return|;
block|}
specifier|private
specifier|static
name|ExprNodeConstantDesc
name|toMapConstDesc
parameter_list|(
name|ColumnInfo
name|colInfo
parameter_list|,
name|ObjectInspector
name|inspector
parameter_list|,
name|ObjectInspector
name|keyOI
parameter_list|,
name|ObjectInspector
name|valueOI
parameter_list|)
block|{
name|PrimitiveObjectInspector
name|keyPoi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|keyOI
decl_stmt|;
name|PrimitiveObjectInspector
name|valuePoi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|valueOI
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|values
init|=
call|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
call|)
argument_list|(
operator|(
name|ConstantObjectInspector
operator|)
name|inspector
argument_list|)
operator|.
name|getWritableConstantValue
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|constant
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|e
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|constant
operator|.
name|put
argument_list|(
name|keyPoi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|valuePoi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ExprNodeConstantDesc
name|constantExpr
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|colInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|constant
argument_list|)
decl_stmt|;
name|constantExpr
operator|.
name|setFoldedFromCol
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
expr_stmt|;
name|constantExpr
operator|.
name|setFoldedFromTab
argument_list|(
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|constantExpr
return|;
block|}
specifier|private
specifier|static
name|ExprNodeConstantDesc
name|toStructConstDesc
parameter_list|(
name|ColumnInfo
name|colInfo
parameter_list|,
name|ObjectInspector
name|inspector
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
parameter_list|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|values
init|=
call|(
name|List
argument_list|<
name|?
argument_list|>
call|)
argument_list|(
operator|(
name|ConstantObjectInspector
operator|)
name|inspector
argument_list|)
operator|.
name|getWritableConstantValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|constant
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|value
init|=
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|PrimitiveObjectInspector
name|fieldPoi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|constant
operator|.
name|add
argument_list|(
name|fieldPoi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ExprNodeConstantDesc
name|constantExpr
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|colInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|constant
argument_list|)
decl_stmt|;
name|constantExpr
operator|.
name|setFoldedFromCol
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
expr_stmt|;
name|constantExpr
operator|.
name|setFoldedFromTab
argument_list|(
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|constantExpr
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeColumnDesc
name|createColumnRefExpr
parameter_list|(
name|ColumnInfo
name|colInfo
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|colInfo
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createNullConstantExpr
parameter_list|()
block|{
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfoFromPrimitiveWritable
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createBooleanConstantExpr
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|Boolean
name|b
init|=
name|value
operator|!=
literal|null
condition|?
name|Boolean
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
else|:
literal|null
decl_stmt|;
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|b
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createBigintConstantExpr
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|Long
name|l
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|l
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createIntConstantExpr
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|Integer
name|i
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|i
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createSmallintConstantExpr
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|Short
name|s
init|=
name|Short
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createTinyintConstantExpr
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|Byte
name|b
init|=
name|Byte
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createFloatConstantExpr
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|Float
name|f
init|=
name|Float
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|f
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createDoubleConstantExpr
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|Double
name|d
init|=
name|Double
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|d
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createDecimalConstantExpr
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|allowNullValueConstantExpr
parameter_list|)
block|{
name|HiveDecimal
name|hd
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allowNullValueConstantExpr
operator|&&
name|hd
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|adjustType
argument_list|(
name|hd
argument_list|)
argument_list|,
name|hd
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|TypeInfo
name|adjustConstantType
parameter_list|(
name|PrimitiveTypeInfo
name|targetType
parameter_list|,
name|Object
name|constantValue
parameter_list|)
block|{
if|if
condition|(
name|constantValue
operator|instanceof
name|HiveDecimal
condition|)
block|{
return|return
name|adjustType
argument_list|(
operator|(
name|HiveDecimal
operator|)
name|constantValue
argument_list|)
return|;
block|}
return|return
name|targetType
return|;
block|}
specifier|private
name|DecimalTypeInfo
name|adjustType
parameter_list|(
name|HiveDecimal
name|hd
parameter_list|)
block|{
comment|// Note: the normalize() call with rounding in HiveDecimal will currently reduce the
comment|//       precision and scale of the value by throwing away trailing zeroes. This may or may
comment|//       not be desirable for the literals; however, this used to be the default behavior
comment|//       for explicit decimal literals (e.g. 1.0BD), so we keep this behavior for now.
name|int
name|prec
init|=
literal|1
decl_stmt|;
name|int
name|scale
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|hd
operator|!=
literal|null
condition|)
block|{
name|prec
operator|=
name|hd
operator|.
name|precision
argument_list|()
expr_stmt|;
name|scale
operator|=
name|hd
operator|.
name|scale
argument_list|()
expr_stmt|;
block|}
name|DecimalTypeInfo
name|typeInfo
init|=
name|TypeInfoFactory
operator|.
name|getDecimalTypeInfo
argument_list|(
name|prec
argument_list|,
name|scale
argument_list|)
decl_stmt|;
return|return
name|typeInfo
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|Object
name|interpretConstantAsPrimitive
parameter_list|(
name|PrimitiveTypeInfo
name|targetType
parameter_list|,
name|Object
name|constantValue
parameter_list|,
name|PrimitiveTypeInfo
name|sourceType
parameter_list|)
block|{
if|if
condition|(
name|constantValue
operator|instanceof
name|Number
operator|||
name|constantValue
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
name|PrimitiveTypeEntry
name|primitiveTypeEntry
init|=
name|targetType
operator|.
name|getPrimitiveTypeEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|PrimitiveObjectInspectorUtils
operator|.
name|intTypeEntry
operator|.
name|equals
argument_list|(
name|primitiveTypeEntry
argument_list|)
condition|)
block|{
return|return
name|toBigDecimal
argument_list|(
name|constantValue
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|intValueExact
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|PrimitiveObjectInspectorUtils
operator|.
name|longTypeEntry
operator|.
name|equals
argument_list|(
name|primitiveTypeEntry
argument_list|)
condition|)
block|{
return|return
name|toBigDecimal
argument_list|(
name|constantValue
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|longValueExact
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|PrimitiveObjectInspectorUtils
operator|.
name|doubleTypeEntry
operator|.
name|equals
argument_list|(
name|primitiveTypeEntry
argument_list|)
condition|)
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|constantValue
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|PrimitiveObjectInspectorUtils
operator|.
name|floatTypeEntry
operator|.
name|equals
argument_list|(
name|primitiveTypeEntry
argument_list|)
condition|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|constantValue
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|PrimitiveObjectInspectorUtils
operator|.
name|byteTypeEntry
operator|.
name|equals
argument_list|(
name|primitiveTypeEntry
argument_list|)
condition|)
block|{
return|return
name|toBigDecimal
argument_list|(
name|constantValue
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|byteValueExact
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|PrimitiveObjectInspectorUtils
operator|.
name|shortTypeEntry
operator|.
name|equals
argument_list|(
name|primitiveTypeEntry
argument_list|)
condition|)
block|{
return|return
name|toBigDecimal
argument_list|(
name|constantValue
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|shortValueExact
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|PrimitiveObjectInspectorUtils
operator|.
name|decimalTypeEntry
operator|.
name|equals
argument_list|(
name|primitiveTypeEntry
argument_list|)
condition|)
block|{
return|return
name|HiveDecimal
operator|.
name|create
argument_list|(
name|constantValue
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
decl||
name|ArithmeticException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Failed to narrow type of constant"
argument_list|,
name|nfe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|// Comparision of decimal and float/double happens in float/double.
if|if
condition|(
name|constantValue
operator|instanceof
name|HiveDecimal
condition|)
block|{
name|HiveDecimal
name|hiveDecimal
init|=
operator|(
name|HiveDecimal
operator|)
name|constantValue
decl_stmt|;
name|PrimitiveTypeEntry
name|primitiveTypeEntry
init|=
name|targetType
operator|.
name|getPrimitiveTypeEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|PrimitiveObjectInspectorUtils
operator|.
name|doubleTypeEntry
operator|.
name|equals
argument_list|(
name|primitiveTypeEntry
argument_list|)
condition|)
block|{
return|return
name|hiveDecimal
operator|.
name|doubleValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|PrimitiveObjectInspectorUtils
operator|.
name|floatTypeEntry
operator|.
name|equals
argument_list|(
name|primitiveTypeEntry
argument_list|)
condition|)
block|{
return|return
name|hiveDecimal
operator|.
name|floatValue
argument_list|()
return|;
block|}
return|return
name|hiveDecimal
return|;
block|}
name|String
name|constTypeInfoName
init|=
name|sourceType
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|constTypeInfoName
operator|.
name|equalsIgnoreCase
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
condition|)
block|{
comment|// because a comparison against a "string" will happen in "string" type.
comment|// to avoid unintnetional comparisions in "string"
comment|// constants which are representing char/varchar values must be converted to the
comment|// appropriate type.
if|if
condition|(
name|targetType
operator|instanceof
name|CharTypeInfo
condition|)
block|{
specifier|final
name|String
name|constValue
init|=
name|constantValue
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|TypeInfoUtils
operator|.
name|getCharacterLengthForType
argument_list|(
name|targetType
argument_list|)
decl_stmt|;
name|HiveChar
name|newValue
init|=
operator|new
name|HiveChar
argument_list|(
name|constValue
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|HiveChar
name|maxCharConst
init|=
operator|new
name|HiveChar
argument_list|(
name|constValue
argument_list|,
name|HiveChar
operator|.
name|MAX_CHAR_LENGTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxCharConst
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
return|return
name|newValue
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
name|targetType
operator|instanceof
name|VarcharTypeInfo
condition|)
block|{
specifier|final
name|String
name|constValue
init|=
name|constantValue
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|TypeInfoUtils
operator|.
name|getCharacterLengthForType
argument_list|(
name|targetType
argument_list|)
decl_stmt|;
name|HiveVarchar
name|newValue
init|=
operator|new
name|HiveVarchar
argument_list|(
name|constValue
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|HiveVarchar
name|maxCharConst
init|=
operator|new
name|HiveVarchar
argument_list|(
name|constValue
argument_list|,
name|HiveVarchar
operator|.
name|MAX_VARCHAR_LENGTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxCharConst
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
return|return
name|newValue
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
return|return
name|constantValue
return|;
block|}
specifier|private
name|BigDecimal
name|toBigDecimal
parameter_list|(
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
operator|!
name|NumberUtils
operator|.
name|isNumber
argument_list|(
name|val
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"The given string is not a valid number: "
operator|+
name|val
argument_list|)
throw|;
block|}
return|return
operator|new
name|BigDecimal
argument_list|(
name|val
operator|.
name|replaceAll
argument_list|(
literal|"[dDfFlL]$"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createStringConstantExpr
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createDateConstantExpr
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|Date
name|d
init|=
name|Date
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|dateTypeInfo
argument_list|,
name|d
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createTimestampConstantExpr
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|Timestamp
name|t
init|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|,
name|t
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createTimestampLocalTimeZoneConstantExpr
parameter_list|(
name|String
name|value
parameter_list|,
name|ZoneId
name|zoneId
parameter_list|)
block|{
name|TimestampTZ
name|t
init|=
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|getTimestampTZTypeInfo
argument_list|(
name|zoneId
argument_list|)
argument_list|,
name|t
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createIntervalYearMonthConstantExpr
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intervalYearMonthTypeInfo
argument_list|,
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createIntervalDayTimeConstantExpr
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intervalDayTimeTypeInfo
argument_list|,
name|HiveIntervalDayTime
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createIntervalYearConstantExpr
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intervalYearMonthTypeInfo
argument_list|,
operator|new
name|HiveIntervalYearMonth
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createIntervalMonthConstantExpr
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intervalYearMonthTypeInfo
argument_list|,
operator|new
name|HiveIntervalYearMonth
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createIntervalDayConstantExpr
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intervalDayTimeTypeInfo
argument_list|,
operator|new
name|HiveIntervalDayTime
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createIntervalHourConstantExpr
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intervalDayTimeTypeInfo
argument_list|,
operator|new
name|HiveIntervalDayTime
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createIntervalMinuteConstantExpr
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intervalDayTimeTypeInfo
argument_list|,
operator|new
name|HiveIntervalDayTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createIntervalSecondConstantExpr
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|BigDecimal
name|bd
init|=
operator|new
name|BigDecimal
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|BigDecimal
name|bdSeconds
init|=
operator|new
name|BigDecimal
argument_list|(
name|bd
operator|.
name|toBigInteger
argument_list|()
argument_list|)
decl_stmt|;
name|BigDecimal
name|bdNanos
init|=
name|bd
operator|.
name|subtract
argument_list|(
name|bdSeconds
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intervalDayTimeTypeInfo
argument_list|,
operator|new
name|HiveIntervalDayTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|bdSeconds
operator|.
name|intValueExact
argument_list|()
argument_list|,
name|bdNanos
operator|.
name|multiply
argument_list|(
name|NANOS_PER_SEC_BD
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeConstantDesc
name|createConstantExpr
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|Object
name|constantValue
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|typeInfo
argument_list|,
name|constantValue
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeFieldDesc
name|createNestedColumnRefExpr
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|ExprNodeDesc
name|expr
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Boolean
name|isList
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeFieldDesc
argument_list|(
name|typeInfo
argument_list|,
name|expr
argument_list|,
name|fieldName
argument_list|,
name|isList
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeGenericFuncDesc
name|createFuncCallExpr
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|GenericUDF
name|genericUDF
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|inputs
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
name|genericUDF
argument_list|,
name|inputs
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeGenericFuncDesc
name|createFuncCallExpr
parameter_list|(
name|GenericUDF
name|genericUDF
parameter_list|,
name|String
name|funcText
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|inputs
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
return|return
name|ExprNodeGenericFuncDesc
operator|.
name|newInstance
argument_list|(
name|genericUDF
argument_list|,
name|funcText
argument_list|,
name|inputs
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeColumnListDesc
name|createExprsListExpr
parameter_list|()
block|{
return|return
operator|new
name|ExprNodeColumnListDesc
argument_list|()
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeColumnListDesc
name|addExprToExprsList
parameter_list|(
name|ExprNodeDesc
name|columnList
parameter_list|,
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
name|ExprNodeColumnListDesc
name|l
init|=
operator|(
name|ExprNodeColumnListDesc
operator|)
name|columnList
decl_stmt|;
name|l
operator|.
name|addColumn
argument_list|(
name|expr
argument_list|)
expr_stmt|;
return|return
name|l
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|boolean
name|isConstantExpr
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|ExprNodeConstantDesc
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|boolean
name|isFuncCallExpr
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|ExprNodeGenericFuncDesc
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|Object
name|getConstantValue
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ExprNodeConstantDesc
operator|)
name|expr
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|boolean
name|isColumnRefExpr
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|ExprNodeColumnDesc
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|String
name|getColumnName
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|expr
operator|)
operator|.
name|getColumn
argument_list|()
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|boolean
name|isExprsListExpr
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|ExprNodeColumnListDesc
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|getExprChildren
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
return|return
name|expr
operator|.
name|getChildren
argument_list|()
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|TypeInfo
name|getTypeInfo
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
return|return
name|expr
operator|.
name|getTypeInfo
argument_list|()
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|rewriteINIntoORFuncCallExpr
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|inOperands
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
name|TypeCheckProcFactoryUtils
operator|.
name|rewriteInToOR
argument_list|(
name|inOperands
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|boolean
name|isORFuncCallExpr
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
return|return
name|FunctionRegistry
operator|.
name|isOpOr
argument_list|(
name|expr
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|boolean
name|isANDFuncCallExpr
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
return|return
name|FunctionRegistry
operator|.
name|isOpAnd
argument_list|(
name|expr
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|boolean
name|isPOSITIVEFuncCallExpr
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
return|return
name|FunctionRegistry
operator|.
name|isOpPositive
argument_list|(
name|expr
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeDesc
name|setTypeInfo
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|,
name|TypeInfo
name|type
parameter_list|)
block|{
name|expr
operator|.
name|setTypeInfo
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|expr
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|boolean
name|canConvertCASEIntoCOALESCEFuncCallExpr
parameter_list|(
name|GenericUDF
name|genericUDF
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|inputs
parameter_list|)
block|{
if|if
condition|(
name|genericUDF
operator|instanceof
name|GenericUDFWhen
operator|&&
name|inputs
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|&&
name|inputs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ExprNodeConstantDesc
operator|&&
name|inputs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
name|ExprNodeConstantDesc
name|constThen
init|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|inputs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constElse
init|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|inputs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Object
name|thenVal
init|=
name|constThen
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Object
name|elseVal
init|=
name|constElse
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|thenVal
operator|instanceof
name|Boolean
operator|&&
name|elseVal
operator|instanceof
name|Boolean
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeDesc
name|foldExpr
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
return|return
name|ConstantPropagateProcFactory
operator|.
name|foldExpr
argument_list|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|expr
argument_list|)
return|;
block|}
return|return
name|expr
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|boolean
name|isSTRUCTFuncCallExpr
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
return|return
name|ExprNodeDescUtils
operator|.
name|isStructUDF
argument_list|(
name|expr
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|boolean
name|isConstantStruct
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
return|return
name|ExprNodeDescUtils
operator|.
name|isConstantStruct
argument_list|(
name|expr
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
specifier|protected
name|ExprNodeDesc
name|createSubqueryExpr
parameter_list|(
name|TypeCheckCtx
name|ctx
parameter_list|,
name|ASTNode
name|expr
parameter_list|,
name|SubqueryType
name|subqueryType
parameter_list|,
name|Object
index|[]
name|inputs
parameter_list|)
throws|throws
name|CalciteSubquerySemanticException
block|{
comment|// subqueryToRelNode might be null if subquery expression anywhere other than
comment|//  as expected in filter (where/having). We should throw an appropriate error
comment|// message
name|Map
argument_list|<
name|ASTNode
argument_list|,
name|RelNode
argument_list|>
name|subqueryToRelNode
init|=
name|ctx
operator|.
name|getSubqueryToRelNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|subqueryToRelNode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CalciteSubquerySemanticException
argument_list|(
name|ErrorMsg
operator|.
name|UNSUPPORTED_SUBQUERY_EXPRESSION
operator|.
name|getMsg
argument_list|(
literal|" Currently SubQuery expressions are only allowed as "
operator|+
literal|"Where and Having Clause predicates"
argument_list|)
argument_list|)
throw|;
block|}
name|ASTNode
name|subqueryOp
init|=
operator|(
name|ASTNode
operator|)
name|expr
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RelNode
name|subqueryRel
init|=
name|subqueryToRelNode
operator|.
name|get
argument_list|(
name|expr
argument_list|)
decl_stmt|;
comment|// For now because subquery is only supported in filter
comment|// we will create subquery expression of boolean type
switch|switch
condition|(
name|subqueryType
condition|)
block|{
case|case
name|EXISTS
case|:
block|{
return|return
operator|new
name|ExprNodeSubQueryDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|subqueryRel
argument_list|,
name|SubqueryType
operator|.
name|EXISTS
argument_list|)
return|;
block|}
case|case
name|IN
case|:
block|{
assert|assert
operator|(
name|inputs
index|[
literal|2
index|]
operator|!=
literal|null
operator|)
assert|;
name|ExprNodeDesc
name|lhs
init|=
operator|(
name|ExprNodeDesc
operator|)
name|inputs
index|[
literal|2
index|]
decl_stmt|;
return|return
operator|new
name|ExprNodeSubQueryDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|subqueryRel
argument_list|,
name|SubqueryType
operator|.
name|IN
argument_list|,
name|lhs
argument_list|)
return|;
block|}
case|case
name|SCALAR
case|:
block|{
comment|// only single subquery expr is supported
if|if
condition|(
name|subqueryRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|CalciteSubquerySemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_SUBQUERY_EXPRESSION
operator|.
name|getMsg
argument_list|(
literal|"More than one column expression in subquery"
argument_list|)
argument_list|)
throw|;
block|}
comment|// figure out subquery expression column's type
name|TypeInfo
name|subExprType
init|=
name|TypeConverter
operator|.
name|convert
argument_list|(
name|subqueryRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExprNodeSubQueryDesc
argument_list|(
name|subExprType
argument_list|,
name|subqueryRel
argument_list|,
name|SubqueryType
operator|.
name|SCALAR
argument_list|)
return|;
block|}
case|case
name|SOME
case|:
block|{
assert|assert
operator|(
name|inputs
index|[
literal|2
index|]
operator|!=
literal|null
operator|)
assert|;
name|ExprNodeDesc
name|lhs
init|=
operator|(
name|ExprNodeDesc
operator|)
name|inputs
index|[
literal|2
index|]
decl_stmt|;
return|return
operator|new
name|ExprNodeSubQueryDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|subqueryRel
argument_list|,
name|SubqueryType
operator|.
name|SOME
argument_list|,
name|lhs
argument_list|,
operator|(
name|ASTNode
operator|)
name|subqueryOp
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
case|case
name|ALL
case|:
block|{
assert|assert
operator|(
name|inputs
index|[
literal|2
index|]
operator|!=
literal|null
operator|)
assert|;
name|ExprNodeDesc
name|lhs
init|=
operator|(
name|ExprNodeDesc
operator|)
name|inputs
index|[
literal|2
index|]
decl_stmt|;
return|return
operator|new
name|ExprNodeSubQueryDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|subqueryRel
argument_list|,
name|SubqueryType
operator|.
name|ALL
argument_list|,
name|lhs
argument_list|,
operator|(
name|ASTNode
operator|)
name|subqueryOp
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
default|default:
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

