begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExtractOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExtractDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_comment
comment|/**  * Vectorized extract operator implementation.  **/
end_comment

begin_class
specifier|public
class|class
name|VectorExtractOperator
extends|extends
name|ExtractOperator
implements|implements
name|VectorizationContextRegion
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|reduceTypeInfos
decl_stmt|;
comment|// Create a new outgoing vectorization context because we will project just the values.
specifier|private
name|VectorizationContext
name|vOutContext
decl_stmt|;
specifier|private
name|int
index|[]
name|projectedColumns
decl_stmt|;
specifier|private
name|String
name|removeValueDotPrefix
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
return|return
name|columnName
operator|.
name|substring
argument_list|(
literal|"VALUE."
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|VectorExtractOperator
parameter_list|(
name|VectorizationContext
name|vContext
parameter_list|,
name|OperatorDesc
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
operator|(
name|ExtractDesc
operator|)
name|conf
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|reduceColumnNames
init|=
name|vContext
operator|.
name|getProjectionColumnNames
argument_list|()
decl_stmt|;
name|int
name|reduceColCount
init|=
name|reduceColumnNames
operator|.
name|size
argument_list|()
decl_stmt|;
comment|/*      * Create a new vectorization context as projection of just the values columns, but       * keep same output column manager must be inherited to track the scratch the columns.      */
name|vOutContext
operator|=
operator|new
name|VectorizationContext
argument_list|(
name|vContext
argument_list|)
expr_stmt|;
comment|// Set a fileKey with vectorization context.
name|vOutContext
operator|.
name|setFileKey
argument_list|(
name|vContext
operator|.
name|getFileKey
argument_list|()
operator|+
literal|"/_EXTRACT_"
argument_list|)
expr_stmt|;
comment|// Remove "VALUE." prefix from value columns and create a new projection
name|vOutContext
operator|.
name|resetProjectionColumns
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reduceColCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|columnName
init|=
name|reduceColumnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnName
operator|.
name|startsWith
argument_list|(
literal|"VALUE."
argument_list|)
condition|)
block|{
name|vOutContext
operator|.
name|addProjectionColumn
argument_list|(
name|removeValueDotPrefix
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|VectorExtractOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/*    * Called by the Vectorizer class to pass the types from reduce shuffle.    */
specifier|public
name|void
name|setReduceTypeInfos
parameter_list|(
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|reduceTypeInfos
parameter_list|)
block|{
name|this
operator|.
name|reduceTypeInfos
operator|=
name|reduceTypeInfos
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Create the projection of the values and the output object inspector
comment|// for just the value without their "VALUE." prefix.
name|int
name|projectionSize
init|=
name|vOutContext
operator|.
name|getProjectedColumns
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|projectedColumns
operator|=
operator|new
name|int
index|[
name|projectionSize
index|]
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|ois
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|projectionSize
condition|;
name|i
operator|++
control|)
block|{
name|int
name|projectedIndex
init|=
name|vOutContext
operator|.
name|getProjectedColumns
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|projectedColumns
index|[
name|i
index|]
operator|=
name|projectedIndex
expr_stmt|;
name|String
name|colName
init|=
name|vOutContext
operator|.
name|getProjectionColumnNames
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|columnNames
operator|.
name|add
argument_list|(
name|colName
argument_list|)
expr_stmt|;
name|TypeInfo
name|typeInfo
init|=
name|reduceTypeInfos
operator|.
name|get
argument_list|(
name|projectedIndex
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|typeInfo
argument_list|)
decl_stmt|;
name|ois
operator|.
name|add
argument_list|(
name|oi
argument_list|)
expr_stmt|;
block|}
name|outputObjInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|columnNames
argument_list|,
name|ois
argument_list|)
expr_stmt|;
name|initializeChildren
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// Remove the key columns and forward the values (and scratch columns).
specifier|public
name|void
name|processOp
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|vrg
init|=
operator|(
name|VectorizedRowBatch
operator|)
name|row
decl_stmt|;
name|int
index|[]
name|originalProjections
init|=
name|vrg
operator|.
name|projectedColumns
decl_stmt|;
name|int
name|originalProjectionSize
init|=
name|vrg
operator|.
name|projectionSize
decl_stmt|;
comment|// Temporarily substitute our projection.
name|vrg
operator|.
name|projectionSize
operator|=
name|projectedColumns
operator|.
name|length
expr_stmt|;
name|vrg
operator|.
name|projectedColumns
operator|=
name|projectedColumns
expr_stmt|;
name|forward
argument_list|(
name|vrg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Revert the projected columns back, because vrg will be re-used.
name|vrg
operator|.
name|projectionSize
operator|=
name|originalProjectionSize
expr_stmt|;
name|vrg
operator|.
name|projectedColumns
operator|=
name|originalProjections
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|VectorizationContext
name|getOuputVectorizationContext
parameter_list|()
block|{
return|return
name|vOutContext
return|;
block|}
block|}
end_class

end_unit

