begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeEvaluatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExtractOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExtractDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_comment
comment|/**  * Vectorized extract operator implementation.  Consumes rows and outputs a  * vectorized batch of subobjects.  **/
end_comment

begin_class
specifier|public
class|class
name|VectorExtractOperator
extends|extends
name|ExtractOperator
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
name|keyColCount
decl_stmt|;
specifier|private
name|int
name|valueColCount
decl_stmt|;
specifier|private
specifier|transient
name|VectorizedRowBatch
name|outputBatch
decl_stmt|;
specifier|private
specifier|transient
name|int
name|remainingColCount
decl_stmt|;
specifier|public
name|VectorExtractOperator
parameter_list|(
name|VectorizationContext
name|vContext
parameter_list|,
name|OperatorDesc
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
operator|(
name|ExtractDesc
operator|)
name|conf
expr_stmt|;
block|}
specifier|public
name|VectorExtractOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|StructObjectInspector
name|structInputObjInspector
init|=
operator|(
name|StructObjectInspector
operator|)
name|inputObjInspectors
index|[
literal|0
index|]
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|structInputObjInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|ois
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|keyColCount
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StructField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|fieldName
init|=
name|field
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
comment|// Remove "VALUE." prefix.
name|int
name|dotIndex
init|=
name|fieldName
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|colNames
operator|.
name|add
argument_list|(
name|fieldName
operator|.
name|substring
argument_list|(
name|dotIndex
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ois
operator|.
name|add
argument_list|(
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|outputObjInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|colNames
argument_list|,
name|ois
argument_list|)
expr_stmt|;
name|remainingColCount
operator|=
name|fields
operator|.
name|size
argument_list|()
operator|-
name|keyColCount
expr_stmt|;
name|outputBatch
operator|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|remainingColCount
argument_list|)
expr_stmt|;
name|initializeChildren
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setKeyAndValueColCounts
parameter_list|(
name|int
name|keyColCount
parameter_list|,
name|int
name|valueColCount
parameter_list|)
block|{
name|this
operator|.
name|keyColCount
operator|=
name|keyColCount
expr_stmt|;
name|this
operator|.
name|valueColCount
operator|=
name|valueColCount
expr_stmt|;
block|}
annotation|@
name|Override
comment|// Remove the key columns and forward the values (and scratch columns).
specifier|public
name|void
name|processOp
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|inputBatch
init|=
operator|(
name|VectorizedRowBatch
operator|)
name|row
decl_stmt|;
comment|// Copy references to the input columns array starting after the keys...
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|remainingColCount
condition|;
name|i
operator|++
control|)
block|{
name|outputBatch
operator|.
name|cols
index|[
name|i
index|]
operator|=
name|inputBatch
operator|.
name|cols
index|[
name|keyColCount
operator|+
name|i
index|]
expr_stmt|;
block|}
name|outputBatch
operator|.
name|size
operator|=
name|inputBatch
operator|.
name|size
expr_stmt|;
name|forward
argument_list|(
name|outputBatch
argument_list|,
name|outputObjInspector
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

