begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinUtil
import|;
end_import

begin_comment
comment|/*  * Root abstract class for a hash table result.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|VectorMapJoinHashTableResult
block|{
specifier|private
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
decl_stmt|;
specifier|private
name|int
name|spillPartitionId
decl_stmt|;
specifier|public
name|VectorMapJoinHashTableResult
parameter_list|()
block|{
name|joinResult
operator|=
name|JoinUtil
operator|.
name|JoinResult
operator|.
name|NOMATCH
expr_stmt|;
name|spillPartitionId
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/**    * @return The join result from the most recent hash map match, or hash multi-set / set contains    *         call.    */
specifier|public
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
parameter_list|()
block|{
return|return
name|joinResult
return|;
block|}
comment|/**    * Set the current join result.    * @param joinResult    *               The new join result.    */
specifier|public
name|void
name|setJoinResult
parameter_list|(
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
parameter_list|)
block|{
name|this
operator|.
name|joinResult
operator|=
name|joinResult
expr_stmt|;
block|}
comment|/**    * Forget about the most recent hash table lookup or contains call.    */
specifier|public
name|void
name|forget
parameter_list|()
block|{
name|joinResult
operator|=
name|JoinUtil
operator|.
name|JoinResult
operator|.
name|NOMATCH
expr_stmt|;
block|}
comment|/**    * Set the spill partition id.    */
specifier|public
name|void
name|setSpillPartitionId
parameter_list|(
name|int
name|spillPartitionId
parameter_list|)
block|{
name|this
operator|.
name|spillPartitionId
operator|=
name|spillPartitionId
expr_stmt|;
block|}
comment|/**    * @return The Hybrid Grace spill partition id.    */
specifier|public
name|int
name|spillPartitionId
parameter_list|()
block|{
return|return
name|spillPartitionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"joinResult "
operator|+
name|joinResult
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

