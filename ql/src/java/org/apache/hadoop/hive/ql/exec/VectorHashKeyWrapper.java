begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_comment
comment|/**  * A hash map key wrapper for vectorized processing.  * It stores the key values as primitives in arrays for each supported primitive type.  * This works in conjunction with   * {@link org.apache.hadoop.hive.ql.exec.VectorHashKeyWrapperBatch VectorHashKeyWrapperBatch}  * to hash vectorized processing units (batches).   */
end_comment

begin_class
specifier|public
class|class
name|VectorHashKeyWrapper
extends|extends
name|KeyWrapper
block|{
specifier|private
name|long
index|[]
name|longValues
decl_stmt|;
specifier|private
name|double
index|[]
name|doubleValues
decl_stmt|;
specifier|private
name|boolean
index|[]
name|isNull
decl_stmt|;
specifier|private
name|int
name|hashcode
decl_stmt|;
specifier|public
name|VectorHashKeyWrapper
parameter_list|(
name|int
name|longValuesCount
parameter_list|,
name|int
name|doubleValuesCount
parameter_list|)
block|{
name|longValues
operator|=
operator|new
name|long
index|[
name|longValuesCount
index|]
expr_stmt|;
name|doubleValues
operator|=
operator|new
name|double
index|[
name|doubleValuesCount
index|]
expr_stmt|;
name|isNull
operator|=
operator|new
name|boolean
index|[
name|longValuesCount
operator|+
name|doubleValuesCount
index|]
expr_stmt|;
block|}
specifier|private
name|VectorHashKeyWrapper
parameter_list|()
block|{   }
annotation|@
name|Override
name|void
name|getNewKey
parameter_list|(
name|Object
name|row
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Should not be called"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|void
name|setHashKey
parameter_list|()
block|{
name|hashcode
operator|=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|longValues
argument_list|)
operator|^
name|Arrays
operator|.
name|hashCode
argument_list|(
name|doubleValues
argument_list|)
operator|^
name|Arrays
operator|.
name|hashCode
argument_list|(
name|isNull
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hashcode
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|instanceof
name|VectorHashKeyWrapper
condition|)
block|{
name|VectorHashKeyWrapper
name|keyThat
init|=
operator|(
name|VectorHashKeyWrapper
operator|)
name|that
decl_stmt|;
return|return
name|hashcode
operator|==
name|keyThat
operator|.
name|hashcode
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|longValues
argument_list|,
name|keyThat
operator|.
name|longValues
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|doubleValues
argument_list|,
name|keyThat
operator|.
name|doubleValues
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|isNull
argument_list|,
name|keyThat
operator|.
name|isNull
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Object
name|clone
parameter_list|()
block|{
name|VectorHashKeyWrapper
name|clone
init|=
operator|new
name|VectorHashKeyWrapper
argument_list|()
decl_stmt|;
name|clone
operator|.
name|longValues
operator|=
name|longValues
operator|.
name|clone
argument_list|()
expr_stmt|;
name|clone
operator|.
name|doubleValues
operator|=
name|doubleValues
operator|.
name|clone
argument_list|()
expr_stmt|;
name|clone
operator|.
name|isNull
operator|=
name|isNull
operator|.
name|clone
argument_list|()
expr_stmt|;
name|clone
operator|.
name|hashcode
operator|=
name|hashcode
expr_stmt|;
return|return
name|clone
return|;
block|}
annotation|@
name|Override
specifier|public
name|KeyWrapper
name|copyKey
parameter_list|()
block|{
return|return
operator|(
name|KeyWrapper
operator|)
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
name|void
name|copyKey
parameter_list|(
name|KeyWrapper
name|oldWrapper
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
annotation|@
name|Override
name|Object
index|[]
name|getKeyArray
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|assignDouble
parameter_list|(
name|int
name|index
parameter_list|,
name|double
name|d
parameter_list|)
block|{
name|doubleValues
index|[
name|index
index|]
operator|=
name|d
expr_stmt|;
name|isNull
index|[
name|longValues
operator|.
name|length
operator|+
name|index
index|]
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|assignNullDouble
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|doubleValues
index|[
name|index
index|]
operator|=
literal|0
expr_stmt|;
comment|// assign 0 to simplify hashcode
name|isNull
index|[
name|longValues
operator|.
name|length
operator|+
name|index
index|]
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|assignLong
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|v
parameter_list|)
block|{
name|longValues
index|[
name|index
index|]
operator|=
name|v
expr_stmt|;
name|isNull
index|[
name|index
index|]
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|assignNullLong
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|longValues
index|[
name|index
index|]
operator|=
literal|0
expr_stmt|;
comment|// assign 0 to simplify hashcode
name|isNull
index|[
name|index
index|]
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%d[%s] %d[%s]"
argument_list|,
name|longValues
operator|.
name|length
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|longValues
argument_list|)
argument_list|,
name|doubleValues
operator|.
name|length
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|doubleValues
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|getIsNull
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|isNull
index|[
name|i
index|]
return|;
block|}
specifier|public
name|long
name|getLongValue
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|longValues
index|[
name|i
index|]
return|;
block|}
specifier|public
name|double
name|getDoubleValue
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|doubleValues
index|[
name|i
operator|-
name|longValues
operator|.
name|length
index|]
return|;
block|}
block|}
end_class

end_unit

