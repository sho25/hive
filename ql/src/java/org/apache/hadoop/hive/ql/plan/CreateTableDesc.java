begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLForeignKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLNotNullConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLPrimaryKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLUniqueConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|DDLTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveFileFormatUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveStorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|BaseSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ReplicationSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * CreateTableDesc.  *  */
end_comment

begin_class
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Create Table"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
class|class
name|CreateTableDesc
extends|extends
name|DDLDesc
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CreateTableDesc
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|databaseName
decl_stmt|;
name|String
name|tableName
decl_stmt|;
name|boolean
name|isExternal
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
decl_stmt|;
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
decl_stmt|;
name|int
name|numBuckets
decl_stmt|;
name|String
name|fieldDelim
decl_stmt|;
name|String
name|fieldEscape
decl_stmt|;
name|String
name|collItemDelim
decl_stmt|;
name|String
name|mapKeyDelim
decl_stmt|;
name|String
name|lineDelim
decl_stmt|;
name|String
name|nullFormat
decl_stmt|;
name|String
name|comment
decl_stmt|;
name|String
name|inputFormat
decl_stmt|;
name|String
name|outputFormat
decl_stmt|;
name|String
name|location
decl_stmt|;
name|String
name|serName
decl_stmt|;
name|String
name|storageHandler
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeProps
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblProps
decl_stmt|;
name|boolean
name|ifNotExists
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|skewedColNames
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|skewedColValues
decl_stmt|;
name|boolean
name|isStoredAsSubDirectories
init|=
literal|false
decl_stmt|;
name|boolean
name|isTemporary
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|isMaterialization
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|replaceMode
init|=
literal|false
decl_stmt|;
specifier|private
name|ReplicationSpec
name|replicationSpec
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|isCTAS
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeys
decl_stmt|;
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
decl_stmt|;
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uniqueConstraints
decl_stmt|;
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|notNullConstraints
decl_stmt|;
specifier|private
name|Long
name|initialMmWriteId
decl_stmt|;
comment|// Initial MM write ID for CTAS and import.
comment|// The FSOP configuration for the FSOP that is going to write initial data during ctas.
comment|// This is not needed beyond compilation, so it is transient.
specifier|private
specifier|transient
name|FileSinkDesc
name|writer
decl_stmt|;
specifier|public
name|CreateTableDesc
parameter_list|()
block|{   }
specifier|public
name|CreateTableDesc
parameter_list|(
name|String
name|databaseName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|isExternal
parameter_list|,
name|boolean
name|isTemporary
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|,
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
parameter_list|,
name|int
name|numBuckets
parameter_list|,
name|String
name|fieldDelim
parameter_list|,
name|String
name|fieldEscape
parameter_list|,
name|String
name|collItemDelim
parameter_list|,
name|String
name|mapKeyDelim
parameter_list|,
name|String
name|lineDelim
parameter_list|,
name|String
name|comment
parameter_list|,
name|String
name|inputFormat
parameter_list|,
name|String
name|outputFormat
parameter_list|,
name|String
name|location
parameter_list|,
name|String
name|serName
parameter_list|,
name|String
name|storageHandler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeProps
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblProps
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|skewedColNames
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|skewedColValues
parameter_list|,
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeys
parameter_list|,
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
parameter_list|,
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uniqueConstraints
parameter_list|,
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|notNullConstraints
parameter_list|)
block|{
name|this
argument_list|(
name|tableName
argument_list|,
name|isExternal
argument_list|,
name|isTemporary
argument_list|,
name|cols
argument_list|,
name|partCols
argument_list|,
name|bucketCols
argument_list|,
name|sortCols
argument_list|,
name|numBuckets
argument_list|,
name|fieldDelim
argument_list|,
name|fieldEscape
argument_list|,
name|collItemDelim
argument_list|,
name|mapKeyDelim
argument_list|,
name|lineDelim
argument_list|,
name|comment
argument_list|,
name|inputFormat
argument_list|,
name|outputFormat
argument_list|,
name|location
argument_list|,
name|serName
argument_list|,
name|storageHandler
argument_list|,
name|serdeProps
argument_list|,
name|tblProps
argument_list|,
name|ifNotExists
argument_list|,
name|skewedColNames
argument_list|,
name|skewedColValues
argument_list|,
name|primaryKeys
argument_list|,
name|foreignKeys
argument_list|,
name|uniqueConstraints
argument_list|,
name|notNullConstraints
argument_list|)
expr_stmt|;
name|this
operator|.
name|databaseName
operator|=
name|databaseName
expr_stmt|;
block|}
specifier|public
name|CreateTableDesc
parameter_list|(
name|String
name|databaseName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|isExternal
parameter_list|,
name|boolean
name|isTemporary
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|,
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
parameter_list|,
name|int
name|numBuckets
parameter_list|,
name|String
name|fieldDelim
parameter_list|,
name|String
name|fieldEscape
parameter_list|,
name|String
name|collItemDelim
parameter_list|,
name|String
name|mapKeyDelim
parameter_list|,
name|String
name|lineDelim
parameter_list|,
name|String
name|comment
parameter_list|,
name|String
name|inputFormat
parameter_list|,
name|String
name|outputFormat
parameter_list|,
name|String
name|location
parameter_list|,
name|String
name|serName
parameter_list|,
name|String
name|storageHandler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeProps
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblProps
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|skewedColNames
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|skewedColValues
parameter_list|,
name|boolean
name|isCTAS
parameter_list|,
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeys
parameter_list|,
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
parameter_list|,
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uniqueConstraints
parameter_list|,
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|notNullConstraints
parameter_list|)
block|{
name|this
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|,
name|isExternal
argument_list|,
name|isTemporary
argument_list|,
name|cols
argument_list|,
name|partCols
argument_list|,
name|bucketCols
argument_list|,
name|sortCols
argument_list|,
name|numBuckets
argument_list|,
name|fieldDelim
argument_list|,
name|fieldEscape
argument_list|,
name|collItemDelim
argument_list|,
name|mapKeyDelim
argument_list|,
name|lineDelim
argument_list|,
name|comment
argument_list|,
name|inputFormat
argument_list|,
name|outputFormat
argument_list|,
name|location
argument_list|,
name|serName
argument_list|,
name|storageHandler
argument_list|,
name|serdeProps
argument_list|,
name|tblProps
argument_list|,
name|ifNotExists
argument_list|,
name|skewedColNames
argument_list|,
name|skewedColValues
argument_list|,
name|primaryKeys
argument_list|,
name|foreignKeys
argument_list|,
name|uniqueConstraints
argument_list|,
name|notNullConstraints
argument_list|)
expr_stmt|;
name|this
operator|.
name|isCTAS
operator|=
name|isCTAS
expr_stmt|;
block|}
specifier|public
name|CreateTableDesc
parameter_list|(
name|String
name|tableName
parameter_list|,
name|boolean
name|isExternal
parameter_list|,
name|boolean
name|isTemporary
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|,
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
parameter_list|,
name|int
name|numBuckets
parameter_list|,
name|String
name|fieldDelim
parameter_list|,
name|String
name|fieldEscape
parameter_list|,
name|String
name|collItemDelim
parameter_list|,
name|String
name|mapKeyDelim
parameter_list|,
name|String
name|lineDelim
parameter_list|,
name|String
name|comment
parameter_list|,
name|String
name|inputFormat
parameter_list|,
name|String
name|outputFormat
parameter_list|,
name|String
name|location
parameter_list|,
name|String
name|serName
parameter_list|,
name|String
name|storageHandler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeProps
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblProps
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|skewedColNames
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|skewedColValues
parameter_list|,
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeys
parameter_list|,
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
parameter_list|,
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uniqueConstraints
parameter_list|,
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|notNullConstraints
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|isExternal
operator|=
name|isExternal
expr_stmt|;
name|this
operator|.
name|isTemporary
operator|=
name|isTemporary
expr_stmt|;
name|this
operator|.
name|bucketCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|bucketCols
argument_list|)
expr_stmt|;
name|this
operator|.
name|sortCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|(
name|sortCols
argument_list|)
expr_stmt|;
name|this
operator|.
name|collItemDelim
operator|=
name|collItemDelim
expr_stmt|;
name|this
operator|.
name|cols
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|this
operator|.
name|comment
operator|=
name|comment
expr_stmt|;
name|this
operator|.
name|fieldDelim
operator|=
name|fieldDelim
expr_stmt|;
name|this
operator|.
name|fieldEscape
operator|=
name|fieldEscape
expr_stmt|;
name|this
operator|.
name|inputFormat
operator|=
name|inputFormat
expr_stmt|;
name|this
operator|.
name|outputFormat
operator|=
name|outputFormat
expr_stmt|;
name|this
operator|.
name|lineDelim
operator|=
name|lineDelim
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|mapKeyDelim
operator|=
name|mapKeyDelim
expr_stmt|;
name|this
operator|.
name|numBuckets
operator|=
name|numBuckets
expr_stmt|;
name|this
operator|.
name|partCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|partCols
argument_list|)
expr_stmt|;
name|this
operator|.
name|serName
operator|=
name|serName
expr_stmt|;
name|this
operator|.
name|storageHandler
operator|=
name|storageHandler
expr_stmt|;
name|this
operator|.
name|serdeProps
operator|=
name|serdeProps
expr_stmt|;
name|this
operator|.
name|tblProps
operator|=
name|tblProps
expr_stmt|;
name|this
operator|.
name|ifNotExists
operator|=
name|ifNotExists
expr_stmt|;
name|this
operator|.
name|skewedColNames
operator|=
name|copyList
argument_list|(
name|skewedColNames
argument_list|)
expr_stmt|;
name|this
operator|.
name|skewedColValues
operator|=
name|copyList
argument_list|(
name|skewedColValues
argument_list|)
expr_stmt|;
name|this
operator|.
name|primaryKeys
operator|=
name|copyList
argument_list|(
name|primaryKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|foreignKeys
operator|=
name|copyList
argument_list|(
name|foreignKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|uniqueConstraints
operator|=
name|copyList
argument_list|(
name|uniqueConstraints
argument_list|)
expr_stmt|;
name|this
operator|.
name|notNullConstraints
operator|=
name|copyList
argument_list|(
name|notNullConstraints
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|copyList
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|copy
parameter_list|)
block|{
return|return
name|copy
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|copy
argument_list|)
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"columns"
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getColsString
parameter_list|()
block|{
return|return
name|Utilities
operator|.
name|getFieldSchemaString
argument_list|(
name|getCols
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"partition columns"
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPartColsString
parameter_list|()
block|{
return|return
name|Utilities
operator|.
name|getFieldSchemaString
argument_list|(
name|getPartCols
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"if not exists"
argument_list|,
name|displayOnlyOnTrue
operator|=
literal|true
argument_list|)
specifier|public
name|boolean
name|getIfNotExists
parameter_list|()
block|{
return|return
name|ifNotExists
return|;
block|}
specifier|public
name|void
name|setIfNotExists
parameter_list|(
name|boolean
name|ifNotExists
parameter_list|)
block|{
name|this
operator|.
name|ifNotExists
operator|=
name|ifNotExists
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"name"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
specifier|public
name|String
name|getDatabaseName
parameter_list|()
block|{
return|return
name|databaseName
return|;
block|}
specifier|public
name|void
name|setTableName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getCols
parameter_list|()
block|{
return|return
name|cols
return|;
block|}
specifier|public
name|void
name|setCols
parameter_list|(
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|)
block|{
name|this
operator|.
name|cols
operator|=
name|cols
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getPartCols
parameter_list|()
block|{
return|return
name|partCols
return|;
block|}
specifier|public
name|void
name|setPartCols
parameter_list|(
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
parameter_list|)
block|{
name|this
operator|.
name|partCols
operator|=
name|partCols
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|getPrimaryKeys
parameter_list|()
block|{
return|return
name|primaryKeys
return|;
block|}
specifier|public
name|void
name|setPrimaryKeys
parameter_list|(
name|ArrayList
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeys
parameter_list|)
block|{
name|this
operator|.
name|primaryKeys
operator|=
name|primaryKeys
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|getForeignKeys
parameter_list|()
block|{
return|return
name|foreignKeys
return|;
block|}
specifier|public
name|void
name|setForeignKeys
parameter_list|(
name|ArrayList
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
parameter_list|)
block|{
name|this
operator|.
name|foreignKeys
operator|=
name|foreignKeys
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|getUniqueConstraints
parameter_list|()
block|{
return|return
name|uniqueConstraints
return|;
block|}
specifier|public
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|getNotNullConstraints
parameter_list|()
block|{
return|return
name|notNullConstraints
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"bucket columns"
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBucketCols
parameter_list|()
block|{
return|return
name|bucketCols
return|;
block|}
specifier|public
name|void
name|setBucketCols
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|)
block|{
name|this
operator|.
name|bucketCols
operator|=
name|bucketCols
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"# buckets"
argument_list|)
specifier|public
name|Integer
name|getNumBucketsExplain
parameter_list|()
block|{
if|if
condition|(
name|numBuckets
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|numBuckets
return|;
block|}
block|}
specifier|public
name|int
name|getNumBuckets
parameter_list|()
block|{
return|return
name|numBuckets
return|;
block|}
specifier|public
name|void
name|setNumBuckets
parameter_list|(
name|int
name|numBuckets
parameter_list|)
block|{
name|this
operator|.
name|numBuckets
operator|=
name|numBuckets
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"field delimiter"
argument_list|)
specifier|public
name|String
name|getFieldDelim
parameter_list|()
block|{
return|return
name|fieldDelim
return|;
block|}
specifier|public
name|void
name|setFieldDelim
parameter_list|(
name|String
name|fieldDelim
parameter_list|)
block|{
name|this
operator|.
name|fieldDelim
operator|=
name|fieldDelim
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"field escape"
argument_list|)
specifier|public
name|String
name|getFieldEscape
parameter_list|()
block|{
return|return
name|fieldEscape
return|;
block|}
specifier|public
name|void
name|setFieldEscape
parameter_list|(
name|String
name|fieldEscape
parameter_list|)
block|{
name|this
operator|.
name|fieldEscape
operator|=
name|fieldEscape
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"collection delimiter"
argument_list|)
specifier|public
name|String
name|getCollItemDelim
parameter_list|()
block|{
return|return
name|collItemDelim
return|;
block|}
specifier|public
name|void
name|setCollItemDelim
parameter_list|(
name|String
name|collItemDelim
parameter_list|)
block|{
name|this
operator|.
name|collItemDelim
operator|=
name|collItemDelim
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"map key delimiter"
argument_list|)
specifier|public
name|String
name|getMapKeyDelim
parameter_list|()
block|{
return|return
name|mapKeyDelim
return|;
block|}
specifier|public
name|void
name|setMapKeyDelim
parameter_list|(
name|String
name|mapKeyDelim
parameter_list|)
block|{
name|this
operator|.
name|mapKeyDelim
operator|=
name|mapKeyDelim
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"line delimiter"
argument_list|)
specifier|public
name|String
name|getLineDelim
parameter_list|()
block|{
return|return
name|lineDelim
return|;
block|}
specifier|public
name|void
name|setLineDelim
parameter_list|(
name|String
name|lineDelim
parameter_list|)
block|{
name|this
operator|.
name|lineDelim
operator|=
name|lineDelim
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"comment"
argument_list|)
specifier|public
name|String
name|getComment
parameter_list|()
block|{
return|return
name|comment
return|;
block|}
specifier|public
name|void
name|setComment
parameter_list|(
name|String
name|comment
parameter_list|)
block|{
name|this
operator|.
name|comment
operator|=
name|comment
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"input format"
argument_list|)
specifier|public
name|String
name|getInputFormat
parameter_list|()
block|{
return|return
name|inputFormat
return|;
block|}
specifier|public
name|void
name|setInputFormat
parameter_list|(
name|String
name|inputFormat
parameter_list|)
block|{
name|this
operator|.
name|inputFormat
operator|=
name|inputFormat
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"output format"
argument_list|)
specifier|public
name|String
name|getOutputFormat
parameter_list|()
block|{
return|return
name|outputFormat
return|;
block|}
specifier|public
name|void
name|setOutputFormat
parameter_list|(
name|String
name|outputFormat
parameter_list|)
block|{
name|this
operator|.
name|outputFormat
operator|=
name|outputFormat
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"storage handler"
argument_list|)
specifier|public
name|String
name|getStorageHandler
parameter_list|()
block|{
return|return
name|storageHandler
return|;
block|}
specifier|public
name|void
name|setStorageHandler
parameter_list|(
name|String
name|storageHandler
parameter_list|)
block|{
name|this
operator|.
name|storageHandler
operator|=
name|storageHandler
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"location"
argument_list|)
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"isExternal"
argument_list|,
name|displayOnlyOnTrue
operator|=
literal|true
argument_list|)
specifier|public
name|boolean
name|isExternal
parameter_list|()
block|{
return|return
name|isExternal
return|;
block|}
specifier|public
name|void
name|setExternal
parameter_list|(
name|boolean
name|isExternal
parameter_list|)
block|{
name|this
operator|.
name|isExternal
operator|=
name|isExternal
expr_stmt|;
block|}
comment|/**    * @return the sortCols    */
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"sort columns"
argument_list|)
specifier|public
name|List
argument_list|<
name|Order
argument_list|>
name|getSortCols
parameter_list|()
block|{
return|return
name|sortCols
return|;
block|}
comment|/**    * @param sortCols    *          the sortCols to set    */
specifier|public
name|void
name|setSortCols
parameter_list|(
name|ArrayList
argument_list|<
name|Order
argument_list|>
name|sortCols
parameter_list|)
block|{
name|this
operator|.
name|sortCols
operator|=
name|sortCols
expr_stmt|;
block|}
comment|/**    * @return the serDeName    */
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"serde name"
argument_list|)
specifier|public
name|String
name|getSerName
parameter_list|()
block|{
return|return
name|serName
return|;
block|}
comment|/**    * @param serName    *          the serName to set    */
specifier|public
name|void
name|setSerName
parameter_list|(
name|String
name|serName
parameter_list|)
block|{
name|this
operator|.
name|serName
operator|=
name|serName
expr_stmt|;
block|}
comment|/**    * @return the serDe properties    */
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"serde properties"
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSerdeProps
parameter_list|()
block|{
return|return
name|serdeProps
return|;
block|}
comment|/**    * @param serdeProps    *          the serde properties to set    */
specifier|public
name|void
name|setSerdeProps
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeProps
parameter_list|)
block|{
name|this
operator|.
name|serdeProps
operator|=
name|serdeProps
expr_stmt|;
block|}
comment|/**    * @return the table properties    */
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"table properties"
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getTblProps
parameter_list|()
block|{
return|return
name|tblProps
return|;
block|}
comment|/**    * @param tblProps    *          the table properties to set    */
specifier|public
name|void
name|setTblProps
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblProps
parameter_list|)
block|{
name|this
operator|.
name|tblProps
operator|=
name|tblProps
expr_stmt|;
block|}
comment|/**    * @return the skewedColNames    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSkewedColNames
parameter_list|()
block|{
return|return
name|skewedColNames
return|;
block|}
comment|/**    * @param skewedColNames the skewedColNames to set    */
specifier|public
name|void
name|setSkewedColNames
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|skewedColNames
parameter_list|)
block|{
name|this
operator|.
name|skewedColNames
operator|=
name|skewedColNames
expr_stmt|;
block|}
comment|/**    * @return the skewedColValues    */
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getSkewedColValues
parameter_list|()
block|{
return|return
name|skewedColValues
return|;
block|}
comment|/**    * @param skewedColValues the skewedColValues to set    */
specifier|public
name|void
name|setSkewedColValues
parameter_list|(
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|skewedColValues
parameter_list|)
block|{
name|this
operator|.
name|skewedColValues
operator|=
name|skewedColValues
expr_stmt|;
block|}
specifier|public
name|void
name|validate
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
operator|(
name|this
operator|.
name|getCols
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|this
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
comment|// for now make sure that serde exists
if|if
condition|(
name|Table
operator|.
name|hasMetastoreBasedSchema
argument_list|(
name|conf
argument_list|,
name|serName
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|getStorageHandler
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_TBL_DDL_SERDE
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
return|return;
block|}
if|if
condition|(
name|this
operator|.
name|getStorageHandler
argument_list|()
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|origin
init|=
name|Class
operator|.
name|forName
argument_list|(
name|this
operator|.
name|getOutputFormat
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Utilities
operator|.
name|getSessionSpecifiedClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|replaced
init|=
name|HiveFileFormatUtils
operator|.
name|getOutputFormatSubstitute
argument_list|(
name|origin
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|HiveOutputFormat
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|replaced
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_OUTPUT_FORMAT_TYPE
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|CLASSPATH_ERROR
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|ParseUtils
operator|.
name|validateColumnNameUniqueness
argument_list|(
name|this
operator|.
name|getCols
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getBucketCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// all columns in cluster and sort are valid columns
name|Iterator
argument_list|<
name|String
argument_list|>
name|bucketCols
init|=
name|this
operator|.
name|getBucketCols
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bucketCols
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|bucketCol
init|=
name|bucketCols
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|colNamesIter
init|=
name|colNames
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|colNamesIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|colName
init|=
name|colNamesIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|bucketCol
operator|.
name|equalsIgnoreCase
argument_list|(
name|colName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_COLUMN
operator|.
name|getMsg
argument_list|(
literal|" \'"
operator|+
name|bucketCol
operator|+
literal|"\'"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|this
operator|.
name|getSortCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// all columns in cluster and sort are valid columns
name|Iterator
argument_list|<
name|Order
argument_list|>
name|sortCols
init|=
name|this
operator|.
name|getSortCols
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|sortCols
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|sortCol
init|=
name|sortCols
operator|.
name|next
argument_list|()
operator|.
name|getCol
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|colNamesIter
init|=
name|colNames
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|colNamesIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|colName
init|=
name|colNamesIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortCol
operator|.
name|equalsIgnoreCase
argument_list|(
name|colName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_COLUMN
operator|.
name|getMsg
argument_list|(
literal|" \'"
operator|+
name|sortCol
operator|+
literal|"\'"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|this
operator|.
name|getPartCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// there is no overlap between columns and partitioning columns
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|partColsIter
init|=
name|this
operator|.
name|getPartCols
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|partColsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FieldSchema
name|fs
init|=
name|partColsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|partCol
init|=
name|fs
operator|.
name|getName
argument_list|()
decl_stmt|;
name|TypeInfo
name|pti
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pti
operator|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|fs
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get type info"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|pti
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|PARTITION_COLUMN_NON_PRIMITIVE
operator|.
name|getMsg
argument_list|()
operator|+
literal|" Found "
operator|+
name|partCol
operator|+
literal|" of type: "
operator|+
name|fs
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
name|Iterator
argument_list|<
name|String
argument_list|>
name|colNamesIter
init|=
name|colNames
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|colNamesIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|colName
init|=
name|BaseSemanticAnalyzer
operator|.
name|unescapeIdentifier
argument_list|(
name|colNamesIter
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|partCol
operator|.
name|equalsIgnoreCase
argument_list|(
name|colName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|COLUMN_REPEATED_IN_PARTITIONING_COLS
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/* Validate skewed information. */
name|ValidationUtility
operator|.
name|validateSkewedInformation
argument_list|(
name|colNames
argument_list|,
name|this
operator|.
name|getSkewedColNames
argument_list|()
argument_list|,
name|this
operator|.
name|getSkewedColValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the isStoredAsSubDirectories    */
specifier|public
name|boolean
name|isStoredAsSubDirectories
parameter_list|()
block|{
return|return
name|isStoredAsSubDirectories
return|;
block|}
comment|/**    * @param isStoredAsSubDirectories the isStoredAsSubDirectories to set    */
specifier|public
name|void
name|setStoredAsSubDirectories
parameter_list|(
name|boolean
name|isStoredAsSubDirectories
parameter_list|)
block|{
name|this
operator|.
name|isStoredAsSubDirectories
operator|=
name|isStoredAsSubDirectories
expr_stmt|;
block|}
comment|/**    * @return the nullFormat    */
specifier|public
name|String
name|getNullFormat
parameter_list|()
block|{
return|return
name|nullFormat
return|;
block|}
comment|/**    * Set null format string    * @param nullFormat    */
specifier|public
name|void
name|setNullFormat
parameter_list|(
name|String
name|nullFormat
parameter_list|)
block|{
name|this
operator|.
name|nullFormat
operator|=
name|nullFormat
expr_stmt|;
block|}
comment|/**    * @return the isTemporary    */
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"isTemporary"
argument_list|,
name|displayOnlyOnTrue
operator|=
literal|true
argument_list|)
specifier|public
name|boolean
name|isTemporary
parameter_list|()
block|{
return|return
name|isTemporary
return|;
block|}
comment|/**    * @param isTemporary table is Temporary or not.    */
specifier|public
name|void
name|setTemporary
parameter_list|(
name|boolean
name|isTemporary
parameter_list|)
block|{
name|this
operator|.
name|isTemporary
operator|=
name|isTemporary
expr_stmt|;
block|}
comment|/**    * @return the isMaterialization    */
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"isMaterialization"
argument_list|,
name|displayOnlyOnTrue
operator|=
literal|true
argument_list|)
specifier|public
name|boolean
name|isMaterialization
parameter_list|()
block|{
return|return
name|isMaterialization
return|;
block|}
comment|/**    * @param isMaterialization table is a materialization or not.    */
specifier|public
name|void
name|setMaterialization
parameter_list|(
name|boolean
name|isMaterialization
parameter_list|)
block|{
name|this
operator|.
name|isMaterialization
operator|=
name|isMaterialization
expr_stmt|;
block|}
comment|/**    * @param replaceMode Determine if this CreateTable should behave like a replace-into alter instead    */
specifier|public
name|void
name|setReplaceMode
parameter_list|(
name|boolean
name|replaceMode
parameter_list|)
block|{
name|this
operator|.
name|replaceMode
operator|=
name|replaceMode
expr_stmt|;
block|}
comment|/**    * @return true if this CreateTable should behave like a replace-into alter instead    */
specifier|public
name|boolean
name|getReplaceMode
parameter_list|()
block|{
return|return
name|replaceMode
return|;
block|}
comment|/**    * @param replicationSpec Sets the replication spec governing this create.    * This parameter will have meaningful values only for creates happening as a result of a replication.    */
specifier|public
name|void
name|setReplicationSpec
parameter_list|(
name|ReplicationSpec
name|replicationSpec
parameter_list|)
block|{
name|this
operator|.
name|replicationSpec
operator|=
name|replicationSpec
expr_stmt|;
block|}
comment|/**    * @return what kind of replication scope this drop is running under.    * This can result in a "CREATE/REPLACE IF NEWER THAN" kind of semantic    */
specifier|public
name|ReplicationSpec
name|getReplicationSpec
parameter_list|()
block|{
if|if
condition|(
name|replicationSpec
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|replicationSpec
operator|=
operator|new
name|ReplicationSpec
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|replicationSpec
return|;
block|}
specifier|public
name|boolean
name|isCTAS
parameter_list|()
block|{
return|return
name|isCTAS
return|;
block|}
specifier|public
name|Table
name|toTable
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|databaseName
init|=
name|getDatabaseName
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|databaseName
operator|==
literal|null
operator|||
name|tableName
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|String
index|[]
name|names
init|=
name|Utilities
operator|.
name|getDbTableName
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|databaseName
operator|=
name|names
index|[
literal|0
index|]
expr_stmt|;
name|tableName
operator|=
name|names
index|[
literal|1
index|]
expr_stmt|;
block|}
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|getTblProps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|putAll
argument_list|(
name|getTblProps
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getPartCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setPartCols
argument_list|(
name|getPartCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getNumBuckets
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|tbl
operator|.
name|setNumBuckets
argument_list|(
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getStorageHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|META_TABLE_STORAGE
argument_list|,
name|getStorageHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HiveStorageHandler
name|storageHandler
init|=
name|tbl
operator|.
name|getStorageHandler
argument_list|()
decl_stmt|;
comment|/*      * We use LazySimpleSerDe by default.      *      * If the user didn't specify a SerDe, and any of the columns are not simple      * types, we will have to use DynamicSerDe instead.      */
if|if
condition|(
name|getSerName
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|storageHandler
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Default to LazySimpleSerDe for table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|serDeClassName
init|=
name|storageHandler
operator|.
name|getSerDeClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Use StorageHandler-supplied "
operator|+
name|serDeClassName
operator|+
literal|" for table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|serDeClassName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// let's validate that the serde exists
name|DDLTask
operator|.
name|validateSerDe
argument_list|(
name|getSerName
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerializationLib
argument_list|(
name|getSerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getFieldDelim
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|,
name|getFieldDelim
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
name|getFieldDelim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getFieldEscape
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|ESCAPE_CHAR
argument_list|,
name|getFieldEscape
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getCollItemDelim
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|COLLECTION_DELIM
argument_list|,
name|getCollItemDelim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getMapKeyDelim
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|MAPKEY_DELIM
argument_list|,
name|getMapKeyDelim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getLineDelim
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|LINE_DELIM
argument_list|,
name|getLineDelim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getNullFormat
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|,
name|getNullFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getSerdeProps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iter
init|=
name|getSerdeProps
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setSerdeParam
argument_list|(
name|m
operator|.
name|getKey
argument_list|()
argument_list|,
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setFields
argument_list|(
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getBucketCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setBucketCols
argument_list|(
name|getBucketCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getSortCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSortCols
argument_list|(
name|getSortCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getComment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"comment"
argument_list|,
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setDataLocation
argument_list|(
operator|new
name|Path
argument_list|(
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getSkewedColNames
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSkewedColNames
argument_list|(
name|getSkewedColNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getSkewedColValues
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|setSkewedColValues
argument_list|(
name|getSkewedColValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|setTemporary
argument_list|(
name|isTemporary
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setStoredAsSubDirectories
argument_list|(
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setInputFormatClass
argument_list|(
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setOutputFormatClass
argument_list|(
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
comment|// only persist input/output format to metadata when it is explicitly specified.
comment|// Otherwise, load lazily via StorageHandler at query time.
if|if
condition|(
name|getInputFormat
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getInputFormat
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setInputFormat
argument_list|(
name|tbl
operator|.
name|getInputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getOutputFormat
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getOutputFormat
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|setOutputFormat
argument_list|(
name|tbl
operator|.
name|getOutputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DDLTask
operator|.
name|doesTableNeedLocation
argument_list|(
name|tbl
argument_list|)
condition|)
block|{
comment|// If location is specified - ensure that it is a full qualified name
name|DDLTask
operator|.
name|makeLocationQualified
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getSd
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isExternal
argument_list|()
condition|)
block|{
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setTableType
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
argument_list|)
expr_stmt|;
block|}
comment|// If the sorted columns is a superset of bucketed columns, store this fact.
comment|// It can be later used to
comment|// optimize some group-by queries. Note that, the order does not matter as
comment|// long as it in the first
comment|// 'n' columns where 'n' is the length of the bucketed columns.
if|if
condition|(
operator|(
name|tbl
operator|.
name|getBucketCols
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|tbl
operator|.
name|getSortCols
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
init|=
name|tbl
operator|.
name|getBucketCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
init|=
name|tbl
operator|.
name|getSortCols
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|sortCols
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|sortCols
operator|.
name|size
argument_list|()
operator|>=
name|bucketCols
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
name|boolean
name|found
init|=
literal|true
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterBucketCols
init|=
name|bucketCols
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterBucketCols
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|bucketCol
init|=
name|iterBucketCols
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|colFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bucketCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|bucketCol
operator|.
name|equals
argument_list|(
name|sortCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getCol
argument_list|()
argument_list|)
condition|)
block|{
name|colFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|colFound
operator|==
literal|false
condition|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"SORTBUCKETCOLSPREFIX"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|isCTAS
operator|&&
operator|(
name|tbl
operator|.
name|getPath
argument_list|()
operator|==
literal|null
operator|||
operator|(
name|tbl
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|isExternal
argument_list|()
operator|)
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|tbl
operator|.
name|isPartitioned
argument_list|()
operator|&&
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|)
condition|)
block|{
name|StatsSetupConst
operator|.
name|setStatsStateForCreateTable
argument_list|(
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnNames
argument_list|(
name|tbl
operator|.
name|getCols
argument_list|()
argument_list|)
argument_list|,
name|StatsSetupConst
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|StatsSetupConst
operator|.
name|setStatsStateForCreateTable
argument_list|(
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|,
literal|null
argument_list|,
name|StatsSetupConst
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
return|return
name|tbl
return|;
block|}
specifier|public
name|void
name|setInitialMmWriteId
parameter_list|(
name|Long
name|mmWriteId
parameter_list|)
block|{
name|this
operator|.
name|initialMmWriteId
operator|=
name|mmWriteId
expr_stmt|;
block|}
specifier|public
name|Long
name|getInitialMmWriteId
parameter_list|()
block|{
return|return
name|initialMmWriteId
return|;
block|}
specifier|public
name|FileSinkDesc
name|getAndUnsetWriter
parameter_list|()
block|{
name|FileSinkDesc
name|fsd
init|=
name|writer
decl_stmt|;
name|writer
operator|=
literal|null
expr_stmt|;
return|return
name|fsd
return|;
block|}
specifier|public
name|void
name|setWriter
parameter_list|(
name|FileSinkDesc
name|writer
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
block|}
block|}
end_class

end_unit

