begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|SettableListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|SettableMapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|SettableStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|final
specifier|public
class|class
name|OrcStruct
implements|implements
name|Writable
block|{
specifier|private
name|Object
index|[]
name|fields
decl_stmt|;
name|OrcStruct
parameter_list|(
name|int
name|children
parameter_list|)
block|{
name|fields
operator|=
operator|new
name|Object
index|[
name|children
index|]
expr_stmt|;
block|}
name|Object
name|getFieldValue
parameter_list|(
name|int
name|fieldIndex
parameter_list|)
block|{
return|return
name|fields
index|[
name|fieldIndex
index|]
return|;
block|}
name|void
name|setFieldValue
parameter_list|(
name|int
name|fieldIndex
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|fields
index|[
name|fieldIndex
index|]
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|int
name|getNumFields
parameter_list|()
block|{
return|return
name|fields
operator|.
name|length
return|;
block|}
comment|/**    * Change the number of fields in the struct. No effect if the number of    * fields is the same. The old field values are copied to the new array.    * @param numFields the new number of fields    */
specifier|public
name|void
name|setNumFields
parameter_list|(
name|int
name|numFields
parameter_list|)
block|{
if|if
condition|(
name|fields
operator|.
name|length
operator|!=
name|numFields
condition|)
block|{
name|Object
index|[]
name|oldFields
init|=
name|fields
decl_stmt|;
name|fields
operator|=
operator|new
name|Object
index|[
name|numFields
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|oldFields
argument_list|,
literal|0
argument_list|,
name|fields
argument_list|,
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|oldFields
operator|.
name|length
argument_list|,
name|numFields
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Destructively make this object link to other's values.    * @param other the value to point to    */
name|void
name|linkFields
parameter_list|(
name|OrcStruct
name|other
parameter_list|)
block|{
name|fields
operator|=
name|other
operator|.
name|fields
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"write unsupported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"readFields unsupported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|other
operator|.
name|getClass
argument_list|()
operator|!=
name|OrcStruct
operator|.
name|class
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|OrcStruct
name|oth
init|=
operator|(
name|OrcStruct
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|length
operator|!=
name|oth
operator|.
name|fields
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|fields
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|oth
operator|.
name|fields
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|fields
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|oth
operator|.
name|fields
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|fields
operator|.
name|length
decl_stmt|;
for|for
control|(
name|Object
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|result
operator|^=
name|field
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
class|class
name|Field
implements|implements
name|StructField
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|ObjectInspector
name|inspector
decl_stmt|;
specifier|private
specifier|final
name|int
name|offset
decl_stmt|;
name|Field
parameter_list|(
name|String
name|name
parameter_list|,
name|ObjectInspector
name|inspector
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|inspector
operator|=
name|inspector
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getFieldObjectInspector
parameter_list|()
block|{
return|return
name|inspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFieldID
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFieldComment
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
class|class
name|OrcStructInspector
extends|extends
name|SettableStructObjectInspector
block|{
specifier|private
name|List
argument_list|<
name|StructField
argument_list|>
name|fields
decl_stmt|;
specifier|protected
name|OrcStructInspector
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
name|OrcStructInspector
parameter_list|(
name|List
argument_list|<
name|StructField
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
name|OrcStructInspector
parameter_list|(
name|StructTypeInfo
name|info
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|info
operator|.
name|getAllStructFieldNames
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypes
init|=
name|info
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<
name|StructField
argument_list|>
argument_list|(
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldNames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|fieldNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|createObjectInspector
argument_list|(
name|fieldTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|OrcStructInspector
parameter_list|(
name|int
name|columnId
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|)
block|{
name|OrcProto
operator|.
name|Type
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|int
name|fieldCount
init|=
name|type
operator|.
name|getSubtypesCount
argument_list|()
decl_stmt|;
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<
name|StructField
argument_list|>
argument_list|(
name|fieldCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
operator|++
name|i
control|)
block|{
name|int
name|fieldType
init|=
name|type
operator|.
name|getSubtypes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|type
operator|.
name|getFieldNames
argument_list|(
name|i
argument_list|)
argument_list|,
name|createObjectInspector
argument_list|(
name|fieldType
argument_list|,
name|types
argument_list|)
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|StructField
argument_list|>
name|getAllStructFieldRefs
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
annotation|@
name|Override
specifier|public
name|StructField
name|getStructFieldRef
parameter_list|(
name|String
name|s
parameter_list|)
block|{
for|for
control|(
name|StructField
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getFieldName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|field
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getStructFieldData
parameter_list|(
name|Object
name|object
parameter_list|,
name|StructField
name|field
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|offset
init|=
operator|(
operator|(
name|Field
operator|)
name|field
operator|)
operator|.
name|offset
decl_stmt|;
name|OrcStruct
name|struct
init|=
operator|(
name|OrcStruct
operator|)
name|object
decl_stmt|;
if|if
condition|(
name|offset
operator|>=
name|struct
operator|.
name|fields
operator|.
name|length
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|struct
operator|.
name|fields
index|[
name|offset
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getStructFieldsDataAsList
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|OrcStruct
name|struct
init|=
operator|(
name|OrcStruct
operator|)
name|object
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|struct
operator|.
name|fields
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|child
range|:
name|struct
operator|.
name|fields
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"struct<"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|StructField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|STRUCT
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|create
parameter_list|()
block|{
return|return
operator|new
name|OrcStruct
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|setStructFieldData
parameter_list|(
name|Object
name|struct
parameter_list|,
name|StructField
name|field
parameter_list|,
name|Object
name|fieldValue
parameter_list|)
block|{
name|OrcStruct
name|orcStruct
init|=
operator|(
name|OrcStruct
operator|)
name|struct
decl_stmt|;
name|int
name|offset
init|=
operator|(
operator|(
name|Field
operator|)
name|field
operator|)
operator|.
name|offset
decl_stmt|;
comment|// if the offset is bigger than our current number of fields, grow it
if|if
condition|(
name|orcStruct
operator|.
name|getNumFields
argument_list|()
operator|<=
name|offset
condition|)
block|{
name|orcStruct
operator|.
name|setNumFields
argument_list|(
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|orcStruct
operator|.
name|setFieldValue
argument_list|(
name|offset
argument_list|,
name|fieldValue
argument_list|)
expr_stmt|;
return|return
name|struct
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|StructField
argument_list|>
name|other
init|=
operator|(
operator|(
name|OrcStructInspector
operator|)
name|o
operator|)
operator|.
name|fields
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|size
argument_list|()
operator|!=
name|fields
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|StructField
name|left
init|=
name|other
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|StructField
name|right
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|left
operator|.
name|getFieldName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|right
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|&&
name|left
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|equals
argument_list|(
name|right
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
specifier|static
class|class
name|OrcMapObjectInspector
implements|implements
name|MapObjectInspector
implements|,
name|SettableMapObjectInspector
block|{
specifier|private
name|ObjectInspector
name|key
decl_stmt|;
specifier|private
name|ObjectInspector
name|value
decl_stmt|;
specifier|private
name|OrcMapObjectInspector
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
name|OrcMapObjectInspector
parameter_list|(
name|MapTypeInfo
name|info
parameter_list|)
block|{
name|key
operator|=
name|createObjectInspector
argument_list|(
name|info
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|=
name|createObjectInspector
argument_list|(
name|info
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|OrcMapObjectInspector
parameter_list|(
name|int
name|columnId
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|)
block|{
name|OrcProto
operator|.
name|Type
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|key
operator|=
name|createObjectInspector
argument_list|(
name|type
operator|.
name|getSubtypes
argument_list|(
literal|0
argument_list|)
argument_list|,
name|types
argument_list|)
expr_stmt|;
name|value
operator|=
name|createObjectInspector
argument_list|(
name|type
operator|.
name|getSubtypes
argument_list|(
literal|1
argument_list|)
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getMapKeyObjectInspector
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getMapValueObjectInspector
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getMapValueElement
parameter_list|(
name|Object
name|map
parameter_list|,
name|Object
name|key
parameter_list|)
block|{
return|return
operator|(
operator|(
name|map
operator|==
literal|null
operator|||
name|key
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|(
operator|(
name|Map
operator|)
name|map
operator|)
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|getMap
parameter_list|(
name|Object
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|Map
operator|)
name|map
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMapSize
parameter_list|(
name|Object
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
operator|(
operator|(
name|Map
operator|)
name|map
operator|)
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
literal|"map<"
operator|+
name|key
operator|.
name|getTypeName
argument_list|()
operator|+
literal|","
operator|+
name|value
operator|.
name|getTypeName
argument_list|()
operator|+
literal|">"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|MAP
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|create
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|put
parameter_list|(
name|Object
name|map
parameter_list|,
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
operator|(
operator|(
name|Map
operator|)
name|map
operator|)
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|remove
parameter_list|(
name|Object
name|map
parameter_list|,
name|Object
name|key
parameter_list|)
block|{
operator|(
operator|(
name|Map
operator|)
name|map
operator|)
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|clear
parameter_list|(
name|Object
name|map
parameter_list|)
block|{
operator|(
operator|(
name|Map
operator|)
name|map
operator|)
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|map
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|OrcMapObjectInspector
name|other
init|=
operator|(
name|OrcMapObjectInspector
operator|)
name|o
decl_stmt|;
return|return
name|other
operator|.
name|key
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|&&
name|other
operator|.
name|value
operator|.
name|equals
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
block|}
specifier|static
class|class
name|OrcListObjectInspector
implements|implements
name|ListObjectInspector
implements|,
name|SettableListObjectInspector
block|{
specifier|private
name|ObjectInspector
name|child
decl_stmt|;
specifier|private
name|OrcListObjectInspector
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
name|OrcListObjectInspector
parameter_list|(
name|ListTypeInfo
name|info
parameter_list|)
block|{
name|child
operator|=
name|createObjectInspector
argument_list|(
name|info
operator|.
name|getListElementTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|OrcListObjectInspector
parameter_list|(
name|int
name|columnId
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|)
block|{
name|OrcProto
operator|.
name|Type
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|child
operator|=
name|createObjectInspector
argument_list|(
name|type
operator|.
name|getSubtypes
argument_list|(
literal|0
argument_list|)
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getListElementObjectInspector
parameter_list|()
block|{
return|return
name|child
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getListElement
parameter_list|(
name|Object
name|list
parameter_list|,
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|i
operator|<
literal|0
operator|||
name|i
operator|>=
name|getListLength
argument_list|(
name|list
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
operator|(
name|List
operator|)
name|list
operator|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getListLength
parameter_list|(
name|Object
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
operator|(
operator|(
name|List
operator|)
name|list
operator|)
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|?
argument_list|>
name|getList
parameter_list|(
name|Object
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|List
operator|)
name|list
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
literal|"array<"
operator|+
name|child
operator|.
name|getTypeName
argument_list|()
operator|+
literal|">"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|LIST
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|create
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|set
parameter_list|(
name|Object
name|list
parameter_list|,
name|int
name|index
parameter_list|,
name|Object
name|element
parameter_list|)
block|{
name|List
name|l
init|=
operator|(
name|List
operator|)
name|list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|l
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|index
operator|+
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|l
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|resize
parameter_list|(
name|Object
name|list
parameter_list|,
name|int
name|newSize
parameter_list|)
block|{
operator|(
operator|(
name|ArrayList
operator|)
name|list
operator|)
operator|.
name|ensureCapacity
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|ObjectInspector
name|other
init|=
operator|(
operator|(
name|OrcListObjectInspector
operator|)
name|o
operator|)
operator|.
name|child
decl_stmt|;
return|return
name|other
operator|.
name|equals
argument_list|(
name|child
argument_list|)
return|;
block|}
block|}
block|}
specifier|static
specifier|public
name|ObjectInspector
name|createObjectInspector
parameter_list|(
name|TypeInfo
name|info
parameter_list|)
block|{
switch|switch
condition|(
name|info
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|info
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|FLOAT
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableFloatObjectInspector
return|;
case|case
name|DOUBLE
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
return|;
case|case
name|BOOLEAN
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBooleanObjectInspector
return|;
case|case
name|BYTE
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableByteObjectInspector
return|;
case|case
name|SHORT
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableShortObjectInspector
return|;
case|case
name|INT
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
return|;
case|case
name|LONG
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
return|;
case|case
name|BINARY
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
return|;
case|case
name|STRING
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
return|;
case|case
name|CHAR
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|info
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|info
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
return|;
case|case
name|DATE
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
return|;
case|case
name|DECIMAL
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|info
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown primitive type "
operator|+
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|info
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
case|case
name|STRUCT
case|:
return|return
operator|new
name|OrcStructInspector
argument_list|(
operator|(
name|StructTypeInfo
operator|)
name|info
argument_list|)
return|;
case|case
name|UNION
case|:
return|return
operator|new
name|OrcUnion
operator|.
name|OrcUnionObjectInspector
argument_list|(
operator|(
name|UnionTypeInfo
operator|)
name|info
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
operator|new
name|OrcMapObjectInspector
argument_list|(
operator|(
name|MapTypeInfo
operator|)
name|info
argument_list|)
return|;
case|case
name|LIST
case|:
return|return
operator|new
name|OrcListObjectInspector
argument_list|(
operator|(
name|ListTypeInfo
operator|)
name|info
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown type "
operator|+
name|info
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|static
name|ObjectInspector
name|createObjectInspector
parameter_list|(
name|int
name|columnId
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|)
block|{
name|OrcProto
operator|.
name|Type
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|FLOAT
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableFloatObjectInspector
return|;
case|case
name|DOUBLE
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
return|;
case|case
name|BOOLEAN
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBooleanObjectInspector
return|;
case|case
name|BYTE
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableByteObjectInspector
return|;
case|case
name|SHORT
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableShortObjectInspector
return|;
case|case
name|INT
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
return|;
case|case
name|LONG
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
return|;
case|case
name|BINARY
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
return|;
case|case
name|STRING
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
return|;
case|case
name|CHAR
case|:
if|if
condition|(
operator|!
name|type
operator|.
name|hasMaximumLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Illegal use of char type without length in ORC type definition."
argument_list|)
throw|;
block|}
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|getCharTypeInfo
argument_list|(
name|type
operator|.
name|getMaximumLength
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|VARCHAR
case|:
if|if
condition|(
operator|!
name|type
operator|.
name|hasMaximumLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Illegal use of varchar type without length in ORC type definition."
argument_list|)
throw|;
block|}
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|getVarcharTypeInfo
argument_list|(
name|type
operator|.
name|getMaximumLength
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
return|;
case|case
name|DATE
case|:
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
return|;
case|case
name|DECIMAL
case|:
name|int
name|precision
init|=
name|type
operator|.
name|hasPrecision
argument_list|()
condition|?
name|type
operator|.
name|getPrecision
argument_list|()
else|:
name|HiveDecimal
operator|.
name|SYSTEM_DEFAULT_PRECISION
decl_stmt|;
name|int
name|scale
init|=
name|type
operator|.
name|hasScale
argument_list|()
condition|?
name|type
operator|.
name|getScale
argument_list|()
else|:
name|HiveDecimal
operator|.
name|SYSTEM_DEFAULT_SCALE
decl_stmt|;
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|getDecimalTypeInfo
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
argument_list|)
return|;
case|case
name|STRUCT
case|:
return|return
operator|new
name|OrcStructInspector
argument_list|(
name|columnId
argument_list|,
name|types
argument_list|)
return|;
case|case
name|UNION
case|:
return|return
operator|new
name|OrcUnion
operator|.
name|OrcUnionObjectInspector
argument_list|(
name|columnId
argument_list|,
name|types
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
operator|new
name|OrcMapObjectInspector
argument_list|(
name|columnId
argument_list|,
name|types
argument_list|)
return|;
case|case
name|LIST
case|:
return|return
operator|new
name|OrcListObjectInspector
argument_list|(
name|columnId
argument_list|,
name|types
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unknown type "
operator|+
name|type
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

