begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveAggregate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Planner rule that reduces aggregate functions in  * {@link org.apache.calcite.rel.core.Aggregate}s to simpler forms.  *  *<p>Rewrites:  *<ul>  *  *<li>COUNT(x)&rarr; COUNT(*) if x is not nullable  *</ul>  */
end_comment

begin_class
specifier|public
class|class
name|HiveAggregateReduceRule
extends|extends
name|RelOptRule
block|{
comment|/** The singleton. */
specifier|public
specifier|static
specifier|final
name|HiveAggregateReduceRule
name|INSTANCE
init|=
operator|new
name|HiveAggregateReduceRule
argument_list|()
decl_stmt|;
comment|/** Private constructor. */
specifier|private
name|HiveAggregateReduceRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|HiveAggregate
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|RelBuilder
name|relBuilder
init|=
name|call
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|Aggregate
name|aggRel
init|=
operator|(
name|Aggregate
operator|)
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|aggRel
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
comment|// We try to rewrite COUNT(x) into COUNT(*) if x is not nullable.
comment|// We remove duplicate aggregate calls as well.
name|boolean
name|rewrite
init|=
literal|false
decl_stmt|;
name|boolean
name|identity
init|=
literal|true
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|AggregateCall
argument_list|,
name|Integer
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|indexes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
init|=
name|aggRel
operator|.
name|getAggCallList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|newAggCalls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|aggCalls
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|nextIdx
init|=
name|aggRel
operator|.
name|getGroupCount
argument_list|()
operator|+
name|aggRel
operator|.
name|getIndicatorCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggCalls
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|AggregateCall
name|aggCall
init|=
name|aggCalls
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|COUNT
operator|&&
operator|!
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|args
init|=
name|aggCall
operator|.
name|getArgList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|nullableArgs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|args
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|arg
range|:
name|args
control|)
block|{
if|if
condition|(
name|aggRel
operator|.
name|getInput
argument_list|()
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|arg
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|isNullable
argument_list|()
condition|)
block|{
name|nullableArgs
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nullableArgs
operator|.
name|size
argument_list|()
operator|!=
name|args
operator|.
name|size
argument_list|()
condition|)
block|{
name|aggCall
operator|=
name|aggCall
operator|.
name|copy
argument_list|(
name|nullableArgs
argument_list|,
name|aggCall
operator|.
name|filterArg
argument_list|)
expr_stmt|;
name|rewrite
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Integer
name|idx
init|=
name|mapping
operator|.
name|get
argument_list|(
name|aggCall
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
literal|null
condition|)
block|{
name|newAggCalls
operator|.
name|add
argument_list|(
name|aggCall
argument_list|)
expr_stmt|;
name|idx
operator|=
name|nextIdx
operator|++
expr_stmt|;
name|mapping
operator|.
name|put
argument_list|(
name|aggCall
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rewrite
operator|=
literal|true
expr_stmt|;
name|identity
operator|=
literal|false
expr_stmt|;
block|}
name|indexes
operator|.
name|add
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rewrite
condition|)
block|{
comment|// We trigger the transform
specifier|final
name|Aggregate
name|newAggregate
init|=
name|aggRel
operator|.
name|copy
argument_list|(
name|aggRel
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|aggRel
operator|.
name|getInput
argument_list|()
argument_list|,
name|aggRel
operator|.
name|indicator
argument_list|,
name|aggRel
operator|.
name|getGroupSet
argument_list|()
argument_list|,
name|aggRel
operator|.
name|getGroupSets
argument_list|()
argument_list|,
name|newAggCalls
argument_list|)
decl_stmt|;
if|if
condition|(
name|identity
condition|)
block|{
name|call
operator|.
name|transformTo
argument_list|(
name|newAggregate
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|offset
init|=
name|aggRel
operator|.
name|getGroupCount
argument_list|()
operator|+
name|aggRel
operator|.
name|getIndicatorCount
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|projList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offset
condition|;
operator|++
name|i
control|)
block|{
name|projList
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|aggRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|aggRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|projList
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|aggRel
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
name|indexes
operator|.
name|get
argument_list|(
name|i
operator|-
name|offset
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|call
operator|.
name|transformTo
argument_list|(
name|relBuilder
operator|.
name|push
argument_list|(
name|newAggregate
argument_list|)
operator|.
name|project
argument_list|(
name|projList
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

