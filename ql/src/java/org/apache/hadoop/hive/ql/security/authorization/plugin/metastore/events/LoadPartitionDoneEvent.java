begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|metastore
operator|.
name|events
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreEventContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreLoadPartitionDoneEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveOperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
operator|.
name|HivePrivilegeObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|metastore
operator|.
name|HiveMetaStoreAuthorizableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|metastore
operator|.
name|HiveMetaStoreAuthzInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/*  Authorizable Event for HiveMetaStore operation LoadPartition  */
end_comment

begin_class
specifier|public
class|class
name|LoadPartitionDoneEvent
extends|extends
name|HiveMetaStoreAuthorizableEvent
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LoadPartitionDoneEvent
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|COMMAND_STR
init|=
literal|"alter table load partition"
decl_stmt|;
specifier|public
name|LoadPartitionDoneEvent
parameter_list|(
name|PreEventContext
name|preEventContext
parameter_list|)
block|{
name|super
argument_list|(
name|preEventContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HiveMetaStoreAuthzInfo
name|getAuthzContext
parameter_list|()
block|{
name|HiveMetaStoreAuthzInfo
name|ret
init|=
operator|new
name|HiveMetaStoreAuthzInfo
argument_list|(
name|preEventContext
argument_list|,
name|HiveOperationType
operator|.
name|ALTERTABLE_ADDPARTS
argument_list|,
name|getInputHObjs
argument_list|()
argument_list|,
name|getOutputHObjs
argument_list|()
argument_list|,
name|COMMAND_STR
argument_list|)
decl_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|getInputHObjs
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|getOutputHObjs
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"==> DropTableEvent.getOutputHObjs()"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|PreLoadPartitionDoneEvent
name|event
init|=
operator|(
name|PreLoadPartitionDoneEvent
operator|)
name|preEventContext
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|HivePrivilegeObject
argument_list|(
name|HivePrivilegeObjectType
operator|.
name|TABLE_OR_VIEW
argument_list|,
name|event
operator|.
name|getDbName
argument_list|()
argument_list|,
name|event
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"<== DropTableEvent.getOutputHObjs(): ret="
operator|+
name|ret
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

