begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|HiveObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapredWork
import|;
end_import

begin_comment
comment|/**  * A wrapper over hive objects that allows interfacing with Map-Reduce  * sorting/serialization layers.   *  * WritableComparable Hive Objects are deserialized both in map and reduce phases.  * Because they have a fixed schema - we just need to initialize a single deserializer  * Either the serializer/deserializer is passed in at construction time (map output)  * or it is obtained via JobConf at construction time  *  * The base version allows a tag to be serialized out alongside. But it is not used for  * grouping/partitioning (only for sorting).  *  */
end_comment

begin_class
specifier|public
class|class
name|WritableComparableHiveObject
extends|extends
name|WritableHiveObject
implements|implements
name|WritableComparable
block|{
comment|/**    * number of fields used in partition function.    * 0 - no fields will be used    * -1 - a random number will be used.    * Integer.MAX_VALUE - use all key fields.    */
specifier|static
name|int
name|numPartitionFields
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|static
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|setNumPartitionFields
parameter_list|(
name|int
name|numPartitionFields
parameter_list|)
block|{
name|WritableComparableHiveObject
operator|.
name|numPartitionFields
operator|=
name|numPartitionFields
expr_stmt|;
block|}
specifier|static
name|List
argument_list|<
name|SerDeField
argument_list|>
name|topLevelFields
init|=
literal|null
decl_stmt|;
specifier|static
name|boolean
name|isPrimitive
decl_stmt|;
specifier|static
name|HiveObjectSerializer
name|gHos
decl_stmt|;
comment|/**    * Constructor called by Hive on map output    */
specifier|public
name|WritableComparableHiveObject
parameter_list|(
name|int
name|tag
parameter_list|,
name|HiveObject
name|ho
parameter_list|,
name|HiveObjectSerializer
name|hos
parameter_list|)
block|{
name|super
argument_list|(
name|tag
argument_list|,
name|ho
argument_list|,
name|hos
argument_list|)
expr_stmt|;
block|}
comment|/**    * Default constructor invoked when map-reduce is constructing this object    */
specifier|public
name|WritableComparableHiveObject
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * This function is invoked when map-reduce is constructing this object    * We construct one global deserializer for this case.    *    * TODO: how to do this initialization without making this configurable?    * Need to find a very early hook!    *     * TODO: Replace NaiiveSerializer with MetadataTypedSerDe, and configure    * the MetadataTypedSerDe right here.    */
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|gHos
operator|==
literal|null
condition|)
block|{
name|mapredWork
name|gWork
init|=
name|Utilities
operator|.
name|getMapRedWork
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|gHos
operator|=
operator|new
name|NaiiveSerializer
argument_list|()
expr_stmt|;
block|}
name|hos
operator|=
name|gHos
expr_stmt|;
block|}
comment|/**    * Get tag out first like the base class - but use the same deserializer    * for getting the hive object (since the key schema is constant)    */
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|tag
operator|=
operator|(
name|int
operator|)
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ho
operator|=
name|hos
operator|.
name|deserialize
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|// afaik - this is never called
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not invented here"
argument_list|)
throw|;
block|}
comment|/**    * This api should only be called during the reduce to check for group equality    * This asserts default grouping behavior (group by all columns). Note we don't    * use tags for grouping. Tags are only used for sorting and this behavior is    * controlled by HiveObjectComparator    * TODO (low priority): Make it possible to specify the grouping columns.    */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|HiveObject
name|ho_rhs
init|=
operator|(
operator|(
name|WritableComparableHiveObject
operator|)
name|o
operator|)
operator|.
name|getHo
argument_list|()
decl_stmt|;
if|if
condition|(
name|topLevelFields
operator|==
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|ho
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|topLevelFields
operator|=
name|HiveObject
operator|.
name|nlist
expr_stmt|;
name|isPrimitive
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|topLevelFields
operator|=
name|ho
operator|.
name|getFields
argument_list|()
expr_stmt|;
name|isPrimitive
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot get Fields from HiveObject"
argument_list|)
throw|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|isPrimitive
condition|)
block|{
name|Comparable
name|a
init|=
operator|(
name|Comparable
operator|)
name|ho
operator|.
name|getJavaObject
argument_list|()
decl_stmt|;
name|Comparable
name|b
init|=
operator|(
name|Comparable
operator|)
name|ho_rhs
operator|.
name|getJavaObject
argument_list|()
decl_stmt|;
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|// there is an assumption that the number of fields are the same.
comment|// and that all the constituent fields are comparables.
comment|// Assumption #1 has to be enforced by the deserializer.
comment|// Assumption #2 has to be enforced by only allow primitive comparable types
comment|// as group fields.
for|for
control|(
name|SerDeField
name|onef
range|:
name|topLevelFields
control|)
block|{
name|Comparable
name|a
init|=
operator|(
name|Comparable
operator|)
name|ho
operator|.
name|get
argument_list|(
name|onef
argument_list|)
operator|.
name|getJavaObject
argument_list|()
decl_stmt|;
name|Comparable
name|b
init|=
operator|(
name|Comparable
operator|)
name|ho_rhs
operator|.
name|get
argument_list|(
name|onef
argument_list|)
operator|.
name|getJavaObject
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
return|return
operator|(
name|ret
operator|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"HiveObject.get()/getJavaObject() methods failed"
argument_list|)
throw|;
block|}
comment|// all fields are the same.
return|return
operator|(
literal|0
operator|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// This is a special case when we want the rows to be randomly distributed to
comment|// reducers for load balancing problem.  In this case, we use a random number
comment|// as the hashCode.
if|if
condition|(
name|numPartitionFields
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|random
operator|.
name|nextInt
argument_list|()
return|;
block|}
if|if
condition|(
name|topLevelFields
operator|==
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|ho
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|topLevelFields
operator|=
name|HiveObject
operator|.
name|nlist
expr_stmt|;
name|isPrimitive
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|topLevelFields
operator|=
name|ho
operator|.
name|getFields
argument_list|()
expr_stmt|;
name|isPrimitive
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot get Fields from HiveObject"
argument_list|)
throw|;
block|}
block|}
name|int
name|ret
init|=
literal|0
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isPrimitive
condition|)
block|{
return|return
name|ho
operator|.
name|getJavaObject
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
name|int
name|numFields
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SerDeField
name|onef
range|:
name|topLevelFields
control|)
block|{
name|Object
name|o
init|=
name|ho
operator|.
name|get
argument_list|(
name|onef
argument_list|)
operator|.
name|getJavaObject
argument_list|()
decl_stmt|;
comment|// TODO: replace with something smarter (borrowed from Text.java)
name|ret
operator|=
name|ret
operator|*
literal|31
operator|+
operator|(
name|o
operator|==
literal|null
condition|?
literal|0
else|:
name|o
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|numFields
operator|++
expr_stmt|;
if|if
condition|(
name|numFields
operator|>=
name|numPartitionFields
condition|)
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"HiveObject.get()/getJavaObject() failed"
argument_list|)
throw|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
block|}
end_class

end_unit

