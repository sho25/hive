begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|view
operator|.
name|materialized
operator|.
name|alter
operator|.
name|rebuild
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLSemanticAnalyzerFactory
operator|.
name|DDLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveTxnManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|CalcitePlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Analyzer for alter materialized view rebuild commands.  */
end_comment

begin_class
annotation|@
name|DDLType
argument_list|(
name|type
operator|=
name|HiveParser
operator|.
name|TOK_ALTER_MATERIALIZED_VIEW_REBUILD
argument_list|)
specifier|public
class|class
name|AlterMaterializedViewRebuildAnalyzer
extends|extends
name|CalcitePlanner
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AlterMaterializedViewRebuildAnalyzer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|AlterMaterializedViewRebuildAnalyzer
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyzeInternal
parameter_list|(
name|ASTNode
name|root
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|mvRebuildMode
operator|!=
name|MaterializationRebuildMode
operator|.
name|NONE
condition|)
block|{
name|super
operator|.
name|analyzeInternal
argument_list|(
name|root
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
index|[]
name|qualifiedTableName
init|=
name|getQualifiedTableName
argument_list|(
operator|(
name|ASTNode
operator|)
name|root
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|dbDotTable
init|=
name|getDotName
argument_list|(
name|qualifiedTableName
argument_list|)
decl_stmt|;
name|ASTNode
name|rewrittenAST
init|=
name|getRewrittenAST
argument_list|(
name|qualifiedTableName
argument_list|,
name|dbDotTable
argument_list|)
decl_stmt|;
name|mvRebuildMode
operator|=
name|MaterializationRebuildMode
operator|.
name|INSERT_OVERWRITE_REBUILD
expr_stmt|;
name|mvRebuildDbName
operator|=
name|qualifiedTableName
index|[
literal|0
index|]
expr_stmt|;
name|mvRebuildName
operator|=
name|qualifiedTableName
index|[
literal|1
index|]
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Rebuilding materialized view "
operator|+
name|dbDotTable
argument_list|)
expr_stmt|;
name|super
operator|.
name|analyzeInternal
argument_list|(
name|rewrittenAST
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|REWRITTEN_INSERT_STATEMENT
init|=
literal|"INSERT OVERWRITE TABLE `%s`.`%s` %s"
decl_stmt|;
specifier|private
name|ASTNode
name|getRewrittenAST
parameter_list|(
name|String
index|[]
name|qualifiedTableName
parameter_list|,
name|String
name|dbDotTable
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ASTNode
name|rewrittenAST
decl_stmt|;
comment|// We need to go lookup the table and get the select statement and then parse it.
try|try
block|{
name|Table
name|table
init|=
name|getTableObjectByName
argument_list|(
name|dbDotTable
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|isMaterializedView
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|REBUILD_NO_MATERIALIZED_VIEW
argument_list|)
throw|;
block|}
comment|// We need to use the expanded text for the materialized view, as it will contain
comment|// the qualified table aliases, etc.
name|String
name|viewText
init|=
name|table
operator|.
name|getViewExpandedText
argument_list|()
decl_stmt|;
if|if
condition|(
name|viewText
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|MATERIALIZED_VIEW_DEF_EMPTY
argument_list|)
throw|;
block|}
name|Context
name|ctx
init|=
operator|new
name|Context
argument_list|(
name|queryState
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|rewrittenInsertStatement
init|=
name|String
operator|.
name|format
argument_list|(
name|REWRITTEN_INSERT_STATEMENT
argument_list|,
name|qualifiedTableName
index|[
literal|0
index|]
argument_list|,
name|qualifiedTableName
index|[
literal|1
index|]
argument_list|,
name|viewText
argument_list|)
decl_stmt|;
name|rewrittenAST
operator|=
name|ParseUtils
operator|.
name|parse
argument_list|(
name|rewrittenInsertStatement
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|ctx
operator|.
name|addRewrittenStatementContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|ctx
operator|.
name|isExplainPlan
argument_list|()
operator|&&
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
comment|// Acquire lock for the given materialized view. Only one rebuild per materialized view can be triggered at a
comment|// given time, as otherwise we might produce incorrect results if incremental maintenance is triggered.
name|HiveTxnManager
name|txnManager
init|=
name|getTxnMgr
argument_list|()
decl_stmt|;
name|LockState
name|state
decl_stmt|;
try|try
block|{
name|state
operator|=
name|txnManager
operator|.
name|acquireMaterializationRebuildLock
argument_list|(
name|qualifiedTableName
index|[
literal|0
index|]
argument_list|,
name|qualifiedTableName
index|[
literal|1
index|]
argument_list|,
name|txnManager
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Exception acquiring lock for rebuilding the materialized view"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|state
operator|!=
name|LockState
operator|.
name|ACQUIRED
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Another process is rebuilding the materialized view "
operator|+
name|dbDotTable
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|rewrittenAST
return|;
block|}
block|}
end_class

end_unit

