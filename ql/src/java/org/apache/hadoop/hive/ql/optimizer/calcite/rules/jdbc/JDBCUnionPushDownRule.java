begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|jdbc
operator|.
name|JdbcRules
operator|.
name|JdbcUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|jdbc
operator|.
name|JdbcRules
operator|.
name|JdbcUnionRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|jdbc
operator|.
name|HiveJdbcConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * JDBCUnionPushDownRule convert a {@link org.apache.hadoop.hive.ql.optimizer.calcite.reloperators.HiveUnion}  * into a {@link org.apache.calcite.adapter.jdbc.JdbcRules.JdbcUnion}  * and pushes it down below the {@link org.apache.hadoop.hive.ql.optimizer.calcite.reloperators.jdbc.HiveJdbcConverter}}  * operator so it will be sent to the external table.  */
end_comment

begin_class
specifier|public
class|class
name|JDBCUnionPushDownRule
extends|extends
name|RelOptRule
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JDBCUnionPushDownRule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|JDBCUnionPushDownRule
name|INSTANCE
init|=
operator|new
name|JDBCUnionPushDownRule
argument_list|()
decl_stmt|;
specifier|public
name|JDBCUnionPushDownRule
parameter_list|()
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|HiveUnion
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|HiveJdbcConverter
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|operand
argument_list|(
name|HiveJdbcConverter
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|HiveUnion
name|union
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|HiveJdbcConverter
name|converter1
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|HiveJdbcConverter
name|converter2
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|//The actual check should be the compare of the connection string of the external tables
comment|/*if (converter1.getJdbcConvention().equals(converter2.getJdbcConvention()) == false) {       return false;     }*/
if|if
condition|(
operator|!
name|converter1
operator|.
name|getJdbcConvention
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|converter2
operator|.
name|getJdbcConvention
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|union
operator|.
name|getInputs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"JDBCUnionPushDown has been called"
argument_list|)
expr_stmt|;
specifier|final
name|HiveUnion
name|union
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|HiveJdbcConverter
name|converter1
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|HiveJdbcConverter
name|converter2
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|unionInput
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|converter1
operator|.
name|getInput
argument_list|()
argument_list|,
name|converter2
operator|.
name|getInput
argument_list|()
argument_list|)
decl_stmt|;
name|Union
name|newHiveUnion
init|=
operator|(
name|Union
operator|)
name|union
operator|.
name|copy
argument_list|(
name|union
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|unionInput
argument_list|,
name|union
operator|.
name|all
argument_list|)
decl_stmt|;
name|JdbcUnion
name|newJdbcUnion
init|=
operator|(
name|JdbcUnion
operator|)
operator|new
name|JdbcUnionRule
argument_list|(
name|converter1
operator|.
name|getJdbcConvention
argument_list|()
argument_list|)
operator|.
name|convert
argument_list|(
name|newHiveUnion
argument_list|)
decl_stmt|;
if|if
condition|(
name|newJdbcUnion
operator|!=
literal|null
condition|)
block|{
name|RelNode
name|converterRes
init|=
name|converter1
operator|.
name|copy
argument_list|(
name|converter1
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|newJdbcUnion
argument_list|)
argument_list|)
decl_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|converterRes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

