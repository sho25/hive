begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"inline"
argument_list|,
name|value
operator|=
literal|"_FUNC_( ARRAY( STRUCT()[,STRUCT()] "
operator|+
literal|"- explodes and array and struct into a table"
argument_list|)
specifier|public
class|class
name|GenericUDTFInline
extends|extends
name|GenericUDTF
block|{
specifier|private
specifier|transient
name|ListObjectInspector
name|li
decl_stmt|;
specifier|public
name|GenericUDTFInline
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|StructObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|ois
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
comment|//There should be one argument that is a array of struct
if|if
condition|(
name|ois
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"UDF tables only one argument"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ois
index|[
literal|0
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|LIST
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"Top level object must be an array but "
operator|+
literal|"was "
operator|+
name|ois
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
name|li
operator|=
operator|(
name|ListObjectInspector
operator|)
name|ois
index|[
literal|0
index|]
expr_stmt|;
name|ObjectInspector
name|sub
init|=
name|li
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
name|sub
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|STRUCT
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"The sub element must be struct, but was "
operator|+
name|sub
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|(
name|StructObjectInspector
operator|)
name|sub
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
index|[]
name|os
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|Object
name|row
range|:
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|li
operator|.
name|getList
argument_list|(
name|os
index|[
literal|0
index|]
argument_list|)
argument_list|)
control|)
block|{
name|forward
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|HiveException
block|{   }
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"inline"
return|;
block|}
block|}
end_class

end_unit

