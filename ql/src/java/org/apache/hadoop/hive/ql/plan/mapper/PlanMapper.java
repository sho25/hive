begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
operator|.
name|OpTreeSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
operator|.
name|OpTreeSignatureFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Enables to connect related objects to eachother.  *  * Most importantly it aids to connect Operators to OperatorStats and probably RelNodes.  */
end_comment

begin_class
specifier|public
class|class
name|PlanMapper
block|{
name|Set
argument_list|<
name|EquivGroup
argument_list|>
name|groups
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Object
argument_list|,
name|EquivGroup
argument_list|>
name|objectMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * A set of objects which are representing the same thing.    *    * A Group may contain different kind of things which are connected by their purpose;    * For example currently a group may contain the following objects:    *<ul>    *<li> Operator(s) - which are doing the actual work;    *   there might be more than one, since an optimization may replace an operator with a new one    *<li> Signature - to enable inter-plan look up of the same data    *<li> OperatorStats - collected runtime information    *<ul>    */
specifier|public
class|class
name|EquivGroup
block|{
name|Set
argument_list|<
name|Object
argument_list|>
name|members
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|add
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|members
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return;
block|}
name|members
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|objectMap
operator|.
name|put
argument_list|(
name|o
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getAll
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|m
range|:
name|members
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|(
name|T
operator|)
name|m
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
comment|/**    * States that the two objects are representing the same.    *    * For example if during an optimization Operator_A is replaced by a specialized Operator_A1;    * then those two can be linked.    */
specifier|public
name|void
name|link
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|Set
argument_list|<
name|Object
argument_list|>
name|keySet
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|IdentityHashMap
argument_list|<
name|Object
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|keySet
operator|.
name|add
argument_list|(
name|o1
argument_list|)
expr_stmt|;
name|keySet
operator|.
name|add
argument_list|(
name|o2
argument_list|)
expr_stmt|;
name|keySet
operator|.
name|add
argument_list|(
name|getKeyFor
argument_list|(
name|o1
argument_list|)
argument_list|)
expr_stmt|;
name|keySet
operator|.
name|add
argument_list|(
name|getKeyFor
argument_list|(
name|o2
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|EquivGroup
argument_list|>
name|mGroups
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|IdentityHashMap
argument_list|<
name|EquivGroup
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|keySet
control|)
block|{
name|EquivGroup
name|group
init|=
name|objectMap
operator|.
name|get
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|mGroups
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mGroups
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"equivalence mapping violation"
argument_list|)
throw|;
block|}
name|EquivGroup
name|targetGroup
init|=
name|mGroups
operator|.
name|isEmpty
argument_list|()
condition|?
operator|new
name|EquivGroup
argument_list|()
else|:
name|mGroups
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|targetGroup
argument_list|)
expr_stmt|;
name|targetGroup
operator|.
name|add
argument_list|(
name|o1
argument_list|)
expr_stmt|;
name|targetGroup
operator|.
name|add
argument_list|(
name|o2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|OpTreeSignatureFactory
name|signatureCache
init|=
name|OpTreeSignatureFactory
operator|.
name|newCache
argument_list|()
decl_stmt|;
specifier|private
name|Object
name|getKeyFor
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Operator
condition|)
block|{
name|Operator
name|operator
init|=
operator|(
name|Operator
operator|)
name|o
decl_stmt|;
return|return
name|signatureCache
operator|.
name|getSignature
argument_list|(
name|operator
argument_list|)
return|;
block|}
return|return
name|o
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getAll
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|EquivGroup
name|g
range|:
name|groups
control|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|g
operator|.
name|getAll
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|runMapper
parameter_list|(
name|GroupTransformer
name|mapper
parameter_list|)
block|{
for|for
control|(
name|EquivGroup
name|equivGroup
range|:
name|groups
control|)
block|{
name|mapper
operator|.
name|map
argument_list|(
name|equivGroup
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|lookupAll
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|Object
name|key
parameter_list|)
block|{
name|EquivGroup
name|group
init|=
name|objectMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
name|Objects
operator|.
name|toString
argument_list|(
name|key
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|group
operator|.
name|getAll
argument_list|(
name|clazz
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|lookup
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|Object
name|key
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|all
init|=
name|lookupAll
argument_list|(
name|clazz
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|all
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
comment|// FIXME: use a different exception type?
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected match count is 1; but got:"
operator|+
name|all
argument_list|)
throw|;
block|}
return|return
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|Iterator
argument_list|<
name|EquivGroup
argument_list|>
name|iterateGroups
parameter_list|()
block|{
return|return
name|groups
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|OpTreeSignature
name|getSignatureOf
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|op
parameter_list|)
block|{
name|OpTreeSignature
name|sig
init|=
name|signatureCache
operator|.
name|getSignature
argument_list|(
name|op
argument_list|)
decl_stmt|;
return|return
name|sig
return|;
block|}
block|}
end_class

end_unit

