begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_comment
comment|/**  * Class for copying the group key from an input batch to an output batch.  */
end_comment

begin_class
specifier|public
class|class
name|VectorGroupKeyHelper
extends|extends
name|VectorColumnSetInfo
block|{
specifier|private
name|int
index|[]
name|outputColumnNums
decl_stmt|;
specifier|public
name|VectorGroupKeyHelper
parameter_list|(
name|int
name|keyCount
parameter_list|)
block|{
name|super
argument_list|(
name|keyCount
argument_list|)
expr_stmt|;
block|}
name|void
name|init
parameter_list|(
name|VectorExpression
index|[]
name|keyExpressions
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// NOTE: To support pruning the grouping set id dummy key by VectorGroupbyOpeator MERGE_PARTIAL
comment|// case, we use the keyCount passed to the constructor and not keyExpressions.length.
comment|// Inspect the output type of each key expression.  And, remember the output columns.
name|outputColumnNums
operator|=
operator|new
name|int
index|[
name|keyCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyCount
condition|;
operator|++
name|i
control|)
block|{
name|String
name|typeName
init|=
name|VectorizationContext
operator|.
name|mapTypeNameSynonyms
argument_list|(
name|keyExpressions
index|[
name|i
index|]
operator|.
name|getOutputType
argument_list|()
argument_list|)
decl_stmt|;
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|Type
name|columnVectorType
init|=
name|VectorizationContext
operator|.
name|getColumnVectorTypeFromTypeInfo
argument_list|(
name|typeInfo
argument_list|)
decl_stmt|;
name|addKey
argument_list|(
name|columnVectorType
argument_list|)
expr_stmt|;
name|outputColumnNums
index|[
name|i
index|]
operator|=
name|keyExpressions
index|[
name|i
index|]
operator|.
name|getOutputColumn
argument_list|()
expr_stmt|;
block|}
name|finishAdding
argument_list|()
expr_stmt|;
block|}
comment|/*    * This helper method copies the group keys from one vectorized row batch to another,    * but does not increment the outputBatch.size (i.e. the next output position).    *     * It was designed for VectorGroupByOperator's sorted reduce group batch processing mode    * to copy the group keys at startGroup.    */
specifier|public
name|void
name|copyGroupKey
parameter_list|(
name|VectorizedRowBatch
name|inputBatch
parameter_list|,
name|VectorizedRowBatch
name|outputBatch
parameter_list|,
name|DataOutputBuffer
name|buffer
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|longIndices
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|columnIndex
init|=
name|outputColumnNums
index|[
name|longIndices
index|[
name|i
index|]
index|]
decl_stmt|;
name|LongColumnVector
name|inputColumnVector
init|=
operator|(
name|LongColumnVector
operator|)
name|inputBatch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
name|LongColumnVector
name|outputColumnVector
init|=
operator|(
name|LongColumnVector
operator|)
name|outputBatch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
comment|// This vectorized code pattern says:
comment|//    If the input batch has no nulls at all (noNulls is true) OR
comment|//    the input row is NOT NULL, copy the value.
comment|//
comment|//    Otherwise, we have a NULL input value.  The standard way to mark a NULL in the
comment|//    output batch is: turn off noNulls indicating there is at least one NULL in the batch
comment|//    and mark that row as NULL.
comment|//
comment|//    When a vectorized row batch is reset, noNulls is set to true and the isNull array
comment|//    is zeroed.
comment|//
comment|// We grab the key at index 0.  We don't care about selected or repeating since all keys
comment|// in the input batch are suppose to be the same.
comment|//
if|if
condition|(
name|inputColumnVector
operator|.
name|noNulls
operator|||
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|outputColumnVector
operator|.
name|vector
index|[
name|outputBatch
operator|.
name|size
index|]
operator|=
name|inputColumnVector
operator|.
name|vector
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|outputColumnVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outputColumnVector
operator|.
name|isNull
index|[
name|outputBatch
operator|.
name|size
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doubleIndices
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|columnIndex
init|=
name|outputColumnNums
index|[
name|doubleIndices
index|[
name|i
index|]
index|]
decl_stmt|;
name|DoubleColumnVector
name|inputColumnVector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|inputBatch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
name|DoubleColumnVector
name|outputColumnVector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|outputBatch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|inputColumnVector
operator|.
name|noNulls
operator|||
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|outputColumnVector
operator|.
name|vector
index|[
name|outputBatch
operator|.
name|size
index|]
operator|=
name|inputColumnVector
operator|.
name|vector
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|outputColumnVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outputColumnVector
operator|.
name|isNull
index|[
name|outputBatch
operator|.
name|size
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stringIndices
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|columnIndex
init|=
name|outputColumnNums
index|[
name|stringIndices
index|[
name|i
index|]
index|]
decl_stmt|;
name|BytesColumnVector
name|inputColumnVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|inputBatch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
name|BytesColumnVector
name|outputColumnVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|outputBatch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|inputColumnVector
operator|.
name|noNulls
operator|||
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
comment|// Copy bytes into scratch buffer.
name|int
name|start
init|=
name|buffer
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|inputColumnVector
operator|.
name|length
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
name|buffer
operator|.
name|write
argument_list|(
name|inputColumnVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|inputColumnVector
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"bad write"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
name|outputColumnVector
operator|.
name|setRef
argument_list|(
name|outputBatch
operator|.
name|size
argument_list|,
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outputColumnVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outputColumnVector
operator|.
name|isNull
index|[
name|outputBatch
operator|.
name|size
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|decimalIndices
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|columnIndex
init|=
name|outputColumnNums
index|[
name|decimalIndices
index|[
name|i
index|]
index|]
decl_stmt|;
name|DecimalColumnVector
name|inputColumnVector
init|=
operator|(
name|DecimalColumnVector
operator|)
name|inputBatch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
name|DecimalColumnVector
name|outputColumnVector
init|=
operator|(
name|DecimalColumnVector
operator|)
name|outputBatch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|inputColumnVector
operator|.
name|noNulls
operator|||
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
comment|// Since we store references to HiveDecimalWritable instances, we must use the update method instead
comment|// of plain assignment.
name|outputColumnVector
operator|.
name|set
argument_list|(
name|outputBatch
operator|.
name|size
argument_list|,
name|inputColumnVector
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outputColumnVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outputColumnVector
operator|.
name|isNull
index|[
name|outputBatch
operator|.
name|size
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|timestampIndices
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|columnIndex
init|=
name|outputColumnNums
index|[
name|timestampIndices
index|[
name|i
index|]
index|]
decl_stmt|;
name|TimestampColumnVector
name|inputColumnVector
init|=
operator|(
name|TimestampColumnVector
operator|)
name|inputBatch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
name|TimestampColumnVector
name|outputColumnVector
init|=
operator|(
name|TimestampColumnVector
operator|)
name|outputBatch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|inputColumnVector
operator|.
name|noNulls
operator|||
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|outputColumnVector
operator|.
name|setElement
argument_list|(
name|outputBatch
operator|.
name|size
argument_list|,
literal|0
argument_list|,
name|inputColumnVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outputColumnVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outputColumnVector
operator|.
name|isNull
index|[
name|outputBatch
operator|.
name|size
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|intervalDayTimeIndices
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|columnIndex
init|=
name|outputColumnNums
index|[
name|intervalDayTimeIndices
index|[
name|i
index|]
index|]
decl_stmt|;
name|IntervalDayTimeColumnVector
name|inputColumnVector
init|=
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|inputBatch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
name|IntervalDayTimeColumnVector
name|outputColumnVector
init|=
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|outputBatch
operator|.
name|cols
index|[
name|columnIndex
index|]
decl_stmt|;
if|if
condition|(
name|inputColumnVector
operator|.
name|noNulls
operator|||
operator|!
name|inputColumnVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|outputColumnVector
operator|.
name|setElement
argument_list|(
name|outputBatch
operator|.
name|size
argument_list|,
literal|0
argument_list|,
name|inputColumnVector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outputColumnVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outputColumnVector
operator|.
name|isNull
index|[
name|outputBatch
operator|.
name|size
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

