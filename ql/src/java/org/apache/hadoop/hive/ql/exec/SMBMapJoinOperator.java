begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|RowContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FetchWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredLocalWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredLocalWork
operator|.
name|BucketMapJoinContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SMBJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|InspectableObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * Sorted Merge Map Join Operator.  */
end_comment

begin_class
specifier|public
class|class
name|SMBMapJoinOperator
extends|extends
name|AbstractMapJoinOperator
argument_list|<
name|SMBJoinDesc
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SMBMapJoinOperator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|MapredLocalWork
name|localWork
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
name|fetchOperators
decl_stmt|;
specifier|transient
name|Map
argument_list|<
name|Byte
argument_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|keyWritables
decl_stmt|;
specifier|transient
name|Map
argument_list|<
name|Byte
argument_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|nextKeyWritables
decl_stmt|;
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|RowContainer
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|nextGroupStorage
decl_stmt|;
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|RowContainer
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
name|candidateStorage
decl_stmt|;
specifier|transient
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|String
argument_list|>
name|tagToAlias
decl_stmt|;
specifier|private
specifier|transient
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|Boolean
argument_list|>
name|fetchOpDone
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|transient
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|Boolean
argument_list|>
name|foundNextKeyGroup
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
specifier|transient
name|boolean
name|firstFetchHappened
init|=
literal|false
decl_stmt|;
specifier|transient
name|boolean
name|localWorkInited
init|=
literal|false
decl_stmt|;
specifier|public
name|SMBMapJoinOperator
parameter_list|()
block|{   }
specifier|public
name|SMBMapJoinOperator
parameter_list|(
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
name|mapJoinOp
parameter_list|)
block|{
name|super
argument_list|(
name|mapJoinOp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|initializeOp
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|firstRow
operator|=
literal|true
expr_stmt|;
name|closeCalled
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|firstFetchHappened
operator|=
literal|false
expr_stmt|;
name|nextGroupStorage
operator|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|RowContainer
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|candidateStorage
operator|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|RowContainer
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|int
name|bucketSize
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPJOINBUCKETCACHESIZE
argument_list|)
decl_stmt|;
name|byte
name|storePos
init|=
operator|(
name|byte
operator|)
literal|0
decl_stmt|;
for|for
control|(
name|Byte
name|alias
range|:
name|order
control|)
block|{
name|RowContainer
name|rc
init|=
name|getRowContainer
argument_list|(
name|hconf
argument_list|,
name|storePos
argument_list|,
name|alias
argument_list|,
name|bucketSize
argument_list|)
decl_stmt|;
name|nextGroupStorage
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|storePos
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|RowContainer
name|candidateRC
init|=
name|getRowContainer
argument_list|(
name|hconf
argument_list|,
name|storePos
argument_list|,
name|alias
argument_list|,
name|bucketSize
argument_list|)
decl_stmt|;
name|candidateStorage
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|candidateRC
argument_list|)
expr_stmt|;
name|storePos
operator|++
expr_stmt|;
block|}
name|tagToAlias
operator|=
name|conf
operator|.
name|getTagToAlias
argument_list|()
expr_stmt|;
name|keyWritables
operator|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|nextKeyWritables
operator|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Byte
name|alias
range|:
name|order
control|)
block|{
if|if
condition|(
name|alias
operator|!=
operator|(
name|byte
operator|)
name|posBigTable
condition|)
block|{
name|fetchOpDone
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
name|foundNextKeyGroup
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|initializeLocalWork
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|initializeMapredLocalWork
argument_list|(
name|this
operator|.
name|getConf
argument_list|()
argument_list|,
name|hconf
argument_list|,
name|this
operator|.
name|getConf
argument_list|()
operator|.
name|getLocalWork
argument_list|()
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|super
operator|.
name|initializeLocalWork
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initializeMapredLocalWork
parameter_list|(
name|MapJoinDesc
name|conf
parameter_list|,
name|Configuration
name|hconf
parameter_list|,
name|MapredLocalWork
name|localWork
parameter_list|,
name|Log
name|l4j
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|localWork
operator|==
literal|null
operator|||
name|localWorkInited
condition|)
block|{
return|return;
block|}
name|localWorkInited
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|localWork
operator|=
name|localWork
expr_stmt|;
name|fetchOperators
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
argument_list|()
expr_stmt|;
comment|// create map local operators
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FetchWork
argument_list|>
name|entry
range|:
name|localWork
operator|.
name|getAliasToFetchWork
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|fetchOperators
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|FetchOperator
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
operator|new
name|JobConf
argument_list|(
name|hconf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|l4j
operator|!=
literal|null
condition|)
block|{
name|l4j
operator|.
name|info
argument_list|(
literal|"fetchoperator for "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" created"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
name|entry
range|:
name|fetchOperators
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|forwardOp
init|=
name|localWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// All the operators need to be initialized before process
name|forwardOp
operator|.
name|setExecContext
argument_list|(
name|this
operator|.
name|getExecContext
argument_list|()
argument_list|)
expr_stmt|;
name|forwardOp
operator|.
name|initialize
argument_list|(
name|this
operator|.
name|getExecContext
argument_list|()
operator|.
name|getJc
argument_list|()
argument_list|,
operator|new
name|ObjectInspector
index|[]
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getOutputObjectInspector
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|l4j
operator|.
name|info
argument_list|(
literal|"fetchoperator for "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" initialized"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|processOp
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|tag
operator|==
name|posBigTable
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|getExecContext
argument_list|()
operator|.
name|inputFileChanged
argument_list|()
condition|)
block|{
if|if
condition|(
name|firstFetchHappened
condition|)
block|{
comment|// we need to first join and flush out data left by the previous file.
name|joinFinalLeftData
argument_list|()
expr_stmt|;
block|}
comment|// set up the fetch operator for the new input file.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
name|entry
range|:
name|fetchOperators
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|alias
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|FetchOperator
name|fetchOp
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|fetchOp
operator|.
name|clearFetchContext
argument_list|()
expr_stmt|;
name|setUpFetchOpContext
argument_list|(
name|fetchOp
argument_list|,
name|alias
argument_list|)
expr_stmt|;
block|}
name|firstFetchHappened
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|firstFetchHappened
condition|)
block|{
name|firstFetchHappened
operator|=
literal|true
expr_stmt|;
comment|// fetch the first group for all small table aliases
for|for
control|(
name|Byte
name|t
range|:
name|order
control|)
block|{
if|if
condition|(
name|t
operator|!=
operator|(
name|byte
operator|)
name|posBigTable
condition|)
block|{
name|fetchNextGroup
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|byte
name|alias
init|=
operator|(
name|byte
operator|)
name|tag
decl_stmt|;
comment|// compute keys and values as StandardObjects
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|key
init|=
name|computeValues
argument_list|(
name|row
argument_list|,
name|joinKeys
operator|.
name|get
argument_list|(
name|alias
argument_list|)
argument_list|,
name|joinKeysObjectInspectors
operator|.
name|get
argument_list|(
name|alias
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|value
init|=
name|computeValues
argument_list|(
name|row
argument_list|,
name|joinValues
operator|.
name|get
argument_list|(
name|alias
argument_list|)
argument_list|,
name|joinValuesObjectInspectors
operator|.
name|get
argument_list|(
name|alias
argument_list|)
argument_list|)
decl_stmt|;
comment|//have we reached a new key group?
name|boolean
name|nextKeyGroup
init|=
name|processKey
argument_list|(
name|alias
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextKeyGroup
condition|)
block|{
comment|//assert this.nextGroupStorage.get(alias).size() == 0;
name|this
operator|.
name|nextGroupStorage
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|foundNextKeyGroup
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|tag
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|tag
operator|!=
name|posBigTable
condition|)
block|{
return|return;
block|}
block|}
name|reportProgress
argument_list|()
expr_stmt|;
comment|// the big table has reached a new key group. try to let the small tables
comment|// catch up with the big table.
if|if
condition|(
name|nextKeyGroup
condition|)
block|{
assert|assert
name|tag
operator|==
operator|(
name|byte
operator|)
name|posBigTable
assert|;
name|List
argument_list|<
name|Byte
argument_list|>
name|smallestPos
init|=
literal|null
decl_stmt|;
do|do
block|{
name|smallestPos
operator|=
name|joinOneGroup
argument_list|()
expr_stmt|;
comment|//jump out the loop if we need input from the big table
block|}
do|while
condition|(
name|smallestPos
operator|!=
literal|null
operator|&&
name|smallestPos
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|smallestPos
operator|.
name|contains
argument_list|(
operator|(
name|byte
operator|)
name|this
operator|.
name|posBigTable
argument_list|)
condition|)
do|;
return|return;
block|}
assert|assert
operator|!
name|nextKeyGroup
assert|;
name|candidateStorage
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|tag
argument_list|)
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/*    * this happens either when the input file of the big table is changed or in    * closeop. It needs to fetch all the left data from the small tables and try    * to join them.    */
specifier|private
name|void
name|joinFinalLeftData
parameter_list|()
throws|throws
name|HiveException
block|{
name|RowContainer
name|bigTblRowContainer
init|=
name|this
operator|.
name|candidateStorage
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|this
operator|.
name|posBigTable
argument_list|)
decl_stmt|;
name|boolean
name|allFetchOpDone
init|=
name|allFetchOpDone
argument_list|()
decl_stmt|;
comment|// if all left data in small tables are less than and equal to the left data
comment|// in big table, let's them catch up
while|while
condition|(
name|bigTblRowContainer
operator|!=
literal|null
operator|&&
name|bigTblRowContainer
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|allFetchOpDone
condition|)
block|{
name|joinOneGroup
argument_list|()
expr_stmt|;
name|bigTblRowContainer
operator|=
name|this
operator|.
name|candidateStorage
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|this
operator|.
name|posBigTable
argument_list|)
expr_stmt|;
name|allFetchOpDone
operator|=
name|allFetchOpDone
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|allFetchOpDone
condition|)
block|{
name|List
argument_list|<
name|Byte
argument_list|>
name|ret
init|=
name|joinOneGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
operator|||
name|ret
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|reportProgress
argument_list|()
expr_stmt|;
name|allFetchOpDone
operator|=
name|allFetchOpDone
argument_list|()
expr_stmt|;
block|}
name|boolean
name|dataInCache
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|dataInCache
condition|)
block|{
for|for
control|(
name|byte
name|t
range|:
name|order
control|)
block|{
if|if
condition|(
name|this
operator|.
name|foundNextKeyGroup
operator|.
name|get
argument_list|(
name|t
argument_list|)
operator|&&
name|this
operator|.
name|nextKeyWritables
operator|.
name|get
argument_list|(
name|t
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|promoteNextGroupToCandidate
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|joinOneGroup
argument_list|()
expr_stmt|;
name|dataInCache
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|byte
name|r
range|:
name|order
control|)
block|{
if|if
condition|(
name|this
operator|.
name|candidateStorage
operator|.
name|get
argument_list|(
name|r
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dataInCache
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|allFetchOpDone
parameter_list|()
block|{
name|boolean
name|allFetchOpDone
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Byte
name|tag
range|:
name|order
control|)
block|{
if|if
condition|(
name|tag
operator|==
operator|(
name|byte
operator|)
name|posBigTable
condition|)
block|{
continue|continue;
block|}
name|allFetchOpDone
operator|=
name|allFetchOpDone
operator|&&
name|fetchOpDone
operator|.
name|get
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
return|return
name|allFetchOpDone
return|;
block|}
specifier|private
name|List
argument_list|<
name|Byte
argument_list|>
name|joinOneGroup
parameter_list|()
throws|throws
name|HiveException
block|{
name|int
name|smallestPos
init|=
operator|-
literal|1
decl_stmt|;
name|smallestPos
operator|=
name|findMostSmallKey
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Byte
argument_list|>
name|listOfNeedFetchNext
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|smallestPos
operator|>=
literal|0
condition|)
block|{
name|listOfNeedFetchNext
operator|=
name|joinObject
argument_list|(
name|smallestPos
argument_list|)
expr_stmt|;
if|if
condition|(
name|listOfNeedFetchNext
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// listOfNeedFetchNext contains all tables that we have joined data in their
comment|// candidateStorage, and we need to clear candidate storage and promote their
comment|// nextGroupStorage to candidateStorage and fetch data until we reach a
comment|// new group.
for|for
control|(
name|Byte
name|b
range|:
name|listOfNeedFetchNext
control|)
block|{
name|fetchNextGroup
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|listOfNeedFetchNext
return|;
block|}
specifier|private
name|List
argument_list|<
name|Byte
argument_list|>
name|joinObject
parameter_list|(
name|int
name|smallestPos
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|Byte
argument_list|>
name|needFetchList
init|=
operator|new
name|ArrayList
argument_list|<
name|Byte
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|smallKey
init|=
name|keyWritables
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|smallestPos
argument_list|)
decl_stmt|;
name|needFetchList
operator|.
name|add
argument_list|(
operator|(
name|byte
operator|)
name|smallestPos
argument_list|)
expr_stmt|;
name|this
operator|.
name|storage
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|smallestPos
argument_list|,
name|this
operator|.
name|candidateStorage
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|smallestPos
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Byte
name|i
range|:
name|order
control|)
block|{
if|if
condition|(
operator|(
name|byte
operator|)
name|smallestPos
operator|==
name|i
condition|)
block|{
continue|continue;
block|}
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|key
init|=
name|keyWritables
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|putDummyOrEmpty
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|cmp
init|=
name|compareKeys
argument_list|(
name|key
argument_list|,
name|smallKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|storage
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|,
name|this
operator|.
name|candidateStorage
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|needFetchList
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|putDummyOrEmpty
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|checkAndGenObject
argument_list|()
expr_stmt|;
for|for
control|(
name|Byte
name|pos
range|:
name|needFetchList
control|)
block|{
name|this
operator|.
name|candidateStorage
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|keyWritables
operator|.
name|remove
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
return|return
name|needFetchList
return|;
block|}
specifier|private
name|void
name|fetchNextGroup
parameter_list|(
name|Byte
name|t
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|foundNextKeyGroup
operator|.
name|get
argument_list|(
name|t
argument_list|)
condition|)
block|{
comment|// first promote the next group to be the current group if we reached a
comment|// new group in the previous fetch
if|if
condition|(
name|this
operator|.
name|nextKeyWritables
operator|.
name|get
argument_list|(
name|t
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|promoteNextGroupToCandidate
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|keyWritables
operator|.
name|remove
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|this
operator|.
name|candidateStorage
operator|.
name|remove
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|this
operator|.
name|nextGroupStorage
operator|.
name|remove
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|foundNextKeyGroup
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
comment|//for the big table, we only need to promote the next group to the current group.
if|if
condition|(
name|t
operator|==
operator|(
name|byte
operator|)
name|posBigTable
condition|)
block|{
return|return;
block|}
comment|//for tables other than the big table, we need to fetch more data until reach a new group or done.
while|while
condition|(
operator|!
name|foundNextKeyGroup
operator|.
name|get
argument_list|(
name|t
argument_list|)
condition|)
block|{
if|if
condition|(
name|fetchOpDone
operator|.
name|get
argument_list|(
name|t
argument_list|)
condition|)
block|{
break|break;
block|}
name|fetchOneRow
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|foundNextKeyGroup
operator|.
name|get
argument_list|(
name|t
argument_list|)
operator|&&
name|fetchOpDone
operator|.
name|get
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|this
operator|.
name|nextKeyWritables
operator|.
name|remove
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|promoteNextGroupToCandidate
parameter_list|(
name|Byte
name|t
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
operator|.
name|keyWritables
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|this
operator|.
name|nextKeyWritables
operator|.
name|get
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|nextKeyWritables
operator|.
name|remove
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|RowContainer
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|oldRowContainer
init|=
name|this
operator|.
name|candidateStorage
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|oldRowContainer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|candidateStorage
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|this
operator|.
name|nextGroupStorage
operator|.
name|get
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|nextGroupStorage
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|oldRowContainer
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|compareKeys
parameter_list|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|k1
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|k2
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|k1
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<
name|k1
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|WritableComparable
name|key_1
init|=
operator|(
name|WritableComparable
operator|)
name|k1
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|WritableComparable
name|key_2
init|=
operator|(
name|WritableComparable
operator|)
name|k2
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ret
operator|=
name|WritableComparator
operator|.
name|get
argument_list|(
name|key_1
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|key_1
argument_list|,
name|key_2
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
return|return
name|ret
return|;
block|}
block|}
return|return
name|k1
operator|.
name|size
argument_list|()
operator|-
name|k2
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
name|void
name|putDummyOrEmpty
parameter_list|(
name|Byte
name|i
parameter_list|)
block|{
comment|// put a empty list or null
if|if
condition|(
name|noOuterJoin
condition|)
block|{
name|storage
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|emptyList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storage
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|dummyObjVectors
index|[
name|i
operator|.
name|intValue
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|findMostSmallKey
parameter_list|()
block|{
name|byte
name|index
init|=
operator|-
literal|1
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|mostSmallOne
init|=
literal|null
decl_stmt|;
for|for
control|(
name|byte
name|i
range|:
name|order
control|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|key
init|=
name|keyWritables
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|mostSmallOne
operator|==
literal|null
condition|)
block|{
name|mostSmallOne
operator|=
name|key
expr_stmt|;
name|index
operator|=
name|i
expr_stmt|;
continue|continue;
block|}
name|int
name|cmp
init|=
name|compareKeys
argument_list|(
name|key
argument_list|,
name|mostSmallOne
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
name|mostSmallOne
operator|=
name|key
expr_stmt|;
name|index
operator|=
name|i
expr_stmt|;
continue|continue;
block|}
block|}
return|return
name|index
return|;
block|}
specifier|private
name|boolean
name|processKey
parameter_list|(
name|byte
name|alias
parameter_list|,
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|key
parameter_list|)
throws|throws
name|HiveException
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|keyWritable
init|=
name|keyWritables
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyWritable
operator|==
literal|null
condition|)
block|{
comment|//the first group.
name|keyWritables
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|int
name|cmp
init|=
name|compareKeys
argument_list|(
name|key
argument_list|,
name|keyWritable
argument_list|)
decl_stmt|;
empty_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
name|nextKeyWritables
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|void
name|setUpFetchOpContext
parameter_list|(
name|FetchOperator
name|fetchOp
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
name|String
name|currentInputFile
init|=
name|this
operator|.
name|getExecContext
argument_list|()
operator|.
name|getCurrentInputFile
argument_list|()
decl_stmt|;
name|BucketMapJoinContext
name|bucketMatcherCxt
init|=
name|this
operator|.
name|localWork
operator|.
name|getBucketMapjoinContext
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|BucketMatcher
argument_list|>
name|bucketMatcherCls
init|=
name|bucketMatcherCxt
operator|.
name|getBucketMatcherClass
argument_list|()
decl_stmt|;
name|BucketMatcher
name|bucketMatcher
init|=
operator|(
name|BucketMatcher
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|bucketMatcherCls
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|this
operator|.
name|getExecContext
argument_list|()
operator|.
name|setFileId
argument_list|(
name|bucketMatcherCxt
operator|.
name|getBucketFileNameMapping
argument_list|()
operator|.
name|get
argument_list|(
name|currentInputFile
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"set task id: "
operator|+
name|this
operator|.
name|getExecContext
argument_list|()
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
name|bucketMatcher
operator|.
name|setAliasBucketFileNameMapping
argument_list|(
name|bucketMatcherCxt
operator|.
name|getAliasBucketFileNameMapping
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|aliasFiles
init|=
name|bucketMatcher
operator|.
name|getAliasBucketFiles
argument_list|(
name|currentInputFile
argument_list|,
name|bucketMatcherCxt
operator|.
name|getMapJoinBigTableAlias
argument_list|()
argument_list|,
name|alias
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Path
argument_list|>
name|iter
init|=
name|aliasFiles
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|fetchOp
operator|.
name|setupContext
argument_list|(
name|iter
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|fetchOneRow
parameter_list|(
name|byte
name|tag
parameter_list|)
block|{
if|if
condition|(
name|fetchOperators
operator|!=
literal|null
condition|)
block|{
name|String
name|tble
init|=
name|this
operator|.
name|tagToAlias
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|FetchOperator
name|fetchOp
init|=
name|fetchOperators
operator|.
name|get
argument_list|(
name|tble
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|forwardOp
init|=
name|localWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|get
argument_list|(
name|tble
argument_list|)
decl_stmt|;
try|try
block|{
name|InspectableObject
name|row
init|=
name|fetchOp
operator|.
name|getNextRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fetchOpDone
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
return|return;
block|}
name|forwardOp
operator|.
name|process
argument_list|(
name|row
operator|.
name|o
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// check if any operator had a fatal error or early exit during
comment|// execution
if|if
condition|(
name|forwardOp
operator|.
name|getDone
argument_list|()
condition|)
block|{
name|this
operator|.
name|fetchOpDone
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|OutOfMemoryError
condition|)
block|{
comment|// Don't create a new object if we are already out of memory
throw|throw
operator|(
name|OutOfMemoryError
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Map local work failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|transient
name|boolean
name|closeCalled
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|closeCalled
condition|)
block|{
return|return;
block|}
name|closeCalled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|(
name|this
operator|.
name|getExecContext
argument_list|()
operator|!=
literal|null
operator|&&
name|this
operator|.
name|getExecContext
argument_list|()
operator|.
name|inputFileChanged
argument_list|()
operator|)
operator|||
operator|!
name|firstFetchHappened
condition|)
block|{
comment|//set up the fetch operator for the new input file.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
name|entry
range|:
name|fetchOperators
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|alias
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|FetchOperator
name|fetchOp
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|fetchOp
operator|.
name|clearFetchContext
argument_list|()
expr_stmt|;
name|setUpFetchOpContext
argument_list|(
name|fetchOp
argument_list|,
name|alias
argument_list|)
expr_stmt|;
block|}
name|firstFetchHappened
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Byte
name|t
range|:
name|order
control|)
block|{
if|if
condition|(
name|t
operator|!=
operator|(
name|byte
operator|)
name|posBigTable
condition|)
block|{
name|fetchNextGroup
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|joinFinalLeftData
argument_list|()
expr_stmt|;
comment|//clean up
for|for
control|(
name|Byte
name|alias
range|:
name|order
control|)
block|{
if|if
condition|(
name|alias
operator|!=
operator|(
name|byte
operator|)
name|posBigTable
condition|)
block|{
name|fetchOpDone
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
name|foundNextKeyGroup
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
name|localWorkInited
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|closeOp
argument_list|(
name|abort
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchOperators
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
name|entry
range|:
name|fetchOperators
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|forwardOp
init|=
name|localWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|forwardOp
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|allInitializedParentsAreClosed
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**    * Implements the getName function for the Node Interface.    *    * @return the name of the operator    */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"MAPJOIN"
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|MAPJOIN
return|;
block|}
block|}
end_class

end_unit

