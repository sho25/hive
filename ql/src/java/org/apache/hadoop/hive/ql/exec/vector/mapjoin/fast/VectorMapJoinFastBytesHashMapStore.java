begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|MemoryEstimate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinUtil
operator|.
name|JoinResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
operator|.
name|VectorMapJoinFastBytesHashKeyRef
operator|.
name|KeyRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashMapResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|WriteBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|WriteBuffers
operator|.
name|ByteSegmentRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|WriteBuffers
operator|.
name|Position
import|;
end_import

begin_comment
comment|// import com.google.common.base.Preconditions;
end_comment

begin_comment
comment|/*  * Used by VectorMapJoinFastBytesHashMap to store the key and values for a hash map with a bytes  * key.  */
end_comment

begin_class
specifier|public
class|class
name|VectorMapJoinFastBytesHashMapStore
implements|implements
name|MemoryEstimate
block|{
specifier|private
name|WriteBuffers
name|writeBuffers
decl_stmt|;
comment|/**    * A store for a key and a list of 1 or more arbitrary length values in memory.    *    * The memory is a "infinite" byte array as a WriteBuffers object.    *    * We give the client (e.g. hash map logic) a 64-bit key and value reference to keep that has    * the offset within the "infinite" byte array of the key.  The 64 bits includes about half    * of the upper hash code to help during matching.    *    * We optimize the common case when the key length is short and store that information in the    * 64 bit reference.    *    * When there are more than 1 value, the zero padding is overwritten with a relative offset to    * the next value.  The next value always includes the value length.    *    * Cases:    *    *  1) One element when key and is small (and stored in the reference word):    *    *    Key and Value Reference    *      |    *      | absoluteOffset    *      |    *      ---------------------------------    *                                       |    *                                       v    *<5 0's for Next Relative Offset><Key Bytes><Value Length><Value Bytes>    *                NEXT (NONE)                 KEY                        VALUE    *    * NOTE: AbsoluteOffset.byteLength = 5    *    *  2) One element, general: shows optional big key length.    *    *   Key and Value Reference    *      |    *      | absoluteOffset    *      |    *      ---------------------------------    *                                       |    *                                       v    *<5 0's for Next Relative Offset> [Big Key Length]<Key Bytes><Value Length><Value Bytes>    *                NEXT (NONE)                optional        KEY                        VALUE    *    *  3) Two elements when key length is small and stored in reference word:    *    *    Key and Value Reference    *      |    *      | absoluteOffset    *      |    *      ------------------------------------    *                                         |    *                                         v    *<Next Value Rel Offset as 5 bytes><Key Bytes><Value Bytes>    *         |     NEXT                         KEY         VALUE    *         |    *         | first record absolute offset + relative offset    *         |    *         --------    *                 |    *                 v    *<5 0's Padding for Next Value Ref><Value Length><Value Bytes>    *                     NEXT (NONE)                                     VALUE    *    *  4) Three elements showing how first record updated to point to new value and    *     new value points to most recent (additional) value:    *    *    Key and Value Reference    *      |    *      | absoluteOffset    *      |    *      ------------------------------------    *                                         |    *                                         v    *<Next Value Rel Offset as 5 bytes><Key Bytes><Value Bytes>    *         |     NEXT                         KEY         VALUE    *         |    *         | first record absolute offset + relative offset    *         |    *         |    *         |<5 0's Padding for Next Value Ref><Value Length><Value Bytes>    *         |      ^    NEXT (NONE)                                    VALUE    *         |      |    *         |      ------    *         |            |    *         |            | new record absolute offset - (minus) relative offset    *         |            |    *          -----><Next Value Rel Offset as 5 bytes><Value Length><Value Bytes>    *                     NEXT                                            VALUE    *    *    *   5) Four elements showing how first record is again updated to point to new value and    *     new value points to most recent (additional) value:    *    *    Key and Value Reference    *      |    *      | absoluteOffset    *      |    *      ------------------------------------    *                                         |    *                                         v    *<Next Value Rel Offset as 5 bytes><Key Bytes><Value Length><Value Bytes>    *         |     NEXT                          KEY                      VALUE    *         |    *         | first record absolute offset + relative offset    *         |    *         |    *         |<5 0's Padding for Next Value Ref><Value Length><Value Bytes>    *         |      ^    NEXT (NONE)                                     VALUE    *         |      |    *         |      ------    *         |            | record absolute offset - (minus) relative offset    *         |            |    *         |<Next Value Rel Offset as 5 bytes><Value Length><Value Bytes>    *         |      ^       NEXT                                         VALUE    *         |      |    *         |      ------    *         |            |    *         |            | new record absolute offset - (minus) relative offset    *         |            |    *          -----><Next Value Rel Offset as 5 bytes><Value Length><Value Bytes>    *                        NEXT                                         VALUE    *    *    *  You get the idea.    */
specifier|public
name|WriteBuffers
name|getWriteBuffers
parameter_list|()
block|{
return|return
name|writeBuffers
return|;
block|}
comment|/**    * A hash map result that can read values stored by the key and value store, one-by-one.    * It also has support routines for checking the hash code and key equality.    *    * It implements the standard map join hash map result interface.    *    */
specifier|public
specifier|static
class|class
name|HashMapResult
extends|extends
name|VectorMapJoinHashMapResult
block|{
specifier|private
name|VectorMapJoinFastBytesHashMapStore
name|hashMapStore
decl_stmt|;
specifier|private
name|int
name|keyLength
decl_stmt|;
specifier|private
name|boolean
name|hasRows
decl_stmt|;
specifier|private
name|long
name|refWord
decl_stmt|;
specifier|private
name|boolean
name|isSingleRow
decl_stmt|;
specifier|private
name|long
name|absoluteOffset
decl_stmt|;
specifier|private
name|long
name|keyAbsoluteOffset
decl_stmt|;
specifier|private
name|long
name|firstValueAbsoluteOffset
decl_stmt|;
specifier|private
name|int
name|readIndex
decl_stmt|;
specifier|private
name|boolean
name|isNextEof
decl_stmt|;
name|long
name|nextAbsoluteValueOffset
decl_stmt|;
specifier|private
name|ByteSegmentRef
name|byteSegmentRef
decl_stmt|;
specifier|private
name|Position
name|readPos
decl_stmt|;
specifier|public
name|HashMapResult
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|refWord
operator|=
operator|-
literal|1
expr_stmt|;
name|hasRows
operator|=
literal|false
expr_stmt|;
name|byteSegmentRef
operator|=
operator|new
name|ByteSegmentRef
argument_list|()
expr_stmt|;
name|readPos
operator|=
operator|new
name|Position
argument_list|()
expr_stmt|;
block|}
comment|/**      * Setup for reading the key of an entry with the equalKey method.      * @param hashMapStore      * @param part1Word      * @param part2Word      */
specifier|public
name|void
name|setKey
parameter_list|(
name|VectorMapJoinFastBytesHashMapStore
name|hashMapStore
parameter_list|,
name|long
name|refWord
parameter_list|)
block|{
comment|// Preconditions.checkState(!KeyRef.getIsInvalidFlag(refWord));
name|this
operator|.
name|hashMapStore
operator|=
name|hashMapStore
expr_stmt|;
name|this
operator|.
name|refWord
operator|=
name|refWord
expr_stmt|;
name|absoluteOffset
operator|=
name|KeyRef
operator|.
name|getAbsoluteOffset
argument_list|(
name|refWord
argument_list|)
expr_stmt|;
comment|// Position after next relative offset (fixed length) to the key.
name|hashMapStore
operator|.
name|writeBuffers
operator|.
name|setReadPoint
argument_list|(
name|absoluteOffset
argument_list|,
name|readPos
argument_list|)
expr_stmt|;
name|keyLength
operator|=
name|KeyRef
operator|.
name|getSmallKeyLength
argument_list|(
name|refWord
argument_list|)
expr_stmt|;
name|boolean
name|isKeyLengthSmall
init|=
operator|(
name|keyLength
operator|!=
name|KeyRef
operator|.
name|SmallKeyLength
operator|.
name|allBitsOn
operator|)
decl_stmt|;
if|if
condition|(
name|isKeyLengthSmall
condition|)
block|{
name|keyAbsoluteOffset
operator|=
name|absoluteOffset
expr_stmt|;
block|}
else|else
block|{
comment|// And, if current value is big we must read it.
name|keyLength
operator|=
name|hashMapStore
operator|.
name|writeBuffers
operator|.
name|readVInt
argument_list|(
name|readPos
argument_list|)
expr_stmt|;
name|keyAbsoluteOffset
operator|=
name|hashMapStore
operator|.
name|writeBuffers
operator|.
name|getReadPoint
argument_list|(
name|readPos
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: Reading is now positioned before the key bytes.
block|}
comment|/**      * Compare a key with the key positioned with the setKey method.      * @param keyBytes      * @param keyStart      * @param keyLength      * @return      */
specifier|public
name|boolean
name|equalKey
parameter_list|(
name|byte
index|[]
name|keyBytes
parameter_list|,
name|int
name|keyStart
parameter_list|,
name|int
name|keyLength
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|keyLength
operator|!=
name|keyLength
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Our reading was positioned to the key.
if|if
condition|(
operator|!
name|hashMapStore
operator|.
name|writeBuffers
operator|.
name|isEqual
argument_list|(
name|keyBytes
argument_list|,
name|keyStart
argument_list|,
name|readPos
argument_list|,
name|keyLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// NOTE: WriteBuffers.isEqual does not advance the read position...
return|return
literal|true
return|;
block|}
comment|/**      * Mark the key matched with equalKey as a match and set up for reading the values.      * Afterward, methods isSingleRow, cappedCount, first, next, etc may be called.      */
specifier|public
name|void
name|setMatch
parameter_list|()
block|{
name|hasRows
operator|=
literal|true
expr_stmt|;
name|isSingleRow
operator|=
name|KeyRef
operator|.
name|getIsSingleFlag
argument_list|(
name|refWord
argument_list|)
expr_stmt|;
comment|// We must set the position since equalKey does not leave us positioned correctly.
name|hashMapStore
operator|.
name|writeBuffers
operator|.
name|setReadPoint
argument_list|(
name|keyAbsoluteOffset
operator|+
name|keyLength
argument_list|,
name|readPos
argument_list|)
expr_stmt|;
comment|// Save first value absolute offset...
name|firstValueAbsoluteOffset
operator|=
name|hashMapStore
operator|.
name|writeBuffers
operator|.
name|getReadPoint
argument_list|(
name|readPos
argument_list|)
expr_stmt|;
comment|// Position to beginning.
name|readIndex
operator|=
literal|0
expr_stmt|;
name|isNextEof
operator|=
literal|false
expr_stmt|;
name|setJoinResult
argument_list|(
name|JoinResult
operator|.
name|MATCH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasRows
parameter_list|()
block|{
return|return
name|hasRows
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSingleRow
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasRows
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|isSingleRow
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCappedCountAvailable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|cappedCount
parameter_list|()
block|{
comment|// The return values are capped to return ==0, ==1 and>= 2.
return|return
name|hasRows
condition|?
operator|(
name|isSingleRow
condition|?
literal|1
else|:
literal|2
operator|)
else|:
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteSegmentRef
name|first
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasRows
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Position to beginning.
name|readIndex
operator|=
literal|0
expr_stmt|;
name|isNextEof
operator|=
literal|false
expr_stmt|;
return|return
name|internalRead
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteSegmentRef
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasRows
operator|||
name|isNextEof
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|internalRead
argument_list|()
return|;
block|}
specifier|public
name|ByteSegmentRef
name|internalRead
parameter_list|()
block|{
name|int
name|nextValueLength
decl_stmt|;
if|if
condition|(
name|readIndex
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|isSingleRow
condition|)
block|{
name|isNextEof
operator|=
literal|true
expr_stmt|;
name|nextAbsoluteValueOffset
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// Read the next relative offset the last inserted value record.
specifier|final
name|long
name|referenceAbsoluteOffset
init|=
name|absoluteOffset
operator|-
name|KeyRef
operator|.
name|AbsoluteOffset
operator|.
name|byteLength
decl_stmt|;
name|hashMapStore
operator|.
name|writeBuffers
operator|.
name|setReadPoint
argument_list|(
name|referenceAbsoluteOffset
argument_list|,
name|readPos
argument_list|)
expr_stmt|;
name|long
name|relativeNextValueOffset
init|=
name|hashMapStore
operator|.
name|writeBuffers
operator|.
name|readNByteLong
argument_list|(
name|KeyRef
operator|.
name|AbsoluteOffset
operator|.
name|byteLength
argument_list|,
name|readPos
argument_list|)
decl_stmt|;
comment|// Preconditions.checkState(relativeNextValueOffset != 0);
name|isNextEof
operator|=
literal|false
expr_stmt|;
comment|// Use positive relative offset from first record to last inserted value record.
name|nextAbsoluteValueOffset
operator|=
name|referenceAbsoluteOffset
operator|+
name|relativeNextValueOffset
expr_stmt|;
block|}
comment|// Position past the key to first value.
name|hashMapStore
operator|.
name|writeBuffers
operator|.
name|setReadPoint
argument_list|(
name|firstValueAbsoluteOffset
argument_list|,
name|readPos
argument_list|)
expr_stmt|;
name|nextValueLength
operator|=
name|hashMapStore
operator|.
name|writeBuffers
operator|.
name|readVInt
argument_list|(
name|readPos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Position to the next value record.
comment|// Preconditions.checkState(nextAbsoluteValueOffset>= 0);
name|hashMapStore
operator|.
name|writeBuffers
operator|.
name|setReadPoint
argument_list|(
name|nextAbsoluteValueOffset
argument_list|,
name|readPos
argument_list|)
expr_stmt|;
comment|// Read the next relative offset.
name|long
name|relativeNextValueOffset
init|=
name|hashMapStore
operator|.
name|writeBuffers
operator|.
name|readNByteLong
argument_list|(
name|RelativeOffset
operator|.
name|byteLength
argument_list|,
name|readPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|relativeNextValueOffset
operator|==
literal|0
condition|)
block|{
name|isNextEof
operator|=
literal|true
expr_stmt|;
name|nextAbsoluteValueOffset
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|isNextEof
operator|=
literal|false
expr_stmt|;
comment|// The way we insert causes our chain to backwards from the last inserted value record...
name|nextAbsoluteValueOffset
operator|=
name|nextAbsoluteValueOffset
operator|-
name|relativeNextValueOffset
expr_stmt|;
block|}
name|nextValueLength
operator|=
name|hashMapStore
operator|.
name|writeBuffers
operator|.
name|readVInt
argument_list|(
name|readPos
argument_list|)
expr_stmt|;
comment|// Now positioned to the value.
block|}
comment|// Capture a ByteSegmentRef to the current value position and length.
name|hashMapStore
operator|.
name|writeBuffers
operator|.
name|getByteSegmentRefToCurrent
argument_list|(
name|byteSegmentRef
argument_list|,
name|nextValueLength
argument_list|,
name|readPos
argument_list|)
expr_stmt|;
name|readIndex
operator|++
expr_stmt|;
return|return
name|byteSegmentRef
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
operator|+
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"cappedCount "
operator|+
name|cappedCount
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Get detailed HashMap result position information to help diagnose exceptions.      */
annotation|@
name|Override
specifier|public
name|String
name|getDetailedHashMapResultPositionString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Read index "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|readIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSingleRow
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" single row"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" multiple rows "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|readIndex
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" byteSegmentRef is byte[] of length "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|byteSegmentRef
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" at offset "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|byteSegmentRef
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" for length "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|byteSegmentRef
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSingleRow
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" (isNextEof "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|isNextEof
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" nextAbsoluteValueOffset "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|nextAbsoluteValueOffset
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|RelativeOffset
block|{
specifier|private
specifier|static
specifier|final
name|int
name|byteLength
init|=
name|KeyRef
operator|.
name|AbsoluteOffset
operator|.
name|byteLength
decl_stmt|;
comment|// Relative offset zero padding.
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|zeroPadding
init|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
block|}
comment|/**    * Two 64-bit long result is the key and value reference.    * @param partialHashCode    * @param keyBytes    * @param keyStart    * @param keyLength    * @param valueBytes    * @param valueStart    * @param valueLength    */
specifier|public
name|long
name|addFirst
parameter_list|(
name|long
name|partialHashCode
parameter_list|,
name|byte
index|[]
name|keyBytes
parameter_list|,
name|int
name|keyStart
parameter_list|,
name|int
name|keyLength
parameter_list|,
name|byte
index|[]
name|valueBytes
parameter_list|,
name|int
name|valueStart
parameter_list|,
name|int
name|valueLength
parameter_list|)
block|{
comment|// Zero pad out bytes for fixed size next relative offset if more values are added later.
name|writeBuffers
operator|.
name|write
argument_list|(
name|RelativeOffset
operator|.
name|zeroPadding
argument_list|)
expr_stmt|;
comment|// We require the absolute offset to be non-zero so the 64 key and value reference is non-zero.
comment|// So, we make it the offset after the relative offset and to the key.
specifier|final
name|long
name|absoluteOffset
init|=
name|writeBuffers
operator|.
name|getWritePoint
argument_list|()
decl_stmt|;
comment|// Preconditions.checkState(absoluteOffset> 0);
name|boolean
name|isKeyLengthBig
init|=
operator|(
name|keyLength
operator|>=
name|KeyRef
operator|.
name|SmallKeyLength
operator|.
name|threshold
operator|)
decl_stmt|;
if|if
condition|(
name|isKeyLengthBig
condition|)
block|{
name|writeBuffers
operator|.
name|writeVInt
argument_list|(
name|keyLength
argument_list|)
expr_stmt|;
block|}
name|writeBuffers
operator|.
name|write
argument_list|(
name|keyBytes
argument_list|,
name|keyStart
argument_list|,
name|keyLength
argument_list|)
expr_stmt|;
name|writeBuffers
operator|.
name|writeVInt
argument_list|(
name|valueLength
argument_list|)
expr_stmt|;
name|writeBuffers
operator|.
name|write
argument_list|(
name|valueBytes
argument_list|,
name|valueStart
argument_list|,
name|valueLength
argument_list|)
expr_stmt|;
comment|/*      * Form 64 bit key and value reference.      */
name|long
name|refWord
init|=
name|partialHashCode
decl_stmt|;
name|refWord
operator||=
name|absoluteOffset
operator|<<
name|KeyRef
operator|.
name|AbsoluteOffset
operator|.
name|bitShift
expr_stmt|;
if|if
condition|(
name|isKeyLengthBig
condition|)
block|{
name|refWord
operator||=
name|KeyRef
operator|.
name|SmallKeyLength
operator|.
name|allBitsOnBitShifted
expr_stmt|;
block|}
else|else
block|{
name|refWord
operator||=
operator|(
operator|(
name|long
operator|)
name|keyLength
operator|)
operator|<<
name|KeyRef
operator|.
name|SmallKeyLength
operator|.
name|bitShift
expr_stmt|;
block|}
name|refWord
operator||=
name|KeyRef
operator|.
name|IsSingleFlag
operator|.
name|flagOnMask
expr_stmt|;
comment|// Preconditions.checkState(!KeyRef.getIsInvalidFlag(refWord));
return|return
name|refWord
return|;
block|}
comment|/**    * @param refWord    * @param valueBytes    * @param valueStart    * @param valueLength    */
specifier|public
name|long
name|addMore
parameter_list|(
name|long
name|refWord
parameter_list|,
name|byte
index|[]
name|valueBytes
parameter_list|,
name|int
name|valueStart
parameter_list|,
name|int
name|valueLength
parameter_list|,
name|WriteBuffers
operator|.
name|Position
name|unsafeReadPos
parameter_list|)
block|{
comment|// Preconditions.checkState(!KeyRef.getIsInvalidFlag(refWord));
comment|/*      * Extract information from the reference word.      */
specifier|final
name|long
name|referenceAbsoluteOffset
init|=
name|KeyRef
operator|.
name|getAbsoluteOffset
argument_list|(
name|refWord
argument_list|)
operator|-
name|KeyRef
operator|.
name|AbsoluteOffset
operator|.
name|byteLength
decl_stmt|;
comment|// Where the new value record will be written.
name|long
name|nextAbsoluteValueOffset
init|=
name|writeBuffers
operator|.
name|getWritePoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|KeyRef
operator|.
name|getIsSingleFlag
argument_list|(
name|refWord
argument_list|)
condition|)
block|{
comment|// Mark reference as having more than 1 value.
name|refWord
operator|&=
name|KeyRef
operator|.
name|IsSingleFlag
operator|.
name|flagOffMask
expr_stmt|;
comment|// Write zeros to indicate no 3rd record.
name|writeBuffers
operator|.
name|write
argument_list|(
name|RelativeOffset
operator|.
name|zeroPadding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// To insert next value record above count 2:
comment|// 1) Read next relative offset in first record (this is a positive relative offset) to
comment|//    last inserted value record.
name|long
name|oldPrevRelativeValueOffset
init|=
name|writeBuffers
operator|.
name|readNByteLong
argument_list|(
name|referenceAbsoluteOffset
argument_list|,
name|RelativeOffset
operator|.
name|byteLength
argument_list|,
name|unsafeReadPos
argument_list|)
decl_stmt|;
comment|// 2) Relative offset is positive from first record to last inserted value record.
name|long
name|prevAbsoluteValueOffset
init|=
name|referenceAbsoluteOffset
operator|+
name|oldPrevRelativeValueOffset
decl_stmt|;
comment|// 3) Since previous record is before the new one, subtract because we store relative offsets
comment|//    as unsigned.
name|long
name|newPrevRelativeValueOffset
init|=
name|nextAbsoluteValueOffset
operator|-
name|prevAbsoluteValueOffset
decl_stmt|;
comment|// Preconditions.checkState(newPrevRelativeValueOffset>= 0);
name|writeBuffers
operator|.
name|writeFiveByteULong
argument_list|(
name|newPrevRelativeValueOffset
argument_list|)
expr_stmt|;
block|}
name|writeBuffers
operator|.
name|writeVInt
argument_list|(
name|valueLength
argument_list|)
expr_stmt|;
name|writeBuffers
operator|.
name|write
argument_list|(
name|valueBytes
argument_list|,
name|valueStart
argument_list|,
name|valueLength
argument_list|)
expr_stmt|;
comment|// Overwrite relative offset in first record.
name|long
name|newRelativeOffset
init|=
name|nextAbsoluteValueOffset
operator|-
name|referenceAbsoluteOffset
decl_stmt|;
comment|// Preconditions.checkState(newRelativeOffset>= 0);
name|writeBuffers
operator|.
name|writeFiveByteULong
argument_list|(
name|referenceAbsoluteOffset
argument_list|,
name|newRelativeOffset
argument_list|)
expr_stmt|;
return|return
name|refWord
return|;
block|}
specifier|public
name|VectorMapJoinFastBytesHashMapStore
parameter_list|(
name|int
name|writeBuffersSize
parameter_list|)
block|{
name|writeBuffers
operator|=
operator|new
name|WriteBuffers
argument_list|(
name|writeBuffersSize
argument_list|,
name|KeyRef
operator|.
name|AbsoluteOffset
operator|.
name|maxSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getEstimatedMemorySize
parameter_list|()
block|{
name|long
name|size
init|=
literal|0
decl_stmt|;
name|size
operator|+=
name|writeBuffers
operator|==
literal|null
condition|?
literal|0
else|:
name|writeBuffers
operator|.
name|getEstimatedMemorySize
argument_list|()
expr_stmt|;
return|return
name|size
return|;
block|}
block|}
end_class

end_unit

