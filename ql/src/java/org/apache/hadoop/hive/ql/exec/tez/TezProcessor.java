begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mapjoin
operator|.
name|MapJoinMemoryExhaustionError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|TaskFailureType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|TezUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|mapreduce
operator|.
name|processor
operator|.
name|MRTaskReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|AbstractLogicalIOProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|ExecutionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|LogicalInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|LogicalOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|ProcessorContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|library
operator|.
name|api
operator|.
name|KeyValueWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_comment
comment|/**  * Hive processor for Tez that forms the vertices in Tez and processes the data.  * Does what ExecMapper and ExecReducer does for hive in MR framework.  */
end_comment

begin_class
specifier|public
class|class
name|TezProcessor
extends|extends
name|AbstractLogicalIOProcessor
block|{
comment|/**    * This provides the ability to pass things into TezProcessor, which is normally impossible    * because of how Tez APIs are structured. Piggyback on ExecutionContext.    */
specifier|public
specifier|static
interface|interface
name|Hook
block|{
name|void
name|initializeHook
parameter_list|(
name|TezProcessor
name|source
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TezProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|isMap
init|=
literal|false
decl_stmt|;
specifier|protected
name|RecordProcessor
name|rproc
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|aborted
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|protected
name|JobConf
name|jobConf
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
name|TezProcessor
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|PerfLogger
name|perfLogger
init|=
name|SessionState
operator|.
name|getPerfLogger
argument_list|()
decl_stmt|;
specifier|protected
name|ProcessorContext
name|processorContext
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|NumberFormat
name|taskIdFormat
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|NumberFormat
name|jobIdFormat
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
static|static
block|{
name|taskIdFormat
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|taskIdFormat
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|jobIdFormat
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jobIdFormat
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TezProcessor
parameter_list|(
name|ProcessorContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|ObjectCache
operator|.
name|setupObjectRegistry
argument_list|(
name|context
operator|.
name|getObjectRegistry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// we have to close in the processor's run method, because tez closes inputs
comment|// before calling close (TEZ-955) and we might need to read inputs
comment|// when we flush the pipeline.
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleEvents
parameter_list|(
name|List
argument_list|<
name|Event
argument_list|>
name|arg0
parameter_list|)
block|{
comment|//this is not called by tez, so nothing to be done here
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|IOException
block|{
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_INITIALIZE_PROCESSOR
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|TezUtils
operator|.
name|createConfFromUserPayload
argument_list|(
name|getContext
argument_list|()
operator|.
name|getUserPayload
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|jobConf
operator|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|processorContext
operator|=
name|getContext
argument_list|()
expr_stmt|;
name|ExecutionContext
name|execCtx
init|=
name|processorContext
operator|.
name|getExecutionContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|execCtx
operator|instanceof
name|Hook
condition|)
block|{
operator|(
operator|(
name|Hook
operator|)
name|execCtx
operator|)
operator|.
name|initializeHook
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|setupMRLegacyConfigs
argument_list|(
name|processorContext
argument_list|)
expr_stmt|;
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_INITIALIZE_PROCESSOR
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupMRLegacyConfigs
parameter_list|(
name|ProcessorContext
name|processorContext
parameter_list|)
block|{
comment|// Hive "insert overwrite local directory" uses task id as dir name
comment|// Setting the id in jobconf helps to have the similar dir name as MR
name|StringBuilder
name|taskAttemptIdBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"attempt_"
argument_list|)
decl_stmt|;
name|taskAttemptIdBuilder
operator|.
name|append
argument_list|(
name|processorContext
operator|.
name|getApplicationId
argument_list|()
operator|.
name|getClusterTimestamp
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
operator|.
name|append
argument_list|(
name|jobIdFormat
operator|.
name|format
argument_list|(
name|processorContext
operator|.
name|getApplicationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMap
condition|)
block|{
name|taskAttemptIdBuilder
operator|.
name|append
argument_list|(
literal|"m_"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|taskAttemptIdBuilder
operator|.
name|append
argument_list|(
literal|"r_"
argument_list|)
expr_stmt|;
block|}
name|taskAttemptIdBuilder
operator|.
name|append
argument_list|(
name|taskIdFormat
operator|.
name|format
argument_list|(
name|processorContext
operator|.
name|getTaskIndex
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
operator|.
name|append
argument_list|(
name|processorContext
operator|.
name|getTaskAttemptNumber
argument_list|()
argument_list|)
expr_stmt|;
comment|// In MR, mapreduce.task.attempt.id is same as mapred.task.id. Go figure.
name|String
name|taskAttemptIdStr
init|=
name|taskAttemptIdBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|this
operator|.
name|jobConf
operator|.
name|set
argument_list|(
literal|"mapred.task.id"
argument_list|,
name|taskAttemptIdStr
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobConf
operator|.
name|set
argument_list|(
literal|"mapreduce.task.attempt.id"
argument_list|,
name|taskAttemptIdStr
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobConf
operator|.
name|setInt
argument_list|(
literal|"mapred.task.partition"
argument_list|,
name|processorContext
operator|.
name|getTaskIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LogicalInput
argument_list|>
name|inputs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LogicalOutput
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|aborted
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|perfLogger
operator|.
name|PerfLogBegin
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_RUN_PROCESSOR
argument_list|)
expr_stmt|;
comment|// in case of broadcast-join read the broadcast edge inputs
comment|// (possibly asynchronously)
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running task: "
operator|+
name|getContext
argument_list|()
operator|.
name|getUniqueIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// This check isn't absolutely mandatory, given the aborted check outside of the
comment|// Processor creation.
if|if
condition|(
name|aborted
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// There should be no blocking operation in RecordProcessor creation,
comment|// otherwise the abort operation will not register since they are synchronized on the same
comment|// lock.
if|if
condition|(
name|isMap
condition|)
block|{
name|rproc
operator|=
operator|new
name|MapRecordProcessor
argument_list|(
name|jobConf
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rproc
operator|=
operator|new
name|ReduceRecordProcessor
argument_list|(
name|jobConf
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|aborted
operator|.
name|get
argument_list|()
condition|)
block|{
name|initializeAndRunProcessor
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
block|}
comment|// TODO HIVE-14042. In case of an abort request, throw an InterruptedException
block|}
specifier|protected
name|void
name|initializeAndRunProcessor
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LogicalInput
argument_list|>
name|inputs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LogicalOutput
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|Exception
block|{
name|Throwable
name|originalThrowable
init|=
literal|null
decl_stmt|;
try|try
block|{
name|MRTaskReporter
name|mrReporter
init|=
operator|new
name|MRTaskReporter
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
comment|// Init and run are both potentially long, and blocking operations. Synchronization
comment|// with the 'abort' operation will not work since if they end up blocking on a monitor
comment|// which does not belong to the lock, the abort will end up getting blocked.
comment|// Both of these method invocations need to handle the abort call on their own.
name|rproc
operator|.
name|init
argument_list|(
name|mrReporter
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
name|rproc
operator|.
name|run
argument_list|()
expr_stmt|;
comment|//done - output does not need to be committed as hive does not use outputcommitter
name|perfLogger
operator|.
name|PerfLogEnd
argument_list|(
name|CLASS_NAME
argument_list|,
name|PerfLogger
operator|.
name|TEZ_RUN_PROCESSOR
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|originalThrowable
operator|=
name|t
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|originalThrowable
operator|!=
literal|null
operator|&&
operator|(
name|originalThrowable
operator|instanceof
name|Error
operator|||
name|Throwables
operator|.
name|getRootCause
argument_list|(
name|originalThrowable
argument_list|)
operator|instanceof
name|Error
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot recover from this FATAL error"
argument_list|,
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|originalThrowable
argument_list|)
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|reportFailure
argument_list|(
name|TaskFailureType
operator|.
name|FATAL
argument_list|,
name|originalThrowable
argument_list|,
literal|"Cannot recover from this error"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|originalThrowable
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|rproc
operator|!=
literal|null
condition|)
block|{
name|rproc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|originalThrowable
operator|==
literal|null
condition|)
block|{
name|originalThrowable
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|originalThrowable
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|originalThrowable
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|originalThrowable
operator|instanceof
name|InterruptedException
condition|)
block|{
throw|throw
operator|(
name|InterruptedException
operator|)
name|originalThrowable
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|originalThrowable
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|()
block|{
name|RecordProcessor
name|rProcLocal
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received abort"
argument_list|)
expr_stmt|;
name|aborted
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rProcLocal
operator|=
name|rproc
expr_stmt|;
block|}
if|if
condition|(
name|rProcLocal
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Forwarding abort to RecordProcessor"
argument_list|)
expr_stmt|;
name|rProcLocal
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"RecordProcessor not yet setup. Abort will be ignored"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * KVOutputCollector. OutputCollector that writes using KVWriter.    * Must be initialized before it is used.    *    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|static
class|class
name|TezKVOutputCollector
implements|implements
name|OutputCollector
block|{
specifier|private
name|KeyValueWriter
name|writer
decl_stmt|;
specifier|private
specifier|final
name|LogicalOutput
name|output
decl_stmt|;
name|TezKVOutputCollector
parameter_list|(
name|LogicalOutput
name|logicalOutput
parameter_list|)
block|{
name|this
operator|.
name|output
operator|=
name|logicalOutput
expr_stmt|;
block|}
name|void
name|initialize
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|writer
operator|=
operator|(
name|KeyValueWriter
operator|)
name|output
operator|.
name|getWriter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|JobConf
name|getConf
parameter_list|()
block|{
return|return
name|jobConf
return|;
block|}
block|}
end_class

end_unit

