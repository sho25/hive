begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|TezUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|mapreduce
operator|.
name|processor
operator|.
name|MRTaskReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|LogicalIOProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|LogicalInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|LogicalOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|TezProcessorContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|library
operator|.
name|api
operator|.
name|KeyValueWriter
import|;
end_import

begin_comment
comment|/**  * Hive processor for Tez that forms the vertices in Tez and processes the data.  * Does what ExecMapper and ExecReducer does for hive in MR framework.  */
end_comment

begin_class
specifier|public
class|class
name|TezProcessor
implements|implements
name|LogicalIOProcessor
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TezProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|isMap
init|=
literal|false
decl_stmt|;
name|RecordProcessor
name|rproc
init|=
literal|null
decl_stmt|;
specifier|private
name|JobConf
name|jobConf
decl_stmt|;
specifier|private
name|TezProcessorContext
name|processorContext
decl_stmt|;
specifier|public
name|TezProcessor
parameter_list|(
name|boolean
name|isMap
parameter_list|)
block|{
name|this
operator|.
name|isMap
operator|=
name|isMap
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|rproc
operator|!=
literal|null
condition|)
block|{
name|rproc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleEvents
parameter_list|(
name|List
argument_list|<
name|Event
argument_list|>
name|arg0
parameter_list|)
block|{
comment|//this is not called by tez, so nothing to be done here
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|TezProcessorContext
name|processorContext
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|processorContext
operator|=
name|processorContext
expr_stmt|;
comment|//get the jobconf
name|byte
index|[]
name|userPayload
init|=
name|processorContext
operator|.
name|getUserPayload
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|TezUtils
operator|.
name|createConfFromUserPayload
argument_list|(
name|userPayload
argument_list|)
decl_stmt|;
name|this
operator|.
name|jobConf
operator|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LogicalInput
argument_list|>
name|inputs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LogicalOutput
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|Exception
block|{
comment|// in case of broadcast-join read the broadcast edge inputs
comment|// (possibly asynchronously)
name|LOG
operator|.
name|info
argument_list|(
literal|"Running map: "
operator|+
name|processorContext
operator|.
name|getUniqueIdentifier
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot handle more than one output"
operator|+
literal|", outputCount="
operator|+
name|outputs
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|LogicalOutput
name|out
init|=
name|outputs
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|KeyValueWriter
name|kvWriter
init|=
operator|(
name|KeyValueWriter
operator|)
name|out
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|OutputCollector
name|collector
init|=
operator|new
name|KVOutputCollector
argument_list|(
name|kvWriter
argument_list|)
decl_stmt|;
if|if
condition|(
name|isMap
condition|)
block|{
name|rproc
operator|=
operator|new
name|MapRecordProcessor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rproc
operator|=
operator|new
name|ReduceRecordProcessor
argument_list|()
expr_stmt|;
block|}
name|MRTaskReporter
name|mrReporter
init|=
operator|new
name|MRTaskReporter
argument_list|(
name|processorContext
argument_list|)
decl_stmt|;
name|rproc
operator|.
name|init
argument_list|(
name|jobConf
argument_list|,
name|mrReporter
argument_list|,
name|inputs
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|rproc
operator|.
name|run
argument_list|()
expr_stmt|;
comment|//done - output does not need to be committed as hive does not use outputcommitter
block|}
comment|/**    * KVOutputCollector. OutputCollector that writes using KVWriter    *    */
specifier|static
class|class
name|KVOutputCollector
implements|implements
name|OutputCollector
block|{
specifier|private
specifier|final
name|KeyValueWriter
name|output
decl_stmt|;
name|KVOutputCollector
parameter_list|(
name|KeyValueWriter
name|output
parameter_list|)
block|{
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
block|}
specifier|public
name|void
name|collect
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

