begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|JavaDataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_comment
comment|/**  * Computes an approximate histogram of a numerical column using a user-specified number of bins.  *  * The output is an array of (x,y) pairs as Hive struct objects that represents the histogram's  * bin centers and heights.  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"histogram_numeric"
argument_list|,
name|value
operator|=
literal|"_FUNC_(expr, nb) - Computes a histogram on numeric 'expr' using nb bins."
argument_list|,
name|extended
operator|=
literal|"Example:\n"
operator|+
literal|"> SELECT histogram_numeric(val, 3) FROM src;\n"
operator|+
literal|"[{\"x\":100,\"y\":14.0},{\"x\":200,\"y\":22.0},{\"x\":290.5,\"y\":11.0}]\n"
operator|+
literal|"The return value is an array of (x,y) pairs representing the centers of the "
operator|+
literal|"histogram's bins. As the value of 'nb' is increased, the histogram approximation"
operator|+
literal|"gets finer-grained, but may yield artifacts around outliers. In practice, 20-40 "
operator|+
literal|"histogram bins appear to work well, with more bins being required for skewed or "
operator|+
literal|"smaller datasets. Note that this function creates a histogram with non-uniform "
operator|+
literal|"bin widths. It offers no guarantees in terms of the mean-squared-error of the "
operator|+
literal|"histogram, but in practice is comparable to the histograms produced by the R/S-Plus"
operator|+
literal|"statistical computing packages."
argument_list|)
specifier|public
class|class
name|GenericUDAFHistogramNumeric
extends|extends
name|AbstractGenericUDAFResolver
block|{
comment|// class static variables
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GenericUDAFHistogramNumeric
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|parameters
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|parameters
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|"Please specify exactly two arguments."
argument_list|)
throw|;
block|}
comment|// validate the first parameter, which is the expression to compute over
if|if
condition|(
name|parameters
index|[
literal|0
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"Only primitive type arguments are accepted but "
operator|+
name|parameters
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" was passed as parameter 1."
argument_list|)
throw|;
block|}
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|parameters
index|[
literal|0
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|DECIMAL
case|:
break|break;
case|case
name|STRING
case|:
case|case
name|BOOLEAN
case|:
case|case
name|DATE
case|:
default|default:
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"Only numeric type arguments are accepted but "
operator|+
name|parameters
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" was passed as parameter 1."
argument_list|)
throw|;
block|}
comment|// validate the second parameter, which is the number of histogram bins
if|if
condition|(
name|parameters
index|[
literal|1
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"Only primitive type arguments are accepted but "
operator|+
name|parameters
index|[
literal|1
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" was passed as parameter 2."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|parameters
index|[
literal|1
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
operator|!=
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
operator|.
name|INT
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"Only an integer argument is accepted as parameter 2, but "
operator|+
name|parameters
index|[
literal|1
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" was passed instead."
argument_list|)
throw|;
block|}
return|return
operator|new
name|GenericUDAFHistogramNumericEvaluator
argument_list|()
return|;
block|}
comment|/**    * Construct a histogram using an algorithm described by Ben-Haim and Tom-Tov.    *    * The algorithm is a heuristic adapted from the following paper:    * Yael Ben-Haim and Elad Tom-Tov, "A streaming parallel decision tree algorithm",    * J. Machine Learning Research 11 (2010), pp. 849--872. Although there are no approximation    * guarantees, it appears to work well with adequate data and a large (e.g., 20-80) number    * of histogram bins.    */
specifier|public
specifier|static
class|class
name|GenericUDAFHistogramNumericEvaluator
extends|extends
name|GenericUDAFEvaluator
block|{
comment|// For PARTIAL1 and COMPLETE: ObjectInspectors for original data
specifier|private
name|PrimitiveObjectInspector
name|inputOI
decl_stmt|;
specifier|private
specifier|transient
name|PrimitiveObjectInspector
name|nbinsOI
decl_stmt|;
comment|// For PARTIAL2 and FINAL: ObjectInspectors for partial aggregations (list of doubles)
specifier|private
specifier|transient
name|StandardListObjectInspector
name|loi
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// init input object inspectors
if|if
condition|(
name|m
operator|==
name|Mode
operator|.
name|PARTIAL1
operator|||
name|m
operator|==
name|Mode
operator|.
name|COMPLETE
condition|)
block|{
assert|assert
operator|(
name|parameters
operator|.
name|length
operator|==
literal|2
operator|)
assert|;
name|inputOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
name|nbinsOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|parameters
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|loi
operator|=
operator|(
name|StandardListObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|// init output object inspectors
if|if
condition|(
name|m
operator|==
name|Mode
operator|.
name|PARTIAL1
operator|||
name|m
operator|==
name|Mode
operator|.
name|PARTIAL2
condition|)
block|{
comment|// The output of a partial aggregation is a list of doubles representing the
comment|// histogram being constructed. The first element in the list is the user-specified
comment|// number of bins in the histogram, and the histogram itself is represented as (x,y)
comment|// pairs following the first element, so the list length should *always* be odd.
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
argument_list|)
return|;
block|}
else|else
block|{
comment|// The output of FINAL and COMPLETE is a full aggregation, which is a
comment|// list of DoubleWritable structs that represent the final histogram as
comment|// (x,y) pairs of bin centers and heights.
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|foi
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fname
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fname
argument_list|,
name|foi
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminatePartial
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Return a single ArrayList where the first element is the number of histogram bins,
comment|// and subsequent elements represent histogram (x,y) pairs.
name|StdAgg
name|myagg
init|=
operator|(
name|StdAgg
operator|)
name|agg
decl_stmt|;
return|return
name|myagg
operator|.
name|histogram
operator|.
name|serialize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|StdAgg
name|myagg
init|=
operator|(
name|StdAgg
operator|)
name|agg
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|histogram
operator|.
name|getUsedBins
argument_list|()
operator|<
literal|1
condition|)
block|{
comment|// SQL standard - return null for zero elements
return|return
literal|null
return|;
block|}
else|else
block|{
name|ArrayList
argument_list|<
name|DoubleWritable
index|[]
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|DoubleWritable
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myagg
operator|.
name|histogram
operator|.
name|getUsedBins
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DoubleWritable
index|[]
name|bin
init|=
operator|new
name|DoubleWritable
index|[
literal|2
index|]
decl_stmt|;
name|bin
index|[
literal|0
index|]
operator|=
operator|new
name|DoubleWritable
argument_list|(
name|myagg
operator|.
name|histogram
operator|.
name|getBin
argument_list|(
name|i
argument_list|)
operator|.
name|x
argument_list|)
expr_stmt|;
name|bin
index|[
literal|1
index|]
operator|=
operator|new
name|DoubleWritable
argument_list|(
name|myagg
operator|.
name|histogram
operator|.
name|getBin
argument_list|(
name|i
argument_list|)
operator|.
name|y
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|bin
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|merge
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
name|partial
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|partial
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|DoubleWritable
argument_list|>
name|partialHistogram
init|=
operator|(
name|List
argument_list|<
name|DoubleWritable
argument_list|>
operator|)
name|loi
operator|.
name|getList
argument_list|(
name|partial
argument_list|)
decl_stmt|;
name|StdAgg
name|myagg
init|=
operator|(
name|StdAgg
operator|)
name|agg
decl_stmt|;
name|myagg
operator|.
name|histogram
operator|.
name|merge
argument_list|(
name|partialHistogram
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
assert|assert
operator|(
name|parameters
operator|.
name|length
operator|==
literal|2
operator|)
assert|;
if|if
condition|(
name|parameters
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|parameters
index|[
literal|1
index|]
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|StdAgg
name|myagg
init|=
operator|(
name|StdAgg
operator|)
name|agg
decl_stmt|;
comment|// Parse out the number of histogram bins only once, if we haven't already done
comment|// so before. We need at least 2 bins; otherwise, there is no point in creating
comment|// a histogram.
if|if
condition|(
operator|!
name|myagg
operator|.
name|histogram
operator|.
name|isReady
argument_list|()
condition|)
block|{
name|int
name|nbins
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getInt
argument_list|(
name|parameters
index|[
literal|1
index|]
argument_list|,
name|nbinsOI
argument_list|)
decl_stmt|;
if|if
condition|(
name|nbins
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" needs nbins to be at least 2,"
operator|+
literal|" but you supplied "
operator|+
name|nbins
operator|+
literal|"."
argument_list|)
throw|;
block|}
comment|// allocate memory for the histogram bins
name|myagg
operator|.
name|histogram
operator|.
name|allocate
argument_list|(
name|nbins
argument_list|)
expr_stmt|;
block|}
comment|// Process the current data point
name|double
name|v
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getDouble
argument_list|(
name|parameters
index|[
literal|0
index|]
argument_list|,
name|inputOI
argument_list|)
decl_stmt|;
name|myagg
operator|.
name|histogram
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
comment|// Aggregation buffer definition and manipulation methods
annotation|@
name|AggregationType
argument_list|(
name|estimable
operator|=
literal|true
argument_list|)
specifier|static
class|class
name|StdAgg
extends|extends
name|AbstractAggregationBuffer
block|{
name|NumericHistogram
name|histogram
decl_stmt|;
comment|// the histogram object
annotation|@
name|Override
specifier|public
name|int
name|estimate
parameter_list|()
block|{
return|return
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthFor
argument_list|(
name|histogram
argument_list|)
return|;
block|}
block|}
empty_stmt|;
annotation|@
name|Override
specifier|public
name|AggregationBuffer
name|getNewAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
name|StdAgg
name|result
init|=
operator|new
name|StdAgg
argument_list|()
decl_stmt|;
name|reset
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|StdAgg
name|myagg
init|=
operator|(
name|StdAgg
operator|)
name|agg
decl_stmt|;
name|myagg
operator|.
name|histogram
operator|=
operator|new
name|NumericHistogram
argument_list|()
expr_stmt|;
name|myagg
operator|.
name|histogram
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

