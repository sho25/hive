begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardMapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|DoubleObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableDoubleObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Computes an approximate histogram of a numerical column using a user-specified number of bins.  *   * The output is an array of (x,y) pairs as Hive struct objects that represents the histogram's  * bin centers and heights.  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"histogram_numeric"
argument_list|,
name|value
operator|=
literal|"_FUNC_(expr, nb) - Computes a histogram on numeric 'expr' using nb bins."
argument_list|)
specifier|public
class|class
name|GenericUDAFHistogramNumeric
implements|implements
name|GenericUDAFResolver
block|{
comment|// class static variables
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GenericUDAFHistogramNumeric
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|parameters
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|parameters
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|"Please specify exactly two arguments."
argument_list|)
throw|;
block|}
comment|// validate the first parameter, which is the expression to compute over
if|if
condition|(
name|parameters
index|[
literal|0
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"Only primitive type arguments are accepted but "
operator|+
name|parameters
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" was passed as parameter 1."
argument_list|)
throw|;
block|}
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|parameters
index|[
literal|0
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
break|break;
case|case
name|STRING
case|:
case|case
name|BOOLEAN
case|:
default|default:
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"Only numeric type arguments are accepted but "
operator|+
name|parameters
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" was passed as parameter 1."
argument_list|)
throw|;
block|}
comment|// validate the second parameter, which is the number of histogram bins
if|if
condition|(
name|parameters
index|[
literal|1
index|]
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"Only primitive type arguments are accepted but "
operator|+
name|parameters
index|[
literal|1
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" was passed as parameter 2."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|parameters
index|[
literal|1
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
operator|!=
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
operator|.
name|INT
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"Only an integer argument is accepted as parameter 2, but "
operator|+
name|parameters
index|[
literal|1
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" was passed instead."
argument_list|)
throw|;
block|}
return|return
operator|new
name|GenericUDAFHistogramNumericEvaluator
argument_list|()
return|;
block|}
comment|/**    * Construct a histogram using the algorithm described by Ben-Haim and Tom-Tov.    *    * The algorithm is a heuristic adapted from the following paper:    * Yael Ben-Haim and Elad Tom-Tov, "A streaming parallel decision tree algorithm",    * J. Machine Learning Research 11 (2010), pp. 849--872. Although there are no approximation    * guarantees, it appears to work well with adequate data and a large (e.g., 20-80) number    * of histogram bins.    */
specifier|public
specifier|static
class|class
name|GenericUDAFHistogramNumericEvaluator
extends|extends
name|GenericUDAFEvaluator
block|{
comment|// For PARTIAL1 and COMPLETE: ObjectInspectors for original data
specifier|private
name|PrimitiveObjectInspector
name|inputOI
decl_stmt|;
specifier|private
name|PrimitiveObjectInspector
name|nbinsOI
decl_stmt|;
comment|// For PARTIAL2 and FINAL: ObjectInspectors for partial aggregations (list of doubles)
specifier|private
name|StandardListObjectInspector
name|loi
decl_stmt|;
comment|// A PRNG for breaking ties in histogram bin merging
name|Random
name|prng
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// init the RNG for breaking ties in histogram merging. A fixed seed is specified here
comment|// to aid testing, but can be eliminated to use a time-based seed (and have non-deterministic
comment|// results).
name|prng
operator|=
operator|new
name|Random
argument_list|(
literal|31183
argument_list|)
expr_stmt|;
comment|// init input object inspectors
if|if
condition|(
name|m
operator|==
name|Mode
operator|.
name|PARTIAL1
operator|||
name|m
operator|==
name|Mode
operator|.
name|COMPLETE
condition|)
block|{
assert|assert
operator|(
name|parameters
operator|.
name|length
operator|==
literal|2
operator|)
assert|;
name|inputOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
name|nbinsOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|parameters
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|loi
operator|=
operator|(
name|StandardListObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|// init output object inspectors
if|if
condition|(
name|m
operator|==
name|Mode
operator|.
name|PARTIAL1
operator|||
name|m
operator|==
name|Mode
operator|.
name|PARTIAL2
condition|)
block|{
comment|// The output of a partial aggregation is a list of doubles representing the
comment|// histogram being constructed. The first element in the list is the user-specified
comment|// number of bins in the histogram, and the histogram itself is represented as (x,y)
comment|// pairs following the first element, so the list length should *always* be odd.
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
argument_list|)
return|;
block|}
else|else
block|{
comment|// The output of FINAL and COMPLETE is a full aggregation, which is a
comment|// list of DoubleWritable structs that represent the final histogram as
comment|// (x,y) pairs of bin centers and heights.
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|foi
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
argument_list|)
expr_stmt|;
name|foi
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fname
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|fname
operator|.
name|add
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fname
argument_list|,
name|foi
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminatePartial
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|ArrayList
argument_list|<
name|DoubleWritable
argument_list|>
name|partialResult
init|=
operator|new
name|ArrayList
argument_list|<
name|DoubleWritable
argument_list|>
argument_list|()
decl_stmt|;
name|StdAgg
name|myagg
init|=
operator|(
name|StdAgg
operator|)
name|agg
decl_stmt|;
comment|// Return a single ArrayList where the first element is the number of histogram bins,
comment|// and subsequent elements represent histogram (x,y) pairs.
name|partialResult
operator|.
name|add
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
name|myagg
operator|.
name|nbins
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|myagg
operator|.
name|hist
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myagg
operator|.
name|nusedbins
condition|;
name|i
operator|++
control|)
block|{
name|partialResult
operator|.
name|add
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
name|myagg
operator|.
name|hist
index|[
name|i
index|]
operator|.
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|partialResult
operator|.
name|add
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
name|myagg
operator|.
name|hist
index|[
name|i
index|]
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|partialResult
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|StdAgg
name|myagg
init|=
operator|(
name|StdAgg
operator|)
name|agg
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|nusedbins
operator|<
literal|1
condition|)
block|{
comment|// SQL standard - return null for zero elements
return|return
literal|null
return|;
block|}
else|else
block|{
name|ArrayList
argument_list|<
name|DoubleWritable
index|[]
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|DoubleWritable
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myagg
operator|.
name|nusedbins
condition|;
name|i
operator|++
control|)
block|{
name|DoubleWritable
index|[]
name|bin
init|=
operator|new
name|DoubleWritable
index|[
literal|2
index|]
decl_stmt|;
name|bin
index|[
literal|0
index|]
operator|=
operator|new
name|DoubleWritable
argument_list|(
name|myagg
operator|.
name|hist
index|[
name|i
index|]
operator|.
name|x
argument_list|)
expr_stmt|;
name|bin
index|[
literal|1
index|]
operator|=
operator|new
name|DoubleWritable
argument_list|(
name|myagg
operator|.
name|hist
index|[
name|i
index|]
operator|.
name|y
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|bin
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|merge
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
name|partial
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|partial
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ArrayList
name|partialHistogram
init|=
operator|(
name|ArrayList
operator|)
name|loi
operator|.
name|getList
argument_list|(
name|partial
argument_list|)
decl_stmt|;
name|StdAgg
name|myagg
init|=
operator|(
name|StdAgg
operator|)
name|agg
decl_stmt|;
if|if
condition|(
name|myagg
operator|.
name|nbins
operator|==
literal|0
operator|||
name|myagg
operator|.
name|nusedbins
operator|==
literal|0
condition|)
block|{
comment|// The aggregation buffer has nothing in it, so just copy over 'partial' into myagg
comment|// by deserializing the ArrayList of (x,y) pairs into an array of Coord objects
name|myagg
operator|.
name|nbins
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|DoubleWritable
operator|)
name|partialHistogram
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|myagg
operator|.
name|nusedbins
operator|=
operator|(
name|partialHistogram
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
name|myagg
operator|.
name|hist
operator|=
operator|new
name|StdAgg
operator|.
name|Coord
index|[
name|myagg
operator|.
name|nbins
operator|+
literal|1
index|]
expr_stmt|;
comment|// +1 to hold a temporary bin for insert()
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|partialHistogram
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|myagg
operator|.
name|hist
index|[
operator|(
name|i
operator|-
literal|1
operator|)
operator|/
literal|2
index|]
operator|=
operator|new
name|StdAgg
operator|.
name|Coord
argument_list|()
expr_stmt|;
name|myagg
operator|.
name|hist
index|[
operator|(
name|i
operator|-
literal|1
operator|)
operator|/
literal|2
index|]
operator|.
name|x
operator|=
operator|(
operator|(
name|DoubleWritable
operator|)
name|partialHistogram
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|myagg
operator|.
name|hist
index|[
operator|(
name|i
operator|-
literal|1
operator|)
operator|/
literal|2
index|]
operator|.
name|y
operator|=
operator|(
operator|(
name|DoubleWritable
operator|)
name|partialHistogram
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// The aggregation buffer already contains a partial histogram. Therefore, we need
comment|// to merge histograms using Algorithm #2 from the Ben-Haim and Tom-Tov paper.
name|StdAgg
operator|.
name|Coord
index|[]
name|tmp_histogram
init|=
operator|new
name|StdAgg
operator|.
name|Coord
index|[
name|myagg
operator|.
name|nusedbins
operator|+
operator|(
name|partialHistogram
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|/
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tmp_histogram
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|tmp_histogram
index|[
name|j
index|]
operator|=
operator|new
name|StdAgg
operator|.
name|Coord
argument_list|()
expr_stmt|;
block|}
comment|// Copy all the histogram bins from 'myagg' and 'partial' into an overstuffed histogram
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|myagg
operator|.
name|nusedbins
condition|;
name|i
operator|++
control|)
block|{
name|tmp_histogram
index|[
name|i
index|]
operator|.
name|x
operator|=
name|myagg
operator|.
name|hist
index|[
name|i
index|]
operator|.
name|x
expr_stmt|;
name|tmp_histogram
index|[
name|i
index|]
operator|.
name|y
operator|=
name|myagg
operator|.
name|hist
index|[
name|i
index|]
operator|.
name|y
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|partialHistogram
operator|.
name|size
argument_list|()
condition|;
name|j
operator|+=
literal|2
operator|,
name|i
operator|++
control|)
block|{
name|tmp_histogram
index|[
name|i
index|]
operator|.
name|x
operator|=
operator|(
operator|(
name|DoubleWritable
operator|)
name|partialHistogram
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|tmp_histogram
index|[
name|i
index|]
operator|.
name|y
operator|=
operator|(
operator|(
name|DoubleWritable
operator|)
name|partialHistogram
operator|.
name|get
argument_list|(
name|j
operator|+
literal|1
argument_list|)
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|tmp_histogram
argument_list|)
expr_stmt|;
comment|// Now trim the overstuffed histogram down to the correct number of bins
name|myagg
operator|.
name|hist
operator|=
name|tmp_histogram
expr_stmt|;
name|myagg
operator|.
name|nusedbins
operator|+=
operator|(
name|partialHistogram
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
name|trim
argument_list|(
name|myagg
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Algorithm #1 from the Ben-Haim and Tom-Tov paper: histogram update procedure for a single
comment|// new data point 'v'.
specifier|private
name|void
name|insert
parameter_list|(
name|StdAgg
name|myagg
parameter_list|,
name|double
name|v
parameter_list|)
block|{
name|StdAgg
operator|.
name|Coord
index|[]
name|histogram
init|=
name|myagg
operator|.
name|hist
decl_stmt|;
comment|// Binary search to find the closest bucket that v should go into.
comment|// 'bin' should be interpreted as the bin to shift right in order to accomodate
comment|// v. As a result, bin is in the range [0,N], where N means that the value v is
comment|// greater than all the N bins currently in the histogram. It is also possible that
comment|// a bucket centered at 'v' already exists, so this must be checked in the next step.
name|int
name|bin
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|l
init|=
literal|0
init|,
name|r
init|=
name|myagg
operator|.
name|nusedbins
init|;
name|l
operator|<
name|r
condition|;
control|)
block|{
name|bin
operator|=
operator|(
name|l
operator|+
name|r
operator|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|histogram
index|[
name|bin
index|]
operator|.
name|x
operator|>
name|v
condition|)
block|{
name|r
operator|=
name|bin
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|histogram
index|[
name|bin
index|]
operator|.
name|x
operator|<
name|v
condition|)
block|{
name|l
operator|=
operator|++
name|bin
expr_stmt|;
block|}
else|else
block|{
break|break;
comment|// break loop on equal comparator
block|}
block|}
block|}
comment|// If we found an exact bin match for value v, then just increment that bin's count.
comment|// Otherwise, we need to insert a new bin and trim the resulting histogram back to size.
comment|// A possible optimization here might be to set some threshold under which 'v' is just
comment|// assumed to be equal to the closest bin -- if fabs(v-histogram[bin].x)< THRESHOLD, then
comment|// just increment 'bin'
if|if
condition|(
name|bin
operator|<
name|myagg
operator|.
name|nusedbins
operator|&&
name|histogram
index|[
name|bin
index|]
operator|.
name|x
operator|==
name|v
condition|)
block|{
name|histogram
index|[
name|bin
index|]
operator|.
name|y
operator|++
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|myagg
operator|.
name|nusedbins
init|;
name|i
operator|>
name|bin
condition|;
name|i
operator|--
control|)
block|{
name|myagg
operator|.
name|hist
index|[
name|i
index|]
operator|.
name|x
operator|=
name|myagg
operator|.
name|hist
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|x
expr_stmt|;
name|myagg
operator|.
name|hist
index|[
name|i
index|]
operator|.
name|y
operator|=
name|myagg
operator|.
name|hist
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|y
expr_stmt|;
block|}
name|myagg
operator|.
name|hist
index|[
name|bin
index|]
operator|.
name|x
operator|=
name|v
expr_stmt|;
comment|// new histogram bin for value 'v'
name|myagg
operator|.
name|hist
index|[
name|bin
index|]
operator|.
name|y
operator|=
literal|1
expr_stmt|;
comment|// of height 1 unit
comment|// Trim the histogram down to the correct number of bins.
if|if
condition|(
operator|++
name|myagg
operator|.
name|nusedbins
operator|>
name|myagg
operator|.
name|nbins
condition|)
block|{
name|trim
argument_list|(
name|myagg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Trims a histogram down to 'nbins' bins by iteratively merging the closest bins.
comment|// If two pairs of bins are equally close to each other, decide uniformly at random which
comment|// pair to merge, based on a PRNG.
specifier|private
name|void
name|trim
parameter_list|(
name|StdAgg
name|myagg
parameter_list|)
block|{
comment|// Ensure that there are at least 3 histogram bins (because nbins>=2).
if|if
condition|(
name|myagg
operator|.
name|nusedbins
operator|<=
name|myagg
operator|.
name|nbins
condition|)
block|{
return|return;
block|}
name|StdAgg
operator|.
name|Coord
index|[]
name|histogram
init|=
name|myagg
operator|.
name|hist
decl_stmt|;
while|while
condition|(
name|myagg
operator|.
name|nusedbins
operator|>
name|myagg
operator|.
name|nbins
condition|)
block|{
comment|// Find the closest histogram bins in terms of x coordinates. Break ties randomly.
name|double
name|smallestdiff
init|=
name|histogram
index|[
literal|1
index|]
operator|.
name|x
operator|-
name|histogram
index|[
literal|0
index|]
operator|.
name|x
decl_stmt|;
name|int
name|smallestdiffloc
init|=
literal|0
decl_stmt|,
name|smallestdiffcount
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|myagg
operator|.
name|nusedbins
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|double
name|diff
init|=
name|histogram
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|x
operator|-
name|histogram
index|[
name|i
index|]
operator|.
name|x
decl_stmt|;
if|if
condition|(
name|diff
operator|<
name|smallestdiff
condition|)
block|{
name|smallestdiff
operator|=
name|diff
expr_stmt|;
name|smallestdiffloc
operator|=
name|i
expr_stmt|;
name|smallestdiffcount
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|diff
operator|==
name|smallestdiff
operator|&&
name|prng
operator|.
name|nextDouble
argument_list|()
operator|<=
operator|(
literal|1.0
operator|/
operator|++
name|smallestdiffcount
operator|)
condition|)
block|{
name|smallestdiffloc
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
comment|// Merge the two closest bins into their average x location, weighted by their heights.
comment|// The height of the new bin is the sum of the heights of the old bins.
name|double
name|d
init|=
name|histogram
index|[
name|smallestdiffloc
index|]
operator|.
name|y
operator|+
name|histogram
index|[
name|smallestdiffloc
operator|+
literal|1
index|]
operator|.
name|y
decl_stmt|;
name|histogram
index|[
name|smallestdiffloc
index|]
operator|.
name|x
operator|*=
name|histogram
index|[
name|smallestdiffloc
index|]
operator|.
name|y
operator|/
name|d
expr_stmt|;
name|histogram
index|[
name|smallestdiffloc
index|]
operator|.
name|x
operator|+=
name|histogram
index|[
name|smallestdiffloc
operator|+
literal|1
index|]
operator|.
name|x
operator|/
name|d
operator|*
name|histogram
index|[
name|smallestdiffloc
operator|+
literal|1
index|]
operator|.
name|y
expr_stmt|;
name|histogram
index|[
name|smallestdiffloc
index|]
operator|.
name|y
operator|=
name|d
expr_stmt|;
comment|// Shift the remaining bins left one position
for|for
control|(
name|int
name|i
init|=
name|smallestdiffloc
operator|+
literal|1
init|;
name|i
operator|<
name|myagg
operator|.
name|nusedbins
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|histogram
index|[
name|i
index|]
operator|.
name|x
operator|=
name|histogram
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|x
expr_stmt|;
name|histogram
index|[
name|i
index|]
operator|.
name|y
operator|=
name|histogram
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|y
expr_stmt|;
block|}
name|myagg
operator|.
name|nusedbins
operator|--
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|warned
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
assert|assert
operator|(
name|parameters
operator|.
name|length
operator|==
literal|2
operator|)
assert|;
if|if
condition|(
name|parameters
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|parameters
index|[
literal|1
index|]
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|StdAgg
name|myagg
init|=
operator|(
name|StdAgg
operator|)
name|agg
decl_stmt|;
comment|// Parse out the number of histogram bins only once, if we haven't already done
comment|// so before. We need at least 2 bins; otherwise, there is no point in creating
comment|// a histogram.
if|if
condition|(
name|myagg
operator|.
name|nbins
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|myagg
operator|.
name|nbins
operator|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getInt
argument_list|(
name|parameters
index|[
literal|1
index|]
argument_list|,
name|nbinsOI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|myagg
operator|.
name|nbins
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" needs nbins to be at least 2,"
operator|+
literal|" but you supplied "
operator|+
name|myagg
operator|.
name|nbins
operator|+
literal|"."
argument_list|)
throw|;
block|}
comment|// allocate memory for the histogram
name|myagg
operator|.
name|hist
operator|=
operator|new
name|StdAgg
operator|.
name|Coord
index|[
name|myagg
operator|.
name|nbins
operator|+
literal|1
index|]
expr_stmt|;
comment|// +1 is used for holding a temporary bin
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myagg
operator|.
name|nbins
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|myagg
operator|.
name|hist
index|[
name|i
index|]
operator|=
operator|new
name|StdAgg
operator|.
name|Coord
argument_list|()
expr_stmt|;
block|}
name|myagg
operator|.
name|nusedbins
operator|=
literal|0
expr_stmt|;
block|}
comment|// Process the current data point
name|Object
name|p
init|=
name|parameters
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|double
name|v
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getDouble
argument_list|(
name|p
argument_list|,
name|inputOI
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|myagg
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Aggregation buffer definition and manipulation methods
specifier|static
class|class
name|StdAgg
implements|implements
name|AggregationBuffer
block|{
specifier|static
class|class
name|Coord
implements|implements
name|Comparable
block|{
name|double
name|x
decl_stmt|;
name|double
name|y
decl_stmt|;
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
name|Coord
name|o
init|=
operator|(
name|Coord
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|x
operator|<
name|o
operator|.
name|x
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|x
operator|>
name|o
operator|.
name|x
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
empty_stmt|;
name|int
name|nbins
decl_stmt|;
comment|// maximum number of histogram bins
name|int
name|nusedbins
decl_stmt|;
comment|// number of histogram bins actually used
name|Coord
index|[]
name|hist
decl_stmt|;
comment|// histogram coordinates
block|}
empty_stmt|;
annotation|@
name|Override
specifier|public
name|AggregationBuffer
name|getNewAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
name|StdAgg
name|result
init|=
operator|new
name|StdAgg
argument_list|()
decl_stmt|;
name|reset
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|StdAgg
name|myagg
init|=
operator|(
name|StdAgg
operator|)
name|agg
decl_stmt|;
name|myagg
operator|.
name|nbins
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|nusedbins
operator|=
literal|0
expr_stmt|;
name|myagg
operator|.
name|hist
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

