begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|convert
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|writable
operator|.
name|BinaryWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|writable
operator|.
name|BinaryWritable
operator|.
name|DicBinaryWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|column
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|PrimitiveConverter
import|;
end_import

begin_comment
comment|/**  *  * ETypeConverter is an easy way to set the converter for the right type.  *  */
end_comment

begin_enum
specifier|public
enum|enum
name|ETypeConverter
block|{
name|EDOUBLE_CONVERTER
parameter_list|(
name|Double
operator|.
name|TYPE
parameter_list|)
block|{
annotation|@
name|Override
name|Converter
name|getConverter
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|HiveGroupConverter
name|parent
parameter_list|)
block|{
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addDouble
parameter_list|(
specifier|final
name|double
name|value
parameter_list|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|DoubleWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
block|,
name|EBOOLEAN_CONVERTER
parameter_list|(
name|Boolean
operator|.
name|TYPE
parameter_list|)
block|{
annotation|@
name|Override
name|Converter
name|getConverter
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|HiveGroupConverter
name|parent
parameter_list|)
block|{
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addBoolean
parameter_list|(
specifier|final
name|boolean
name|value
parameter_list|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|BooleanWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
block|,
name|EFLOAT_CONVERTER
parameter_list|(
name|Float
operator|.
name|TYPE
parameter_list|)
block|{
annotation|@
name|Override
name|Converter
name|getConverter
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|HiveGroupConverter
name|parent
parameter_list|)
block|{
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addFloat
parameter_list|(
specifier|final
name|float
name|value
parameter_list|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|FloatWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
block|,
name|EINT32_CONVERTER
parameter_list|(
name|Integer
operator|.
name|TYPE
parameter_list|)
block|{
annotation|@
name|Override
name|Converter
name|getConverter
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|HiveGroupConverter
name|parent
parameter_list|)
block|{
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addInt
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|IntWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
block|,
name|EINT64_CONVERTER
parameter_list|(
name|Long
operator|.
name|TYPE
parameter_list|)
block|{
annotation|@
name|Override
name|Converter
name|getConverter
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|HiveGroupConverter
name|parent
parameter_list|)
block|{
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addLong
parameter_list|(
specifier|final
name|long
name|value
parameter_list|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
block|,
name|EINT96_CONVERTER
parameter_list|(
name|BigDecimal
operator|.
name|class
parameter_list|)
block|{
annotation|@
name|Override
name|Converter
name|getConverter
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|HiveGroupConverter
name|parent
parameter_list|)
block|{
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
comment|// TODO in HIVE-6367 decimal should not be treated as a double
annotation|@
name|Override
specifier|public
name|void
name|addDouble
parameter_list|(
specifier|final
name|double
name|value
parameter_list|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|DoubleWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
block|,
name|EBINARY_CONVERTER
parameter_list|(
name|Binary
operator|.
name|class
parameter_list|)
block|{
annotation|@
name|Override
name|Converter
name|getConverter
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|HiveGroupConverter
name|parent
parameter_list|)
block|{
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
specifier|private
name|Binary
index|[]
name|dictBinary
decl_stmt|;
specifier|private
name|String
index|[]
name|dict
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasDictionarySupport
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDictionary
parameter_list|(
name|Dictionary
name|dictionary
parameter_list|)
block|{
name|dictBinary
operator|=
operator|new
name|Binary
index|[
name|dictionary
operator|.
name|getMaxId
argument_list|()
operator|+
literal|1
index|]
expr_stmt|;
name|dict
operator|=
operator|new
name|String
index|[
name|dictionary
operator|.
name|getMaxId
argument_list|()
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|dictionary
operator|.
name|getMaxId
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Binary
name|binary
init|=
name|dictionary
operator|.
name|decodeToBinary
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|dictBinary
index|[
name|i
index|]
operator|=
name|binary
expr_stmt|;
name|dict
index|[
name|i
index|]
operator|=
name|binary
operator|.
name|toStringUsingUTF8
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addValueFromDictionary
parameter_list|(
name|int
name|dictionaryId
parameter_list|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|DicBinaryWritable
argument_list|(
name|dictBinary
index|[
name|dictionaryId
index|]
argument_list|,
name|dict
index|[
name|dictionaryId
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addBinary
parameter_list|(
name|Binary
name|value
parameter_list|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|BinaryWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
block|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|_type
decl_stmt|;
specifier|private
name|ETypeConverter
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|this
operator|.
name|_type
operator|=
name|type
expr_stmt|;
block|}
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|_type
return|;
block|}
specifier|abstract
name|Converter
name|getConverter
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|HiveGroupConverter
name|parent
parameter_list|)
function_decl|;
specifier|public
specifier|static
name|Converter
name|getNewConverter
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|HiveGroupConverter
name|parent
parameter_list|)
block|{
for|for
control|(
specifier|final
name|ETypeConverter
name|eConverter
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|eConverter
operator|.
name|getType
argument_list|()
operator|==
name|type
condition|)
block|{
return|return
name|eConverter
operator|.
name|getConverter
argument_list|(
name|type
argument_list|,
name|index
argument_list|,
name|parent
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Converter not found ... for type : "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
end_enum

end_unit

