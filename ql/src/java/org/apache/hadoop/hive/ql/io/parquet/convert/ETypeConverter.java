begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|convert
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|read
operator|.
name|DataWritableReadSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|timestamp
operator|.
name|NanoTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|timestamp
operator|.
name|NanoTimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|timestamp
operator|.
name|ParquetTimestampUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|HiveDecimalUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|column
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|io
operator|.
name|api
operator|.
name|PrimitiveConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|LogicalTypeAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|LogicalTypeAnnotation
operator|.
name|DecimalLogicalTypeAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|LogicalTypeAnnotation
operator|.
name|LogicalTypeAnnotationVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|LogicalTypeAnnotation
operator|.
name|StringLogicalTypeAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|LogicalTypeAnnotation
operator|.
name|TimestampLogicalTypeAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|LogicalTypeAnnotation
operator|.
name|DateLogicalTypeAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|parquet
operator|.
name|schema
operator|.
name|PrimitiveType
import|;
end_import

begin_comment
comment|/**  *  * ETypeConverter is an easy way to set the converter for the right type.  *  */
end_comment

begin_enum
specifier|public
enum|enum
name|ETypeConverter
block|{
name|EDOUBLE_CONVERTER
parameter_list|(
name|Double
operator|.
name|TYPE
parameter_list|)
block|{
annotation|@
name|Override
name|PrimitiveConverter
name|getConverter
parameter_list|(
specifier|final
name|PrimitiveType
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ConverterParent
name|parent
parameter_list|,
name|TypeInfo
name|hiveTypeInfo
parameter_list|)
block|{
if|if
condition|(
name|hiveTypeInfo
operator|!=
literal|null
condition|)
block|{
name|String
name|typeName
init|=
name|TypeInfoUtils
operator|.
name|getBaseName
argument_list|(
name|hiveTypeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|double
name|minValue
init|=
name|getMinValue
argument_list|(
name|typeName
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|double
name|maxValue
init|=
name|getMaxValue
argument_list|(
name|typeName
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addDouble
parameter_list|(
specifier|final
name|double
name|value
parameter_list|)
block|{
name|double
name|absValue
init|=
operator|(
name|value
operator|<
literal|0
operator|)
condition|?
operator|(
name|value
operator|*
operator|-
literal|1
operator|)
else|:
name|value
decl_stmt|;
name|int
name|exponent
init|=
name|Math
operator|.
name|getExponent
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|absValue
operator|>=
name|minValue
operator|)
operator|&&
operator|(
name|absValue
operator|<=
name|maxValue
operator|)
operator|&&
operator|(
name|exponent
operator|<=
name|Float
operator|.
name|MAX_EXPONENT
operator|)
operator|&&
operator|(
name|exponent
operator|>=
name|Float
operator|.
name|MIN_EXPONENT
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|FloatWritable
argument_list|(
operator|(
name|float
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addDouble
parameter_list|(
specifier|final
name|double
name|value
parameter_list|)
block|{
name|HiveDecimalWritable
name|decimalWritable
init|=
operator|new
name|HiveDecimalWritable
argument_list|()
decl_stmt|;
name|decimalWritable
operator|.
name|setFromDouble
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|HiveDecimalUtils
operator|.
name|enforcePrecisionScale
argument_list|(
name|decimalWritable
argument_list|,
operator|(
name|DecimalTypeInfo
operator|)
name|hiveTypeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addDouble
parameter_list|(
specifier|final
name|double
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|>=
name|minValue
operator|)
operator|&&
operator|(
name|value
operator|<=
name|maxValue
operator|)
operator|&&
operator|(
name|value
operator|%
literal|1
operator|==
literal|0
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|LongWritable
argument_list|(
operator|(
name|long
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|INT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addDouble
parameter_list|(
specifier|final
name|double
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|>=
name|minValue
operator|)
operator|&&
operator|(
name|value
operator|<=
name|maxValue
operator|)
operator|&&
operator|(
name|value
operator|%
literal|1
operator|==
literal|0
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addDouble
parameter_list|(
specifier|final
name|double
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|>=
name|minValue
operator|)
operator|&&
operator|(
name|value
operator|<=
name|maxValue
operator|)
operator|&&
operator|(
name|value
operator|%
literal|1
operator|==
literal|0
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addDouble
parameter_list|(
specifier|final
name|double
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|>=
name|minValue
operator|)
operator|&&
operator|(
name|value
operator|<=
name|maxValue
operator|)
operator|&&
operator|(
name|value
operator|%
literal|1
operator|==
literal|0
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
default|default:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addDouble
parameter_list|(
specifier|final
name|double
name|value
parameter_list|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|DoubleWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addDouble
parameter_list|(
specifier|final
name|double
name|value
parameter_list|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|DoubleWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
block|,
name|EBOOLEAN_CONVERTER
parameter_list|(
name|Boolean
operator|.
name|TYPE
parameter_list|)
block|{
annotation|@
name|Override
name|PrimitiveConverter
name|getConverter
parameter_list|(
specifier|final
name|PrimitiveType
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ConverterParent
name|parent
parameter_list|,
name|TypeInfo
name|hiveTypeInfo
parameter_list|)
block|{
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addBoolean
parameter_list|(
specifier|final
name|boolean
name|value
parameter_list|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|BooleanWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
block|,
name|EFLOAT_CONVERTER
parameter_list|(
name|Float
operator|.
name|TYPE
parameter_list|)
block|{
annotation|@
name|Override
name|PrimitiveConverter
name|getConverter
parameter_list|(
specifier|final
name|PrimitiveType
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ConverterParent
name|parent
parameter_list|,
name|TypeInfo
name|hiveTypeInfo
parameter_list|)
block|{
if|if
condition|(
name|hiveTypeInfo
operator|!=
literal|null
condition|)
block|{
name|String
name|typeName
init|=
name|TypeInfoUtils
operator|.
name|getBaseName
argument_list|(
name|hiveTypeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|double
name|minValue
init|=
name|getMinValue
argument_list|(
name|typeName
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|double
name|maxValue
init|=
name|getMaxValue
argument_list|(
name|typeName
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addFloat
parameter_list|(
specifier|final
name|float
name|value
parameter_list|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|DoubleWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addFloat
parameter_list|(
specifier|final
name|float
name|value
parameter_list|)
block|{
name|HiveDecimalWritable
name|decimalWritable
init|=
operator|new
name|HiveDecimalWritable
argument_list|()
decl_stmt|;
name|decimalWritable
operator|.
name|setFromDouble
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|HiveDecimalUtils
operator|.
name|enforcePrecisionScale
argument_list|(
name|decimalWritable
argument_list|,
operator|(
name|DecimalTypeInfo
operator|)
name|hiveTypeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addFloat
parameter_list|(
specifier|final
name|float
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|>=
name|minValue
operator|)
operator|&&
operator|(
name|value
operator|<=
name|maxValue
operator|)
operator|&&
operator|(
name|value
operator|%
literal|1
operator|==
literal|0
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|LongWritable
argument_list|(
operator|(
name|long
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|INT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addFloat
parameter_list|(
specifier|final
name|float
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|>=
name|minValue
operator|)
operator|&&
operator|(
name|value
operator|<=
name|maxValue
operator|)
operator|&&
operator|(
name|value
operator|%
literal|1
operator|==
literal|0
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addFloat
parameter_list|(
specifier|final
name|float
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|>=
name|minValue
operator|)
operator|&&
operator|(
name|value
operator|<=
name|maxValue
operator|)
operator|&&
operator|(
name|value
operator|%
literal|1
operator|==
literal|0
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addFloat
parameter_list|(
specifier|final
name|float
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|>=
name|minValue
operator|)
operator|&&
operator|(
name|value
operator|<=
name|maxValue
operator|)
operator|&&
operator|(
name|value
operator|%
literal|1
operator|==
literal|0
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
default|default:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addFloat
parameter_list|(
specifier|final
name|float
name|value
parameter_list|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|FloatWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addFloat
parameter_list|(
specifier|final
name|float
name|value
parameter_list|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|FloatWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
block|,
name|EINT32_CONVERTER
parameter_list|(
name|Integer
operator|.
name|TYPE
parameter_list|)
block|{
annotation|@
name|Override
name|PrimitiveConverter
name|getConverter
parameter_list|(
specifier|final
name|PrimitiveType
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ConverterParent
name|parent
parameter_list|,
name|TypeInfo
name|hiveTypeInfo
parameter_list|)
block|{
if|if
condition|(
name|hiveTypeInfo
operator|!=
literal|null
condition|)
block|{
name|String
name|typeName
init|=
name|TypeInfoUtils
operator|.
name|getBaseName
argument_list|(
name|hiveTypeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|minValue
init|=
name|getMinValue
argument_list|(
name|type
argument_list|,
name|typeName
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|long
name|maxValue
init|=
name|getMaxValue
argument_list|(
name|typeName
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addInt
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|>=
name|minValue
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|LongWritable
argument_list|(
operator|(
name|long
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addInt
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|>=
name|minValue
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|FloatWritable
argument_list|(
operator|(
name|float
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addInt
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|>=
name|minValue
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|DoubleWritable
argument_list|(
operator|(
name|float
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addInt
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|>=
name|minValue
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|HiveDecimalUtils
operator|.
name|enforcePrecisionScale
argument_list|(
operator|new
name|HiveDecimalWritable
argument_list|(
name|value
argument_list|)
argument_list|,
operator|(
name|DecimalTypeInfo
operator|)
name|hiveTypeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addInt
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|>=
name|minValue
operator|)
operator|&&
operator|(
name|value
operator|<=
name|maxValue
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addInt
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|>=
name|minValue
operator|)
operator|&&
operator|(
name|value
operator|<=
name|maxValue
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
default|default:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addInt
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|>=
name|minValue
operator|)
operator|&&
operator|(
name|value
operator|<=
name|maxValue
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|IntWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addInt
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|>=
operator|(
operator|(
name|ETypeConverter
operator|.
name|isUnsignedInteger
argument_list|(
name|type
argument_list|)
operator|)
condition|?
literal|0
else|:
name|Integer
operator|.
name|MIN_VALUE
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|IntWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
block|,
name|EINT64_CONVERTER
parameter_list|(
name|Long
operator|.
name|TYPE
parameter_list|)
block|{
annotation|@
name|Override
name|PrimitiveConverter
name|getConverter
parameter_list|(
specifier|final
name|PrimitiveType
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ConverterParent
name|parent
parameter_list|,
name|TypeInfo
name|hiveTypeInfo
parameter_list|)
block|{
if|if
condition|(
name|hiveTypeInfo
operator|!=
literal|null
condition|)
block|{
name|String
name|typeName
init|=
name|TypeInfoUtils
operator|.
name|getBaseName
argument_list|(
name|hiveTypeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|minValue
init|=
name|getMinValue
argument_list|(
name|type
argument_list|,
name|typeName
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|long
name|maxValue
init|=
name|getMaxValue
argument_list|(
name|typeName
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addLong
parameter_list|(
specifier|final
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|>=
name|minValue
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|FloatWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addLong
parameter_list|(
specifier|final
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|>=
name|minValue
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|DoubleWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addLong
parameter_list|(
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|>=
name|minValue
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|HiveDecimalUtils
operator|.
name|enforcePrecisionScale
argument_list|(
operator|new
name|HiveDecimalWritable
argument_list|(
name|value
argument_list|)
argument_list|,
operator|(
name|DecimalTypeInfo
operator|)
name|hiveTypeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|INT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addLong
parameter_list|(
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|>=
name|minValue
operator|)
operator|&&
operator|(
name|value
operator|<=
name|maxValue
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addLong
parameter_list|(
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|>=
name|minValue
operator|)
operator|&&
operator|(
name|value
operator|<=
name|maxValue
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addLong
parameter_list|(
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|>=
name|minValue
operator|)
operator|&&
operator|(
name|value
operator|<=
name|maxValue
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|IntWritable
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
default|default:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addLong
parameter_list|(
specifier|final
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|>=
name|minValue
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addLong
parameter_list|(
specifier|final
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|>=
operator|(
operator|(
name|ETypeConverter
operator|.
name|isUnsignedInteger
argument_list|(
name|type
argument_list|)
operator|)
condition|?
literal|0
else|:
name|Long
operator|.
name|MIN_VALUE
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
block|,
name|EBINARY_CONVERTER
parameter_list|(
name|Binary
operator|.
name|class
parameter_list|)
block|{
annotation|@
name|Override
name|PrimitiveConverter
name|getConverter
parameter_list|(
specifier|final
name|PrimitiveType
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ConverterParent
name|parent
parameter_list|,
name|TypeInfo
name|hiveTypeInfo
parameter_list|)
block|{
return|return
operator|new
name|BinaryConverter
argument_list|<
name|BytesWritable
argument_list|>
argument_list|(
name|type
argument_list|,
name|parent
argument_list|,
name|index
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|BytesWritable
name|convert
parameter_list|(
name|Binary
name|binary
parameter_list|)
block|{
return|return
operator|new
name|BytesWritable
argument_list|(
name|binary
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
block|,
name|ESTRING_CONVERTER
parameter_list|(
name|String
operator|.
name|class
parameter_list|)
block|{
annotation|@
name|Override
name|PrimitiveConverter
name|getConverter
parameter_list|(
specifier|final
name|PrimitiveType
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ConverterParent
name|parent
parameter_list|,
name|TypeInfo
name|hiveTypeInfo
parameter_list|)
block|{
return|return
operator|new
name|BinaryConverter
argument_list|<
name|Text
argument_list|>
argument_list|(
name|type
argument_list|,
name|parent
argument_list|,
name|index
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Text
name|convert
parameter_list|(
name|Binary
name|binary
parameter_list|)
block|{
return|return
operator|new
name|Text
argument_list|(
name|binary
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
block|,
name|EDECIMAL_CONVERTER
parameter_list|(
name|BigDecimal
operator|.
name|class
parameter_list|)
block|{
annotation|@
name|Override
name|PrimitiveConverter
name|getConverter
parameter_list|(
specifier|final
name|PrimitiveType
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ConverterParent
name|parent
parameter_list|,
name|TypeInfo
name|hiveTypeInfo
parameter_list|)
block|{
if|if
condition|(
name|hiveTypeInfo
operator|!=
literal|null
condition|)
block|{
name|String
name|typeName
init|=
name|TypeInfoUtils
operator|.
name|getBaseName
argument_list|(
name|hiveTypeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|double
name|minValue
init|=
name|getMinValue
argument_list|(
name|typeName
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|double
name|maxValue
init|=
name|getMaxValue
argument_list|(
name|typeName
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addBinary
parameter_list|(
name|Binary
name|value
parameter_list|)
block|{
name|HiveDecimalWritable
name|decimalWritable
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|,
name|getScale
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|setValue
argument_list|(
name|decimalWritable
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|decimalWritable
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addInt
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
name|HiveDecimal
name|hiveDecimal
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|value
argument_list|,
name|getScale
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|setValue
argument_list|(
name|hiveDecimal
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|hiveDecimal
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addLong
parameter_list|(
specifier|final
name|long
name|value
parameter_list|)
block|{
name|HiveDecimal
name|hiveDecimal
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|value
argument_list|,
name|getScale
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|setValue
argument_list|(
name|hiveDecimal
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|hiveDecimal
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setValue
parameter_list|(
name|double
name|doubleValue
parameter_list|,
name|float
name|floatValue
parameter_list|)
block|{
name|double
name|absDoubleValue
init|=
operator|(
name|doubleValue
operator|<
literal|0
operator|)
condition|?
operator|(
name|doubleValue
operator|*
operator|-
literal|1
operator|)
else|:
name|doubleValue
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|absDoubleValue
operator|>=
name|minValue
operator|)
operator|&&
operator|(
name|absDoubleValue
operator|<=
name|maxValue
operator|)
operator|)
operator|||
name|absDoubleValue
operator|==
literal|0d
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|FloatWritable
argument_list|(
name|floatValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|getScale
parameter_list|(
name|PrimitiveType
name|type
parameter_list|)
block|{
name|DecimalLogicalTypeAnnotation
name|logicalType
init|=
operator|(
name|DecimalLogicalTypeAnnotation
operator|)
name|type
operator|.
name|getLogicalTypeAnnotation
argument_list|()
decl_stmt|;
return|return
name|logicalType
operator|.
name|getScale
argument_list|()
return|;
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addBinary
parameter_list|(
name|Binary
name|value
parameter_list|)
block|{
name|HiveDecimalWritable
name|decimalWritable
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|,
name|getScale
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|DoubleWritable
argument_list|(
name|decimalWritable
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addInt
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
name|HiveDecimal
name|hiveDecimal
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|value
argument_list|,
name|getScale
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|DoubleWritable
argument_list|(
name|hiveDecimal
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addLong
parameter_list|(
specifier|final
name|long
name|value
parameter_list|)
block|{
name|HiveDecimal
name|hiveDecimal
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|value
argument_list|,
name|getScale
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|DoubleWritable
argument_list|(
name|hiveDecimal
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getScale
parameter_list|(
name|PrimitiveType
name|type
parameter_list|)
block|{
name|DecimalLogicalTypeAnnotation
name|logicalType
init|=
operator|(
name|DecimalLogicalTypeAnnotation
operator|)
name|type
operator|.
name|getLogicalTypeAnnotation
argument_list|()
decl_stmt|;
return|return
name|logicalType
operator|.
name|getScale
argument_list|()
return|;
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addBinary
parameter_list|(
name|Binary
name|value
parameter_list|)
block|{
name|HiveDecimalWritable
name|decimalWritable
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|,
name|getScale
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|setValue
argument_list|(
name|decimalWritable
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|decimalWritable
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addInt
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
name|HiveDecimal
name|hiveDecimal
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|value
argument_list|,
name|getScale
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|setValue
argument_list|(
name|hiveDecimal
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|hiveDecimal
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addLong
parameter_list|(
specifier|final
name|long
name|value
parameter_list|)
block|{
name|HiveDecimal
name|hiveDecimal
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|value
argument_list|,
name|getScale
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|setValue
argument_list|(
name|hiveDecimal
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|hiveDecimal
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setValue
parameter_list|(
name|double
name|doubleValue
parameter_list|,
name|long
name|longValue
parameter_list|)
block|{
if|if
condition|(
operator|(
name|doubleValue
operator|>=
name|minValue
operator|)
operator|&&
operator|(
name|doubleValue
operator|<=
name|maxValue
operator|)
operator|&&
operator|(
name|doubleValue
operator|%
literal|1
operator|==
literal|0
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|longValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|getScale
parameter_list|(
name|PrimitiveType
name|type
parameter_list|)
block|{
name|DecimalLogicalTypeAnnotation
name|logicalType
init|=
operator|(
name|DecimalLogicalTypeAnnotation
operator|)
name|type
operator|.
name|getLogicalTypeAnnotation
argument_list|()
decl_stmt|;
return|return
name|logicalType
operator|.
name|getScale
argument_list|()
return|;
block|}
block|}
return|;
case|case
name|serdeConstants
operator|.
name|INT_TYPE_NAME
case|:
case|case
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
case|:
case|case
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
case|:
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addBinary
parameter_list|(
name|Binary
name|value
parameter_list|)
block|{
name|HiveDecimalWritable
name|decimalWritable
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|,
name|getScale
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|setValue
argument_list|(
name|decimalWritable
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|decimalWritable
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addInt
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
name|HiveDecimal
name|hiveDecimal
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|value
argument_list|,
name|getScale
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|setValue
argument_list|(
name|hiveDecimal
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|hiveDecimal
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addLong
parameter_list|(
specifier|final
name|long
name|value
parameter_list|)
block|{
name|HiveDecimal
name|hiveDecimal
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|value
argument_list|,
name|getScale
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|setValue
argument_list|(
name|hiveDecimal
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|hiveDecimal
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setValue
parameter_list|(
name|double
name|doubleValue
parameter_list|,
name|int
name|intValue
parameter_list|)
block|{
if|if
condition|(
operator|(
name|doubleValue
operator|>=
name|minValue
operator|)
operator|&&
operator|(
name|doubleValue
operator|<=
name|maxValue
operator|)
operator|&&
operator|(
name|doubleValue
operator|%
literal|1
operator|==
literal|0
operator|)
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|IntWritable
argument_list|(
name|intValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|getScale
parameter_list|(
name|PrimitiveType
name|type
parameter_list|)
block|{
name|DecimalLogicalTypeAnnotation
name|logicalType
init|=
operator|(
name|DecimalLogicalTypeAnnotation
operator|)
name|type
operator|.
name|getLogicalTypeAnnotation
argument_list|()
decl_stmt|;
return|return
name|logicalType
operator|.
name|getScale
argument_list|()
return|;
block|}
block|}
return|;
default|default:
return|return
operator|new
name|BinaryConverter
argument_list|<
name|HiveDecimalWritable
argument_list|>
argument_list|(
name|type
argument_list|,
name|parent
argument_list|,
name|index
argument_list|,
name|hiveTypeInfo
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|HiveDecimalWritable
name|convert
parameter_list|(
name|Binary
name|binary
parameter_list|)
block|{
name|DecimalLogicalTypeAnnotation
name|logicalType
init|=
operator|(
name|DecimalLogicalTypeAnnotation
operator|)
name|type
operator|.
name|getLogicalTypeAnnotation
argument_list|()
decl_stmt|;
return|return
name|HiveDecimalUtils
operator|.
name|enforcePrecisionScale
argument_list|(
operator|new
name|HiveDecimalWritable
argument_list|(
name|binary
operator|.
name|getBytes
argument_list|()
argument_list|,
name|logicalType
operator|.
name|getScale
argument_list|()
argument_list|)
argument_list|,
operator|(
name|DecimalTypeInfo
operator|)
name|hiveTypeInfo
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addInt
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
name|addDecimal
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addLong
parameter_list|(
specifier|final
name|long
name|value
parameter_list|)
block|{
name|addDecimal
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addDecimal
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|DecimalTypeInfo
name|decimalInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|hiveTypeInfo
decl_stmt|;
name|HiveDecimal
name|hiveDecimal
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|value
argument_list|,
name|decimalInfo
operator|.
name|scale
argument_list|()
argument_list|)
decl_stmt|;
name|HiveDecimalWritable
name|result
init|=
name|HiveDecimalUtils
operator|.
name|enforcePrecisionScale
argument_list|(
operator|new
name|HiveDecimalWritable
argument_list|(
name|hiveDecimal
argument_list|)
argument_list|,
operator|(
name|DecimalTypeInfo
operator|)
name|hiveTypeInfo
argument_list|)
decl_stmt|;
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|return
operator|new
name|BinaryConverter
argument_list|<
name|HiveDecimalWritable
argument_list|>
argument_list|(
name|type
argument_list|,
name|parent
argument_list|,
name|index
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|HiveDecimalWritable
name|convert
parameter_list|(
name|Binary
name|binary
parameter_list|)
block|{
name|DecimalLogicalTypeAnnotation
name|logicalType
init|=
operator|(
name|DecimalLogicalTypeAnnotation
operator|)
name|type
operator|.
name|getLogicalTypeAnnotation
argument_list|()
decl_stmt|;
return|return
operator|new
name|HiveDecimalWritable
argument_list|(
name|binary
operator|.
name|getBytes
argument_list|()
argument_list|,
name|logicalType
operator|.
name|getScale
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
block|,
name|ETIMESTAMP_CONVERTER
parameter_list|(
name|TimestampWritableV2
operator|.
name|class
parameter_list|)
block|{
annotation|@
name|Override
name|PrimitiveConverter
name|getConverter
parameter_list|(
specifier|final
name|PrimitiveType
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ConverterParent
name|parent
parameter_list|,
name|TypeInfo
name|hiveTypeInfo
parameter_list|)
block|{
return|return
operator|new
name|BinaryConverter
argument_list|<
name|TimestampWritableV2
argument_list|>
argument_list|(
name|type
argument_list|,
name|parent
argument_list|,
name|index
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|TimestampWritableV2
name|convert
parameter_list|(
name|Binary
name|binary
parameter_list|)
block|{
name|NanoTime
name|nt
init|=
name|NanoTime
operator|.
name|fromBinary
argument_list|(
name|binary
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
init|=
name|parent
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
comment|// Current Hive parquet timestamp implementation stores timestamps in UTC, but other
comment|// components do not. In this case we skip timestamp conversion.
comment|// If this file is written by a version of hive before HIVE-21290, file metadata will
comment|// not contain the writer timezone, so we convert the timestamp to the system (reader)
comment|// time zone.
comment|// If file is written by current Hive implementation, we convert timestamps to the writer
comment|// time zone in order to emulate time zone agnostic behavior.
name|boolean
name|skipConversion
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_PARQUET_TIMESTAMP_SKIP_CONVERSION
operator|.
name|varname
argument_list|)
argument_list|)
decl_stmt|;
name|Timestamp
name|ts
init|=
name|NanoTimeUtils
operator|.
name|getTimestamp
argument_list|(
name|nt
argument_list|,
name|skipConversion
argument_list|,
name|DataWritableReadSupport
operator|.
name|getWriterTimeZoneId
argument_list|(
name|metadata
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|TimestampWritableV2
argument_list|(
name|ts
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
block|,
name|EINT64_TIMESTAMP_CONVERTER
parameter_list|(
name|TimestampWritableV2
operator|.
name|class
parameter_list|)
block|{
annotation|@
name|Override
name|PrimitiveConverter
name|getConverter
parameter_list|(
specifier|final
name|PrimitiveType
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ConverterParent
name|parent
parameter_list|,
name|TypeInfo
name|hiveTypeInfo
parameter_list|)
block|{
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addLong
parameter_list|(
specifier|final
name|long
name|value
parameter_list|)
block|{
name|TimestampLogicalTypeAnnotation
name|logicalType
init|=
operator|(
name|TimestampLogicalTypeAnnotation
operator|)
name|type
operator|.
name|getLogicalTypeAnnotation
argument_list|()
decl_stmt|;
name|Timestamp
name|timestamp
init|=
name|ParquetTimestampUtils
operator|.
name|getTimestamp
argument_list|(
name|value
argument_list|,
name|logicalType
operator|.
name|getUnit
argument_list|()
argument_list|,
name|logicalType
operator|.
name|isAdjustedToUTC
argument_list|()
argument_list|)
decl_stmt|;
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|TimestampWritableV2
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
block|,
name|EDATE_CONVERTER
parameter_list|(
name|DateWritableV2
operator|.
name|class
parameter_list|)
block|{
annotation|@
name|Override
name|PrimitiveConverter
name|getConverter
parameter_list|(
specifier|final
name|PrimitiveType
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ConverterParent
name|parent
parameter_list|,
name|TypeInfo
name|hiveTypeInfo
parameter_list|)
block|{
return|return
operator|new
name|PrimitiveConverter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addInt
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
operator|new
name|DateWritableV2
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
block|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|_type
decl_stmt|;
specifier|private
name|ETypeConverter
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|this
operator|.
name|_type
operator|=
name|type
expr_stmt|;
block|}
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|_type
return|;
block|}
specifier|abstract
name|PrimitiveConverter
name|getConverter
parameter_list|(
specifier|final
name|PrimitiveType
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ConverterParent
name|parent
parameter_list|,
name|TypeInfo
name|hiveTypeInfo
parameter_list|)
function_decl|;
specifier|public
specifier|static
name|PrimitiveConverter
name|getNewConverter
parameter_list|(
specifier|final
name|PrimitiveType
name|type
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ConverterParent
name|parent
parameter_list|,
specifier|final
name|TypeInfo
name|hiveTypeInfo
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|isPrimitive
argument_list|()
operator|&&
operator|(
name|type
operator|.
name|asPrimitiveType
argument_list|()
operator|.
name|getPrimitiveTypeName
argument_list|()
operator|.
name|equals
argument_list|(
name|PrimitiveType
operator|.
name|PrimitiveTypeName
operator|.
name|INT96
argument_list|)
operator|)
condition|)
block|{
comment|//TODO- cleanup once parquet support Timestamp type annotation.
return|return
name|ETypeConverter
operator|.
name|ETIMESTAMP_CONVERTER
operator|.
name|getConverter
argument_list|(
name|type
argument_list|,
name|index
argument_list|,
name|parent
argument_list|,
name|hiveTypeInfo
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|.
name|getLogicalTypeAnnotation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Optional
argument_list|<
name|PrimitiveConverter
argument_list|>
name|converter
init|=
name|type
operator|.
name|getLogicalTypeAnnotation
argument_list|()
operator|.
name|accept
argument_list|(
operator|new
name|LogicalTypeAnnotationVisitor
argument_list|<
name|PrimitiveConverter
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|PrimitiveConverter
argument_list|>
name|visit
parameter_list|(
name|DecimalLogicalTypeAnnotation
name|logicalTypeAnnotation
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|EDECIMAL_CONVERTER
operator|.
name|getConverter
argument_list|(
name|type
argument_list|,
name|index
argument_list|,
name|parent
argument_list|,
name|hiveTypeInfo
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|PrimitiveConverter
argument_list|>
name|visit
parameter_list|(
name|StringLogicalTypeAnnotation
name|logicalTypeAnnotation
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|ESTRING_CONVERTER
operator|.
name|getConverter
argument_list|(
name|type
argument_list|,
name|index
argument_list|,
name|parent
argument_list|,
name|hiveTypeInfo
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|PrimitiveConverter
argument_list|>
name|visit
parameter_list|(
name|DateLogicalTypeAnnotation
name|logicalTypeAnnotation
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|EDATE_CONVERTER
operator|.
name|getConverter
argument_list|(
name|type
argument_list|,
name|index
argument_list|,
name|parent
argument_list|,
name|hiveTypeInfo
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|PrimitiveConverter
argument_list|>
name|visit
parameter_list|(
name|TimestampLogicalTypeAnnotation
name|logicalTypeAnnotation
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|EINT64_TIMESTAMP_CONVERTER
operator|.
name|getConverter
argument_list|(
name|type
argument_list|,
name|index
argument_list|,
name|parent
argument_list|,
name|hiveTypeInfo
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|converter
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|converter
operator|.
name|get
argument_list|()
return|;
block|}
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|javaType
init|=
name|type
operator|.
name|getPrimitiveTypeName
argument_list|()
operator|.
name|javaType
decl_stmt|;
for|for
control|(
specifier|final
name|ETypeConverter
name|eConverter
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|eConverter
operator|.
name|getType
argument_list|()
operator|==
name|javaType
condition|)
block|{
return|return
name|eConverter
operator|.
name|getConverter
argument_list|(
name|type
argument_list|,
name|index
argument_list|,
name|parent
argument_list|,
name|hiveTypeInfo
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Converter not found ... for type : "
operator|+
name|type
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|boolean
name|isUnsignedInteger
parameter_list|(
specifier|final
name|PrimitiveType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|getLogicalTypeAnnotation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Optional
argument_list|<
name|Boolean
argument_list|>
name|isUnsignedInteger
init|=
name|type
operator|.
name|getLogicalTypeAnnotation
argument_list|()
operator|.
name|accept
argument_list|(
operator|new
name|LogicalTypeAnnotationVisitor
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|Boolean
argument_list|>
name|visit
parameter_list|(
name|LogicalTypeAnnotation
operator|.
name|IntLogicalTypeAnnotation
name|intLogicalType
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|!
name|intLogicalType
operator|.
name|isSigned
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|isUnsignedInteger
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|isUnsignedInteger
operator|.
name|get
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|long
name|getMinValue
parameter_list|(
specifier|final
name|PrimitiveType
name|type
parameter_list|,
name|String
name|typeName
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|isUnsignedInteger
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|serdeConstants
operator|.
name|INT_TYPE_NAME
case|:
return|return
name|Integer
operator|.
name|MIN_VALUE
return|;
case|case
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
case|:
return|return
name|Short
operator|.
name|MIN_VALUE
return|;
case|case
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
case|:
return|return
name|Byte
operator|.
name|MIN_VALUE
return|;
default|default:
return|return
name|defaultValue
return|;
block|}
block|}
block|}
specifier|private
specifier|static
name|long
name|getMaxValue
parameter_list|(
name|String
name|typeName
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|serdeConstants
operator|.
name|INT_TYPE_NAME
case|:
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
case|case
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
case|:
return|return
name|Short
operator|.
name|MAX_VALUE
return|;
case|case
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
case|:
return|return
name|Byte
operator|.
name|MAX_VALUE
return|;
default|default:
return|return
name|defaultValue
return|;
block|}
block|}
specifier|private
specifier|static
name|double
name|getMinValue
parameter_list|(
name|String
name|typeName
parameter_list|,
name|double
name|defaultValue
parameter_list|)
block|{
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
case|:
return|return
operator|(
name|double
operator|)
name|Long
operator|.
name|MIN_VALUE
return|;
case|case
name|serdeConstants
operator|.
name|INT_TYPE_NAME
case|:
return|return
operator|(
name|double
operator|)
name|Integer
operator|.
name|MIN_VALUE
return|;
case|case
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
case|:
return|return
operator|(
name|double
operator|)
name|Short
operator|.
name|MIN_VALUE
return|;
case|case
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
case|:
return|return
operator|(
name|double
operator|)
name|Byte
operator|.
name|MIN_VALUE
return|;
case|case
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
case|:
return|return
operator|(
name|double
operator|)
name|Float
operator|.
name|MIN_VALUE
return|;
default|default:
return|return
name|defaultValue
return|;
block|}
block|}
specifier|private
specifier|static
name|double
name|getMaxValue
parameter_list|(
name|String
name|typeName
parameter_list|,
name|double
name|defaultValue
parameter_list|)
block|{
switch|switch
condition|(
name|typeName
condition|)
block|{
case|case
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
case|:
return|return
operator|(
name|double
operator|)
name|Long
operator|.
name|MAX_VALUE
return|;
case|case
name|serdeConstants
operator|.
name|INT_TYPE_NAME
case|:
return|return
operator|(
name|double
operator|)
name|Integer
operator|.
name|MAX_VALUE
return|;
case|case
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
case|:
return|return
operator|(
name|double
operator|)
name|Short
operator|.
name|MAX_VALUE
return|;
case|case
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
case|:
return|return
operator|(
name|double
operator|)
name|Byte
operator|.
name|MAX_VALUE
return|;
case|case
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
case|:
return|return
operator|(
name|double
operator|)
name|Float
operator|.
name|MAX_VALUE
return|;
default|default:
return|return
name|defaultValue
return|;
block|}
block|}
specifier|public
specifier|abstract
specifier|static
class|class
name|BinaryConverter
parameter_list|<
name|T
extends|extends
name|Writable
parameter_list|>
extends|extends
name|PrimitiveConverter
block|{
specifier|protected
specifier|final
name|PrimitiveType
name|type
decl_stmt|;
specifier|private
specifier|final
name|ConverterParent
name|parent
decl_stmt|;
specifier|private
specifier|final
name|int
name|index
decl_stmt|;
specifier|private
specifier|final
name|TypeInfo
name|hiveTypeInfo
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|T
argument_list|>
name|lookupTable
decl_stmt|;
specifier|public
name|BinaryConverter
parameter_list|(
name|PrimitiveType
name|type
parameter_list|,
name|ConverterParent
name|parent
parameter_list|,
name|int
name|index
parameter_list|,
name|TypeInfo
name|hiveTypeInfo
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|hiveTypeInfo
operator|=
name|hiveTypeInfo
expr_stmt|;
block|}
specifier|public
name|BinaryConverter
parameter_list|(
name|PrimitiveType
name|type
parameter_list|,
name|ConverterParent
name|parent
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|this
argument_list|(
name|type
argument_list|,
name|parent
argument_list|,
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|T
name|convert
parameter_list|(
name|Binary
name|binary
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasDictionarySupport
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDictionary
parameter_list|(
name|Dictionary
name|dictionary
parameter_list|)
block|{
name|int
name|length
init|=
name|dictionary
operator|.
name|getMaxId
argument_list|()
operator|+
literal|1
decl_stmt|;
name|lookupTable
operator|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|lookupTable
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|dictionary
operator|.
name|decodeToBinary
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addValueFromDictionary
parameter_list|(
name|int
name|dictionaryId
parameter_list|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|lookupTable
operator|.
name|get
argument_list|(
name|dictionaryId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addBinary
parameter_list|(
name|Binary
name|value
parameter_list|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|convert
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_enum

end_unit

