begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * UDFLike.  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"like"
argument_list|,
name|value
operator|=
literal|"_FUNC_(str, pattern) - Checks if str matches pattern"
argument_list|,
name|extended
operator|=
literal|"Example:\n"
operator|+
literal|"> SELECT a.* FROM srcpart a WHERE a.hr _FUNC_ '%2' LIMIT 1;\n"
operator|+
literal|"  27      val_27  2008-04-08      12"
argument_list|)
specifier|public
class|class
name|UDFLike
extends|extends
name|UDF
block|{
specifier|private
specifier|final
name|Text
name|lastLikePattern
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|private
name|Pattern
name|p
init|=
literal|null
decl_stmt|;
comment|// Doing characters comparison directly instead of regular expression
comment|// matching for simple patterns like "%abc%".
specifier|private
enum|enum
name|PatternType
block|{
name|NONE
block|,
comment|// "abc"
name|BEGIN
block|,
comment|// "abc%"
name|END
block|,
comment|// "%abc"
name|MIDDLE
block|,
comment|// "%abc%"
name|COMPLEX
block|,
comment|// all other cases, such as "ab%c_de"
block|}
specifier|private
name|PatternType
name|type
init|=
name|PatternType
operator|.
name|COMPLEX
decl_stmt|;
specifier|private
specifier|final
name|Text
name|simplePattern
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|BooleanWritable
name|result
init|=
operator|new
name|BooleanWritable
argument_list|()
decl_stmt|;
specifier|public
name|UDFLike
parameter_list|()
block|{   }
specifier|public
specifier|static
name|String
name|likePatternToRegExp
parameter_list|(
name|String
name|likePattern
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|likePattern
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// Make a special case for "\\_" and "\\%"
name|char
name|n
init|=
name|likePattern
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|'\\'
operator|&&
name|i
operator|+
literal|1
operator|<
name|likePattern
operator|.
name|length
argument_list|()
operator|&&
operator|(
name|likePattern
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|'_'
operator|||
name|likePattern
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|'%'
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|likePattern
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|n
operator|==
literal|'_'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|n
operator|==
literal|'%'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
literal|"\\[](){}.*^$"
operator|.
name|indexOf
argument_list|(
name|n
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Parses the likePattern. Based on it is a simple pattern or not, the    * function might change two member variables. {@link #type} will be changed    * to the corresponding pattern type; {@link #simplePattern} will record the    * string in it for later pattern matching if it is a simple pattern.    *<p>    * Examples:<blockquote>    *     *<pre>    * parseSimplePattern("%abc%") changes {@link #type} to PatternType.MIDDLE    * and changes {@link #simplePattern} to "abc"    * parseSimplePattern("%ab_c%") changes {@link #type} to PatternType.COMPLEX    * and does not change {@link #simplePattern}    *</pre>    *     *</blockquote>    *     * @param likePattern    *          the input LIKE query pattern    */
specifier|private
name|void
name|parseSimplePattern
parameter_list|(
name|String
name|likePattern
parameter_list|)
block|{
name|int
name|length
init|=
name|likePattern
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|beginIndex
init|=
literal|0
decl_stmt|;
name|int
name|endIndex
init|=
name|length
decl_stmt|;
name|char
name|lastChar
init|=
literal|'a'
decl_stmt|;
name|String
name|strPattern
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
name|type
operator|=
name|PatternType
operator|.
name|NONE
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|n
init|=
name|likePattern
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|'_'
condition|)
block|{
comment|// such as "a_b"
if|if
condition|(
name|lastChar
operator|!=
literal|'\\'
condition|)
block|{
comment|// such as "a%bc"
name|type
operator|=
name|PatternType
operator|.
name|COMPLEX
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|// such as "abc\%de%"
name|strPattern
operator|+=
name|likePattern
operator|.
name|substring
argument_list|(
name|beginIndex
argument_list|,
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|beginIndex
operator|=
name|i
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|n
operator|==
literal|'%'
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// such as "%abc"
name|type
operator|=
name|PatternType
operator|.
name|END
expr_stmt|;
name|beginIndex
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|<
name|length
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|lastChar
operator|!=
literal|'\\'
condition|)
block|{
comment|// such as "a%bc"
name|type
operator|=
name|PatternType
operator|.
name|COMPLEX
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|// such as "abc\%de%"
name|strPattern
operator|+=
name|likePattern
operator|.
name|substring
argument_list|(
name|beginIndex
argument_list|,
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|beginIndex
operator|=
name|i
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|lastChar
operator|!=
literal|'\\'
condition|)
block|{
name|endIndex
operator|=
name|length
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|PatternType
operator|.
name|END
condition|)
block|{
comment|// such as "%abc%"
name|type
operator|=
name|PatternType
operator|.
name|MIDDLE
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|PatternType
operator|.
name|BEGIN
expr_stmt|;
comment|// such as "abc%"
block|}
block|}
else|else
block|{
comment|// such as "abc\%"
name|strPattern
operator|+=
name|likePattern
operator|.
name|substring
argument_list|(
name|beginIndex
argument_list|,
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|beginIndex
operator|=
name|i
expr_stmt|;
name|endIndex
operator|=
name|length
expr_stmt|;
block|}
block|}
block|}
name|lastChar
operator|=
name|n
expr_stmt|;
block|}
name|strPattern
operator|+=
name|likePattern
operator|.
name|substring
argument_list|(
name|beginIndex
argument_list|,
name|endIndex
argument_list|)
expr_stmt|;
name|simplePattern
operator|.
name|set
argument_list|(
name|strPattern
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|find
parameter_list|(
name|Text
name|s
parameter_list|,
name|Text
name|sub
parameter_list|,
name|int
name|startS
parameter_list|,
name|int
name|endS
parameter_list|)
block|{
name|byte
index|[]
name|byteS
init|=
name|s
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|byteSub
init|=
name|sub
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|lenSub
init|=
name|sub
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startS
init|;
operator|(
name|i
operator|<
name|endS
operator|-
name|lenSub
operator|+
literal|1
operator|)
operator|&&
operator|(
operator|!
name|match
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|lenSub
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|byteS
index|[
name|j
operator|+
name|i
index|]
operator|!=
name|byteSub
index|[
name|j
index|]
condition|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|match
return|;
block|}
specifier|public
name|BooleanWritable
name|evaluate
parameter_list|(
name|Text
name|s
parameter_list|,
name|Text
name|likePattern
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|likePattern
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|likePattern
operator|.
name|equals
argument_list|(
name|lastLikePattern
argument_list|)
condition|)
block|{
name|lastLikePattern
operator|.
name|set
argument_list|(
name|likePattern
argument_list|)
expr_stmt|;
name|String
name|strLikePattern
init|=
name|likePattern
operator|.
name|toString
argument_list|()
decl_stmt|;
name|parseSimplePattern
argument_list|(
name|strLikePattern
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|PatternType
operator|.
name|COMPLEX
condition|)
block|{
name|p
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|likePatternToRegExp
argument_list|(
name|strLikePattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|type
operator|==
name|PatternType
operator|.
name|COMPLEX
condition|)
block|{
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|m
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|startS
init|=
literal|0
decl_stmt|;
name|int
name|endS
init|=
name|s
operator|.
name|getLength
argument_list|()
decl_stmt|;
comment|// if s is shorter than the required pattern
if|if
condition|(
name|endS
operator|<
name|simplePattern
operator|.
name|getLength
argument_list|()
condition|)
block|{
name|result
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|BEGIN
case|:
name|endS
operator|=
name|simplePattern
operator|.
name|getLength
argument_list|()
expr_stmt|;
break|break;
case|case
name|END
case|:
name|startS
operator|=
name|endS
operator|-
name|simplePattern
operator|.
name|getLength
argument_list|()
expr_stmt|;
break|break;
case|case
name|NONE
case|:
if|if
condition|(
name|simplePattern
operator|.
name|getLength
argument_list|()
operator|!=
name|s
operator|.
name|getLength
argument_list|()
condition|)
block|{
name|result
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
break|break;
block|}
name|result
operator|.
name|set
argument_list|(
name|find
argument_list|(
name|s
argument_list|,
name|simplePattern
argument_list|,
name|startS
argument_list|,
name|endS
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

