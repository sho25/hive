begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_class
specifier|public
class|class
name|UDFLike
extends|extends
name|UDF
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UDFLike
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Text
name|lastLikePattern
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|private
name|Pattern
name|p
init|=
literal|null
decl_stmt|;
specifier|private
name|BooleanWritable
name|result
init|=
operator|new
name|BooleanWritable
argument_list|()
decl_stmt|;
specifier|public
name|UDFLike
parameter_list|()
block|{   }
specifier|public
specifier|static
name|String
name|likePatternToRegExp
parameter_list|(
name|String
name|likePattern
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|likePattern
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// Make a special case for "\\_" and "\\%"
name|char
name|n
init|=
name|likePattern
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|'\\'
operator|&&
name|i
operator|+
literal|1
operator|<
name|likePattern
operator|.
name|length
argument_list|()
operator|&&
operator|(
name|likePattern
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|'_'
operator|||
name|likePattern
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|'%'
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|likePattern
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|n
operator|==
literal|'_'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|n
operator|==
literal|'%'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
literal|"\\[](){}.*^$"
operator|.
name|indexOf
argument_list|(
name|n
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|BooleanWritable
name|evaluate
parameter_list|(
name|Text
name|s
parameter_list|,
name|Text
name|likePattern
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|likePattern
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|likePattern
operator|.
name|equals
argument_list|(
name|lastLikePattern
argument_list|)
condition|)
block|{
name|lastLikePattern
operator|.
name|set
argument_list|(
name|likePattern
argument_list|)
expr_stmt|;
name|p
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|likePatternToRegExp
argument_list|(
name|likePattern
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|m
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

