begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  **/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * A loader class for {@link Hook}s. The class provides a way to create and instantiate {@link Hook} objects. The  * methodology for how hooks are loaded is left up to the individual methods.  */
end_comment

begin_class
specifier|public
class|class
name|HooksLoader
block|{
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
comment|/**    * Creates a new {@link HooksLoader} that uses the specified {@link HiveConf} to load the {@link Hook}s.    *    * @param conf the {@link HiveConf} to use when loading the {@link Hook}s    */
specifier|public
name|HooksLoader
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * Delegates to {@link #getHooks(HiveConf.ConfVars)} and prints the to the specified {@link SessionState.LogHelper} if    * a {@link ClassNotFoundException} is thrown.    *    * @param hookConfVar the configuration variable specifying a comma separated list of the hook class names    * @param console the {@link SessionState.LogHelper} to print to if a {@link ClassNotFoundException} is thrown by the    *                {@link #getHooks(HiveConf.ConfVars)} method    *    * @return a list of the hooks objects, in the order they are listed in the value of hookConfVar    *    * @throws ClassNotFoundException if the specified class names could not be found    * @throws IllegalAccessException if the specified class names could not be accessed    * @throws InstantiationException if the specified class names could not be instantiated    */
specifier|public
specifier|final
parameter_list|<
name|T
extends|extends
name|Hook
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getHooks
parameter_list|(
name|HiveConf
operator|.
name|ConfVars
name|hookConfVar
parameter_list|,
name|SessionState
operator|.
name|LogHelper
name|console
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
return|return
name|getHooks
argument_list|(
name|hookConfVar
argument_list|,
name|clazz
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printError
argument_list|(
name|hookConfVar
operator|.
name|varname
operator|+
literal|" Class not found: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Returns the hooks specified in a configuration variable. The hooks are returned in a list in the order they were    * specified in the configuration variable. The value of the specified conf variable should be a comma separated list    * of class names where each class implements the {@link Hook} interface. The method uses reflection to an instance    * of each class and then returns them in a {@link List}.    *    * @param hookConfVar The configuration variable specifying a comma separated list of the hook class names    * @param class2    * @param class1    * @param console    *    * @return a list of the hooks objects, in the order they are listed in the value of hookConfVar    *    * @throws ClassNotFoundException if the specified class names could not be found    * @throws IllegalAccessException if the specified class names could not be accessed    * @throws InstantiationException if the specified class names could not be instantiated    */
specifier|public
parameter_list|<
name|T
extends|extends
name|Hook
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getHooks
parameter_list|(
name|HiveConf
operator|.
name|ConfVars
name|hookConfVar
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|ClassNotFoundException
block|{
name|String
name|csHooks
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|hookConfVar
argument_list|)
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|T
argument_list|>
name|hooks
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|csHooks
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|csHooks
operator|=
name|csHooks
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|csHooks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|()
return|;
block|}
name|String
index|[]
name|hookClasses
init|=
name|csHooks
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|hookClass
range|:
name|hookClasses
control|)
block|{
name|T
name|hook
init|=
operator|(
name|T
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|hookClass
operator|.
name|trim
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Utilities
operator|.
name|getSessionSpecifiedClassLoader
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|hooks
operator|.
name|add
argument_list|(
name|hook
argument_list|)
expr_stmt|;
block|}
return|return
name|hooks
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

