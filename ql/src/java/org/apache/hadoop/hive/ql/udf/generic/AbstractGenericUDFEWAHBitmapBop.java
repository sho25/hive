begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javaewah
operator|.
name|EWAHCompressedBitmap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|bitmap
operator|.
name|BitmapObjectInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|bitmap
operator|.
name|BitmapObjectOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableVoidObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_comment
comment|/**  * An abstract class for a UDF that performs a binary operation between two EWAH-compressed bitmaps.  * For example: Bitmap OR and AND operations between two EWAH-compressed bitmaps.  */
end_comment

begin_class
specifier|abstract
specifier|public
class|class
name|AbstractGenericUDFEWAHBitmapBop
extends|extends
name|GenericUDF
block|{
specifier|protected
specifier|final
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ObjectInspector
name|b1OI
decl_stmt|;
specifier|private
name|ObjectInspector
name|b2OI
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
name|AbstractGenericUDFEWAHBitmapBop
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"The function "
operator|+
name|name
operator|+
literal|"(b1, b2) takes exactly 2 arguments"
argument_list|)
throw|;
block|}
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|LIST
argument_list|)
condition|)
block|{
name|b1OI
operator|=
operator|(
name|ListObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|0
argument_list|,
literal|"\""
operator|+
name|Category
operator|.
name|LIST
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"\" is expected at function "
operator|+
name|name
operator|+
literal|", but \""
operator|+
name|arguments
index|[
literal|0
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\" is found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|arguments
index|[
literal|1
index|]
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|LIST
argument_list|)
condition|)
block|{
name|b2OI
operator|=
operator|(
name|ListObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"\""
operator|+
name|Category
operator|.
name|LIST
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"\" is expected at function "
operator|+
name|name
operator|+
literal|", but \""
operator|+
name|arguments
index|[
literal|1
index|]
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"\" is found"
argument_list|)
throw|;
block|}
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|EWAHCompressedBitmap
name|bitmapBop
parameter_list|(
name|EWAHCompressedBitmap
name|bitmap1
parameter_list|,
name|EWAHCompressedBitmap
name|bitmap2
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
assert|assert
operator|(
name|arguments
operator|.
name|length
operator|==
literal|2
operator|)
assert|;
name|Object
name|b1
init|=
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
name|Object
name|b2
init|=
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
name|EWAHCompressedBitmap
name|bitmap1
init|=
name|wordArrayToBitmap
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|EWAHCompressedBitmap
name|bitmap2
init|=
name|wordArrayToBitmap
argument_list|(
name|b2
argument_list|)
decl_stmt|;
name|EWAHCompressedBitmap
name|bitmapAnd
init|=
name|bitmapBop
argument_list|(
name|bitmap1
argument_list|,
name|bitmap2
argument_list|)
decl_stmt|;
name|BitmapObjectOutput
name|bitmapObjOut
init|=
operator|new
name|BitmapObjectOutput
argument_list|()
decl_stmt|;
try|try
block|{
name|bitmapAnd
operator|.
name|writeExternal
argument_list|(
name|bitmapObjOut
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|ret
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|LongWritable
argument_list|>
name|retList
init|=
name|bitmapToWordArray
argument_list|(
name|bitmapAnd
argument_list|)
decl_stmt|;
for|for
control|(
name|LongWritable
name|l
range|:
name|retList
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|EWAHCompressedBitmap
name|wordArrayToBitmap
parameter_list|(
name|Object
name|b
parameter_list|)
block|{
name|ListObjectInspector
name|lloi
init|=
operator|(
name|ListObjectInspector
operator|)
name|b1OI
decl_stmt|;
name|int
name|length
init|=
name|lloi
operator|.
name|getListLength
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|LongWritable
argument_list|>
name|bitmapArray
init|=
operator|new
name|ArrayList
argument_list|<
name|LongWritable
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|l
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getLong
argument_list|(
name|lloi
operator|.
name|getListElement
argument_list|(
name|b
argument_list|,
name|i
argument_list|)
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|lloi
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|bitmapArray
operator|.
name|add
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BitmapObjectInput
name|bitmapObjIn
init|=
operator|new
name|BitmapObjectInput
argument_list|(
name|bitmapArray
argument_list|)
decl_stmt|;
name|EWAHCompressedBitmap
name|bitmap
init|=
operator|new
name|EWAHCompressedBitmap
argument_list|()
decl_stmt|;
try|try
block|{
name|bitmap
operator|.
name|readExternal
argument_list|(
name|bitmapObjIn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|bitmap
return|;
block|}
specifier|protected
name|List
argument_list|<
name|LongWritable
argument_list|>
name|bitmapToWordArray
parameter_list|(
name|EWAHCompressedBitmap
name|bitmap
parameter_list|)
block|{
name|BitmapObjectOutput
name|bitmapObjOut
init|=
operator|new
name|BitmapObjectOutput
argument_list|()
decl_stmt|;
try|try
block|{
name|bitmap
operator|.
name|writeExternal
argument_list|(
name|bitmapObjOut
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|bitmapObjOut
operator|.
name|list
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|children
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|!=
name|children
operator|.
name|length
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

