begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystemNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_comment
comment|/**  * An util class for various Hive file format tasks.  * registerOutputFormatSubstitute(Class, Class) getOutputFormatSubstitute(Class)  * are added for backward compatibility. They return the newly added  * HiveOutputFormat for the older ones.  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|HiveFileFormatUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveFileFormatUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
class|class
name|FileChecker
block|{
comment|// we don't have many file formats that implement InputFormatChecker. We won't be holding
comment|// multiple instances of such classes
specifier|private
specifier|static
name|int
name|MAX_CACHE_SIZE
init|=
literal|16
decl_stmt|;
comment|// immutable maps
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormatChecker
argument_list|>
argument_list|>
name|inputFormatCheckerMap
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
argument_list|>
name|outputFormatSubstituteMap
decl_stmt|;
comment|// mutable thread-safe map to store instances
name|Cache
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|InputFormatChecker
argument_list|>
argument_list|,
name|InputFormatChecker
argument_list|>
name|inputFormatCheckerInstanceCache
decl_stmt|;
comment|// classloader invokes this static block when its first loaded (lazy initialization).
comment|// Class loading is thread safe.
specifier|private
specifier|static
class|class
name|Factory
block|{
specifier|static
specifier|final
name|FileChecker
name|INSTANCE
init|=
operator|new
name|FileChecker
argument_list|()
decl_stmt|;
block|}
specifier|public
specifier|static
name|FileChecker
name|getInstance
parameter_list|()
block|{
return|return
name|Factory
operator|.
name|INSTANCE
return|;
block|}
specifier|private
name|FileChecker
parameter_list|()
block|{
comment|// read-only maps (initialized once)
name|inputFormatCheckerMap
operator|=
name|ImmutableMap
operator|.
expr|<
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
operator|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormatChecker
argument_list|>
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|SequenceFileInputFormatChecker
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
name|RCFileInputFormat
operator|.
name|class
argument_list|,
name|RCFileInputFormat
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
name|OrcInputFormat
operator|.
name|class
argument_list|,
name|OrcInputFormat
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|outputFormatSubstituteMap
operator|=
name|ImmutableMap
operator|.
expr|<
name|Class
argument_list|<
name|?
argument_list|>
operator|,
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|,
name|HiveIgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|,
name|HiveSequenceFileOutputFormat
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// updatable map that holds instances of the class
name|inputFormatCheckerInstanceCache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
name|MAX_CACHE_SIZE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
argument_list|>
name|registeredClasses
parameter_list|()
block|{
return|return
name|inputFormatCheckerMap
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|getOutputFormatSubstiture
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|origin
parameter_list|)
block|{
return|return
name|outputFormatSubstituteMap
operator|.
name|get
argument_list|(
name|origin
argument_list|)
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|InputFormatChecker
argument_list|>
name|getInputFormatCheckerClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|inputFormat
parameter_list|)
block|{
return|return
name|inputFormatCheckerMap
operator|.
name|get
argument_list|(
name|inputFormat
argument_list|)
return|;
block|}
specifier|public
name|void
name|putInputFormatCheckerInstance
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|InputFormatChecker
argument_list|>
name|checkerCls
parameter_list|,
name|InputFormatChecker
name|instanceCls
parameter_list|)
block|{
name|inputFormatCheckerInstanceCache
operator|.
name|put
argument_list|(
name|checkerCls
argument_list|,
name|instanceCls
argument_list|)
expr_stmt|;
block|}
specifier|public
name|InputFormatChecker
name|getInputFormatCheckerInstance
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|InputFormatChecker
argument_list|>
name|checkerCls
parameter_list|)
block|{
return|return
name|inputFormatCheckerInstanceCache
operator|.
name|getIfPresent
argument_list|(
name|checkerCls
argument_list|)
return|;
block|}
block|}
comment|/**    * get a OutputFormat's substitute HiveOutputFormat.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|getOutputFormatSubstitute
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|origin
parameter_list|)
block|{
if|if
condition|(
name|origin
operator|==
literal|null
operator|||
name|HiveOutputFormat
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|origin
argument_list|)
condition|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
operator|)
name|origin
return|;
comment|// hive native
block|}
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|substitute
init|=
name|FileChecker
operator|.
name|getInstance
argument_list|()
operator|.
name|getOutputFormatSubstiture
argument_list|(
name|origin
argument_list|)
decl_stmt|;
if|if
condition|(
name|substitute
operator|!=
literal|null
condition|)
block|{
return|return
name|substitute
return|;
comment|// substituted
block|}
return|return
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
operator|)
name|origin
return|;
block|}
comment|/**    * checks if files are in same format as the given input format.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|boolean
name|checkInputFormat
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatCls
parameter_list|,
name|List
argument_list|<
name|FileStatus
argument_list|>
name|files
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|Class
argument_list|<
name|?
extends|extends
name|InputFormatChecker
argument_list|>
name|checkerCls
init|=
name|FileChecker
operator|.
name|getInstance
argument_list|()
operator|.
name|getInputFormatCheckerClass
argument_list|(
name|inputFormatCls
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkerCls
operator|==
literal|null
operator|&&
name|inputFormatCls
operator|.
name|isAssignableFrom
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// we get a text input format here, we can not determine a file is text
comment|// according to its content, so we can do is to test if other file
comment|// format can accept it. If one other file format can accept this file,
comment|// we treat this file as text file, although it maybe not.
return|return
name|checkTextInputFormat
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|files
argument_list|)
return|;
block|}
if|if
condition|(
name|checkerCls
operator|!=
literal|null
condition|)
block|{
name|InputFormatChecker
name|checkerInstance
init|=
name|FileChecker
operator|.
name|getInstance
argument_list|()
operator|.
name|getInputFormatCheckerInstance
argument_list|(
name|checkerCls
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|checkerInstance
operator|==
literal|null
condition|)
block|{
name|checkerInstance
operator|=
name|checkerCls
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|FileChecker
operator|.
name|getInstance
argument_list|()
operator|.
name|putInputFormatCheckerInstance
argument_list|(
name|checkerCls
argument_list|,
name|checkerInstance
argument_list|)
expr_stmt|;
block|}
return|return
name|checkerInstance
operator|.
name|validateInput
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|files
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|boolean
name|checkTextInputFormat
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|List
argument_list|<
name|FileStatus
argument_list|>
name|files
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|FileStatus
argument_list|>
name|files2
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|files
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|FileStatus
argument_list|>
name|iter
init|=
name|files2
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|file
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|isPipe
argument_list|(
name|fs
argument_list|,
name|file
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping format check for "
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|" as it is a pipe"
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|files2
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
argument_list|>
name|inputFormatter
init|=
name|FileChecker
operator|.
name|getInstance
argument_list|()
operator|.
name|registeredClasses
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|reg
range|:
name|inputFormatter
control|)
block|{
name|boolean
name|result
init|=
name|checkInputFormat
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|reg
argument_list|,
name|files2
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// See include/uapi/linux/stat.h
specifier|private
specifier|static
specifier|final
name|int
name|S_IFIFO
init|=
literal|0010000
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|isPipe
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|file
parameter_list|)
block|{
if|if
condition|(
name|fs
operator|instanceof
name|DistributedFileSystem
condition|)
block|{
return|return
literal|false
return|;
comment|// Shortcut for HDFS.
block|}
name|int
name|mode
init|=
literal|0
decl_stmt|;
name|Object
name|pathToLog
init|=
name|file
operator|.
name|getPath
argument_list|()
decl_stmt|;
try|try
block|{
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|realPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
name|pathToLog
operator|=
name|realPath
expr_stmt|;
name|mode
operator|=
operator|(
name|Integer
operator|)
name|Files
operator|.
name|getAttribute
argument_list|(
name|realPath
argument_list|,
literal|"unix:mode"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileSystemNotFoundException
name|t
parameter_list|)
block|{
return|return
literal|false
return|;
comment|// Probably not a local filesystem; no need to check.
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
decl||
name|IOException
decl||
name|SecurityException
decl||
name|IllegalArgumentException
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to check mode for "
operator|+
name|pathToLog
operator|+
literal|": "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
operator|+
literal|" ("
operator|+
name|t
operator|.
name|getClass
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
operator|(
name|mode
operator|&
name|S_IFIFO
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
specifier|static
name|RecordWriter
name|getHiveRecordWriter
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|TableDesc
name|tableInfo
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|outputClass
parameter_list|,
name|FileSinkDesc
name|conf
parameter_list|,
name|Path
name|outPath
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|HiveException
block|{
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|hiveOutputFormat
init|=
name|getHiveOutputFormat
argument_list|(
name|jc
argument_list|,
name|tableInfo
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|isCompressed
init|=
name|conf
operator|.
name|getCompressed
argument_list|()
decl_stmt|;
name|JobConf
name|jc_output
init|=
name|jc
decl_stmt|;
if|if
condition|(
name|isCompressed
condition|)
block|{
name|jc_output
operator|=
operator|new
name|JobConf
argument_list|(
name|jc
argument_list|)
expr_stmt|;
name|String
name|codecStr
init|=
name|conf
operator|.
name|getCompressCodec
argument_list|()
decl_stmt|;
if|if
condition|(
name|codecStr
operator|!=
literal|null
operator|&&
operator|!
name|codecStr
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|CompressionCodec
argument_list|>
name|codec
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|CompressionCodec
argument_list|>
operator|)
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|codecStr
argument_list|)
decl_stmt|;
name|FileOutputFormat
operator|.
name|setOutputCompressorClass
argument_list|(
name|jc_output
argument_list|,
name|codec
argument_list|)
expr_stmt|;
block|}
name|String
name|type
init|=
name|conf
operator|.
name|getCompressType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|!
name|type
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|CompressionType
name|style
init|=
name|CompressionType
operator|.
name|valueOf
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|SequenceFileOutputFormat
operator|.
name|setOutputCompressionType
argument_list|(
name|jc
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|getRecordWriter
argument_list|(
name|jc_output
argument_list|,
name|hiveOutputFormat
argument_list|,
name|outputClass
argument_list|,
name|isCompressed
argument_list|,
name|tableInfo
operator|.
name|getProperties
argument_list|()
argument_list|,
name|outPath
argument_list|,
name|reporter
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|RecordWriter
name|getRecordWriter
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|OutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outputFormat
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valueClass
parameter_list|,
name|boolean
name|isCompressed
parameter_list|,
name|Properties
name|tableProp
parameter_list|,
name|Path
name|outPath
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
if|if
condition|(
operator|!
operator|(
name|outputFormat
operator|instanceof
name|HiveOutputFormat
operator|)
condition|)
block|{
name|outputFormat
operator|=
operator|new
name|HivePassThroughOutputFormat
argument_list|(
name|outputFormat
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|HiveOutputFormat
operator|)
name|outputFormat
operator|)
operator|.
name|getHiveRecordWriter
argument_list|(
name|jc
argument_list|,
name|outPath
argument_list|,
name|valueClass
argument_list|,
name|isCompressed
argument_list|,
name|tableProp
argument_list|,
name|reporter
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|getHiveOutputFormat
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableDesc
name|tableDesc
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
name|getHiveOutputFormat
argument_list|(
name|conf
argument_list|,
name|tableDesc
operator|.
name|getOutputFileFormatClass
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|getHiveOutputFormat
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|PartitionDesc
name|partDesc
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
name|getHiveOutputFormat
argument_list|(
name|conf
argument_list|,
name|partDesc
operator|.
name|getOutputFileFormatClass
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|getHiveOutputFormat
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|outputClass
parameter_list|)
throws|throws
name|HiveException
block|{
name|OutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outputFormat
init|=
name|ReflectionUtil
operator|.
name|newInstance
argument_list|(
name|outputClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|outputFormat
operator|instanceof
name|HiveOutputFormat
operator|)
condition|)
block|{
name|outputFormat
operator|=
operator|new
name|HivePassThroughOutputFormat
argument_list|(
name|outputFormat
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|outputFormat
return|;
block|}
specifier|public
specifier|static
name|RecordUpdater
name|getAcidRecordUpdater
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|TableDesc
name|tableInfo
parameter_list|,
name|int
name|bucket
parameter_list|,
name|FileSinkDesc
name|conf
parameter_list|,
name|Path
name|outPath
parameter_list|,
name|ObjectInspector
name|inspector
parameter_list|,
name|Reporter
name|reporter
parameter_list|,
name|int
name|rowIdColNum
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
block|{
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|hiveOutputFormat
init|=
name|getHiveOutputFormat
argument_list|(
name|jc
argument_list|,
name|tableInfo
argument_list|)
decl_stmt|;
name|AcidOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|acidOutputFormat
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hiveOutputFormat
operator|instanceof
name|AcidOutputFormat
condition|)
block|{
name|acidOutputFormat
operator|=
operator|(
name|AcidOutputFormat
operator|)
name|hiveOutputFormat
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unable to create RecordUpdater for HiveOutputFormat that does not "
operator|+
literal|"implement AcidOutputFormat"
argument_list|)
throw|;
block|}
comment|// TODO not 100% sure about this.  This call doesn't set the compression type in the conf
comment|// file the way getHiveRecordWriter does, as ORC appears to read the value for itself.  Not
comment|// sure if this is correct or not.
return|return
name|getRecordUpdater
argument_list|(
name|jc
argument_list|,
name|acidOutputFormat
argument_list|,
name|bucket
argument_list|,
name|inspector
argument_list|,
name|tableInfo
operator|.
name|getProperties
argument_list|()
argument_list|,
name|outPath
argument_list|,
name|reporter
argument_list|,
name|rowIdColNum
argument_list|,
name|conf
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|RecordUpdater
name|getRecordUpdater
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|AcidOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|acidOutputFormat
parameter_list|,
name|int
name|bucket
parameter_list|,
name|ObjectInspector
name|inspector
parameter_list|,
name|Properties
name|tableProp
parameter_list|,
name|Path
name|outPath
parameter_list|,
name|Reporter
name|reporter
parameter_list|,
name|int
name|rowIdColNum
parameter_list|,
name|FileSinkDesc
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|acidOutputFormat
operator|.
name|getRecordUpdater
argument_list|(
name|outPath
argument_list|,
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
name|jc
argument_list|)
operator|.
name|isCompressed
argument_list|(
name|conf
operator|.
name|getCompressed
argument_list|()
argument_list|)
operator|.
name|tableProperties
argument_list|(
name|tableProp
argument_list|)
operator|.
name|reporter
argument_list|(
name|reporter
argument_list|)
operator|.
name|writingBase
argument_list|(
literal|false
argument_list|)
operator|.
name|minimumTransactionId
argument_list|(
name|conf
operator|.
name|getTransactionId
argument_list|()
argument_list|)
operator|.
name|maximumTransactionId
argument_list|(
name|conf
operator|.
name|getTransactionId
argument_list|()
argument_list|)
operator|.
name|bucket
argument_list|(
name|bucket
argument_list|)
operator|.
name|inspector
argument_list|(
name|inspector
argument_list|)
operator|.
name|recordIdColumn
argument_list|(
name|rowIdColNum
argument_list|)
operator|.
name|statementId
argument_list|(
name|conf
operator|.
name|getStatementId
argument_list|()
argument_list|)
operator|.
name|finalDestination
argument_list|(
name|conf
operator|.
name|getDestPath
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getFromPathRecursively
parameter_list|(
name|Map
argument_list|<
name|Path
argument_list|,
name|T
argument_list|>
name|pathToPartitionInfo
parameter_list|,
name|Path
name|dir
parameter_list|,
name|Map
argument_list|<
name|Map
argument_list|<
name|Path
argument_list|,
name|T
argument_list|>
argument_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|T
argument_list|>
argument_list|>
name|cacheMap
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getFromPathRecursively
argument_list|(
name|pathToPartitionInfo
argument_list|,
name|dir
argument_list|,
name|cacheMap
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getFromPathRecursively
parameter_list|(
name|Map
argument_list|<
name|Path
argument_list|,
name|T
argument_list|>
name|pathToPartitionInfo
parameter_list|,
name|Path
name|dir
parameter_list|,
name|Map
argument_list|<
name|Map
argument_list|<
name|Path
argument_list|,
name|T
argument_list|>
argument_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|T
argument_list|>
argument_list|>
name|cacheMap
parameter_list|,
name|boolean
name|ignoreSchema
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getFromPathRecursively
argument_list|(
name|pathToPartitionInfo
argument_list|,
name|dir
argument_list|,
name|cacheMap
argument_list|,
name|ignoreSchema
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getFromPathRecursively
parameter_list|(
name|Map
argument_list|<
name|Path
argument_list|,
name|T
argument_list|>
name|pathToPartitionInfo
parameter_list|,
name|Path
name|dir
parameter_list|,
name|Map
argument_list|<
name|Map
argument_list|<
name|Path
argument_list|,
name|T
argument_list|>
argument_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|T
argument_list|>
argument_list|>
name|cacheMap
parameter_list|,
name|boolean
name|ignoreSchema
parameter_list|,
name|boolean
name|ifPresent
parameter_list|)
throws|throws
name|IOException
block|{
name|T
name|part
init|=
name|getFromPath
argument_list|(
name|pathToPartitionInfo
argument_list|,
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
operator|&&
operator|(
name|ignoreSchema
operator|||
operator|(
name|dir
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
operator|||
name|dir
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
operator|||
name|FileUtils
operator|.
name|pathsContainNoScheme
argument_list|(
name|pathToPartitionInfo
operator|.
name|keySet
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|Map
argument_list|<
name|Path
argument_list|,
name|T
argument_list|>
name|newPathToPartitionInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cacheMap
operator|!=
literal|null
condition|)
block|{
name|newPathToPartitionInfo
operator|=
name|cacheMap
operator|.
name|get
argument_list|(
name|pathToPartitionInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newPathToPartitionInfo
operator|==
literal|null
condition|)
block|{
comment|// still null
name|newPathToPartitionInfo
operator|=
name|populateNewT
argument_list|(
name|pathToPartitionInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|cacheMap
operator|!=
literal|null
condition|)
block|{
name|cacheMap
operator|.
name|put
argument_list|(
name|pathToPartitionInfo
argument_list|,
name|newPathToPartitionInfo
argument_list|)
expr_stmt|;
block|}
block|}
name|part
operator|=
name|getFromPath
argument_list|(
name|newPathToPartitionInfo
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|part
operator|!=
literal|null
operator|||
name|ifPresent
condition|)
block|{
return|return
name|part
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cannot find dir = "
operator|+
name|dir
operator|.
name|toString
argument_list|()
operator|+
literal|" in pathToPartitionInfo: "
operator|+
name|pathToPartitionInfo
operator|.
name|keySet
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|Path
argument_list|,
name|T
argument_list|>
name|populateNewT
parameter_list|(
name|Map
argument_list|<
name|Path
argument_list|,
name|T
argument_list|>
name|pathToPartitionInfo
parameter_list|)
block|{
name|Map
argument_list|<
name|Path
argument_list|,
name|T
argument_list|>
name|newPathToPartitionInfo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|T
argument_list|>
name|entry
range|:
name|pathToPartitionInfo
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|T
name|partDesc
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Path
name|pathOnly
init|=
name|Path
operator|.
name|getPathWithoutSchemeAndAuthority
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|newPathToPartitionInfo
operator|.
name|put
argument_list|(
name|pathOnly
argument_list|,
name|partDesc
argument_list|)
expr_stmt|;
block|}
return|return
name|newPathToPartitionInfo
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getFromPath
parameter_list|(
name|Map
argument_list|<
name|Path
argument_list|,
name|T
argument_list|>
name|pathToPartitionInfo
parameter_list|,
name|Path
name|dir
parameter_list|)
block|{
comment|// We first do exact match, and then do prefix matching. The latter is due to input dir
comment|// could be /dir/ds='2001-02-21'/part-03 where part-03 is not part of partition
name|Path
name|path
init|=
name|FileUtils
operator|.
name|getParentRegardlessOfScheme
argument_list|(
name|dir
argument_list|,
name|pathToPartitionInfo
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
comment|// FIXME: old implementation returned null; exception maybe?
return|return
literal|null
return|;
block|}
return|return
name|pathToPartitionInfo
operator|.
name|get
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|foundAlias
parameter_list|(
name|Map
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToAliases
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|aliases
init|=
name|pathToAliases
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|aliases
operator|==
literal|null
operator|)
operator|||
operator|(
name|aliases
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|Path
name|getMatchingPath
parameter_list|(
name|Map
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToAliases
parameter_list|,
name|Path
name|dir
parameter_list|)
block|{
comment|// First find the path to be searched
name|Path
name|path
init|=
name|dir
decl_stmt|;
if|if
condition|(
name|foundAlias
argument_list|(
name|pathToAliases
argument_list|,
name|path
argument_list|)
condition|)
block|{
return|return
name|path
return|;
block|}
name|Path
name|dirPath
init|=
name|Path
operator|.
name|getPathWithoutSchemeAndAuthority
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundAlias
argument_list|(
name|pathToAliases
argument_list|,
name|dirPath
argument_list|)
condition|)
block|{
return|return
name|dirPath
return|;
block|}
while|while
condition|(
name|path
operator|!=
literal|null
operator|&&
name|dirPath
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|dirPath
operator|=
name|dirPath
operator|.
name|getParent
argument_list|()
expr_stmt|;
comment|//first try full match
if|if
condition|(
name|foundAlias
argument_list|(
name|pathToAliases
argument_list|,
name|path
argument_list|)
condition|)
block|{
return|return
name|path
return|;
block|}
if|if
condition|(
name|foundAlias
argument_list|(
name|pathToAliases
argument_list|,
name|dirPath
argument_list|)
condition|)
block|{
return|return
name|dirPath
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get the list of operators from the operator tree that are needed for the path    * @param pathToAliases  mapping from path to aliases    * @param aliasToWork    The operator tree to be invoked for a given alias    * @param dir            The path to look for    **/
specifier|public
specifier|static
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|doGetWorksFromPath
parameter_list|(
name|Map
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToAliases
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|aliasToWork
parameter_list|,
name|Path
name|dir
parameter_list|)
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|opList
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aliases
init|=
name|doGetAliasesFromPath
argument_list|(
name|pathToAliases
argument_list|,
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|aliases
control|)
block|{
name|opList
operator|.
name|add
argument_list|(
name|aliasToWork
operator|.
name|get
argument_list|(
name|alias
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|opList
return|;
block|}
comment|/**    * Get the list of aliases from the opeerator tree that are needed for the path    * @param pathToAliases  mapping from path to aliases    * @param dir            The path to look for    **/
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|doGetAliasesFromPath
parameter_list|(
name|Map
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToAliases
parameter_list|,
name|Path
name|dir
parameter_list|)
block|{
if|if
condition|(
name|pathToAliases
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
block|}
name|Path
name|path
init|=
name|getMatchingPath
argument_list|(
name|pathToAliases
argument_list|,
name|dir
argument_list|)
decl_stmt|;
return|return
name|pathToAliases
operator|.
name|get
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|private
name|HiveFileFormatUtils
parameter_list|()
block|{
comment|// prevent instantiation
block|}
specifier|public
specifier|static
class|class
name|NullOutputCommitter
extends|extends
name|OutputCommitter
block|{
annotation|@
name|Override
specifier|public
name|void
name|setupJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|cleanupJob
parameter_list|(
name|JobContext
name|jobContext
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|setupTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|boolean
name|needsTaskCommit
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|abortTask
parameter_list|(
name|TaskAttemptContext
name|taskContext
parameter_list|)
block|{ }
block|}
comment|/**    * Hive uses side effect files exclusively for it's output. It also manages    * the setup/cleanup/commit of output from the hive client. As a result it does    * not need support for the same inside the MR framework    *    * This routine sets the appropriate options related to bypass setup/cleanup/commit    * support in the MR framework, but does not set the OutputFormat class.    */
specifier|public
specifier|static
name|void
name|prepareJobOutput
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setOutputCommitter
argument_list|(
name|NullOutputCommitter
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// option to bypass job setup and cleanup was introduced in hadoop-21 (MAPREDUCE-463)
comment|// but can be backported. So we disable setup/cleanup in all versions>= 0.19
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|SETUP_CLEANUP_NEEDED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// option to bypass task cleanup task was introduced in hadoop-23 (MAPREDUCE-2206)
comment|// but can be backported. So we disable setup/cleanup in all versions>= 0.19
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|TASK_CLEANUP_NEEDED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

