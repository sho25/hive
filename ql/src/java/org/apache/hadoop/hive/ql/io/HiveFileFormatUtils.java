begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_comment
comment|/**  * An util class for various Hive file format tasks.  * registerOutputFormatSubstitute(Class, Class) getOutputFormatSubstitute(Class)  * are added for backward compatibility. They return the newly added  * HiveOutputFormat for the older ones.  *   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|HiveFileFormatUtils
block|{
static|static
block|{
name|outputFormatSubstituteMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|HiveOutputFormat
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|HiveFileFormatUtils
operator|.
name|registerOutputFormatSubstitute
argument_list|(
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|,
name|HiveIgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|HiveFileFormatUtils
operator|.
name|registerOutputFormatSubstitute
argument_list|(
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|,
name|HiveSequenceFileOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|HiveOutputFormat
argument_list|>
argument_list|>
name|outputFormatSubstituteMap
decl_stmt|;
comment|/**    * register a substitute.    *     * @param origin    *          the class that need to be substituted    * @param substitute    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
specifier|synchronized
name|void
name|registerOutputFormatSubstitute
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|origin
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|HiveOutputFormat
argument_list|>
name|substitute
parameter_list|)
block|{
name|outputFormatSubstituteMap
operator|.
name|put
argument_list|(
name|origin
argument_list|,
name|substitute
argument_list|)
expr_stmt|;
block|}
comment|/**    * get a OutputFormat's substitute HiveOutputFormat.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
specifier|synchronized
name|Class
argument_list|<
name|?
extends|extends
name|HiveOutputFormat
argument_list|>
name|getOutputFormatSubstitute
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|origin
parameter_list|)
block|{
if|if
condition|(
name|HiveOutputFormat
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|origin
argument_list|)
condition|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|HiveOutputFormat
argument_list|>
operator|)
name|origin
return|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|HiveOutputFormat
argument_list|>
name|result
init|=
name|outputFormatSubstituteMap
operator|.
name|get
argument_list|(
name|origin
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * get the final output path of a given FileOutputFormat.    *     * @param parent    *          parent dir of the expected final output path    * @param jc    *          job configuration    */
specifier|public
specifier|static
name|Path
name|getOutputFormatFinalPath
parameter_list|(
name|Path
name|parent
parameter_list|,
name|JobConf
name|jc
parameter_list|,
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|hiveOutputFormat
parameter_list|,
name|boolean
name|isCompressed
parameter_list|,
name|Path
name|defaultFinalPath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hiveOutputFormat
operator|instanceof
name|HiveIgnoreKeyTextOutputFormat
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
name|Utilities
operator|.
name|getTaskId
argument_list|(
name|jc
argument_list|)
operator|+
name|Utilities
operator|.
name|getFileExtension
argument_list|(
name|jc
argument_list|,
name|isCompressed
argument_list|)
argument_list|)
return|;
block|}
return|return
name|defaultFinalPath
return|;
block|}
static|static
block|{
name|inputFormatCheckerMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormatChecker
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|HiveFileFormatUtils
operator|.
name|registerInputFormatChecker
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|SequenceFileInputFormatChecker
operator|.
name|class
argument_list|)
expr_stmt|;
name|HiveFileFormatUtils
operator|.
name|registerInputFormatChecker
argument_list|(
name|RCFileInputFormat
operator|.
name|class
argument_list|,
name|RCFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|inputFormatCheckerInstanceCache
operator|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|InputFormatChecker
argument_list|>
argument_list|,
name|InputFormatChecker
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormatChecker
argument_list|>
argument_list|>
name|inputFormatCheckerMap
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|InputFormatChecker
argument_list|>
argument_list|,
name|InputFormatChecker
argument_list|>
name|inputFormatCheckerInstanceCache
decl_stmt|;
comment|/**    * register an InputFormatChecker for a given InputFormat.    *     * @param format    *          the class that need to be substituted    * @param checker    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
specifier|synchronized
name|void
name|registerInputFormatChecker
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|format
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormatChecker
argument_list|>
name|checker
parameter_list|)
block|{
name|inputFormatCheckerMap
operator|.
name|put
argument_list|(
name|format
argument_list|,
name|checker
argument_list|)
expr_stmt|;
block|}
comment|/**    * get an InputFormatChecker for a file format.    */
specifier|public
specifier|static
specifier|synchronized
name|Class
argument_list|<
name|?
extends|extends
name|InputFormatChecker
argument_list|>
name|getInputFormatChecker
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|inputFormat
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|InputFormatChecker
argument_list|>
name|result
init|=
name|inputFormatCheckerMap
operator|.
name|get
argument_list|(
name|inputFormat
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * checks if files are in same format as the given input format.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|boolean
name|checkInputFormat
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatCls
parameter_list|,
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|files
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|files
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|InputFormatChecker
argument_list|>
name|checkerCls
init|=
name|getInputFormatChecker
argument_list|(
name|inputFormatCls
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkerCls
operator|==
literal|null
operator|&&
name|inputFormatCls
operator|.
name|isAssignableFrom
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// we get a text input format here, we can not determine a file is text
comment|// according to its content, so we can do is to test if other file
comment|// format can accept it. If one other file format can accept this file,
comment|// we treat this file as text file, although it maybe not.
return|return
name|checkTextInputFormat
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|files
argument_list|)
return|;
block|}
if|if
condition|(
name|checkerCls
operator|!=
literal|null
condition|)
block|{
name|InputFormatChecker
name|checkerInstance
init|=
name|inputFormatCheckerInstanceCache
operator|.
name|get
argument_list|(
name|checkerCls
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|checkerInstance
operator|==
literal|null
condition|)
block|{
name|checkerInstance
operator|=
name|checkerCls
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|inputFormatCheckerInstanceCache
operator|.
name|put
argument_list|(
name|checkerCls
argument_list|,
name|checkerInstance
argument_list|)
expr_stmt|;
block|}
return|return
name|checkerInstance
operator|.
name|validateInput
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|files
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|boolean
name|checkTextInputFormat
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|files
parameter_list|)
throws|throws
name|HiveException
block|{
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
argument_list|>
name|inputFormatter
init|=
name|inputFormatCheckerMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|reg
range|:
name|inputFormatter
control|)
block|{
name|boolean
name|result
init|=
name|checkInputFormat
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|reg
argument_list|,
name|files
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|RecordWriter
name|getHiveRecordWriter
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|TableDesc
name|tableInfo
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|outputClass
parameter_list|,
name|FileSinkDesc
name|conf
parameter_list|,
name|Path
name|outPath
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|hiveOutputFormat
init|=
name|tableInfo
operator|.
name|getOutputFileFormatClass
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|boolean
name|isCompressed
init|=
name|conf
operator|.
name|getCompressed
argument_list|()
decl_stmt|;
name|JobConf
name|jc_output
init|=
name|jc
decl_stmt|;
if|if
condition|(
name|isCompressed
condition|)
block|{
name|jc_output
operator|=
operator|new
name|JobConf
argument_list|(
name|jc
argument_list|)
expr_stmt|;
name|String
name|codecStr
init|=
name|conf
operator|.
name|getCompressCodec
argument_list|()
decl_stmt|;
if|if
condition|(
name|codecStr
operator|!=
literal|null
operator|&&
operator|!
name|codecStr
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|CompressionCodec
argument_list|>
name|codec
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|CompressionCodec
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|codecStr
argument_list|)
decl_stmt|;
name|FileOutputFormat
operator|.
name|setOutputCompressorClass
argument_list|(
name|jc_output
argument_list|,
name|codec
argument_list|)
expr_stmt|;
block|}
name|String
name|type
init|=
name|conf
operator|.
name|getCompressType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|!
name|type
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|CompressionType
name|style
init|=
name|CompressionType
operator|.
name|valueOf
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|SequenceFileOutputFormat
operator|.
name|setOutputCompressionType
argument_list|(
name|jc
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|getRecordWriter
argument_list|(
name|jc_output
argument_list|,
name|hiveOutputFormat
argument_list|,
name|outputClass
argument_list|,
name|isCompressed
argument_list|,
name|tableInfo
operator|.
name|getProperties
argument_list|()
argument_list|,
name|outPath
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|RecordWriter
name|getRecordWriter
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|hiveOutputFormat
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valueClass
parameter_list|,
name|boolean
name|isCompressed
parameter_list|,
name|Properties
name|tableProp
parameter_list|,
name|Path
name|outPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
if|if
condition|(
name|hiveOutputFormat
operator|!=
literal|null
condition|)
block|{
return|return
name|hiveOutputFormat
operator|.
name|getHiveRecordWriter
argument_list|(
name|jc
argument_list|,
name|outPath
argument_list|,
name|valueClass
argument_list|,
name|isCompressed
argument_list|,
name|tableProp
argument_list|,
literal|null
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|HiveFileFormatUtils
parameter_list|()
block|{
comment|// prevent instantiation
block|}
block|}
end_class

end_unit

