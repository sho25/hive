begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsSetupConst
import|;
end_import

begin_class
specifier|public
class|class
name|JDBCStatsUtils
block|{
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|supportedStats
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|columnNameMapping
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
comment|// supported statistics
name|supportedStats
operator|.
name|add
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|)
expr_stmt|;
name|supportedStats
operator|.
name|add
argument_list|(
name|StatsSetupConst
operator|.
name|RAW_DATA_SIZE
argument_list|)
expr_stmt|;
comment|// row count statistics
name|columnNameMapping
operator|.
name|put
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_ROW_COUNT_COLUMN_NAME
argument_list|)
expr_stmt|;
comment|// raw data size
name|columnNameMapping
operator|.
name|put
argument_list|(
name|StatsSetupConst
operator|.
name|RAW_DATA_SIZE
argument_list|,
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_RAW_DATA_SIZE_COLUMN_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the set of supported statistics    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getSupportedStatistics
parameter_list|()
block|{
return|return
name|supportedStats
return|;
block|}
comment|/**    * Check if the set to be published is within the supported statistics.    * It must also contain at least the basic statistics (used for comparison)    *    * @param stats    *          - stats to be published    * @return true if is a valid statistic set, false otherwise    */
specifier|public
specifier|static
name|boolean
name|isValidStatisticSet
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|stats
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stats
operator|.
name|contains
argument_list|(
name|getBasicStat
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|stat
range|:
name|stats
control|)
block|{
if|if
condition|(
operator|!
name|supportedStats
operator|.
name|contains
argument_list|(
name|stat
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Check if a particular statistic type is supported    *    * @param statType    *          - statistic to be published    * @return true if statType is supported, false otherwise    */
specifier|public
specifier|static
name|boolean
name|isValidStatistic
parameter_list|(
name|String
name|statType
parameter_list|)
block|{
return|return
name|supportedStats
operator|.
name|contains
argument_list|(
name|statType
argument_list|)
return|;
block|}
comment|/**    * Returns the name of the column storing the key for statistics.    */
specifier|public
specifier|static
name|String
name|getIdColumnName
parameter_list|()
block|{
return|return
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_ID_COLUMN_NAME
return|;
block|}
specifier|public
specifier|static
name|String
name|getStatTableName
parameter_list|()
block|{
return|return
name|JDBCStatsSetupConstants
operator|.
name|PART_STAT_TABLE_NAME
return|;
block|}
comment|/**    * Returns the column where the statistics for the given type are stored.    *    * @param statType    *          - supported statistic.    * @return column name for the given statistic.    */
specifier|public
specifier|static
name|String
name|getStatColumnName
parameter_list|(
name|String
name|statType
parameter_list|)
block|{
return|return
name|columnNameMapping
operator|.
name|get
argument_list|(
name|statType
argument_list|)
return|;
block|}
comment|/**    * Returns the basic type of the supported statistics.    * It is used to determine which statistics are fresher.    */
specifier|public
specifier|static
name|String
name|getBasicStat
parameter_list|()
block|{
return|return
name|supportedStats
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * Prepares CREATE TABLE query    */
specifier|public
specifier|static
name|String
name|getCreate
parameter_list|(
name|String
name|comment
parameter_list|)
block|{
name|String
name|create
init|=
literal|"CREATE TABLE /* "
operator|+
name|comment
operator|+
literal|" */ "
operator|+
name|JDBCStatsUtils
operator|.
name|getStatTableName
argument_list|()
operator|+
literal|" ("
operator|+
name|JDBCStatsUtils
operator|.
name|getIdColumnName
argument_list|()
operator|+
literal|" VARCHAR(255) PRIMARY KEY "
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|supportedStats
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|create
operator|+=
literal|", "
operator|+
name|getStatColumnName
argument_list|(
name|supportedStats
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|" BIGINT "
expr_stmt|;
block|}
name|create
operator|+=
literal|")"
expr_stmt|;
return|return
name|create
return|;
block|}
comment|/**    * Prepares UPDATE statement issued when updating existing statistics    */
specifier|public
specifier|static
name|String
name|getUpdate
parameter_list|(
name|String
name|comment
parameter_list|)
block|{
name|String
name|update
init|=
literal|"UPDATE /* "
operator|+
name|comment
operator|+
literal|" */ "
operator|+
name|getStatTableName
argument_list|()
operator|+
literal|" SET "
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|supportedStats
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|update
operator|+=
name|columnNameMapping
operator|.
name|get
argument_list|(
name|supportedStats
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|" = ? , "
expr_stmt|;
block|}
name|update
operator|=
name|update
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|update
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|update
operator|+=
literal|" WHERE "
operator|+
name|JDBCStatsUtils
operator|.
name|getIdColumnName
argument_list|()
operator|+
literal|" = ? AND ?> ( SELECT TEMP."
operator|+
name|getStatColumnName
argument_list|(
name|getBasicStat
argument_list|()
argument_list|)
operator|+
literal|" FROM ( "
operator|+
literal|" SELECT "
operator|+
name|getStatColumnName
argument_list|(
name|getBasicStat
argument_list|()
argument_list|)
operator|+
literal|" FROM "
operator|+
name|getStatTableName
argument_list|()
operator|+
literal|" WHERE "
operator|+
name|getIdColumnName
argument_list|()
operator|+
literal|" = ? ) TEMP )"
expr_stmt|;
return|return
name|update
return|;
block|}
comment|/**    * Prepares INSERT statement for statistic publishing.    */
specifier|public
specifier|static
name|String
name|getInsert
parameter_list|(
name|String
name|comment
parameter_list|)
block|{
name|String
name|insert
init|=
literal|"INSERT INTO /* "
operator|+
name|comment
operator|+
literal|" */ "
operator|+
name|getStatTableName
argument_list|()
operator|+
literal|" VALUES (?, "
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|supportedStats
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|insert
operator|+=
literal|"? , "
expr_stmt|;
block|}
name|insert
operator|=
name|insert
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|insert
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
expr_stmt|;
name|insert
operator|+=
literal|")"
expr_stmt|;
return|return
name|insert
return|;
block|}
comment|/**    * Prepares SELECT query for statistics aggregation.    *    * @param statType    *          - statistic type to be aggregated.    * @param comment    * @return aggregated value for the given statistic    */
specifier|public
specifier|static
name|String
name|getSelectAggr
parameter_list|(
name|String
name|statType
parameter_list|,
name|String
name|comment
parameter_list|)
block|{
name|String
name|select
init|=
literal|"SELECT /* "
operator|+
name|comment
operator|+
literal|" */ "
operator|+
literal|"SUM( "
operator|+
name|getStatColumnName
argument_list|(
name|statType
argument_list|)
operator|+
literal|" ) "
operator|+
literal|" FROM "
operator|+
name|getStatTableName
argument_list|()
operator|+
literal|" WHERE "
operator|+
name|JDBCStatsUtils
operator|.
name|getIdColumnName
argument_list|()
operator|+
literal|" LIKE ? ESCAPE ?"
decl_stmt|;
return|return
name|select
return|;
block|}
comment|/**    * Prepares DELETE statement for cleanup.    */
specifier|public
specifier|static
name|String
name|getDeleteAggr
parameter_list|(
name|String
name|rowID
parameter_list|,
name|String
name|comment
parameter_list|)
block|{
name|String
name|delete
init|=
literal|"DELETE /* "
operator|+
name|comment
operator|+
literal|" */ "
operator|+
literal|" FROM "
operator|+
name|getStatTableName
argument_list|()
operator|+
literal|" WHERE "
operator|+
name|JDBCStatsUtils
operator|.
name|getIdColumnName
argument_list|()
operator|+
literal|" LIKE '"
operator|+
name|rowID
operator|+
literal|"%'"
decl_stmt|;
return|return
name|delete
return|;
block|}
block|}
end_class

end_unit

