begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|info
operator|.
name|show
operator|.
name|tables
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_comment
comment|/**  * Operation process showing the tables.  */
end_comment

begin_class
specifier|public
class|class
name|ShowTablesOperation
extends|extends
name|DDLOperation
argument_list|<
name|ShowTablesDesc
argument_list|>
block|{
specifier|public
name|ShowTablesOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|ShowTablesDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
name|String
name|dbName
init|=
name|desc
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|pattern
init|=
name|desc
operator|.
name|getPattern
argument_list|()
decl_stmt|;
comment|// if null, all tables/views are returned
name|TableType
name|typeFilter
init|=
name|desc
operator|.
name|getTypeFilter
argument_list|()
decl_stmt|;
name|String
name|resultsFile
init|=
name|desc
operator|.
name|getResFile
argument_list|()
decl_stmt|;
name|boolean
name|isExtended
init|=
name|desc
operator|.
name|isExtended
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|databaseExists
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|DATABASE_NOT_EXISTS
argument_list|,
name|dbName
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Table
argument_list|>
name|tableObjects
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isExtended
condition|)
block|{
name|tableObjects
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|tableObjects
operator|.
name|addAll
argument_list|(
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getTableObjectsByType
argument_list|(
name|dbName
argument_list|,
name|pattern
argument_list|,
name|typeFilter
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found {} table(s) matching the SHOW EXTENDED TABLES statement."
argument_list|,
name|tableObjects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tableNames
operator|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getTablesByType
argument_list|(
name|dbName
argument_list|,
name|pattern
argument_list|,
name|typeFilter
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found {} table(s) matching the SHOW TABLES statement."
argument_list|,
name|tableNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|DataOutputStream
name|os
init|=
name|DDLUtils
operator|.
name|getOutputStream
argument_list|(
operator|new
name|Path
argument_list|(
name|resultsFile
argument_list|)
argument_list|,
name|context
argument_list|)
init|)
block|{
if|if
condition|(
name|tableNames
operator|!=
literal|null
condition|)
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|sortedSet
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|tableNames
argument_list|)
decl_stmt|;
name|context
operator|.
name|getFormatter
argument_list|()
operator|.
name|showTables
argument_list|(
name|os
argument_list|,
name|sortedSet
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|tableObjects
argument_list|,
name|Comparator
operator|.
name|comparing
argument_list|(
name|Table
operator|::
name|getTableName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isExtended
condition|)
block|{
name|context
operator|.
name|getFormatter
argument_list|()
operator|.
name|showTablesExtended
argument_list|(
name|os
argument_list|,
name|tableObjects
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getFormatter
argument_list|()
operator|.
name|showMaterializedViews
argument_list|(
name|os
argument_list|,
name|tableObjects
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|GENERIC_ERROR
argument_list|,
literal|"in database"
operator|+
name|dbName
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

