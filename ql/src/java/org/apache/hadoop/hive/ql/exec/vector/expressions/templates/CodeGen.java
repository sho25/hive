begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|templates
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
specifier|public
class|class
name|CodeGen
block|{
specifier|static
name|String
index|[]
index|[]
name|templateExpansions
init|=
block|{
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Add"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Subtract"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Multiply"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Modulo"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Add"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Subtract"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Multiply"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Divide"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"/"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Modulo"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Add"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Subtract"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Multiply"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Divide"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"/"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Modulo"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Add"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Subtract"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Multiply"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Divide"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"/"
block|}
block|,
block|{
literal|"ColumnArithmeticScalar"
block|,
literal|"Modulo"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Add"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Subtract"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Multiply"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Modulo"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Add"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Subtract"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Multiply"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Divide"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"/"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Modulo"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Add"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Subtract"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Multiply"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Divide"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"/"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Modulo"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Add"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Subtract"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Multiply"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Divide"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"/"
block|}
block|,
block|{
literal|"ScalarArithmeticColumn"
block|,
literal|"Modulo"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Add"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Subtract"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Multiply"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Modulo"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Add"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Subtract"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Multiply"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Divide"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"/"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Modulo"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Add"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Subtract"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Multiply"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Divide"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"/"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Modulo"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Add"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"+"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Subtract"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"-"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Multiply"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"*"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Divide"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"/"
block|}
block|,
block|{
literal|"ColumnArithmeticColumn"
block|,
literal|"Modulo"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"%"
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"ColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterScalarCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterStringColumnCompareScalar"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterStringColumnCompareScalar"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterStringColumnCompareScalar"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterStringColumnCompareScalar"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterStringColumnCompareScalar"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterStringColumnCompareScalar"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterStringColumnCompareColumn"
block|,
literal|"Equal"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterStringColumnCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterStringColumnCompareColumn"
block|,
literal|"Less"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterStringColumnCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterStringColumnCompareColumn"
block|,
literal|"Greater"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterStringColumnCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"double"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Equal"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Equal"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"=="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"NotEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"!="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Less"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Less"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"<"
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"LessEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|"<="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Greater"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"Greater"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|">"
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"long"
block|,
literal|"long"
block|,
literal|">="
block|}
block|,
block|{
literal|"FilterColumnCompareColumn"
block|,
literal|"GreaterEqual"
block|,
literal|"double"
block|,
literal|"long"
block|,
literal|">="
block|}
block|,
block|{
literal|"ColumnUnaryMinus"
block|,
literal|"long"
block|}
block|,
block|{
literal|"ColumnUnaryMinus"
block|,
literal|"double"
block|}
block|,
comment|//template,<ClassName>,<ValueType>,<OperatorSymbol>,<DescriptionName>,<DescriptionValue>
block|{
literal|"VectorUDAFMinMax"
block|,
literal|"VectorUDAFMinLong"
block|,
literal|"long"
block|,
literal|"<"
block|,
literal|"min"
block|,
literal|"_FUNC_(expr) - Returns the minimum value of expr (vectorized, type: long)"
block|}
block|,
block|{
literal|"VectorUDAFMinMax"
block|,
literal|"VectorUDAFMinDouble"
block|,
literal|"double"
block|,
literal|"<"
block|,
literal|"min"
block|,
literal|"_FUNC_(expr) - Returns the minimum value of expr (vectorized, type: double)"
block|}
block|,
block|{
literal|"VectorUDAFMinMax"
block|,
literal|"VectorUDAFMaxLong"
block|,
literal|"long"
block|,
literal|">"
block|,
literal|"max"
block|,
literal|"_FUNC_(expr) - Returns the maximum value of expr (vectorized, type: long)"
block|}
block|,
block|{
literal|"VectorUDAFMinMax"
block|,
literal|"VectorUDAFMaxDouble"
block|,
literal|"double"
block|,
literal|">"
block|,
literal|"max"
block|,
literal|"_FUNC_(expr) - Returns the maximum value of expr (vectorized, type: double)"
block|}
block|,
comment|//template,<ClassName>,<ValueType>
block|{
literal|"VectorUDAFCount"
block|,
literal|"VectorUDAFCountLong"
block|,
literal|"long"
block|}
block|,
block|{
literal|"VectorUDAFCount"
block|,
literal|"VectorUDAFCountDouble"
block|,
literal|"double"
block|}
block|,
comment|//template,<ClassName>,<ValueType>
block|{
literal|"VectorUDAFSum"
block|,
literal|"VectorUDAFSumLong"
block|,
literal|"long"
block|}
block|,
block|{
literal|"VectorUDAFSum"
block|,
literal|"VectorUDAFSumDouble"
block|,
literal|"double"
block|}
block|,
block|{
literal|"VectorUDAFAvg"
block|,
literal|"VectorUDAFAvgLong"
block|,
literal|"long"
block|}
block|,
block|{
literal|"VectorUDAFAvg"
block|,
literal|"VectorUDAFAvgDouble"
block|,
literal|"double"
block|}
block|,
comment|//template,<ClassName>,<ValueType>,<VarianceFormula>,<DescriptionName>,<DescriptionValue>
block|{
literal|"VectorUDAFVar"
block|,
literal|"VectorUDAFVarPopLong"
block|,
literal|"long"
block|,
literal|"myagg.variance / myagg.count"
block|,
literal|"variance, var_pop"
block|,
literal|"_FUNC_(x) - Returns the variance of a set of numbers (vectorized, long)"
block|}
block|,
block|{
literal|"VectorUDAFVar"
block|,
literal|"VectorUDAFVarPopDouble"
block|,
literal|"double"
block|,
literal|"myagg.variance / myagg.count"
block|,
literal|"variance, var_pop"
block|,
literal|"_FUNC_(x) - Returns the variance of a set of numbers (vectorized, double)"
block|}
block|,
block|{
literal|"VectorUDAFVar"
block|,
literal|"VectorUDAFVarSampLong"
block|,
literal|"long"
block|,
literal|"myagg.variance / (myagg.count-1.0)"
block|,
literal|"var_samp"
block|,
literal|"_FUNC_(x) - Returns the sample variance of a set of numbers (vectorized, long)"
block|}
block|,
block|{
literal|"VectorUDAFVar"
block|,
literal|"VectorUDAFVarSampDouble"
block|,
literal|"double"
block|,
literal|"myagg.variance / (myagg.count-1.0)"
block|,
literal|"var_samp"
block|,
literal|"_FUNC_(x) - Returns the sample variance of a set of numbers (vectorized, double)"
block|}
block|,
block|{
literal|"VectorUDAFVar"
block|,
literal|"VectorUDAFStdPopLong"
block|,
literal|"long"
block|,
literal|"Math.sqrt(myagg.variance / (myagg.count))"
block|,
literal|"std,stddev,stddev_pop"
block|,
literal|"_FUNC_(x) - Returns the standard deviation of a set of numbers (vectorized, long)"
block|}
block|,
block|{
literal|"VectorUDAFVar"
block|,
literal|"VectorUDAFStdPopDouble"
block|,
literal|"double"
block|,
literal|"Math.sqrt(myagg.variance / (myagg.count))"
block|,
literal|"std,stddev,stddev_pop"
block|,
literal|"_FUNC_(x) - Returns the standard deviation of a set of numbers (vectorized, double)"
block|}
block|,
block|{
literal|"VectorUDAFVar"
block|,
literal|"VectorUDAFStdSampLong"
block|,
literal|"long"
block|,
literal|"Math.sqrt(myagg.variance / (myagg.count-1.0))"
block|,
literal|"stddev_samp"
block|,
literal|"_FUNC_(x) - Returns the sample standard deviation of a set of numbers (vectorized, long)"
block|}
block|,
block|{
literal|"VectorUDAFVar"
block|,
literal|"VectorUDAFStdSampDouble"
block|,
literal|"double"
block|,
literal|"Math.sqrt(myagg.variance / (myagg.count-1.0))"
block|,
literal|"stddev_samp"
block|,
literal|"_FUNC_(x) - Returns the sample standard deviation of a set of numbers (vectorized, double)"
block|}
block|,      }
decl_stmt|;
specifier|private
specifier|final
name|String
name|templateDirectory
decl_stmt|;
specifier|private
specifier|final
name|String
name|outputDirectory
decl_stmt|;
specifier|private
specifier|static
name|String
name|joinPath
parameter_list|(
name|String
modifier|...
name|parts
parameter_list|)
block|{
name|String
name|path
init|=
name|parts
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|path
operator|+=
name|File
operator|.
name|separatorChar
operator|+
name|parts
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
specifier|public
name|CodeGen
parameter_list|()
block|{
name|templateDirectory
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|templateDirectory
argument_list|)
decl_stmt|;
name|outputDirectory
operator|=
name|joinPath
argument_list|(
name|f
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"gen"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CodeGen
parameter_list|(
name|String
name|templateDirectory
parameter_list|,
name|String
name|outputDirectory
parameter_list|)
block|{
name|this
operator|.
name|templateDirectory
operator|=
name|templateDirectory
expr_stmt|;
name|this
operator|.
name|outputDirectory
operator|=
name|outputDirectory
expr_stmt|;
block|}
comment|/**    * @param args    * @throws Exception    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|CodeGen
name|gen
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
name|gen
operator|=
operator|new
name|CodeGen
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gen
operator|=
operator|new
name|CodeGen
argument_list|()
expr_stmt|;
block|}
name|gen
operator|.
name|generate
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|generate
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
index|[]
name|tdesc
range|:
name|templateExpansions
control|)
block|{
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ColumnArithmeticScalar"
argument_list|)
condition|)
block|{
name|generateColumnArithmeticScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ColumnCompareScalar"
argument_list|)
condition|)
block|{
name|generateColumnCompareScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterColumnCompareScalar"
argument_list|)
condition|)
block|{
name|generateFilterColumnCompareScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ScalarArithmeticColumn"
argument_list|)
condition|)
block|{
name|generateScalarArithmeticColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterColumnCompareColumn"
argument_list|)
condition|)
block|{
name|generateFilterColumnCompareColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ColumnArithmeticColumn"
argument_list|)
condition|)
block|{
name|generateColumnArithmeticColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ColumnUnaryMinus"
argument_list|)
condition|)
block|{
name|generateColumnUnaryMinus
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterStringColumnCompareScalar"
argument_list|)
condition|)
block|{
name|generateFilterStringColumnCompareScalar
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tdesc
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FilterStringColumnCompareColumn"
argument_list|)
condition|)
block|{
name|generateFilterStringColumnCompareColumn
argument_list|(
name|tdesc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
block|}
specifier|private
name|void
name|generateVectorUDAFMinMax
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|className
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|valueType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|descName
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
name|String
name|descValue
init|=
name|tdesc
index|[
literal|5
index|]
decl_stmt|;
name|String
name|columnType
init|=
name|getColumnVectorType
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
name|String
name|writableType
init|=
name|getOutputWritableType
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
name|String
name|inspectorType
init|=
name|getOutputObjectInspector
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
name|String
name|outputFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|outputDirectory
argument_list|,
name|className
operator|+
literal|".java"
argument_list|)
decl_stmt|;
name|String
name|templateFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|templateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ValueType>"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|columnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<DescriptionName>"
argument_list|,
name|descName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<DescriptionValue>"
argument_list|,
name|descValue
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputType>"
argument_list|,
name|writableType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputTypeInspector>"
argument_list|,
name|inspectorType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|outputFile
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateVectorUDAFCount
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|className
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|valueType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|columnType
init|=
name|getColumnVectorType
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
name|String
name|outputFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|outputDirectory
argument_list|,
name|className
operator|+
literal|".java"
argument_list|)
decl_stmt|;
name|String
name|templateFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|templateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ValueType>"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|columnType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|outputFile
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateVectorUDAFSum
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|Exception
block|{
comment|//template,<ClassName>,<ValueType>,<OutputType>,<OutputTypeInspector>
name|String
name|className
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|valueType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|columnType
init|=
name|getColumnVectorType
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
name|String
name|writableType
init|=
name|getOutputWritableType
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
name|String
name|inspectorType
init|=
name|getOutputObjectInspector
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
name|String
name|outputFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|outputDirectory
argument_list|,
name|className
operator|+
literal|".java"
argument_list|)
decl_stmt|;
name|String
name|templateFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|templateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ValueType>"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|columnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputType>"
argument_list|,
name|writableType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputTypeInspector>"
argument_list|,
name|inspectorType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|outputFile
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateVectorUDAFAvg
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|className
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|valueType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|columnType
init|=
name|getColumnVectorType
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
name|String
name|outputFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|outputDirectory
argument_list|,
name|className
operator|+
literal|".java"
argument_list|)
decl_stmt|;
name|String
name|templateFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|templateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ValueType>"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|columnType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|outputFile
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateVectorUDAFVar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|className
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|valueType
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|varianceFormula
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|descriptionName
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
name|String
name|descriptionValue
init|=
name|tdesc
index|[
literal|5
index|]
decl_stmt|;
name|String
name|columnType
init|=
name|getColumnVectorType
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
name|String
name|outputFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|outputDirectory
argument_list|,
name|className
operator|+
literal|".java"
argument_list|)
decl_stmt|;
name|String
name|templateFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|templateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ValueType>"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|columnType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<VarianceFormula>"
argument_list|,
name|varianceFormula
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<DescriptionName>"
argument_list|,
name|descriptionName
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<DescriptionValue>"
argument_list|,
name|descriptionValue
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|outputFile
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterStringColumnCompareScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"FilterStringCol"
operator|+
name|operatorName
operator|+
literal|"StringScalar"
decl_stmt|;
name|generateFilterStringColumnCompareScalar
argument_list|(
name|tdesc
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterStringColumnCompareColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"FilterStringCol"
operator|+
name|operatorName
operator|+
literal|"StringCol"
decl_stmt|;
name|generateFilterStringColumnCompareScalar
argument_list|(
name|tdesc
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterStringColumnCompareScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|outputFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|outputDirectory
argument_list|,
name|className
operator|+
literal|".java"
argument_list|)
decl_stmt|;
comment|// Read the template into a string;
name|String
name|templateFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|templateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
comment|// Expand, and write result
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|outputFile
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterColumnCompareColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
comment|//The variables are all same as ColumnCompareScalar except that
comment|//this template doesn't need a return type. Pass anything as return type.
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"Filter"
operator|+
name|this
operator|.
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Col"
operator|+
name|operatorName
operator|+
name|this
operator|.
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Column"
decl_stmt|;
name|generateColumnBinaryOperatorColumn
argument_list|(
name|tdesc
argument_list|,
literal|"doesn't matter"
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateColumnUnaryMinus
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operandType
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|inputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType
argument_list|)
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|inputColumnVectorType
decl_stmt|;
name|String
name|returnType
init|=
name|operandType
decl_stmt|;
name|String
name|className
init|=
name|this
operator|.
name|getCamelCaseType
argument_list|(
name|operandType
argument_list|)
operator|+
literal|"ColUnaryMinus"
decl_stmt|;
name|String
name|outputFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|outputDirectory
argument_list|,
name|className
operator|+
literal|".java"
argument_list|)
decl_stmt|;
name|String
name|templateFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|templateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
comment|// Expand, and write result
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|inputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType>"
argument_list|,
name|operandType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|outputFile
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateColumnArithmeticColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|className
init|=
name|this
operator|.
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Col"
operator|+
name|operatorName
operator|+
name|this
operator|.
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Column"
decl_stmt|;
name|String
name|returnType
init|=
name|getArithmeticReturnType
argument_list|(
name|operandType1
argument_list|,
name|operandType2
argument_list|)
decl_stmt|;
name|generateColumnBinaryOperatorColumn
argument_list|(
name|tdesc
argument_list|,
name|returnType
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterColumnCompareScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
comment|//The variables are all same as ColumnCompareScalar except that
comment|//this template doesn't need a return type. Pass anything as return type.
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"Filter"
operator|+
name|this
operator|.
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Col"
operator|+
name|operatorName
operator|+
name|this
operator|.
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Scalar"
decl_stmt|;
name|generateColumnBinaryOperatorScalar
argument_list|(
name|tdesc
argument_list|,
literal|"doesn't matter"
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateFilterScalarCompareColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
comment|//this template doesn't need a return type. Pass anything as return type.
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|className
init|=
literal|"Filter"
operator|+
name|this
operator|.
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Scalar"
operator|+
name|operatorName
operator|+
name|this
operator|.
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Column"
decl_stmt|;
name|generateScalarBinaryOperatorColumn
argument_list|(
name|tdesc
argument_list|,
literal|"doesn't matter"
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateColumnCompareScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|returnType
init|=
literal|"long"
decl_stmt|;
name|String
name|className
init|=
name|this
operator|.
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Col"
operator|+
name|operatorName
operator|+
name|this
operator|.
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Scalar"
decl_stmt|;
name|generateColumnBinaryOperatorScalar
argument_list|(
name|tdesc
argument_list|,
name|returnType
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateColumnBinaryOperatorColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|,
name|String
name|returnType
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType1
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType1
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType2
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType2
argument_list|)
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
name|String
name|outputFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|outputDirectory
argument_list|,
name|className
operator|+
literal|".java"
argument_list|)
decl_stmt|;
comment|//Read the template into a string;
name|String
name|templateFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|templateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType1>"
argument_list|,
name|inputColumnVectorType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType2>"
argument_list|,
name|inputColumnVectorType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType1>"
argument_list|,
name|operandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType2>"
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|outputFile
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateColumnBinaryOperatorScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|,
name|String
name|returnType
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType1
argument_list|)
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
name|String
name|outputFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|outputDirectory
argument_list|,
name|className
operator|+
literal|".java"
argument_list|)
decl_stmt|;
comment|//Read the template into a string;
name|String
name|templateFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|templateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|inputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType1>"
argument_list|,
name|operandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType2>"
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|outputFile
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateScalarBinaryOperatorColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|,
name|String
name|returnType
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|outputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
name|String
name|inputColumnVectorType
init|=
name|this
operator|.
name|getColumnVectorType
argument_list|(
name|operandType2
argument_list|)
decl_stmt|;
name|String
name|operatorSymbol
init|=
name|tdesc
index|[
literal|4
index|]
decl_stmt|;
name|String
name|outputFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|outputDirectory
argument_list|,
name|className
operator|+
literal|".java"
argument_list|)
decl_stmt|;
comment|//Read the template into a string;
name|String
name|templateFile
init|=
name|joinPath
argument_list|(
name|this
operator|.
name|templateDirectory
argument_list|,
name|tdesc
index|[
literal|0
index|]
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
name|String
name|templateString
init|=
name|readFile
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ClassName>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<InputColumnVectorType>"
argument_list|,
name|inputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OutputColumnVectorType>"
argument_list|,
name|outputColumnVectorType
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperatorSymbol>"
argument_list|,
name|operatorSymbol
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType1>"
argument_list|,
name|operandType1
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<OperandType2>"
argument_list|,
name|operandType2
argument_list|)
expr_stmt|;
name|templateString
operator|=
name|templateString
operator|.
name|replaceAll
argument_list|(
literal|"<ReturnType>"
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|outputFile
argument_list|,
name|templateString
argument_list|)
expr_stmt|;
block|}
comment|//Binary arithmetic operator
specifier|private
name|void
name|generateColumnArithmeticScalar
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|className
init|=
name|this
operator|.
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Col"
operator|+
name|operatorName
operator|+
name|this
operator|.
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Scalar"
decl_stmt|;
name|String
name|returnType
init|=
name|getArithmeticReturnType
argument_list|(
name|operandType1
argument_list|,
name|operandType2
argument_list|)
decl_stmt|;
name|generateColumnBinaryOperatorScalar
argument_list|(
name|tdesc
argument_list|,
name|returnType
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateScalarArithmeticColumn
parameter_list|(
name|String
index|[]
name|tdesc
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operatorName
init|=
name|tdesc
index|[
literal|1
index|]
decl_stmt|;
name|String
name|operandType1
init|=
name|tdesc
index|[
literal|2
index|]
decl_stmt|;
name|String
name|operandType2
init|=
name|tdesc
index|[
literal|3
index|]
decl_stmt|;
name|String
name|className
init|=
name|this
operator|.
name|getCamelCaseType
argument_list|(
name|operandType1
argument_list|)
operator|+
literal|"Scalar"
operator|+
name|operatorName
operator|+
name|this
operator|.
name|getCamelCaseType
argument_list|(
name|operandType2
argument_list|)
operator|+
literal|"Column"
decl_stmt|;
name|String
name|returnType
init|=
name|getArithmeticReturnType
argument_list|(
name|operandType1
argument_list|,
name|operandType2
argument_list|)
decl_stmt|;
name|generateScalarBinaryOperatorColumn
argument_list|(
name|tdesc
argument_list|,
name|returnType
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeFile
parameter_list|(
name|String
name|outputFile
parameter_list|,
name|String
name|str
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedWriter
name|w
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|outputFile
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|readFile
parameter_list|(
name|String
name|templateFile
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|templateFile
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|r
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getCamelCaseType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
return|return
literal|"Long"
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
return|return
literal|"Double"
return|;
block|}
else|else
block|{
return|return
name|type
return|;
block|}
block|}
specifier|private
name|String
name|getArithmeticReturnType
parameter_list|(
name|String
name|operandType1
parameter_list|,
name|String
name|operandType2
parameter_list|)
block|{
if|if
condition|(
name|operandType1
operator|.
name|equals
argument_list|(
literal|"double"
argument_list|)
operator|||
name|operandType2
operator|.
name|equals
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
return|return
literal|"double"
return|;
block|}
else|else
block|{
return|return
literal|"long"
return|;
block|}
block|}
specifier|private
name|String
name|getColumnVectorType
parameter_list|(
name|String
name|primitiveType
parameter_list|)
block|{
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
return|return
literal|"LongColumnVector"
return|;
block|}
elseif|else
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
return|return
literal|"DoubleColumnVector"
return|;
block|}
return|return
literal|"LongColumnVector"
return|;
block|}
specifier|private
name|String
name|getOutputWritableType
parameter_list|(
name|String
name|primitiveType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
return|return
literal|"LongWritable"
return|;
block|}
elseif|else
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
return|return
literal|"DoubleWritable"
return|;
block|}
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unimplemented primitive output writable: "
operator|+
name|primitiveType
argument_list|)
throw|;
block|}
specifier|private
name|String
name|getOutputObjectInspector
parameter_list|(
name|String
name|primitiveType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
return|return
literal|"PrimitiveObjectInspectorFactory.writableLongObjectInspector"
return|;
block|}
elseif|else
if|if
condition|(
name|primitiveType
operator|.
name|equals
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
return|return
literal|"PrimitiveObjectInspectorFactory.writableDoubleObjectInspector"
return|;
block|}
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unimplemented primitive output inspector: "
operator|+
name|primitiveType
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

