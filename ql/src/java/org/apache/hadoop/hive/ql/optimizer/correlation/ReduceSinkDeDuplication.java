begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|correlation
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECONVERTJOIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECONVERTJOINNOCONDITIONALTASK
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExtractOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|Transform
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDescUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
import|;
end_import

begin_comment
comment|/**  * If two reducer sink operators share the same partition/sort columns and order,  * they can be merged. This should happen after map join optimization because map  * join optimization will remove reduce sink operators.  *  * This optimizer removes/replaces child-RS (not parent) which is safer way for DefaultGraphWalker.  */
end_comment

begin_class
specifier|public
class|class
name|ReduceSinkDeDuplication
implements|implements
name|Transform
block|{
specifier|private
specifier|static
specifier|final
name|String
name|RS
init|=
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GBY
init|=
name|GroupByOperator
operator|.
name|getOperatorName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JOIN
init|=
name|JoinOperator
operator|.
name|getOperatorName
argument_list|()
decl_stmt|;
specifier|protected
name|ParseContext
name|pGraphContext
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ParseContext
name|transform
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|pGraphContext
operator|=
name|pctx
expr_stmt|;
comment|// generate pruned column list for all relevant operators
name|ReduceSinkDeduplicateProcCtx
name|cppCtx
init|=
operator|new
name|ReduceSinkDeduplicateProcCtx
argument_list|(
name|pGraphContext
argument_list|)
decl_stmt|;
comment|// for auto convert map-joins, it not safe to dedup in here (todo)
name|boolean
name|mergeJoins
init|=
operator|!
name|pctx
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HIVECONVERTJOIN
argument_list|)
operator|&&
operator|!
name|pctx
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HIVECONVERTJOINNOCONDITIONALTASK
argument_list|)
decl_stmt|;
comment|// If multiple rules can be matched with same cost, last rule will be choosen as a processor
comment|// see DefaultRuleDispatcher#dispatch()
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|RS
operator|+
literal|"%.*%"
operator|+
name|RS
operator|+
literal|"%"
argument_list|)
argument_list|,
name|ReduceSinkDeduplicateProcFactory
operator|.
name|getReducerReducerProc
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R2"
argument_list|,
name|RS
operator|+
literal|"%"
operator|+
name|GBY
operator|+
literal|"%.*%"
operator|+
name|RS
operator|+
literal|"%"
argument_list|)
argument_list|,
name|ReduceSinkDeduplicateProcFactory
operator|.
name|getGroupbyReducerProc
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergeJoins
condition|)
block|{
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R3"
argument_list|,
name|JOIN
operator|+
literal|"%.*%"
operator|+
name|RS
operator|+
literal|"%"
argument_list|)
argument_list|,
name|ReduceSinkDeduplicateProcFactory
operator|.
name|getJoinReducerProc
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO RS+JOIN
comment|// The dispatcher fires the processor corresponding to the closest matching
comment|// rule and passes the context along
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|ReduceSinkDeduplicateProcFactory
operator|.
name|getDefaultProc
argument_list|()
argument_list|,
name|opRules
argument_list|,
name|cppCtx
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
comment|// Create a list of topop nodes
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pGraphContext
operator|.
name|getTopOps
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|pGraphContext
return|;
block|}
specifier|protected
class|class
name|ReduceSinkDeduplicateProcCtx
extends|extends
name|AbstractCorrelationProcCtx
block|{
specifier|public
name|ReduceSinkDeduplicateProcCtx
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
block|{
name|super
argument_list|(
name|pctx
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|ReduceSinkDeduplicateProcFactory
block|{
specifier|public
specifier|static
name|NodeProcessor
name|getReducerReducerProc
parameter_list|()
block|{
return|return
operator|new
name|ReducerReducerProc
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getGroupbyReducerProc
parameter_list|()
block|{
return|return
operator|new
name|GroupbyReducerProc
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getJoinReducerProc
parameter_list|()
block|{
return|return
operator|new
name|JoinReducerProc
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getDefaultProc
parameter_list|()
block|{
return|return
operator|new
name|DefaultProc
argument_list|()
return|;
block|}
block|}
comment|/*    * do nothing.    */
specifier|static
class|class
name|DefaultProc
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|abstract
specifier|static
class|class
name|AbsctractReducerReducerProc
implements|implements
name|NodeProcessor
block|{
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ReduceSinkDeduplicateProcCtx
name|dedupCtx
init|=
operator|(
name|ReduceSinkDeduplicateProcCtx
operator|)
name|procCtx
decl_stmt|;
if|if
condition|(
name|dedupCtx
operator|.
name|hasBeenRemoved
argument_list|(
operator|(
name|Operator
argument_list|<
name|?
argument_list|>
operator|)
name|nd
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ReduceSinkOperator
name|cRS
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|nd
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|child
init|=
name|CorrelationUtilities
operator|.
name|getSingleChild
argument_list|(
name|cRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|JoinOperator
condition|)
block|{
return|return
literal|false
return|;
comment|// not supported
block|}
if|if
condition|(
name|child
operator|instanceof
name|GroupByOperator
condition|)
block|{
name|GroupByOperator
name|cGBY
init|=
operator|(
name|GroupByOperator
operator|)
name|child
decl_stmt|;
if|if
condition|(
operator|!
name|CorrelationUtilities
operator|.
name|hasGroupingSet
argument_list|(
name|cRS
argument_list|)
operator|&&
operator|!
name|cGBY
operator|.
name|getConf
argument_list|()
operator|.
name|isGroupingSetsPresent
argument_list|()
condition|)
block|{
return|return
name|process
argument_list|(
name|cRS
argument_list|,
name|cGBY
argument_list|,
name|dedupCtx
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
name|child
operator|instanceof
name|ExtractOperator
condition|)
block|{
return|return
name|process
argument_list|(
name|cRS
argument_list|,
name|dedupCtx
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
specifier|abstract
name|Object
name|process
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|ReduceSinkDeduplicateProcCtx
name|dedupCtx
parameter_list|)
throws|throws
name|SemanticException
function_decl|;
specifier|protected
specifier|abstract
name|Object
name|process
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|GroupByOperator
name|cGBY
parameter_list|,
name|ReduceSinkDeduplicateProcCtx
name|dedupCtx
parameter_list|)
throws|throws
name|SemanticException
function_decl|;
comment|// for JOIN-RS case, it's not possible generally to merge if child has
comment|// more key/partition columns than parents
specifier|protected
name|boolean
name|merge
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|JoinOperator
name|pJoin
parameter_list|,
name|int
name|minReducer
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|parents
init|=
name|pJoin
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
name|ReduceSinkOperator
index|[]
name|pRSs
init|=
name|parents
operator|.
name|toArray
argument_list|(
operator|new
name|ReduceSinkOperator
index|[
name|parents
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|ReduceSinkDesc
name|cRSc
init|=
name|cRS
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|ReduceSinkDesc
name|pRS0c
init|=
name|pRSs
index|[
literal|0
index|]
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|cRSc
operator|.
name|getKeyCols
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|pRS0c
operator|.
name|getKeyCols
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|cRSc
operator|.
name|getPartitionCols
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|pRS0c
operator|.
name|getPartitionCols
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Integer
name|moveReducerNumTo
init|=
name|checkNumReducer
argument_list|(
name|cRSc
operator|.
name|getNumReducers
argument_list|()
argument_list|,
name|pRS0c
operator|.
name|getNumReducers
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|moveReducerNumTo
operator|==
literal|null
operator|||
name|moveReducerNumTo
operator|>
literal|0
operator|&&
name|cRSc
operator|.
name|getNumReducers
argument_list|()
operator|<
name|minReducer
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Integer
name|moveRSOrderTo
init|=
name|checkOrder
argument_list|(
name|cRSc
operator|.
name|getOrder
argument_list|()
argument_list|,
name|pRS0c
operator|.
name|getOrder
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|moveRSOrderTo
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
index|[]
name|sorted
init|=
name|CorrelationUtilities
operator|.
name|getSortedTags
argument_list|(
name|pJoin
argument_list|)
decl_stmt|;
name|int
name|cKeySize
init|=
name|cRSc
operator|.
name|getKeyCols
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cKeySize
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeDesc
name|cexpr
init|=
name|cRSc
operator|.
name|getKeyCols
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ExprNodeDesc
index|[]
name|pexprs
init|=
operator|new
name|ExprNodeDesc
index|[
name|pRSs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|tag
init|=
literal|0
init|;
name|tag
operator|<
name|pRSs
operator|.
name|length
condition|;
name|tag
operator|++
control|)
block|{
name|pexprs
index|[
name|tag
index|]
operator|=
name|pRSs
index|[
name|tag
index|]
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|found
init|=
name|CorrelationUtilities
operator|.
name|indexOf
argument_list|(
name|cexpr
argument_list|,
name|pexprs
argument_list|,
name|cRS
argument_list|,
name|pRSs
argument_list|,
name|sorted
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|int
name|cPartSize
init|=
name|cRSc
operator|.
name|getPartitionCols
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cPartSize
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeDesc
name|cexpr
init|=
name|cRSc
operator|.
name|getPartitionCols
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ExprNodeDesc
index|[]
name|pexprs
init|=
operator|new
name|ExprNodeDesc
index|[
name|pRSs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|tag
init|=
literal|0
init|;
name|tag
operator|<
name|pRSs
operator|.
name|length
condition|;
name|tag
operator|++
control|)
block|{
name|pexprs
index|[
name|tag
index|]
operator|=
name|pRSs
index|[
name|tag
index|]
operator|.
name|getConf
argument_list|()
operator|.
name|getPartitionCols
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|found
init|=
name|CorrelationUtilities
operator|.
name|indexOf
argument_list|(
name|cexpr
argument_list|,
name|pexprs
argument_list|,
name|cRS
argument_list|,
name|pRSs
argument_list|,
name|sorted
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|moveReducerNumTo
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ReduceSinkOperator
name|pRS
range|:
name|pRSs
control|)
block|{
name|pRS
operator|.
name|getConf
argument_list|()
operator|.
name|setNumReducers
argument_list|(
name|cRS
operator|.
name|getConf
argument_list|()
operator|.
name|getNumReducers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Current RSDedup remove/replace child RS. So always copies      * more specific part of configurations of child RS to that of parent RS.      */
specifier|protected
name|boolean
name|merge
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|ReduceSinkOperator
name|pRS
parameter_list|,
name|int
name|minReducer
parameter_list|)
throws|throws
name|SemanticException
block|{
name|int
index|[]
name|result
init|=
name|checkStatus
argument_list|(
name|cRS
argument_list|,
name|pRS
argument_list|,
name|minReducer
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|result
index|[
literal|0
index|]
operator|>
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childKCs
init|=
name|cRS
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
name|pRS
operator|.
name|getConf
argument_list|()
operator|.
name|setKeyCols
argument_list|(
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|childKCs
argument_list|,
name|cRS
argument_list|,
name|pRS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
index|[
literal|1
index|]
operator|>
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|childPCs
init|=
name|cRS
operator|.
name|getConf
argument_list|()
operator|.
name|getPartitionCols
argument_list|()
decl_stmt|;
name|pRS
operator|.
name|getConf
argument_list|()
operator|.
name|setPartitionCols
argument_list|(
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|childPCs
argument_list|,
name|cRS
argument_list|,
name|pRS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
index|[
literal|2
index|]
operator|>
literal|0
condition|)
block|{
name|pRS
operator|.
name|getConf
argument_list|()
operator|.
name|setOrder
argument_list|(
name|cRS
operator|.
name|getConf
argument_list|()
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
index|[
literal|3
index|]
operator|>
literal|0
condition|)
block|{
name|pRS
operator|.
name|getConf
argument_list|()
operator|.
name|setNumReducers
argument_list|(
name|cRS
operator|.
name|getConf
argument_list|()
operator|.
name|getNumReducers
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Returns merge directions between two RSs for criterias (ordering, number of reducers,      * reducer keys, partition keys). Returns null if any of categories is not mergeable.      *      * Values for each index can be -1, 0, 1      * 1. 0 means two configuration in the category is the same      * 2. for -1, configuration of parent RS is more specific than child RS      * 3. for 1, configuration of child RS is more specific than parent RS      */
specifier|private
name|int
index|[]
name|checkStatus
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|ReduceSinkOperator
name|pRS
parameter_list|,
name|int
name|minReducer
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ReduceSinkDesc
name|cConf
init|=
name|cRS
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|ReduceSinkDesc
name|pConf
init|=
name|pRS
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Integer
name|moveRSOrderTo
init|=
name|checkOrder
argument_list|(
name|cConf
operator|.
name|getOrder
argument_list|()
argument_list|,
name|pConf
operator|.
name|getOrder
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|moveRSOrderTo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Integer
name|moveReducerNumTo
init|=
name|checkNumReducer
argument_list|(
name|cConf
operator|.
name|getNumReducers
argument_list|()
argument_list|,
name|pConf
operator|.
name|getNumReducers
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|moveReducerNumTo
operator|==
literal|null
operator|||
name|moveReducerNumTo
operator|>
literal|0
operator|&&
name|cConf
operator|.
name|getNumReducers
argument_list|()
operator|<
name|minReducer
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|ckeys
init|=
name|cConf
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|pkeys
init|=
name|pConf
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
name|Integer
name|moveKeyColTo
init|=
name|checkExprs
argument_list|(
name|ckeys
argument_list|,
name|pkeys
argument_list|,
name|cRS
argument_list|,
name|pRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|moveKeyColTo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|cpars
init|=
name|cConf
operator|.
name|getPartitionCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|ppars
init|=
name|pConf
operator|.
name|getPartitionCols
argument_list|()
decl_stmt|;
name|Integer
name|movePartitionColTo
init|=
name|checkExprs
argument_list|(
name|cpars
argument_list|,
name|ppars
argument_list|,
name|cRS
argument_list|,
name|pRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|movePartitionColTo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|int
index|[]
block|{
name|moveKeyColTo
block|,
name|movePartitionColTo
block|,
name|moveRSOrderTo
block|,
name|moveReducerNumTo
block|}
return|;
block|}
comment|/**      * Overlapping part of keys should be the same between parent and child.      * And if child has more keys than parent, non-overlapping part of keys      * should be backtrackable to parent.      */
specifier|private
name|Integer
name|checkExprs
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|ckeys
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|pkeys
parameter_list|,
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|ReduceSinkOperator
name|pRS
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Integer
name|moveKeyColTo
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ckeys
operator|==
literal|null
operator|||
name|ckeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|pkeys
operator|!=
literal|null
operator|&&
operator|!
name|pkeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|moveKeyColTo
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|pkeys
operator|==
literal|null
operator|||
name|pkeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|ckey
range|:
name|ckeys
control|)
block|{
if|if
condition|(
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|ckey
argument_list|,
name|cRS
argument_list|,
name|pRS
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// cKey is not present in parent
return|return
literal|null
return|;
block|}
block|}
name|moveKeyColTo
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|moveKeyColTo
operator|=
name|sameKeys
argument_list|(
name|ckeys
argument_list|,
name|pkeys
argument_list|,
name|cRS
argument_list|,
name|pRS
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|moveKeyColTo
return|;
block|}
comment|// backtrack key exprs of child to parent and compare it with parent's
specifier|protected
name|Integer
name|sameKeys
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|cexprs
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|pexprs
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|child
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|)
throws|throws
name|SemanticException
block|{
name|int
name|common
init|=
name|Math
operator|.
name|min
argument_list|(
name|cexprs
operator|.
name|size
argument_list|()
argument_list|,
name|pexprs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|limit
init|=
name|Math
operator|.
name|max
argument_list|(
name|cexprs
operator|.
name|size
argument_list|()
argument_list|,
name|pexprs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|common
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeDesc
name|pexpr
init|=
name|pexprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|cexpr
init|=
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|cexprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|cexpr
operator|==
literal|null
operator|||
operator|!
name|pexpr
operator|.
name|isSame
argument_list|(
name|cexpr
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
for|for
control|(
init|;
name|i
operator|<
name|limit
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|cexprs
operator|.
name|size
argument_list|()
operator|>
name|pexprs
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|cexprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|child
argument_list|,
name|parent
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// cKey is not present in parent
return|return
literal|null
return|;
block|}
block|}
block|}
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|cexprs
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|pexprs
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
comment|// order of overlapping keys should be exactly the same
specifier|protected
name|Integer
name|checkOrder
parameter_list|(
name|String
name|corder
parameter_list|,
name|String
name|porder
parameter_list|)
block|{
if|if
condition|(
name|corder
operator|==
literal|null
operator|||
name|corder
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
if|if
condition|(
name|porder
operator|==
literal|null
operator|||
name|porder
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|porder
operator|==
literal|null
operator|||
name|porder
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
name|corder
operator|=
name|corder
operator|.
name|trim
argument_list|()
expr_stmt|;
name|porder
operator|=
name|porder
operator|.
name|trim
argument_list|()
expr_stmt|;
name|int
name|target
init|=
name|Math
operator|.
name|min
argument_list|(
name|corder
operator|.
name|length
argument_list|()
argument_list|,
name|porder
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|corder
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|target
argument_list|)
operator|.
name|equals
argument_list|(
name|porder
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|target
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|corder
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|porder
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * If number of reducers for RS is -1, the RS can have any number of reducers.      * It's generally true except for order-by or forced bucketing cases.      * if both of num-reducers are not -1, those number should be the same.      */
specifier|protected
name|Integer
name|checkNumReducer
parameter_list|(
name|int
name|creduce
parameter_list|,
name|int
name|preduce
parameter_list|)
block|{
if|if
condition|(
name|creduce
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|preduce
operator|<
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|preduce
operator|<
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|creduce
operator|!=
name|preduce
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
specifier|static
class|class
name|GroupbyReducerProc
extends|extends
name|AbsctractReducerReducerProc
block|{
comment|// pRS-pGBY-cRS
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|ReduceSinkDeduplicateProcCtx
name|dedupCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|GroupByOperator
name|pGBY
init|=
name|CorrelationUtilities
operator|.
name|findPossibleParent
argument_list|(
name|cRS
argument_list|,
name|GroupByOperator
operator|.
name|class
argument_list|,
name|dedupCtx
operator|.
name|trustScript
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pGBY
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ReduceSinkOperator
name|pRS
init|=
name|CorrelationUtilities
operator|.
name|findPossibleParent
argument_list|(
name|pGBY
argument_list|,
name|ReduceSinkOperator
operator|.
name|class
argument_list|,
name|dedupCtx
operator|.
name|trustScript
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pRS
operator|!=
literal|null
operator|&&
name|merge
argument_list|(
name|cRS
argument_list|,
name|pRS
argument_list|,
name|dedupCtx
operator|.
name|minReducer
argument_list|()
argument_list|)
condition|)
block|{
name|CorrelationUtilities
operator|.
name|replaceReduceSinkWithSelectOperator
argument_list|(
name|cRS
argument_list|,
name|dedupCtx
operator|.
name|getPctx
argument_list|()
argument_list|,
name|dedupCtx
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|// pRS-pGBY-cRS-cGBY
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|GroupByOperator
name|cGBY
parameter_list|,
name|ReduceSinkDeduplicateProcCtx
name|dedupCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|start
init|=
name|CorrelationUtilities
operator|.
name|getStartForGroupBy
argument_list|(
name|cRS
argument_list|)
decl_stmt|;
name|GroupByOperator
name|pGBY
init|=
name|CorrelationUtilities
operator|.
name|findPossibleParent
argument_list|(
name|start
argument_list|,
name|GroupByOperator
operator|.
name|class
argument_list|,
name|dedupCtx
operator|.
name|trustScript
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pGBY
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ReduceSinkOperator
name|pRS
init|=
name|CorrelationUtilities
operator|.
name|getSingleParent
argument_list|(
name|pGBY
argument_list|,
name|ReduceSinkOperator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|pRS
operator|!=
literal|null
operator|&&
name|merge
argument_list|(
name|cRS
argument_list|,
name|pRS
argument_list|,
name|dedupCtx
operator|.
name|minReducer
argument_list|()
argument_list|)
condition|)
block|{
name|CorrelationUtilities
operator|.
name|removeReduceSinkForGroupBy
argument_list|(
name|cRS
argument_list|,
name|cGBY
argument_list|,
name|dedupCtx
operator|.
name|getPctx
argument_list|()
argument_list|,
name|dedupCtx
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|static
class|class
name|JoinReducerProc
extends|extends
name|AbsctractReducerReducerProc
block|{
comment|// pRS-pJOIN-cRS
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|ReduceSinkDeduplicateProcCtx
name|dedupCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|JoinOperator
name|pJoin
init|=
name|CorrelationUtilities
operator|.
name|findPossibleParent
argument_list|(
name|cRS
argument_list|,
name|JoinOperator
operator|.
name|class
argument_list|,
name|dedupCtx
operator|.
name|trustScript
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pJoin
operator|!=
literal|null
operator|&&
name|merge
argument_list|(
name|cRS
argument_list|,
name|pJoin
argument_list|,
name|dedupCtx
operator|.
name|minReducer
argument_list|()
argument_list|)
condition|)
block|{
name|pJoin
operator|.
name|getConf
argument_list|()
operator|.
name|setFixedAsSorted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|CorrelationUtilities
operator|.
name|replaceReduceSinkWithSelectOperator
argument_list|(
name|cRS
argument_list|,
name|dedupCtx
operator|.
name|getPctx
argument_list|()
argument_list|,
name|dedupCtx
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|// pRS-pJOIN-cRS-cGBY
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|GroupByOperator
name|cGBY
parameter_list|,
name|ReduceSinkDeduplicateProcCtx
name|dedupCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|start
init|=
name|CorrelationUtilities
operator|.
name|getStartForGroupBy
argument_list|(
name|cRS
argument_list|)
decl_stmt|;
name|JoinOperator
name|pJoin
init|=
name|CorrelationUtilities
operator|.
name|findPossibleParent
argument_list|(
name|start
argument_list|,
name|JoinOperator
operator|.
name|class
argument_list|,
name|dedupCtx
operator|.
name|trustScript
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pJoin
operator|!=
literal|null
operator|&&
name|merge
argument_list|(
name|cRS
argument_list|,
name|pJoin
argument_list|,
name|dedupCtx
operator|.
name|minReducer
argument_list|()
argument_list|)
condition|)
block|{
name|pJoin
operator|.
name|getConf
argument_list|()
operator|.
name|setFixedAsSorted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|CorrelationUtilities
operator|.
name|removeReduceSinkForGroupBy
argument_list|(
name|cRS
argument_list|,
name|cGBY
argument_list|,
name|dedupCtx
operator|.
name|getPctx
argument_list|()
argument_list|,
name|dedupCtx
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|static
class|class
name|ReducerReducerProc
extends|extends
name|AbsctractReducerReducerProc
block|{
comment|// pRS-cRS
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|ReduceSinkDeduplicateProcCtx
name|dedupCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ReduceSinkOperator
name|pRS
init|=
name|CorrelationUtilities
operator|.
name|findPossibleParent
argument_list|(
name|cRS
argument_list|,
name|ReduceSinkOperator
operator|.
name|class
argument_list|,
name|dedupCtx
operator|.
name|trustScript
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pRS
operator|!=
literal|null
operator|&&
name|merge
argument_list|(
name|cRS
argument_list|,
name|pRS
argument_list|,
name|dedupCtx
operator|.
name|minReducer
argument_list|()
argument_list|)
condition|)
block|{
name|CorrelationUtilities
operator|.
name|replaceReduceSinkWithSelectOperator
argument_list|(
name|cRS
argument_list|,
name|dedupCtx
operator|.
name|getPctx
argument_list|()
argument_list|,
name|dedupCtx
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|// pRS-cRS-cGBY
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|GroupByOperator
name|cGBY
parameter_list|,
name|ReduceSinkDeduplicateProcCtx
name|dedupCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|start
init|=
name|CorrelationUtilities
operator|.
name|getStartForGroupBy
argument_list|(
name|cRS
argument_list|)
decl_stmt|;
name|ReduceSinkOperator
name|pRS
init|=
name|CorrelationUtilities
operator|.
name|findPossibleParent
argument_list|(
name|start
argument_list|,
name|ReduceSinkOperator
operator|.
name|class
argument_list|,
name|dedupCtx
operator|.
name|trustScript
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pRS
operator|!=
literal|null
operator|&&
name|merge
argument_list|(
name|cRS
argument_list|,
name|pRS
argument_list|,
name|dedupCtx
operator|.
name|minReducer
argument_list|()
argument_list|)
condition|)
block|{
name|CorrelationUtilities
operator|.
name|removeReduceSinkForGroupBy
argument_list|(
name|cRS
argument_list|,
name|cGBY
argument_list|,
name|dedupCtx
operator|.
name|getPctx
argument_list|()
argument_list|,
name|dedupCtx
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

