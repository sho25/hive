begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|load
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveStringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Utility class to help track and return the metadata which are updated by repl load  */
end_comment

begin_class
specifier|public
class|class
name|UpdatedMetaDataTracker
block|{
comment|/**    * Utility class to store replication state of a table.    */
specifier|public
specifier|static
class|class
name|UpdateMetaData
block|{
specifier|private
name|String
name|replState
decl_stmt|;
specifier|private
name|String
name|dbName
decl_stmt|;
specifier|private
name|String
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|partitionsList
decl_stmt|;
name|UpdateMetaData
parameter_list|(
name|String
name|replState
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|)
block|{
name|this
operator|.
name|replState
operator|=
name|replState
expr_stmt|;
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|partitionsList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|partSpec
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|partitionsList
operator|.
name|add
argument_list|(
name|partSpec
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getReplState
parameter_list|()
block|{
return|return
name|replState
return|;
block|}
specifier|public
name|String
name|getDbName
parameter_list|()
block|{
return|return
name|dbName
return|;
block|}
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getPartitionsList
parameter_list|()
block|{
return|return
name|partitionsList
return|;
block|}
specifier|public
name|void
name|addPartition
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|)
block|{
name|this
operator|.
name|partitionsList
operator|.
name|add
argument_list|(
name|partSpec
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|UpdateMetaData
argument_list|>
name|updateMetaDataList
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|updateMetaDataMap
decl_stmt|;
specifier|private
name|boolean
name|needCommitTxn
init|=
literal|false
decl_stmt|;
specifier|public
name|UpdatedMetaDataTracker
parameter_list|()
block|{
name|updateMetaDataList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|updateMetaDataMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setNeedCommitTxn
parameter_list|(
name|boolean
name|needCommitTxn
parameter_list|)
block|{
name|this
operator|.
name|needCommitTxn
operator|=
name|needCommitTxn
expr_stmt|;
block|}
specifier|public
name|boolean
name|isNeedCommitTxn
parameter_list|()
block|{
return|return
name|needCommitTxn
return|;
block|}
specifier|public
name|void
name|copyUpdatedMetadata
parameter_list|(
name|UpdatedMetaDataTracker
name|other
parameter_list|)
block|{
name|int
name|size
init|=
name|updateMetaDataList
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdateMetaData
name|updateMetaDataOther
range|:
name|other
operator|.
name|updateMetaDataList
control|)
block|{
name|String
name|key
init|=
name|getKey
argument_list|(
name|normalizeIdentifier
argument_list|(
name|updateMetaDataOther
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|normalizeIdentifier
argument_list|(
name|updateMetaDataOther
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Integer
name|idx
init|=
name|updateMetaDataMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
literal|null
condition|)
block|{
name|updateMetaDataList
operator|.
name|add
argument_list|(
name|updateMetaDataOther
argument_list|)
expr_stmt|;
name|updateMetaDataMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|size
operator|++
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|updateMetaDataOther
operator|.
name|partitionsList
operator|!=
literal|null
operator|&&
name|updateMetaDataOther
operator|.
name|partitionsList
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|UpdateMetaData
name|updateMetaData
init|=
name|updateMetaDataList
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
range|:
name|updateMetaDataOther
operator|.
name|partitionsList
control|)
block|{
name|updateMetaData
operator|.
name|addPartition
argument_list|(
name|partSpec
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|needCommitTxn
operator|=
name|other
operator|.
name|needCommitTxn
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|String
name|replState
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|dbName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"db name can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|dbName
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
operator|||
operator|(
operator|(
name|tableName
operator|!=
literal|null
operator|)
operator|&&
name|tableName
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Invalid DB or table name."
operator|+
name|dbName
operator|+
literal|"::"
operator|+
operator|(
operator|(
name|tableName
operator|!=
literal|null
operator|)
condition|?
name|tableName
else|:
literal|""
operator|)
argument_list|)
throw|;
block|}
name|String
name|key
init|=
name|getKey
argument_list|(
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|Integer
name|idx
init|=
name|updateMetaDataMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
literal|null
condition|)
block|{
name|updateMetaDataList
operator|.
name|add
argument_list|(
operator|new
name|UpdateMetaData
argument_list|(
name|replState
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partSpec
argument_list|)
argument_list|)
expr_stmt|;
name|updateMetaDataMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|updateMetaDataList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateMetaDataList
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|addPartition
argument_list|(
name|partSpec
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|dbName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"db name can not be null"
argument_list|)
throw|;
block|}
name|String
name|key
init|=
name|getKey
argument_list|(
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|Integer
name|idx
init|=
name|updateMetaDataMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"add partition to metadata map failed as list is not yet set for table : "
operator|+
name|key
argument_list|)
throw|;
block|}
name|updateMetaDataList
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|addPartition
argument_list|(
name|partSpec
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|UpdateMetaData
argument_list|>
name|getUpdateMetaDataList
parameter_list|()
block|{
return|return
name|updateMetaDataList
return|;
block|}
specifier|private
name|String
name|getKey
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
return|return
name|dbName
operator|+
literal|".*"
return|;
block|}
return|return
name|dbName
operator|+
literal|"."
operator|+
name|tableName
return|;
block|}
specifier|private
name|String
name|normalizeIdentifier
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|==
literal|null
condition|?
literal|null
else|:
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

