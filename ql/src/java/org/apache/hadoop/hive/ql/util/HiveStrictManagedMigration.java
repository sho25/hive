begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|cli
operator|.
name|CommonCliOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TransactionalValidationListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|IDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
operator|.
name|switchDatabaseStatement_return
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|HiveStrictManagedMigration
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveStrictManagedMigration
operator|.
name|class
argument_list|)
decl_stmt|;
enum|enum
name|TableMigrationOption
block|{
name|NONE
block|,
comment|// Do nothing
name|VALIDATE
block|,
comment|// No migration, just validate that the tables
name|AUTOMATIC
block|,
comment|// Automatically determine if the table should be managed or external
name|EXTERNAL
block|,
comment|// Migrate tables to external tables
name|MANAGED
comment|// Migrate tables as managed transactional tables
block|}
specifier|static
class|class
name|RunOptions
block|{
name|String
name|dbRegex
decl_stmt|;
name|String
name|tableRegex
decl_stmt|;
name|String
name|oldWarehouseRoot
decl_stmt|;
name|TableMigrationOption
name|migrationOption
decl_stmt|;
name|boolean
name|shouldModifyManagedTableLocation
decl_stmt|;
name|boolean
name|shouldModifyManagedTableOwner
decl_stmt|;
name|boolean
name|shouldModifyManagedTablePermissions
decl_stmt|;
name|boolean
name|dryRun
decl_stmt|;
specifier|public
name|RunOptions
parameter_list|(
name|String
name|dbRegex
parameter_list|,
name|String
name|tableRegex
parameter_list|,
name|String
name|oldWarehouseRoot
parameter_list|,
name|TableMigrationOption
name|migrationOption
parameter_list|,
name|boolean
name|shouldModifyManagedTableLocation
parameter_list|,
name|boolean
name|shouldModifyManagedTableOwner
parameter_list|,
name|boolean
name|shouldModifyManagedTablePermissions
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|dbRegex
operator|=
name|dbRegex
expr_stmt|;
name|this
operator|.
name|tableRegex
operator|=
name|tableRegex
expr_stmt|;
name|this
operator|.
name|oldWarehouseRoot
operator|=
name|oldWarehouseRoot
expr_stmt|;
name|this
operator|.
name|migrationOption
operator|=
name|migrationOption
expr_stmt|;
name|this
operator|.
name|shouldModifyManagedTableLocation
operator|=
name|shouldModifyManagedTableLocation
expr_stmt|;
name|this
operator|.
name|shouldModifyManagedTableOwner
operator|=
name|shouldModifyManagedTableOwner
expr_stmt|;
name|this
operator|.
name|shouldModifyManagedTablePermissions
operator|=
name|shouldModifyManagedTablePermissions
expr_stmt|;
name|this
operator|.
name|dryRun
operator|=
name|dryRun
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|RunOptions
name|runOptions
decl_stmt|;
try|try
block|{
name|Options
name|opts
init|=
name|createOptions
argument_list|()
decl_stmt|;
name|CommandLine
name|cli
init|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|'h'
argument_list|)
condition|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
name|HiveStrictManagedMigration
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|opts
argument_list|)
expr_stmt|;
return|return;
block|}
name|runOptions
operator|=
name|createRunOptions
argument_list|(
name|cli
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Error processing options"
argument_list|,
name|err
argument_list|)
throw|;
block|}
name|int
name|rc
init|=
literal|0
decl_stmt|;
name|HiveStrictManagedMigration
name|migration
init|=
literal|null
decl_stmt|;
try|try
block|{
name|migration
operator|=
operator|new
name|HiveStrictManagedMigration
argument_list|(
name|runOptions
argument_list|)
expr_stmt|;
name|migration
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed with error"
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|rc
operator|=
operator|-
literal|1
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|migration
operator|!=
literal|null
condition|)
block|{
name|migration
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
comment|// TODO: Something is preventing the process from terminating after main(), adding exit() as hacky solution.
name|System
operator|.
name|exit
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
specifier|static
name|Options
name|createOptions
parameter_list|()
block|{
name|Options
name|result
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
comment|// -hiveconf x=y
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"property=value"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"hiveconf"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Use value for given property"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"dryRun"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Show what migration actions would be taken without actually running commands"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"dbRegex"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Regular expression to match database names on which this tool will be run"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'d'
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"tableRegex"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Regular expression to match table names on which this tool will be run"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'t'
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"oldWarehouseRoot"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Location of the previous warehouse root"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"migrationOption"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Table migration option (automatic|external|managed|validate|none)"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'m'
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"shouldModifyManagedTableLocation"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Whether managed tables should have their data moved from the old warehouse path to the current warehouse path"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"shouldModifyManagedTableOwner"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Whether managed tables should have their directory owners changed to the hive user"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"shouldModifyManagedTablePermissions"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Whether managed tables should have their directory permissions changed to conform to strict managed tables mode"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"modifyManagedTables"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"This setting enables the shouldModifyManagedTableLocation, shouldModifyManagedTableOwner, shouldModifyManagedTablePermissions options"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"help"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"print help message"
argument_list|)
operator|.
name|create
argument_list|(
literal|'h'
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|static
name|RunOptions
name|createRunOptions
parameter_list|(
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Process --hiveconf
comment|// Get hiveconf param values and set the System property values
name|Properties
name|confProps
init|=
name|cli
operator|.
name|getOptionProperties
argument_list|(
literal|"hiveconf"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|propKey
range|:
name|confProps
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting {}={}"
argument_list|,
name|propKey
argument_list|,
name|confProps
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|propKey
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"hive.root.logger"
argument_list|)
condition|)
block|{
comment|// TODO: logging currently goes to hive.log
name|CommonCliOptions
operator|.
name|splitAndSetLogger
argument_list|(
name|propKey
argument_list|,
name|confProps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|propKey
argument_list|,
name|confProps
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LogUtils
operator|.
name|initHiveLog4j
argument_list|()
expr_stmt|;
name|String
name|dbRegex
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"dbRegex"
argument_list|,
literal|".*"
argument_list|)
decl_stmt|;
name|String
name|tableRegex
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"tableRegex"
argument_list|,
literal|".*"
argument_list|)
decl_stmt|;
name|TableMigrationOption
name|migrationOption
init|=
name|TableMigrationOption
operator|.
name|valueOf
argument_list|(
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"migrationOption"
argument_list|,
literal|"none"
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|shouldModifyManagedTableLocation
init|=
name|cli
operator|.
name|hasOption
argument_list|(
literal|"shouldModifyManagedTableLocation"
argument_list|)
decl_stmt|;
name|boolean
name|shouldModifyManagedTableOwner
init|=
name|cli
operator|.
name|hasOption
argument_list|(
literal|"shouldModifyManagedTableOwner"
argument_list|)
decl_stmt|;
name|boolean
name|shouldModifyManagedTablePermissions
init|=
name|cli
operator|.
name|hasOption
argument_list|(
literal|"shouldModifyManagedTablePermissions"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|"modifyManagedTables"
argument_list|)
condition|)
block|{
name|shouldModifyManagedTableLocation
operator|=
literal|true
expr_stmt|;
name|shouldModifyManagedTableOwner
operator|=
literal|true
expr_stmt|;
name|shouldModifyManagedTablePermissions
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|oldWarehouseRoot
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"oldWarehouseRoot"
argument_list|)
decl_stmt|;
name|boolean
name|dryRun
init|=
name|cli
operator|.
name|hasOption
argument_list|(
literal|"dryRun"
argument_list|)
decl_stmt|;
name|RunOptions
name|runOpts
init|=
operator|new
name|RunOptions
argument_list|(
name|dbRegex
argument_list|,
name|tableRegex
argument_list|,
name|oldWarehouseRoot
argument_list|,
name|migrationOption
argument_list|,
name|shouldModifyManagedTableLocation
argument_list|,
name|shouldModifyManagedTableOwner
argument_list|,
name|shouldModifyManagedTablePermissions
argument_list|,
name|dryRun
argument_list|)
decl_stmt|;
return|return
name|runOpts
return|;
block|}
specifier|private
name|RunOptions
name|runOptions
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|HiveMetaStoreClient
name|hms
decl_stmt|;
specifier|private
name|boolean
name|failedValidationChecks
decl_stmt|;
specifier|private
name|Warehouse
name|wh
decl_stmt|;
specifier|private
name|Warehouse
name|oldWh
decl_stmt|;
specifier|private
name|String
name|ownerName
decl_stmt|;
specifier|private
name|String
name|groupName
decl_stmt|;
specifier|private
name|FsPermission
name|dirPerms
decl_stmt|;
specifier|private
name|FsPermission
name|filePerms
decl_stmt|;
name|HiveStrictManagedMigration
parameter_list|(
name|RunOptions
name|runOptions
parameter_list|)
block|{
name|this
operator|.
name|runOptions
operator|=
name|runOptions
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
expr_stmt|;
block|}
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkOldWarehouseRoot
argument_list|()
expr_stmt|;
name|checkOwnerPermsOptions
argument_list|()
expr_stmt|;
name|hms
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|//MetaException
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
name|hms
operator|.
name|getAllDatabases
argument_list|()
decl_stmt|;
comment|//TException
name|LOG
operator|.
name|info
argument_list|(
literal|"Found {} databases"
argument_list|,
name|databases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|databases
control|)
block|{
if|if
condition|(
name|dbName
operator|.
name|matches
argument_list|(
name|runOptions
operator|.
name|dbRegex
argument_list|)
condition|)
block|{
name|processDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Done processing databases."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hms
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|failedValidationChecks
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"One or more tables failed validation checks for strict managed table mode."
argument_list|)
throw|;
block|}
block|}
name|void
name|checkOldWarehouseRoot
parameter_list|()
throws|throws
name|IOException
throws|,
name|MetaException
block|{
if|if
condition|(
name|runOptions
operator|.
name|shouldModifyManagedTableLocation
condition|)
block|{
if|if
condition|(
name|runOptions
operator|.
name|oldWarehouseRoot
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"oldWarehouseRoot is not specified. Disabling shouldModifyManagedTableLocation"
argument_list|)
expr_stmt|;
name|runOptions
operator|.
name|shouldModifyManagedTableLocation
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|String
name|curWarehouseRoot
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
decl_stmt|;
if|if
condition|(
name|arePathsEqual
argument_list|(
name|conf
argument_list|,
name|runOptions
operator|.
name|oldWarehouseRoot
argument_list|,
name|curWarehouseRoot
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"oldWarehouseRoot is the same as the current warehouse root {}."
operator|+
literal|" Disabling shouldModifyManagedTableLocation"
argument_list|,
name|runOptions
operator|.
name|oldWarehouseRoot
argument_list|)
expr_stmt|;
name|runOptions
operator|.
name|shouldModifyManagedTableLocation
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|FileSystem
name|oldWhRootFs
init|=
operator|new
name|Path
argument_list|(
name|runOptions
operator|.
name|oldWarehouseRoot
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|curWhRootFs
init|=
operator|new
name|Path
argument_list|(
name|curWarehouseRoot
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FileUtils
operator|.
name|equalsFileSystem
argument_list|(
name|oldWhRootFs
argument_list|,
name|curWhRootFs
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"oldWarehouseRoot {} has a different FS than the current warehouse root {}."
operator|+
literal|" Disabling shouldModifyManagedTableLocation"
argument_list|,
name|runOptions
operator|.
name|oldWarehouseRoot
argument_list|,
name|curWarehouseRoot
argument_list|)
expr_stmt|;
name|runOptions
operator|.
name|shouldModifyManagedTableLocation
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isHdfs
argument_list|(
name|oldWhRootFs
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Warehouse is using non-HDFS FileSystem {}. Disabling shouldModifyManagedTableLocation"
argument_list|,
name|oldWhRootFs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|runOptions
operator|.
name|shouldModifyManagedTableLocation
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|runOptions
operator|.
name|shouldModifyManagedTableLocation
condition|)
block|{
name|wh
operator|=
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Configuration
name|oldWhConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|oldWhConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|,
name|runOptions
operator|.
name|oldWarehouseRoot
argument_list|)
expr_stmt|;
name|oldWh
operator|=
operator|new
name|Warehouse
argument_list|(
name|oldWhConf
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|checkOwnerPermsOptions
parameter_list|()
block|{
if|if
condition|(
name|runOptions
operator|.
name|shouldModifyManagedTableOwner
condition|)
block|{
name|ownerName
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"strict.managed.tables.migration.owner"
argument_list|,
literal|"hive"
argument_list|)
expr_stmt|;
name|groupName
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"strict.managed.tables.migration.group"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|runOptions
operator|.
name|shouldModifyManagedTablePermissions
condition|)
block|{
name|String
name|dirPermsString
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"strict.managed.tables.migration.dir.permissions"
argument_list|,
literal|"1700"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirPermsString
operator|!=
literal|null
condition|)
block|{
name|dirPerms
operator|=
operator|new
name|FsPermission
argument_list|(
name|dirPermsString
argument_list|)
expr_stmt|;
block|}
name|String
name|filePermsString
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"strict.managed.tables.migration.dir.permissions"
argument_list|,
literal|"700"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filePermsString
operator|!=
literal|null
condition|)
block|{
name|filePerms
operator|=
operator|new
name|FsPermission
argument_list|(
name|filePermsString
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|processDatabase
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing database {}"
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|Database
name|dbObj
init|=
name|hms
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|boolean
name|modifyDefaultManagedLocation
init|=
name|shouldModifyDatabaseLocation
argument_list|(
name|dbObj
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifyDefaultManagedLocation
condition|)
block|{
name|Path
name|newDefaultDbLocation
init|=
name|wh
operator|.
name|getDefaultDatabasePath
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Changing location of database {} to {}"
argument_list|,
name|dbName
argument_list|,
name|newDefaultDbLocation
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|runOptions
operator|.
name|dryRun
condition|)
block|{
name|FileSystem
name|fs
init|=
name|newDefaultDbLocation
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|mkdir
argument_list|(
name|fs
argument_list|,
name|newDefaultDbLocation
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Set appropriate owner/perms of the DB dir only, no need to recurse
name|checkAndSetFileOwnerPermissions
argument_list|(
name|fs
argument_list|,
name|newDefaultDbLocation
argument_list|,
name|ownerName
argument_list|,
name|groupName
argument_list|,
name|dirPerms
argument_list|,
literal|null
argument_list|,
name|runOptions
operator|.
name|dryRun
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|command
init|=
name|String
operator|.
name|format
argument_list|(
literal|"ALTER DATABASE %s SET LOCATION '%s'"
argument_list|,
name|dbName
argument_list|,
name|newDefaultDbLocation
argument_list|)
decl_stmt|;
name|runHiveCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
name|hms
operator|.
name|getTables
argument_list|(
name|dbName
argument_list|,
name|runOptions
operator|.
name|tableRegex
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|tableNames
control|)
block|{
comment|// If we did not change the DB location, there is no need to move the table directories.
name|processTable
argument_list|(
name|dbObj
argument_list|,
name|tableName
argument_list|,
name|modifyDefaultManagedLocation
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|processTable
parameter_list|(
name|Database
name|dbObj
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|modifyDefaultManagedLocation
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
throws|,
name|TException
block|{
name|String
name|dbName
init|=
name|dbObj
operator|.
name|getName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing table {}"
argument_list|,
name|getQualifiedName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|tableObj
init|=
name|hms
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|TableType
name|tableType
init|=
name|TableType
operator|.
name|valueOf
argument_list|(
name|tableObj
operator|.
name|getTableType
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|tableMigrated
decl_stmt|;
name|TableMigrationOption
name|migrationOption
init|=
name|runOptions
operator|.
name|migrationOption
decl_stmt|;
if|if
condition|(
name|migrationOption
operator|==
name|TableMigrationOption
operator|.
name|AUTOMATIC
condition|)
block|{
name|migrationOption
operator|=
name|determineMigrationTypeAutomatically
argument_list|(
name|tableObj
argument_list|,
name|tableType
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|migrationOption
condition|)
block|{
case|case
name|EXTERNAL
case|:
name|tableMigrated
operator|=
name|migrateToExternalTable
argument_list|(
name|tableObj
argument_list|,
name|tableType
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableMigrated
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|EXTERNAL_TABLE
expr_stmt|;
block|}
break|break;
case|case
name|MANAGED
case|:
name|tableMigrated
operator|=
name|migrateToManagedTable
argument_list|(
name|tableObj
argument_list|,
name|tableType
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableMigrated
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|MANAGED_TABLE
expr_stmt|;
block|}
break|break;
case|case
name|NONE
case|:
break|break;
case|case
name|VALIDATE
case|:
comment|// Check that the table is valid under strict managed tables mode.
name|String
name|reason
init|=
name|HiveStrictManagedUtils
operator|.
name|validateStrictManagedTable
argument_list|(
name|conf
argument_list|,
name|tableObj
argument_list|)
decl_stmt|;
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|reason
argument_list|)
expr_stmt|;
name|failedValidationChecks
operator|=
literal|true
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected table migration option "
operator|+
name|runOptions
operator|.
name|migrationOption
argument_list|)
throw|;
block|}
if|if
condition|(
name|tableType
operator|==
name|TableType
operator|.
name|MANAGED_TABLE
condition|)
block|{
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|tableObj
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifyDefaultManagedLocation
operator|&&
name|shouldModifyTableLocation
argument_list|(
name|dbObj
argument_list|,
name|tableObj
argument_list|)
condition|)
block|{
name|Path
name|newTablePath
init|=
name|wh
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|wh
operator|.
name|getDefaultDatabasePath
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|MetaStoreUtils
operator|.
name|encodeTableName
argument_list|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|moveTableData
argument_list|(
name|dbObj
argument_list|,
name|tableObj
argument_list|,
name|newTablePath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|runOptions
operator|.
name|dryRun
condition|)
block|{
comment|// File ownership/permission checks should be done on the new table path.
name|tablePath
operator|=
name|newTablePath
expr_stmt|;
block|}
block|}
if|if
condition|(
name|runOptions
operator|.
name|shouldModifyManagedTableOwner
operator|||
name|runOptions
operator|.
name|shouldModifyManagedTablePermissions
condition|)
block|{
name|FileSystem
name|fs
init|=
name|tablePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHdfs
argument_list|(
name|fs
argument_list|)
condition|)
block|{
comment|// TODO: what about partitions not in the default location?
name|checkAndSetFileOwnerPermissions
argument_list|(
name|fs
argument_list|,
name|tablePath
argument_list|,
name|ownerName
argument_list|,
name|groupName
argument_list|,
name|dirPerms
argument_list|,
name|filePerms
argument_list|,
name|runOptions
operator|.
name|dryRun
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|boolean
name|shouldModifyDatabaseLocation
parameter_list|(
name|Database
name|dbObj
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaException
block|{
name|String
name|dbName
init|=
name|dbObj
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|runOptions
operator|.
name|shouldModifyManagedTableLocation
condition|)
block|{
comment|// Check if the database location is in the default location based on the old warehouse root.
comment|// If so then change the database location to the default based on the current warehouse root.
name|String
name|dbLocation
init|=
name|dbObj
operator|.
name|getLocationUri
argument_list|()
decl_stmt|;
name|Path
name|oldDefaultDbLocation
init|=
name|oldWh
operator|.
name|getDefaultDatabasePath
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|arePathsEqual
argument_list|(
name|conf
argument_list|,
name|dbLocation
argument_list|,
name|oldDefaultDbLocation
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
name|boolean
name|shouldModifyTableLocation
parameter_list|(
name|Database
name|dbObj
parameter_list|,
name|Table
name|tableObj
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaException
block|{
comment|// Should only be managed tables passed in here.
comment|// Check if table is in the default table location based on the old warehouse root.
comment|// If so then change the table location to the default based on the current warehouse root.
comment|// The existing table directory will also be moved to the new default database directory.
name|String
name|tableLocation
init|=
name|tableObj
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|Path
name|oldDefaultTableLocation
init|=
name|oldWh
operator|.
name|getDefaultTablePath
argument_list|(
name|dbObj
argument_list|,
name|tableObj
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|arePathsEqual
argument_list|(
name|conf
argument_list|,
name|tableLocation
argument_list|,
name|oldDefaultTableLocation
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
name|boolean
name|shouldModifyPartitionLocation
parameter_list|(
name|Database
name|dbObj
parameter_list|,
name|Table
name|tableObj
parameter_list|,
name|Partition
name|partObj
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaException
block|{
name|String
name|tableName
init|=
name|tableObj
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|partLocation
init|=
name|partObj
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|Path
name|oldDefaultPartLocation
init|=
name|oldWh
operator|.
name|getDefaultPartitionPath
argument_list|(
name|dbObj
argument_list|,
name|tableName
argument_list|,
name|partSpec
argument_list|)
decl_stmt|;
return|return
name|arePathsEqual
argument_list|(
name|conf
argument_list|,
name|partLocation
argument_list|,
name|oldDefaultPartLocation
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
name|void
name|moveTableData
parameter_list|(
name|Database
name|dbObj
parameter_list|,
name|Table
name|tableObj
parameter_list|,
name|Path
name|newTablePath
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
throws|,
name|TException
block|{
name|String
name|dbName
init|=
name|tableObj
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|tableObj
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|Path
name|oldTablePath
init|=
operator|new
name|Path
argument_list|(
name|tableObj
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving location of {} from {} to {}"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|,
name|oldTablePath
argument_list|,
name|newTablePath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|runOptions
operator|.
name|dryRun
condition|)
block|{
name|FileSystem
name|fs
init|=
name|newTablePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|boolean
name|movedData
init|=
name|fs
operator|.
name|rename
argument_list|(
name|oldTablePath
argument_list|,
name|newTablePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|movedData
condition|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Unable to move data directory for table %s from %s to %s"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|,
name|oldTablePath
argument_list|,
name|newTablePath
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|runOptions
operator|.
name|dryRun
condition|)
block|{
name|String
name|command
init|=
name|String
operator|.
name|format
argument_list|(
literal|"ALTER TABLE %s SET LOCATION '%s'"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|,
name|newTablePath
argument_list|)
decl_stmt|;
name|runHiveCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isPartitionedTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
name|hms
operator|.
name|listPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
comment|// TODO: Fetch partitions in batches?
comment|// TODO: Threadpool to process partitions?
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|Partition
name|partObj
init|=
name|hms
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
name|Warehouse
operator|.
name|makeSpecFromValues
argument_list|(
name|tableObj
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partObj
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldModifyPartitionLocation
argument_list|(
name|dbObj
argument_list|,
name|tableObj
argument_list|,
name|partObj
argument_list|,
name|partSpec
argument_list|)
condition|)
block|{
comment|// Table directory (which includes the partition directory) has already been moved,
comment|// just update the partition location in the metastore.
if|if
condition|(
operator|!
name|runOptions
operator|.
name|dryRun
condition|)
block|{
name|Path
name|newPartPath
init|=
name|wh
operator|.
name|getPartitionPath
argument_list|(
name|newTablePath
argument_list|,
name|partSpec
argument_list|)
decl_stmt|;
name|String
name|command
init|=
name|String
operator|.
name|format
argument_list|(
literal|"ALTER TABLE PARTITION (%s) SET LOCATION '%s'"
argument_list|,
name|partName
argument_list|,
name|newPartPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|runHiveCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|TableMigrationOption
name|determineMigrationTypeAutomatically
parameter_list|(
name|Table
name|tableObj
parameter_list|,
name|TableType
name|tableType
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TableMigrationOption
name|result
init|=
name|TableMigrationOption
operator|.
name|NONE
decl_stmt|;
name|String
name|msg
decl_stmt|;
switch|switch
condition|(
name|tableType
condition|)
block|{
case|case
name|MANAGED_TABLE
case|:
if|if
condition|(
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
comment|// Always keep transactional tables as managed tables.
name|result
operator|=
name|TableMigrationOption
operator|.
name|MANAGED
expr_stmt|;
block|}
else|else
block|{
name|String
name|reason
init|=
name|shouldTableBeExternal
argument_list|(
name|tableObj
argument_list|)
decl_stmt|;
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Converting {} to external table. {}"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|result
operator|=
name|TableMigrationOption
operator|.
name|EXTERNAL
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|TableMigrationOption
operator|.
name|MANAGED
expr_stmt|;
block|}
block|}
break|break;
case|case
name|EXTERNAL_TABLE
case|:
name|msg
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Table %s is already an external table, not processing."
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|result
operator|=
name|TableMigrationOption
operator|.
name|NONE
expr_stmt|;
break|break;
default|default:
comment|// VIEW/MATERIALIZED_VIEW
name|msg
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Ignoring table %s because it has table type %s"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|,
name|tableType
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|result
operator|=
name|TableMigrationOption
operator|.
name|NONE
expr_stmt|;
break|break;
block|}
return|return
name|result
return|;
block|}
name|boolean
name|migrateToExternalTable
parameter_list|(
name|Table
name|tableObj
parameter_list|,
name|TableType
name|tableType
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|msg
decl_stmt|;
switch|switch
condition|(
name|tableType
condition|)
block|{
case|case
name|MANAGED_TABLE
case|:
if|if
condition|(
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
name|msg
operator|=
name|createExternalConversionExcuse
argument_list|(
name|tableObj
argument_list|,
literal|"Table is a transactional table"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Converting {} to external table ..."
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|runOptions
operator|.
name|dryRun
condition|)
block|{
name|String
name|command
init|=
name|String
operator|.
name|format
argument_list|(
literal|"ALTER TABLE %s SET TBLPROPERTIES ('EXTERNAL'='TRUE', 'external.table.purge'='true')"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|)
decl_stmt|;
name|runHiveCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|EXTERNAL_TABLE
case|:
name|msg
operator|=
name|createExternalConversionExcuse
argument_list|(
name|tableObj
argument_list|,
literal|"Table is already an external table"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// VIEW/MATERIALIZED_VIEW
name|msg
operator|=
name|createExternalConversionExcuse
argument_list|(
name|tableObj
argument_list|,
literal|"Table type "
operator|+
name|tableType
operator|+
literal|" cannot be converted"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|false
return|;
block|}
name|boolean
name|migrateToManagedTable
parameter_list|(
name|Table
name|tableObj
parameter_list|,
name|TableType
name|tableType
parameter_list|)
throws|throws
name|HiveException
throws|,
name|MetaException
block|{
name|String
name|externalFalse
init|=
literal|""
decl_stmt|;
switch|switch
condition|(
name|tableType
condition|)
block|{
case|case
name|EXTERNAL_TABLE
case|:
name|externalFalse
operator|=
literal|"'EXTERNAL'='FALSE', "
expr_stmt|;
comment|// fall through
case|case
name|MANAGED_TABLE
case|:
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isNonNativeTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
name|createManagedConversionExcuse
argument_list|(
name|tableObj
argument_list|,
literal|"Table is a non-native (StorageHandler) table"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|HiveStrictManagedUtils
operator|.
name|isAvroTableWithExternalSchema
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
name|createManagedConversionExcuse
argument_list|(
name|tableObj
argument_list|,
literal|"Table is an Avro table with an external schema url"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// List bucketed table cannot be converted to transactional
if|if
condition|(
name|HiveStrictManagedUtils
operator|.
name|isListBucketedTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
name|createManagedConversionExcuse
argument_list|(
name|tableObj
argument_list|,
literal|"Table is a list bucketed table"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// If table is already transactional, no migration needed.
if|if
condition|(
name|AcidUtils
operator|.
name|isFullAcidTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
name|createManagedConversionExcuse
argument_list|(
name|tableObj
argument_list|,
literal|"Table is already a transactional table"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ORC files can be converted to full acid transactional tables
comment|// Other formats can be converted to insert-only transactional tables
if|if
condition|(
name|TransactionalValidationListener
operator|.
name|conformToAcid
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
comment|// TODO: option to allow converting ORC file to insert-only transactional?
name|LOG
operator|.
name|info
argument_list|(
literal|"Converting {} to full transactional table"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|runOptions
operator|.
name|dryRun
condition|)
block|{
name|String
name|command
init|=
name|String
operator|.
name|format
argument_list|(
literal|"ALTER TABLE %s SET TBLPROPERTIES ('transactional'='true')"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|)
decl_stmt|;
name|runHiveCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Converting {} to insert-only transactional table"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|runOptions
operator|.
name|dryRun
condition|)
block|{
name|String
name|command
init|=
name|String
operator|.
name|format
argument_list|(
literal|"ALTER TABLE %s SET TBLPROPERTIES (%s'transactional'='true', 'transactional_properties'='insert_only')"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|,
name|externalFalse
argument_list|)
decl_stmt|;
name|runHiveCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
default|default:
comment|// VIEW/MATERIALIZED_VIEW
name|String
name|msg
init|=
name|createManagedConversionExcuse
argument_list|(
name|tableObj
argument_list|,
literal|"Table type "
operator|+
name|tableType
operator|+
literal|" cannot be converted"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|String
name|shouldTableBeExternal
parameter_list|(
name|Table
name|tableObj
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isNonNativeTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
return|return
literal|"Table is a non-native (StorageHandler) table"
return|;
block|}
if|if
condition|(
name|HiveStrictManagedUtils
operator|.
name|isAvroTableWithExternalSchema
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
return|return
literal|"Table is an Avro table with an external schema url"
return|;
block|}
comment|// List bucketed table cannot be converted to transactional
if|if
condition|(
name|HiveStrictManagedUtils
operator|.
name|isListBucketedTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
return|return
literal|"Table is a list bucketed table"
return|;
block|}
comment|// If any table/partition directory is not owned by hive,
comment|// then assume table is using storage-based auth - set external.
comment|// Transactional tables should still remain transactional,
comment|// but we should have already checked for that before this point.
if|if
condition|(
name|shouldTablePathBeExternal
argument_list|(
name|tableObj
argument_list|,
name|ownerName
argument_list|)
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"One or more table directories not owned by %s, or non-HDFS path"
argument_list|,
name|ownerName
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
name|boolean
name|shouldTablePathBeExternal
parameter_list|(
name|Table
name|tableObj
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|boolean
name|shouldBeExternal
init|=
literal|false
decl_stmt|;
name|String
name|dbName
init|=
name|tableObj
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|tableObj
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isPartitionedTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
comment|// Check the table directory.
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|tableObj
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|tablePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHdfs
argument_list|(
name|fs
argument_list|)
condition|)
block|{
name|shouldBeExternal
operator|=
name|checkDirectoryOwnership
argument_list|(
name|fs
argument_list|,
name|tablePath
argument_list|,
name|ownerName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Set non-hdfs tables to external, unless transactional (should have been checked before this).
name|shouldBeExternal
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Check ownership for all partitions
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
name|hms
operator|.
name|listPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|Partition
name|partObj
init|=
name|hms
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|)
decl_stmt|;
name|Path
name|partPath
init|=
operator|new
name|Path
argument_list|(
name|partObj
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|partPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHdfs
argument_list|(
name|fs
argument_list|)
condition|)
block|{
name|shouldBeExternal
operator|=
name|checkDirectoryOwnership
argument_list|(
name|fs
argument_list|,
name|partPath
argument_list|,
name|ownerName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shouldBeExternal
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|shouldBeExternal
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|shouldBeExternal
return|;
block|}
name|void
name|runHiveCommand
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|HiveException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running command: {}"
argument_list|,
name|command
argument_list|)
expr_stmt|;
if|if
condition|(
name|driver
operator|==
literal|null
condition|)
block|{
name|driver
operator|=
operator|new
name|MyDriver
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|driver
operator|.
name|run
argument_list|(
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
name|msg
init|=
literal|"Query returned non-zero code: "
operator|+
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|", cause: "
operator|+
name|cpr
operator|.
name|getErrorMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|driver
operator|!=
literal|null
condition|)
block|{
name|runAndLogErrors
argument_list|(
parameter_list|()
lambda|->
name|driver
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|MyDriver
block|{
name|IDriver
name|driver
decl_stmt|;
name|MyDriver
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|// TODO: Clean up SessionState/Driver/TezSession on exit
name|SessionState
operator|.
name|start
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|driver
operator|=
name|DriverFactory
operator|.
name|newDriver
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|driver
operator|!=
literal|null
condition|)
block|{
name|runAndLogErrors
argument_list|(
parameter_list|()
lambda|->
name|driver
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|runAndLogErrors
argument_list|(
parameter_list|()
lambda|->
name|driver
operator|.
name|destroy
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|=
literal|null
expr_stmt|;
name|runAndLogErrors
argument_list|(
parameter_list|()
lambda|->
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|MyDriver
name|driver
decl_stmt|;
interface|interface
name|ThrowableRunnable
block|{
name|void
name|run
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
specifier|static
name|void
name|runAndLogErrors
parameter_list|(
name|ThrowableRunnable
name|r
parameter_list|)
block|{
try|try
block|{
name|r
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error encountered"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|String
name|createExternalConversionExcuse
parameter_list|(
name|Table
name|tableObj
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"Table %s cannot be converted to an external table in "
operator|+
literal|"strict managed table mode for the following reason: %s"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|,
name|reason
argument_list|)
return|;
block|}
specifier|static
name|String
name|createManagedConversionExcuse
parameter_list|(
name|Table
name|tableObj
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"Table %s cannot be converted to a managed table in "
operator|+
literal|"strict managed table mode for the following reason: %s"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|,
name|reason
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|isPartitionedTable
parameter_list|(
name|Table
name|tableObj
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
init|=
name|tableObj
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|partKeys
operator|!=
literal|null
operator|||
name|partKeys
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|static
name|boolean
name|isHdfs
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
return|return
name|fs
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hdfs"
argument_list|)
return|;
block|}
specifier|static
name|String
name|getQualifiedName
parameter_list|(
name|Table
name|tableObj
parameter_list|)
block|{
return|return
name|getQualifiedName
argument_list|(
name|tableObj
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tableObj
operator|.
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|String
name|getQualifiedName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'`'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"`.`"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'`'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
name|boolean
name|arePathsEqual
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|path1
parameter_list|,
name|String
name|path2
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|qualified1
init|=
name|getQualifiedPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|path1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|qualified2
init|=
name|getQualifiedPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|path2
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|qualified1
operator|.
name|equals
argument_list|(
name|qualified2
argument_list|)
return|;
block|}
specifier|static
name|String
name|getQualifiedPath
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|fs
operator|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|fs
operator|.
name|makeQualified
argument_list|(
name|path
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Recursively check the file owner and permissions, setting them to the passed in values    * if the owner/perms of the file do not match.    * @param fs    * @param path    * @param userName  Owner of the file to compare/set. Null to skip this check.    * @param groupName Group of the file to compare/set. Null to skip this check.    * @param dirPerms  Permissions to compare/set, if the file is a directory. Null to skip this check.    * @param filePerms Permissions to compare/set, if the file is a file. Null to skip this check.    * @param dryRun    Dry run - check but do not actually set    * @param recurse   Whether to recursively check/set the contents of a directory    * @throws IOException    */
specifier|static
name|void
name|checkAndSetFileOwnerPermissions
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|groupName
parameter_list|,
name|FsPermission
name|dirPerms
parameter_list|,
name|FsPermission
name|filePerms
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|boolean
name|recurse
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|checkAndSetFileOwnerPermissions
argument_list|(
name|fs
argument_list|,
name|fStatus
argument_list|,
name|userName
argument_list|,
name|groupName
argument_list|,
name|dirPerms
argument_list|,
name|filePerms
argument_list|,
name|dryRun
argument_list|,
name|recurse
argument_list|)
expr_stmt|;
block|}
comment|/**    * Recursively check the file owner and permissions, setting them to the passed in values    * if the owner/perms of the file do not match.    * @param fs    * @param fStatus    * @param userName  Owner of the file to compare/set. Null to skip this check.    * @param groupName Group of the file to compare/set. Null to skip this check.    * @param dirPerms  Permissions to compare/set, if the file is a directory. Null to skip this check.    * @param filePerms Permissions to compare/set, if the file is a file. Null to skip this check.    * @param dryRun    Dry run - check but do not actually set    * @param recurse   Whether to recursively check/set the contents of a directory    * @throws IOException    */
specifier|static
name|void
name|checkAndSetFileOwnerPermissions
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|fStatus
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|groupName
parameter_list|,
name|FsPermission
name|dirPerms
parameter_list|,
name|FsPermission
name|filePerms
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|boolean
name|recurse
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|fStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|boolean
name|setOwner
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
operator|&&
operator|!
name|userName
operator|.
name|equals
argument_list|(
name|fStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
block|{
name|setOwner
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|groupName
operator|!=
literal|null
operator|&&
operator|!
name|groupName
operator|.
name|equals
argument_list|(
name|fStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
condition|)
block|{
name|setOwner
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|isDir
init|=
name|fStatus
operator|.
name|isDirectory
argument_list|()
decl_stmt|;
name|boolean
name|setPerms
init|=
literal|false
decl_stmt|;
name|FsPermission
name|perms
init|=
name|filePerms
decl_stmt|;
if|if
condition|(
name|isDir
condition|)
block|{
name|perms
operator|=
name|dirPerms
expr_stmt|;
block|}
if|if
condition|(
name|perms
operator|!=
literal|null
operator|&&
operator|!
name|perms
operator|.
name|equals
argument_list|(
name|fStatus
operator|.
name|getPermission
argument_list|()
argument_list|)
condition|)
block|{
name|setPerms
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|setOwner
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting owner/group of {} to {}/{}"
argument_list|,
name|path
argument_list|,
name|userName
argument_list|,
name|groupName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dryRun
condition|)
block|{
name|fs
operator|.
name|setOwner
argument_list|(
name|path
argument_list|,
name|userName
argument_list|,
name|groupName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|setPerms
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting perms of {} to {}"
argument_list|,
name|path
argument_list|,
name|perms
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dryRun
condition|)
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isDir
operator|&&
name|recurse
condition|)
block|{
for|for
control|(
name|FileStatus
name|subFile
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
control|)
block|{
comment|// TODO: Use threadpool for more concurrency?
comment|// TODO: check/set all files, or only directories
name|checkAndSetFileOwnerPermissions
argument_list|(
name|fs
argument_list|,
name|subFile
argument_list|,
name|userName
argument_list|,
name|groupName
argument_list|,
name|dirPerms
argument_list|,
name|filePerms
argument_list|,
name|dryRun
argument_list|,
name|recurse
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|boolean
name|checkDirectoryOwnership
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|String
name|userName
parameter_list|,
name|boolean
name|recurse
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|checkDirectoryOwnership
argument_list|(
name|fs
argument_list|,
name|fStatus
argument_list|,
name|userName
argument_list|,
name|recurse
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|checkDirectoryOwnership
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|fStatus
parameter_list|,
name|String
name|userName
parameter_list|,
name|boolean
name|recurse
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|fStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
comment|// Ignore non-directory files
name|boolean
name|isDir
init|=
name|fStatus
operator|.
name|isDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDir
condition|)
block|{
if|if
condition|(
name|userName
operator|!=
literal|null
operator|&&
operator|!
name|userName
operator|.
name|equals
argument_list|(
name|fStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|recurse
condition|)
block|{
for|for
control|(
name|FileStatus
name|subFile
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|checkDirectoryOwnership
argument_list|(
name|fs
argument_list|,
name|subFile
argument_list|,
name|userName
argument_list|,
name|recurse
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

