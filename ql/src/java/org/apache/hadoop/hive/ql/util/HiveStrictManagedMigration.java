begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ForkJoinPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|cli
operator|.
name|CommonCliOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TransactionalValidationListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TableValidWriteIds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnCommonUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|HiveStrictManagedUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|HiveStrictManagedMigration
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveStrictManagedMigration
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
enum|enum
name|TableMigrationOption
block|{
name|NONE
block|,
comment|// Do nothing
name|VALIDATE
block|,
comment|// No migration, just validate that the tables
name|AUTOMATIC
block|,
comment|// Automatically determine if the table should be managed or external
name|EXTERNAL
block|,
comment|// Migrate tables to external tables
name|MANAGED
comment|// Migrate tables as managed transactional tables
block|}
specifier|private
specifier|static
class|class
name|RunOptions
block|{
specifier|final
name|String
name|dbRegex
decl_stmt|;
specifier|final
name|String
name|tableRegex
decl_stmt|;
specifier|final
name|String
name|oldWarehouseRoot
decl_stmt|;
specifier|final
name|TableMigrationOption
name|migrationOption
decl_stmt|;
specifier|final
name|boolean
name|shouldModifyManagedTableLocation
decl_stmt|;
specifier|final
name|boolean
name|shouldModifyManagedTableOwner
decl_stmt|;
specifier|final
name|boolean
name|shouldModifyManagedTablePermissions
decl_stmt|;
specifier|final
name|boolean
name|dryRun
decl_stmt|;
specifier|final
name|TableType
name|tableType
decl_stmt|;
specifier|final
name|int
name|tablePoolSize
decl_stmt|;
name|RunOptions
parameter_list|(
name|String
name|dbRegex
parameter_list|,
name|String
name|tableRegex
parameter_list|,
name|String
name|oldWarehouseRoot
parameter_list|,
name|TableMigrationOption
name|migrationOption
parameter_list|,
name|boolean
name|shouldModifyManagedTableLocation
parameter_list|,
name|boolean
name|shouldModifyManagedTableOwner
parameter_list|,
name|boolean
name|shouldModifyManagedTablePermissions
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|TableType
name|tableType
parameter_list|,
name|int
name|tablePoolSize
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|dbRegex
operator|=
name|dbRegex
expr_stmt|;
name|this
operator|.
name|tableRegex
operator|=
name|tableRegex
expr_stmt|;
name|this
operator|.
name|oldWarehouseRoot
operator|=
name|oldWarehouseRoot
expr_stmt|;
name|this
operator|.
name|migrationOption
operator|=
name|migrationOption
expr_stmt|;
name|this
operator|.
name|shouldModifyManagedTableLocation
operator|=
name|shouldModifyManagedTableLocation
expr_stmt|;
name|this
operator|.
name|shouldModifyManagedTableOwner
operator|=
name|shouldModifyManagedTableOwner
expr_stmt|;
name|this
operator|.
name|shouldModifyManagedTablePermissions
operator|=
name|shouldModifyManagedTablePermissions
expr_stmt|;
name|this
operator|.
name|dryRun
operator|=
name|dryRun
expr_stmt|;
name|this
operator|.
name|tableType
operator|=
name|tableType
expr_stmt|;
name|this
operator|.
name|tablePoolSize
operator|=
name|tablePoolSize
expr_stmt|;
block|}
specifier|public
name|RunOptions
name|setShouldModifyManagedTableLocation
parameter_list|(
name|boolean
name|shouldModifyManagedTableLocation
parameter_list|)
block|{
return|return
operator|new
name|RunOptions
argument_list|(
name|this
operator|.
name|dbRegex
argument_list|,
name|this
operator|.
name|tableRegex
argument_list|,
name|this
operator|.
name|oldWarehouseRoot
argument_list|,
name|this
operator|.
name|migrationOption
argument_list|,
name|shouldModifyManagedTableLocation
argument_list|,
name|this
operator|.
name|shouldModifyManagedTableOwner
argument_list|,
name|this
operator|.
name|shouldModifyManagedTablePermissions
argument_list|,
name|this
operator|.
name|dryRun
argument_list|,
name|this
operator|.
name|tableType
argument_list|,
name|this
operator|.
name|tablePoolSize
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"RunOptions{"
operator|+
literal|"dbRegex='"
operator|+
name|dbRegex
operator|+
literal|'\''
operator|+
literal|", tableRegex='"
operator|+
name|tableRegex
operator|+
literal|'\''
operator|+
literal|", oldWarehouseRoot='"
operator|+
name|oldWarehouseRoot
operator|+
literal|'\''
operator|+
literal|", migrationOption="
operator|+
name|migrationOption
operator|+
literal|", shouldModifyManagedTableLocation="
operator|+
name|shouldModifyManagedTableLocation
operator|+
literal|", shouldModifyManagedTableOwner="
operator|+
name|shouldModifyManagedTableOwner
operator|+
literal|", shouldModifyManagedTablePermissions="
operator|+
name|shouldModifyManagedTablePermissions
operator|+
literal|", dryRun="
operator|+
name|dryRun
operator|+
literal|", tableType="
operator|+
name|tableType
operator|+
literal|", tablePoolSize="
operator|+
name|tablePoolSize
operator|+
literal|'}'
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|OwnerPermsOptions
block|{
specifier|final
name|String
name|ownerName
decl_stmt|;
specifier|final
name|String
name|groupName
decl_stmt|;
specifier|final
name|FsPermission
name|dirPerms
decl_stmt|;
specifier|final
name|FsPermission
name|filePerms
decl_stmt|;
name|OwnerPermsOptions
parameter_list|(
name|String
name|ownerName
parameter_list|,
name|String
name|groupName
parameter_list|,
name|FsPermission
name|dirPerms
parameter_list|,
name|FsPermission
name|filePerms
parameter_list|)
block|{
name|this
operator|.
name|ownerName
operator|=
name|ownerName
expr_stmt|;
name|this
operator|.
name|groupName
operator|=
name|groupName
expr_stmt|;
name|this
operator|.
name|dirPerms
operator|=
name|dirPerms
expr_stmt|;
name|this
operator|.
name|filePerms
operator|=
name|filePerms
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|WarehouseRootCheckResult
block|{
specifier|final
name|boolean
name|shouldModifyManagedTableLocation
decl_stmt|;
specifier|final
name|Path
name|curWhRootPath
decl_stmt|;
specifier|final
name|HadoopShims
operator|.
name|HdfsEncryptionShim
name|encryptionShim
decl_stmt|;
name|WarehouseRootCheckResult
parameter_list|(
name|boolean
name|shouldModifyManagedTableLocation
parameter_list|,
name|Path
name|curWhRootPath
parameter_list|,
name|HadoopShims
operator|.
name|HdfsEncryptionShim
name|encryptionShim
parameter_list|)
block|{
name|this
operator|.
name|shouldModifyManagedTableLocation
operator|=
name|shouldModifyManagedTableLocation
expr_stmt|;
name|this
operator|.
name|curWhRootPath
operator|=
name|curWhRootPath
expr_stmt|;
name|this
operator|.
name|encryptionShim
operator|=
name|encryptionShim
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|RunOptions
name|runOptions
decl_stmt|;
try|try
block|{
name|Options
name|opts
init|=
name|createOptions
argument_list|()
decl_stmt|;
name|CommandLine
name|cli
init|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|'h'
argument_list|)
condition|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
name|HiveStrictManagedMigration
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|opts
argument_list|)
expr_stmt|;
return|return;
block|}
name|runOptions
operator|=
name|createRunOptions
argument_list|(
name|cli
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Error processing options"
argument_list|,
name|err
argument_list|)
throw|;
block|}
name|int
name|rc
init|=
literal|0
decl_stmt|;
name|HiveStrictManagedMigration
name|migration
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HiveConf
name|conf
init|=
name|hiveConf
operator|==
literal|null
condition|?
operator|new
name|HiveConf
argument_list|()
else|:
name|hiveConf
decl_stmt|;
name|WarehouseRootCheckResult
name|warehouseRootCheckResult
init|=
name|checkOldWarehouseRoot
argument_list|(
name|runOptions
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|runOptions
operator|=
name|runOptions
operator|.
name|setShouldModifyManagedTableLocation
argument_list|(
name|warehouseRootCheckResult
operator|.
name|shouldModifyManagedTableLocation
argument_list|)
expr_stmt|;
name|boolean
name|createExternalDirsForDbs
init|=
name|checkExternalWarehouseDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|OwnerPermsOptions
name|ownerPermsOptions
init|=
name|checkOwnerPermsOptions
argument_list|(
name|runOptions
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|migration
operator|=
operator|new
name|HiveStrictManagedMigration
argument_list|(
name|conf
argument_list|,
name|runOptions
argument_list|,
name|createExternalDirsForDbs
argument_list|,
name|ownerPermsOptions
argument_list|,
name|warehouseRootCheckResult
argument_list|)
expr_stmt|;
name|migration
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed with error"
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|rc
operator|=
operator|-
literal|1
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|migration
operator|!=
literal|null
condition|)
block|{
name|migration
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
comment|// TODO: Something is preventing the process from terminating after main(), adding exit() as hacky solution.
if|if
condition|(
name|hiveConf
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|Options
name|createOptions
parameter_list|()
block|{
name|Options
name|result
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
comment|// -hiveconf x=y
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"property=value"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"hiveconf"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Use value for given property"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"dryRun"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Show what migration actions would be taken without actually running commands"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"dbRegex"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Regular expression to match database names on which this tool will be run"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'d'
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"tableRegex"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Regular expression to match table names on which this tool will be run"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'t'
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"oldWarehouseRoot"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Location of the previous warehouse root"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"migrationOption"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Table migration option (automatic|external|managed|validate|none)"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'m'
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"shouldModifyManagedTableLocation"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Whether managed tables should have their data moved from "
operator|+
literal|"the old warehouse path to the current warehouse path"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"shouldModifyManagedTableOwner"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Whether managed tables should have their directory owners changed to the hive user"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"shouldModifyManagedTablePermissions"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Whether managed tables should have their directory permissions changed to conform to "
operator|+
literal|"strict managed tables mode"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"modifyManagedTables"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"This setting enables the shouldModifyManagedTableLocation, "
operator|+
literal|"shouldModifyManagedTableOwner, shouldModifyManagedTablePermissions options"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"help"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"print help message"
argument_list|)
operator|.
name|create
argument_list|(
literal|'h'
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"tablePoolSize"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Number of threads to process tables."
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|"tn"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"tableType"
argument_list|)
operator|.
name|withDescription
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Table type to match tables on which this tool will be run. "
operator|+
literal|"Possible values: %s Default: all tables"
argument_list|,
name|Arrays
operator|.
name|stream
argument_list|(
name|TableType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Enum
operator|::
name|name
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"|"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"table type"
argument_list|)
operator|.
name|create
argument_list|(
literal|"tt"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|static
name|RunOptions
name|createRunOptions
parameter_list|(
name|CommandLine
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Process --hiveconf
comment|// Get hiveconf param values and set the System property values
name|Properties
name|confProps
init|=
name|cli
operator|.
name|getOptionProperties
argument_list|(
literal|"hiveconf"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|propKey
range|:
name|confProps
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting {}={}"
argument_list|,
name|propKey
argument_list|,
name|confProps
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|propKey
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"hive.root.logger"
argument_list|)
condition|)
block|{
comment|// TODO: logging currently goes to hive.log
name|CommonCliOptions
operator|.
name|splitAndSetLogger
argument_list|(
name|propKey
argument_list|,
name|confProps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|propKey
argument_list|,
name|confProps
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LogUtils
operator|.
name|initHiveLog4j
argument_list|()
expr_stmt|;
name|String
name|dbRegex
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"dbRegex"
argument_list|,
literal|".*"
argument_list|)
decl_stmt|;
name|String
name|tableRegex
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"tableRegex"
argument_list|,
literal|".*"
argument_list|)
decl_stmt|;
name|TableMigrationOption
name|migrationOption
init|=
name|TableMigrationOption
operator|.
name|valueOf
argument_list|(
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"migrationOption"
argument_list|,
literal|"none"
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|shouldModifyManagedTableLocation
init|=
name|cli
operator|.
name|hasOption
argument_list|(
literal|"shouldModifyManagedTableLocation"
argument_list|)
decl_stmt|;
name|boolean
name|shouldModifyManagedTableOwner
init|=
name|cli
operator|.
name|hasOption
argument_list|(
literal|"shouldModifyManagedTableOwner"
argument_list|)
decl_stmt|;
name|boolean
name|shouldModifyManagedTablePermissions
init|=
name|cli
operator|.
name|hasOption
argument_list|(
literal|"shouldModifyManagedTablePermissions"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|"modifyManagedTables"
argument_list|)
condition|)
block|{
name|shouldModifyManagedTableLocation
operator|=
literal|true
expr_stmt|;
name|shouldModifyManagedTableOwner
operator|=
literal|true
expr_stmt|;
name|shouldModifyManagedTablePermissions
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|oldWarehouseRoot
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"oldWarehouseRoot"
argument_list|)
decl_stmt|;
name|boolean
name|dryRun
init|=
name|cli
operator|.
name|hasOption
argument_list|(
literal|"dryRun"
argument_list|)
decl_stmt|;
name|String
name|tableTypeText
init|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|"tableType"
argument_list|)
decl_stmt|;
name|int
name|defaultPoolSize
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|defaultPoolSize
operator|<
literal|1
condition|)
block|{
name|defaultPoolSize
operator|=
literal|1
expr_stmt|;
block|}
name|int
name|databasePoolSize
init|=
name|getIntOptionValue
argument_list|(
name|cli
argument_list|,
literal|"databasePoolSize"
argument_list|,
name|defaultPoolSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|databasePoolSize
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Please specify a positive integer option value for databasePoolSize"
argument_list|)
throw|;
block|}
name|int
name|tablePoolSize
init|=
name|getIntOptionValue
argument_list|(
name|cli
argument_list|,
literal|"tablePoolSize"
argument_list|,
name|defaultPoolSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|tablePoolSize
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Please specify a positive integer option value for tablePoolSize"
argument_list|)
throw|;
block|}
name|RunOptions
name|runOpts
init|=
operator|new
name|RunOptions
argument_list|(
name|dbRegex
argument_list|,
name|tableRegex
argument_list|,
name|oldWarehouseRoot
argument_list|,
name|migrationOption
argument_list|,
name|shouldModifyManagedTableLocation
argument_list|,
name|shouldModifyManagedTableOwner
argument_list|,
name|shouldModifyManagedTablePermissions
argument_list|,
name|dryRun
argument_list|,
name|tableTypeText
operator|==
literal|null
condition|?
literal|null
else|:
name|TableType
operator|.
name|valueOf
argument_list|(
name|tableTypeText
argument_list|)
argument_list|,
name|tablePoolSize
argument_list|)
decl_stmt|;
return|return
name|runOpts
return|;
block|}
specifier|private
specifier|static
name|int
name|getIntOptionValue
parameter_list|(
name|CommandLine
name|commandLine
parameter_list|,
name|String
name|optionName
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
name|optionName
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|optionName
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Please specify a positive integer option value for "
operator|+
name|optionName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|defaultValue
return|;
block|}
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|RunOptions
name|runOptions
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|createExternalDirsForDbs
decl_stmt|;
specifier|private
specifier|final
name|Path
name|curWhRootPath
decl_stmt|;
specifier|private
specifier|final
name|HadoopShims
operator|.
name|HdfsEncryptionShim
name|encryptionShim
decl_stmt|;
specifier|private
specifier|final
name|String
name|ownerName
decl_stmt|;
specifier|private
specifier|final
name|String
name|groupName
decl_stmt|;
specifier|private
specifier|final
name|FsPermission
name|dirPerms
decl_stmt|;
specifier|private
specifier|final
name|FsPermission
name|filePerms
decl_stmt|;
specifier|private
name|CloseableThreadLocal
argument_list|<
name|HiveMetaStoreClient
argument_list|>
name|hms
decl_stmt|;
specifier|private
name|ThreadLocal
argument_list|<
name|Warehouse
argument_list|>
name|wh
decl_stmt|;
specifier|private
name|ThreadLocal
argument_list|<
name|Warehouse
argument_list|>
name|oldWh
decl_stmt|;
specifier|private
name|CloseableThreadLocal
argument_list|<
name|HiveUpdater
argument_list|>
name|hiveUpdater
decl_stmt|;
specifier|private
name|AtomicBoolean
name|failuresEncountered
decl_stmt|;
specifier|private
name|AtomicBoolean
name|failedValidationChecks
decl_stmt|;
name|HiveStrictManagedMigration
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|RunOptions
name|runOptions
parameter_list|,
name|boolean
name|createExternalDirsForDbs
parameter_list|,
name|OwnerPermsOptions
name|ownerPermsOptions
parameter_list|,
name|WarehouseRootCheckResult
name|warehouseRootCheckResult
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|runOptions
operator|=
name|runOptions
expr_stmt|;
name|this
operator|.
name|createExternalDirsForDbs
operator|=
name|createExternalDirsForDbs
expr_stmt|;
name|this
operator|.
name|ownerName
operator|=
name|ownerPermsOptions
operator|.
name|ownerName
expr_stmt|;
name|this
operator|.
name|groupName
operator|=
name|ownerPermsOptions
operator|.
name|groupName
expr_stmt|;
name|this
operator|.
name|dirPerms
operator|=
name|ownerPermsOptions
operator|.
name|dirPerms
expr_stmt|;
name|this
operator|.
name|filePerms
operator|=
name|ownerPermsOptions
operator|.
name|filePerms
expr_stmt|;
name|this
operator|.
name|curWhRootPath
operator|=
name|warehouseRootCheckResult
operator|.
name|curWhRootPath
expr_stmt|;
name|this
operator|.
name|encryptionShim
operator|=
name|warehouseRootCheckResult
operator|.
name|encryptionShim
expr_stmt|;
name|this
operator|.
name|hms
operator|=
operator|new
name|CloseableThreadLocal
argument_list|<>
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|HiveMetaStoreClient
name|hiveMetaStoreClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|hiveConf
operator|!=
literal|null
condition|)
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ss
operator|.
name|applyAuthorizationPolicy
argument_list|()
expr_stmt|;
block|}
return|return
name|hiveMetaStoreClient
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|,
name|runOptions
operator|.
name|tablePoolSize
argument_list|)
expr_stmt|;
name|wh
operator|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
return|return
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|runOptions
operator|.
name|shouldModifyManagedTableLocation
condition|)
block|{
name|Configuration
name|oldConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|oldConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|,
name|runOptions
operator|.
name|oldWarehouseRoot
argument_list|)
expr_stmt|;
name|oldWh
operator|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
return|return
operator|new
name|Warehouse
argument_list|(
name|oldConf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|hiveUpdater
operator|=
operator|new
name|CloseableThreadLocal
argument_list|<>
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
return|return
operator|new
name|HiveUpdater
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|,
name|runOptions
operator|.
name|tablePoolSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|failuresEncountered
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|failedValidationChecks
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting with {}"
argument_list|,
name|runOptions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
name|hms
operator|.
name|get
argument_list|()
operator|.
name|getDatabases
argument_list|(
name|runOptions
operator|.
name|dbRegex
argument_list|)
decl_stmt|;
comment|//TException
name|LOG
operator|.
name|info
argument_list|(
literal|"Found {} databases"
argument_list|,
name|databases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ForkJoinPool
name|tablePool
init|=
operator|new
name|ForkJoinPool
argument_list|(
name|runOptions
operator|.
name|tablePoolSize
argument_list|,
operator|new
name|NamedForkJoinWorkerThreadFactory
argument_list|(
literal|"Table-"
argument_list|)
argument_list|,
name|getUncaughtExceptionHandler
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|databases
operator|.
name|forEach
argument_list|(
name|dbName
lambda|->
name|processDatabase
argument_list|(
name|dbName
argument_list|,
name|tablePool
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Done processing databases."
argument_list|)
expr_stmt|;
if|if
condition|(
name|failuresEncountered
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"One or more failures encountered during processing."
argument_list|)
throw|;
block|}
if|if
condition|(
name|failedValidationChecks
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"One or more tables failed validation checks for strict managed table mode."
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Thread
operator|.
name|UncaughtExceptionHandler
name|getUncaughtExceptionHandler
parameter_list|()
block|{
return|return
parameter_list|(
name|t
parameter_list|,
name|e
parameter_list|)
lambda|->
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Thread %s exited with error"
argument_list|,
name|t
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
return|;
block|}
specifier|static
name|WarehouseRootCheckResult
name|checkOldWarehouseRoot
parameter_list|(
name|RunOptions
name|runOptions
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|shouldModifyManagedTableLocation
init|=
name|runOptions
operator|.
name|shouldModifyManagedTableLocation
decl_stmt|;
name|Path
name|curWhRootPath
init|=
literal|null
decl_stmt|;
name|HadoopShims
operator|.
name|HdfsEncryptionShim
name|encryptionShim
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|runOptions
operator|.
name|shouldModifyManagedTableLocation
condition|)
block|{
if|if
condition|(
name|runOptions
operator|.
name|oldWarehouseRoot
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"oldWarehouseRoot is not specified. Disabling shouldModifyManagedTableLocation"
argument_list|)
expr_stmt|;
name|shouldModifyManagedTableLocation
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|String
name|curWarehouseRoot
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
decl_stmt|;
if|if
condition|(
name|arePathsEqual
argument_list|(
name|conf
argument_list|,
name|runOptions
operator|.
name|oldWarehouseRoot
argument_list|,
name|curWarehouseRoot
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"oldWarehouseRoot is the same as the current warehouse root {}."
operator|+
literal|" Disabling shouldModifyManagedTableLocation"
argument_list|,
name|runOptions
operator|.
name|oldWarehouseRoot
argument_list|)
expr_stmt|;
name|shouldModifyManagedTableLocation
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|Path
name|oldWhRootPath
init|=
operator|new
name|Path
argument_list|(
name|runOptions
operator|.
name|oldWarehouseRoot
argument_list|)
decl_stmt|;
name|curWhRootPath
operator|=
operator|new
name|Path
argument_list|(
name|curWarehouseRoot
argument_list|)
expr_stmt|;
name|FileSystem
name|oldWhRootFs
init|=
name|oldWhRootPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|curWhRootFs
init|=
name|curWhRootPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|oldWhRootPath
operator|=
name|oldWhRootFs
operator|.
name|makeQualified
argument_list|(
name|oldWhRootPath
argument_list|)
expr_stmt|;
name|curWhRootPath
operator|=
name|curWhRootFs
operator|.
name|makeQualified
argument_list|(
name|curWhRootPath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|FileUtils
operator|.
name|equalsFileSystem
argument_list|(
name|oldWhRootFs
argument_list|,
name|curWhRootFs
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"oldWarehouseRoot {} has a different FS than the current warehouse root {}."
operator|+
literal|" Disabling shouldModifyManagedTableLocation"
argument_list|,
name|runOptions
operator|.
name|oldWarehouseRoot
argument_list|,
name|curWarehouseRoot
argument_list|)
expr_stmt|;
name|shouldModifyManagedTableLocation
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isHdfs
argument_list|(
name|oldWhRootFs
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Warehouse is using non-HDFS FileSystem {}. Disabling shouldModifyManagedTableLocation"
argument_list|,
name|oldWhRootFs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|shouldModifyManagedTableLocation
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|encryptionShim
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|createHdfsEncryptionShim
argument_list|(
name|oldWhRootFs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasEquivalentEncryption
argument_list|(
name|encryptionShim
argument_list|,
name|oldWhRootPath
argument_list|,
name|curWhRootPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"oldWarehouseRoot {} and current warehouse root {} have different encryption zones."
operator|+
literal|" Disabling shouldModifyManagedTableLocation"
argument_list|,
name|oldWhRootPath
argument_list|,
name|curWhRootPath
argument_list|)
expr_stmt|;
name|shouldModifyManagedTableLocation
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
operator|new
name|WarehouseRootCheckResult
argument_list|(
name|shouldModifyManagedTableLocation
argument_list|,
name|curWhRootPath
argument_list|,
name|encryptionShim
argument_list|)
return|;
block|}
specifier|static
name|OwnerPermsOptions
name|checkOwnerPermsOptions
parameter_list|(
name|RunOptions
name|runOptions
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
block|{
name|String
name|ownerName
init|=
literal|null
decl_stmt|;
name|String
name|groupName
init|=
literal|null
decl_stmt|;
name|FsPermission
name|dirPerms
init|=
literal|null
decl_stmt|;
name|FsPermission
name|filePerms
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|runOptions
operator|.
name|shouldModifyManagedTableOwner
condition|)
block|{
name|ownerName
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"strict.managed.tables.migration.owner"
argument_list|,
literal|"hive"
argument_list|)
expr_stmt|;
name|groupName
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"strict.managed.tables.migration.group"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|runOptions
operator|.
name|shouldModifyManagedTablePermissions
condition|)
block|{
name|String
name|dirPermsString
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"strict.managed.tables.migration.dir.permissions"
argument_list|,
literal|"700"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirPermsString
operator|!=
literal|null
condition|)
block|{
name|dirPerms
operator|=
operator|new
name|FsPermission
argument_list|(
name|dirPermsString
argument_list|)
expr_stmt|;
block|}
name|String
name|filePermsString
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"strict.managed.tables.migration.file.permissions"
argument_list|,
literal|"700"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filePermsString
operator|!=
literal|null
condition|)
block|{
name|filePerms
operator|=
operator|new
name|FsPermission
argument_list|(
name|filePermsString
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|OwnerPermsOptions
argument_list|(
name|ownerName
argument_list|,
name|groupName
argument_list|,
name|dirPerms
argument_list|,
name|filePerms
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|checkExternalWarehouseDir
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|String
name|externalWarehouseDir
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_METASTORE_WAREHOUSE_EXTERNAL
argument_list|)
decl_stmt|;
return|return
name|externalWarehouseDir
operator|!=
literal|null
operator|&&
operator|!
name|externalWarehouseDir
operator|.
name|isEmpty
argument_list|()
return|;
block|}
name|void
name|processDatabase
parameter_list|(
name|String
name|dbName
parameter_list|,
name|ForkJoinPool
name|tablePool
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing database {}"
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|Database
name|dbObj
init|=
name|hms
operator|.
name|get
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|boolean
name|modifyDefaultManagedLocation
init|=
name|shouldModifyDatabaseLocation
argument_list|(
name|dbObj
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifyDefaultManagedLocation
condition|)
block|{
name|Path
name|newDefaultDbLocation
init|=
name|wh
operator|.
name|get
argument_list|()
operator|.
name|getDefaultDatabasePath
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Changing location of database {} to {}"
argument_list|,
name|dbName
argument_list|,
name|newDefaultDbLocation
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|runOptions
operator|.
name|dryRun
condition|)
block|{
name|FileSystem
name|fs
init|=
name|newDefaultDbLocation
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|mkdir
argument_list|(
name|fs
argument_list|,
name|newDefaultDbLocation
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Set appropriate owner/perms of the DB dir only, no need to recurse
name|checkAndSetFileOwnerPermissions
argument_list|(
name|fs
argument_list|,
name|newDefaultDbLocation
argument_list|,
name|ownerName
argument_list|,
name|groupName
argument_list|,
name|dirPerms
argument_list|,
literal|null
argument_list|,
name|runOptions
operator|.
name|dryRun
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|createExternalDirsForDbs
condition|)
block|{
name|createExternalDbDir
argument_list|(
name|dbObj
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
decl_stmt|;
if|if
condition|(
name|runOptions
operator|.
name|tableType
operator|==
literal|null
condition|)
block|{
name|tableNames
operator|=
name|hms
operator|.
name|get
argument_list|()
operator|.
name|getTables
argument_list|(
name|dbName
argument_list|,
name|runOptions
operator|.
name|tableRegex
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"found {} tables in {}"
argument_list|,
name|tableNames
operator|.
name|size
argument_list|()
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tableNames
operator|=
name|hms
operator|.
name|get
argument_list|()
operator|.
name|getTables
argument_list|(
name|dbName
argument_list|,
name|runOptions
operator|.
name|tableRegex
argument_list|,
name|runOptions
operator|.
name|tableType
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"found {} {}s in {}"
argument_list|,
name|tableNames
operator|.
name|size
argument_list|()
argument_list|,
name|runOptions
operator|.
name|tableType
operator|.
name|name
argument_list|()
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
block|}
name|boolean
name|errorsInThisDb
init|=
operator|!
name|tablePool
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
name|tableNames
operator|.
name|parallelStream
argument_list|()
operator|.
name|map
argument_list|(
name|tableName
lambda|->
name|processTable
argument_list|(
name|dbObj
argument_list|,
name|tableName
argument_list|,
name|modifyDefaultManagedLocation
argument_list|)
argument_list|)
operator|.
name|reduce
argument_list|(
literal|true
argument_list|,
parameter_list|(
name|aBoolean
parameter_list|,
name|aBoolean2
parameter_list|)
lambda|->
name|aBoolean
operator|&&
name|aBoolean2
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|errorsInThisDb
condition|)
block|{
name|failuresEncountered
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Finally update the DB location. This would prevent subsequent runs of the migration from processing this DB.
if|if
condition|(
name|modifyDefaultManagedLocation
condition|)
block|{
if|if
condition|(
name|errorsInThisDb
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Not updating database location for {} since an error was encountered. "
operator|+
literal|"The migration must be run again for this database."
argument_list|,
name|dbObj
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|runOptions
operator|.
name|dryRun
condition|)
block|{
name|Path
name|newDefaultDbLocation
init|=
name|wh
operator|.
name|get
argument_list|()
operator|.
name|getDefaultDatabasePath
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
comment|// dbObj after this call would have the new DB location.
comment|// Keep that in mind if anything below this requires the old DB path.
name|hiveUpdater
operator|.
name|get
argument_list|()
operator|.
name|updateDbLocation
argument_list|(
name|dbObj
argument_list|,
name|newDefaultDbLocation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cancel processing "
operator|+
name|dbName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
decl||
name|IOException
decl||
name|HiveException
decl||
name|ExecutionException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error processing database "
operator|+
name|dbName
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|failuresEncountered
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|migrateTable
parameter_list|(
name|Table
name|tableObj
parameter_list|,
name|TableType
name|tableType
parameter_list|,
name|TableMigrationOption
name|migrationOption
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|HiveUpdater
name|hiveUpdater
parameter_list|,
name|IMetaStoreClient
name|hms
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
throws|,
name|TException
block|{
switch|switch
condition|(
name|migrationOption
condition|)
block|{
case|case
name|EXTERNAL
case|:
name|migrateToExternalTable
argument_list|(
name|tableObj
argument_list|,
name|tableType
argument_list|,
name|dryRun
argument_list|,
name|hiveUpdater
argument_list|)
expr_stmt|;
break|break;
case|case
name|MANAGED
case|:
name|migrateToManagedTable
argument_list|(
name|tableObj
argument_list|,
name|tableType
argument_list|,
name|dryRun
argument_list|,
name|hiveUpdater
argument_list|,
name|hms
argument_list|,
name|conf
argument_list|)
expr_stmt|;
break|break;
case|case
name|NONE
case|:
break|break;
case|case
name|VALIDATE
case|:
comment|// Check that the table is valid under strict managed tables mode.
name|String
name|reason
init|=
name|HiveStrictManagedUtils
operator|.
name|validateStrictManagedTable
argument_list|(
name|conf
argument_list|,
name|tableObj
argument_list|)
decl_stmt|;
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|reason
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected table migration option "
operator|+
name|migrationOption
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
name|boolean
name|processTable
parameter_list|(
name|Database
name|dbObj
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|modifyDefaultManagedLocation
parameter_list|)
block|{
try|try
block|{
name|String
name|dbName
init|=
name|dbObj
operator|.
name|getName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing table {}"
argument_list|,
name|getQualifiedName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|tableObj
init|=
name|hms
operator|.
name|get
argument_list|()
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|TableType
name|tableType
init|=
name|TableType
operator|.
name|valueOf
argument_list|(
name|tableObj
operator|.
name|getTableType
argument_list|()
argument_list|)
decl_stmt|;
name|TableMigrationOption
name|migrationOption
init|=
name|runOptions
operator|.
name|migrationOption
decl_stmt|;
if|if
condition|(
name|migrationOption
operator|==
name|TableMigrationOption
operator|.
name|AUTOMATIC
condition|)
block|{
name|migrationOption
operator|=
name|determineMigrationTypeAutomatically
argument_list|(
name|tableObj
argument_list|,
name|tableType
argument_list|,
name|ownerName
argument_list|,
name|conf
argument_list|,
name|hms
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|boolean
name|failedValidationCheck
init|=
name|migrateTable
argument_list|(
name|tableObj
argument_list|,
name|tableType
argument_list|,
name|migrationOption
argument_list|,
name|runOptions
operator|.
name|dryRun
argument_list|,
name|hiveUpdater
operator|.
name|get
argument_list|()
argument_list|,
name|hms
operator|.
name|get
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|failedValidationCheck
condition|)
block|{
name|this
operator|.
name|failedValidationChecks
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|TableType
operator|.
name|valueOf
argument_list|(
name|tableObj
operator|.
name|getTableType
argument_list|()
argument_list|)
operator|==
name|TableType
operator|.
name|MANAGED_TABLE
condition|)
block|{
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|tableObj
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifyDefaultManagedLocation
operator|&&
name|shouldModifyTableLocation
argument_list|(
name|dbObj
argument_list|,
name|tableObj
argument_list|)
condition|)
block|{
name|Path
name|newTablePath
init|=
name|wh
operator|.
name|get
argument_list|()
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|wh
operator|.
name|get
argument_list|()
operator|.
name|getDefaultDatabasePath
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|MetaStoreUtils
operator|.
name|encodeTableName
argument_list|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|moveTableData
argument_list|(
name|dbObj
argument_list|,
name|tableObj
argument_list|,
name|newTablePath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|runOptions
operator|.
name|dryRun
condition|)
block|{
comment|// File ownership/permission checks should be done on the new table path.
name|tablePath
operator|=
name|newTablePath
expr_stmt|;
block|}
block|}
if|if
condition|(
name|runOptions
operator|.
name|shouldModifyManagedTableOwner
operator|||
name|runOptions
operator|.
name|shouldModifyManagedTablePermissions
condition|)
block|{
name|FileSystem
name|fs
init|=
name|tablePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHdfs
argument_list|(
name|fs
argument_list|)
condition|)
block|{
comment|// TODO: what about partitions not in the default location?
name|checkAndSetFileOwnerPermissions
argument_list|(
name|fs
argument_list|,
name|tablePath
argument_list|,
name|ownerName
argument_list|,
name|groupName
argument_list|,
name|dirPerms
argument_list|,
name|filePerms
argument_list|,
name|runOptions
operator|.
name|dryRun
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error processing table "
operator|+
name|getQualifiedName
argument_list|(
name|dbObj
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
name|boolean
name|shouldModifyDatabaseLocation
parameter_list|(
name|Database
name|dbObj
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaException
block|{
name|String
name|dbName
init|=
name|dbObj
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|runOptions
operator|.
name|shouldModifyManagedTableLocation
condition|)
block|{
comment|// Check if the database location is in the default location based on the old warehouse root.
comment|// If so then change the database location to the default based on the current warehouse root.
name|String
name|dbLocation
init|=
name|dbObj
operator|.
name|getLocationUri
argument_list|()
decl_stmt|;
name|Path
name|oldDefaultDbLocation
init|=
name|oldWh
operator|.
name|get
argument_list|()
operator|.
name|getDefaultDatabasePath
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|arePathsEqual
argument_list|(
name|conf
argument_list|,
name|dbLocation
argument_list|,
name|oldDefaultDbLocation
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|hasEquivalentEncryption
argument_list|(
name|encryptionShim
argument_list|,
name|oldDefaultDbLocation
argument_list|,
name|curWhRootPath
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{} and {} are on different encryption zones. Will not change database location for {}"
argument_list|,
name|oldDefaultDbLocation
argument_list|,
name|curWhRootPath
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
name|boolean
name|shouldModifyTableLocation
parameter_list|(
name|Database
name|dbObj
parameter_list|,
name|Table
name|tableObj
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaException
block|{
comment|// Should only be managed tables passed in here.
comment|// Check if table is in the default table location based on the old warehouse root.
comment|// If so then change the table location to the default based on the current warehouse root.
comment|// The existing table directory will also be moved to the new default database directory.
name|String
name|tableLocation
init|=
name|tableObj
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|Path
name|oldDefaultTableLocation
init|=
name|oldWh
operator|.
name|get
argument_list|()
operator|.
name|getDefaultTablePath
argument_list|(
name|dbObj
argument_list|,
name|tableObj
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|arePathsEqual
argument_list|(
name|conf
argument_list|,
name|tableLocation
argument_list|,
name|oldDefaultTableLocation
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|hasEquivalentEncryption
argument_list|(
name|encryptionShim
argument_list|,
name|oldDefaultTableLocation
argument_list|,
name|curWhRootPath
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{} and {} are on different encryption zones. Will not change table location for {}"
argument_list|,
name|oldDefaultTableLocation
argument_list|,
name|curWhRootPath
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
name|boolean
name|shouldModifyPartitionLocation
parameter_list|(
name|Database
name|dbObj
parameter_list|,
name|Table
name|tableObj
parameter_list|,
name|Partition
name|partObj
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaException
block|{
name|String
name|tableName
init|=
name|tableObj
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|partLocation
init|=
name|partObj
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|Path
name|oldDefaultPartLocation
init|=
name|oldWh
operator|.
name|get
argument_list|()
operator|.
name|getDefaultPartitionPath
argument_list|(
name|dbObj
argument_list|,
name|tableObj
argument_list|,
name|partSpec
argument_list|)
decl_stmt|;
if|if
condition|(
name|arePathsEqual
argument_list|(
name|conf
argument_list|,
name|partLocation
argument_list|,
name|oldDefaultPartLocation
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|hasEquivalentEncryption
argument_list|(
name|encryptionShim
argument_list|,
name|oldDefaultPartLocation
argument_list|,
name|curWhRootPath
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{} and {} are on different encryption zones. Will not change partition location"
argument_list|,
name|oldDefaultPartLocation
argument_list|,
name|curWhRootPath
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
name|void
name|createExternalDbDir
parameter_list|(
name|Database
name|dbObj
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaException
block|{
name|Path
name|externalTableDbPath
init|=
name|wh
operator|.
name|get
argument_list|()
operator|.
name|getDefaultExternalDatabasePath
argument_list|(
name|dbObj
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|externalTableDbPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|externalTableDbPath
argument_list|)
condition|)
block|{
name|String
name|dbOwner
init|=
name|ownerName
decl_stmt|;
name|String
name|dbGroup
init|=
literal|null
decl_stmt|;
name|String
name|dbOwnerName
init|=
name|dbObj
operator|.
name|getOwnerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbOwnerName
operator|!=
literal|null
operator|&&
operator|!
name|dbOwnerName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|dbObj
operator|.
name|getOwnerType
argument_list|()
condition|)
block|{
case|case
name|USER
case|:
name|dbOwner
operator|=
name|dbOwnerName
expr_stmt|;
break|break;
case|case
name|ROLE
case|:
break|break;
case|case
name|GROUP
case|:
name|dbGroup
operator|=
name|dbOwnerName
expr_stmt|;
break|break;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating external table directory for database {} at {} with ownership {}/{}"
argument_list|,
name|dbObj
operator|.
name|getName
argument_list|()
argument_list|,
name|externalTableDbPath
argument_list|,
name|dbOwner
argument_list|,
name|dbGroup
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|runOptions
operator|.
name|dryRun
condition|)
block|{
comment|// Just rely on parent perms/umask for permissions.
name|fs
operator|.
name|mkdirs
argument_list|(
name|externalTableDbPath
argument_list|)
expr_stmt|;
name|checkAndSetFileOwnerPermissions
argument_list|(
name|fs
argument_list|,
name|externalTableDbPath
argument_list|,
name|dbOwner
argument_list|,
name|dbGroup
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|runOptions
operator|.
name|dryRun
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not creating external table directory for database {} - {} already exists."
argument_list|,
name|dbObj
operator|.
name|getName
argument_list|()
argument_list|,
name|externalTableDbPath
argument_list|)
expr_stmt|;
comment|// Leave the directory owner/perms as-is if the path already exists.
block|}
block|}
name|void
name|moveTableData
parameter_list|(
name|Database
name|dbObj
parameter_list|,
name|Table
name|tableObj
parameter_list|,
name|Path
name|newTablePath
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
throws|,
name|TException
block|{
name|String
name|dbName
init|=
name|tableObj
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|tableObj
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|Path
name|oldTablePath
init|=
operator|new
name|Path
argument_list|(
name|tableObj
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving location of {} from {} to {}"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|,
name|oldTablePath
argument_list|,
name|newTablePath
argument_list|)
expr_stmt|;
comment|// Move table directory.
if|if
condition|(
operator|!
name|runOptions
operator|.
name|dryRun
condition|)
block|{
name|FileSystem
name|fs
init|=
name|newTablePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|oldTablePath
argument_list|)
condition|)
block|{
name|boolean
name|movedData
init|=
name|fs
operator|.
name|rename
argument_list|(
name|oldTablePath
argument_list|,
name|newTablePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|movedData
condition|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Unable to move data directory for table %s from %s to %s"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|,
name|oldTablePath
argument_list|,
name|newTablePath
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
comment|// An error occurring between here and before updating the table's location in the metastore
comment|// may potentially cause the data to reside in the new location, while the
comment|// table/partitions point to the old paths.
comment|// The migration would be _REQUIRED_ to run again (and pass) for the data and table/partition
comment|// locations to be in sync.
if|if
condition|(
name|isPartitionedTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
name|hms
operator|.
name|get
argument_list|()
operator|.
name|listPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
comment|// TODO: Fetch partitions in batches?
comment|// TODO: Threadpool to process partitions?
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|Partition
name|partObj
init|=
name|hms
operator|.
name|get
argument_list|()
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
name|Warehouse
operator|.
name|makeSpecFromValues
argument_list|(
name|tableObj
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partObj
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldModifyPartitionLocation
argument_list|(
name|dbObj
argument_list|,
name|tableObj
argument_list|,
name|partObj
argument_list|,
name|partSpec
argument_list|)
condition|)
block|{
comment|// Table directory (which includes the partition directory) has already been moved,
comment|// just update the partition location in the metastore.
if|if
condition|(
operator|!
name|runOptions
operator|.
name|dryRun
condition|)
block|{
name|Path
name|newPartPath
init|=
name|wh
operator|.
name|get
argument_list|()
operator|.
name|getPartitionPath
argument_list|(
name|newTablePath
argument_list|,
name|partSpec
argument_list|)
decl_stmt|;
name|hiveUpdater
operator|.
name|get
argument_list|()
operator|.
name|updatePartitionLocation
argument_list|(
name|dbName
argument_list|,
name|tableObj
argument_list|,
name|partName
argument_list|,
name|partObj
argument_list|,
name|newPartPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Finally update the table location. This would prevent this tool from processing this table again
comment|// on subsequent runs of the migration.
if|if
condition|(
operator|!
name|runOptions
operator|.
name|dryRun
condition|)
block|{
name|hiveUpdater
operator|.
name|get
argument_list|()
operator|.
name|updateTableLocation
argument_list|(
name|tableObj
argument_list|,
name|newTablePath
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|renameFilesToConformToAcid
parameter_list|(
name|Table
name|tableObj
parameter_list|,
name|IMetaStoreClient
name|hms
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|IOException
throws|,
name|TException
block|{
if|if
condition|(
name|isPartitionedTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
name|String
name|dbName
init|=
name|tableObj
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|tableObj
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
name|hms
operator|.
name|listPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|Partition
name|partObj
init|=
name|hms
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|)
decl_stmt|;
name|Path
name|partPath
init|=
operator|new
name|Path
argument_list|(
name|partObj
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|partPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|partPath
argument_list|)
condition|)
block|{
name|UpgradeTool
operator|.
name|handleRenameFiles
argument_list|(
name|tableObj
argument_list|,
name|partPath
argument_list|,
operator|!
name|dryRun
argument_list|,
name|conf
argument_list|,
name|tableObj
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketColsSize
argument_list|()
operator|>
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|tableObj
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|tablePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|tablePath
argument_list|)
condition|)
block|{
name|UpgradeTool
operator|.
name|handleRenameFiles
argument_list|(
name|tableObj
argument_list|,
name|tablePath
argument_list|,
operator|!
name|dryRun
argument_list|,
name|conf
argument_list|,
name|tableObj
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketColsSize
argument_list|()
operator|>
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|TableMigrationOption
name|determineMigrationTypeAutomatically
parameter_list|(
name|Table
name|tableObj
parameter_list|,
name|TableType
name|tableType
parameter_list|,
name|String
name|ownerName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|IMetaStoreClient
name|hms
parameter_list|,
name|Boolean
name|isPathOwnedByHive
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TableMigrationOption
name|result
init|=
name|TableMigrationOption
operator|.
name|NONE
decl_stmt|;
name|String
name|msg
decl_stmt|;
switch|switch
condition|(
name|tableType
condition|)
block|{
case|case
name|MANAGED_TABLE
case|:
if|if
condition|(
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
comment|// Always keep transactional tables as managed tables.
name|result
operator|=
name|TableMigrationOption
operator|.
name|MANAGED
expr_stmt|;
block|}
else|else
block|{
name|String
name|reason
init|=
name|shouldTableBeExternal
argument_list|(
name|tableObj
argument_list|,
name|ownerName
argument_list|,
name|conf
argument_list|,
name|hms
argument_list|,
name|isPathOwnedByHive
argument_list|)
decl_stmt|;
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Converting {} to external table. {}"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|result
operator|=
name|TableMigrationOption
operator|.
name|EXTERNAL
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|TableMigrationOption
operator|.
name|MANAGED
expr_stmt|;
block|}
block|}
break|break;
case|case
name|EXTERNAL_TABLE
case|:
name|msg
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Table %s is already an external table, not processing."
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|result
operator|=
name|TableMigrationOption
operator|.
name|NONE
expr_stmt|;
break|break;
default|default:
comment|// VIEW/MATERIALIZED_VIEW
name|msg
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Ignoring table %s because it has table type %s"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|,
name|tableType
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|result
operator|=
name|TableMigrationOption
operator|.
name|NONE
expr_stmt|;
break|break;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|convertToExternalTableProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|convertToAcidTableProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|convertToMMTableProps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|convertToExternalTableProps
operator|.
name|put
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|convertToExternalTableProps
operator|.
name|put
argument_list|(
literal|"external.table.purge"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|convertToAcidTableProps
operator|.
name|put
argument_list|(
literal|"transactional"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|convertToMMTableProps
operator|.
name|put
argument_list|(
literal|"transactional"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|convertToMMTableProps
operator|.
name|put
argument_list|(
literal|"transactional_properties"
argument_list|,
literal|"insert_only"
argument_list|)
expr_stmt|;
block|}
specifier|static
name|boolean
name|migrateToExternalTable
parameter_list|(
name|Table
name|tableObj
parameter_list|,
name|TableType
name|tableType
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|HiveUpdater
name|hiveUpdater
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|msg
decl_stmt|;
switch|switch
condition|(
name|tableType
condition|)
block|{
case|case
name|MANAGED_TABLE
case|:
if|if
condition|(
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
name|msg
operator|=
name|createExternalConversionExcuse
argument_list|(
name|tableObj
argument_list|,
literal|"Table is a transactional table"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Converting {} to external table ..."
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dryRun
condition|)
block|{
name|tableObj
operator|.
name|setTableType
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hiveUpdater
operator|.
name|updateTableProperties
argument_list|(
name|tableObj
argument_list|,
name|convertToExternalTableProps
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|EXTERNAL_TABLE
case|:
name|msg
operator|=
name|createExternalConversionExcuse
argument_list|(
name|tableObj
argument_list|,
literal|"Table is already an external table"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// VIEW/MATERIALIZED_VIEW
name|msg
operator|=
name|createExternalConversionExcuse
argument_list|(
name|tableObj
argument_list|,
literal|"Table type "
operator|+
name|tableType
operator|+
literal|" cannot be converted"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|false
return|;
block|}
specifier|static
name|boolean
name|canTableBeFullAcid
parameter_list|(
name|Table
name|tableObj
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Table must be acid-compatible table format, and no sorting columns.
return|return
name|TransactionalValidationListener
operator|.
name|conformToAcid
argument_list|(
name|tableObj
argument_list|)
operator|&&
operator|(
name|tableObj
operator|.
name|getSd
argument_list|()
operator|.
name|getSortColsSize
argument_list|()
operator|<=
literal|0
operator|)
return|;
block|}
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getTablePropsForConversionToTransactional
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|,
name|boolean
name|convertFromExternal
parameter_list|)
block|{
if|if
condition|(
name|convertFromExternal
condition|)
block|{
comment|// Copy the properties to a new map so we can add EXTERNAL=FALSE
name|props
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"FALSE"
argument_list|)
expr_stmt|;
block|}
return|return
name|props
return|;
block|}
specifier|static
name|boolean
name|migrateToManagedTable
parameter_list|(
name|Table
name|tableObj
parameter_list|,
name|TableType
name|tableType
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|HiveUpdater
name|hiveUpdater
parameter_list|,
name|IMetaStoreClient
name|hms
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|boolean
name|convertFromExternal
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|tableType
condition|)
block|{
case|case
name|EXTERNAL_TABLE
case|:
name|convertFromExternal
operator|=
literal|true
expr_stmt|;
comment|// fall through
case|case
name|MANAGED_TABLE
case|:
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isNonNativeTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
name|createManagedConversionExcuse
argument_list|(
name|tableObj
argument_list|,
literal|"Table is a non-native (StorageHandler) table"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|HiveStrictManagedUtils
operator|.
name|isAvroTableWithExternalSchema
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
name|createManagedConversionExcuse
argument_list|(
name|tableObj
argument_list|,
literal|"Table is an Avro table with an external schema url"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// List bucketed table cannot be converted to transactional
if|if
condition|(
name|HiveStrictManagedUtils
operator|.
name|isListBucketedTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
name|createManagedConversionExcuse
argument_list|(
name|tableObj
argument_list|,
literal|"Table is a list bucketed table"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// If table is already transactional, no migration needed.
if|if
condition|(
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
name|createManagedConversionExcuse
argument_list|(
name|tableObj
argument_list|,
literal|"Table is already a transactional table"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ORC files can be converted to full acid transactional tables
comment|// Other formats can be converted to insert-only transactional tables
if|if
condition|(
name|canTableBeFullAcid
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
comment|// TODO: option to allow converting ORC file to insert-only transactional?
name|LOG
operator|.
name|info
argument_list|(
literal|"Converting {} to full transactional table"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hiveUpdater
operator|.
name|doFileRename
condition|)
block|{
name|renameFilesToConformToAcid
argument_list|(
name|tableObj
argument_list|,
name|hms
argument_list|,
name|conf
argument_list|,
name|dryRun
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dryRun
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|getTablePropsForConversionToTransactional
argument_list|(
name|convertToAcidTableProps
argument_list|,
name|convertFromExternal
argument_list|)
decl_stmt|;
name|hiveUpdater
operator|.
name|updateTableProperties
argument_list|(
name|tableObj
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Converting {} to insert-only transactional table"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dryRun
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|getTablePropsForConversionToTransactional
argument_list|(
name|convertToMMTableProps
argument_list|,
name|convertFromExternal
argument_list|)
decl_stmt|;
name|hiveUpdater
operator|.
name|updateTableProperties
argument_list|(
name|tableObj
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
default|default:
comment|// VIEW/MATERIALIZED_VIEW
name|String
name|msg
init|=
name|createManagedConversionExcuse
argument_list|(
name|tableObj
argument_list|,
literal|"Table type "
operator|+
name|tableType
operator|+
literal|" cannot be converted"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|static
name|String
name|shouldTableBeExternal
parameter_list|(
name|Table
name|tableObj
parameter_list|,
name|String
name|ownerName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|IMetaStoreClient
name|hms
parameter_list|,
name|Boolean
name|isPathOwnedByHive
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isNonNativeTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
return|return
literal|"Table is a non-native (StorageHandler) table"
return|;
block|}
if|if
condition|(
name|HiveStrictManagedUtils
operator|.
name|isAvroTableWithExternalSchema
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
return|return
literal|"Table is an Avro table with an external schema url"
return|;
block|}
comment|// List bucketed table cannot be converted to transactional
if|if
condition|(
name|HiveStrictManagedUtils
operator|.
name|isListBucketedTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
return|return
literal|"Table is a list bucketed table"
return|;
block|}
comment|// If any table/partition directory is not owned by hive,
comment|// then assume table is using storage-based auth - set external.
comment|// Transactional tables should still remain transactional,
comment|// but we should have already checked for that before this point.
if|if
condition|(
name|isPathOwnedByHive
operator|!=
literal|null
condition|)
block|{
comment|// for replication flow, the path ownership must be verified at source cluster itself.
return|return
name|isPathOwnedByHive
condition|?
literal|null
else|:
name|String
operator|.
name|format
argument_list|(
literal|"One or more table directories is not owned by hive or non-HDFS path at source cluster"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|shouldTablePathBeExternal
argument_list|(
name|tableObj
argument_list|,
name|ownerName
argument_list|,
name|conf
argument_list|,
name|hms
argument_list|)
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"One or more table directories not owned by %s, or non-HDFS path"
argument_list|,
name|ownerName
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|static
name|boolean
name|shouldTablePathBeExternal
parameter_list|(
name|Table
name|tableObj
parameter_list|,
name|String
name|ownerName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|IMetaStoreClient
name|hms
parameter_list|)
throws|throws
name|IOException
throws|,
name|TException
block|{
name|boolean
name|shouldBeExternal
init|=
literal|false
decl_stmt|;
name|String
name|dbName
init|=
name|tableObj
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|tableObj
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isPartitionedTable
argument_list|(
name|tableObj
argument_list|)
condition|)
block|{
comment|// Check the table directory.
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|tableObj
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|tablePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHdfs
argument_list|(
name|fs
argument_list|)
condition|)
block|{
name|boolean
name|ownedByHive
init|=
name|checkDirectoryOwnership
argument_list|(
name|fs
argument_list|,
name|tablePath
argument_list|,
name|ownerName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|shouldBeExternal
operator|=
operator|!
name|ownedByHive
expr_stmt|;
block|}
else|else
block|{
comment|// Set non-hdfs tables to external, unless transactional (should have been checked before this).
name|shouldBeExternal
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Check ownership for all partitions
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
name|hms
operator|.
name|listPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|Partition
name|partObj
init|=
name|hms
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|)
decl_stmt|;
name|Path
name|partPath
init|=
operator|new
name|Path
argument_list|(
name|partObj
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|partPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHdfs
argument_list|(
name|fs
argument_list|)
condition|)
block|{
name|boolean
name|ownedByHive
init|=
name|checkDirectoryOwnership
argument_list|(
name|fs
argument_list|,
name|partPath
argument_list|,
name|ownerName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|shouldBeExternal
operator|=
operator|!
name|ownedByHive
expr_stmt|;
block|}
else|else
block|{
name|shouldBeExternal
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|shouldBeExternal
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|shouldBeExternal
return|;
block|}
name|void
name|cleanup
parameter_list|()
block|{
name|hms
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|hiveUpdater
operator|!=
literal|null
condition|)
block|{
name|runAndLogErrors
argument_list|(
parameter_list|()
lambda|->
name|hiveUpdater
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|hiveUpdater
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|HiveUpdater
name|getHiveUpdater
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|HiveUpdater
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|TxnCtx
block|{
specifier|public
specifier|final
name|long
name|writeId
decl_stmt|;
specifier|public
specifier|final
name|String
name|validWriteIds
decl_stmt|;
specifier|public
specifier|final
name|long
name|txnId
decl_stmt|;
specifier|public
name|TxnCtx
parameter_list|(
name|long
name|writeId
parameter_list|,
name|String
name|validWriteIds
parameter_list|,
name|long
name|txnId
parameter_list|)
block|{
name|this
operator|.
name|writeId
operator|=
name|writeId
expr_stmt|;
name|this
operator|.
name|txnId
operator|=
name|txnId
expr_stmt|;
name|this
operator|.
name|validWriteIds
operator|=
name|validWriteIds
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|HiveUpdater
implements|implements
name|AutoCloseable
block|{
name|Hive
name|hive
decl_stmt|;
name|boolean
name|doFileRename
decl_stmt|;
name|HiveUpdater
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|boolean
name|fileRename
parameter_list|)
throws|throws
name|HiveException
block|{
name|hive
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Hive
operator|.
name|set
argument_list|(
name|hive
argument_list|)
expr_stmt|;
name|doFileRename
operator|=
name|fileRename
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|hive
operator|!=
literal|null
condition|)
block|{
name|runAndLogErrors
argument_list|(
name|Hive
operator|::
name|closeCurrent
argument_list|)
expr_stmt|;
name|hive
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|void
name|updateDbLocation
parameter_list|(
name|Database
name|db
parameter_list|,
name|Path
name|newLocation
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"ALTER DATABASE %s SET LOCATION '%s'"
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|newLocation
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|db
operator|.
name|setLocationUri
argument_list|(
name|newLocation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hive
operator|.
name|alterDatabase
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
name|void
name|updateTableLocation
parameter_list|(
name|Table
name|table
parameter_list|,
name|Path
name|newLocation
parameter_list|)
throws|throws
name|HiveException
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"ALTER TABLE %s SET LOCATION '%s'"
argument_list|,
name|getQualifiedName
argument_list|(
name|table
argument_list|)
argument_list|,
name|newLocation
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|boolean
name|isTxn
init|=
name|TxnUtils
operator|.
name|isTransactionalTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
name|modifiedTable
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|modifiedTable
operator|.
name|setDataLocation
argument_list|(
name|newLocation
argument_list|)
expr_stmt|;
name|alterTableInternal
argument_list|(
name|isTxn
argument_list|,
name|table
argument_list|,
name|modifiedTable
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|alterTableInternal
parameter_list|(
name|boolean
name|wasTxn
parameter_list|,
name|Table
name|table
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
name|modifiedTable
parameter_list|)
throws|throws
name|HiveException
block|{
name|IMetaStoreClient
name|msc
init|=
name|getMSC
argument_list|()
decl_stmt|;
name|TxnCtx
name|txnCtx
init|=
name|generateTxnCtxForAlter
argument_list|(
name|table
argument_list|,
name|msc
argument_list|,
name|wasTxn
argument_list|)
decl_stmt|;
name|boolean
name|isOk
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|validWriteIds
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|txnCtx
operator|!=
literal|null
condition|)
block|{
name|validWriteIds
operator|=
name|txnCtx
operator|.
name|validWriteIds
expr_stmt|;
name|modifiedTable
operator|.
name|getTTable
argument_list|()
operator|.
name|setWriteId
argument_list|(
name|txnCtx
operator|.
name|writeId
argument_list|)
expr_stmt|;
block|}
name|msc
operator|.
name|alter_table
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|modifiedTable
operator|.
name|getTTable
argument_list|()
argument_list|,
literal|null
argument_list|,
name|validWriteIds
argument_list|)
expr_stmt|;
name|isOk
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTxnCtx
argument_list|(
name|txnCtx
argument_list|,
name|msc
argument_list|,
name|isOk
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|alterPartitionInternal
parameter_list|(
name|Table
name|table
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
name|modifiedPart
parameter_list|)
throws|throws
name|HiveException
block|{
name|IMetaStoreClient
name|msc
init|=
name|getMSC
argument_list|()
decl_stmt|;
name|TxnCtx
name|txnCtx
init|=
name|generateTxnCtxForAlter
argument_list|(
name|table
argument_list|,
name|msc
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|isOk
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|validWriteIds
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|txnCtx
operator|!=
literal|null
condition|)
block|{
name|validWriteIds
operator|=
name|txnCtx
operator|.
name|validWriteIds
expr_stmt|;
name|modifiedPart
operator|.
name|getTPartition
argument_list|()
operator|.
name|setWriteId
argument_list|(
name|txnCtx
operator|.
name|writeId
argument_list|)
expr_stmt|;
block|}
name|msc
operator|.
name|alter_partition
argument_list|(
name|table
operator|.
name|getCatName
argument_list|()
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|modifiedPart
operator|.
name|getTPartition
argument_list|()
argument_list|,
literal|null
argument_list|,
name|validWriteIds
argument_list|)
expr_stmt|;
name|isOk
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeTxnCtx
argument_list|(
name|txnCtx
argument_list|,
name|msc
argument_list|,
name|isOk
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|IMetaStoreClient
name|getMSC
parameter_list|()
throws|throws
name|HiveException
block|{
try|try
block|{
return|return
name|hive
operator|.
name|getMSC
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|TxnCtx
name|generateTxnCtxForAlter
parameter_list|(
name|Table
name|table
parameter_list|,
name|IMetaStoreClient
name|msc
parameter_list|,
name|Boolean
name|wasTxn
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|(
name|wasTxn
operator|!=
literal|null
operator|&&
operator|!
name|wasTxn
operator|)
operator|||
operator|!
name|TxnUtils
operator|.
name|isTransactionalTable
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|long
name|txnId
init|=
name|msc
operator|.
name|openTxn
argument_list|(
name|ugi
operator|==
literal|null
condition|?
literal|"anonymous"
else|:
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|TxnCtx
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ValidTxnList
name|txns
init|=
name|msc
operator|.
name|getValidTxns
argument_list|(
name|txnId
argument_list|)
decl_stmt|;
name|String
name|fqn
init|=
name|table
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|table
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TableValidWriteIds
argument_list|>
name|writeIdsObj
init|=
name|msc
operator|.
name|getValidWriteIds
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|fqn
argument_list|)
argument_list|,
name|txns
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|validWriteIds
init|=
name|TxnCommonUtils
operator|.
name|createValidTxnWriteIdList
argument_list|(
name|txnId
argument_list|,
name|writeIdsObj
argument_list|)
operator|.
name|getTableValidWriteIdList
argument_list|(
name|fqn
argument_list|)
operator|.
name|writeToString
argument_list|()
decl_stmt|;
name|long
name|writeId
init|=
name|msc
operator|.
name|allocateTableWriteId
argument_list|(
name|txnId
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|TxnCtx
argument_list|(
name|writeId
argument_list|,
name|validWriteIds
argument_list|,
name|txnId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|msc
operator|.
name|abortTxns
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|txnId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|TException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|closeTxnCtx
parameter_list|(
name|TxnCtx
name|txnCtx
parameter_list|,
name|IMetaStoreClient
name|msc
parameter_list|,
name|boolean
name|isOk
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|txnCtx
operator|==
literal|null
condition|)
return|return;
try|try
block|{
if|if
condition|(
name|isOk
condition|)
block|{
name|msc
operator|.
name|commitTxn
argument_list|(
name|txnCtx
operator|.
name|txnId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msc
operator|.
name|abortTxns
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|txnCtx
operator|.
name|txnId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
name|void
name|updatePartitionLocation
parameter_list|(
name|String
name|dbName
parameter_list|,
name|Table
name|table
parameter_list|,
name|String
name|partName
parameter_list|,
name|Partition
name|part
parameter_list|,
name|Path
name|newLocation
parameter_list|)
throws|throws
name|HiveException
throws|,
name|TException
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"ALTER TABLE %s PARTITION (%s) SET LOCATION '%s'"
argument_list|,
name|getQualifiedName
argument_list|(
name|table
argument_list|)
argument_list|,
name|partName
argument_list|,
name|newLocation
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
name|modifiedPart
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
argument_list|(
name|table
argument_list|)
argument_list|,
name|part
argument_list|)
decl_stmt|;
name|modifiedPart
operator|.
name|setLocation
argument_list|(
name|newLocation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|alterPartitionInternal
argument_list|(
name|table
argument_list|,
name|modifiedPart
argument_list|)
expr_stmt|;
block|}
name|void
name|updateTableProperties
parameter_list|(
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
throws|throws
name|HiveException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|isTxn
init|=
name|TxnUtils
operator|.
name|isTransactionalTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
name|modifiedTable
init|=
name|doFileRename
condition|?
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
argument_list|(
name|table
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|props
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|props
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifiedTable
operator|==
literal|null
condition|)
block|{
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|modifiedTable
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|// Build properties list for logging
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'='"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"ALTER TABLE %s SET TBLPROPERTIES (%s)"
argument_list|,
name|getQualifiedName
argument_list|(
name|table
argument_list|)
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// Note: for now, this is always called to convert the table to either external, or ACID/MM,
comment|//       so the original table would be non-txn and the transaction wouldn't be opened.
if|if
condition|(
name|modifiedTable
operator|!=
literal|null
condition|)
block|{
name|alterTableInternal
argument_list|(
name|isTxn
argument_list|,
name|table
argument_list|,
name|modifiedTable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
interface|interface
name|ThrowableRunnable
block|{
name|void
name|run
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
specifier|static
name|void
name|runAndLogErrors
parameter_list|(
name|ThrowableRunnable
name|r
parameter_list|)
block|{
try|try
block|{
name|r
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error encountered"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|String
name|createExternalConversionExcuse
parameter_list|(
name|Table
name|tableObj
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"Table %s cannot be converted to an external table in "
operator|+
literal|"strict managed table mode for the following reason: %s"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|,
name|reason
argument_list|)
return|;
block|}
specifier|static
name|String
name|createManagedConversionExcuse
parameter_list|(
name|Table
name|tableObj
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"Table %s cannot be converted to a managed table in "
operator|+
literal|"strict managed table mode for the following reason: %s"
argument_list|,
name|getQualifiedName
argument_list|(
name|tableObj
argument_list|)
argument_list|,
name|reason
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|isPartitionedTable
parameter_list|(
name|Table
name|tableObj
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
init|=
name|tableObj
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|partKeys
operator|!=
literal|null
operator|&&
name|partKeys
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|static
name|boolean
name|isHdfs
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
return|return
name|scheme
operator|.
name|equals
argument_list|(
name|fs
operator|.
name|getScheme
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|String
name|getQualifiedName
parameter_list|(
name|Table
name|tableObj
parameter_list|)
block|{
return|return
name|getQualifiedName
argument_list|(
name|tableObj
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tableObj
operator|.
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|String
name|getQualifiedName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'`'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"`.`"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'`'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
name|boolean
name|arePathsEqual
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|path1
parameter_list|,
name|String
name|path2
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|qualified1
init|=
name|getQualifiedPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|path1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|qualified2
init|=
name|getQualifiedPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|path2
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|qualified1
operator|.
name|equals
argument_list|(
name|qualified2
argument_list|)
return|;
block|}
specifier|static
name|String
name|getQualifiedPath
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|fs
operator|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|fs
operator|.
name|makeQualified
argument_list|(
name|path
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Recursively check the file owner and permissions, setting them to the passed in values    * if the owner/perms of the file do not match.    * @param fs    * @param path    * @param userName  Owner of the file to compare/set. Null to skip this check.    * @param groupName Group of the file to compare/set. Null to skip this check.    * @param dirPerms  Permissions to compare/set, if the file is a directory. Null to skip this check.    * @param filePerms Permissions to compare/set, if the file is a file. Null to skip this check.    * @param dryRun    Dry run - check but do not actually set    * @param recurse   Whether to recursively check/set the contents of a directory    * @throws IOException    */
specifier|static
name|void
name|checkAndSetFileOwnerPermissions
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|groupName
parameter_list|,
name|FsPermission
name|dirPerms
parameter_list|,
name|FsPermission
name|filePerms
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|boolean
name|recurse
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fStatus
init|=
name|getFileStatus
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|checkAndSetFileOwnerPermissions
argument_list|(
name|fs
argument_list|,
name|fStatus
argument_list|,
name|userName
argument_list|,
name|groupName
argument_list|,
name|dirPerms
argument_list|,
name|filePerms
argument_list|,
name|dryRun
argument_list|,
name|recurse
argument_list|)
expr_stmt|;
block|}
comment|/**    * Recursively check the file owner and permissions, setting them to the passed in values    * if the owner/perms of the file do not match.    * @param fs    * @param fStatus    * @param userName  Owner of the file to compare/set. Null to skip this check.    * @param groupName Group of the file to compare/set. Null to skip this check.    * @param dirPerms  Permissions to compare/set, if the file is a directory. Null to skip this check.    * @param filePerms Permissions to compare/set, if the file is a file. Null to skip this check.    * @param dryRun    Dry run - check but do not actually set    * @param recurse   Whether to recursively check/set the contents of a directory    * @throws IOException    */
specifier|static
name|void
name|checkAndSetFileOwnerPermissions
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|fStatus
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|groupName
parameter_list|,
name|FsPermission
name|dirPerms
parameter_list|,
name|FsPermission
name|filePerms
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|boolean
name|recurse
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fStatus
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Path
name|path
init|=
name|fStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|boolean
name|setOwner
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
operator|&&
operator|!
name|userName
operator|.
name|equals
argument_list|(
name|fStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
block|{
name|setOwner
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|groupName
operator|!=
literal|null
operator|&&
operator|!
name|groupName
operator|.
name|equals
argument_list|(
name|fStatus
operator|.
name|getGroup
argument_list|()
argument_list|)
condition|)
block|{
name|setOwner
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|isDir
init|=
name|fStatus
operator|.
name|isDirectory
argument_list|()
decl_stmt|;
name|boolean
name|setPerms
init|=
literal|false
decl_stmt|;
name|FsPermission
name|perms
init|=
name|filePerms
decl_stmt|;
if|if
condition|(
name|isDir
condition|)
block|{
name|perms
operator|=
name|dirPerms
expr_stmt|;
block|}
if|if
condition|(
name|perms
operator|!=
literal|null
operator|&&
operator|!
name|perms
operator|.
name|equals
argument_list|(
name|fStatus
operator|.
name|getPermission
argument_list|()
argument_list|)
condition|)
block|{
name|setPerms
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|setOwner
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting owner/group of {} to {}/{}"
argument_list|,
name|path
argument_list|,
name|userName
argument_list|,
name|groupName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dryRun
condition|)
block|{
name|fs
operator|.
name|setOwner
argument_list|(
name|path
argument_list|,
name|userName
argument_list|,
name|groupName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|setPerms
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting perms of {} to {}"
argument_list|,
name|path
argument_list|,
name|perms
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dryRun
condition|)
block|{
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isDir
operator|&&
name|recurse
condition|)
block|{
for|for
control|(
name|FileStatus
name|subFile
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
control|)
block|{
comment|// TODO: Use threadpool for more concurrency?
comment|// TODO: check/set all files, or only directories
name|checkAndSetFileOwnerPermissions
argument_list|(
name|fs
argument_list|,
name|subFile
argument_list|,
name|userName
argument_list|,
name|groupName
argument_list|,
name|dirPerms
argument_list|,
name|filePerms
argument_list|,
name|dryRun
argument_list|,
name|recurse
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|boolean
name|checkDirectoryOwnership
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|String
name|userName
parameter_list|,
name|boolean
name|recurse
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fStatus
init|=
name|getFileStatus
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
decl_stmt|;
return|return
name|checkDirectoryOwnership
argument_list|(
name|fs
argument_list|,
name|fStatus
argument_list|,
name|userName
argument_list|,
name|recurse
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|checkDirectoryOwnership
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|fStatus
parameter_list|,
name|String
name|userName
parameter_list|,
name|boolean
name|recurse
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fStatus
operator|==
literal|null
condition|)
block|{
comment|// Non-existent file returns true.
return|return
literal|true
return|;
block|}
name|Path
name|path
init|=
name|fStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
comment|// Ignore non-directory files
name|boolean
name|isDir
init|=
name|fStatus
operator|.
name|isDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDir
condition|)
block|{
if|if
condition|(
name|userName
operator|!=
literal|null
operator|&&
operator|!
name|userName
operator|.
name|equals
argument_list|(
name|fStatus
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|recurse
condition|)
block|{
for|for
control|(
name|FileStatus
name|subFile
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|checkDirectoryOwnership
argument_list|(
name|fs
argument_list|,
name|subFile
argument_list|,
name|userName
argument_list|,
name|recurse
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|static
name|FileStatus
name|getFileStatus
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|static
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|hasEquivalentEncryption
parameter_list|(
name|HadoopShims
operator|.
name|HdfsEncryptionShim
name|encryptionShim
parameter_list|,
name|Path
name|path1
parameter_list|,
name|Path
name|path2
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Assumes these are both qualified paths are in the same FileSystem
if|if
condition|(
name|encryptionShim
operator|.
name|isPathEncrypted
argument_list|(
name|path1
argument_list|)
operator|||
name|encryptionShim
operator|.
name|isPathEncrypted
argument_list|(
name|path2
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|encryptionShim
operator|.
name|arePathsOnSameEncryptionZone
argument_list|(
name|path1
argument_list|,
name|path2
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * can set it from tests to test when config needs something other than default values.    */
annotation|@
name|VisibleForTesting
specifier|static
name|HiveConf
name|hiveConf
init|=
literal|null
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|static
name|String
name|scheme
init|=
literal|"hdfs"
decl_stmt|;
block|}
end_class

end_unit

