begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyUtils
import|;
end_import

begin_comment
comment|/**  * Cast a string to a double.  *  * If other functions besides cast need to take a string in and produce a long,  * you can subclass this class or convert it to a superclass, and  * implement different "func()" methods for each operation.  */
end_comment

begin_class
specifier|public
class|class
name|CastStringToFloat
extends|extends
name|CastStringToDouble
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|CastStringToFloat
parameter_list|(
name|int
name|inputColumn
parameter_list|,
name|int
name|outputColumnNum
parameter_list|)
block|{
name|super
argument_list|(
name|inputColumn
argument_list|,
name|outputColumnNum
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CastStringToFloat
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Convert input string to a double, at position i in the respective vectors.    */
annotation|@
name|Override
specifier|protected
name|void
name|func
parameter_list|(
name|DoubleColumnVector
name|outV
parameter_list|,
name|BytesColumnVector
name|inV
parameter_list|,
name|int
name|batchIndex
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|inV
operator|.
name|vector
index|[
name|batchIndex
index|]
decl_stmt|;
specifier|final
name|int
name|start
init|=
name|inV
operator|.
name|start
index|[
name|batchIndex
index|]
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|inV
operator|.
name|length
index|[
name|batchIndex
index|]
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
condition|)
block|{
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|DoubleColumnVector
operator|.
name|NULL_VALUE
expr_stmt|;
return|return;
block|}
name|outV
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// for any exception in conversion to integer, produce NULL
name|outV
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|outV
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|true
expr_stmt|;
name|outV
operator|.
name|vector
index|[
name|batchIndex
index|]
operator|=
name|DoubleColumnVector
operator|.
name|NULL_VALUE
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

