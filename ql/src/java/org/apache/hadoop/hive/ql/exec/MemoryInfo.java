begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
operator|.
name|LlapClusterStateForCompile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|mapreduce
operator|.
name|hadoop
operator|.
name|MRJobConfig
import|;
end_import

begin_comment
comment|/**  * Contains information about executor memory, various memory thresholds used for join conversions etc. based on  * execution engine.  **/
end_comment

begin_class
specifier|public
class|class
name|MemoryInfo
block|{
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|boolean
name|isTez
decl_stmt|;
specifier|private
name|boolean
name|isLlap
decl_stmt|;
specifier|private
name|long
name|maxExecutorMemory
decl_stmt|;
specifier|private
name|long
name|mapJoinMemoryThreshold
decl_stmt|;
specifier|private
name|long
name|dynPartJoinMemoryThreshold
decl_stmt|;
specifier|public
name|MemoryInfo
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|isTez
operator|=
literal|"tez"
operator|.
name|equalsIgnoreCase
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|isLlap
operator|=
literal|"llap"
operator|.
name|equalsIgnoreCase
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_MODE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isLlap
condition|)
block|{
name|LlapClusterStateForCompile
name|llapInfo
init|=
name|LlapClusterStateForCompile
operator|.
name|getClusterInfo
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|llapInfo
operator|.
name|initClusterInfo
argument_list|()
expr_stmt|;
if|if
condition|(
name|llapInfo
operator|.
name|hasClusterInfo
argument_list|()
condition|)
block|{
name|this
operator|.
name|maxExecutorMemory
operator|=
name|llapInfo
operator|.
name|getMemoryPerExecutor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|long
name|memPerInstance
init|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_MEMORY_PER_INSTANCE_MB
argument_list|)
operator|*
literal|1024L
operator|*
literal|1024L
decl_stmt|;
name|long
name|numExecutors
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_NUM_EXECUTORS
argument_list|)
decl_stmt|;
name|this
operator|.
name|maxExecutorMemory
operator|=
name|memPerInstance
operator|/
name|numExecutors
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isTez
condition|)
block|{
name|float
name|heapFraction
init|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|TEZ_CONTAINER_MAX_JAVA_HEAP_FRACTION
argument_list|)
decl_stmt|;
name|int
name|containerSizeMb
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETEZCONTAINERSIZE
argument_list|)
operator|>
literal|0
condition|?
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETEZCONTAINERSIZE
argument_list|)
else|:
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MAP_MEMORY_MB
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MAP_MEMORY_MB
argument_list|)
decl_stmt|;
comment|// this can happen when config is explicitly set to "-1", in which case defaultValue also does not work
if|if
condition|(
name|containerSizeMb
operator|<
literal|0
condition|)
block|{
name|containerSizeMb
operator|=
name|MRJobConfig
operator|.
name|DEFAULT_MAP_MEMORY_MB
expr_stmt|;
block|}
name|this
operator|.
name|maxExecutorMemory
operator|=
call|(
name|long
call|)
argument_list|(
operator|(
name|containerSizeMb
operator|*
literal|1024L
operator|*
literal|1024L
operator|)
operator|*
name|heapFraction
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|maxExecutorMemory
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|MAP_MEMORY_MB
argument_list|,
name|MRJobConfig
operator|.
name|DEFAULT_MAP_MEMORY_MB
argument_list|)
operator|*
literal|1024L
operator|*
literal|1024L
expr_stmt|;
comment|// this can happen when config is explicitly set to "-1", in which case defaultValue also does not work
if|if
condition|(
name|maxExecutorMemory
operator|<
literal|0
condition|)
block|{
name|maxExecutorMemory
operator|=
name|MRJobConfig
operator|.
name|DEFAULT_MAP_MEMORY_MB
operator|*
literal|1024L
operator|*
literal|1024L
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
name|void
name|setConf
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
name|boolean
name|isTez
parameter_list|()
block|{
return|return
name|isTez
return|;
block|}
specifier|public
name|boolean
name|isLlap
parameter_list|()
block|{
return|return
name|isLlap
return|;
block|}
specifier|public
name|long
name|getMaxExecutorMemory
parameter_list|()
block|{
return|return
name|maxExecutorMemory
return|;
block|}
specifier|public
name|long
name|getMapJoinMemoryThreshold
parameter_list|()
block|{
return|return
name|mapJoinMemoryThreshold
return|;
block|}
specifier|public
name|long
name|getDynPartJoinMemoryThreshold
parameter_list|()
block|{
return|return
name|dynPartJoinMemoryThreshold
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"MEMORY INFO - { isTez: "
operator|+
name|isTez
argument_list|()
operator|+
literal|", isLlap: "
operator|+
name|isLlap
argument_list|()
operator|+
literal|", maxExecutorMemory: "
operator|+
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|getMaxExecutorMemory
argument_list|()
argument_list|)
operator|+
literal|", mapJoinMemoryThreshold: "
operator|+
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|getMapJoinMemoryThreshold
argument_list|()
argument_list|)
operator|+
literal|", dynPartJoinMemoryThreshold: "
operator|+
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|getDynPartJoinMemoryThreshold
argument_list|()
argument_list|)
operator|+
literal|" }"
return|;
block|}
block|}
end_class

end_unit

