begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|Trigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|TriggerActionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|KillMoveTriggerActionHandler
implements|implements
name|TriggerActionHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KillMoveTriggerActionHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|WorkloadManager
name|wm
decl_stmt|;
name|KillMoveTriggerActionHandler
parameter_list|(
specifier|final
name|WorkloadManager
name|wm
parameter_list|)
block|{
name|this
operator|.
name|wm
operator|=
name|wm
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|applyAction
parameter_list|(
specifier|final
name|Map
argument_list|<
name|TezSessionState
argument_list|,
name|Trigger
argument_list|>
name|queriesViolated
parameter_list|)
block|{
name|TezSessionState
name|sessionState
decl_stmt|;
name|Map
argument_list|<
name|WmTezSession
argument_list|,
name|Future
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|moveFutures
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|queriesViolated
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TezSessionState
argument_list|,
name|Trigger
argument_list|>
name|entry
range|:
name|queriesViolated
operator|.
name|entrySet
argument_list|()
control|)
block|{
switch|switch
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getAction
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|KILL_QUERY
case|:
name|sessionState
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|String
name|queryId
init|=
name|sessionState
operator|.
name|getTriggerContext
argument_list|()
operator|.
name|getQueryId
argument_list|()
decl_stmt|;
try|try
block|{
name|sessionState
operator|.
name|getKillQuery
argument_list|()
operator|.
name|killQuery
argument_list|(
name|queryId
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getViolationMsg
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to kill query {} for trigger violation"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MOVE_TO_POOL
case|:
name|sessionState
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|sessionState
operator|instanceof
name|WmTezSession
condition|)
block|{
name|WmTezSession
name|wmTezSession
init|=
operator|(
name|WmTezSession
operator|)
name|sessionState
decl_stmt|;
name|String
name|destPoolName
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getAction
argument_list|()
operator|.
name|getPoolName
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|Boolean
argument_list|>
name|moveFuture
init|=
name|wm
operator|.
name|applyMoveSessionAsync
argument_list|(
name|wmTezSession
argument_list|,
name|destPoolName
argument_list|)
decl_stmt|;
name|moveFutures
operator|.
name|put
argument_list|(
name|wmTezSession
argument_list|,
name|moveFuture
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"WmTezSession is expected. Got: "
operator|+
name|sessionState
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|". SessionId: "
operator|+
name|sessionState
operator|.
name|getSessionId
argument_list|()
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported action: "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|WmTezSession
argument_list|,
name|Future
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|entry
range|:
name|moveFutures
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|WmTezSession
name|wmTezSession
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|Boolean
argument_list|>
name|moveFuture
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
comment|// block to make sure move happened successfully
if|if
condition|(
name|moveFuture
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Moved session {} to pool {}"
argument_list|,
name|wmTezSession
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|wmTezSession
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while moving session {}"
argument_list|,
name|wmTezSession
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

