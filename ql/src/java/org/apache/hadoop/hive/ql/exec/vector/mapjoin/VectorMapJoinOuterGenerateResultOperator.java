begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashMapResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashTableResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|WriteBuffers
operator|.
name|ByteSegmentRef
import|;
end_import

begin_comment
comment|/**  * This class has methods for generating vectorized join results for outer joins.  *  * The big difference between inner joins and outer joins is the treatment of null and non-matching  * keys.  *  * Inner joins ignore null keys.  Outer joins include big table rows with null keys in the result.  *  * (Left non-full) outer joins include big table rows that do not match the small table.  Small  * table columns for non-matches will be NULL.  *  * Another important difference is filtering.  For outer joins to include the necessary rows,  * filtering must be done after the hash table lookup.  That is because filtering does not  * eliminate rows, but changes them from match to non-matching rows.  They will still appear in  * the join result.  *  * One vector outer join optimization is referencing bytes outer keys.  When a bytes key appears  * in the small table results area, instead of copying the bytes key we reference the big table key.  * Bytes column vectors allow a by reference entry to bytes.  It is safe to do a by reference  * since it is within the same row.  *  * Outer join uses a hash map since small table columns can be included in the join result.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|VectorMapJoinOuterGenerateResultOperator
extends|extends
name|VectorMapJoinGenerateResultOperator
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VectorMapJoinOuterGenerateResultOperator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|//---------------------------------------------------------------------------
comment|// Outer join specific members.
comment|//
comment|// An array of hash map results so we can do lookups on the whole batch before output result
comment|// generation.
specifier|protected
specifier|transient
name|VectorMapJoinHashMapResult
name|hashMapResults
index|[]
decl_stmt|;
comment|// Pre-allocated member for storing any matching row indexes during a processOp call.
specifier|protected
specifier|transient
name|int
index|[]
name|matchs
decl_stmt|;
comment|// Pre-allocated member for storing the mapping to the row batchIndex of the first of a series of
comment|// equal keys that was looked up during a processOp call.
specifier|protected
specifier|transient
name|int
index|[]
name|matchHashMapResultIndices
decl_stmt|;
comment|// All matching and non-matching big table rows.
specifier|protected
specifier|transient
name|int
index|[]
name|nonSpills
decl_stmt|;
comment|// Pre-allocated member for storing the (physical) batch index of rows that need to be spilled.
specifier|protected
specifier|transient
name|int
index|[]
name|spills
decl_stmt|;
comment|// Pre-allocated member for storing index into the hashSetResults for each spilled row.
specifier|protected
specifier|transient
name|int
index|[]
name|spillHashMapResultIndices
decl_stmt|;
comment|// Pre-allocated member for storing any non-matching row indexes during a processOp call.
specifier|protected
specifier|transient
name|int
index|[]
name|scratch1
decl_stmt|;
specifier|public
name|VectorMapJoinOuterGenerateResultOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|VectorMapJoinOuterGenerateResultOperator
parameter_list|(
name|VectorizationContext
name|vContext
parameter_list|,
name|OperatorDesc
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
argument_list|(
name|vContext
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/*    * Setup our outer join specific members.    */
specifier|protected
name|void
name|commonSetup
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|commonSetup
argument_list|(
name|batch
argument_list|)
expr_stmt|;
comment|// Outer join specific.
name|VectorMapJoinHashMap
name|baseHashMap
init|=
operator|(
name|VectorMapJoinHashMap
operator|)
name|vectorMapJoinHashTable
decl_stmt|;
name|hashMapResults
operator|=
operator|new
name|VectorMapJoinHashMapResult
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hashMapResults
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|hashMapResults
index|[
name|i
index|]
operator|=
name|baseHashMap
operator|.
name|createHashMapResult
argument_list|()
expr_stmt|;
block|}
name|matchs
operator|=
operator|new
name|int
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|matchHashMapResultIndices
operator|=
operator|new
name|int
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|nonSpills
operator|=
operator|new
name|int
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|spills
operator|=
operator|new
name|int
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|spillHashMapResultIndices
operator|=
operator|new
name|int
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|scratch1
operator|=
operator|new
name|int
index|[
name|batch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
block|}
comment|//-----------------------------------------------------------------------------------------------
comment|/*    * Outer join (hash map).    */
comment|/**    * Generate the outer join output results for one vectorized row batch.    *    * Any filter expressions will apply now since hash map lookup for outer join is complete.    *    * @param batch    *          The big table batch with any matching and any non matching rows both as    *          selected in use.    * @param matchs    *          A subset of the rows of the batch that are matches.    * @param matchHashMapResultIndices    *          For each entry in matches, the index into the hashMapResult.    * @param matchSize    *          Number of matches in matchs.    * @param nonSpills    *          The rows of the batch that are both matches and non-matches.    * @param nonspillCount    *          Number of rows in nonSpills.    * @param spills    *          A subset of the rows of the batch that are spills.    * @param spillHashMapResultIndices    *          For each entry in spills, the index into the hashMapResult.    * @param spillCount    *          Number of spills in spills.    * @param hashMapResults    *          The array of all hash map results for the batch.    * @param hashMapResultCount    *          Number of entries in hashMapResults.    * @param scratch1    *          Pre-allocated storage to internal use.    */
specifier|public
name|int
name|finishOuter
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
index|[]
name|matchs
parameter_list|,
name|int
index|[]
name|matchHashMapResultIndices
parameter_list|,
name|int
name|matchCount
parameter_list|,
name|int
index|[]
name|nonSpills
parameter_list|,
name|int
name|nonSpillCount
parameter_list|,
name|int
index|[]
name|spills
parameter_list|,
name|int
index|[]
name|spillHashMapResultIndices
parameter_list|,
name|int
name|spillCount
parameter_list|,
name|VectorMapJoinHashMapResult
index|[]
name|hashMapResults
parameter_list|,
name|int
name|hashMapResultCount
parameter_list|,
name|int
index|[]
name|scratch1
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
name|int
name|numSel
init|=
literal|0
decl_stmt|;
comment|// At this point we have determined the matching rows only for the ON equality condition(s).
comment|// Implicitly, non-matching rows are those in the selected array minus matchs.
comment|// Next, for outer join, apply any ON predicates to filter down the matches.
if|if
condition|(
name|matchCount
operator|>
literal|0
operator|&&
name|bigTableFilterExpressions
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|matchs
argument_list|,
literal|0
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
literal|0
argument_list|,
name|matchCount
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|matchCount
expr_stmt|;
comment|// Non matches will be removed from the selected array.
for|for
control|(
name|VectorExpression
name|ve
range|:
name|bigTableFilterExpressions
control|)
block|{
name|ve
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
comment|// LOG.info("finishOuter" +
comment|//     " filtered batch.selected " + Arrays.toString(Arrays.copyOfRange(batch.selected, 0, batch.size)));
comment|// Fixup the matchHashMapResultIndices array.
if|if
condition|(
name|batch
operator|.
name|size
operator|<
name|matchCount
condition|)
block|{
name|int
name|numMatch
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|selected
init|=
name|batch
operator|.
name|selected
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|selected
index|[
name|i
index|]
operator|==
name|matchs
index|[
name|numMatch
index|]
condition|)
block|{
name|matchHashMapResultIndices
index|[
name|numMatch
index|]
operator|=
name|matchHashMapResultIndices
index|[
name|i
index|]
expr_stmt|;
name|numMatch
operator|++
expr_stmt|;
if|if
condition|(
name|numMatch
operator|==
name|matchCount
condition|)
block|{
break|break;
block|}
block|}
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|batch
operator|.
name|selected
argument_list|,
literal|0
argument_list|,
name|matchs
argument_list|,
literal|0
argument_list|,
name|matchCount
argument_list|)
expr_stmt|;
block|}
block|}
comment|// LOG.info("finishOuter" +
comment|//     " matchs[" + matchCount + "] " + intArrayToRangesString(matchs, matchCount) +
comment|//     " matchHashMapResultIndices " + Arrays.toString(Arrays.copyOfRange(matchHashMapResultIndices, 0, matchCount)));
comment|// Big table value expressions apply to ALL matching and non-matching rows.
if|if
condition|(
name|bigTableValueExpressions
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|nonSpills
argument_list|,
literal|0
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
literal|0
argument_list|,
name|nonSpillCount
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|nonSpillCount
expr_stmt|;
for|for
control|(
name|VectorExpression
name|ve
range|:
name|bigTableValueExpressions
control|)
block|{
name|ve
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Determine which rows are non matches by determining the delta between selected and
comment|// matchs.
name|int
index|[]
name|noMatchs
init|=
name|scratch1
decl_stmt|;
name|int
name|noMatchCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|matchCount
operator|<
name|nonSpillCount
condition|)
block|{
comment|// Determine which rows are non matches.
name|int
name|matchIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nonSpillCount
condition|;
name|i
operator|++
control|)
block|{
name|int
name|candidateIndex
init|=
name|nonSpills
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|matchIndex
operator|<
name|matchCount
operator|&&
name|candidateIndex
operator|==
name|matchs
index|[
name|matchIndex
index|]
condition|)
block|{
name|matchIndex
operator|++
expr_stmt|;
block|}
else|else
block|{
name|noMatchs
index|[
name|noMatchCount
operator|++
index|]
operator|=
name|candidateIndex
expr_stmt|;
block|}
block|}
block|}
comment|// LOG.info("finishOuter" +
comment|//     " noMatchs[" + noMatchCount + "] " + intArrayToRangesString(noMatchs, noMatchCount));
comment|// When we generate results into the overflow batch, we may still end up with fewer rows
comment|// in the big table batch.  So, nulSel and the batch's selected array will be rebuilt with
comment|// just the big table rows that need to be forwarded, minus any rows processed with the
comment|// overflow batch.
if|if
condition|(
name|matchCount
operator|>
literal|0
condition|)
block|{
name|numSel
operator|=
name|generateOuterHashMapMatchResults
argument_list|(
name|batch
argument_list|,
name|matchs
argument_list|,
name|matchHashMapResultIndices
argument_list|,
name|matchCount
argument_list|,
name|hashMapResults
argument_list|,
name|numSel
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|noMatchCount
operator|>
literal|0
condition|)
block|{
name|numSel
operator|=
name|generateOuterHashMapNoMatchResults
argument_list|(
name|batch
argument_list|,
name|noMatchs
argument_list|,
name|noMatchCount
argument_list|,
name|numSel
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spillCount
operator|>
literal|0
condition|)
block|{
name|spillHashMapBatch
argument_list|(
name|batch
argument_list|,
operator|(
name|VectorMapJoinHashTableResult
index|[]
operator|)
name|hashMapResults
argument_list|,
name|spills
argument_list|,
name|spillHashMapResultIndices
argument_list|,
name|spillCount
argument_list|)
expr_stmt|;
block|}
return|return
name|numSel
return|;
block|}
comment|/**     * Generate the matching outer join output results for one row of a vectorized row batch into     * the overflow batch.     *     * @param batch     *          The big table batch.     * @param batchIndex     *          Index of the big table row.     * @param hashMapResult     *          The hash map result with the small table values.     */
specifier|private
name|void
name|copyOuterHashMapResultToOverflow
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|VectorMapJoinHashMapResult
name|hashMapResult
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
block|{
comment|// if (hashMapResult.isCappedCountAvailable()) {
comment|//   LOG.info("copyOuterHashMapResultToOverflow cappedCount " + hashMapResult.cappedCount());
comment|// }
name|ByteSegmentRef
name|byteSegmentRef
init|=
name|hashMapResult
operator|.
name|first
argument_list|()
decl_stmt|;
while|while
condition|(
name|byteSegmentRef
operator|!=
literal|null
condition|)
block|{
comment|// Copy the BigTable values into the overflow batch. Since the overflow batch may
comment|// not get flushed here, we must copy by value.
if|if
condition|(
name|bigTableRetainedVectorCopy
operator|!=
literal|null
condition|)
block|{
name|bigTableRetainedVectorCopy
operator|.
name|copyByValue
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|overflowBatch
argument_list|,
name|overflowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
comment|// Reference the keys we just copied above.
if|if
condition|(
name|bigTableVectorCopyOuterKeys
operator|!=
literal|null
condition|)
block|{
name|bigTableVectorCopyOuterKeys
operator|.
name|copyByReference
argument_list|(
name|overflowBatch
argument_list|,
name|overflowBatch
operator|.
name|size
argument_list|,
name|overflowBatch
argument_list|,
name|overflowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|smallTableVectorDeserializeRow
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
name|byteSegmentRef
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
operator|(
name|int
operator|)
name|byteSegmentRef
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|byteSegmentRef
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|smallTableVectorDeserializeRow
operator|.
name|setBytes
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|smallTableVectorDeserializeRow
operator|.
name|deserializeByValue
argument_list|(
name|overflowBatch
argument_list|,
name|overflowBatch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
operator|++
name|overflowBatch
operator|.
name|size
expr_stmt|;
if|if
condition|(
name|overflowBatch
operator|.
name|size
operator|==
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|)
block|{
name|forwardOverflow
argument_list|()
expr_stmt|;
block|}
name|byteSegmentRef
operator|=
name|hashMapResult
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
comment|// LOG.info("copyOuterHashMapResultToOverflow overflowBatch.size " + overflowBatch.size);
block|}
comment|/**     * Generate the matching outer join output results for one vectorized row batch.     *     * For each matching row specified by parameter, get the one or more small table values and     * form join results.     *     * (Note: Since all matching and non-matching rows are selected and output for outer joins,     * we cannot use selected as the matching rows).     *     * @param batch     *          The big table batch with any matching and any non matching rows both as     *          selected in use.     * @param matchs     *          A subset of the rows of the batch that are matches.     * @param matchHashMapResultIndices     *          For each entry in matches, the index into the hashMapResult.     * @param matchSize     *          Number of matches in matchs.     * @param hashMapResults     *          The array of all hash map results for the batch.     * @param numSel     *          The current count of rows in the rebuilding of the selected array.     *     * @return     *          The new count of selected rows.     */
specifier|protected
name|int
name|generateOuterHashMapMatchResults
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
index|[]
name|matchs
parameter_list|,
name|int
index|[]
name|matchHashMapResultIndices
parameter_list|,
name|int
name|matchSize
parameter_list|,
name|VectorMapJoinHashMapResult
index|[]
name|hashMapResults
parameter_list|,
name|int
name|numSel
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
name|int
index|[]
name|selected
init|=
name|batch
operator|.
name|selected
decl_stmt|;
comment|// Generate result within big table batch when single small table value.  Otherwise, copy
comment|// to overflow batch.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|matchSize
condition|;
name|i
operator|++
control|)
block|{
name|int
name|batchIndex
init|=
name|matchs
index|[
name|i
index|]
decl_stmt|;
name|int
name|hashMapResultIndex
init|=
name|matchHashMapResultIndices
index|[
name|i
index|]
decl_stmt|;
name|VectorMapJoinHashMapResult
name|hashMapResult
init|=
name|hashMapResults
index|[
name|hashMapResultIndex
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|hashMapResult
operator|.
name|isSingleRow
argument_list|()
condition|)
block|{
comment|// Multiple small table rows require use of the overflow batch.
name|copyOuterHashMapResultToOverflow
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|hashMapResult
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Generate join result in big table batch.
name|ByteSegmentRef
name|byteSegmentRef
init|=
name|hashMapResult
operator|.
name|first
argument_list|()
decl_stmt|;
if|if
condition|(
name|bigTableVectorCopyOuterKeys
operator|!=
literal|null
condition|)
block|{
name|bigTableVectorCopyOuterKeys
operator|.
name|copyByReference
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|batch
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|smallTableVectorDeserializeRow
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
name|byteSegmentRef
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
operator|(
name|int
operator|)
name|byteSegmentRef
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|byteSegmentRef
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|smallTableVectorDeserializeRow
operator|.
name|setBytes
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|smallTableVectorDeserializeRow
operator|.
name|deserializeByValue
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
comment|// Remember this big table row was used for an output result.
name|selected
index|[
name|numSel
operator|++
index|]
operator|=
name|batchIndex
expr_stmt|;
block|}
block|}
return|return
name|numSel
return|;
block|}
comment|/**     * Generate the non matching outer join output results for one vectorized row batch.     *     * For each non matching row specified by parameter, generate nulls for the small table results.     *     * @param batch     *          The big table batch with any matching and any non matching rows both as     *          selected in use.     * @param noMatchs     *          A subset of the rows of the batch that are non matches.     * @param noMatchSize     *          Number of non matches in noMatchs.     * @param numSel     *          The current count of rows in the rebuilding of the selected array.     *     * @return     *          The new count of selected rows.     */
specifier|protected
name|int
name|generateOuterHashMapNoMatchResults
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
index|[]
name|noMatchs
parameter_list|,
name|int
name|noMatchSize
parameter_list|,
name|int
name|numSel
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
name|int
index|[]
name|selected
init|=
name|batch
operator|.
name|selected
decl_stmt|;
comment|// Generate result within big table batch with null small table results, using isRepeated
comment|// if possible.
if|if
condition|(
name|numSel
operator|==
literal|0
condition|)
block|{
comment|// There were 0 matching rows -- so we can use the isRepeated optimization for the non
comment|// matching rows.
comment|// Mark any scratch small table scratch columns that would normally receive a copy of the
comment|// key as null and repeating.
for|for
control|(
name|int
name|column
range|:
name|bigTableOuterKeyMapping
operator|.
name|getOutputColumns
argument_list|()
control|)
block|{
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|colVector
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|colVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
comment|// Small table values are set to null and repeating.
for|for
control|(
name|int
name|column
range|:
name|smallTableMapping
operator|.
name|getOutputColumns
argument_list|()
control|)
block|{
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|colVector
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|colVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
comment|// Rebuild the selected array.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noMatchSize
condition|;
name|i
operator|++
control|)
block|{
name|int
name|batchIndex
init|=
name|noMatchs
index|[
name|i
index|]
decl_stmt|;
name|selected
index|[
name|numSel
operator|++
index|]
operator|=
name|batchIndex
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Set null information in the small table results area.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noMatchSize
condition|;
name|i
operator|++
control|)
block|{
name|int
name|batchIndex
init|=
name|noMatchs
index|[
name|i
index|]
decl_stmt|;
comment|// Mark any scratch small table scratch columns that would normally receive a copy of the
comment|// key as null, too.
for|for
control|(
name|int
name|column
range|:
name|bigTableOuterKeyMapping
operator|.
name|getOutputColumns
argument_list|()
control|)
block|{
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|colVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|true
expr_stmt|;
block|}
comment|// Small table values are set to null.
for|for
control|(
name|int
name|column
range|:
name|smallTableMapping
operator|.
name|getOutputColumns
argument_list|()
control|)
block|{
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|colVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|selected
index|[
name|numSel
operator|++
index|]
operator|=
name|batchIndex
expr_stmt|;
block|}
block|}
return|return
name|numSel
return|;
block|}
comment|/**    * Generate the outer join output results for one vectorized row batch with a repeated key.    *    * Any filter expressions will apply now since hash map lookup for outer join is complete.    *    * @param batch    *          The big table batch with any matching and any non matching rows both as    *          selected in use.    * @param joinResult    *          The hash map lookup result for the repeated key.    * @param hashMapResults    *          The array of all hash map results for the batch.    * @param scratch1    *          Pre-allocated storage to internal use.    */
specifier|public
name|int
name|finishOuterRepeated
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
parameter_list|,
name|VectorMapJoinHashMapResult
name|hashMapResult
parameter_list|,
name|int
index|[]
name|scratch1
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
name|int
name|numSel
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|joinResult
operator|==
name|JoinUtil
operator|.
name|JoinResult
operator|.
name|MATCH
operator|&&
name|bigTableFilterExpressions
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// Since it is repeated, the evaluation of the filter will knock the whole batch out.
comment|// But since we are doing outer join, we want to keep non-matches.
comment|// First, remember selected;
name|int
index|[]
name|rememberSelected
init|=
name|scratch1
decl_stmt|;
name|int
name|rememberBatchSize
init|=
name|batch
operator|.
name|size
decl_stmt|;
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|batch
operator|.
name|selected
argument_list|,
literal|0
argument_list|,
name|rememberSelected
argument_list|,
literal|0
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
comment|// Filter.
for|for
control|(
name|VectorExpression
name|ve
range|:
name|bigTableFilterExpressions
control|)
block|{
name|ve
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
comment|// Convert a filter out to a non match.
if|if
condition|(
name|batch
operator|.
name|size
operator|==
literal|0
condition|)
block|{
name|joinResult
operator|=
name|JoinUtil
operator|.
name|JoinResult
operator|.
name|NOMATCH
expr_stmt|;
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|rememberSelected
argument_list|,
literal|0
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
literal|0
argument_list|,
name|rememberBatchSize
argument_list|)
expr_stmt|;
comment|// LOG.info("finishOuterRepeated batch #" + batchCounter + " filter out converted to no matchs " +
comment|//     Arrays.toString(Arrays.copyOfRange(batch.selected, 0, rememberBatchSize)));
block|}
else|else
block|{
comment|// LOG.info("finishOuterRepeated batch #" + batchCounter + " filter out converted to no matchs batch size " +
comment|//     rememberBatchSize);
block|}
name|batch
operator|.
name|size
operator|=
name|rememberBatchSize
expr_stmt|;
block|}
block|}
comment|// LOG.info("finishOuterRepeated batch #" + batchCounter + " " + joinResult.name() + " batch.size " + batch.size);
switch|switch
condition|(
name|joinResult
condition|)
block|{
case|case
name|MATCH
case|:
comment|// Run our value expressions over whole batch.
if|if
condition|(
name|bigTableValueExpressions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|VectorExpression
name|ve
range|:
name|bigTableValueExpressions
control|)
block|{
name|ve
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Use a common method applicable for inner and outer.
name|numSel
operator|=
name|generateHashMapResultRepeatedAll
argument_list|(
name|batch
argument_list|,
name|hashMapResult
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPILL
case|:
comment|// Whole batch is spilled.
name|spillBatchRepeated
argument_list|(
name|batch
argument_list|,
operator|(
name|VectorMapJoinHashTableResult
operator|)
name|hashMapResult
argument_list|)
expr_stmt|;
break|break;
case|case
name|NOMATCH
case|:
comment|// Run our value expressions over whole batch.
if|if
condition|(
name|bigTableValueExpressions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|VectorExpression
name|ve
range|:
name|bigTableValueExpressions
control|)
block|{
name|ve
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
name|numSel
operator|=
name|generateOuterNullsRepeatedAll
argument_list|(
name|batch
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|numSel
return|;
block|}
comment|/**    * Generate the non-match outer join output results for the whole repeating vectorized    * row batch.    *    * Each row will get nulls for all small table values.    *    * @param batch    *          The big table batch.    * @return    *          The new count of selected rows.    */
specifier|protected
name|int
name|generateOuterNullsRepeatedAll
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
index|[]
name|selected
init|=
name|batch
operator|.
name|selected
decl_stmt|;
name|boolean
name|selectedInUse
init|=
name|batch
operator|.
name|selectedInUse
decl_stmt|;
comment|// Generate result within big table batch using is repeated for null small table results.
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
comment|// The selected array is already filled in as we want it.
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
name|selected
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|column
range|:
name|smallTableMapping
operator|.
name|getOutputColumns
argument_list|()
control|)
block|{
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|colVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|colVector
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
block|}
comment|// Mark any scratch small table scratch columns that would normally receive a copy of the key
comment|// as null, too.
for|for
control|(
name|int
name|column
range|:
name|bigTableOuterKeyMapping
operator|.
name|getOutputColumns
argument_list|()
control|)
block|{
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|colVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|colVector
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
block|}
comment|// for (int i = 0; i< batch.size; i++) {
comment|//   int bigTableIndex = selected[i];
comment|//   VectorizedBatchUtil.debugDisplayOneRow(batch, bigTableIndex, taskName + ", " + getOperatorId() + " VectorMapJoinCommonOperator generate generateOuterNullsRepeatedAll batch");
comment|// }
return|return
name|batch
operator|.
name|size
return|;
block|}
block|}
end_class

end_unit

