begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinBytesHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashMapResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashTableResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinLongHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinNonMatchedIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|WriteBuffers
operator|.
name|ByteSegmentRef
import|;
end_import

begin_comment
comment|/**  * This class has methods for generating vectorized join results for outer joins.  *  * The big difference between inner joins and outer joins is the treatment of null and non-matching  * keys.  *  * Inner joins ignore null keys.  Outer joins include big table rows with null keys in the result.  *  * (Left non-full) outer joins include big table rows that do not match the small table.  Small  * table columns for non-matches will be NULL.  *  * Another important difference is filtering.  For outer joins to include the necessary rows,  * filtering must be done after the hash table lookup.  That is because filtering does not  * eliminate rows, but changes them from match to non-matching rows.  They will still appear in  * the join result.  *  * One vector outer join optimization is referencing bytes outer keys.  When a bytes key appears  * in the small table results area, instead of copying the bytes key we reference the big table key.  * Bytes column vectors allow a by reference entry to bytes.  It is safe to do a by reference  * since it is within the same row.  *  * Outer join uses a hash map since small table columns can be included in the join result.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|VectorMapJoinOuterGenerateResultOperator
extends|extends
name|VectorMapJoinGenerateResultOperator
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VectorMapJoinOuterGenerateResultOperator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|//---------------------------------------------------------------------------
comment|// Outer join specific members.
comment|//
comment|// An array of hash map results so we can do lookups on the whole batch before output result
comment|// generation.
specifier|protected
specifier|transient
name|VectorMapJoinHashMapResult
name|hashMapResults
index|[]
decl_stmt|;
comment|// Pre-allocated member for remembering the big table's selected array at the beginning of
comment|// the process method before applying any filter.  For outer join we need to remember which
comment|// rows did not match since they will appear the in outer join result with NULLs for the
comment|// small table.
specifier|protected
specifier|transient
name|int
index|[]
name|inputSelected
decl_stmt|;
comment|// Pre-allocated member for storing the (physical) batch index of matching row (single- or
comment|// multi-small-table-valued) indexes during a process call.
specifier|protected
specifier|transient
name|int
index|[]
name|allMatchs
decl_stmt|;
comment|/*    *  Pre-allocated members for storing information equal key series for small-table matches.    *    *  ~HashMapResultIndices    *                Index into the hashMapResults array for the match.    *  ~AllMatchIndices    *                (Logical) indices into allMatchs to the first row of a match of a    *                possible series of duplicate keys.    *  ~IsSingleValue    *                Whether there is 1 or multiple small table values.    *  ~DuplicateCounts    *                The duplicate count for each matched key.    *    */
specifier|protected
specifier|transient
name|int
index|[]
name|equalKeySeriesHashMapResultIndices
decl_stmt|;
specifier|protected
specifier|transient
name|int
index|[]
name|equalKeySeriesAllMatchIndices
decl_stmt|;
specifier|protected
specifier|transient
name|boolean
index|[]
name|equalKeySeriesIsSingleValue
decl_stmt|;
specifier|protected
specifier|transient
name|int
index|[]
name|equalKeySeriesDuplicateCounts
decl_stmt|;
comment|// Pre-allocated member for storing the (physical) batch index of rows that need to be spilled.
specifier|protected
specifier|transient
name|int
index|[]
name|spills
decl_stmt|;
comment|// Pre-allocated member for storing index into the hashSetResults for each spilled row.
specifier|protected
specifier|transient
name|int
index|[]
name|spillHashMapResultIndices
decl_stmt|;
comment|// Pre-allocated member for storing any non-spills, non-matches, or merged row indexes during a
comment|// process method call.
specifier|protected
specifier|transient
name|int
index|[]
name|nonSpills
decl_stmt|;
specifier|protected
specifier|transient
name|int
index|[]
name|noMatchs
decl_stmt|;
specifier|protected
specifier|transient
name|int
index|[]
name|merged
decl_stmt|;
comment|/** Kryo ctor. */
specifier|protected
name|VectorMapJoinOuterGenerateResultOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|VectorMapJoinOuterGenerateResultOperator
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
specifier|public
name|VectorMapJoinOuterGenerateResultOperator
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|,
name|OperatorDesc
name|conf
parameter_list|,
name|VectorizationContext
name|vContext
parameter_list|,
name|VectorDesc
name|vectorDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
argument_list|(
name|ctx
argument_list|,
name|conf
argument_list|,
name|vContext
argument_list|,
name|vectorDesc
argument_list|)
expr_stmt|;
block|}
comment|/*    * Setup our outer join specific members.    */
specifier|protected
name|void
name|commonSetup
parameter_list|()
throws|throws
name|HiveException
block|{
name|super
operator|.
name|commonSetup
argument_list|()
expr_stmt|;
comment|// Outer join specific.
name|VectorMapJoinHashMap
name|baseHashMap
init|=
operator|(
name|VectorMapJoinHashMap
operator|)
name|vectorMapJoinHashTable
decl_stmt|;
name|hashMapResults
operator|=
operator|new
name|VectorMapJoinHashMapResult
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hashMapResults
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|hashMapResults
index|[
name|i
index|]
operator|=
name|baseHashMap
operator|.
name|createHashMapResult
argument_list|()
expr_stmt|;
block|}
name|inputSelected
operator|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|allMatchs
operator|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|equalKeySeriesHashMapResultIndices
operator|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|equalKeySeriesAllMatchIndices
operator|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|equalKeySeriesIsSingleValue
operator|=
operator|new
name|boolean
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|equalKeySeriesDuplicateCounts
operator|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|spills
operator|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|spillHashMapResultIndices
operator|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|nonSpills
operator|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|noMatchs
operator|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|merged
operator|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|matchTracker
operator|=
literal|null
expr_stmt|;
block|}
comment|//-----------------------------------------------------------------------------------------------
comment|/*    * Outer join (hash map).    */
comment|/**    * Do the per-batch setup for an outer join.    */
specifier|protected
name|void
name|outerPerBatchSetup
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
comment|// For join operators that can generate small table results, reset their
comment|// (target) scratch columns.
for|for
control|(
name|int
name|column
range|:
name|outerSmallTableKeyColumnMap
control|)
block|{
name|ColumnVector
name|bigTableOuterKeyColumn
init|=
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|bigTableOuterKeyColumn
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|column
range|:
name|smallTableValueColumnMap
control|)
block|{
name|ColumnVector
name|smallTableColumn
init|=
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|smallTableColumn
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Apply the value expression to rows in the (original) input selected array.    *    * @param batch    *          The vectorized row batch.    * @param inputSelectedInUse    *          Whether the (original) input batch is selectedInUse.    * @param inputLogicalSize    *          The (original) input batch size.    */
specifier|private
name|void
name|doValueExprOnInputSelected
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|boolean
name|inputSelectedInUse
parameter_list|,
name|int
name|inputLogicalSize
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|saveBatchSize
init|=
name|batch
operator|.
name|size
decl_stmt|;
name|int
index|[]
name|saveSelected
init|=
name|batch
operator|.
name|selected
decl_stmt|;
name|boolean
name|saveSelectedInUse
init|=
name|batch
operator|.
name|selectedInUse
decl_stmt|;
name|batch
operator|.
name|size
operator|=
name|inputLogicalSize
expr_stmt|;
name|batch
operator|.
name|selected
operator|=
name|inputSelected
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
name|inputSelectedInUse
expr_stmt|;
if|if
condition|(
name|bigTableValueExpressions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|VectorExpression
name|ve
range|:
name|bigTableValueExpressions
control|)
block|{
name|ve
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
name|batch
operator|.
name|size
operator|=
name|saveBatchSize
expr_stmt|;
name|batch
operator|.
name|selected
operator|=
name|saveSelected
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
name|saveSelectedInUse
expr_stmt|;
block|}
comment|/**    * Apply the value expression to rows specified by a selected array.    *    * @param batch    *          The vectorized row batch.    * @param selected    *          The (physical) batch indices to apply the expression to.    * @param size    *          The size of selected.    */
specifier|private
name|void
name|doValueExpr
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
index|[]
name|selected
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|HiveException
block|{
name|int
name|saveBatchSize
init|=
name|batch
operator|.
name|size
decl_stmt|;
name|int
index|[]
name|saveSelected
init|=
name|batch
operator|.
name|selected
decl_stmt|;
name|boolean
name|saveSelectedInUse
init|=
name|batch
operator|.
name|selectedInUse
decl_stmt|;
name|batch
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|batch
operator|.
name|selected
operator|=
name|selected
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|bigTableValueExpressions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|VectorExpression
name|ve
range|:
name|bigTableValueExpressions
control|)
block|{
name|ve
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
name|batch
operator|.
name|size
operator|=
name|saveBatchSize
expr_stmt|;
name|batch
operator|.
name|selected
operator|=
name|saveSelected
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
name|saveSelectedInUse
expr_stmt|;
block|}
comment|/**    * Remove (subtract) members from the input selected array and produce the results into    * a difference array.    *    * @param inputSelectedInUse    *          Whether the (original) input batch is selectedInUse.    * @param inputLogicalSize    *          The (original) input batch size.    * @param remove    *          The indices to remove.  They must all be present in input selected array.    * @param removeSize    *          The size of remove.    * @param difference    *          The resulting difference -- the input selected array indices not in the    *          remove array.    * @return    *          The resulting size of the difference array.    * @throws HiveException     */
specifier|private
name|int
name|subtractFromInputSelected
parameter_list|(
name|boolean
name|inputSelectedInUse
parameter_list|,
name|int
name|inputLogicalSize
parameter_list|,
name|int
index|[]
name|remove
parameter_list|,
name|int
name|removeSize
parameter_list|,
name|int
index|[]
name|difference
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// if (!verifyMonotonicallyIncreasing(remove, removeSize)) {
comment|//   throw new HiveException("remove is not in sort order and unique");
comment|// }
name|int
name|differenceCount
init|=
literal|0
decl_stmt|;
comment|// Determine which rows are left.
name|int
name|removeIndex
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|inputSelectedInUse
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputLogicalSize
condition|;
name|i
operator|++
control|)
block|{
name|int
name|candidateIndex
init|=
name|inputSelected
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|removeIndex
operator|<
name|removeSize
operator|&&
name|candidateIndex
operator|==
name|remove
index|[
name|removeIndex
index|]
condition|)
block|{
name|removeIndex
operator|++
expr_stmt|;
block|}
else|else
block|{
name|difference
index|[
name|differenceCount
operator|++
index|]
operator|=
name|candidateIndex
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|candidateIndex
init|=
literal|0
init|;
name|candidateIndex
operator|<
name|inputLogicalSize
condition|;
name|candidateIndex
operator|++
control|)
block|{
if|if
condition|(
name|removeIndex
operator|<
name|removeSize
operator|&&
name|candidateIndex
operator|==
name|remove
index|[
name|removeIndex
index|]
condition|)
block|{
name|removeIndex
operator|++
expr_stmt|;
block|}
else|else
block|{
name|difference
index|[
name|differenceCount
operator|++
index|]
operator|=
name|candidateIndex
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|removeIndex
operator|!=
name|removeSize
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Not all batch indices removed"
argument_list|)
throw|;
block|}
comment|// if (!verifyMonotonicallyIncreasing(difference, differenceCount)) {
comment|//   throw new HiveException("difference is not in sort order and unique");
comment|// }
return|return
name|differenceCount
return|;
block|}
comment|/**    * Remove (subtract) members from an array and produce the results into    * a difference array.     * @param all    *          The selected array containing all members.    * @param allSize    *          The size of all.    * @param remove    *          The indices to remove.  They must all be present in input selected array.    * @param removeSize    *          The size of remove.    * @param difference    *          The resulting difference -- the all array indices not in the    *          remove array.    * @return    *          The resulting size of the difference array.    * @throws HiveException     */
specifier|private
name|int
name|subtract
parameter_list|(
name|int
index|[]
name|all
parameter_list|,
name|int
name|allSize
parameter_list|,
name|int
index|[]
name|remove
parameter_list|,
name|int
name|removeSize
parameter_list|,
name|int
index|[]
name|difference
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// if (!verifyMonotonicallyIncreasing(remove, removeSize)) {
comment|//   throw new HiveException("remove is not in sort order and unique");
comment|// }
name|int
name|differenceCount
init|=
literal|0
decl_stmt|;
comment|// Determine which rows are left.
name|int
name|removeIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allSize
condition|;
name|i
operator|++
control|)
block|{
name|int
name|candidateIndex
init|=
name|all
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|removeIndex
operator|<
name|removeSize
operator|&&
name|candidateIndex
operator|==
name|remove
index|[
name|removeIndex
index|]
condition|)
block|{
name|removeIndex
operator|++
expr_stmt|;
block|}
else|else
block|{
name|difference
index|[
name|differenceCount
operator|++
index|]
operator|=
name|candidateIndex
expr_stmt|;
block|}
block|}
if|if
condition|(
name|removeIndex
operator|!=
name|removeSize
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Not all batch indices removed"
argument_list|)
throw|;
block|}
return|return
name|differenceCount
return|;
block|}
comment|/**    * Sort merge two select arrays so the resulting array is ordered by (batch) index.    *    * @param selected1    * @param selected1Count    * @param selected2    * @param selected2Count    * @param sortMerged    *          The resulting sort merge of selected1 and selected2.    * @return    *          The resulting size of the sortMerged array.    * @throws HiveException     */
specifier|private
name|int
name|sortMerge
parameter_list|(
name|int
index|[]
name|selected1
parameter_list|,
name|int
name|selected1Count
parameter_list|,
name|int
index|[]
name|selected2
parameter_list|,
name|int
name|selected2Count
parameter_list|,
name|int
index|[]
name|sortMerged
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// if (!verifyMonotonicallyIncreasing(selected1, selected1Count)) {
comment|//   throw new HiveException("selected1 is not in sort order and unique");
comment|// }
comment|// if (!verifyMonotonicallyIncreasing(selected2, selected2Count)) {
comment|//   throw new HiveException("selected1 is not in sort order and unique");
comment|// }
name|int
name|sortMergeCount
init|=
literal|0
decl_stmt|;
name|int
name|selected1Index
init|=
literal|0
decl_stmt|;
name|int
name|selected2Index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selected1Count
operator|+
name|selected2Count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|selected1Index
operator|<
name|selected1Count
operator|&&
name|selected2Index
operator|<
name|selected2Count
condition|)
block|{
if|if
condition|(
name|selected1
index|[
name|selected1Index
index|]
operator|<
name|selected2
index|[
name|selected2Index
index|]
condition|)
block|{
name|sortMerged
index|[
name|sortMergeCount
operator|++
index|]
operator|=
name|selected1
index|[
name|selected1Index
operator|++
index|]
expr_stmt|;
block|}
else|else
block|{
name|sortMerged
index|[
name|sortMergeCount
operator|++
index|]
operator|=
name|selected2
index|[
name|selected2Index
operator|++
index|]
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|selected1Index
operator|<
name|selected1Count
condition|)
block|{
name|sortMerged
index|[
name|sortMergeCount
operator|++
index|]
operator|=
name|selected1
index|[
name|selected1Index
operator|++
index|]
expr_stmt|;
block|}
else|else
block|{
name|sortMerged
index|[
name|sortMergeCount
operator|++
index|]
operator|=
name|selected2
index|[
name|selected2Index
operator|++
index|]
expr_stmt|;
block|}
block|}
comment|// if (!verifyMonotonicallyIncreasing(sortMerged, sortMergeCount)) {
comment|//   throw new HiveException("sortMerged is not in sort order and unique");
comment|// }
return|return
name|sortMergeCount
return|;
block|}
comment|/**    * Generate the outer join output results for one vectorized row batch.    *    * @param batch    *          The big table batch with any matching and any non matching rows both as    *          selected in use.    * @param allMatchCount    *          Number of matches in allMatchs.    * @param equalKeySeriesCount    *          Number of single value matches.    * @param atLeastOneNonMatch    *          Whether at least one row was a non-match.    * @param inputSelectedInUse    *          A copy of the batch's selectedInUse flag on input to the process method.    * @param inputLogicalSize    *          The batch's size on input to the process method.    * @param spillCount    *          Number of spills in spills.    * @param hashMapResultCount    *          Number of entries in hashMapResults.    */
specifier|public
name|void
name|finishOuter
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|allMatchCount
parameter_list|,
name|int
name|equalKeySeriesCount
parameter_list|,
name|boolean
name|atLeastOneNonMatch
parameter_list|,
name|boolean
name|inputSelectedInUse
parameter_list|,
name|int
name|inputLogicalSize
parameter_list|,
name|int
name|spillCount
parameter_list|,
name|int
name|hashMapResultCount
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
comment|// Get rid of spills before we start modifying the batch.
if|if
condition|(
name|spillCount
operator|>
literal|0
condition|)
block|{
name|spillHashMapBatch
argument_list|(
name|batch
argument_list|,
operator|(
name|VectorMapJoinHashTableResult
index|[]
operator|)
name|hashMapResults
argument_list|,
name|spills
argument_list|,
name|spillHashMapResultIndices
argument_list|,
name|spillCount
argument_list|)
expr_stmt|;
block|}
name|int
name|noMatchCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|spillCount
operator|>
literal|0
condition|)
block|{
comment|// Subtract the spills to get all match and non-match rows.
name|int
name|nonSpillCount
init|=
name|subtractFromInputSelected
argument_list|(
name|inputSelectedInUse
argument_list|,
name|inputLogicalSize
argument_list|,
name|spills
argument_list|,
name|spillCount
argument_list|,
name|nonSpills
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"finishOuter spillCount> 0"
operator|+
literal|" nonSpills "
operator|+
name|intArrayToRangesString
argument_list|(
name|nonSpills
argument_list|,
name|nonSpillCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Big table value expressions apply to ALL matching and non-matching rows.
if|if
condition|(
name|bigTableValueExpressions
operator|!=
literal|null
condition|)
block|{
name|doValueExpr
argument_list|(
name|batch
argument_list|,
name|nonSpills
argument_list|,
name|nonSpillCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|atLeastOneNonMatch
condition|)
block|{
name|noMatchCount
operator|=
name|subtract
argument_list|(
name|nonSpills
argument_list|,
name|nonSpillCount
argument_list|,
name|allMatchs
argument_list|,
name|allMatchCount
argument_list|,
name|noMatchs
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"finishOuter spillCount> 0"
operator|+
literal|" noMatchs "
operator|+
name|intArrayToRangesString
argument_list|(
name|noMatchs
argument_list|,
name|noMatchCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Run value expressions over original (whole) input batch.
name|doValueExprOnInputSelected
argument_list|(
name|batch
argument_list|,
name|inputSelectedInUse
argument_list|,
name|inputLogicalSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|atLeastOneNonMatch
condition|)
block|{
name|noMatchCount
operator|=
name|subtractFromInputSelected
argument_list|(
name|inputSelectedInUse
argument_list|,
name|inputLogicalSize
argument_list|,
name|allMatchs
argument_list|,
name|allMatchCount
argument_list|,
name|noMatchs
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"finishOuter spillCount == 0"
operator|+
literal|" noMatchs "
operator|+
name|intArrayToRangesString
argument_list|(
name|noMatchs
argument_list|,
name|noMatchCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// When we generate results into the overflow batch, we may still end up with fewer rows
comment|// in the big table batch.  So, nulSel and the batch's selected array will be rebuilt with
comment|// just the big table rows that need to be forwarded, minus any rows processed with the
comment|// overflow batch.
if|if
condition|(
name|allMatchCount
operator|>
literal|0
condition|)
block|{
name|int
name|numSel
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|equalKeySeriesCount
condition|;
name|i
operator|++
control|)
block|{
name|int
name|hashMapResultIndex
init|=
name|equalKeySeriesHashMapResultIndices
index|[
name|i
index|]
decl_stmt|;
name|VectorMapJoinHashMapResult
name|hashMapResult
init|=
name|hashMapResults
index|[
name|hashMapResultIndex
index|]
decl_stmt|;
name|int
name|allMatchesIndex
init|=
name|equalKeySeriesAllMatchIndices
index|[
name|i
index|]
decl_stmt|;
name|boolean
name|isSingleValue
init|=
name|equalKeySeriesIsSingleValue
index|[
name|i
index|]
decl_stmt|;
name|int
name|duplicateCount
init|=
name|equalKeySeriesDuplicateCounts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|isSingleValue
condition|)
block|{
name|numSel
operator|=
name|generateHashMapResultSingleValue
argument_list|(
name|batch
argument_list|,
name|hashMapResult
argument_list|,
name|allMatchs
argument_list|,
name|allMatchesIndex
argument_list|,
name|duplicateCount
argument_list|,
name|numSel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|generateHashMapResultMultiValue
argument_list|(
name|batch
argument_list|,
name|hashMapResult
argument_list|,
name|allMatchs
argument_list|,
name|allMatchesIndex
argument_list|,
name|duplicateCount
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The number of single value rows that were generated in the big table batch.
name|batch
operator|.
name|size
operator|=
name|numSel
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"finishOuter allMatchCount> 0"
operator|+
literal|" batch.selected "
operator|+
name|intArrayToRangesString
argument_list|(
name|batch
operator|.
name|selected
argument_list|,
name|batch
operator|.
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|batch
operator|.
name|size
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|noMatchCount
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|batch
operator|.
name|size
operator|>
literal|0
condition|)
block|{
name|generateOuterNulls
argument_list|(
name|batch
argument_list|,
name|noMatchs
argument_list|,
name|noMatchCount
argument_list|)
expr_stmt|;
comment|// Merge noMatchs and (match) selected.
name|int
name|mergeCount
init|=
name|sortMerge
argument_list|(
name|noMatchs
argument_list|,
name|noMatchCount
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|merged
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"finishOuter noMatchCount> 0&& batch.size> 0"
operator|+
literal|" merged "
operator|+
name|intArrayToRangesString
argument_list|(
name|merged
argument_list|,
name|mergeCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|merged
argument_list|,
literal|0
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
literal|0
argument_list|,
name|mergeCount
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|mergeCount
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// We can use the whole batch for output of no matches.
name|generateOuterNullsRepeatedAll
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|noMatchs
argument_list|,
literal|0
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
literal|0
argument_list|,
name|noMatchCount
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|noMatchCount
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"finishOuter noMatchCount> 0&& batch.size == 0"
operator|+
literal|" batch.selected "
operator|+
name|intArrayToRangesString
argument_list|(
name|batch
operator|.
name|selected
argument_list|,
name|batch
operator|.
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**     * Generate the non matching outer join output results for one vectorized row batch.     *     * For each non matching row specified by parameter, generate nulls for the small table results.     *     * @param batch     *          The big table batch with any matching and any non matching rows both as     *          selected in use.     * @param noMatchs     *          A subset of the rows of the batch that are non matches.     * @param noMatchSize     *          Number of non matches in noMatchs.     */
specifier|protected
name|void
name|generateOuterNulls
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
index|[]
name|noMatchs
parameter_list|,
name|int
name|noMatchSize
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
comment|// Set null information in the small table results area.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noMatchSize
condition|;
name|i
operator|++
control|)
block|{
name|int
name|batchIndex
init|=
name|noMatchs
index|[
name|i
index|]
decl_stmt|;
comment|// Mark any scratch small table scratch columns that would normally receive a copy of the
comment|// key as null, too.
comment|//
for|for
control|(
name|int
name|column
range|:
name|outerSmallTableKeyColumnMap
control|)
block|{
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|colVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|true
expr_stmt|;
block|}
comment|// Small table values are set to null.
for|for
control|(
name|int
name|column
range|:
name|smallTableValueColumnMap
control|)
block|{
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|colVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
name|batchIndex
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Generate the outer join output results for one vectorized row batch with a repeated key.    *    * Any filter expressions will apply now since hash map lookup for outer join is complete.    *    * @param batch    *          The big table batch with any matching and any non matching rows both as    *          selected in use.    * @param joinResult    *          The hash map lookup result for the repeated key.    * @param hashMapResults    *          The array of all hash map results for the batch.    * @param someRowsFilteredOut    *          Whether some rows of the repeated key batch were knocked out by the filter.    * @param inputSelectedInUse    *          A copy of the batch's selectedInUse flag on input to the process method.    * @param inputLogicalSize    *          The batch's size on input to the process method.    * @param scratch1    *          Pre-allocated storage to internal use.    * @param scratch2    *          Pre-allocated storage to internal use.    */
specifier|public
name|void
name|finishOuterRepeated
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|JoinUtil
operator|.
name|JoinResult
name|joinResult
parameter_list|,
name|VectorMapJoinHashMapResult
name|hashMapResult
parameter_list|,
name|boolean
name|someRowsFilteredOut
parameter_list|,
name|boolean
name|inputSelectedInUse
parameter_list|,
name|int
name|inputLogicalSize
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
comment|// LOG.debug("finishOuterRepeated batch #" + batchCounter + " " + joinResult.name() + " batch.size " + batch.size + " someRowsFilteredOut " + someRowsFilteredOut);
switch|switch
condition|(
name|joinResult
condition|)
block|{
case|case
name|MATCH
case|:
comment|// Rows we looked up as one repeated key are a match.  But filtered out rows
comment|// need to be generated as non-matches, too.
if|if
condition|(
name|someRowsFilteredOut
condition|)
block|{
comment|// For the filtered out rows that didn't (logically) get looked up in the hash table,
comment|// we need to generate no match results for those too...
comment|// Run value expressions over original (whole) input batch.
name|doValueExprOnInputSelected
argument_list|(
name|batch
argument_list|,
name|inputSelectedInUse
argument_list|,
name|inputLogicalSize
argument_list|)
expr_stmt|;
comment|// Now calculate which rows were filtered out (they are logically no matches).
comment|// Determine which rows are non matches by determining the delta between inputSelected and
comment|// (current) batch selected.
name|int
name|noMatchCount
init|=
name|subtractFromInputSelected
argument_list|(
name|inputSelectedInUse
argument_list|,
name|inputLogicalSize
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|noMatchs
argument_list|)
decl_stmt|;
name|generateOuterNulls
argument_list|(
name|batch
argument_list|,
name|noMatchs
argument_list|,
name|noMatchCount
argument_list|)
expr_stmt|;
comment|// Now generate the matchs.  Single small table values will be put into the big table
comment|// batch and come back in matchs.  Any multiple small table value results will go into
comment|// the overflow batch.
name|generateHashMapResultRepeatedAll
argument_list|(
name|batch
argument_list|,
name|hashMapResult
argument_list|)
expr_stmt|;
comment|// Merge noMatchs and (match) selected.
name|int
name|mergeCount
init|=
name|sortMerge
argument_list|(
name|noMatchs
argument_list|,
name|noMatchCount
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|merged
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|merged
argument_list|,
literal|0
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
literal|0
argument_list|,
name|mergeCount
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|mergeCount
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Just run our value expressions over input batch.
if|if
condition|(
name|bigTableValueExpressions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|VectorExpression
name|ve
range|:
name|bigTableValueExpressions
control|)
block|{
name|ve
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
name|generateHashMapResultRepeatedAll
argument_list|(
name|batch
argument_list|,
name|hashMapResult
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SPILL
case|:
comment|// Rows we looked up as one repeated key need to spill.  But filtered out rows
comment|// need to be generated as non-matches, too.
name|spillBatchRepeated
argument_list|(
name|batch
argument_list|,
operator|(
name|VectorMapJoinHashTableResult
operator|)
name|hashMapResult
argument_list|)
expr_stmt|;
comment|// After using selected to generate spills, generate non-matches, if any.
if|if
condition|(
name|someRowsFilteredOut
condition|)
block|{
comment|// Determine which rows are non matches by determining the delta between inputSelected and
comment|// (current) batch selected.
name|int
name|noMatchCount
init|=
name|subtractFromInputSelected
argument_list|(
name|inputSelectedInUse
argument_list|,
name|inputLogicalSize
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
name|batch
operator|.
name|size
argument_list|,
name|noMatchs
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|noMatchs
argument_list|,
literal|0
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
literal|0
argument_list|,
name|noMatchCount
argument_list|)
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|noMatchCount
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
name|generateOuterNullsRepeatedAll
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|batch
operator|.
name|size
operator|=
literal|0
expr_stmt|;
block|}
break|break;
case|case
name|NOMATCH
case|:
if|if
condition|(
name|someRowsFilteredOut
condition|)
block|{
comment|// When the repeated no match is due to filtering, we need to restore the
comment|// selected information.
if|if
condition|(
name|inputSelectedInUse
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|inputSelected
argument_list|,
literal|0
argument_list|,
name|batch
operator|.
name|selected
argument_list|,
literal|0
argument_list|,
name|inputLogicalSize
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|size
operator|=
name|inputLogicalSize
expr_stmt|;
block|}
comment|// Run our value expressions over whole batch.
if|if
condition|(
name|bigTableValueExpressions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|VectorExpression
name|ve
range|:
name|bigTableValueExpressions
control|)
block|{
name|ve
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
name|generateOuterNullsRepeatedAll
argument_list|(
name|batch
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|/**    * Generate the non-match outer join output results for the whole repeating vectorized    * row batch.    *    * Each row will get nulls for all small table values.    *    * @param batch    *          The big table batch.    */
specifier|protected
name|void
name|generateOuterNullsRepeatedAll
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Mark any scratch small table scratch columns that would normally receive a copy of the
comment|// key as null, too.
comment|//
for|for
control|(
name|int
name|column
range|:
name|outerSmallTableKeyColumnMap
control|)
block|{
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|colVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|colVector
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|column
range|:
name|smallTableValueColumnMap
control|)
block|{
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|colVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|colVector
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|markBigTableColumnsAsNullRepeating
parameter_list|()
block|{
comment|/*      * For non-match FULL OUTER Small Table results, the Big Table columns are all NULL.      */
for|for
control|(
name|int
name|column
range|:
name|bigTableRetainColumnMap
control|)
block|{
name|ColumnVector
name|colVector
init|=
name|overflowBatch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|colVector
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|colVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/*    * For FULL OUTER MapJoin, find the non matched Small Table keys and values and odd them to the    * join output result.    */
annotation|@
name|Override
specifier|protected
name|void
name|generateFullOuterSmallTableNoMatches
parameter_list|(
name|byte
name|smallTablePos
parameter_list|,
name|MapJoinTableContainer
name|substituteSmallTable
parameter_list|)
throws|throws
name|HiveException
block|{
comment|/*      * For dynamic partition hash join, both the Big Table and Small Table are partitioned (sent)      * to the Reducer using the key hash code.  So, we can generate the non-match Small Table      * results locally.      *      * Scan the Small Table for keys that didn't match and generate the non-matchs into the      * overflowBatch.      */
comment|/*      * If there were no matched keys sent, we need to do our common initialization.      */
if|if
condition|(
name|needCommonSetup
condition|)
block|{
comment|// Our one time process method initialization.
name|commonSetup
argument_list|()
expr_stmt|;
name|needCommonSetup
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|needHashTableSetup
condition|)
block|{
comment|// Setup our hash table specialization.  It will be the first time the process
comment|// method is called, or after a Hybrid Grace reload.
name|hashTableSetup
argument_list|()
expr_stmt|;
name|needHashTableSetup
operator|=
literal|false
expr_stmt|;
block|}
comment|/*      * To support fancy NULL repeating columns, let's flush the overflowBatch if it has anything.      */
if|if
condition|(
name|overflowBatch
operator|.
name|size
operator|>
literal|0
condition|)
block|{
name|forwardOverflow
argument_list|()
expr_stmt|;
block|}
name|markBigTableColumnsAsNullRepeating
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|hashTableKeyType
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
name|generateFullOuterLongKeySmallTableNoMatches
argument_list|()
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|generateFullOuterStringKeySmallTableNoMatches
argument_list|()
expr_stmt|;
break|break;
case|case
name|MULTI_KEY
case|:
name|generateFullOuterMultiKeySmallTableNoMatches
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected hash table key type "
operator|+
name|hashTableKeyType
argument_list|)
throw|;
block|}
block|}
comment|/*    * For FULL OUTER MapJoin, find the non matched Small Table Long keys and values and odd them to    * the join output result.    */
specifier|protected
name|void
name|generateFullOuterLongKeySmallTableNoMatches
parameter_list|()
throws|throws
name|HiveException
block|{
specifier|final
name|LongColumnVector
name|singleSmallTableKeyOutputColumnVector
decl_stmt|;
if|if
condition|(
name|allSmallTableKeyColumnIncluded
index|[
literal|0
index|]
condition|)
block|{
name|singleSmallTableKeyOutputColumnVector
operator|=
operator|(
name|LongColumnVector
operator|)
name|overflowBatch
operator|.
name|cols
index|[
name|allSmallTableKeyColumnNums
index|[
literal|0
index|]
index|]
expr_stmt|;
block|}
else|else
block|{
name|singleSmallTableKeyOutputColumnVector
operator|=
literal|null
expr_stmt|;
block|}
name|VectorMapJoinLongHashMap
name|hashMap
init|=
operator|(
name|VectorMapJoinLongHashMap
operator|)
name|vectorMapJoinHashTable
decl_stmt|;
name|VectorMapJoinNonMatchedIterator
name|nonMatchedIterator
init|=
name|hashMap
operator|.
name|createNonMatchedIterator
argument_list|(
name|matchTracker
argument_list|)
decl_stmt|;
name|nonMatchedIterator
operator|.
name|init
argument_list|()
expr_stmt|;
while|while
condition|(
name|nonMatchedIterator
operator|.
name|findNextNonMatched
argument_list|()
condition|)
block|{
specifier|final
name|long
name|longKey
decl_stmt|;
name|boolean
name|isKeyNull
init|=
operator|!
name|nonMatchedIterator
operator|.
name|readNonMatchedLongKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isKeyNull
condition|)
block|{
name|longKey
operator|=
name|nonMatchedIterator
operator|.
name|getNonMatchedLongKey
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|longKey
operator|=
literal|0
expr_stmt|;
block|}
name|VectorMapJoinHashMapResult
name|hashMapResult
init|=
name|nonMatchedIterator
operator|.
name|getNonMatchedHashMapResult
argument_list|()
decl_stmt|;
name|ByteSegmentRef
name|byteSegmentRef
init|=
name|hashMapResult
operator|.
name|first
argument_list|()
decl_stmt|;
while|while
condition|(
name|byteSegmentRef
operator|!=
literal|null
condition|)
block|{
comment|// NOTE: Big Table result columns were marked repeating NULL already.
if|if
condition|(
name|singleSmallTableKeyOutputColumnVector
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isKeyNull
condition|)
block|{
name|singleSmallTableKeyOutputColumnVector
operator|.
name|isNull
index|[
name|overflowBatch
operator|.
name|size
index|]
operator|=
literal|true
expr_stmt|;
name|singleSmallTableKeyOutputColumnVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|singleSmallTableKeyOutputColumnVector
operator|.
name|vector
index|[
name|overflowBatch
operator|.
name|size
index|]
operator|=
name|longKey
expr_stmt|;
name|singleSmallTableKeyOutputColumnVector
operator|.
name|isNull
index|[
name|overflowBatch
operator|.
name|size
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|smallTableValueVectorDeserializeRow
operator|!=
literal|null
condition|)
block|{
name|doSmallTableValueDeserializeRow
argument_list|(
name|overflowBatch
argument_list|,
name|overflowBatch
operator|.
name|size
argument_list|,
name|byteSegmentRef
argument_list|,
name|hashMapResult
argument_list|)
expr_stmt|;
block|}
name|overflowBatch
operator|.
name|size
operator|++
expr_stmt|;
if|if
condition|(
name|overflowBatch
operator|.
name|size
operator|==
name|overflowBatch
operator|.
name|DEFAULT_SIZE
condition|)
block|{
name|forwardOverflow
argument_list|()
expr_stmt|;
name|markBigTableColumnsAsNullRepeating
argument_list|()
expr_stmt|;
block|}
name|byteSegmentRef
operator|=
name|hashMapResult
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doSmallTableKeyDeserializeRow
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|byte
index|[]
name|keyBytes
parameter_list|,
name|int
name|keyOffset
parameter_list|,
name|int
name|keyLength
parameter_list|)
throws|throws
name|HiveException
block|{
name|smallTableKeyOuterVectorDeserializeRow
operator|.
name|setBytes
argument_list|(
name|keyBytes
argument_list|,
name|keyOffset
argument_list|,
name|keyLength
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Our hash tables are immutable.  We can safely do by reference STRING, CHAR/VARCHAR, etc.
name|smallTableKeyOuterVectorDeserializeRow
operator|.
name|deserializeByRef
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"\nDeserializeRead detail: "
operator|+
name|smallTableKeyOuterVectorDeserializeRow
operator|.
name|getDetailedReadPositionString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/*    * For FULL OUTER MapJoin, find the non matched Small Table Multi-Keys and values and odd them to    * the join output result.    */
specifier|protected
name|void
name|generateFullOuterMultiKeySmallTableNoMatches
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorMapJoinBytesHashMap
name|hashMap
init|=
operator|(
name|VectorMapJoinBytesHashMap
operator|)
name|vectorMapJoinHashTable
decl_stmt|;
name|VectorMapJoinNonMatchedIterator
name|nonMatchedIterator
init|=
name|hashMap
operator|.
name|createNonMatchedIterator
argument_list|(
name|matchTracker
argument_list|)
decl_stmt|;
name|nonMatchedIterator
operator|.
name|init
argument_list|()
expr_stmt|;
while|while
condition|(
name|nonMatchedIterator
operator|.
name|findNextNonMatched
argument_list|()
condition|)
block|{
name|nonMatchedIterator
operator|.
name|readNonMatchedBytesKey
argument_list|()
expr_stmt|;
name|byte
index|[]
name|keyBytes
init|=
name|nonMatchedIterator
operator|.
name|getNonMatchedBytes
argument_list|()
decl_stmt|;
specifier|final
name|int
name|keyOffset
init|=
name|nonMatchedIterator
operator|.
name|getNonMatchedBytesOffset
argument_list|()
decl_stmt|;
specifier|final
name|int
name|keyLength
init|=
name|nonMatchedIterator
operator|.
name|getNonMatchedBytesLength
argument_list|()
decl_stmt|;
name|VectorMapJoinHashMapResult
name|hashMapResult
init|=
name|nonMatchedIterator
operator|.
name|getNonMatchedHashMapResult
argument_list|()
decl_stmt|;
name|ByteSegmentRef
name|byteSegmentRef
init|=
name|hashMapResult
operator|.
name|first
argument_list|()
decl_stmt|;
while|while
condition|(
name|byteSegmentRef
operator|!=
literal|null
condition|)
block|{
comment|// NOTE: Big Table result columns were marked repeating NULL already.
if|if
condition|(
name|smallTableKeyOuterVectorDeserializeRow
operator|!=
literal|null
condition|)
block|{
name|doSmallTableKeyDeserializeRow
argument_list|(
name|overflowBatch
argument_list|,
name|overflowBatch
operator|.
name|size
argument_list|,
name|keyBytes
argument_list|,
name|keyOffset
argument_list|,
name|keyLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|smallTableValueVectorDeserializeRow
operator|!=
literal|null
condition|)
block|{
name|doSmallTableValueDeserializeRow
argument_list|(
name|overflowBatch
argument_list|,
name|overflowBatch
operator|.
name|size
argument_list|,
name|byteSegmentRef
argument_list|,
name|hashMapResult
argument_list|)
expr_stmt|;
block|}
name|overflowBatch
operator|.
name|size
operator|++
expr_stmt|;
if|if
condition|(
name|overflowBatch
operator|.
name|size
operator|==
name|overflowBatch
operator|.
name|DEFAULT_SIZE
condition|)
block|{
name|forwardOverflow
argument_list|()
expr_stmt|;
name|markBigTableColumnsAsNullRepeating
argument_list|()
expr_stmt|;
block|}
name|byteSegmentRef
operator|=
name|hashMapResult
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
comment|// NOTE: We don't have to deal with FULL OUTER All-NULL key values like we do for single-column
comment|// LONG and STRING because we do store them in the hash map...
block|}
comment|/*    * For FULL OUTER MapJoin, find the non matched Small Table String keys and values and odd them to    * the join output result.    */
specifier|protected
name|void
name|generateFullOuterStringKeySmallTableNoMatches
parameter_list|()
throws|throws
name|HiveException
block|{
specifier|final
name|BytesColumnVector
name|singleSmallTableKeyOutputColumnVector
decl_stmt|;
if|if
condition|(
name|allSmallTableKeyColumnIncluded
index|[
literal|0
index|]
condition|)
block|{
name|singleSmallTableKeyOutputColumnVector
operator|=
operator|(
name|BytesColumnVector
operator|)
name|overflowBatch
operator|.
name|cols
index|[
name|allSmallTableKeyColumnNums
index|[
literal|0
index|]
index|]
expr_stmt|;
block|}
else|else
block|{
name|singleSmallTableKeyOutputColumnVector
operator|=
literal|null
expr_stmt|;
block|}
name|VectorMapJoinBytesHashMap
name|hashMap
init|=
operator|(
name|VectorMapJoinBytesHashMap
operator|)
name|vectorMapJoinHashTable
decl_stmt|;
name|VectorMapJoinNonMatchedIterator
name|nonMatchedIterator
init|=
name|hashMap
operator|.
name|createNonMatchedIterator
argument_list|(
name|matchTracker
argument_list|)
decl_stmt|;
name|nonMatchedIterator
operator|.
name|init
argument_list|()
expr_stmt|;
while|while
condition|(
name|nonMatchedIterator
operator|.
name|findNextNonMatched
argument_list|()
condition|)
block|{
specifier|final
name|byte
index|[]
name|keyBytes
decl_stmt|;
specifier|final
name|int
name|keyOffset
decl_stmt|;
specifier|final
name|int
name|keyLength
decl_stmt|;
name|boolean
name|isKeyNull
init|=
operator|!
name|nonMatchedIterator
operator|.
name|readNonMatchedBytesKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isKeyNull
condition|)
block|{
name|keyBytes
operator|=
name|nonMatchedIterator
operator|.
name|getNonMatchedBytes
argument_list|()
expr_stmt|;
name|keyOffset
operator|=
name|nonMatchedIterator
operator|.
name|getNonMatchedBytesOffset
argument_list|()
expr_stmt|;
name|keyLength
operator|=
name|nonMatchedIterator
operator|.
name|getNonMatchedBytesLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|keyBytes
operator|=
literal|null
expr_stmt|;
name|keyOffset
operator|=
literal|0
expr_stmt|;
name|keyLength
operator|=
literal|0
expr_stmt|;
block|}
name|VectorMapJoinHashMapResult
name|hashMapResult
init|=
name|nonMatchedIterator
operator|.
name|getNonMatchedHashMapResult
argument_list|()
decl_stmt|;
name|ByteSegmentRef
name|byteSegmentRef
init|=
name|hashMapResult
operator|.
name|first
argument_list|()
decl_stmt|;
while|while
condition|(
name|byteSegmentRef
operator|!=
literal|null
condition|)
block|{
comment|// NOTE: Big Table result columns were marked repeating NULL already.
if|if
condition|(
name|singleSmallTableKeyOutputColumnVector
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isKeyNull
condition|)
block|{
name|singleSmallTableKeyOutputColumnVector
operator|.
name|isNull
index|[
name|overflowBatch
operator|.
name|size
index|]
operator|=
literal|true
expr_stmt|;
name|singleSmallTableKeyOutputColumnVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|singleSmallTableKeyOutputColumnVector
operator|.
name|setVal
argument_list|(
name|overflowBatch
operator|.
name|size
argument_list|,
name|keyBytes
argument_list|,
name|keyOffset
argument_list|,
name|keyLength
argument_list|)
expr_stmt|;
name|singleSmallTableKeyOutputColumnVector
operator|.
name|isNull
index|[
name|overflowBatch
operator|.
name|size
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|smallTableValueVectorDeserializeRow
operator|!=
literal|null
condition|)
block|{
name|doSmallTableValueDeserializeRow
argument_list|(
name|overflowBatch
argument_list|,
name|overflowBatch
operator|.
name|size
argument_list|,
name|byteSegmentRef
argument_list|,
name|hashMapResult
argument_list|)
expr_stmt|;
block|}
name|overflowBatch
operator|.
name|size
operator|++
expr_stmt|;
if|if
condition|(
name|overflowBatch
operator|.
name|size
operator|==
name|overflowBatch
operator|.
name|DEFAULT_SIZE
condition|)
block|{
name|forwardOverflow
argument_list|()
expr_stmt|;
name|markBigTableColumnsAsNullRepeating
argument_list|()
expr_stmt|;
block|}
name|byteSegmentRef
operator|=
name|hashMapResult
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|fullOuterHashTableSetup
parameter_list|()
block|{
comment|// Always track key matches for FULL OUTER.
name|matchTracker
operator|=
name|vectorMapJoinHashTable
operator|.
name|createMatchTracker
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|fullOuterIntersectHashTableSetup
parameter_list|()
block|{
name|matchTracker
operator|=
name|vectorMapJoinHashTable
operator|.
name|createMatchTracker
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

