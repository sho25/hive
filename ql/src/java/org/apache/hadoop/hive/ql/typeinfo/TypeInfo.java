begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|typeinfo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Stores information about a type (DDL).  * Always use the TypeInfoFactory to create new TypeInfo objects.  *   * We support 4 categories of types:  * 1. Primitive objects (String, Number, etc)  * 2. List objects (a list of objects of a single type)  * 3. Map objects (a map from objects of one type to objects of another type)  * 4. Struct objects (a list of fields with names and their own types)  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|TypeInfo
implements|implements
name|Serializable
block|{
specifier|protected
name|TypeInfo
parameter_list|()
block|{}
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|+
literal|".getCategory()"
argument_list|)
throw|;
block|}
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|+
literal|".getCategory()"
argument_list|)
throw|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getPrimitiveClass
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|+
literal|".getPrimitiveClass()"
argument_list|)
throw|;
block|}
specifier|public
name|TypeInfo
name|getListElementTypeInfo
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|+
literal|".getListElementTypeInfo()"
argument_list|)
throw|;
block|}
specifier|public
name|TypeInfo
name|getMapKeyTypeInfo
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|+
literal|".getMapKeyTypeInfo()"
argument_list|)
throw|;
block|}
specifier|public
name|TypeInfo
name|getMapValueTypeInfo
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|+
literal|".getMapValueTypeInfo()"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllStructFieldNames
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|+
literal|".getAllStructFieldNames()"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|getAllStructFieldTypeInfos
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|+
literal|".getAllStructFieldTypeInfos()"
argument_list|)
throw|;
block|}
specifier|public
name|TypeInfo
name|getStructFieldTypeInfo
parameter_list|(
name|String
name|field
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|+
literal|".getStructFieldTypeInfo()"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getTypeName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

