begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|formatting
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_comment
comment|/**  * Format table and index information for human readability using  * simple lines of text.  */
end_comment

begin_class
class|class
name|TextMetaDataFormatter
implements|implements
name|MetaDataFormatter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TextMetaDataFormatter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|separator
init|=
name|Utilities
operator|.
name|tabCode
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|terminator
init|=
name|Utilities
operator|.
name|newLineCode
decl_stmt|;
comment|/** The number of columns to be used in pretty formatting metadata output.      * If -1, then the current terminal width is auto-detected and used.      */
specifier|private
specifier|final
name|int
name|prettyOutputNumCols
decl_stmt|;
specifier|public
name|TextMetaDataFormatter
parameter_list|(
name|int
name|prettyOutputNumCols
parameter_list|)
block|{
name|this
operator|.
name|prettyOutputNumCols
operator|=
name|prettyOutputNumCols
expr_stmt|;
block|}
comment|/**      * Write an error message.      */
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|String
name|msg
parameter_list|,
name|int
name|errorCode
parameter_list|,
name|String
name|sqlState
parameter_list|)
throws|throws
name|HiveException
block|{
name|error
argument_list|(
name|out
argument_list|,
name|msg
argument_list|,
name|errorCode
argument_list|,
name|sqlState
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|String
name|errorMessage
parameter_list|,
name|int
name|errorCode
parameter_list|,
name|String
name|sqlState
parameter_list|,
name|String
name|errorDetail
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|errorMessage
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|errorDetail
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|errorDetail
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|errorCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqlState
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|sqlState
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
comment|//this breaks all the tests in .q files
block|}
name|out
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Show a list of tables.      */
annotation|@
name|Override
specifier|public
name|void
name|showTables
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|tables
parameter_list|)
throws|throws
name|HiveException
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterTbls
init|=
name|tables
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|iterTbls
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// create a row per table name
name|out
operator|.
name|writeBytes
argument_list|(
name|iterTbls
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|describeTable
parameter_list|(
name|DataOutputStream
name|outStream
parameter_list|,
name|String
name|colPath
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Table
name|tbl
parameter_list|,
name|Partition
name|part
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|boolean
name|isFormatted
parameter_list|,
name|boolean
name|isExt
parameter_list|,
name|boolean
name|isPretty
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
if|if
condition|(
name|colPath
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
name|tbl
operator|.
name|isPartitioned
argument_list|()
condition|?
name|tbl
operator|.
name|getPartCols
argument_list|()
else|:
literal|null
decl_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
name|isPretty
condition|?
name|MetaDataPrettyFormatUtils
operator|.
name|getAllColumnsInformation
argument_list|(
name|cols
argument_list|,
name|partCols
argument_list|,
name|prettyOutputNumCols
argument_list|)
else|:
name|MetaDataFormatUtils
operator|.
name|getAllColumnsInformation
argument_list|(
name|cols
argument_list|,
name|partCols
argument_list|,
name|isFormatted
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|MetaDataFormatUtils
operator|.
name|getAllColumnsInformation
argument_list|(
name|cols
argument_list|,
name|isFormatted
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tableName
operator|.
name|equals
argument_list|(
name|colPath
argument_list|)
condition|)
block|{
if|if
condition|(
name|isFormatted
condition|)
block|{
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|MetaDataFormatUtils
operator|.
name|getPartitionInformation
argument_list|(
name|part
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|MetaDataFormatUtils
operator|.
name|getTableInformation
argument_list|(
name|tbl
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if extended desc table then show the complete details of the table
if|if
condition|(
name|isExt
condition|)
block|{
comment|// add empty line
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
comment|// show partition information
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"Detailed Partition Information"
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
comment|// comment column is empty
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// show table information
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"Detailed Table Information"
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|showTableStatus
parameter_list|(
name|DataOutputStream
name|outStream
parameter_list|,
name|Hive
name|db
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|List
argument_list|<
name|Table
argument_list|>
name|tbls
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|part
parameter_list|,
name|Partition
name|par
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|Iterator
argument_list|<
name|Table
argument_list|>
name|iterTables
init|=
name|tbls
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterTables
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// create a row per table name
name|Table
name|tbl
init|=
name|iterTables
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|tbl
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|tblLoc
init|=
literal|null
decl_stmt|;
name|String
name|inputFormattCls
init|=
literal|null
decl_stmt|;
name|String
name|outputFormattCls
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|par
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|par
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tblLoc
operator|=
name|par
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|inputFormattCls
operator|=
name|par
operator|.
name|getInputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|outputFormattCls
operator|=
name|par
operator|.
name|getOutputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|tbl
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tblLoc
operator|=
name|tbl
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|inputFormattCls
operator|=
name|tbl
operator|.
name|getInputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|outputFormattCls
operator|=
name|tbl
operator|.
name|getOutputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|String
name|owner
init|=
name|tbl
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|tbl
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|String
name|ddlCols
init|=
name|MetaStoreUtils
operator|.
name|getDDLFromFieldSchema
argument_list|(
literal|"columns"
argument_list|,
name|cols
argument_list|)
decl_stmt|;
name|boolean
name|isPartitioned
init|=
name|tbl
operator|.
name|isPartitioned
argument_list|()
decl_stmt|;
name|String
name|partitionCols
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|isPartitioned
condition|)
block|{
name|partitionCols
operator|=
name|MetaStoreUtils
operator|.
name|getDDLFromFieldSchema
argument_list|(
literal|"partition_columns"
argument_list|,
name|tbl
operator|.
name|getPartCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"tableName:"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"owner:"
operator|+
name|owner
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"location:"
operator|+
name|tblLoc
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"inputformat:"
operator|+
name|inputFormattCls
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"outputformat:"
operator|+
name|outputFormattCls
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"columns:"
operator|+
name|ddlCols
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"partitioned:"
operator|+
name|isPartitioned
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"partitionColumns:"
operator|+
name|partitionCols
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
comment|// output file system information
name|Path
name|tblPath
init|=
name|tbl
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isPartitioned
condition|)
block|{
if|if
condition|(
name|par
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Partition
name|curPart
range|:
name|db
operator|.
name|getPartitions
argument_list|(
name|tbl
argument_list|)
control|)
block|{
if|if
condition|(
name|curPart
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|locations
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|curPart
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|par
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|locations
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|par
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|tblPath
operator|!=
literal|null
condition|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|tblPath
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|locations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|writeFileSystemStats
argument_list|(
name|outStream
argument_list|,
name|conf
argument_list|,
name|locations
argument_list|,
name|tblPath
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|writeFileSystemStats
parameter_list|(
name|DataOutputStream
name|outStream
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|locations
parameter_list|,
name|Path
name|tblPath
parameter_list|,
name|boolean
name|partSpecified
parameter_list|,
name|int
name|indent
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|totalFileSize
init|=
literal|0
decl_stmt|;
name|long
name|maxFileSize
init|=
literal|0
decl_stmt|;
name|long
name|minFileSize
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|lastAccessTime
init|=
literal|0
decl_stmt|;
name|long
name|lastUpdateTime
init|=
literal|0
decl_stmt|;
name|int
name|numOfFiles
init|=
literal|0
decl_stmt|;
name|boolean
name|unknown
init|=
literal|false
decl_stmt|;
name|FileSystem
name|fs
init|=
name|tblPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// in case all files in locations do not exist
try|try
block|{
name|FileStatus
name|tmpStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|tblPath
argument_list|)
decl_stmt|;
name|lastAccessTime
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getAccessTime
argument_list|(
name|tmpStatus
argument_list|)
expr_stmt|;
name|lastUpdateTime
operator|=
name|tmpStatus
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|partSpecified
condition|)
block|{
comment|// check whether the part exists or not in fs
name|tmpStatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|locations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot access File System. File System status will be unknown: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|unknown
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|unknown
condition|)
block|{
for|for
control|(
name|Path
name|loc
range|:
name|locations
control|)
block|{
try|try
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|tblPath
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|loc
argument_list|)
decl_stmt|;
name|long
name|accessTime
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getAccessTime
argument_list|(
name|status
argument_list|)
decl_stmt|;
name|long
name|updateTime
init|=
name|status
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
comment|// no matter loc is the table location or part location, it must be a
comment|// directory.
if|if
condition|(
operator|!
name|status
operator|.
name|isDir
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|accessTime
operator|>
name|lastAccessTime
condition|)
block|{
name|lastAccessTime
operator|=
name|accessTime
expr_stmt|;
block|}
if|if
condition|(
name|updateTime
operator|>
name|lastUpdateTime
condition|)
block|{
name|lastUpdateTime
operator|=
name|updateTime
expr_stmt|;
block|}
for|for
control|(
name|FileStatus
name|currentStatus
range|:
name|files
control|)
block|{
if|if
condition|(
name|currentStatus
operator|.
name|isDir
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|numOfFiles
operator|++
expr_stmt|;
name|long
name|fileLen
init|=
name|currentStatus
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|totalFileSize
operator|+=
name|fileLen
expr_stmt|;
if|if
condition|(
name|fileLen
operator|>
name|maxFileSize
condition|)
block|{
name|maxFileSize
operator|=
name|fileLen
expr_stmt|;
block|}
if|if
condition|(
name|fileLen
operator|<
name|minFileSize
condition|)
block|{
name|minFileSize
operator|=
name|fileLen
expr_stmt|;
block|}
name|accessTime
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getAccessTime
argument_list|(
name|currentStatus
argument_list|)
expr_stmt|;
name|updateTime
operator|=
name|currentStatus
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|accessTime
operator|>
name|lastAccessTime
condition|)
block|{
name|lastAccessTime
operator|=
name|accessTime
expr_stmt|;
block|}
if|if
condition|(
name|updateTime
operator|>
name|lastUpdateTime
condition|)
block|{
name|lastUpdateTime
operator|=
name|updateTime
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
name|String
name|unknownString
init|=
literal|"unknown"
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|indent
condition|;
name|k
operator|++
control|)
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|Utilities
operator|.
name|INDENT
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"totalNumberFiles:"
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
name|unknown
condition|?
name|unknownString
else|:
literal|""
operator|+
name|numOfFiles
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|indent
condition|;
name|k
operator|++
control|)
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|Utilities
operator|.
name|INDENT
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"totalFileSize:"
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
name|unknown
condition|?
name|unknownString
else|:
literal|""
operator|+
name|totalFileSize
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|indent
condition|;
name|k
operator|++
control|)
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|Utilities
operator|.
name|INDENT
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"maxFileSize:"
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
name|unknown
condition|?
name|unknownString
else|:
literal|""
operator|+
name|maxFileSize
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|indent
condition|;
name|k
operator|++
control|)
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|Utilities
operator|.
name|INDENT
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"minFileSize:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|numOfFiles
operator|>
literal|0
condition|)
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|unknown
condition|?
name|unknownString
else|:
literal|""
operator|+
name|minFileSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|unknown
condition|?
name|unknownString
else|:
literal|""
operator|+
literal|0
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|indent
condition|;
name|k
operator|++
control|)
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|Utilities
operator|.
name|INDENT
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"lastAccessTime:"
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
operator|(
name|unknown
operator|||
name|lastAccessTime
operator|<
literal|0
operator|)
condition|?
name|unknownString
else|:
literal|""
operator|+
name|lastAccessTime
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|indent
condition|;
name|k
operator|++
control|)
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|Utilities
operator|.
name|INDENT
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|writeBytes
argument_list|(
literal|"lastUpdateTime:"
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
name|unknown
condition|?
name|unknownString
else|:
literal|""
operator|+
name|lastUpdateTime
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
comment|/**      * Show the table partitions.      */
annotation|@
name|Override
specifier|public
name|void
name|showTablePartitons
parameter_list|(
name|DataOutputStream
name|outStream
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|parts
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
comment|// Partition names are URL encoded. We decode the names unless Hive
comment|// is configured to use the encoded names.
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|!=
literal|null
operator|&&
name|ss
operator|.
name|getConf
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DECODE_PARTITION_NAME
argument_list|)
condition|)
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|FileUtils
operator|.
name|unescapePathName
argument_list|(
name|part
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Show the list of databases      */
annotation|@
name|Override
specifier|public
name|void
name|showDatabases
parameter_list|(
name|DataOutputStream
name|outStream
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|databases
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
for|for
control|(
name|String
name|database
range|:
name|databases
control|)
block|{
comment|// create a row per database name
name|outStream
operator|.
name|writeBytes
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Describe a database      */
annotation|@
name|Override
specifier|public
name|void
name|showDatabaseDescription
parameter_list|(
name|DataOutputStream
name|outStream
parameter_list|,
name|String
name|database
parameter_list|,
name|String
name|comment
parameter_list|,
name|String
name|location
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|comment
operator|!=
literal|null
condition|)
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|comment
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
operator|&&
operator|!
name|params
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|outStream
operator|.
name|writeBytes
argument_list|(
name|params
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

