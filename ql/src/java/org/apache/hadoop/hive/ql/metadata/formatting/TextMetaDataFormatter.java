begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|formatting
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMFullResourcePlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMResourcePlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMValidateResourcePlanResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|info
operator|.
name|DescTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|CheckConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|DefaultConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|ForeignKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|NotNullConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|PrimaryKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|UniqueConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|Constants
operator|.
name|MATERIALIZED_VIEW_REWRITING_TIME_WINDOW
import|;
end_import

begin_comment
comment|/**  * Format table and index information for human readability using  * simple lines of text.  */
end_comment

begin_class
class|class
name|TextMetaDataFormatter
implements|implements
name|MetaDataFormatter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TextMetaDataFormatter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|separator
init|=
name|Utilities
operator|.
name|tabCode
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|terminator
init|=
name|Utilities
operator|.
name|newLineCode
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|showPartColsSeparately
decl_stmt|;
specifier|public
name|TextMetaDataFormatter
parameter_list|(
name|boolean
name|partColsSeparately
parameter_list|)
block|{
name|this
operator|.
name|showPartColsSeparately
operator|=
name|partColsSeparately
expr_stmt|;
block|}
comment|/**    * Write an error message.    */
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|String
name|msg
parameter_list|,
name|int
name|errorCode
parameter_list|,
name|String
name|sqlState
parameter_list|)
throws|throws
name|HiveException
block|{
name|error
argument_list|(
name|out
argument_list|,
name|msg
argument_list|,
name|errorCode
argument_list|,
name|sqlState
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|String
name|errorMessage
parameter_list|,
name|int
name|errorCode
parameter_list|,
name|String
name|sqlState
parameter_list|,
name|String
name|errorDetail
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|errorMessage
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|errorDetail
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|errorDetail
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|errorCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqlState
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|sqlState
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
comment|//this breaks all the tests in .q files
block|}
name|out
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Show a list of tables.    */
annotation|@
name|Override
specifier|public
name|void
name|showTables
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|tables
parameter_list|)
throws|throws
name|HiveException
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterTbls
init|=
name|tables
operator|.
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|iterTbls
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// create a row per table name
name|out
operator|.
name|write
argument_list|(
name|iterTbls
operator|.
name|next
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Show a list of tables including table types.    */
specifier|public
name|void
name|showTablesExtended
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|List
argument_list|<
name|Table
argument_list|>
name|tables
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|tables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Nothing to do
return|return;
block|}
try|try
block|{
name|TextMetaDataTable
name|mdt
init|=
operator|new
name|TextMetaDataTable
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isHiveServerQuery
argument_list|()
condition|)
block|{
name|mdt
operator|.
name|addRow
argument_list|(
literal|"# Table Name"
argument_list|,
literal|"Table Type"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Table
name|table
range|:
name|tables
control|)
block|{
specifier|final
name|String
name|tableName
init|=
name|table
operator|.
name|getTableName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|tableType
init|=
name|table
operator|.
name|getTableType
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|mdt
operator|.
name|addRow
argument_list|(
name|tableName
argument_list|,
name|tableType
argument_list|)
expr_stmt|;
block|}
comment|// In case the query is served by HiveServer2, don't pad it with spaces,
comment|// as HiveServer2 output is consumed by JDBC/ODBC clients.
name|out
operator|.
name|write
argument_list|(
name|mdt
operator|.
name|renderTable
argument_list|(
operator|!
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isHiveServerQuery
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Show a list of materialized views.    */
annotation|@
name|Override
specifier|public
name|void
name|showMaterializedViews
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|List
argument_list|<
name|Table
argument_list|>
name|materializedViews
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|materializedViews
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Nothing to do
return|return;
block|}
try|try
block|{
name|TextMetaDataTable
name|mdt
init|=
operator|new
name|TextMetaDataTable
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isHiveServerQuery
argument_list|()
condition|)
block|{
name|mdt
operator|.
name|addRow
argument_list|(
literal|"# MV Name"
argument_list|,
literal|"Rewriting Enabled"
argument_list|,
literal|"Mode"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Table
name|mv
range|:
name|materializedViews
control|)
block|{
specifier|final
name|String
name|mvName
init|=
name|mv
operator|.
name|getTableName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|rewriteEnabled
init|=
name|mv
operator|.
name|isRewriteEnabled
argument_list|()
condition|?
literal|"Yes"
else|:
literal|"No"
decl_stmt|;
comment|// Currently, we only support manual refresh
comment|// TODO: Update whenever we have other modes
specifier|final
name|String
name|refreshMode
init|=
literal|"Manual refresh"
decl_stmt|;
specifier|final
name|String
name|timeWindowString
init|=
name|mv
operator|.
name|getProperty
argument_list|(
name|MATERIALIZED_VIEW_REWRITING_TIME_WINDOW
argument_list|)
decl_stmt|;
specifier|final
name|String
name|mode
decl_stmt|;
if|if
condition|(
operator|!
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|timeWindowString
argument_list|)
condition|)
block|{
name|long
name|time
init|=
name|HiveConf
operator|.
name|toTime
argument_list|(
name|timeWindowString
argument_list|,
name|HiveConf
operator|.
name|getDefaultTimeUnit
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_MATERIALIZED_VIEW_REWRITING_TIME_WINDOW
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
decl_stmt|;
if|if
condition|(
name|time
operator|>
literal|0L
condition|)
block|{
name|mode
operator|=
name|refreshMode
operator|+
literal|" (Valid for "
operator|+
name|time
operator|+
literal|"min)"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|time
operator|==
literal|0L
condition|)
block|{
name|mode
operator|=
name|refreshMode
operator|+
literal|" (Valid until source tables modified)"
expr_stmt|;
block|}
else|else
block|{
name|mode
operator|=
name|refreshMode
operator|+
literal|" (Valid always)"
expr_stmt|;
block|}
block|}
else|else
block|{
name|mode
operator|=
name|refreshMode
expr_stmt|;
block|}
name|mdt
operator|.
name|addRow
argument_list|(
name|mvName
argument_list|,
name|rewriteEnabled
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
comment|// In case the query is served by HiveServer2, don't pad it with spaces,
comment|// as HiveServer2 output is consumed by JDBC/ODBC clients.
name|out
operator|.
name|write
argument_list|(
name|mdt
operator|.
name|renderTable
argument_list|(
operator|!
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isHiveServerQuery
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|describeTable
parameter_list|(
name|DataOutputStream
name|outStream
parameter_list|,
name|String
name|colPath
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Table
name|tbl
parameter_list|,
name|Partition
name|part
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|boolean
name|isFormatted
parameter_list|,
name|boolean
name|isExt
parameter_list|,
name|boolean
name|isOutputPadded
parameter_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
name|tbl
operator|.
name|isPartitioned
argument_list|()
condition|?
name|tbl
operator|.
name|getPartCols
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|output
init|=
literal|""
decl_stmt|;
name|boolean
name|needColStats
init|=
name|isFormatted
operator|&&
name|colPath
operator|!=
literal|null
decl_stmt|;
name|TextMetaDataTable
name|mdt
init|=
operator|new
name|TextMetaDataTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|needColStats
condition|)
block|{
name|mdt
operator|.
name|addRow
argument_list|(
name|DescTableDesc
operator|.
name|COLUMN_STATISTICS_HEADERS
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isFormatted
operator|&&
operator|!
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isHiveServerQuery
argument_list|()
condition|)
block|{
name|output
operator|=
literal|"# "
expr_stmt|;
name|mdt
operator|.
name|addRow
argument_list|(
name|DescTableDesc
operator|.
name|SCHEMA
operator|.
name|split
argument_list|(
literal|"#"
argument_list|)
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FieldSchema
name|col
range|:
name|cols
control|)
block|{
name|mdt
operator|.
name|addRow
argument_list|(
name|MetaDataFormatUtils
operator|.
name|extractColumnValues
argument_list|(
name|col
argument_list|,
name|needColStats
argument_list|,
name|MetaDataFormatUtils
operator|.
name|getColumnStatisticsObject
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|,
name|col
operator|.
name|getType
argument_list|()
argument_list|,
name|colStats
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needColStats
condition|)
block|{
name|mdt
operator|.
name|transpose
argument_list|()
expr_stmt|;
block|}
name|output
operator|+=
name|mdt
operator|.
name|renderTable
argument_list|(
name|isOutputPadded
argument_list|)
expr_stmt|;
if|if
condition|(
name|colPath
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|partCols
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|partCols
operator|.
name|isEmpty
argument_list|()
operator|&&
name|showPartColsSeparately
condition|)
block|{
name|mdt
operator|=
operator|new
name|TextMetaDataTable
argument_list|()
expr_stmt|;
name|output
operator|+=
name|MetaDataFormatUtils
operator|.
name|LINE_DELIM
operator|+
literal|"# Partition Information"
operator|+
name|MetaDataFormatUtils
operator|.
name|LINE_DELIM
operator|+
literal|"# "
expr_stmt|;
name|mdt
operator|.
name|addRow
argument_list|(
name|DescTableDesc
operator|.
name|SCHEMA
operator|.
name|split
argument_list|(
literal|"#"
argument_list|)
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|col
range|:
name|partCols
control|)
block|{
name|mdt
operator|.
name|addRow
argument_list|(
name|MetaDataFormatUtils
operator|.
name|extractColumnValues
argument_list|(
name|col
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|output
operator|+=
name|mdt
operator|.
name|renderTable
argument_list|(
name|isOutputPadded
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|statsState
decl_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|statsState
operator|=
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|MetaDataFormatUtils
operator|.
name|formatOutput
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|,
name|isFormatted
condition|?
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|statsState
argument_list|)
else|:
name|HiveStringUtils
operator|.
name|escapeJava
argument_list|(
name|statsState
argument_list|)
argument_list|,
name|str
argument_list|,
name|isOutputPadded
argument_list|)
expr_stmt|;
name|output
operator|=
name|output
operator|.
name|concat
argument_list|(
name|str
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|outStream
operator|.
name|write
argument_list|(
name|output
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|colPath
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isFormatted
condition|)
block|{
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|output
operator|=
name|MetaDataFormatUtils
operator|.
name|getPartitionInformation
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|=
name|MetaDataFormatUtils
operator|.
name|getTableInformation
argument_list|(
name|tbl
argument_list|,
name|isOutputPadded
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
name|output
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|PrimaryKeyInfo
operator|.
name|isPrimaryKeyInfoNotEmpty
argument_list|(
name|tbl
operator|.
name|getPrimaryKeyInfo
argument_list|()
argument_list|)
operator|||
name|ForeignKeyInfo
operator|.
name|isForeignKeyInfoNotEmpty
argument_list|(
name|tbl
operator|.
name|getForeignKeyInfo
argument_list|()
argument_list|)
operator|||
name|UniqueConstraint
operator|.
name|isUniqueConstraintNotEmpty
argument_list|(
name|tbl
operator|.
name|getUniqueKeyInfo
argument_list|()
argument_list|)
operator|||
name|NotNullConstraint
operator|.
name|isNotNullConstraintNotEmpty
argument_list|(
name|tbl
operator|.
name|getNotNullConstraint
argument_list|()
argument_list|)
operator|||
name|CheckConstraint
operator|.
name|isCheckConstraintNotEmpty
argument_list|(
name|tbl
operator|.
name|getCheckConstraint
argument_list|()
argument_list|)
operator|||
name|DefaultConstraint
operator|.
name|isCheckConstraintNotEmpty
argument_list|(
name|tbl
operator|.
name|getDefaultConstraint
argument_list|()
argument_list|)
condition|)
block|{
name|output
operator|=
name|MetaDataFormatUtils
operator|.
name|getConstraintsInformation
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|output
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if extended desc table then show the complete details of the table
if|if
condition|(
name|isExt
condition|)
block|{
comment|// add empty line
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
comment|// show partition information
name|outStream
operator|.
name|write
argument_list|(
operator|(
literal|"Detailed Partition Information"
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|part
operator|.
name|getTPartition
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
comment|// comment column is empty
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// show table information
name|outStream
operator|.
name|write
argument_list|(
operator|(
literal|"Detailed Table Information"
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|String
name|tableDesc
init|=
name|HiveStringUtils
operator|.
name|escapeJava
argument_list|(
name|tbl
operator|.
name|getTTable
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|tableDesc
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|PrimaryKeyInfo
operator|.
name|isPrimaryKeyInfoNotEmpty
argument_list|(
name|tbl
operator|.
name|getPrimaryKeyInfo
argument_list|()
argument_list|)
operator|||
name|ForeignKeyInfo
operator|.
name|isForeignKeyInfoNotEmpty
argument_list|(
name|tbl
operator|.
name|getForeignKeyInfo
argument_list|()
argument_list|)
operator|||
name|UniqueConstraint
operator|.
name|isUniqueConstraintNotEmpty
argument_list|(
name|tbl
operator|.
name|getUniqueKeyInfo
argument_list|()
argument_list|)
operator|||
name|NotNullConstraint
operator|.
name|isNotNullConstraintNotEmpty
argument_list|(
name|tbl
operator|.
name|getNotNullConstraint
argument_list|()
argument_list|)
operator|||
name|DefaultConstraint
operator|.
name|isCheckConstraintNotEmpty
argument_list|(
name|tbl
operator|.
name|getDefaultConstraint
argument_list|()
argument_list|)
operator|||
name|CheckConstraint
operator|.
name|isCheckConstraintNotEmpty
argument_list|(
name|tbl
operator|.
name|getCheckConstraint
argument_list|()
argument_list|)
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
operator|(
literal|"Constraints"
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|PrimaryKeyInfo
operator|.
name|isPrimaryKeyInfoNotEmpty
argument_list|(
name|tbl
operator|.
name|getPrimaryKeyInfo
argument_list|()
argument_list|)
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|tbl
operator|.
name|getPrimaryKeyInfo
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ForeignKeyInfo
operator|.
name|isForeignKeyInfoNotEmpty
argument_list|(
name|tbl
operator|.
name|getForeignKeyInfo
argument_list|()
argument_list|)
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|tbl
operator|.
name|getForeignKeyInfo
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|UniqueConstraint
operator|.
name|isUniqueConstraintNotEmpty
argument_list|(
name|tbl
operator|.
name|getUniqueKeyInfo
argument_list|()
argument_list|)
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|tbl
operator|.
name|getUniqueKeyInfo
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|NotNullConstraint
operator|.
name|isNotNullConstraintNotEmpty
argument_list|(
name|tbl
operator|.
name|getNotNullConstraint
argument_list|()
argument_list|)
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|tbl
operator|.
name|getNotNullConstraint
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DefaultConstraint
operator|.
name|isCheckConstraintNotEmpty
argument_list|(
name|tbl
operator|.
name|getDefaultConstraint
argument_list|()
argument_list|)
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|tbl
operator|.
name|getDefaultConstraint
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CheckConstraint
operator|.
name|isCheckConstraintNotEmpty
argument_list|(
name|tbl
operator|.
name|getCheckConstraint
argument_list|()
argument_list|)
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|tbl
operator|.
name|getCheckConstraint
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tbl
operator|.
name|getStorageHandlerInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
operator|(
literal|"StorageHandlerInfo"
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|tbl
operator|.
name|getStorageHandlerInfo
argument_list|()
operator|.
name|formatAsText
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|showTableStatus
parameter_list|(
name|DataOutputStream
name|outStream
parameter_list|,
name|Hive
name|db
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|List
argument_list|<
name|Table
argument_list|>
name|tbls
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|part
parameter_list|,
name|Partition
name|par
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|Iterator
argument_list|<
name|Table
argument_list|>
name|iterTables
init|=
name|tbls
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterTables
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// create a row per table name
name|Table
name|tbl
init|=
name|iterTables
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|tbl
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|tblLoc
init|=
literal|null
decl_stmt|;
name|String
name|inputFormattCls
init|=
literal|null
decl_stmt|;
name|String
name|outputFormattCls
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|par
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|par
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tblLoc
operator|=
name|par
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|inputFormattCls
operator|=
name|par
operator|.
name|getInputFormatClass
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|par
operator|.
name|getInputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|outputFormattCls
operator|=
name|par
operator|.
name|getOutputFormatClass
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|par
operator|.
name|getOutputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|tbl
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tblLoc
operator|=
name|tbl
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|inputFormattCls
operator|=
name|tbl
operator|.
name|getInputFormatClass
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|tbl
operator|.
name|getInputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|outputFormattCls
operator|=
name|tbl
operator|.
name|getOutputFormatClass
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|tbl
operator|.
name|getOutputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|String
name|owner
init|=
name|tbl
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
name|tbl
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|String
name|ddlCols
init|=
name|MetaStoreUtils
operator|.
name|getDDLFromFieldSchema
argument_list|(
literal|"columns"
argument_list|,
name|cols
argument_list|)
decl_stmt|;
name|boolean
name|isPartitioned
init|=
name|tbl
operator|.
name|isPartitioned
argument_list|()
decl_stmt|;
name|String
name|partitionCols
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|isPartitioned
condition|)
block|{
name|partitionCols
operator|=
name|MetaStoreUtils
operator|.
name|getDDLFromFieldSchema
argument_list|(
literal|"partition_columns"
argument_list|,
name|tbl
operator|.
name|getPartCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
operator|(
literal|"tableName:"
operator|+
name|tableName
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
operator|(
literal|"owner:"
operator|+
name|owner
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
operator|(
literal|"location:"
operator|+
name|tblLoc
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
operator|(
literal|"inputformat:"
operator|+
name|inputFormattCls
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
operator|(
literal|"outputformat:"
operator|+
name|outputFormattCls
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
operator|(
literal|"columns:"
operator|+
name|ddlCols
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
operator|(
literal|"partitioned:"
operator|+
name|isPartitioned
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
operator|(
literal|"partitionColumns:"
operator|+
name|partitionCols
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
comment|// output file system information
name|Path
name|tblPath
init|=
name|tbl
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isPartitioned
condition|)
block|{
if|if
condition|(
name|par
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Partition
name|curPart
range|:
name|db
operator|.
name|getPartitions
argument_list|(
name|tbl
argument_list|)
control|)
block|{
if|if
condition|(
name|curPart
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|locations
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|curPart
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|par
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|locations
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|par
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|tblPath
operator|!=
literal|null
condition|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|tblPath
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|locations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|writeFileSystemStats
argument_list|(
name|outStream
argument_list|,
name|conf
argument_list|,
name|locations
argument_list|,
name|tblPath
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FileData
block|{
specifier|public
name|long
name|totalFileSize
init|=
literal|0
decl_stmt|;
specifier|public
name|long
name|maxFileSize
init|=
literal|0
decl_stmt|;
specifier|public
name|long
name|minFileSize
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|public
name|long
name|lastAccessTime
init|=
literal|0
decl_stmt|;
specifier|public
name|long
name|lastUpdateTime
init|=
literal|0
decl_stmt|;
specifier|public
name|int
name|numOfFiles
init|=
literal|0
decl_stmt|;
name|int
name|numOfErasureCodedFiles
init|=
literal|0
decl_stmt|;
block|}
comment|// TODO: why is this in text formatter?!!
comment|//       This computes stats and should be in stats (de-duplicated too).
specifier|private
name|void
name|writeFileSystemStats
parameter_list|(
name|DataOutputStream
name|outStream
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|locations
parameter_list|,
name|Path
name|tblPath
parameter_list|,
name|boolean
name|partSpecified
parameter_list|,
name|int
name|indent
parameter_list|)
throws|throws
name|IOException
block|{
name|FileData
name|fd
init|=
operator|new
name|FileData
argument_list|()
decl_stmt|;
name|boolean
name|unknown
init|=
literal|false
decl_stmt|;
name|FileSystem
name|fs
init|=
name|tblPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// in case all files in locations do not exist
try|try
block|{
name|FileStatus
name|tmpStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|tblPath
argument_list|)
decl_stmt|;
name|fd
operator|.
name|lastAccessTime
operator|=
name|tmpStatus
operator|.
name|getAccessTime
argument_list|()
expr_stmt|;
name|fd
operator|.
name|lastUpdateTime
operator|=
name|tmpStatus
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|partSpecified
condition|)
block|{
comment|// check whether the part exists or not in fs
name|tmpStatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|locations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot access File System. File System status will be unknown: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|unknown
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|unknown
condition|)
block|{
for|for
control|(
name|Path
name|loc
range|:
name|locations
control|)
block|{
try|try
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|loc
argument_list|)
decl_stmt|;
comment|// no matter loc is the table location or part location, it must be a
comment|// directory.
if|if
condition|(
operator|!
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|processDir
argument_list|(
name|status
argument_list|,
name|fs
argument_list|,
name|fd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
name|String
name|unknownString
init|=
literal|"unknown"
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|indent
condition|;
name|k
operator|++
control|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|INDENT
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
literal|"totalNumberFiles:"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
operator|(
name|unknown
condition|?
name|unknownString
else|:
literal|""
operator|+
name|fd
operator|.
name|numOfFiles
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
if|if
condition|(
name|fd
operator|.
name|numOfErasureCodedFiles
operator|>
literal|0
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
literal|"totalNumberErasureCodedFiles:"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
operator|(
name|unknown
condition|?
name|unknownString
else|:
literal|""
operator|+
name|fd
operator|.
name|numOfErasureCodedFiles
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|indent
condition|;
name|k
operator|++
control|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|INDENT
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
literal|"totalFileSize:"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
operator|(
name|unknown
condition|?
name|unknownString
else|:
literal|""
operator|+
name|fd
operator|.
name|totalFileSize
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|indent
condition|;
name|k
operator|++
control|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|INDENT
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
literal|"maxFileSize:"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
operator|(
name|unknown
condition|?
name|unknownString
else|:
literal|""
operator|+
name|fd
operator|.
name|maxFileSize
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|indent
condition|;
name|k
operator|++
control|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|INDENT
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
literal|"minFileSize:"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fd
operator|.
name|numOfFiles
operator|>
literal|0
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
operator|(
name|unknown
condition|?
name|unknownString
else|:
literal|""
operator|+
name|fd
operator|.
name|minFileSize
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outStream
operator|.
name|write
argument_list|(
operator|(
name|unknown
condition|?
name|unknownString
else|:
literal|""
operator|+
literal|0
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|indent
condition|;
name|k
operator|++
control|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|INDENT
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
literal|"lastAccessTime:"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
operator|(
name|unknown
operator|||
name|fd
operator|.
name|lastAccessTime
operator|<
literal|0
operator|)
condition|?
name|unknownString
else|:
literal|""
operator|+
name|fd
operator|.
name|lastAccessTime
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|indent
condition|;
name|k
operator|++
control|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|Utilities
operator|.
name|INDENT
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
literal|"lastUpdateTime:"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
operator|(
name|unknown
condition|?
name|unknownString
else|:
literal|""
operator|+
name|fd
operator|.
name|lastUpdateTime
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processDir
parameter_list|(
name|FileStatus
name|status
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|FileData
name|fd
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|accessTime
init|=
name|status
operator|.
name|getAccessTime
argument_list|()
decl_stmt|;
name|long
name|updateTime
init|=
name|status
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|accessTime
operator|>
name|fd
operator|.
name|lastAccessTime
condition|)
block|{
name|fd
operator|.
name|lastAccessTime
operator|=
name|accessTime
expr_stmt|;
block|}
if|if
condition|(
name|updateTime
operator|>
name|fd
operator|.
name|lastUpdateTime
condition|)
block|{
name|fd
operator|.
name|lastUpdateTime
operator|=
name|updateTime
expr_stmt|;
block|}
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|currentStatus
range|:
name|files
control|)
block|{
if|if
condition|(
name|currentStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|processDir
argument_list|(
name|currentStatus
argument_list|,
name|fs
argument_list|,
name|fd
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|fd
operator|.
name|numOfFiles
operator|++
expr_stmt|;
if|if
condition|(
name|currentStatus
operator|.
name|isErasureCoded
argument_list|()
condition|)
block|{
name|fd
operator|.
name|numOfErasureCodedFiles
operator|++
expr_stmt|;
block|}
name|long
name|fileLen
init|=
name|currentStatus
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|fd
operator|.
name|totalFileSize
operator|+=
name|fileLen
expr_stmt|;
if|if
condition|(
name|fileLen
operator|>
name|fd
operator|.
name|maxFileSize
condition|)
block|{
name|fd
operator|.
name|maxFileSize
operator|=
name|fileLen
expr_stmt|;
block|}
if|if
condition|(
name|fileLen
operator|<
name|fd
operator|.
name|minFileSize
condition|)
block|{
name|fd
operator|.
name|minFileSize
operator|=
name|fileLen
expr_stmt|;
block|}
name|accessTime
operator|=
name|currentStatus
operator|.
name|getAccessTime
argument_list|()
expr_stmt|;
name|updateTime
operator|=
name|currentStatus
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|accessTime
operator|>
name|fd
operator|.
name|lastAccessTime
condition|)
block|{
name|fd
operator|.
name|lastAccessTime
operator|=
name|accessTime
expr_stmt|;
block|}
if|if
condition|(
name|updateTime
operator|>
name|fd
operator|.
name|lastUpdateTime
condition|)
block|{
name|fd
operator|.
name|lastUpdateTime
operator|=
name|updateTime
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Show the table partitions.    */
annotation|@
name|Override
specifier|public
name|void
name|showTablePartitions
parameter_list|(
name|DataOutputStream
name|outStream
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|parts
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
comment|// Partition names are URL encoded. We decode the names unless Hive
comment|// is configured to use the encoded names.
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|!=
literal|null
operator|&&
name|ss
operator|.
name|getConf
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ss
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DECODE_PARTITION_NAME
argument_list|)
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|part
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outStream
operator|.
name|write
argument_list|(
name|FileUtils
operator|.
name|unescapePathName
argument_list|(
name|part
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Show the list of databases    */
annotation|@
name|Override
specifier|public
name|void
name|showDatabases
parameter_list|(
name|DataOutputStream
name|outStream
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|databases
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
for|for
control|(
name|String
name|database
range|:
name|databases
control|)
block|{
comment|// create a row per database name
name|outStream
operator|.
name|write
argument_list|(
name|database
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Describe a database    */
annotation|@
name|Override
specifier|public
name|void
name|showDatabaseDescription
parameter_list|(
name|DataOutputStream
name|outStream
parameter_list|,
name|String
name|database
parameter_list|,
name|String
name|comment
parameter_list|,
name|String
name|location
parameter_list|,
name|String
name|ownerName
parameter_list|,
name|PrincipalType
name|ownerType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|outStream
operator|.
name|write
argument_list|(
name|database
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|comment
operator|!=
literal|null
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|HiveStringUtils
operator|.
name|escapeJava
argument_list|(
name|comment
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|location
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|ownerName
operator|!=
literal|null
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|ownerName
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|ownerType
operator|!=
literal|null
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|ownerType
operator|.
name|name
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
operator|&&
operator|!
name|params
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|params
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF_8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|showResourcePlans
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|List
argument_list|<
name|WMResourcePlan
argument_list|>
name|resourcePlans
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
for|for
control|(
name|WMResourcePlan
name|plan
range|:
name|resourcePlans
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|plan
operator|.
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|plan
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|plan
operator|.
name|isSetQueryParallelism
argument_list|()
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|plan
operator|.
name|getQueryParallelism
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|write
argument_list|(
name|out
argument_list|,
literal|"null"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|plan
operator|.
name|isSetDefaultPoolPath
argument_list|()
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|plan
operator|.
name|getDefaultPoolPath
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|write
argument_list|(
name|out
argument_list|,
literal|"null"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Class to print text records for resource plans in the following format:    *     *<rp_name>[status=<STATUS>,parallelism=<parallelism>,defaultPool=<defaultPool>]    *<queue_name>[allocFraction=<fraction>,schedulingPolicy=<policy>,parallelism=<parallelism>]    *><trigger_name>: if(<triggerExpression>){<actionExpression>}    */
specifier|private
specifier|static
class|class
name|TextRPFormatter
implements|implements
name|MetaDataFormatUtils
operator|.
name|RPFormatter
block|{
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|INDENT
init|=
name|str
argument_list|(
literal|"    "
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|INDENT2
init|=
name|str
argument_list|(
literal|" |  "
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|INDENT_BRANCH
init|=
name|str
argument_list|(
literal|" +  "
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DataOutputStream
name|out
decl_stmt|;
specifier|private
name|int
name|indentLevel
init|=
literal|0
decl_stmt|;
name|TextRPFormatter
parameter_list|(
name|DataOutputStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startRP
parameter_list|(
name|String
name|rpName
parameter_list|,
name|Object
modifier|...
name|kvPairs
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|out
argument_list|,
name|rpName
argument_list|)
expr_stmt|;
name|writeFields
argument_list|(
name|kvPairs
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endRP
parameter_list|()
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|startPools
parameter_list|()
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|endPools
parameter_list|()
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|startPool
parameter_list|(
name|String
name|poolName
parameter_list|,
name|Object
modifier|...
name|kvPairs
parameter_list|)
throws|throws
name|IOException
block|{
operator|++
name|indentLevel
expr_stmt|;
name|writeIndent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|out
argument_list|,
name|poolName
argument_list|)
expr_stmt|;
name|writeFields
argument_list|(
name|kvPairs
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endPool
parameter_list|()
throws|throws
name|IOException
block|{
operator|--
name|indentLevel
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startTriggers
parameter_list|()
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|startMappings
parameter_list|()
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|endTriggers
parameter_list|()
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|endMappings
parameter_list|()
throws|throws
name|IOException
block|{     }
specifier|private
name|void
name|writeFields
parameter_list|(
name|Object
modifier|...
name|kvPairs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|kvPairs
operator|.
name|length
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected pairs, got: "
operator|+
name|kvPairs
operator|.
name|length
argument_list|)
throw|;
block|}
if|if
condition|(
name|kvPairs
operator|.
name|length
operator|<
literal|2
condition|)
block|{
return|return;
block|}
name|out
operator|.
name|write
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|kvPairs
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|(
name|kvPairs
index|[
literal|1
index|]
operator|==
literal|null
condition|?
literal|"null"
else|:
name|kvPairs
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
operator|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|kvPairs
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|kvPairs
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|(
name|kvPairs
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|null
condition|?
literal|"null"
else|:
name|kvPairs
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|toString
argument_list|()
operator|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|formatTrigger
parameter_list|(
name|String
name|triggerName
parameter_list|,
name|String
name|actionExpression
parameter_list|,
name|String
name|triggerExpression
parameter_list|)
throws|throws
name|IOException
block|{
name|writeIndent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|out
argument_list|,
literal|"trigger "
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|out
argument_list|,
name|triggerName
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|out
argument_list|,
literal|": if ("
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|out
argument_list|,
name|triggerExpression
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|out
argument_list|,
literal|") { "
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|out
argument_list|,
name|actionExpression
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|out
argument_list|,
literal|" }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|formatMappingType
parameter_list|(
name|String
name|type
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|maxList
init|=
literal|5
decl_stmt|;
name|writeIndent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|out
argument_list|,
literal|"mapped for "
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|type
operator|.
name|toLowerCase
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|names
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|write
argument_list|(
name|out
argument_list|,
literal|"s: "
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|Math
operator|.
name|min
argument_list|(
name|maxList
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|write
argument_list|(
name|out
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|remaining
init|=
name|names
operator|.
name|size
argument_list|()
operator|-
name|count
decl_stmt|;
if|if
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
operator|(
literal|" and "
operator|+
name|remaining
operator|+
literal|" others"
operator|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeIndent
parameter_list|(
name|boolean
name|isPool
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indentLevel
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|INDENT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isPool
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|INDENT_BRANCH
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|INDENT
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|INDENT2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|showFullResourcePlan
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|WMFullResourcePlan
name|fullResourcePlan
parameter_list|)
throws|throws
name|HiveException
block|{
name|MetaDataFormatUtils
operator|.
name|formatFullRP
argument_list|(
operator|new
name|TextRPFormatter
argument_list|(
name|out
argument_list|)
argument_list|,
name|fullResourcePlan
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|str
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|write
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|str
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showErrors
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|WMValidateResourcePlanResponse
name|response
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
for|for
control|(
name|String
name|error
range|:
name|response
operator|.
name|getErrors
argument_list|()
control|)
block|{
name|write
argument_list|(
name|out
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|warning
range|:
name|response
operator|.
name|getWarnings
argument_list|()
control|)
block|{
name|write
argument_list|(
name|out
argument_list|,
literal|"warn: "
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|out
argument_list|,
name|warning
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|terminator
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

