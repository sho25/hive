begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedExpressions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncFloorDecimalToDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncFloorDoubleToLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|FuncFloorLongToLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"floor"
argument_list|,
name|value
operator|=
literal|"_FUNC_(x) - Find the largest integer not greater than x"
argument_list|,
name|extended
operator|=
literal|"Example:\n"
operator|+
literal|"> SELECT _FUNC_(-0.1) FROM src LIMIT 1;\n"
operator|+
literal|"  -1\n"
operator|+
literal|"> SELECT _FUNC_(5) FROM src LIMIT 1;\n"
operator|+
literal|"  5"
argument_list|)
annotation|@
name|VectorizedExpressions
argument_list|(
block|{
name|FuncFloorLongToLong
operator|.
name|class
block|,
name|FuncFloorDoubleToLong
operator|.
name|class
block|,
name|FuncFloorDecimalToDecimal
operator|.
name|class
block|}
argument_list|)
specifier|public
specifier|final
class|class
name|GenericUDFFloor
extends|extends
name|GenericUDFFloorCeilBase
block|{
specifier|public
name|GenericUDFFloor
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|opDisplayName
operator|=
literal|"floor"
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|LongWritable
name|evaluate
parameter_list|(
name|DoubleWritable
name|input
parameter_list|)
block|{
name|longWritable
operator|.
name|set
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|input
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|longWritable
return|;
block|}
annotation|@
name|Override
specifier|protected
name|HiveDecimalWritable
name|evaluate
parameter_list|(
name|HiveDecimalWritable
name|input
parameter_list|)
block|{
name|decimalWritable
operator|.
name|set
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|decimalWritable
operator|.
name|mutateSetScale
argument_list|(
literal|0
argument_list|,
name|HiveDecimal
operator|.
name|ROUND_FLOOR
argument_list|)
expr_stmt|;
return|return
name|decimalWritable
return|;
block|}
block|}
end_class

end_unit

