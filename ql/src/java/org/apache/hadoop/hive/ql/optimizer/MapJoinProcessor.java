begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ObjectPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|AbstractMapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|LateralViewJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SMBMapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ScriptOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UnionOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
operator|.
name|Vectorizer
operator|.
name|EnabledOverride
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|GenMapRedWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDescUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FetchWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinCondDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredLocalWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SMBJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of one of the rule-based map join optimization. User passes hints to specify  * map-joins and during this optimization, all user specified map joins are converted to MapJoins -  * the reduce sink operator above the join are converted to map sink operators. In future, once  * statistics are implemented, this transformation can also be done based on costs.  */
end_comment

begin_class
specifier|public
class|class
name|MapJoinProcessor
extends|extends
name|Transform
block|{
comment|// mapjoin table descriptor contains a key descriptor which needs the field schema
comment|// (column type + column name). The column name is not really used anywhere, but it
comment|// needs to be passed. Use the string defined below for that.
specifier|private
specifier|static
specifier|final
name|String
name|MAPJOINKEY_FIELDPREFIX
init|=
literal|"mapjoinkey"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MapJoinProcessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|MapJoinProcessor
parameter_list|()
block|{   }
comment|/**    * Generate the MapRed Local Work for the given map-join operator    *    * @param newWork    * @param mapJoinOp    *          map-join operator for which local work needs to be generated.    * @param bigTablePos    * @throws SemanticException    */
specifier|private
specifier|static
name|void
name|genMapJoinLocalWork
parameter_list|(
name|MapredWork
name|newWork
parameter_list|,
name|MapJoinOperator
name|mapJoinOp
parameter_list|,
name|int
name|bigTablePos
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// keep the small table alias to avoid concurrent modification exception
name|ArrayList
argument_list|<
name|String
argument_list|>
name|smallTableAliasList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// create a new  MapredLocalWork
name|MapredLocalWork
name|newLocalWork
init|=
operator|new
name|MapredLocalWork
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
argument_list|,
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|FetchWork
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|entry
range|:
name|newWork
operator|.
name|getMapWork
argument_list|()
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|alias
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// if the table scan is for big table; then skip it
comment|// tracing down the operator tree from the table scan operator
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
init|=
name|op
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
init|=
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|childOp
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|childOp
operator|.
name|equals
argument_list|(
name|mapJoinOp
argument_list|)
operator|)
condition|)
block|{
name|parentOp
operator|=
name|childOp
expr_stmt|;
assert|assert
name|parentOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
name|childOp
operator|=
name|parentOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|childOp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Cannot find join op by tracing down the table scan operator tree"
argument_list|)
throw|;
block|}
comment|// skip the big table pos
name|int
name|i
init|=
name|childOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|parentOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|bigTablePos
condition|)
block|{
continue|continue;
block|}
comment|// set alias to work and put into smallTableAliasList
name|newLocalWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|smallTableAliasList
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
comment|// get input path and remove this alias from pathToAlias
comment|// because this file will be fetched by fetch operator
name|LinkedHashMap
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToAliases
init|=
name|newWork
operator|.
name|getMapWork
argument_list|()
operator|.
name|getPathToAliases
argument_list|()
decl_stmt|;
comment|// keep record all the input path for this alias
name|HashSet
argument_list|<
name|Path
argument_list|>
name|pathSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Path
argument_list|>
name|emptyPath
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry2
range|:
name|pathToAliases
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Path
name|path
init|=
name|entry2
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
name|entry2
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|contains
argument_list|(
name|alias
argument_list|)
condition|)
block|{
comment|// add to path set
name|pathSet
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|//remove this alias from the alias list
name|list
operator|.
name|remove
argument_list|(
name|alias
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|emptyPath
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//remove the path, with which no alias associates
for|for
control|(
name|Path
name|path
range|:
name|emptyPath
control|)
block|{
name|newWork
operator|.
name|getMapWork
argument_list|()
operator|.
name|removePathToAlias
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|// create fetch work
name|FetchWork
name|fetchWork
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|partDir
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PartitionDesc
argument_list|>
name|partDesc
init|=
operator|new
name|ArrayList
argument_list|<
name|PartitionDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|tablePath
range|:
name|pathSet
control|)
block|{
name|PartitionDesc
name|partitionDesc
init|=
name|newWork
operator|.
name|getMapWork
argument_list|()
operator|.
name|getPathToPartitionInfo
argument_list|()
operator|.
name|get
argument_list|(
name|tablePath
argument_list|)
decl_stmt|;
comment|// create fetchwork for non partitioned table
if|if
condition|(
name|partitionDesc
operator|.
name|getPartSpec
argument_list|()
operator|==
literal|null
operator|||
name|partitionDesc
operator|.
name|getPartSpec
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|fetchWork
operator|=
operator|new
name|FetchWork
argument_list|(
name|tablePath
argument_list|,
name|partitionDesc
operator|.
name|getTableDesc
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// if table is partitioned,add partDir and partitionDesc
name|partDir
operator|.
name|add
argument_list|(
name|tablePath
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|add
argument_list|(
name|partitionDesc
argument_list|)
expr_stmt|;
block|}
comment|// create fetchwork for partitioned table
if|if
condition|(
name|fetchWork
operator|==
literal|null
condition|)
block|{
name|TableDesc
name|table
init|=
name|newWork
operator|.
name|getMapWork
argument_list|()
operator|.
name|getAliasToPartnInfo
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|getTableDesc
argument_list|()
decl_stmt|;
name|fetchWork
operator|=
operator|new
name|FetchWork
argument_list|(
name|partDir
argument_list|,
name|partDesc
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
comment|// set alias to fetch work
name|newLocalWork
operator|.
name|getAliasToFetchWork
argument_list|()
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|fetchWork
argument_list|)
expr_stmt|;
block|}
comment|// remove small table ailias from aliasToWork;Avoid concurrent modification
for|for
control|(
name|String
name|alias
range|:
name|smallTableAliasList
control|)
block|{
name|newWork
operator|.
name|getMapWork
argument_list|()
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|remove
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
comment|// set up local work
name|newWork
operator|.
name|getMapWork
argument_list|()
operator|.
name|setMapRedLocalWork
argument_list|(
name|newLocalWork
argument_list|)
expr_stmt|;
comment|// remove reducer
name|newWork
operator|.
name|setReduceWork
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Convert the join to a map-join and also generate any local work needed.    *    * @param newWork MapredWork in which the conversion is to happen    * @param op    *          The join operator that needs to be converted to map-join    * @param mapJoinPos    * @throws SemanticException    */
specifier|public
specifier|static
name|void
name|genMapJoinOpAndLocalWork
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|MapredWork
name|newWork
parameter_list|,
name|JoinOperator
name|op
parameter_list|,
name|int
name|mapJoinPos
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// generate the map join operator; already checked the map join
name|MapJoinOperator
name|newMapJoinOp
init|=
operator|new
name|MapJoinProcessor
argument_list|()
operator|.
name|convertMapJoin
argument_list|(
name|conf
argument_list|,
name|op
argument_list|,
name|newWork
operator|.
name|getMapWork
argument_list|()
operator|.
name|isLeftInputJoin
argument_list|()
argument_list|,
name|newWork
operator|.
name|getMapWork
argument_list|()
operator|.
name|getBaseSrc
argument_list|()
argument_list|,
name|newWork
operator|.
name|getMapWork
argument_list|()
operator|.
name|getMapAliases
argument_list|()
argument_list|,
name|mapJoinPos
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|genLocalWorkForMapJoin
argument_list|(
name|newWork
argument_list|,
name|newMapJoinOp
argument_list|,
name|mapJoinPos
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|genLocalWorkForMapJoin
parameter_list|(
name|MapredWork
name|newWork
parameter_list|,
name|MapJoinOperator
name|newMapJoinOp
parameter_list|,
name|int
name|mapJoinPos
parameter_list|)
throws|throws
name|SemanticException
block|{
try|try
block|{
comment|// generate the local work for the big table alias
name|MapJoinProcessor
operator|.
name|genMapJoinLocalWork
argument_list|(
name|newWork
argument_list|,
name|newMapJoinOp
argument_list|,
name|mapJoinPos
argument_list|)
expr_stmt|;
comment|// clean up the mapred work
name|newWork
operator|.
name|getMapWork
argument_list|()
operator|.
name|setLeftInputJoin
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|newWork
operator|.
name|getMapWork
argument_list|()
operator|.
name|setBaseSrc
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|newWork
operator|.
name|getMapWork
argument_list|()
operator|.
name|setMapAliases
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Failed to generate new mapJoin operator "
operator|+
literal|"by exception : "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|checkParentOperatorType
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
operator|!
name|op
operator|.
name|opAllowedBeforeMapJoin
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|OPERATOR_NOT_ALLOWED_WITH_MAPJOIN
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|op
operator|.
name|getParentOperators
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
range|:
name|op
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|checkParentOperatorType
argument_list|(
name|parentOp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|checkChildOperatorType
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
operator|!
name|op
operator|.
name|opAllowedAfterMapJoin
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|OPERATOR_NOT_ALLOWED_WITH_MAPJOIN
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
range|:
name|op
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|checkChildOperatorType
argument_list|(
name|childOp
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|validateMapJoinTypes
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
throws|throws
name|SemanticException
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
range|:
name|op
operator|.
name|getParentOperators
argument_list|()
control|)
block|{
name|checkParentOperatorType
argument_list|(
name|parentOp
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
range|:
name|op
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|checkChildOperatorType
argument_list|(
name|childOp
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * convert a regular join to a a map-side join.    *    * @param opParseCtxMap    * @param op    *          join operator    * @param joinTree    *          qb join tree    * @param mapJoinPos    *          position of the source to be read as part of map-reduce framework. All other sources    *          are cached in memory    * @param noCheckOuterJoin    * @param validateMapJoinTree    */
specifier|public
name|MapJoinOperator
name|convertMapJoin
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|JoinOperator
name|op
parameter_list|,
name|boolean
name|leftInputJoin
parameter_list|,
name|String
index|[]
name|baseSrc
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|mapAliases
parameter_list|,
name|int
name|mapJoinPos
parameter_list|,
name|boolean
name|noCheckOuterJoin
parameter_list|,
name|boolean
name|validateMapJoinTree
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// outer join cannot be performed on a table which is being cached
name|JoinDesc
name|desc
init|=
name|op
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|JoinCondDesc
index|[]
name|condns
init|=
name|desc
operator|.
name|getConds
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|noCheckOuterJoin
condition|)
block|{
if|if
condition|(
name|checkMapJoin
argument_list|(
name|mapJoinPos
argument_list|,
name|condns
argument_list|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|NO_OUTER_MAPJOIN
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Walk over all the sources (which are guaranteed to be reduce sink
comment|// operators).
comment|// The join outputs a concatenation of all the inputs.
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentOps
init|=
name|op
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|newParentOps
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|oldReduceSinkParentOps
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// found a source which is not to be stored in memory
if|if
condition|(
name|leftInputJoin
condition|)
block|{
comment|// assert mapJoinPos == 0;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
init|=
name|parentOps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
name|parentOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|grandParentOp
init|=
name|parentOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|oldReduceSinkParentOps
operator|.
name|add
argument_list|(
name|parentOp
argument_list|)
expr_stmt|;
name|newParentOps
operator|.
name|add
argument_list|(
name|grandParentOp
argument_list|)
expr_stmt|;
block|}
name|byte
name|pos
init|=
literal|0
decl_stmt|;
comment|// Remove parent reduce-sink operators
for|for
control|(
name|String
name|src
range|:
name|baseSrc
control|)
block|{
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
init|=
name|parentOps
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
assert|assert
name|parentOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|grandParentOp
init|=
name|parentOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|oldReduceSinkParentOps
operator|.
name|add
argument_list|(
name|parentOp
argument_list|)
expr_stmt|;
name|newParentOps
operator|.
name|add
argument_list|(
name|grandParentOp
argument_list|)
expr_stmt|;
block|}
name|pos
operator|++
expr_stmt|;
block|}
comment|// create the map-join operator
name|MapJoinOperator
name|mapJoinOp
init|=
name|convertJoinOpMapJoinOp
argument_list|(
name|conf
argument_list|,
name|op
argument_list|,
name|leftInputJoin
argument_list|,
name|baseSrc
argument_list|,
name|mapAliases
argument_list|,
name|mapJoinPos
argument_list|,
name|noCheckOuterJoin
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapJoinOp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// remove old parents
for|for
control|(
name|pos
operator|=
literal|0
init|;
name|pos
operator|<
name|newParentOps
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|newParentOps
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|replaceChild
argument_list|(
name|oldReduceSinkParentOps
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|,
name|mapJoinOp
argument_list|)
expr_stmt|;
block|}
name|mapJoinOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|removeAll
argument_list|(
name|oldReduceSinkParentOps
argument_list|)
expr_stmt|;
name|mapJoinOp
operator|.
name|setParentOperators
argument_list|(
name|newParentOps
argument_list|)
expr_stmt|;
comment|// make sure only map-joins can be performed.
if|if
condition|(
name|validateMapJoinTree
condition|)
block|{
name|validateMapJoinTypes
argument_list|(
name|mapJoinOp
argument_list|)
expr_stmt|;
block|}
comment|// change the children of the original join operator to point to the map
comment|// join operator
return|return
name|mapJoinOp
return|;
block|}
specifier|public
specifier|static
name|boolean
name|onExpressionHasNullSafes
parameter_list|(
name|JoinDesc
name|desc
parameter_list|)
block|{
name|boolean
index|[]
name|nullSafes
init|=
name|desc
operator|.
name|getNullSafes
argument_list|()
decl_stmt|;
if|if
condition|(
name|nullSafes
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|boolean
name|nullSafe
range|:
name|nullSafes
control|)
block|{
if|if
condition|(
name|nullSafe
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|checkFullOuterMapJoinCompatible
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|JoinOperator
name|joinOp
parameter_list|)
throws|throws
name|SemanticException
block|{
name|JoinDesc
name|joinDesc
init|=
name|joinOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// Make sure all key and value expressions are columns.
for|for
control|(
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|mapEntry
range|:
name|joinDesc
operator|.
name|getExprs
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|exprList
init|=
name|mapEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|exprList
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|expr
operator|instanceof
name|ExprNodeColumnDesc
operator|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"FULL OUTER MapJoin: only column expressions are supported "
operator|+
name|expr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
comment|// Check for supported key data types.
name|Byte
index|[]
name|order
init|=
name|joinDesc
operator|.
name|getTagOrder
argument_list|()
decl_stmt|;
name|ExprNodeDesc
index|[]
index|[]
name|joinKeysArray
init|=
name|joinDesc
operator|.
name|getJoinKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|order
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|pos
init|=
name|order
index|[
name|i
index|]
decl_stmt|;
name|ExprNodeDesc
index|[]
name|keyExprs
init|=
name|joinKeysArray
index|[
name|pos
index|]
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|keyExpr
range|:
name|keyExprs
control|)
block|{
name|TypeInfo
name|typeInfo
init|=
name|keyExpr
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
comment|// Verify we handle the key column types for an optimized table.  This is the effectively
comment|// the same check used in Tez HashTableLoader.
if|if
condition|(
operator|!
name|MapJoinKey
operator|.
name|isSupportedField
argument_list|(
name|typeInfo
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"FULL OUTER MapJoin not enabled: "
operator|+
literal|" key type "
operator|+
name|typeInfo
operator|.
name|toString
argument_list|()
operator|+
literal|" not supported"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|onExpressionHasNullSafes
argument_list|(
name|joinDesc
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"FULL OUTER MapJoin not enabled: "
operator|+
literal|"nullsafe not supported"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|boolean
name|isVectorizationMapJoinNativeEnabled
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_MAPJOIN_NATIVE_ENABLED
argument_list|)
decl_stmt|;
name|boolean
name|isHybridHashJoin
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEUSEHYBRIDGRACEHASHJOIN
argument_list|)
decl_stmt|;
if|if
condition|(
name|isVectorizationMapJoinNativeEnabled
operator|&&
name|isHybridHashJoin
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"FULL OUTER MapJoin not enabled: "
operator|+
literal|"Native Vector MapJoin and Hybrid Grace not supported"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
name|joinDesc
operator|.
name|getResidualFilterExprs
argument_list|()
operator|!=
literal|null
operator|&&
name|joinDesc
operator|.
name|getResidualFilterExprs
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"FULL OUTER MapJoin not enabled: "
operator|+
literal|"non-equi joins not supported"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|precheckFullOuter
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|JoinOperator
name|joinOp
parameter_list|)
throws|throws
name|SemanticException
block|{
name|JoinDesc
name|joinDesc
init|=
name|joinOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|JoinCondDesc
index|[]
name|conds
init|=
name|joinDesc
operator|.
name|getConds
argument_list|()
decl_stmt|;
comment|/*      * Are we even being asked to do a FULL OUTER JOIN?      */
name|boolean
name|hasFullOuterJoin
init|=
literal|false
decl_stmt|;
for|for
control|(
name|JoinCondDesc
name|cond
range|:
name|conds
control|)
block|{
if|if
condition|(
name|cond
operator|.
name|getType
argument_list|()
operator|==
name|JoinDesc
operator|.
name|FULL_OUTER_JOIN
condition|)
block|{
name|hasFullOuterJoin
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|hasFullOuterJoin
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|conds
operator|.
name|length
operator|>
literal|1
condition|)
block|{
comment|// No multiple condition FULL OUTER MapJoin.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"FULL OUTER MapJoin not enabled: multiple JOIN conditions not supported"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isFullOuterMapEnabled
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|JoinOperator
name|joinOp
parameter_list|)
throws|throws
name|SemanticException
block|{
specifier|final
name|String
name|testMapJoinFullOuterOverrideString
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TEST_MAPJOINFULLOUTER_OVERRIDE
argument_list|)
decl_stmt|;
name|EnabledOverride
name|mapJoinFullOuterOverride
init|=
name|EnabledOverride
operator|.
name|nameMap
operator|.
name|get
argument_list|(
name|testMapJoinFullOuterOverrideString
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isEnabled
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPJOINFULLOUTER
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|mapJoinFullOuterOverride
condition|)
block|{
case|case
name|NONE
case|:
block|{
if|if
condition|(
operator|!
name|isEnabled
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"FULL OUTER MapJoin not enabled: "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPJOINFULLOUTER
operator|.
name|varname
operator|+
literal|" is false"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
break|break;
case|case
name|DISABLE
case|:
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"FULL OUTER MapJoin not enabled: "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TEST_MAPJOINFULLOUTER_OVERRIDE
operator|.
name|varname
operator|+
literal|" is disable ("
operator|+
literal|" "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPJOINFULLOUTER
operator|.
name|varname
operator|+
literal|" is "
operator|+
name|isEnabled
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
case|case
name|ENABLE
case|:
comment|// Different parts of the code may rely on this being set...
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPJOINFULLOUTER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"FULL OUTER MapJoin is enabled: "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TEST_MAPJOINFULLOUTER_OVERRIDE
operator|.
name|varname
operator|+
literal|" is enable ("
operator|+
literal|" "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPJOINFULLOUTER
operator|.
name|varname
operator|+
literal|" is "
operator|+
name|isEnabled
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected vectorization enabled override "
operator|+
name|mapJoinFullOuterOverride
argument_list|)
throw|;
block|}
specifier|final
name|String
name|engine
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isTezEngine
init|=
name|engine
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"tez"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isTezEngine
condition|)
block|{
comment|// Only Tez for now.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"FULL OUTER MapJoin not enabled: Only Tez engine supported"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/*      * Optimized Hash Table (i.e. not old-style MR HashMap).      */
specifier|final
name|boolean
name|isOptimizedHashTableEnabled
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPJOINUSEOPTIMIZEDTABLE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isOptimizedHashTableEnabled
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"FULL OUTER MapJoin not enabled: "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPJOINUSEOPTIMIZEDTABLE
operator|.
name|varname
operator|+
literal|" is false"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|boolean
name|isCompatibleFullOuterMapJoin
init|=
name|checkFullOuterMapJoinCompatible
argument_list|(
name|hiveConf
argument_list|,
name|joinOp
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isCompatibleFullOuterMapJoin
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"FULL OUTER MapJoin enabled"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isFullOuterEnabledForDynamicPartitionHashJoin
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|JoinOperator
name|joinOp
parameter_list|)
throws|throws
name|SemanticException
block|{
name|JoinDesc
name|joinDesc
init|=
name|joinOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|MapJoinOperator
name|convertJoinOpMapJoinOp
parameter_list|(
name|HiveConf
name|hconf
parameter_list|,
name|JoinOperator
name|op
parameter_list|,
name|boolean
name|leftInputJoin
parameter_list|,
name|String
index|[]
name|baseSrc
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|mapAliases
parameter_list|,
name|int
name|mapJoinPos
parameter_list|,
name|boolean
name|noCheckOuterJoin
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
name|convertJoinOpMapJoinOp
argument_list|(
name|hconf
argument_list|,
name|op
argument_list|,
name|leftInputJoin
argument_list|,
name|baseSrc
argument_list|,
name|mapAliases
argument_list|,
name|mapJoinPos
argument_list|,
name|noCheckOuterJoin
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MapJoinOperator
name|convertJoinOpMapJoinOp
parameter_list|(
name|HiveConf
name|hconf
parameter_list|,
name|JoinOperator
name|op
parameter_list|,
name|boolean
name|leftInputJoin
parameter_list|,
name|String
index|[]
name|baseSrc
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|mapAliases
parameter_list|,
name|int
name|mapJoinPos
parameter_list|,
name|boolean
name|noCheckOuterJoin
parameter_list|,
name|boolean
name|adjustParentsChildren
parameter_list|)
throws|throws
name|SemanticException
block|{
name|MapJoinDesc
name|mapJoinDescriptor
init|=
name|getMapJoinDesc
argument_list|(
name|hconf
argument_list|,
name|op
argument_list|,
name|leftInputJoin
argument_list|,
name|baseSrc
argument_list|,
name|mapAliases
argument_list|,
name|mapJoinPos
argument_list|,
name|noCheckOuterJoin
argument_list|,
name|adjustParentsChildren
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapJoinDescriptor
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// reduce sink row resolver used to generate map join op
name|RowSchema
name|outputRS
init|=
name|op
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|MapJoinOperator
name|mapJoinOp
init|=
operator|(
name|MapJoinOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|op
operator|.
name|getCompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDescriptor
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|outputRS
operator|.
name|getSignature
argument_list|()
argument_list|)
argument_list|,
name|op
operator|.
name|getParentOperators
argument_list|()
argument_list|)
decl_stmt|;
name|mapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|setReversedExprs
argument_list|(
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getReversedExprs
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
name|op
operator|.
name|getColumnExprMap
argument_list|()
decl_stmt|;
name|mapJoinOp
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|childOps
init|=
name|op
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
range|:
name|childOps
control|)
block|{
name|childOp
operator|.
name|replaceParent
argument_list|(
name|op
argument_list|,
name|mapJoinOp
argument_list|)
expr_stmt|;
block|}
name|mapJoinOp
operator|.
name|setPosToAliasMap
argument_list|(
name|op
operator|.
name|getPosToAliasMap
argument_list|()
argument_list|)
expr_stmt|;
name|mapJoinOp
operator|.
name|setChildOperators
argument_list|(
name|childOps
argument_list|)
expr_stmt|;
name|op
operator|.
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|op
operator|.
name|setParentOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|mapJoinOp
return|;
block|}
specifier|private
specifier|static
name|boolean
name|needValueIndex
parameter_list|(
name|int
index|[]
name|valueIndex
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueIndex
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|valueIndex
index|[
name|i
index|]
operator|!=
operator|-
name|i
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * convert a sortmerge join to a a map-side join.    *    * @param opParseCtxMap    * @param smbJoinOp    *          join operator    * @param joinTree    *          qb join tree    * @param bigTablePos    *          position of the source to be read as part of map-reduce framework. All other sources    *          are cached in memory    * @param noCheckOuterJoin    */
specifier|public
specifier|static
name|MapJoinOperator
name|convertSMBJoinToMapJoin
parameter_list|(
name|HiveConf
name|hconf
parameter_list|,
name|SMBMapJoinOperator
name|smbJoinOp
parameter_list|,
name|int
name|bigTablePos
parameter_list|,
name|boolean
name|noCheckOuterJoin
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Create a new map join operator
name|SMBJoinDesc
name|smbJoinDesc
init|=
name|smbJoinOp
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyCols
init|=
name|smbJoinDesc
operator|.
name|getKeys
argument_list|()
operator|.
name|get
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|TableDesc
name|keyTableDesc
init|=
name|PlanUtils
operator|.
name|getMapJoinKeyTableDesc
argument_list|(
name|hconf
argument_list|,
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|keyCols
argument_list|,
name|MAPJOINKEY_FIELDPREFIX
argument_list|)
argument_list|)
decl_stmt|;
name|MapJoinDesc
name|mapJoinDesc
init|=
operator|new
name|MapJoinDesc
argument_list|(
name|smbJoinDesc
operator|.
name|getKeys
argument_list|()
argument_list|,
name|keyTableDesc
argument_list|,
name|smbJoinDesc
operator|.
name|getExprs
argument_list|()
argument_list|,
name|smbJoinDesc
operator|.
name|getValueTblDescs
argument_list|()
argument_list|,
name|smbJoinDesc
operator|.
name|getValueTblDescs
argument_list|()
argument_list|,
name|smbJoinDesc
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|,
name|bigTablePos
argument_list|,
name|smbJoinDesc
operator|.
name|getConds
argument_list|()
argument_list|,
name|smbJoinDesc
operator|.
name|getFilters
argument_list|()
argument_list|,
name|smbJoinDesc
operator|.
name|isNoOuterJoin
argument_list|()
argument_list|,
name|smbJoinDesc
operator|.
name|getDumpFilePrefix
argument_list|()
argument_list|,
name|smbJoinDesc
operator|.
name|getMemoryMonitorInfo
argument_list|()
argument_list|,
name|smbJoinDesc
operator|.
name|getInMemoryDataSize
argument_list|()
argument_list|)
decl_stmt|;
name|mapJoinDesc
operator|.
name|setStatistics
argument_list|(
name|smbJoinDesc
operator|.
name|getStatistics
argument_list|()
argument_list|)
expr_stmt|;
name|mapJoinDesc
operator|.
name|setColumnExprMap
argument_list|(
name|smbJoinDesc
operator|.
name|getColumnExprMap
argument_list|()
argument_list|)
expr_stmt|;
name|RowSchema
name|joinRS
init|=
name|smbJoinOp
operator|.
name|getSchema
argument_list|()
decl_stmt|;
comment|// The mapjoin has the same schema as the join operator
name|MapJoinOperator
name|mapJoinOp
init|=
operator|(
name|MapJoinOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|smbJoinOp
operator|.
name|getCompilationOpContext
argument_list|()
argument_list|,
name|mapJoinDesc
argument_list|,
name|joinRS
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// change the children of the original join operator to point to the map
comment|// join operator
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|childOps
init|=
name|smbJoinOp
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
range|:
name|childOps
control|)
block|{
name|childOp
operator|.
name|replaceParent
argument_list|(
name|smbJoinOp
argument_list|,
name|mapJoinOp
argument_list|)
expr_stmt|;
block|}
name|mapJoinOp
operator|.
name|setChildOperators
argument_list|(
name|childOps
argument_list|)
expr_stmt|;
name|smbJoinOp
operator|.
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// change the parent of the original SMBjoin operator to point to the map
comment|// join operator
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parentOps
init|=
name|smbJoinOp
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
range|:
name|parentOps
control|)
block|{
name|parentOp
operator|.
name|replaceChild
argument_list|(
name|smbJoinOp
argument_list|,
name|mapJoinOp
argument_list|)
expr_stmt|;
block|}
name|mapJoinOp
operator|.
name|setParentOperators
argument_list|(
name|parentOps
argument_list|)
expr_stmt|;
name|smbJoinOp
operator|.
name|setParentOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|mapJoinOp
return|;
block|}
specifier|public
name|MapJoinOperator
name|generateMapJoinOperator
parameter_list|(
name|ParseContext
name|pctx
parameter_list|,
name|JoinOperator
name|op
parameter_list|,
name|int
name|mapJoinPos
parameter_list|)
throws|throws
name|SemanticException
block|{
name|HiveConf
name|hiveConf
init|=
name|pctx
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|boolean
name|noCheckOuterJoin
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEOPTSORTMERGEBUCKETMAPJOIN
argument_list|)
operator|&&
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEOPTBUCKETMAPJOIN
argument_list|)
decl_stmt|;
name|MapJoinOperator
name|mapJoinOp
init|=
name|convertMapJoin
argument_list|(
name|pctx
operator|.
name|getConf
argument_list|()
argument_list|,
name|op
argument_list|,
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|isLeftInputJoin
argument_list|()
argument_list|,
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getBaseSrc
argument_list|()
argument_list|,
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getMapAliases
argument_list|()
argument_list|,
name|mapJoinPos
argument_list|,
name|noCheckOuterJoin
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapJoinOp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// create a dummy select to select all columns
name|genSelectPlan
argument_list|(
name|pctx
argument_list|,
name|mapJoinOp
argument_list|)
expr_stmt|;
return|return
name|mapJoinOp
return|;
block|}
comment|/**    * Get a list of big table candidates. Only the tables in the returned set can    * be used as big table in the join operation.    *    * The logic here is to scan the join condition array from left to right. If    * see a inner join, and the bigTableCandidates is empty or the outer join    * that we last saw is a right outer join, add both side of this inner join to    * big table candidates only if they are not in bad position. If see a left    * outer join, set lastSeenRightOuterJoin to false, and the bigTableCandidates    * is empty, add the left side to it, and if the bigTableCandidates is not    * empty, do nothing (which means the bigTableCandidates is from left side).    * If see a right outer join, set lastSeenRightOuterJoin to true, clear the    * bigTableCandidates, and add right side to the bigTableCandidates, it means    * the right side of a right outer join always win. If see a full outer join,    * return empty set immediately (no one can be the big table, can not do a    * mapjoin).    *    *    * @param condns    * @return set of big table candidates    */
specifier|public
specifier|static
name|Set
argument_list|<
name|Integer
argument_list|>
name|getBigTableCandidates
parameter_list|(
name|JoinCondDesc
index|[]
name|condns
parameter_list|)
block|{
return|return
name|getBigTableCandidates
argument_list|(
name|condns
argument_list|,
comment|/* isSupportFullOuter */
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Set
argument_list|<
name|Integer
argument_list|>
name|getBigTableCandidates
parameter_list|(
name|JoinCondDesc
index|[]
name|condns
parameter_list|,
name|boolean
name|isSupportFullOuter
parameter_list|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|bigTableCandidates
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|condns
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|JoinCondDesc
name|condn
init|=
name|condns
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|condn
operator|.
name|getType
argument_list|()
operator|==
name|JoinDesc
operator|.
name|FULL_OUTER_JOIN
condition|)
block|{
if|if
condition|(
operator|!
name|isSupportFullOuter
condition|)
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
return|;
block|}
comment|// FULL OUTER MapJoin must be a single condition.
name|bigTableCandidates
operator|.
name|add
argument_list|(
name|condn
operator|.
name|getLeft
argument_list|()
argument_list|)
expr_stmt|;
name|bigTableCandidates
operator|.
name|add
argument_list|(
name|condn
operator|.
name|getRight
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|bigTableCandidates
return|;
block|}
block|}
name|boolean
name|seenOuterJoin
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|seenPostitions
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|leftPosListOfLastRightOuterJoin
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// is the outer join that we saw most recently is a right outer join?
name|boolean
name|lastSeenRightOuterJoin
init|=
literal|false
decl_stmt|;
for|for
control|(
name|JoinCondDesc
name|condn
range|:
name|condns
control|)
block|{
name|int
name|joinType
init|=
name|condn
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|joinType
operator|==
name|JoinDesc
operator|.
name|FULL_OUTER_JOIN
condition|)
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
return|;
block|}
name|seenPostitions
operator|.
name|add
argument_list|(
name|condn
operator|.
name|getLeft
argument_list|()
argument_list|)
expr_stmt|;
name|seenPostitions
operator|.
name|add
argument_list|(
name|condn
operator|.
name|getRight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|joinType
operator|==
name|JoinDesc
operator|.
name|LEFT_OUTER_JOIN
operator|||
name|joinType
operator|==
name|JoinDesc
operator|.
name|LEFT_SEMI_JOIN
condition|)
block|{
name|seenOuterJoin
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|bigTableCandidates
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|bigTableCandidates
operator|.
name|add
argument_list|(
name|condn
operator|.
name|getLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|lastSeenRightOuterJoin
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|joinType
operator|==
name|JoinDesc
operator|.
name|RIGHT_OUTER_JOIN
condition|)
block|{
name|seenOuterJoin
operator|=
literal|true
expr_stmt|;
name|lastSeenRightOuterJoin
operator|=
literal|true
expr_stmt|;
comment|// add all except the right side to the bad positions
name|leftPosListOfLastRightOuterJoin
operator|.
name|clear
argument_list|()
expr_stmt|;
name|leftPosListOfLastRightOuterJoin
operator|.
name|addAll
argument_list|(
name|seenPostitions
argument_list|)
expr_stmt|;
name|leftPosListOfLastRightOuterJoin
operator|.
name|remove
argument_list|(
name|condn
operator|.
name|getRight
argument_list|()
argument_list|)
expr_stmt|;
name|bigTableCandidates
operator|.
name|clear
argument_list|()
expr_stmt|;
name|bigTableCandidates
operator|.
name|add
argument_list|(
name|condn
operator|.
name|getRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|joinType
operator|==
name|JoinDesc
operator|.
name|INNER_JOIN
condition|)
block|{
if|if
condition|(
operator|!
name|seenOuterJoin
operator|||
name|lastSeenRightOuterJoin
condition|)
block|{
comment|// is the left was at the left side of a right outer join?
if|if
condition|(
operator|!
name|leftPosListOfLastRightOuterJoin
operator|.
name|contains
argument_list|(
name|condn
operator|.
name|getLeft
argument_list|()
argument_list|)
condition|)
block|{
name|bigTableCandidates
operator|.
name|add
argument_list|(
name|condn
operator|.
name|getLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// is the right was at the left side of a right outer join?
if|if
condition|(
operator|!
name|leftPosListOfLastRightOuterJoin
operator|.
name|contains
argument_list|(
name|condn
operator|.
name|getRight
argument_list|()
argument_list|)
condition|)
block|{
name|bigTableCandidates
operator|.
name|add
argument_list|(
name|condn
operator|.
name|getRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|bigTableCandidates
return|;
block|}
comment|/**    * @param mapJoinPos the position of big table as determined by either hints or auto conversion.    * @param condns the join conditions    * @return if given mapjoin position is a feasible big table position return same else -1.    * @throws SemanticException if given position is not in the big table candidates.    */
specifier|public
specifier|static
name|int
name|checkMapJoin
parameter_list|(
name|int
name|mapJoinPos
parameter_list|,
name|JoinCondDesc
index|[]
name|condns
parameter_list|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|bigTableCandidates
init|=
name|MapJoinProcessor
operator|.
name|getBigTableCandidates
argument_list|(
name|condns
argument_list|,
comment|/* isSupportFullOuter */
literal|true
argument_list|)
decl_stmt|;
comment|// bigTableCandidates can never be null
if|if
condition|(
operator|!
name|bigTableCandidates
operator|.
name|contains
argument_list|(
name|mapJoinPos
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|mapJoinPos
return|;
block|}
specifier|protected
name|void
name|genSelectPlan
parameter_list|(
name|ParseContext
name|pctx
parameter_list|,
name|MapJoinOperator
name|input
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|childOps
init|=
name|input
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
name|input
operator|.
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// create a dummy select - This select is needed by the walker to split the
comment|// mapJoin later on
name|RowSchema
name|inputRS
init|=
name|input
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|exprs
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|outputCols
init|=
name|input
operator|.
name|getConf
argument_list|()
operator|.
name|getOutputColumnNames
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|outputRS
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|internalName
init|=
name|outputCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ColumnInfo
name|valueInfo
init|=
name|inputRS
operator|.
name|getColumnInfo
argument_list|(
name|internalName
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|valueInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
name|exprs
operator|.
name|add
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|outputs
operator|.
name|add
argument_list|(
name|internalName
argument_list|)
expr_stmt|;
name|ColumnInfo
name|newCol
init|=
operator|new
name|ColumnInfo
argument_list|(
name|internalName
argument_list|,
name|valueInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|isHiddenVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
name|newCol
operator|.
name|setAlias
argument_list|(
name|valueInfo
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|outputRS
operator|.
name|add
argument_list|(
name|newCol
argument_list|)
expr_stmt|;
name|colExprMap
operator|.
name|put
argument_list|(
name|internalName
argument_list|,
name|colDesc
argument_list|)
expr_stmt|;
block|}
name|SelectDesc
name|select
init|=
operator|new
name|SelectDesc
argument_list|(
name|exprs
argument_list|,
name|outputs
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SelectOperator
name|sel
init|=
operator|(
name|SelectOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|select
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|outputRS
argument_list|)
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|sel
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
comment|// Insert the select operator in between.
name|sel
operator|.
name|setChildOperators
argument_list|(
name|childOps
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|ch
range|:
name|childOps
control|)
block|{
name|ch
operator|.
name|replaceParent
argument_list|(
name|input
argument_list|,
name|sel
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Is it a map-side join.    *    * @param op    *          join operator    * @return -1 if it cannot be converted to a map-side join, position of the map join node    *         otherwise    */
specifier|private
name|int
name|mapSideJoin
parameter_list|(
name|JoinOperator
name|op
parameter_list|)
throws|throws
name|SemanticException
block|{
name|int
name|mapJoinPos
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|isMapSideJoin
argument_list|()
condition|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
comment|// In a map-side join, exactly one table is not present in memory.
comment|// The client provides the list of tables which can be cached in memory
comment|// via a hint.
if|if
condition|(
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|isLeftInputJoin
argument_list|()
condition|)
block|{
name|mapJoinPos
operator|=
name|pos
expr_stmt|;
block|}
for|for
control|(
name|String
name|src
range|:
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getBaseSrc
argument_list|()
control|)
block|{
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getMapAliases
argument_list|()
operator|.
name|contains
argument_list|(
name|src
argument_list|)
condition|)
block|{
if|if
condition|(
name|mapJoinPos
operator|>=
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|mapJoinPos
operator|=
name|pos
expr_stmt|;
block|}
block|}
name|pos
operator|++
expr_stmt|;
block|}
comment|// All tables are to be cached - this is not possible. In future, we can
comment|// support this by randomly
comment|// leaving some table from the list of tables to be cached
if|if
condition|(
name|mapJoinPos
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_MAPJOIN_HINT
operator|.
name|getMsg
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getBaseSrc
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|mapJoinPos
return|;
block|}
comment|/**    * Transform the query tree. For each join, check if it is a map-side join (user specified). If    * yes, convert it to a map-side join.    *    * @param pactx    *          current parse context    */
annotation|@
name|Override
specifier|public
name|ParseContext
name|transform
parameter_list|(
name|ParseContext
name|pactx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|MapJoinOperator
argument_list|>
name|listMapJoinOps
init|=
operator|new
name|ArrayList
argument_list|<
name|MapJoinOperator
argument_list|>
argument_list|()
decl_stmt|;
comment|// traverse all the joins and convert them if necessary
if|if
condition|(
name|pactx
operator|.
name|getJoinOps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|JoinOperator
argument_list|>
name|joinMap
init|=
operator|new
name|HashSet
argument_list|<
name|JoinOperator
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|MapJoinOperator
argument_list|>
name|mapJoinMap
init|=
name|pactx
operator|.
name|getMapJoinOps
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapJoinMap
operator|==
literal|null
condition|)
block|{
name|mapJoinMap
operator|=
operator|new
name|HashSet
argument_list|<
name|MapJoinOperator
argument_list|>
argument_list|()
expr_stmt|;
name|pactx
operator|.
name|setMapJoinOps
argument_list|(
name|mapJoinMap
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|JoinOperator
argument_list|>
name|joinCtxIter
init|=
name|pactx
operator|.
name|getJoinOps
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|joinCtxIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|JoinOperator
name|joinOp
init|=
name|joinCtxIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|mapJoinPos
init|=
name|mapSideJoin
argument_list|(
name|joinOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapJoinPos
operator|>=
literal|0
condition|)
block|{
name|MapJoinOperator
name|mapJoinOp
init|=
name|generateMapJoinOperator
argument_list|(
name|pactx
argument_list|,
name|joinOp
argument_list|,
name|mapJoinPos
argument_list|)
decl_stmt|;
name|listMapJoinOps
operator|.
name|add
argument_list|(
name|mapJoinOp
argument_list|)
expr_stmt|;
name|mapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|setQBJoinTreeProps
argument_list|(
name|joinOp
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|mapJoinMap
operator|.
name|add
argument_list|(
name|mapJoinOp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|joinOp
operator|.
name|getConf
argument_list|()
operator|.
name|setQBJoinTreeProps
argument_list|(
name|joinOp
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|joinMap
operator|.
name|add
argument_list|(
name|joinOp
argument_list|)
expr_stmt|;
block|}
block|}
comment|// store the new joinContext
name|pactx
operator|.
name|setJoinOps
argument_list|(
name|joinMap
argument_list|)
expr_stmt|;
block|}
comment|// Go over the list and find if a reducer is not needed
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|listMapJoinOpsNoRed
init|=
operator|new
name|ArrayList
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// create a walker which walks the tree in a DFS manner while maintaining
comment|// the operator stack.
comment|// The dispatcher generates the plan from the operator tree
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R0"
argument_list|,
name|MapJoinOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
name|getCurrentMapJoin
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|MapJoinOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%.*"
operator|+
name|FileSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
name|getMapJoinFS
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R2"
argument_list|,
name|MapJoinOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%.*"
operator|+
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
name|getMapJoinDefault
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R4"
argument_list|,
name|MapJoinOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%.*"
operator|+
name|UnionOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
name|getMapJoinDefault
argument_list|()
argument_list|)
expr_stmt|;
comment|// The dispatcher fires the processor corresponding to the closest matching
comment|// rule and passes the context along
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|getDefault
argument_list|()
argument_list|,
name|opRules
argument_list|,
operator|new
name|MapJoinWalkerCtx
argument_list|(
name|listMapJoinOpsNoRed
argument_list|,
name|pactx
argument_list|)
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|GenMapRedWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|listMapJoinOps
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|pactx
operator|.
name|setListMapJoinOpsNoReducer
argument_list|(
name|listMapJoinOpsNoRed
argument_list|)
expr_stmt|;
return|return
name|pactx
return|;
block|}
comment|/**    * CurrentMapJoin.    *    */
specifier|public
specifier|static
class|class
name|CurrentMapJoin
implements|implements
name|NodeProcessor
block|{
comment|/**      * Store the current mapjoin in the context.      */
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|MapJoinWalkerCtx
name|ctx
init|=
operator|(
name|MapJoinWalkerCtx
operator|)
name|procCtx
decl_stmt|;
name|MapJoinOperator
name|mapJoin
init|=
operator|(
name|MapJoinOperator
operator|)
name|nd
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getListRejectedMapJoins
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ctx
operator|.
name|getListRejectedMapJoins
argument_list|()
operator|.
name|contains
argument_list|(
name|mapJoin
argument_list|)
condition|)
block|{
comment|// for rule: MapJoin%.*MapJoin
comment|// have a child mapjoin. if the the current mapjoin is on a local work,
comment|// will put the current mapjoin in the rejected list.
name|Boolean
name|bigBranch
init|=
name|findGrandChildSubqueryMapjoin
argument_list|(
name|ctx
argument_list|,
name|mapJoin
argument_list|)
decl_stmt|;
if|if
condition|(
name|bigBranch
operator|==
literal|null
condition|)
block|{
comment|// no child map join
name|ctx
operator|.
name|setCurrMapJoinOp
argument_list|(
name|mapJoin
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|bigBranch
condition|)
block|{
name|addNoReducerMapJoinToCtx
argument_list|(
name|ctx
argument_list|,
name|mapJoin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addRejectMapJoinToCtx
argument_list|(
name|ctx
argument_list|,
name|mapJoin
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ctx
operator|.
name|setCurrMapJoinOp
argument_list|(
name|mapJoin
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Boolean
name|findGrandChildSubqueryMapjoin
parameter_list|(
name|MapJoinWalkerCtx
name|ctx
parameter_list|,
name|MapJoinOperator
name|mapJoin
parameter_list|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
init|=
name|mapJoin
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|parent
operator|.
name|getChildOperators
argument_list|()
operator|==
literal|null
operator|||
name|parent
operator|.
name|getChildOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|ch
init|=
name|parent
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|instanceof
name|MapJoinOperator
condition|)
block|{
if|if
condition|(
operator|!
name|nonSubqueryMapJoin
argument_list|(
operator|(
name|MapJoinOperator
operator|)
name|ch
argument_list|,
name|mapJoin
argument_list|)
condition|)
block|{
if|if
condition|(
name|ch
operator|.
name|getParentOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|parent
argument_list|)
operator|==
operator|(
operator|(
name|MapJoinOperator
operator|)
name|ch
operator|)
operator|.
name|getConf
argument_list|()
operator|.
name|getPosBigTable
argument_list|()
condition|)
block|{
comment|// not come from the local branch
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
comment|// not from a sub-query.
block|}
if|if
condition|(
operator|(
name|ch
operator|instanceof
name|JoinOperator
operator|)
operator|||
operator|(
name|ch
operator|instanceof
name|UnionOperator
operator|)
operator|||
operator|(
name|ch
operator|instanceof
name|ReduceSinkOperator
operator|)
operator|||
operator|(
name|ch
operator|instanceof
name|LateralViewJoinOperator
operator|)
operator|||
operator|(
name|ch
operator|instanceof
name|GroupByOperator
operator|)
operator|||
operator|(
name|ch
operator|instanceof
name|ScriptOperator
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|parent
operator|=
name|ch
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|nonSubqueryMapJoin
parameter_list|(
name|MapJoinOperator
name|mapJoin
parameter_list|,
name|MapJoinOperator
name|parentMapJoin
parameter_list|)
block|{
if|if
condition|(
name|mapJoin
operator|.
name|getParentOperators
argument_list|()
operator|.
name|contains
argument_list|(
name|parentMapJoin
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addNoReducerMapJoinToCtx
parameter_list|(
name|MapJoinWalkerCtx
name|ctx
parameter_list|,
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
name|mapJoin
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|getListRejectedMapJoins
argument_list|()
operator|!=
literal|null
operator|&&
name|ctx
operator|.
name|getListRejectedMapJoins
argument_list|()
operator|.
name|contains
argument_list|(
name|mapJoin
argument_list|)
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|listMapJoinsNoRed
init|=
name|ctx
operator|.
name|getListMapJoinsNoRed
argument_list|()
decl_stmt|;
if|if
condition|(
name|listMapJoinsNoRed
operator|==
literal|null
condition|)
block|{
name|listMapJoinsNoRed
operator|=
operator|new
name|ArrayList
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|listMapJoinsNoRed
operator|.
name|contains
argument_list|(
name|mapJoin
argument_list|)
condition|)
block|{
name|listMapJoinsNoRed
operator|.
name|add
argument_list|(
name|mapJoin
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|setListMapJoins
argument_list|(
name|listMapJoinsNoRed
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|addRejectMapJoinToCtx
parameter_list|(
name|MapJoinWalkerCtx
name|ctx
parameter_list|,
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
name|mapjoin
parameter_list|)
block|{
comment|// current map join is null means it has been handled by CurrentMapJoin
comment|// process.
if|if
condition|(
name|mapjoin
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|listRejectedMapJoins
init|=
name|ctx
operator|.
name|getListRejectedMapJoins
argument_list|()
decl_stmt|;
if|if
condition|(
name|listRejectedMapJoins
operator|==
literal|null
condition|)
block|{
name|listRejectedMapJoins
operator|=
operator|new
name|ArrayList
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|listRejectedMapJoins
operator|.
name|contains
argument_list|(
name|mapjoin
argument_list|)
condition|)
block|{
name|listRejectedMapJoins
operator|.
name|add
argument_list|(
name|mapjoin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|getListMapJoinsNoRed
argument_list|()
operator|!=
literal|null
operator|&&
name|ctx
operator|.
name|getListMapJoinsNoRed
argument_list|()
operator|.
name|contains
argument_list|(
name|mapjoin
argument_list|)
condition|)
block|{
name|ctx
operator|.
name|getListMapJoinsNoRed
argument_list|()
operator|.
name|remove
argument_list|(
name|mapjoin
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|setListRejectedMapJoins
argument_list|(
name|listRejectedMapJoins
argument_list|)
expr_stmt|;
block|}
comment|/**    * MapJoinFS.    *    */
specifier|public
specifier|static
class|class
name|MapJoinFS
implements|implements
name|NodeProcessor
block|{
comment|/**      * Store the current mapjoin in a list of mapjoins followed by a filesink.      */
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|MapJoinWalkerCtx
name|ctx
init|=
operator|(
name|MapJoinWalkerCtx
operator|)
name|procCtx
decl_stmt|;
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
name|mapJoin
init|=
name|ctx
operator|.
name|getCurrMapJoinOp
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|listRejectedMapJoins
init|=
name|ctx
operator|.
name|getListRejectedMapJoins
argument_list|()
decl_stmt|;
comment|// the mapjoin has already been handled
if|if
condition|(
operator|(
name|listRejectedMapJoins
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|listRejectedMapJoins
operator|.
name|contains
argument_list|(
name|mapJoin
argument_list|)
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|addNoReducerMapJoinToCtx
argument_list|(
name|ctx
argument_list|,
name|mapJoin
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * MapJoinDefault.    *    */
specifier|public
specifier|static
class|class
name|MapJoinDefault
implements|implements
name|NodeProcessor
block|{
comment|/**      * Store the mapjoin in a rejected list.      */
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|MapJoinWalkerCtx
name|ctx
init|=
operator|(
name|MapJoinWalkerCtx
operator|)
name|procCtx
decl_stmt|;
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
name|mapJoin
init|=
name|ctx
operator|.
name|getCurrMapJoinOp
argument_list|()
decl_stmt|;
name|addRejectMapJoinToCtx
argument_list|(
name|ctx
argument_list|,
name|mapJoin
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Default.    *    */
specifier|public
specifier|static
class|class
name|Default
implements|implements
name|NodeProcessor
block|{
comment|/**      * Nothing to do.      */
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getMapJoinFS
parameter_list|()
block|{
return|return
operator|new
name|MapJoinFS
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getMapJoinDefault
parameter_list|()
block|{
return|return
operator|new
name|MapJoinDefault
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getDefault
parameter_list|()
block|{
return|return
operator|new
name|Default
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getCurrentMapJoin
parameter_list|()
block|{
return|return
operator|new
name|CurrentMapJoin
argument_list|()
return|;
block|}
comment|/**    * MapJoinWalkerCtx.    *    */
specifier|public
specifier|static
class|class
name|MapJoinWalkerCtx
implements|implements
name|NodeProcessorCtx
block|{
specifier|private
name|ParseContext
name|pGraphContext
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|listMapJoinsNoRed
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|listRejectedMapJoins
decl_stmt|;
specifier|private
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
name|currMapJoinOp
decl_stmt|;
comment|/**      * @param listMapJoinsNoRed      * @param pGraphContext      */
specifier|public
name|MapJoinWalkerCtx
parameter_list|(
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|listMapJoinsNoRed
parameter_list|,
name|ParseContext
name|pGraphContext
parameter_list|)
block|{
name|this
operator|.
name|listMapJoinsNoRed
operator|=
name|listMapJoinsNoRed
expr_stmt|;
name|currMapJoinOp
operator|=
literal|null
expr_stmt|;
name|listRejectedMapJoins
operator|=
operator|new
name|ArrayList
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|pGraphContext
operator|=
name|pGraphContext
expr_stmt|;
block|}
comment|/**      * @return the listMapJoins      */
specifier|public
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|getListMapJoinsNoRed
parameter_list|()
block|{
return|return
name|listMapJoinsNoRed
return|;
block|}
comment|/**      * @param listMapJoinsNoRed      *          the listMapJoins to set      */
specifier|public
name|void
name|setListMapJoins
parameter_list|(
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|listMapJoinsNoRed
parameter_list|)
block|{
name|this
operator|.
name|listMapJoinsNoRed
operator|=
name|listMapJoinsNoRed
expr_stmt|;
block|}
comment|/**      * @return the currMapJoinOp      */
specifier|public
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
name|getCurrMapJoinOp
parameter_list|()
block|{
return|return
name|currMapJoinOp
return|;
block|}
comment|/**      * @param currMapJoinOp      *          the currMapJoinOp to set      */
specifier|public
name|void
name|setCurrMapJoinOp
parameter_list|(
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
name|currMapJoinOp
parameter_list|)
block|{
name|this
operator|.
name|currMapJoinOp
operator|=
name|currMapJoinOp
expr_stmt|;
block|}
comment|/**      * @return the listRejectedMapJoins      */
specifier|public
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|getListRejectedMapJoins
parameter_list|()
block|{
return|return
name|listRejectedMapJoins
return|;
block|}
comment|/**      * @param listRejectedMapJoins      *          the listRejectedMapJoins to set      */
specifier|public
name|void
name|setListRejectedMapJoins
parameter_list|(
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|listRejectedMapJoins
parameter_list|)
block|{
name|this
operator|.
name|listRejectedMapJoins
operator|=
name|listRejectedMapJoins
expr_stmt|;
block|}
specifier|public
name|ParseContext
name|getpGraphContext
parameter_list|()
block|{
return|return
name|pGraphContext
return|;
block|}
specifier|public
name|void
name|setpGraphContext
parameter_list|(
name|ParseContext
name|pGraphContext
parameter_list|)
block|{
name|this
operator|.
name|pGraphContext
operator|=
name|pGraphContext
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|ObjectPair
argument_list|<
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|,
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|>
name|getKeys
parameter_list|(
name|boolean
name|leftInputJoin
parameter_list|,
name|String
index|[]
name|baseSrc
parameter_list|,
name|JoinOperator
name|op
parameter_list|)
block|{
comment|// Walk over all the sources (which are guaranteed to be reduce sink
comment|// operators).
comment|// The join outputs a concatenation of all the inputs.
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|oldReduceSinkParentOps
init|=
operator|new
name|ArrayList
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|(
name|op
operator|.
name|getNumParent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftInputJoin
condition|)
block|{
comment|// assert mapJoinPos == 0;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
init|=
name|op
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
name|parentOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
name|oldReduceSinkParentOps
operator|.
name|add
argument_list|(
operator|(
name|ReduceSinkOperator
operator|)
name|parentOp
argument_list|)
expr_stmt|;
block|}
name|byte
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|src
range|:
name|baseSrc
control|)
block|{
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parentOp
init|=
name|op
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
assert|assert
name|parentOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
name|oldReduceSinkParentOps
operator|.
name|add
argument_list|(
operator|(
name|ReduceSinkOperator
operator|)
name|parentOp
argument_list|)
expr_stmt|;
block|}
name|pos
operator|++
expr_stmt|;
block|}
comment|// get the join keys from old parent ReduceSink operators
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|keyExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|pos
operator|=
literal|0
init|;
name|pos
operator|<
name|op
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|ReduceSinkOperator
name|inputRS
init|=
name|oldReduceSinkParentOps
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyCols
init|=
name|inputRS
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
name|keyExprMap
operator|.
name|put
argument_list|(
name|pos
argument_list|,
name|keyCols
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ObjectPair
argument_list|<
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|,
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|>
argument_list|(
name|oldReduceSinkParentOps
argument_list|,
name|keyExprMap
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MapJoinDesc
name|getMapJoinDesc
parameter_list|(
name|HiveConf
name|hconf
parameter_list|,
name|JoinOperator
name|op
parameter_list|,
name|boolean
name|leftInputJoin
parameter_list|,
name|String
index|[]
name|baseSrc
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|mapAliases
parameter_list|,
name|int
name|mapJoinPos
parameter_list|,
name|boolean
name|noCheckOuterJoin
parameter_list|,
name|boolean
name|adjustParentsChildren
parameter_list|)
throws|throws
name|SemanticException
block|{
name|JoinDesc
name|desc
init|=
name|op
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|JoinCondDesc
index|[]
name|condns
init|=
name|desc
operator|.
name|getConds
argument_list|()
decl_stmt|;
name|Byte
index|[]
name|tagOrder
init|=
name|desc
operator|.
name|getTagOrder
argument_list|()
decl_stmt|;
comment|// outer join cannot be performed on a table which is being cached
if|if
condition|(
operator|!
name|noCheckOuterJoin
condition|)
block|{
if|if
condition|(
name|checkMapJoin
argument_list|(
name|mapJoinPos
argument_list|,
name|condns
argument_list|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|NO_OUTER_MAPJOIN
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
name|op
operator|.
name|getColumnExprMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|schema
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|(
name|op
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|valueExprs
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getExprs
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|newValueExprs
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|ObjectPair
argument_list|<
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
argument_list|,
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|>
name|pair
init|=
name|getKeys
argument_list|(
name|leftInputJoin
argument_list|,
name|baseSrc
argument_list|,
name|op
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReduceSinkOperator
argument_list|>
name|oldReduceSinkParentOps
init|=
name|pair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|entry
range|:
name|valueExprs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
name|tag
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|terminal
init|=
name|oldReduceSinkParentOps
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|values
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|newValues
init|=
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|values
argument_list|,
name|op
argument_list|,
name|terminal
argument_list|)
decl_stmt|;
name|newValueExprs
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|newValues
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|schema
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ColumnInfo
name|column
init|=
name|schema
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|column
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|ExprNodeDesc
name|expr
init|=
name|colExprMap
operator|.
name|get
argument_list|(
name|column
operator|.
name|getInternalName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|ExprNodeDescUtils
operator|.
name|indexOf
argument_list|(
name|expr
argument_list|,
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|schema
operator|.
name|set
argument_list|(
name|i
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustParentsChildren
condition|)
block|{
comment|// Since we remove reduce sink parents, replace original expressions
name|colExprMap
operator|.
name|put
argument_list|(
name|column
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|newValues
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// rewrite value index for mapjoin
name|Map
argument_list|<
name|Byte
argument_list|,
name|int
index|[]
argument_list|>
name|valueIndices
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
comment|// get the join keys from old parent ReduceSink operators
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|keyExprMap
init|=
name|pair
operator|.
name|getSecond
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|adjustParentsChildren
condition|)
block|{
comment|// Since we did not remove reduce sink parents, keep the original value expressions
name|newValueExprs
operator|=
name|valueExprs
expr_stmt|;
comment|// Join key exprs are represented in terms of the original table columns,
comment|// we need to convert these to the generated column names we can see in the Join operator
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|newKeyExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|mapEntry
range|:
name|keyExprMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Byte
name|pos
init|=
name|mapEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ReduceSinkOperator
name|rsParent
init|=
name|oldReduceSinkParentOps
operator|.
name|get
argument_list|(
name|pos
operator|.
name|byteValue
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyExprList
init|=
name|ExprNodeDescUtils
operator|.
name|resolveJoinKeysAsRSColumns
argument_list|(
name|mapEntry
operator|.
name|getValue
argument_list|()
argument_list|,
name|rsParent
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyExprList
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Error resolving join keys"
argument_list|)
throw|;
block|}
name|newKeyExprMap
operator|.
name|put
argument_list|(
name|pos
argument_list|,
name|keyExprList
argument_list|)
expr_stmt|;
block|}
name|keyExprMap
operator|=
name|newKeyExprMap
expr_stmt|;
block|}
comment|// construct valueTableDescs and valueFilteredTableDescs
name|List
argument_list|<
name|TableDesc
argument_list|>
name|valueTableDescs
init|=
operator|new
name|ArrayList
argument_list|<
name|TableDesc
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TableDesc
argument_list|>
name|valueFilteredTableDescs
init|=
operator|new
name|ArrayList
argument_list|<
name|TableDesc
argument_list|>
argument_list|()
decl_stmt|;
name|int
index|[]
index|[]
name|filterMap
init|=
name|desc
operator|.
name|getFilterMap
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|op
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valueCols
init|=
name|newValueExprs
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
name|mapJoinPos
condition|)
block|{
comment|// remove values in key exprs for value table schema
comment|// value expression for hashsink will be modified in
comment|// LocalMapJoinProcessor
name|int
index|[]
name|valueIndex
init|=
operator|new
name|int
index|[
name|valueCols
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valueColsInValueExpr
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueIndex
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeDesc
name|expr
init|=
name|valueCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|kindex
init|=
name|ExprNodeDescUtils
operator|.
name|indexOf
argument_list|(
name|expr
argument_list|,
name|keyExprMap
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|kindex
operator|>=
literal|0
condition|)
block|{
name|valueIndex
index|[
name|i
index|]
operator|=
name|kindex
expr_stmt|;
block|}
else|else
block|{
name|valueIndex
index|[
name|i
index|]
operator|=
operator|-
name|valueColsInValueExpr
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
name|valueColsInValueExpr
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needValueIndex
argument_list|(
name|valueIndex
argument_list|)
condition|)
block|{
name|valueIndices
operator|.
name|put
argument_list|(
name|pos
argument_list|,
name|valueIndex
argument_list|)
expr_stmt|;
block|}
name|valueCols
operator|=
name|valueColsInValueExpr
expr_stmt|;
block|}
comment|// deep copy expr node desc
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valueFilteredCols
init|=
name|ExprNodeDescUtils
operator|.
name|clone
argument_list|(
name|valueCols
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterMap
operator|!=
literal|null
operator|&&
name|filterMap
index|[
name|pos
index|]
operator|!=
literal|null
operator|&&
name|pos
operator|!=
name|mapJoinPos
condition|)
block|{
name|ExprNodeColumnDesc
name|isFilterDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
argument_list|)
argument_list|,
literal|"filter"
argument_list|,
literal|"filter"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|valueFilteredCols
operator|.
name|add
argument_list|(
name|isFilterDesc
argument_list|)
expr_stmt|;
block|}
name|TableDesc
name|valueTableDesc
init|=
name|PlanUtils
operator|.
name|getMapJoinValueTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|valueCols
argument_list|,
literal|"mapjoinvalue"
argument_list|)
argument_list|)
decl_stmt|;
name|TableDesc
name|valueFilteredTableDesc
init|=
name|PlanUtils
operator|.
name|getMapJoinValueTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|valueFilteredCols
argument_list|,
literal|"mapjoinvalue"
argument_list|)
argument_list|)
decl_stmt|;
name|valueTableDescs
operator|.
name|add
argument_list|(
name|valueTableDesc
argument_list|)
expr_stmt|;
name|valueFilteredTableDescs
operator|.
name|add
argument_list|(
name|valueFilteredTableDesc
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|filters
init|=
name|desc
operator|.
name|getFilters
argument_list|()
decl_stmt|;
if|if
condition|(
name|adjustParentsChildren
condition|)
block|{
comment|// backtrack and update filter expressions only if RS is to be removed
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|newFilters
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|entry
range|:
name|filters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
name|srcTag
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|filter
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Operator
argument_list|<
name|?
argument_list|>
name|terminal
init|=
name|oldReduceSinkParentOps
operator|.
name|get
argument_list|(
name|srcTag
argument_list|)
decl_stmt|;
name|newFilters
operator|.
name|put
argument_list|(
name|srcTag
argument_list|,
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|filter
argument_list|,
name|op
argument_list|,
name|terminal
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|desc
operator|.
name|setFilters
argument_list|(
name|filters
operator|=
name|newFilters
argument_list|)
expr_stmt|;
block|}
comment|// create dumpfile prefix needed to create descriptor
name|String
name|dumpFilePrefix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|mapAliases
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|mapAlias
range|:
name|mapAliases
control|)
block|{
name|dumpFilePrefix
operator|=
name|dumpFilePrefix
operator|+
name|mapAlias
expr_stmt|;
block|}
name|dumpFilePrefix
operator|=
name|dumpFilePrefix
operator|+
literal|"-"
operator|+
name|PlanUtils
operator|.
name|getCountForMapJoinDumpFilePrefix
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dumpFilePrefix
operator|=
literal|"mapfile"
operator|+
name|PlanUtils
operator|.
name|getCountForMapJoinDumpFilePrefix
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyCols
init|=
name|keyExprMap
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|mapJoinPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyCols
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|outputColumnNames
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getOutputColumnNames
argument_list|()
decl_stmt|;
name|TableDesc
name|keyTableDesc
init|=
name|PlanUtils
operator|.
name|getMapJoinKeyTableDesc
argument_list|(
name|hconf
argument_list|,
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|keyCols
argument_list|,
name|MAPJOINKEY_FIELDPREFIX
argument_list|)
argument_list|)
decl_stmt|;
name|JoinCondDesc
index|[]
name|joinCondns
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getConds
argument_list|()
decl_stmt|;
name|MapJoinDesc
name|mapJoinDescriptor
init|=
operator|new
name|MapJoinDesc
argument_list|(
name|keyExprMap
argument_list|,
name|keyTableDesc
argument_list|,
name|newValueExprs
argument_list|,
name|valueTableDescs
argument_list|,
name|valueFilteredTableDescs
argument_list|,
name|outputColumnNames
argument_list|,
name|mapJoinPos
argument_list|,
name|joinCondns
argument_list|,
name|filters
argument_list|,
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getNoOuterJoin
argument_list|()
argument_list|,
name|dumpFilePrefix
argument_list|,
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getMemoryMonitorInfo
argument_list|()
argument_list|,
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getInMemoryDataSize
argument_list|()
argument_list|)
decl_stmt|;
name|mapJoinDescriptor
operator|.
name|setStatistics
argument_list|(
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getStatistics
argument_list|()
argument_list|)
expr_stmt|;
name|mapJoinDescriptor
operator|.
name|setTagOrder
argument_list|(
name|tagOrder
argument_list|)
expr_stmt|;
name|mapJoinDescriptor
operator|.
name|setNullSafes
argument_list|(
name|desc
operator|.
name|getNullSafes
argument_list|()
argument_list|)
expr_stmt|;
name|mapJoinDescriptor
operator|.
name|setFilterMap
argument_list|(
name|desc
operator|.
name|getFilterMap
argument_list|()
argument_list|)
expr_stmt|;
name|mapJoinDescriptor
operator|.
name|setResidualFilterExprs
argument_list|(
name|desc
operator|.
name|getResidualFilterExprs
argument_list|()
argument_list|)
expr_stmt|;
name|mapJoinDescriptor
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|valueIndices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mapJoinDescriptor
operator|.
name|setValueIndices
argument_list|(
name|valueIndices
argument_list|)
expr_stmt|;
block|}
return|return
name|mapJoinDescriptor
return|;
block|}
specifier|public
specifier|static
name|MapJoinDesc
name|getMapJoinDesc
parameter_list|(
name|HiveConf
name|hconf
parameter_list|,
name|JoinOperator
name|op
parameter_list|,
name|boolean
name|leftInputJoin
parameter_list|,
name|String
index|[]
name|baseSrc
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|mapAliases
parameter_list|,
name|int
name|mapJoinPos
parameter_list|,
name|boolean
name|noCheckOuterJoin
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
name|getMapJoinDesc
argument_list|(
name|hconf
argument_list|,
name|op
argument_list|,
name|leftInputJoin
argument_list|,
name|baseSrc
argument_list|,
name|mapAliases
argument_list|,
name|mapJoinPos
argument_list|,
name|noCheckOuterJoin
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
end_class

end_unit

