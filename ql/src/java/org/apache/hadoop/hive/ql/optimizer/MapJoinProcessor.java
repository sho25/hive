begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|AbstractMapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|LateralViewJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ScriptOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UnionOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|GenMapRedWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|OpParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|QBJoinTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|RowResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FetchWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinCondDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|JoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredLocalWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ReduceSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of one of the rule-based map join optimization. User passes hints to specify  * map-joins and during this optimization, all user specified map joins are converted to MapJoins -  * the reduce sink operator above the join are converted to map sink operators. In future, once  * statistics are implemented, this transformation can also be done based on costs.  */
end_comment

begin_class
specifier|public
class|class
name|MapJoinProcessor
implements|implements
name|Transform
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MapJoinProcessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ParseContext
name|pGraphContext
decl_stmt|;
comment|/**    * empty constructor.    */
specifier|public
name|MapJoinProcessor
parameter_list|()
block|{
name|pGraphContext
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|private
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|putOpInsertMap
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
parameter_list|,
name|RowResolver
name|rr
parameter_list|)
block|{
name|OpParseContext
name|ctx
init|=
operator|new
name|OpParseContext
argument_list|(
name|rr
argument_list|)
decl_stmt|;
name|pGraphContext
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
return|return
name|op
return|;
block|}
comment|/**    * Generate the MapRed Local Work    * @param newWork    * @param mapJoinOp    * @param bigTablePos    * @return    * @throws SemanticException    */
specifier|private
specifier|static
name|String
name|genMapJoinLocalWork
parameter_list|(
name|MapredWork
name|newWork
parameter_list|,
name|MapJoinOperator
name|mapJoinOp
parameter_list|,
name|int
name|bigTablePos
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// keep the small table alias to avoid concurrent modification exception
name|ArrayList
argument_list|<
name|String
argument_list|>
name|smallTableAliasList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|bigTableAlias
init|=
literal|null
decl_stmt|;
comment|// create a new  MapredLocalWork
name|MapredLocalWork
name|newLocalWork
init|=
operator|new
name|MapredLocalWork
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
argument_list|,
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|FetchWork
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|entry
range|:
name|newWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|alias
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// if the table scan is for big table; then skip it
comment|// tracing down the operator tree from the table scan operator
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|parentOp
init|=
name|op
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|childOp
init|=
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|childOp
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|childOp
operator|.
name|equals
argument_list|(
name|mapJoinOp
argument_list|)
operator|)
condition|)
block|{
name|parentOp
operator|=
name|childOp
expr_stmt|;
assert|assert
name|parentOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
name|childOp
operator|=
name|parentOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|childOp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Cannot find join op by tracing down the table scan operator tree"
argument_list|)
throw|;
block|}
comment|// skip the big table pos
name|int
name|i
init|=
name|childOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|parentOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|bigTablePos
condition|)
block|{
name|bigTableAlias
operator|=
name|alias
expr_stmt|;
continue|continue;
block|}
comment|// set alias to work and put into smallTableAliasList
name|newLocalWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|smallTableAliasList
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
comment|// get input path and remove this alias from pathToAlias
comment|// because this file will be fetched by fetch operator
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathToAliases
init|=
name|newWork
operator|.
name|getPathToAliases
argument_list|()
decl_stmt|;
comment|// keep record all the input path for this alias
name|HashSet
argument_list|<
name|String
argument_list|>
name|pathSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|emptyPath
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry2
range|:
name|pathToAliases
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|entry2
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
name|entry2
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|contains
argument_list|(
name|alias
argument_list|)
condition|)
block|{
comment|// add to path set
if|if
condition|(
operator|!
name|pathSet
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|pathSet
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|//remove this alias from the alias list
name|list
operator|.
name|remove
argument_list|(
name|alias
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|emptyPath
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//remove the path, with which no alias associates
for|for
control|(
name|String
name|path
range|:
name|emptyPath
control|)
block|{
name|pathToAliases
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|// create fetch work
name|FetchWork
name|fetchWork
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partDir
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PartitionDesc
argument_list|>
name|partDesc
init|=
operator|new
name|ArrayList
argument_list|<
name|PartitionDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tablePath
range|:
name|pathSet
control|)
block|{
name|PartitionDesc
name|partitionDesc
init|=
name|newWork
operator|.
name|getPathToPartitionInfo
argument_list|()
operator|.
name|get
argument_list|(
name|tablePath
argument_list|)
decl_stmt|;
comment|// create fetchwork for non partitioned table
if|if
condition|(
name|partitionDesc
operator|.
name|getPartSpec
argument_list|()
operator|==
literal|null
operator|||
name|partitionDesc
operator|.
name|getPartSpec
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|fetchWork
operator|=
operator|new
name|FetchWork
argument_list|(
name|tablePath
argument_list|,
name|partitionDesc
operator|.
name|getTableDesc
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// if table is partitioned,add partDir and partitionDesc
name|partDir
operator|.
name|add
argument_list|(
name|tablePath
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|add
argument_list|(
name|partitionDesc
argument_list|)
expr_stmt|;
block|}
comment|// create fetchwork for partitioned table
if|if
condition|(
name|fetchWork
operator|==
literal|null
condition|)
block|{
name|TableDesc
name|table
init|=
name|newWork
operator|.
name|getAliasToPartnInfo
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|getTableDesc
argument_list|()
decl_stmt|;
name|fetchWork
operator|=
operator|new
name|FetchWork
argument_list|(
name|partDir
argument_list|,
name|partDesc
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
comment|// set alias to fetch work
name|newLocalWork
operator|.
name|getAliasToFetchWork
argument_list|()
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|fetchWork
argument_list|)
expr_stmt|;
block|}
comment|// remove small table ailias from aliasToWork;Avoid concurrent modification
for|for
control|(
name|String
name|alias
range|:
name|smallTableAliasList
control|)
block|{
name|newWork
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|remove
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
comment|// set up local work
name|newWork
operator|.
name|setMapLocalWork
argument_list|(
name|newLocalWork
argument_list|)
expr_stmt|;
comment|// remove reducer
name|newWork
operator|.
name|setReducer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// return the big table alias
if|if
condition|(
name|bigTableAlias
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Big Table Alias is null"
argument_list|)
throw|;
block|}
return|return
name|bigTableAlias
return|;
block|}
specifier|public
specifier|static
name|String
name|genMapJoinOpAndLocalWork
parameter_list|(
name|MapredWork
name|newWork
parameter_list|,
name|JoinOperator
name|op
parameter_list|,
name|int
name|mapJoinPos
parameter_list|)
throws|throws
name|SemanticException
block|{
try|try
block|{
name|LinkedHashMap
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|,
name|OpParseContext
argument_list|>
name|opParseCtxMap
init|=
name|newWork
operator|.
name|getOpParseCtxMap
argument_list|()
decl_stmt|;
name|QBJoinTree
name|newJoinTree
init|=
name|newWork
operator|.
name|getJoinTree
argument_list|()
decl_stmt|;
comment|// generate the map join operator; already checked the map join
name|MapJoinOperator
name|newMapJoinOp
init|=
name|MapJoinProcessor
operator|.
name|convertMapJoin
argument_list|(
name|opParseCtxMap
argument_list|,
name|op
argument_list|,
name|newJoinTree
argument_list|,
name|mapJoinPos
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// generate the local work and return the big table alias
name|String
name|bigTableAlias
init|=
name|MapJoinProcessor
operator|.
name|genMapJoinLocalWork
argument_list|(
name|newWork
argument_list|,
name|newMapJoinOp
argument_list|,
name|mapJoinPos
argument_list|)
decl_stmt|;
comment|// clean up the mapred work
name|newWork
operator|.
name|setOpParseCtxMap
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|newWork
operator|.
name|setJoinTree
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|bigTableAlias
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Generate New MapJoin Opertor Exeception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * convert a regular join to a a map-side join.    *    * @param opParseCtxMap    * @param op    *          join operator    * @param joinTree    *          qb join tree    * @param mapJoinPos    *          position of the source to be read as part of map-reduce framework. All other sources    *          are cached in memory    * @param noCheckOuterJoin    */
specifier|public
specifier|static
name|MapJoinOperator
name|convertMapJoin
parameter_list|(
name|LinkedHashMap
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|,
name|OpParseContext
argument_list|>
name|opParseCtxMap
parameter_list|,
name|JoinOperator
name|op
parameter_list|,
name|QBJoinTree
name|joinTree
parameter_list|,
name|int
name|mapJoinPos
parameter_list|,
name|boolean
name|noCheckOuterJoin
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// outer join cannot be performed on a table which is being cached
name|JoinDesc
name|desc
init|=
name|op
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|JoinCondDesc
index|[]
name|condns
init|=
name|desc
operator|.
name|getConds
argument_list|()
decl_stmt|;
name|Byte
index|[]
name|tagOrder
init|=
name|desc
operator|.
name|getTagOrder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|noCheckOuterJoin
condition|)
block|{
name|checkMapJoin
argument_list|(
name|mapJoinPos
argument_list|,
name|condns
argument_list|)
expr_stmt|;
block|}
name|RowResolver
name|oldOutputRS
init|=
name|opParseCtxMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
operator|.
name|getRowResolver
argument_list|()
decl_stmt|;
name|RowResolver
name|outputRS
init|=
operator|new
name|RowResolver
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|keyExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|valueExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Walk over all the sources (which are guaranteed to be reduce sink
comment|// operators).
comment|// The join outputs a concatenation of all the inputs.
name|QBJoinTree
name|leftSrc
init|=
name|joinTree
operator|.
name|getJoinSrc
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|parentOps
init|=
name|op
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|newParentOps
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|oldReduceSinkParentOps
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|>
name|columnTransfer
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// found a source which is not to be stored in memory
if|if
condition|(
name|leftSrc
operator|!=
literal|null
condition|)
block|{
comment|// assert mapJoinPos == 0;
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|parentOp
init|=
name|parentOps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
name|parentOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|grandParentOp
init|=
name|parentOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|oldReduceSinkParentOps
operator|.
name|add
argument_list|(
name|parentOp
argument_list|)
expr_stmt|;
name|grandParentOp
operator|.
name|removeChild
argument_list|(
name|parentOp
argument_list|)
expr_stmt|;
name|newParentOps
operator|.
name|add
argument_list|(
name|grandParentOp
argument_list|)
expr_stmt|;
block|}
name|int
name|pos
init|=
literal|0
decl_stmt|;
comment|// Remove parent reduce-sink operators
for|for
control|(
name|String
name|src
range|:
name|joinTree
operator|.
name|getBaseSrc
argument_list|()
control|)
block|{
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|parentOp
init|=
name|parentOps
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
assert|assert
name|parentOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|grandParentOp
init|=
name|parentOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|grandParentOp
operator|.
name|removeChild
argument_list|(
name|parentOp
argument_list|)
expr_stmt|;
name|oldReduceSinkParentOps
operator|.
name|add
argument_list|(
name|parentOp
argument_list|)
expr_stmt|;
name|newParentOps
operator|.
name|add
argument_list|(
name|grandParentOp
argument_list|)
expr_stmt|;
block|}
name|pos
operator|++
expr_stmt|;
block|}
comment|// get the join keys from old parent ReduceSink operators
for|for
control|(
name|pos
operator|=
literal|0
init|;
name|pos
operator|<
name|newParentOps
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|ReduceSinkOperator
name|oldPar
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|oldReduceSinkParentOps
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|ReduceSinkDesc
name|rsconf
init|=
name|oldPar
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Byte
name|tag
init|=
operator|(
name|byte
operator|)
name|rsconf
operator|.
name|getTag
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keys
init|=
name|rsconf
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
name|keyExprMap
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|keys
argument_list|)
expr_stmt|;
comment|// set column transfer
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|map
init|=
operator|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
operator|)
name|oldPar
operator|.
name|getColumnExprMap
argument_list|()
decl_stmt|;
name|columnTransfer
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
comment|// create the map-join operator
for|for
control|(
name|pos
operator|=
literal|0
init|;
name|pos
operator|<
name|newParentOps
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|RowResolver
name|inputRS
init|=
name|opParseCtxMap
operator|.
name|get
argument_list|(
name|newParentOps
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|)
operator|.
name|getRowResolver
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|keysIter
init|=
name|inputRS
operator|.
name|getTableNames
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|keysIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|keysIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|ColumnInfo
argument_list|>
name|rrMap
init|=
name|inputRS
operator|.
name|getFieldMap
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|fNamesIter
init|=
name|rrMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|fNamesIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|field
init|=
name|fNamesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ColumnInfo
name|valueInfo
init|=
name|inputRS
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|ColumnInfo
name|oldValueInfo
init|=
name|oldOutputRS
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValueInfo
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|outputCol
init|=
name|oldValueInfo
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|outputRS
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|field
argument_list|)
operator|==
literal|null
condition|)
block|{
name|outputColumnNames
operator|.
name|add
argument_list|(
name|outputCol
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|valueInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|outputRS
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|field
argument_list|,
operator|new
name|ColumnInfo
argument_list|(
name|outputCol
argument_list|,
name|valueInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|isHiddenVirtualCol
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|colExprMap
operator|.
name|put
argument_list|(
name|outputCol
argument_list|,
name|colDesc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|valueExprMap
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
name|pos
argument_list|)
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|filterMap
init|=
name|desc
operator|.
name|getFilters
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|entry
range|:
name|filterMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Byte
name|srcAlias
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|columnDescList
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|nodeExpr
range|:
name|columnDescList
control|)
block|{
name|ExprNodeGenericFuncDesc
name|funcDesc
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|nodeExpr
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|childDesc
range|:
name|funcDesc
operator|.
name|getChildExprs
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|childDesc
operator|instanceof
name|ExprNodeColumnDesc
operator|)
condition|)
block|{
continue|continue;
block|}
name|ExprNodeColumnDesc
name|columnDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|childDesc
decl_stmt|;
comment|// reset columns
name|String
name|column
init|=
name|columnDesc
operator|.
name|getColumn
argument_list|()
decl_stmt|;
name|String
name|newColumn
init|=
literal|null
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|map
init|=
name|columnTransfer
operator|.
name|get
argument_list|(
name|srcAlias
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|tmpDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|map
operator|.
name|get
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpDesc
operator|!=
literal|null
condition|)
block|{
name|newColumn
operator|=
name|tmpDesc
operator|.
name|getColumn
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|newColumn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"No Column name found in parent reduce sink op"
argument_list|)
throw|;
block|}
name|columnDesc
operator|.
name|setColumn
argument_list|(
name|newColumn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|JoinCondDesc
index|[]
name|joinCondns
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getConds
argument_list|()
decl_stmt|;
name|Operator
index|[]
name|newPar
init|=
operator|new
name|Operator
index|[
name|newParentOps
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|o
range|:
name|newParentOps
control|)
block|{
name|newPar
index|[
name|pos
operator|++
index|]
operator|=
name|o
expr_stmt|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyCols
init|=
name|keyExprMap
operator|.
name|get
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|keyOrder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|keyOrder
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
block|}
name|TableDesc
name|keyTableDesc
init|=
name|PlanUtils
operator|.
name|getMapJoinKeyTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|keyCols
argument_list|,
literal|"mapjoinkey"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TableDesc
argument_list|>
name|valueTableDescs
init|=
operator|new
name|ArrayList
argument_list|<
name|TableDesc
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TableDesc
argument_list|>
name|valueFiltedTableDescs
init|=
operator|new
name|ArrayList
argument_list|<
name|TableDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|pos
operator|=
literal|0
init|;
name|pos
operator|<
name|newParentOps
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valueCols
init|=
name|valueExprMap
operator|.
name|get
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
name|pos
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|valueCols
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valueFilteredCols
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
name|length
argument_list|)
decl_stmt|;
comment|// deep copy expr node desc
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|valueFilteredCols
operator|.
name|add
argument_list|(
name|valueCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valueFilters
init|=
name|filterMap
operator|.
name|get
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
name|pos
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueFilters
operator|!=
literal|null
operator|&&
name|valueFilters
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|&&
name|pos
operator|!=
name|mapJoinPos
condition|)
block|{
name|ExprNodeColumnDesc
name|isFilterDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|Constants
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|)
argument_list|,
literal|"filter"
argument_list|,
literal|"filter"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|valueFilteredCols
operator|.
name|add
argument_list|(
name|isFilterDesc
argument_list|)
expr_stmt|;
block|}
name|keyOrder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|keyOrder
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
block|}
name|TableDesc
name|valueTableDesc
init|=
name|PlanUtils
operator|.
name|getMapJoinValueTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|valueCols
argument_list|,
literal|"mapjoinvalue"
argument_list|)
argument_list|)
decl_stmt|;
name|TableDesc
name|valueFilteredTableDesc
init|=
name|PlanUtils
operator|.
name|getMapJoinValueTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|valueFilteredCols
argument_list|,
literal|"mapjoinvalue"
argument_list|)
argument_list|)
decl_stmt|;
name|valueTableDescs
operator|.
name|add
argument_list|(
name|valueTableDesc
argument_list|)
expr_stmt|;
name|valueFiltedTableDescs
operator|.
name|add
argument_list|(
name|valueFilteredTableDesc
argument_list|)
expr_stmt|;
block|}
name|String
name|dumpFilePrefix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|joinTree
operator|.
name|getMapAliases
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|mapAlias
range|:
name|joinTree
operator|.
name|getMapAliases
argument_list|()
control|)
block|{
name|dumpFilePrefix
operator|=
name|dumpFilePrefix
operator|+
name|mapAlias
expr_stmt|;
block|}
name|dumpFilePrefix
operator|=
name|dumpFilePrefix
operator|+
literal|"-"
operator|+
name|PlanUtils
operator|.
name|getCountForMapJoinDumpFilePrefix
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dumpFilePrefix
operator|=
literal|"mapfile"
operator|+
name|PlanUtils
operator|.
name|getCountForMapJoinDumpFilePrefix
argument_list|()
expr_stmt|;
block|}
name|MapJoinDesc
name|mapJoinDescriptor
init|=
operator|new
name|MapJoinDesc
argument_list|(
name|keyExprMap
argument_list|,
name|keyTableDesc
argument_list|,
name|valueExprMap
argument_list|,
name|valueTableDescs
argument_list|,
name|valueFiltedTableDescs
argument_list|,
name|outputColumnNames
argument_list|,
name|mapJoinPos
argument_list|,
name|joinCondns
argument_list|,
name|filterMap
argument_list|,
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getNoOuterJoin
argument_list|()
argument_list|,
name|dumpFilePrefix
argument_list|)
decl_stmt|;
name|mapJoinDescriptor
operator|.
name|setTagOrder
argument_list|(
name|tagOrder
argument_list|)
expr_stmt|;
name|mapJoinDescriptor
operator|.
name|setNullSafes
argument_list|(
name|desc
operator|.
name|getNullSafes
argument_list|()
argument_list|)
expr_stmt|;
name|MapJoinOperator
name|mapJoinOp
init|=
operator|(
name|MapJoinOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|mapJoinDescriptor
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|outputRS
operator|.
name|getColumnInfos
argument_list|()
argument_list|)
argument_list|,
name|newPar
argument_list|)
decl_stmt|;
name|OpParseContext
name|ctx
init|=
operator|new
name|OpParseContext
argument_list|(
name|outputRS
argument_list|)
decl_stmt|;
name|opParseCtxMap
operator|.
name|put
argument_list|(
name|mapJoinOp
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|mapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|setReversedExprs
argument_list|(
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getReversedExprs
argument_list|()
argument_list|)
expr_stmt|;
name|mapJoinOp
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
comment|// change the children of the original join operator to point to the map
comment|// join operator
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|childOps
init|=
name|op
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|childOp
range|:
name|childOps
control|)
block|{
name|childOp
operator|.
name|replaceParent
argument_list|(
name|op
argument_list|,
name|mapJoinOp
argument_list|)
expr_stmt|;
block|}
name|mapJoinOp
operator|.
name|setChildOperators
argument_list|(
name|childOps
argument_list|)
expr_stmt|;
name|mapJoinOp
operator|.
name|setParentOperators
argument_list|(
name|newParentOps
argument_list|)
expr_stmt|;
name|op
operator|.
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|op
operator|.
name|setParentOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|mapJoinOp
return|;
block|}
specifier|public
name|MapJoinOperator
name|generateMapJoinOperator
parameter_list|(
name|ParseContext
name|pctx
parameter_list|,
name|JoinOperator
name|op
parameter_list|,
name|QBJoinTree
name|joinTree
parameter_list|,
name|int
name|mapJoinPos
parameter_list|)
throws|throws
name|SemanticException
block|{
name|HiveConf
name|hiveConf
init|=
name|pctx
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|boolean
name|noCheckOuterJoin
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEOPTSORTMERGEBUCKETMAPJOIN
argument_list|)
operator|&&
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEOPTBUCKETMAPJOIN
argument_list|)
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|,
name|OpParseContext
argument_list|>
name|opParseCtxMap
init|=
name|pctx
operator|.
name|getOpParseCtx
argument_list|()
decl_stmt|;
name|MapJoinOperator
name|mapJoinOp
init|=
name|convertMapJoin
argument_list|(
name|opParseCtxMap
argument_list|,
name|op
argument_list|,
name|joinTree
argument_list|,
name|mapJoinPos
argument_list|,
name|noCheckOuterJoin
argument_list|)
decl_stmt|;
comment|// create a dummy select to select all columns
name|genSelectPlan
argument_list|(
name|pctx
argument_list|,
name|mapJoinOp
argument_list|)
expr_stmt|;
return|return
name|mapJoinOp
return|;
block|}
comment|/**    * Get a list of big table candidates. Only the tables in the returned set can    * be used as big table in the join operation.    *    * The logic here is to scan the join condition array from left to right. If    * see a inner join, and the bigTableCandidates is empty or the outer join    * that we last saw is a right outer join, add both side of this inner join to    * big table candidates only if they are not in bad position. If see a left    * outer join, set lastSeenRightOuterJoin to false, and the bigTableCandidates    * is empty, add the left side to it, and if the bigTableCandidates is not    * empty, do nothing (which means the bigTableCandidates is from left side).    * If see a right outer join, set lastSeenRightOuterJoin to true, clear the    * bigTableCandidates, and add right side to the bigTableCandidates, it means    * the right side of a right outer join always win. If see a full outer join,    * return null immediately (no one can be the big table, can not do a    * mapjoin).    *    *    * @param condns    * @return list of big table candidates    */
specifier|public
specifier|static
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|getBigTableCandidates
parameter_list|(
name|JoinCondDesc
index|[]
name|condns
parameter_list|)
block|{
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|bigTableCandidates
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|seenOuterJoin
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|seenPostitions
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|leftPosListOfLastRightOuterJoin
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// is the outer join that we saw most recently is a right outer join?
name|boolean
name|lastSeenRightOuterJoin
init|=
literal|false
decl_stmt|;
for|for
control|(
name|JoinCondDesc
name|condn
range|:
name|condns
control|)
block|{
name|int
name|joinType
init|=
name|condn
operator|.
name|getType
argument_list|()
decl_stmt|;
name|seenPostitions
operator|.
name|add
argument_list|(
name|condn
operator|.
name|getLeft
argument_list|()
argument_list|)
expr_stmt|;
name|seenPostitions
operator|.
name|add
argument_list|(
name|condn
operator|.
name|getRight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|joinType
operator|==
name|JoinDesc
operator|.
name|FULL_OUTER_JOIN
condition|)
block|{
comment|// setting these 2 parameters here just in case that if the code got
comment|// changed in future, these 2 are not missing.
name|seenOuterJoin
operator|=
literal|true
expr_stmt|;
name|lastSeenRightOuterJoin
operator|=
literal|false
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|joinType
operator|==
name|JoinDesc
operator|.
name|LEFT_OUTER_JOIN
operator|||
name|joinType
operator|==
name|JoinDesc
operator|.
name|LEFT_SEMI_JOIN
condition|)
block|{
name|seenOuterJoin
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|bigTableCandidates
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|bigTableCandidates
operator|.
name|add
argument_list|(
name|condn
operator|.
name|getLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|lastSeenRightOuterJoin
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|joinType
operator|==
name|JoinDesc
operator|.
name|RIGHT_OUTER_JOIN
condition|)
block|{
name|seenOuterJoin
operator|=
literal|true
expr_stmt|;
name|lastSeenRightOuterJoin
operator|=
literal|true
expr_stmt|;
comment|// add all except the right side to the bad positions
name|leftPosListOfLastRightOuterJoin
operator|.
name|clear
argument_list|()
expr_stmt|;
name|leftPosListOfLastRightOuterJoin
operator|.
name|addAll
argument_list|(
name|seenPostitions
argument_list|)
expr_stmt|;
name|leftPosListOfLastRightOuterJoin
operator|.
name|remove
argument_list|(
name|condn
operator|.
name|getRight
argument_list|()
argument_list|)
expr_stmt|;
name|bigTableCandidates
operator|.
name|clear
argument_list|()
expr_stmt|;
name|bigTableCandidates
operator|.
name|add
argument_list|(
name|condn
operator|.
name|getRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|joinType
operator|==
name|JoinDesc
operator|.
name|INNER_JOIN
condition|)
block|{
if|if
condition|(
operator|!
name|seenOuterJoin
operator|||
name|lastSeenRightOuterJoin
condition|)
block|{
comment|// is the left was at the left side of a right outer join?
if|if
condition|(
operator|!
name|leftPosListOfLastRightOuterJoin
operator|.
name|contains
argument_list|(
name|condn
operator|.
name|getLeft
argument_list|()
argument_list|)
condition|)
block|{
name|bigTableCandidates
operator|.
name|add
argument_list|(
name|condn
operator|.
name|getLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// is the right was at the left side of a right outer join?
if|if
condition|(
operator|!
name|leftPosListOfLastRightOuterJoin
operator|.
name|contains
argument_list|(
name|condn
operator|.
name|getRight
argument_list|()
argument_list|)
condition|)
block|{
name|bigTableCandidates
operator|.
name|add
argument_list|(
name|condn
operator|.
name|getRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|bigTableCandidates
return|;
block|}
specifier|public
specifier|static
name|void
name|checkMapJoin
parameter_list|(
name|int
name|mapJoinPos
parameter_list|,
name|JoinCondDesc
index|[]
name|condns
parameter_list|)
throws|throws
name|SemanticException
block|{
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|bigTableCandidates
init|=
name|MapJoinProcessor
operator|.
name|getBigTableCandidates
argument_list|(
name|condns
argument_list|)
decl_stmt|;
if|if
condition|(
name|bigTableCandidates
operator|==
literal|null
operator|||
operator|!
name|bigTableCandidates
operator|.
name|contains
argument_list|(
name|mapJoinPos
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|NO_OUTER_MAPJOIN
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
return|return;
block|}
specifier|private
name|void
name|genSelectPlan
parameter_list|(
name|ParseContext
name|pctx
parameter_list|,
name|MapJoinOperator
name|input
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|childOps
init|=
name|input
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
name|input
operator|.
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// create a dummy select - This select is needed by the walker to split the
comment|// mapJoin later on
name|RowResolver
name|inputRR
init|=
name|pctx
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|get
argument_list|(
name|input
argument_list|)
operator|.
name|getRowResolver
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|exprs
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|outputCols
init|=
name|input
operator|.
name|getConf
argument_list|()
operator|.
name|getOutputColumnNames
argument_list|()
decl_stmt|;
name|RowResolver
name|outputRS
init|=
operator|new
name|RowResolver
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|internalName
init|=
name|outputCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
index|[]
name|nm
init|=
name|inputRR
operator|.
name|reverseLookup
argument_list|(
name|internalName
argument_list|)
decl_stmt|;
name|ColumnInfo
name|valueInfo
init|=
name|inputRR
operator|.
name|get
argument_list|(
name|nm
index|[
literal|0
index|]
argument_list|,
name|nm
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|valueInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|nm
index|[
literal|0
index|]
argument_list|,
name|valueInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
name|exprs
operator|.
name|add
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|outputs
operator|.
name|add
argument_list|(
name|internalName
argument_list|)
expr_stmt|;
name|outputRS
operator|.
name|put
argument_list|(
name|nm
index|[
literal|0
index|]
argument_list|,
name|nm
index|[
literal|1
index|]
argument_list|,
operator|new
name|ColumnInfo
argument_list|(
name|internalName
argument_list|,
name|valueInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|nm
index|[
literal|0
index|]
argument_list|,
name|valueInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|isHiddenVirtualCol
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|colExprMap
operator|.
name|put
argument_list|(
name|internalName
argument_list|,
name|colDesc
argument_list|)
expr_stmt|;
block|}
name|SelectDesc
name|select
init|=
operator|new
name|SelectDesc
argument_list|(
name|exprs
argument_list|,
name|outputs
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SelectOperator
name|sel
init|=
operator|(
name|SelectOperator
operator|)
name|putOpInsertMap
argument_list|(
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|select
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|inputRR
operator|.
name|getColumnInfos
argument_list|()
argument_list|)
argument_list|,
name|input
argument_list|)
argument_list|,
name|inputRR
argument_list|)
decl_stmt|;
name|sel
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
comment|// Insert the select operator in between.
name|sel
operator|.
name|setChildOperators
argument_list|(
name|childOps
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|ch
range|:
name|childOps
control|)
block|{
name|ch
operator|.
name|replaceParent
argument_list|(
name|input
argument_list|,
name|sel
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Is it a map-side join.    *    * @param op    *          join operator    * @param qbJoin    *          qb join tree    * @return -1 if it cannot be converted to a map-side join, position of the map join node    *         otherwise    */
specifier|private
name|int
name|mapSideJoin
parameter_list|(
name|JoinOperator
name|op
parameter_list|,
name|QBJoinTree
name|joinTree
parameter_list|)
throws|throws
name|SemanticException
block|{
name|int
name|mapJoinPos
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|joinTree
operator|.
name|isMapSideJoin
argument_list|()
condition|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
comment|// In a map-side join, exactly one table is not present in memory.
comment|// The client provides the list of tables which can be cached in memory
comment|// via a hint.
if|if
condition|(
name|joinTree
operator|.
name|getJoinSrc
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|mapJoinPos
operator|=
name|pos
expr_stmt|;
block|}
for|for
control|(
name|String
name|src
range|:
name|joinTree
operator|.
name|getBaseSrc
argument_list|()
control|)
block|{
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|joinTree
operator|.
name|getMapAliases
argument_list|()
operator|.
name|contains
argument_list|(
name|src
argument_list|)
condition|)
block|{
if|if
condition|(
name|mapJoinPos
operator|>=
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|mapJoinPos
operator|=
name|pos
expr_stmt|;
block|}
block|}
name|pos
operator|++
expr_stmt|;
block|}
comment|// All tables are to be cached - this is not possible. In future, we can
comment|// support this by randomly
comment|// leaving some table from the list of tables to be cached
if|if
condition|(
name|mapJoinPos
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_MAPJOIN_HINT
operator|.
name|getMsg
argument_list|(
name|pGraphContext
operator|.
name|getQB
argument_list|()
operator|.
name|getParseInfo
argument_list|()
operator|.
name|getHints
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|mapJoinPos
return|;
block|}
comment|/**    * Transform the query tree. For each join, check if it is a map-side join (user specified). If    * yes, convert it to a map-side join.    *    * @param pactx    *          current parse context    */
specifier|public
name|ParseContext
name|transform
parameter_list|(
name|ParseContext
name|pactx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|pGraphContext
operator|=
name|pactx
expr_stmt|;
name|List
argument_list|<
name|MapJoinOperator
argument_list|>
name|listMapJoinOps
init|=
operator|new
name|ArrayList
argument_list|<
name|MapJoinOperator
argument_list|>
argument_list|()
decl_stmt|;
comment|// traverse all the joins and convert them if necessary
if|if
condition|(
name|pGraphContext
operator|.
name|getJoinContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|JoinOperator
argument_list|,
name|QBJoinTree
argument_list|>
name|joinMap
init|=
operator|new
name|HashMap
argument_list|<
name|JoinOperator
argument_list|,
name|QBJoinTree
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|MapJoinOperator
argument_list|,
name|QBJoinTree
argument_list|>
name|mapJoinMap
init|=
name|pGraphContext
operator|.
name|getMapJoinContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|mapJoinMap
operator|==
literal|null
condition|)
block|{
name|mapJoinMap
operator|=
operator|new
name|HashMap
argument_list|<
name|MapJoinOperator
argument_list|,
name|QBJoinTree
argument_list|>
argument_list|()
expr_stmt|;
name|pGraphContext
operator|.
name|setMapJoinContext
argument_list|(
name|mapJoinMap
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|JoinOperator
argument_list|,
name|QBJoinTree
argument_list|>
argument_list|>
name|joinCtx
init|=
name|pGraphContext
operator|.
name|getJoinContext
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|JoinOperator
argument_list|,
name|QBJoinTree
argument_list|>
argument_list|>
name|joinCtxIter
init|=
name|joinCtx
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|joinCtxIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|JoinOperator
argument_list|,
name|QBJoinTree
argument_list|>
name|joinEntry
init|=
name|joinCtxIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|JoinOperator
name|joinOp
init|=
name|joinEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|QBJoinTree
name|qbJoin
init|=
name|joinEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|mapJoinPos
init|=
name|mapSideJoin
argument_list|(
name|joinOp
argument_list|,
name|qbJoin
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapJoinPos
operator|>=
literal|0
condition|)
block|{
name|MapJoinOperator
name|mapJoinOp
init|=
name|generateMapJoinOperator
argument_list|(
name|pactx
argument_list|,
name|joinOp
argument_list|,
name|qbJoin
argument_list|,
name|mapJoinPos
argument_list|)
decl_stmt|;
name|listMapJoinOps
operator|.
name|add
argument_list|(
name|mapJoinOp
argument_list|)
expr_stmt|;
name|mapJoinMap
operator|.
name|put
argument_list|(
name|mapJoinOp
argument_list|,
name|qbJoin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|joinMap
operator|.
name|put
argument_list|(
name|joinOp
argument_list|,
name|qbJoin
argument_list|)
expr_stmt|;
block|}
block|}
comment|// store the new joinContext
name|pGraphContext
operator|.
name|setJoinContext
argument_list|(
name|joinMap
argument_list|)
expr_stmt|;
block|}
comment|// Go over the list and find if a reducer is not needed
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|listMapJoinOpsNoRed
init|=
operator|new
name|ArrayList
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// create a walker which walks the tree in a DFS manner while maintaining
comment|// the operator stack.
comment|// The dispatcher generates the plan from the operator tree
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R0"
argument_list|,
literal|"MAPJOIN%"
argument_list|)
argument_list|,
name|getCurrentMapJoin
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
literal|"MAPJOIN%.*FS%"
argument_list|)
argument_list|,
name|getMapJoinFS
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R2"
argument_list|,
literal|"MAPJOIN%.*RS%"
argument_list|)
argument_list|,
name|getMapJoinDefault
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R4"
argument_list|,
literal|"MAPJOIN%.*UNION%"
argument_list|)
argument_list|,
name|getMapJoinDefault
argument_list|()
argument_list|)
expr_stmt|;
comment|// The dispatcher fires the processor corresponding to the closest matching
comment|// rule and passes the context along
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|getDefault
argument_list|()
argument_list|,
name|opRules
argument_list|,
operator|new
name|MapJoinWalkerCtx
argument_list|(
name|listMapJoinOpsNoRed
argument_list|,
name|pGraphContext
argument_list|)
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|GenMapRedWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|listMapJoinOps
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|pGraphContext
operator|.
name|setListMapJoinOpsNoReducer
argument_list|(
name|listMapJoinOpsNoRed
argument_list|)
expr_stmt|;
return|return
name|pGraphContext
return|;
block|}
comment|/**    * CurrentMapJoin.    *    */
specifier|public
specifier|static
class|class
name|CurrentMapJoin
implements|implements
name|NodeProcessor
block|{
comment|/**      * Store the current mapjoin in the context.      */
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|MapJoinWalkerCtx
name|ctx
init|=
operator|(
name|MapJoinWalkerCtx
operator|)
name|procCtx
decl_stmt|;
name|MapJoinOperator
name|mapJoin
init|=
operator|(
name|MapJoinOperator
operator|)
name|nd
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|getListRejectedMapJoins
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ctx
operator|.
name|getListRejectedMapJoins
argument_list|()
operator|.
name|contains
argument_list|(
name|mapJoin
argument_list|)
condition|)
block|{
comment|// for rule: MapJoin%.*MapJoin
comment|// have a child mapjoin. if the the current mapjoin is on a local work,
comment|// will put the current mapjoin in the rejected list.
name|Boolean
name|bigBranch
init|=
name|findGrandChildSubqueryMapjoin
argument_list|(
name|ctx
argument_list|,
name|mapJoin
argument_list|)
decl_stmt|;
if|if
condition|(
name|bigBranch
operator|==
literal|null
condition|)
block|{
comment|// no child map join
name|ctx
operator|.
name|setCurrMapJoinOp
argument_list|(
name|mapJoin
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|bigBranch
condition|)
block|{
name|addNoReducerMapJoinToCtx
argument_list|(
name|ctx
argument_list|,
name|mapJoin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addRejectMapJoinToCtx
argument_list|(
name|ctx
argument_list|,
name|mapJoin
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ctx
operator|.
name|setCurrMapJoinOp
argument_list|(
name|mapJoin
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Boolean
name|findGrandChildSubqueryMapjoin
parameter_list|(
name|MapJoinWalkerCtx
name|ctx
parameter_list|,
name|MapJoinOperator
name|mapJoin
parameter_list|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|parent
init|=
name|mapJoin
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|parent
operator|.
name|getChildOperators
argument_list|()
operator|==
literal|null
operator|||
name|parent
operator|.
name|getChildOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|ch
init|=
name|parent
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|instanceof
name|MapJoinOperator
condition|)
block|{
if|if
condition|(
operator|!
name|nonSubqueryMapJoin
argument_list|(
name|ctx
operator|.
name|getpGraphContext
argument_list|()
argument_list|,
operator|(
name|MapJoinOperator
operator|)
name|ch
argument_list|,
name|mapJoin
argument_list|)
condition|)
block|{
if|if
condition|(
name|ch
operator|.
name|getParentOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|parent
argument_list|)
operator|==
operator|(
operator|(
name|MapJoinOperator
operator|)
name|ch
operator|)
operator|.
name|getConf
argument_list|()
operator|.
name|getPosBigTable
argument_list|()
condition|)
block|{
comment|// not come from the local branch
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
comment|// not from a sub-query.
block|}
if|if
condition|(
operator|(
name|ch
operator|instanceof
name|JoinOperator
operator|)
operator|||
operator|(
name|ch
operator|instanceof
name|UnionOperator
operator|)
operator|||
operator|(
name|ch
operator|instanceof
name|ReduceSinkOperator
operator|)
operator|||
operator|(
name|ch
operator|instanceof
name|LateralViewJoinOperator
operator|)
operator|||
operator|(
name|ch
operator|instanceof
name|GroupByOperator
operator|)
operator|||
operator|(
name|ch
operator|instanceof
name|ScriptOperator
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|parent
operator|=
name|ch
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|nonSubqueryMapJoin
parameter_list|(
name|ParseContext
name|pGraphContext
parameter_list|,
name|MapJoinOperator
name|mapJoin
parameter_list|,
name|MapJoinOperator
name|parentMapJoin
parameter_list|)
block|{
name|QBJoinTree
name|joinTree
init|=
name|pGraphContext
operator|.
name|getMapJoinContext
argument_list|()
operator|.
name|get
argument_list|(
name|mapJoin
argument_list|)
decl_stmt|;
name|QBJoinTree
name|parentJoinTree
init|=
name|pGraphContext
operator|.
name|getMapJoinContext
argument_list|()
operator|.
name|get
argument_list|(
name|parentMapJoin
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinTree
operator|.
name|getJoinSrc
argument_list|()
operator|!=
literal|null
operator|&&
name|joinTree
operator|.
name|getJoinSrc
argument_list|()
operator|.
name|equals
argument_list|(
name|parentJoinTree
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addNoReducerMapJoinToCtx
parameter_list|(
name|MapJoinWalkerCtx
name|ctx
parameter_list|,
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
name|mapJoin
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|getListRejectedMapJoins
argument_list|()
operator|!=
literal|null
operator|&&
name|ctx
operator|.
name|getListRejectedMapJoins
argument_list|()
operator|.
name|contains
argument_list|(
name|mapJoin
argument_list|)
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|listMapJoinsNoRed
init|=
name|ctx
operator|.
name|getListMapJoinsNoRed
argument_list|()
decl_stmt|;
if|if
condition|(
name|listMapJoinsNoRed
operator|==
literal|null
condition|)
block|{
name|listMapJoinsNoRed
operator|=
operator|new
name|ArrayList
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|listMapJoinsNoRed
operator|.
name|contains
argument_list|(
name|mapJoin
argument_list|)
condition|)
block|{
name|listMapJoinsNoRed
operator|.
name|add
argument_list|(
name|mapJoin
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|setListMapJoins
argument_list|(
name|listMapJoinsNoRed
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|addRejectMapJoinToCtx
parameter_list|(
name|MapJoinWalkerCtx
name|ctx
parameter_list|,
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
name|mapjoin
parameter_list|)
block|{
comment|// current map join is null means it has been handled by CurrentMapJoin
comment|// process.
if|if
condition|(
name|mapjoin
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|listRejectedMapJoins
init|=
name|ctx
operator|.
name|getListRejectedMapJoins
argument_list|()
decl_stmt|;
if|if
condition|(
name|listRejectedMapJoins
operator|==
literal|null
condition|)
block|{
name|listRejectedMapJoins
operator|=
operator|new
name|ArrayList
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|listRejectedMapJoins
operator|.
name|contains
argument_list|(
name|mapjoin
argument_list|)
condition|)
block|{
name|listRejectedMapJoins
operator|.
name|add
argument_list|(
name|mapjoin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|getListMapJoinsNoRed
argument_list|()
operator|!=
literal|null
operator|&&
name|ctx
operator|.
name|getListMapJoinsNoRed
argument_list|()
operator|.
name|contains
argument_list|(
name|mapjoin
argument_list|)
condition|)
block|{
name|ctx
operator|.
name|getListMapJoinsNoRed
argument_list|()
operator|.
name|remove
argument_list|(
name|mapjoin
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|setListRejectedMapJoins
argument_list|(
name|listRejectedMapJoins
argument_list|)
expr_stmt|;
block|}
comment|/**    * MapJoinFS.    *    */
specifier|public
specifier|static
class|class
name|MapJoinFS
implements|implements
name|NodeProcessor
block|{
comment|/**      * Store the current mapjoin in a list of mapjoins followed by a filesink.      */
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|MapJoinWalkerCtx
name|ctx
init|=
operator|(
name|MapJoinWalkerCtx
operator|)
name|procCtx
decl_stmt|;
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
name|mapJoin
init|=
name|ctx
operator|.
name|getCurrMapJoinOp
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|listRejectedMapJoins
init|=
name|ctx
operator|.
name|getListRejectedMapJoins
argument_list|()
decl_stmt|;
comment|// the mapjoin has already been handled
if|if
condition|(
operator|(
name|listRejectedMapJoins
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|listRejectedMapJoins
operator|.
name|contains
argument_list|(
name|mapJoin
argument_list|)
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|addNoReducerMapJoinToCtx
argument_list|(
name|ctx
argument_list|,
name|mapJoin
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * MapJoinDefault.    *    */
specifier|public
specifier|static
class|class
name|MapJoinDefault
implements|implements
name|NodeProcessor
block|{
comment|/**      * Store the mapjoin in a rejected list.      */
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|MapJoinWalkerCtx
name|ctx
init|=
operator|(
name|MapJoinWalkerCtx
operator|)
name|procCtx
decl_stmt|;
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
name|mapJoin
init|=
name|ctx
operator|.
name|getCurrMapJoinOp
argument_list|()
decl_stmt|;
name|addRejectMapJoinToCtx
argument_list|(
name|ctx
argument_list|,
name|mapJoin
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Default.    *    */
specifier|public
specifier|static
class|class
name|Default
implements|implements
name|NodeProcessor
block|{
comment|/**      * Nothing to do.      */
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getMapJoinFS
parameter_list|()
block|{
return|return
operator|new
name|MapJoinFS
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getMapJoinDefault
parameter_list|()
block|{
return|return
operator|new
name|MapJoinDefault
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getDefault
parameter_list|()
block|{
return|return
operator|new
name|Default
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getCurrentMapJoin
parameter_list|()
block|{
return|return
operator|new
name|CurrentMapJoin
argument_list|()
return|;
block|}
comment|/**    * MapJoinWalkerCtx.    *    */
specifier|public
specifier|static
class|class
name|MapJoinWalkerCtx
implements|implements
name|NodeProcessorCtx
block|{
specifier|private
name|ParseContext
name|pGraphContext
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|listMapJoinsNoRed
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|listRejectedMapJoins
decl_stmt|;
specifier|private
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
name|currMapJoinOp
decl_stmt|;
comment|/**      * @param listMapJoinsNoRed      * @param pGraphContext      */
specifier|public
name|MapJoinWalkerCtx
parameter_list|(
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|listMapJoinsNoRed
parameter_list|,
name|ParseContext
name|pGraphContext
parameter_list|)
block|{
name|this
operator|.
name|listMapJoinsNoRed
operator|=
name|listMapJoinsNoRed
expr_stmt|;
name|currMapJoinOp
operator|=
literal|null
expr_stmt|;
name|listRejectedMapJoins
operator|=
operator|new
name|ArrayList
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|pGraphContext
operator|=
name|pGraphContext
expr_stmt|;
block|}
comment|/**      * @return the listMapJoins      */
specifier|public
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|getListMapJoinsNoRed
parameter_list|()
block|{
return|return
name|listMapJoinsNoRed
return|;
block|}
comment|/**      * @param listMapJoinsNoRed      *          the listMapJoins to set      */
specifier|public
name|void
name|setListMapJoins
parameter_list|(
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|listMapJoinsNoRed
parameter_list|)
block|{
name|this
operator|.
name|listMapJoinsNoRed
operator|=
name|listMapJoinsNoRed
expr_stmt|;
block|}
comment|/**      * @return the currMapJoinOp      */
specifier|public
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
name|getCurrMapJoinOp
parameter_list|()
block|{
return|return
name|currMapJoinOp
return|;
block|}
comment|/**      * @param currMapJoinOp      *          the currMapJoinOp to set      */
specifier|public
name|void
name|setCurrMapJoinOp
parameter_list|(
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
name|currMapJoinOp
parameter_list|)
block|{
name|this
operator|.
name|currMapJoinOp
operator|=
name|currMapJoinOp
expr_stmt|;
block|}
comment|/**      * @return the listRejectedMapJoins      */
specifier|public
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|getListRejectedMapJoins
parameter_list|()
block|{
return|return
name|listRejectedMapJoins
return|;
block|}
comment|/**      * @param listRejectedMapJoins      *          the listRejectedMapJoins to set      */
specifier|public
name|void
name|setListRejectedMapJoins
parameter_list|(
name|List
argument_list|<
name|AbstractMapJoinOperator
argument_list|<
name|?
extends|extends
name|MapJoinDesc
argument_list|>
argument_list|>
name|listRejectedMapJoins
parameter_list|)
block|{
name|this
operator|.
name|listRejectedMapJoins
operator|=
name|listRejectedMapJoins
expr_stmt|;
block|}
specifier|public
name|ParseContext
name|getpGraphContext
parameter_list|()
block|{
return|return
name|pGraphContext
return|;
block|}
specifier|public
name|void
name|setpGraphContext
parameter_list|(
name|ParseContext
name|pGraphContext
parameter_list|)
block|{
name|this
operator|.
name|pGraphContext
operator|=
name|pGraphContext
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

