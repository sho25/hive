begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|GenMapRedWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|OpParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|QBJoinTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|RowResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|TypeCheckProcFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|exprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|exprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|reduceSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|selectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|tableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|joinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  * Implementation of one of the rule-based map join optimization. User passes hints to specify map-joins and during this optimization,  * all user specified map joins are converted to MapJoins - the reduce sink operator above the join are converted to map sink operators.  * In future, once statistics are implemented, this transformation can also be done based on costs.  */
end_comment

begin_class
specifier|public
class|class
name|MapJoinProcessor
implements|implements
name|Transform
block|{
specifier|private
name|ParseContext
name|pGraphContext
decl_stmt|;
comment|/**    * empty constructor    */
specifier|public
name|MapJoinProcessor
parameter_list|()
block|{
name|pGraphContext
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|private
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|putOpInsertMap
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|op
parameter_list|,
name|RowResolver
name|rr
parameter_list|)
block|{
name|OpParseContext
name|ctx
init|=
operator|new
name|OpParseContext
argument_list|(
name|rr
argument_list|)
decl_stmt|;
name|pGraphContext
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
return|return
name|op
return|;
block|}
comment|/**    * convert a regular join to a a map-side join.     * @param op join operator    * @param qbJoin qb join tree    * @param mapJoinPos position of the source to be read as part of map-reduce framework. All other sources are cached in memory    */
specifier|private
name|MapJoinOperator
name|convertMapJoin
parameter_list|(
name|ParseContext
name|pctx
parameter_list|,
name|JoinOperator
name|op
parameter_list|,
name|QBJoinTree
name|joinTree
parameter_list|,
name|int
name|mapJoinPos
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// outer join cannot be performed on a table which is being cached
name|joinDesc
name|desc
init|=
name|op
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|joinCond
index|[]
name|condns
init|=
name|desc
operator|.
name|getConds
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|joinCond
name|condn
range|:
name|condns
control|)
block|{
if|if
condition|(
name|condn
operator|.
name|getType
argument_list|()
operator|==
name|joinDesc
operator|.
name|FULL_OUTER_JOIN
condition|)
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|NO_OUTER_MAPJOIN
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|(
name|condn
operator|.
name|getType
argument_list|()
operator|==
name|joinDesc
operator|.
name|LEFT_OUTER_JOIN
operator|)
operator|&&
operator|(
name|condn
operator|.
name|getLeft
argument_list|()
operator|!=
name|mapJoinPos
operator|)
condition|)
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|NO_OUTER_MAPJOIN
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|(
name|condn
operator|.
name|getType
argument_list|()
operator|==
name|joinDesc
operator|.
name|RIGHT_OUTER_JOIN
operator|)
operator|&&
operator|(
name|condn
operator|.
name|getRight
argument_list|()
operator|!=
name|mapJoinPos
operator|)
condition|)
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|NO_OUTER_MAPJOIN
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|RowResolver
name|oldOutputRS
init|=
name|pctx
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|get
argument_list|(
name|op
argument_list|)
operator|.
name|getRR
argument_list|()
decl_stmt|;
name|RowResolver
name|outputRS
init|=
operator|new
name|RowResolver
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|exprNodeDesc
argument_list|>
argument_list|>
name|keyExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|exprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|exprNodeDesc
argument_list|>
argument_list|>
name|valueExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|exprNodeDesc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Walk over all the sources (which are guaranteed to be reduce sink operators).
comment|// The join outputs a concatenation of all the inputs.
name|QBJoinTree
name|leftSrc
init|=
name|joinTree
operator|.
name|getJoinSrc
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|parentOps
init|=
name|op
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|newParentOps
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|oldReduceSinkParentOps
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|exprNodeDesc
argument_list|>
name|colExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|exprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
comment|// found a source which is not to be stored in memory
if|if
condition|(
name|leftSrc
operator|!=
literal|null
condition|)
block|{
comment|//      assert mapJoinPos == 0;
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|parentOp
init|=
name|parentOps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
name|parentOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|grandParentOp
init|=
name|parentOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|oldReduceSinkParentOps
operator|.
name|add
argument_list|(
name|parentOp
argument_list|)
expr_stmt|;
name|grandParentOp
operator|.
name|removeChild
argument_list|(
name|parentOp
argument_list|)
expr_stmt|;
name|newParentOps
operator|.
name|add
argument_list|(
name|grandParentOp
argument_list|)
expr_stmt|;
block|}
name|int
name|pos
init|=
literal|0
decl_stmt|;
comment|// Remove parent reduce-sink operators
for|for
control|(
name|String
name|src
range|:
name|joinTree
operator|.
name|getBaseSrc
argument_list|()
control|)
block|{
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|parentOp
init|=
name|parentOps
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
assert|assert
name|parentOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|grandParentOp
init|=
name|parentOp
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|grandParentOp
operator|.
name|removeChild
argument_list|(
name|parentOp
argument_list|)
expr_stmt|;
name|oldReduceSinkParentOps
operator|.
name|add
argument_list|(
name|parentOp
argument_list|)
expr_stmt|;
name|newParentOps
operator|.
name|add
argument_list|(
name|grandParentOp
argument_list|)
expr_stmt|;
block|}
name|pos
operator|++
expr_stmt|;
block|}
comment|//get the join keys from old parent ReduceSink operators
for|for
control|(
name|pos
operator|=
literal|0
init|;
name|pos
operator|<
name|newParentOps
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|ReduceSinkOperator
name|oldPar
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|oldReduceSinkParentOps
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|reduceSinkDesc
name|rsconf
init|=
name|oldPar
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Byte
name|tag
init|=
operator|(
name|byte
operator|)
name|rsconf
operator|.
name|getTag
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|exprNodeDesc
argument_list|>
name|keys
init|=
name|rsconf
operator|.
name|getKeyCols
argument_list|()
decl_stmt|;
name|keyExprMap
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|keys
argument_list|)
expr_stmt|;
block|}
comment|// create the map-join operator
for|for
control|(
name|pos
operator|=
literal|0
init|;
name|pos
operator|<
name|newParentOps
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|RowResolver
name|inputRS
init|=
name|pGraphContext
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|get
argument_list|(
name|newParentOps
operator|.
name|get
argument_list|(
name|pos
argument_list|)
argument_list|)
operator|.
name|getRR
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|exprNodeDesc
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|keysIter
init|=
name|inputRS
operator|.
name|getTableNames
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|keysIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|keysIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|ColumnInfo
argument_list|>
name|rrMap
init|=
name|inputRS
operator|.
name|getFieldMap
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|fNamesIter
init|=
name|rrMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|fNamesIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|field
init|=
name|fNamesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ColumnInfo
name|valueInfo
init|=
name|inputRS
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|ColumnInfo
name|oldValueInfo
init|=
name|oldOutputRS
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValueInfo
operator|==
literal|null
condition|)
continue|continue;
name|String
name|outputCol
init|=
name|oldValueInfo
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|outputRS
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|field
argument_list|)
operator|==
literal|null
condition|)
block|{
name|outputColumnNames
operator|.
name|add
argument_list|(
name|outputCol
argument_list|)
expr_stmt|;
name|exprNodeDesc
name|colDesc
init|=
operator|new
name|exprNodeColumnDesc
argument_list|(
name|valueInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getIsPartitionCol
argument_list|()
argument_list|)
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|outputRS
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|field
argument_list|,
operator|new
name|ColumnInfo
argument_list|(
name|outputCol
argument_list|,
name|valueInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getIsPartitionCol
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|colExprMap
operator|.
name|put
argument_list|(
name|outputCol
argument_list|,
name|colDesc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|valueExprMap
operator|.
name|put
argument_list|(
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
name|pos
argument_list|)
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|joinCond
index|[]
name|joinCondns
init|=
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getConds
argument_list|()
decl_stmt|;
name|Operator
index|[]
name|newPar
init|=
operator|new
name|Operator
index|[
name|newParentOps
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|o
range|:
name|newParentOps
control|)
name|newPar
index|[
name|pos
operator|++
index|]
operator|=
name|o
expr_stmt|;
name|List
argument_list|<
name|exprNodeDesc
argument_list|>
name|keyCols
init|=
name|keyExprMap
operator|.
name|get
argument_list|(
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|keyOrder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|keyOrder
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
block|}
name|tableDesc
name|keyTableDesc
init|=
name|PlanUtils
operator|.
name|getMapJoinKeyTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|keyCols
argument_list|,
literal|"mapjoinkey"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|tableDesc
argument_list|>
name|valueTableDescs
init|=
operator|new
name|ArrayList
argument_list|<
name|tableDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|pos
operator|=
literal|0
init|;
name|pos
operator|<
name|newParentOps
operator|.
name|size
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|List
argument_list|<
name|exprNodeDesc
argument_list|>
name|valueCols
init|=
name|valueExprMap
operator|.
name|get
argument_list|(
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
name|pos
argument_list|)
argument_list|)
decl_stmt|;
name|keyOrder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|keyOrder
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
block|}
name|tableDesc
name|valueTableDesc
init|=
name|PlanUtils
operator|.
name|getMapJoinValueTableDesc
argument_list|(
name|PlanUtils
operator|.
name|getFieldSchemasFromColumnList
argument_list|(
name|valueCols
argument_list|,
literal|"mapjoinvalue"
argument_list|)
argument_list|)
decl_stmt|;
name|valueTableDescs
operator|.
name|add
argument_list|(
name|valueTableDesc
argument_list|)
expr_stmt|;
block|}
name|MapJoinOperator
name|mapJoinOp
init|=
operator|(
name|MapJoinOperator
operator|)
name|putOpInsertMap
argument_list|(
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
operator|new
name|mapJoinDesc
argument_list|(
name|keyExprMap
argument_list|,
name|keyTableDesc
argument_list|,
name|valueExprMap
argument_list|,
name|valueTableDescs
argument_list|,
name|outputColumnNames
argument_list|,
name|mapJoinPos
argument_list|,
name|joinCondns
argument_list|)
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|outputRS
operator|.
name|getColumnInfos
argument_list|()
argument_list|)
argument_list|,
name|newPar
argument_list|)
argument_list|,
name|outputRS
argument_list|)
decl_stmt|;
name|mapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|setReversedExprs
argument_list|(
name|op
operator|.
name|getConf
argument_list|()
operator|.
name|getReversedExprs
argument_list|()
argument_list|)
expr_stmt|;
name|mapJoinOp
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
comment|// change the children of the original join operator to point to the map join operator
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|childOps
init|=
name|op
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|childOp
range|:
name|childOps
control|)
name|childOp
operator|.
name|replaceParent
argument_list|(
name|op
argument_list|,
name|mapJoinOp
argument_list|)
expr_stmt|;
name|mapJoinOp
operator|.
name|setChildOperators
argument_list|(
name|childOps
argument_list|)
expr_stmt|;
name|mapJoinOp
operator|.
name|setParentOperators
argument_list|(
name|newParentOps
argument_list|)
expr_stmt|;
name|op
operator|.
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|op
operator|.
name|setParentOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// create a dummy select to select all columns
name|genSelectPlan
argument_list|(
name|pctx
argument_list|,
name|mapJoinOp
argument_list|)
expr_stmt|;
return|return
name|mapJoinOp
return|;
block|}
specifier|private
name|void
name|genSelectPlan
parameter_list|(
name|ParseContext
name|pctx
parameter_list|,
name|MapJoinOperator
name|input
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|childOps
init|=
name|input
operator|.
name|getChildOperators
argument_list|()
decl_stmt|;
name|input
operator|.
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// create a dummy select - This select is needed by the walker to split the mapJoin later on
name|RowResolver
name|inputRR
init|=
name|pctx
operator|.
name|getOpParseCtx
argument_list|()
operator|.
name|get
argument_list|(
name|input
argument_list|)
operator|.
name|getRR
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|exprs
init|=
operator|new
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|outputCols
init|=
name|input
operator|.
name|getConf
argument_list|()
operator|.
name|getOutputColumnNames
argument_list|()
decl_stmt|;
name|RowResolver
name|outputRS
init|=
operator|new
name|RowResolver
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|exprNodeDesc
argument_list|>
name|colExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|exprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|internalName
init|=
name|outputCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
index|[]
name|nm
init|=
name|inputRR
operator|.
name|reverseLookup
argument_list|(
name|internalName
argument_list|)
decl_stmt|;
name|ColumnInfo
name|valueInfo
init|=
name|inputRR
operator|.
name|get
argument_list|(
name|nm
index|[
literal|0
index|]
argument_list|,
name|nm
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|exprNodeDesc
name|colDesc
init|=
operator|new
name|exprNodeColumnDesc
argument_list|(
name|valueInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|valueInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|nm
index|[
literal|0
index|]
argument_list|,
name|valueInfo
operator|.
name|getIsPartitionCol
argument_list|()
argument_list|)
decl_stmt|;
name|exprs
operator|.
name|add
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|outputs
operator|.
name|add
argument_list|(
name|internalName
argument_list|)
expr_stmt|;
name|outputRS
operator|.
name|put
argument_list|(
name|nm
index|[
literal|0
index|]
argument_list|,
name|nm
index|[
literal|1
index|]
argument_list|,
operator|new
name|ColumnInfo
argument_list|(
name|internalName
argument_list|,
name|valueInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|nm
index|[
literal|0
index|]
argument_list|,
name|valueInfo
operator|.
name|getIsPartitionCol
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|colExprMap
operator|.
name|put
argument_list|(
name|internalName
argument_list|,
name|colDesc
argument_list|)
expr_stmt|;
block|}
name|selectDesc
name|select
init|=
operator|new
name|selectDesc
argument_list|(
name|exprs
argument_list|,
name|outputs
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SelectOperator
name|sel
init|=
operator|(
name|SelectOperator
operator|)
name|putOpInsertMap
argument_list|(
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|select
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|inputRR
operator|.
name|getColumnInfos
argument_list|()
argument_list|)
argument_list|,
name|input
argument_list|)
argument_list|,
name|inputRR
argument_list|)
decl_stmt|;
name|sel
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
comment|// Insert the select operator in between.
name|sel
operator|.
name|setChildOperators
argument_list|(
name|childOps
argument_list|)
expr_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|ch
range|:
name|childOps
control|)
block|{
name|ch
operator|.
name|replaceParent
argument_list|(
name|input
argument_list|,
name|sel
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Is it a map-side join.     * @param op join operator    * @param qbJoin qb join tree    * @return -1 if it cannot be converted to a map-side join, position of the map join node otherwise    */
specifier|private
name|int
name|mapSideJoin
parameter_list|(
name|JoinOperator
name|op
parameter_list|,
name|QBJoinTree
name|joinTree
parameter_list|)
throws|throws
name|SemanticException
block|{
name|int
name|mapJoinPos
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|joinTree
operator|.
name|isMapSideJoin
argument_list|()
condition|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
comment|// In a map-side join, exactly one table is not present in memory.
comment|// The client provides the list of tables which can be cached in memory via a hint.
if|if
condition|(
name|joinTree
operator|.
name|getJoinSrc
argument_list|()
operator|!=
literal|null
condition|)
name|mapJoinPos
operator|=
name|pos
expr_stmt|;
for|for
control|(
name|String
name|src
range|:
name|joinTree
operator|.
name|getBaseSrc
argument_list|()
control|)
block|{
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|joinTree
operator|.
name|getMapAliases
argument_list|()
operator|.
name|contains
argument_list|(
name|src
argument_list|)
condition|)
block|{
if|if
condition|(
name|mapJoinPos
operator|>=
literal|0
condition|)
return|return
operator|-
literal|1
return|;
name|mapJoinPos
operator|=
name|pos
expr_stmt|;
block|}
block|}
name|pos
operator|++
expr_stmt|;
block|}
comment|// All tables are to be cached - this is not possible. In future, we can support this by randomly
comment|// leaving some table from the list of tables to be cached
if|if
condition|(
name|mapJoinPos
operator|==
operator|-
literal|1
condition|)
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_MAPJOIN_HINT
operator|.
name|getMsg
argument_list|(
name|pGraphContext
operator|.
name|getQB
argument_list|()
operator|.
name|getParseInfo
argument_list|()
operator|.
name|getHints
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|mapJoinPos
return|;
block|}
comment|/**    * Transform the query tree. For each join, check if it is a map-side join (user specified). If yes,     * convert it to a map-side join.    * @param pactx current parse context    */
specifier|public
name|ParseContext
name|transform
parameter_list|(
name|ParseContext
name|pactx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|this
operator|.
name|pGraphContext
operator|=
name|pactx
expr_stmt|;
name|List
argument_list|<
name|MapJoinOperator
argument_list|>
name|listMapJoinOps
init|=
operator|new
name|ArrayList
argument_list|<
name|MapJoinOperator
argument_list|>
argument_list|()
decl_stmt|;
comment|// traverse all the joins and convert them if necessary
if|if
condition|(
name|pGraphContext
operator|.
name|getJoinContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|JoinOperator
argument_list|,
name|QBJoinTree
argument_list|>
name|joinMap
init|=
operator|new
name|HashMap
argument_list|<
name|JoinOperator
argument_list|,
name|QBJoinTree
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|JoinOperator
argument_list|,
name|QBJoinTree
argument_list|>
argument_list|>
name|joinCtx
init|=
name|pGraphContext
operator|.
name|getJoinContext
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|JoinOperator
argument_list|,
name|QBJoinTree
argument_list|>
argument_list|>
name|joinCtxIter
init|=
name|joinCtx
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|joinCtxIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|JoinOperator
argument_list|,
name|QBJoinTree
argument_list|>
name|joinEntry
init|=
name|joinCtxIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|JoinOperator
name|joinOp
init|=
name|joinEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|QBJoinTree
name|qbJoin
init|=
name|joinEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|mapJoinPos
init|=
name|mapSideJoin
argument_list|(
name|joinOp
argument_list|,
name|qbJoin
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapJoinPos
operator|>=
literal|0
condition|)
block|{
name|listMapJoinOps
operator|.
name|add
argument_list|(
name|convertMapJoin
argument_list|(
name|pactx
argument_list|,
name|joinOp
argument_list|,
name|qbJoin
argument_list|,
name|mapJoinPos
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|joinMap
operator|.
name|put
argument_list|(
name|joinOp
argument_list|,
name|qbJoin
argument_list|)
expr_stmt|;
block|}
block|}
comment|// store the new joinContext
name|pGraphContext
operator|.
name|setJoinContext
argument_list|(
name|joinMap
argument_list|)
expr_stmt|;
block|}
comment|// Go over the list and find if a reducer is not needed
name|List
argument_list|<
name|MapJoinOperator
argument_list|>
name|listMapJoinOpsNoRed
init|=
operator|new
name|ArrayList
argument_list|<
name|MapJoinOperator
argument_list|>
argument_list|()
decl_stmt|;
comment|// create a walker which walks the tree in a DFS manner while maintaining the operator stack.
comment|// The dispatcher generates the plan from the operator tree
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
operator|new
name|String
argument_list|(
literal|"R0"
argument_list|)
argument_list|,
literal|"MAPJOIN%"
argument_list|)
argument_list|,
name|getCurrentMapJoin
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
operator|new
name|String
argument_list|(
literal|"R1"
argument_list|)
argument_list|,
literal|"MAPJOIN%.*FS%"
argument_list|)
argument_list|,
name|getMapJoinFS
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
operator|new
name|String
argument_list|(
literal|"R2"
argument_list|)
argument_list|,
literal|"MAPJOIN%.*RS%"
argument_list|)
argument_list|,
name|getMapJoinDefault
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
operator|new
name|String
argument_list|(
literal|"R3"
argument_list|)
argument_list|,
literal|"MAPJOIN%.*MAPJOIN%"
argument_list|)
argument_list|,
name|getMapJoinDefault
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
operator|new
name|String
argument_list|(
literal|"R4"
argument_list|)
argument_list|,
literal|"MAPJOIN%.*UNION%"
argument_list|)
argument_list|,
name|getMapJoinDefault
argument_list|()
argument_list|)
expr_stmt|;
comment|// The dispatcher fires the processor corresponding to the closest matching rule and passes the context along
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|getDefault
argument_list|()
argument_list|,
name|opRules
argument_list|,
operator|new
name|MapJoinWalkerCtx
argument_list|(
name|listMapJoinOpsNoRed
argument_list|)
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|GenMapRedWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|listMapJoinOps
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|pGraphContext
operator|.
name|setListMapJoinOpsNoReducer
argument_list|(
name|listMapJoinOpsNoRed
argument_list|)
expr_stmt|;
return|return
name|pGraphContext
return|;
block|}
specifier|public
specifier|static
class|class
name|CurrentMapJoin
implements|implements
name|NodeProcessor
block|{
comment|/**      * Store the current mapjoin in the context      */
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|MapJoinWalkerCtx
name|ctx
init|=
operator|(
name|MapJoinWalkerCtx
operator|)
name|procCtx
decl_stmt|;
name|MapJoinOperator
name|mapJoin
init|=
operator|(
name|MapJoinOperator
operator|)
name|nd
decl_stmt|;
name|ctx
operator|.
name|setCurrMapJoinOp
argument_list|(
name|mapJoin
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MapJoinFS
implements|implements
name|NodeProcessor
block|{
comment|/**      * Store the current mapjoin in a list of mapjoins followed by a filesink      */
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|MapJoinWalkerCtx
name|ctx
init|=
operator|(
name|MapJoinWalkerCtx
operator|)
name|procCtx
decl_stmt|;
name|MapJoinOperator
name|mapJoin
init|=
name|ctx
operator|.
name|getCurrMapJoinOp
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MapJoinOperator
argument_list|>
name|listRejectedMapJoins
init|=
name|ctx
operator|.
name|getListRejectedMapJoins
argument_list|()
decl_stmt|;
comment|// the mapjoin has already been handled
if|if
condition|(
operator|(
name|listRejectedMapJoins
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|listRejectedMapJoins
operator|.
name|contains
argument_list|(
name|mapJoin
argument_list|)
operator|)
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|MapJoinOperator
argument_list|>
name|listMapJoinsNoRed
init|=
name|ctx
operator|.
name|getListMapJoinsNoRed
argument_list|()
decl_stmt|;
if|if
condition|(
name|listMapJoinsNoRed
operator|==
literal|null
condition|)
name|listMapJoinsNoRed
operator|=
operator|new
name|ArrayList
argument_list|<
name|MapJoinOperator
argument_list|>
argument_list|()
expr_stmt|;
name|listMapJoinsNoRed
operator|.
name|add
argument_list|(
name|mapJoin
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setListMapJoins
argument_list|(
name|listMapJoinsNoRed
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MapJoinDefault
implements|implements
name|NodeProcessor
block|{
comment|/**      * Store the mapjoin in a rejected list      */
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|MapJoinWalkerCtx
name|ctx
init|=
operator|(
name|MapJoinWalkerCtx
operator|)
name|procCtx
decl_stmt|;
name|MapJoinOperator
name|mapJoin
init|=
name|ctx
operator|.
name|getCurrMapJoinOp
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MapJoinOperator
argument_list|>
name|listRejectedMapJoins
init|=
name|ctx
operator|.
name|getListRejectedMapJoins
argument_list|()
decl_stmt|;
if|if
condition|(
name|listRejectedMapJoins
operator|==
literal|null
condition|)
name|listRejectedMapJoins
operator|=
operator|new
name|ArrayList
argument_list|<
name|MapJoinOperator
argument_list|>
argument_list|()
expr_stmt|;
name|listRejectedMapJoins
operator|.
name|add
argument_list|(
name|mapJoin
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setListRejectedMapJoins
argument_list|(
name|listRejectedMapJoins
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Default
implements|implements
name|NodeProcessor
block|{
comment|/**      * nothing to do      */
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getMapJoinFS
parameter_list|()
block|{
return|return
operator|new
name|MapJoinFS
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getMapJoinDefault
parameter_list|()
block|{
return|return
operator|new
name|MapJoinDefault
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getDefault
parameter_list|()
block|{
return|return
operator|new
name|Default
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getCurrentMapJoin
parameter_list|()
block|{
return|return
operator|new
name|CurrentMapJoin
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|MapJoinWalkerCtx
implements|implements
name|NodeProcessorCtx
block|{
name|List
argument_list|<
name|MapJoinOperator
argument_list|>
name|listMapJoinsNoRed
decl_stmt|;
name|List
argument_list|<
name|MapJoinOperator
argument_list|>
name|listRejectedMapJoins
decl_stmt|;
name|MapJoinOperator
name|currMapJoinOp
decl_stmt|;
comment|/**      * @param listMapJoinsNoRed      */
specifier|public
name|MapJoinWalkerCtx
parameter_list|(
name|List
argument_list|<
name|MapJoinOperator
argument_list|>
name|listMapJoinsNoRed
parameter_list|)
block|{
name|this
operator|.
name|listMapJoinsNoRed
operator|=
name|listMapJoinsNoRed
expr_stmt|;
name|this
operator|.
name|currMapJoinOp
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|listRejectedMapJoins
operator|=
operator|new
name|ArrayList
argument_list|<
name|MapJoinOperator
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return the listMapJoins      */
specifier|public
name|List
argument_list|<
name|MapJoinOperator
argument_list|>
name|getListMapJoinsNoRed
parameter_list|()
block|{
return|return
name|listMapJoinsNoRed
return|;
block|}
comment|/**      * @param listMapJoinsNoRed the listMapJoins to set      */
specifier|public
name|void
name|setListMapJoins
parameter_list|(
name|List
argument_list|<
name|MapJoinOperator
argument_list|>
name|listMapJoinsNoRed
parameter_list|)
block|{
name|this
operator|.
name|listMapJoinsNoRed
operator|=
name|listMapJoinsNoRed
expr_stmt|;
block|}
comment|/**      * @return the currMapJoinOp      */
specifier|public
name|MapJoinOperator
name|getCurrMapJoinOp
parameter_list|()
block|{
return|return
name|currMapJoinOp
return|;
block|}
comment|/**      * @param currMapJoinOp the currMapJoinOp to set      */
specifier|public
name|void
name|setCurrMapJoinOp
parameter_list|(
name|MapJoinOperator
name|currMapJoinOp
parameter_list|)
block|{
name|this
operator|.
name|currMapJoinOp
operator|=
name|currMapJoinOp
expr_stmt|;
block|}
comment|/**      * @return the listRejectedMapJoins      */
specifier|public
name|List
argument_list|<
name|MapJoinOperator
argument_list|>
name|getListRejectedMapJoins
parameter_list|()
block|{
return|return
name|listRejectedMapJoins
return|;
block|}
comment|/**      * @param listRejectedMapJoins the listRejectedMapJoins to set      */
specifier|public
name|void
name|setListRejectedMapJoins
parameter_list|(
name|List
argument_list|<
name|MapJoinOperator
argument_list|>
name|listRejectedMapJoins
parameter_list|)
block|{
name|this
operator|.
name|listRejectedMapJoins
operator|=
name|listRejectedMapJoins
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

