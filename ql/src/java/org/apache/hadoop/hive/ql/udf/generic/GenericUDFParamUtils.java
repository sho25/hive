begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Generic UDF params utility class  */
end_comment

begin_class
specifier|public
class|class
name|GenericUDFParamUtils
block|{
specifier|private
name|GenericUDFParamUtils
parameter_list|()
block|{   }
specifier|public
specifier|static
name|BytesWritable
name|getBinaryValue
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|,
name|int
name|i
parameter_list|,
name|Converter
index|[]
name|converters
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|obj
decl_stmt|;
if|if
condition|(
operator|(
name|obj
operator|=
name|arguments
index|[
name|i
index|]
operator|.
name|get
argument_list|()
operator|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|writableValue
init|=
name|converters
index|[
name|i
index|]
operator|.
name|convert
argument_list|(
name|obj
argument_list|)
decl_stmt|;
return|return
operator|(
name|BytesWritable
operator|)
name|writableValue
return|;
block|}
specifier|public
specifier|static
name|Text
name|getTextValue
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|,
name|int
name|i
parameter_list|,
name|Converter
index|[]
name|converters
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|obj
decl_stmt|;
if|if
condition|(
operator|(
name|obj
operator|=
name|arguments
index|[
name|i
index|]
operator|.
name|get
argument_list|()
operator|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|writableValue
init|=
name|converters
index|[
name|i
index|]
operator|.
name|convert
argument_list|(
name|obj
argument_list|)
decl_stmt|;
return|return
operator|(
name|Text
operator|)
name|writableValue
return|;
block|}
specifier|public
specifier|static
name|void
name|obtainBinaryConverter
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|,
name|int
name|i
parameter_list|,
name|PrimitiveCategory
index|[]
name|inputTypes
parameter_list|,
name|Converter
index|[]
name|converters
parameter_list|)
throws|throws
name|UDFArgumentTypeException
block|{
name|PrimitiveObjectInspector
name|inOi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
name|i
index|]
decl_stmt|;
name|PrimitiveCategory
name|inputType
init|=
name|inOi
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
name|Converter
name|converter
init|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|arguments
index|[
name|i
index|]
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
argument_list|)
decl_stmt|;
name|converters
index|[
name|i
index|]
operator|=
name|converter
expr_stmt|;
name|inputTypes
index|[
name|i
index|]
operator|=
name|inputType
expr_stmt|;
block|}
block|}
end_class

end_unit

