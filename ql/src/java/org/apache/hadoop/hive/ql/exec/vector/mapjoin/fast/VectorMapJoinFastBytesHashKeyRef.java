begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|WriteBuffers
import|;
end_import

begin_comment
comment|// import com.google.common.base.Preconditions;
end_comment

begin_class
specifier|public
class|class
name|VectorMapJoinFastBytesHashKeyRef
block|{
specifier|public
specifier|static
name|boolean
name|equalKey
parameter_list|(
name|long
name|refWord
parameter_list|,
name|byte
index|[]
name|keyBytes
parameter_list|,
name|int
name|keyStart
parameter_list|,
name|int
name|keyLength
parameter_list|,
name|WriteBuffers
name|writeBuffers
parameter_list|,
name|WriteBuffers
operator|.
name|Position
name|readPos
parameter_list|)
block|{
comment|// Preconditions.checkState((refWord& KeyRef.IsInvalidFlag.flagOnMask) == 0);
specifier|final
name|long
name|absoluteOffset
init|=
name|KeyRef
operator|.
name|getAbsoluteOffset
argument_list|(
name|refWord
argument_list|)
decl_stmt|;
name|writeBuffers
operator|.
name|setReadPoint
argument_list|(
name|absoluteOffset
argument_list|,
name|readPos
argument_list|)
expr_stmt|;
name|int
name|actualKeyLength
init|=
name|KeyRef
operator|.
name|getSmallKeyLength
argument_list|(
name|refWord
argument_list|)
decl_stmt|;
name|boolean
name|isKeyLengthSmall
init|=
operator|(
name|actualKeyLength
operator|!=
name|KeyRef
operator|.
name|SmallKeyLength
operator|.
name|allBitsOn
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|isKeyLengthSmall
condition|)
block|{
comment|// And, if current value is big we must read it.
name|actualKeyLength
operator|=
name|writeBuffers
operator|.
name|readVInt
argument_list|(
name|readPos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|actualKeyLength
operator|!=
name|keyLength
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Our reading was positioned to the key.
if|if
condition|(
operator|!
name|writeBuffers
operator|.
name|isEqual
argument_list|(
name|keyBytes
argument_list|,
name|keyStart
argument_list|,
name|readPos
argument_list|,
name|keyLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|int
name|calculateHashCode
parameter_list|(
name|long
name|refWord
parameter_list|,
name|WriteBuffers
name|writeBuffers
parameter_list|,
name|WriteBuffers
operator|.
name|Position
name|readPos
parameter_list|)
block|{
comment|// Preconditions.checkState((refWord& KeyRef.IsInvalidFlag.flagOnMask) == 0);
specifier|final
name|long
name|absoluteOffset
init|=
name|KeyRef
operator|.
name|getAbsoluteOffset
argument_list|(
name|refWord
argument_list|)
decl_stmt|;
name|int
name|actualKeyLength
init|=
name|KeyRef
operator|.
name|getSmallKeyLength
argument_list|(
name|refWord
argument_list|)
decl_stmt|;
name|boolean
name|isKeyLengthSmall
init|=
operator|(
name|actualKeyLength
operator|!=
name|KeyRef
operator|.
name|SmallKeyLength
operator|.
name|allBitsOn
operator|)
decl_stmt|;
specifier|final
name|long
name|keyAbsoluteOffset
decl_stmt|;
if|if
condition|(
operator|!
name|isKeyLengthSmall
condition|)
block|{
comment|// Position after next relative offset (fixed length) to the key.
name|writeBuffers
operator|.
name|setReadPoint
argument_list|(
name|absoluteOffset
argument_list|,
name|readPos
argument_list|)
expr_stmt|;
comment|// And, if current value is big we must read it.
name|actualKeyLength
operator|=
name|writeBuffers
operator|.
name|readVInt
argument_list|(
name|readPos
argument_list|)
expr_stmt|;
name|keyAbsoluteOffset
operator|=
name|absoluteOffset
operator|+
name|actualKeyLength
expr_stmt|;
block|}
else|else
block|{
name|keyAbsoluteOffset
operator|=
name|absoluteOffset
expr_stmt|;
block|}
return|return
name|writeBuffers
operator|.
name|unsafeHashCode
argument_list|(
name|keyAbsoluteOffset
argument_list|,
name|actualKeyLength
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|final
class|class
name|KeyRef
block|{
comment|// Lowest field.
specifier|public
specifier|static
specifier|final
class|class
name|PartialHashCode
block|{
specifier|public
specifier|static
specifier|final
name|int
name|bitLength
init|=
literal|15
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|allBitsOn
init|=
operator|(
literal|1L
operator|<<
name|bitLength
operator|)
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|bitMask
init|=
name|allBitsOn
decl_stmt|;
comment|// Choose the high bits of the hash code KNOWING it was calculated as an int.
comment|//
comment|// We want the partial hash code to be different than the
comment|// lower bits used for our hash table slot calculations.
specifier|public
specifier|static
specifier|final
name|int
name|intChooseBitShift
init|=
name|Integer
operator|.
name|SIZE
operator|-
name|bitLength
decl_stmt|;
block|}
specifier|public
specifier|static
name|long
name|getPartialHashCode
parameter_list|(
name|long
name|refWord
parameter_list|)
block|{
comment|// No shift needed since this is the lowest field.
return|return
name|refWord
operator|&
name|PartialHashCode
operator|.
name|bitMask
return|;
block|}
comment|// Can make the 64 bit reference non-zero if this is non-zero.  E.g. for hash map and
comment|// hash multi-set, the offset is to the first key which is always preceded by a 5 byte next
comment|// relative value offset or 4 byte count.
specifier|public
specifier|static
specifier|final
class|class
name|AbsoluteOffset
block|{
specifier|public
specifier|static
specifier|final
name|int
name|bitLength
init|=
literal|39
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|byteLength
init|=
operator|(
name|bitLength
operator|+
name|Byte
operator|.
name|SIZE
operator|-
literal|1
operator|)
operator|/
name|Byte
operator|.
name|SIZE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|allBitsOn
init|=
operator|(
literal|1L
operator|<<
name|bitLength
operator|)
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|bitShift
init|=
name|PartialHashCode
operator|.
name|bitLength
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|bitMask
init|=
operator|(
operator|(
name|long
operator|)
name|allBitsOn
operator|)
operator|<<
name|bitShift
decl_stmt|;
comment|// Make it a power of 2.
specifier|public
specifier|static
specifier|final
name|long
name|maxSize
init|=
literal|1L
operator|<<
operator|(
name|bitLength
operator|-
literal|2
operator|)
decl_stmt|;
block|}
specifier|public
specifier|static
name|long
name|getAbsoluteOffset
parameter_list|(
name|long
name|refWord
parameter_list|)
block|{
return|return
operator|(
name|refWord
operator|&
name|KeyRef
operator|.
name|AbsoluteOffset
operator|.
name|bitMask
operator|)
operator|>>
name|AbsoluteOffset
operator|.
name|bitShift
return|;
block|}
comment|// When this field equals SmallKeyLength.allBitsOn, the key length is serialized at the
comment|// beginning of the key.
specifier|public
specifier|static
specifier|final
class|class
name|SmallKeyLength
block|{
specifier|public
specifier|static
specifier|final
name|int
name|bitLength
init|=
literal|8
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|allBitsOn
init|=
operator|(
literal|1
operator|<<
name|bitLength
operator|)
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|threshold
init|=
name|allBitsOn
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|bitShift
init|=
name|AbsoluteOffset
operator|.
name|bitShift
operator|+
name|AbsoluteOffset
operator|.
name|bitLength
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|bitMask
init|=
operator|(
operator|(
name|long
operator|)
name|allBitsOn
operator|)
operator|<<
name|bitShift
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|allBitsOnBitShifted
init|=
operator|(
operator|(
name|long
operator|)
name|allBitsOn
operator|)
operator|<<
name|bitShift
decl_stmt|;
block|}
specifier|public
specifier|static
name|int
name|getSmallKeyLength
parameter_list|(
name|long
name|refWord
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
operator|(
name|refWord
operator|&
name|SmallKeyLength
operator|.
name|bitMask
operator|)
operator|>>
name|SmallKeyLength
operator|.
name|bitShift
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|final
class|class
name|IsSingleFlag
block|{
specifier|public
specifier|static
specifier|final
name|int
name|bitShift
init|=
name|SmallKeyLength
operator|.
name|bitShift
operator|+
name|SmallKeyLength
operator|.
name|bitLength
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|flagOnMask
init|=
literal|1L
operator|<<
name|bitShift
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|flagOffMask
init|=
operator|~
name|flagOnMask
decl_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|getIsSingleFlag
parameter_list|(
name|long
name|refWord
parameter_list|)
block|{
return|return
operator|(
name|refWord
operator|&
name|IsSingleFlag
operator|.
name|flagOnMask
operator|)
operator|!=
literal|0
return|;
block|}
comment|// This bit should not be on for valid value references.  We use -1 for a no value marker.
specifier|public
specifier|static
specifier|final
class|class
name|IsInvalidFlag
block|{
specifier|public
specifier|static
specifier|final
name|int
name|bitShift
init|=
literal|63
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|flagOnMask
init|=
literal|1L
operator|<<
name|bitShift
decl_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|getIsInvalidFlag
parameter_list|(
name|long
name|refWord
parameter_list|)
block|{
return|return
operator|(
name|refWord
operator|&
name|IsInvalidFlag
operator|.
name|flagOnMask
operator|)
operator|!=
literal|0
return|;
block|}
block|}
comment|/**    * Extract partial hash code from the full hash code.    *    * Choose the high bits of the hash code KNOWING it was calculated as an int.    *    * We want the partial hash code to be different than the    * lower bits used for our hash table slot calculations.    *    * @param hashCode    * @return    */
specifier|public
specifier|static
name|long
name|extractPartialHashCode
parameter_list|(
name|long
name|hashCode
parameter_list|)
block|{
return|return
operator|(
name|hashCode
operator|>>>
name|KeyRef
operator|.
name|PartialHashCode
operator|.
name|intChooseBitShift
operator|)
operator|&
name|KeyRef
operator|.
name|PartialHashCode
operator|.
name|bitMask
return|;
block|}
comment|/**    * Get partial hash code from the reference word.    * @param hashCode    * @return    */
specifier|public
specifier|static
name|long
name|getPartialHashCodeFromRefWord
parameter_list|(
name|long
name|refWord
parameter_list|)
block|{
return|return
name|KeyRef
operator|.
name|getPartialHashCode
argument_list|(
name|refWord
argument_list|)
return|;
block|}
block|}
end_class

end_unit

