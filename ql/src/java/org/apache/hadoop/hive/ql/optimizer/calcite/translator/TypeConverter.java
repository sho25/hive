begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|avatica
operator|.
name|util
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlIntervalQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|parser
operator|.
name|SqlParserPos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ConversionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|CalciteSemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|CalciteSemanticException
operator|.
name|UnsupportedFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|SqlFunctionConverter
operator|.
name|HiveToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|RowResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|BaseCharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|TypeConverter
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|HiveToken
argument_list|>
name|calciteToHiveTypeNameMap
decl_stmt|;
static|static
block|{
name|Builder
argument_list|<
name|String
argument_list|,
name|HiveToken
argument_list|>
name|b
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|HiveToken
decl|>
name|builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|TOK_BOOLEAN
argument_list|,
literal|"TOK_BOOLEAN"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|TOK_TINYINT
argument_list|,
literal|"TOK_TINYINT"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|TOK_SMALLINT
argument_list|,
literal|"TOK_SMALLINT"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|TOK_INT
argument_list|,
literal|"TOK_INT"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|TOK_BIGINT
argument_list|,
literal|"TOK_BIGINT"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|TOK_FLOAT
argument_list|,
literal|"TOK_FLOAT"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|TOK_DOUBLE
argument_list|,
literal|"TOK_DOUBLE"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|DATE
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|TOK_DATE
argument_list|,
literal|"TOK_DATE"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|TOK_TIMESTAMP
argument_list|,
literal|"TOK_TIMESTAMP"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_YEAR
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|serdeConstants
operator|.
name|INTERVAL_YEAR_MONTH_TYPE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_MONTH
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|serdeConstants
operator|.
name|INTERVAL_YEAR_MONTH_TYPE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_YEAR_MONTH
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|serdeConstants
operator|.
name|INTERVAL_YEAR_MONTH_TYPE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_DAY
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|serdeConstants
operator|.
name|INTERVAL_DAY_TIME_TYPE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_DAY_HOUR
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|serdeConstants
operator|.
name|INTERVAL_DAY_TIME_TYPE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_DAY_MINUTE
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|serdeConstants
operator|.
name|INTERVAL_DAY_TIME_TYPE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_DAY_SECOND
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|serdeConstants
operator|.
name|INTERVAL_DAY_TIME_TYPE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_HOUR
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|serdeConstants
operator|.
name|INTERVAL_DAY_TIME_TYPE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_HOUR_MINUTE
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|serdeConstants
operator|.
name|INTERVAL_DAY_TIME_TYPE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_HOUR_SECOND
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|serdeConstants
operator|.
name|INTERVAL_DAY_TIME_TYPE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_MINUTE
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|serdeConstants
operator|.
name|INTERVAL_DAY_TIME_TYPE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_MINUTE_SECOND
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|serdeConstants
operator|.
name|INTERVAL_DAY_TIME_TYPE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|INTERVAL_SECOND
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|Identifier
argument_list|,
name|serdeConstants
operator|.
name|INTERVAL_DAY_TIME_TYPE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|put
argument_list|(
name|SqlTypeName
operator|.
name|BINARY
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|TOK_BINARY
argument_list|,
literal|"TOK_BINARY"
argument_list|)
argument_list|)
expr_stmt|;
name|calciteToHiveTypeNameMap
operator|=
name|b
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
comment|/*********************** Convert Hive Types To Calcite Types ***********************/
specifier|public
specifier|static
name|RelDataType
name|getType
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|List
argument_list|<
name|ColumnInfo
argument_list|>
name|cInfoLst
parameter_list|)
throws|throws
name|CalciteSemanticException
block|{
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|RelDataTypeFactory
name|dtFactory
init|=
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RelDataType
argument_list|>
name|fieldTypes
init|=
operator|new
name|LinkedList
argument_list|<
name|RelDataType
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|ci
range|:
name|cInfoLst
control|)
block|{
name|fieldTypes
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|ci
operator|.
name|getType
argument_list|()
argument_list|,
name|dtFactory
argument_list|)
argument_list|)
expr_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
name|ci
operator|.
name|getInternalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|dtFactory
operator|.
name|createStructType
argument_list|(
name|fieldTypes
argument_list|,
name|fieldNames
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RelDataType
name|getType
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RowResolver
name|rr
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|neededCols
parameter_list|)
throws|throws
name|CalciteSemanticException
block|{
name|RexBuilder
name|rexBuilder
init|=
name|cluster
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|RelDataTypeFactory
name|dtFactory
init|=
name|rexBuilder
operator|.
name|getTypeFactory
argument_list|()
decl_stmt|;
name|RowSchema
name|rs
init|=
name|rr
operator|.
name|getRowSchema
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RelDataType
argument_list|>
name|fieldTypes
init|=
operator|new
name|LinkedList
argument_list|<
name|RelDataType
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|ci
range|:
name|rs
operator|.
name|getSignature
argument_list|()
control|)
block|{
if|if
condition|(
name|neededCols
operator|==
literal|null
operator|||
name|neededCols
operator|.
name|contains
argument_list|(
name|ci
operator|.
name|getInternalName
argument_list|()
argument_list|)
condition|)
block|{
name|fieldTypes
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|ci
operator|.
name|getType
argument_list|()
argument_list|,
name|dtFactory
argument_list|)
argument_list|)
expr_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
name|ci
operator|.
name|getInternalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dtFactory
operator|.
name|createStructType
argument_list|(
name|fieldTypes
argument_list|,
name|fieldNames
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RelDataType
name|convert
parameter_list|(
name|TypeInfo
name|type
parameter_list|,
name|RelDataTypeFactory
name|dtFactory
parameter_list|)
throws|throws
name|CalciteSemanticException
block|{
name|RelDataType
name|convertedType
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
name|convertedType
operator|=
name|convert
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|type
argument_list|,
name|dtFactory
argument_list|)
expr_stmt|;
break|break;
case|case
name|LIST
case|:
name|convertedType
operator|=
name|convert
argument_list|(
operator|(
name|ListTypeInfo
operator|)
name|type
argument_list|,
name|dtFactory
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP
case|:
name|convertedType
operator|=
name|convert
argument_list|(
operator|(
name|MapTypeInfo
operator|)
name|type
argument_list|,
name|dtFactory
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
name|convertedType
operator|=
name|convert
argument_list|(
operator|(
name|StructTypeInfo
operator|)
name|type
argument_list|,
name|dtFactory
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNION
case|:
name|convertedType
operator|=
name|convert
argument_list|(
operator|(
name|UnionTypeInfo
operator|)
name|type
argument_list|,
name|dtFactory
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|convertedType
return|;
block|}
specifier|public
specifier|static
name|RelDataType
name|convert
parameter_list|(
name|PrimitiveTypeInfo
name|type
parameter_list|,
name|RelDataTypeFactory
name|dtFactory
parameter_list|)
block|{
name|RelDataType
name|convertedType
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
name|convertedType
operator|=
name|dtFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|NULL
argument_list|)
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
name|convertedType
operator|=
name|dtFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|convertedType
operator|=
name|dtFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|convertedType
operator|=
name|dtFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|convertedType
operator|=
name|dtFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|convertedType
operator|=
name|dtFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|convertedType
operator|=
name|dtFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|convertedType
operator|=
name|dtFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|convertedType
operator|=
name|dtFactory
operator|.
name|createTypeWithCharsetAndCollation
argument_list|(
name|dtFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|ConversionUtil
operator|.
name|NATIVE_UTF16_CHARSET_NAME
argument_list|)
argument_list|,
name|SqlCollation
operator|.
name|IMPLICIT
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|convertedType
operator|=
name|dtFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DATE
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|convertedType
operator|=
name|dtFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMPLOCALTZ
case|:
name|convertedType
operator|=
name|dtFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
name|convertedType
operator|=
name|dtFactory
operator|.
name|createSqlIntervalType
argument_list|(
operator|new
name|SqlIntervalQualifier
argument_list|(
name|TimeUnit
operator|.
name|YEAR
argument_list|,
name|TimeUnit
operator|.
name|MONTH
argument_list|,
operator|new
name|SqlParserPos
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
name|convertedType
operator|=
name|dtFactory
operator|.
name|createSqlIntervalType
argument_list|(
operator|new
name|SqlIntervalQualifier
argument_list|(
name|TimeUnit
operator|.
name|DAY
argument_list|,
name|TimeUnit
operator|.
name|SECOND
argument_list|,
operator|new
name|SqlParserPos
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
name|convertedType
operator|=
name|dtFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BINARY
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|DecimalTypeInfo
name|dtInf
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|type
decl_stmt|;
name|convertedType
operator|=
name|dtFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|DECIMAL
argument_list|,
name|dtInf
operator|.
name|precision
argument_list|()
argument_list|,
name|dtInf
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|VARCHAR
case|:
name|convertedType
operator|=
name|dtFactory
operator|.
name|createTypeWithCharsetAndCollation
argument_list|(
name|dtFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|VARCHAR
argument_list|,
operator|(
operator|(
name|BaseCharTypeInfo
operator|)
name|type
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|ConversionUtil
operator|.
name|NATIVE_UTF16_CHARSET_NAME
argument_list|)
argument_list|,
name|SqlCollation
operator|.
name|IMPLICIT
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
name|convertedType
operator|=
name|dtFactory
operator|.
name|createTypeWithCharsetAndCollation
argument_list|(
name|dtFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|CHAR
argument_list|,
operator|(
operator|(
name|BaseCharTypeInfo
operator|)
name|type
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|ConversionUtil
operator|.
name|NATIVE_UTF16_CHARSET_NAME
argument_list|)
argument_list|,
name|SqlCollation
operator|.
name|IMPLICIT
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNKNOWN
case|:
name|convertedType
operator|=
name|dtFactory
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|OTHER
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
literal|null
operator|==
name|convertedType
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported Type : "
operator|+
name|type
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|dtFactory
operator|.
name|createTypeWithNullability
argument_list|(
name|convertedType
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RelDataType
name|convert
parameter_list|(
name|ListTypeInfo
name|lstType
parameter_list|,
name|RelDataTypeFactory
name|dtFactory
parameter_list|)
throws|throws
name|CalciteSemanticException
block|{
name|RelDataType
name|elemType
init|=
name|convert
argument_list|(
name|lstType
operator|.
name|getListElementTypeInfo
argument_list|()
argument_list|,
name|dtFactory
argument_list|)
decl_stmt|;
return|return
name|dtFactory
operator|.
name|createArrayType
argument_list|(
name|elemType
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RelDataType
name|convert
parameter_list|(
name|MapTypeInfo
name|mapType
parameter_list|,
name|RelDataTypeFactory
name|dtFactory
parameter_list|)
throws|throws
name|CalciteSemanticException
block|{
name|RelDataType
name|keyType
init|=
name|convert
argument_list|(
name|mapType
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|,
name|dtFactory
argument_list|)
decl_stmt|;
name|RelDataType
name|valueType
init|=
name|convert
argument_list|(
name|mapType
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|,
name|dtFactory
argument_list|)
decl_stmt|;
return|return
name|dtFactory
operator|.
name|createMapType
argument_list|(
name|keyType
argument_list|,
name|valueType
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RelDataType
name|convert
parameter_list|(
name|StructTypeInfo
name|structType
parameter_list|,
specifier|final
name|RelDataTypeFactory
name|dtFactory
parameter_list|)
throws|throws
name|CalciteSemanticException
block|{
name|List
argument_list|<
name|RelDataType
argument_list|>
name|fTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|RelDataType
argument_list|>
argument_list|(
name|structType
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TypeInfo
name|ti
range|:
name|structType
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
control|)
block|{
name|fTypes
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|ti
argument_list|,
name|dtFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|dtFactory
operator|.
name|createStructType
argument_list|(
name|fTypes
argument_list|,
name|structType
operator|.
name|getAllStructFieldNames
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|RelDataType
name|convert
parameter_list|(
name|UnionTypeInfo
name|unionType
parameter_list|,
name|RelDataTypeFactory
name|dtFactory
parameter_list|)
throws|throws
name|CalciteSemanticException
block|{
comment|// Union type is not supported in Calcite.
throw|throw
operator|new
name|CalciteSemanticException
argument_list|(
literal|"Union type is not supported"
argument_list|,
name|UnsupportedFeature
operator|.
name|Union_type
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|TypeInfo
name|convert
parameter_list|(
name|RelDataType
name|rType
parameter_list|)
block|{
if|if
condition|(
name|rType
operator|.
name|isStruct
argument_list|()
condition|)
block|{
return|return
name|convertStructType
argument_list|(
name|rType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rType
operator|.
name|getComponentType
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|convertListType
argument_list|(
name|rType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|rType
operator|.
name|getKeyType
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|convertMapType
argument_list|(
name|rType
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|convertPrimitiveType
argument_list|(
name|rType
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|TypeInfo
name|convertStructType
parameter_list|(
name|RelDataType
name|rType
parameter_list|)
block|{
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fTypes
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|rType
operator|.
name|getFieldList
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|RelDataTypeField
argument_list|,
name|TypeInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TypeInfo
name|apply
parameter_list|(
name|RelDataTypeField
name|f
parameter_list|)
block|{
return|return
name|convert
argument_list|(
name|f
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fNames
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|rType
operator|.
name|getFieldList
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|RelDataTypeField
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|RelDataTypeField
name|f
parameter_list|)
block|{
return|return
name|f
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|fNames
argument_list|,
name|fTypes
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TypeInfo
name|convertMapType
parameter_list|(
name|RelDataType
name|rType
parameter_list|)
block|{
return|return
name|TypeInfoFactory
operator|.
name|getMapTypeInfo
argument_list|(
name|convert
argument_list|(
name|rType
operator|.
name|getKeyType
argument_list|()
argument_list|)
argument_list|,
name|convert
argument_list|(
name|rType
operator|.
name|getValueType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TypeInfo
name|convertListType
parameter_list|(
name|RelDataType
name|rType
parameter_list|)
block|{
return|return
name|TypeInfoFactory
operator|.
name|getListTypeInfo
argument_list|(
name|convert
argument_list|(
name|rType
operator|.
name|getComponentType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TypeInfo
name|convertPrimitiveType
parameter_list|(
name|RelDataType
name|rType
parameter_list|)
block|{
switch|switch
condition|(
name|rType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
return|;
case|case
name|TINYINT
case|:
return|return
name|TypeInfoFactory
operator|.
name|byteTypeInfo
return|;
case|case
name|SMALLINT
case|:
return|return
name|TypeInfoFactory
operator|.
name|shortTypeInfo
return|;
case|case
name|INTEGER
case|:
return|return
name|TypeInfoFactory
operator|.
name|intTypeInfo
return|;
case|case
name|BIGINT
case|:
return|return
name|TypeInfoFactory
operator|.
name|longTypeInfo
return|;
case|case
name|FLOAT
case|:
return|return
name|TypeInfoFactory
operator|.
name|floatTypeInfo
return|;
case|case
name|DOUBLE
case|:
return|return
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
return|;
case|case
name|DATE
case|:
return|return
name|TypeInfoFactory
operator|.
name|dateTypeInfo
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
return|;
case|case
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
case|:
name|HiveConf
name|conf
decl_stmt|;
try|try
block|{
name|conf
operator|=
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|TypeInfoFactory
operator|.
name|getTimestampTZTypeInfo
argument_list|(
name|conf
operator|.
name|getLocalTimeZone
argument_list|()
argument_list|)
return|;
case|case
name|INTERVAL_YEAR
case|:
case|case
name|INTERVAL_MONTH
case|:
case|case
name|INTERVAL_YEAR_MONTH
case|:
return|return
name|TypeInfoFactory
operator|.
name|intervalYearMonthTypeInfo
return|;
case|case
name|INTERVAL_DAY
case|:
case|case
name|INTERVAL_DAY_HOUR
case|:
case|case
name|INTERVAL_DAY_MINUTE
case|:
case|case
name|INTERVAL_DAY_SECOND
case|:
case|case
name|INTERVAL_HOUR
case|:
case|case
name|INTERVAL_HOUR_MINUTE
case|:
case|case
name|INTERVAL_HOUR_SECOND
case|:
case|case
name|INTERVAL_MINUTE
case|:
case|case
name|INTERVAL_MINUTE_SECOND
case|:
case|case
name|INTERVAL_SECOND
case|:
return|return
name|TypeInfoFactory
operator|.
name|intervalDayTimeTypeInfo
return|;
case|case
name|BINARY
case|:
return|return
name|TypeInfoFactory
operator|.
name|binaryTypeInfo
return|;
case|case
name|DECIMAL
case|:
return|return
name|TypeInfoFactory
operator|.
name|getDecimalTypeInfo
argument_list|(
name|rType
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|rType
operator|.
name|getScale
argument_list|()
argument_list|)
return|;
case|case
name|VARCHAR
case|:
name|int
name|varcharLength
init|=
name|rType
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
if|if
condition|(
name|varcharLength
argument_list|<
literal|1
operator|||
name|varcharLength
argument_list|>
name|HiveVarchar
operator|.
name|MAX_VARCHAR_LENGTH
condition|)
return|return
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
return|;
else|else
return|return
name|TypeInfoFactory
operator|.
name|getVarcharTypeInfo
argument_list|(
name|varcharLength
argument_list|)
return|;
case|case
name|CHAR
case|:
name|int
name|charLength
init|=
name|rType
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
if|if
condition|(
name|charLength
argument_list|<
literal|1
operator|||
name|charLength
argument_list|>
name|HiveChar
operator|.
name|MAX_CHAR_LENGTH
condition|)
return|return
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
return|;
else|else
return|return
name|TypeInfoFactory
operator|.
name|getCharTypeInfo
argument_list|(
name|charLength
argument_list|)
return|;
default|default:
return|return
name|TypeInfoFactory
operator|.
name|voidTypeInfo
return|;
block|}
block|}
comment|/*********************** Convert Calcite Types To Hive Types ***********************/
specifier|public
specifier|static
name|HiveToken
name|hiveToken
parameter_list|(
name|RelDataType
name|calciteType
parameter_list|)
block|{
name|HiveToken
name|ht
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|calciteType
operator|.
name|getSqlTypeName
argument_list|()
condition|)
block|{
case|case
name|CHAR
case|:
block|{
name|ht
operator|=
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|TOK_CHAR
argument_list|,
literal|"TOK_CHAR"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|calciteType
operator|.
name|getPrecision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VARCHAR
case|:
block|{
if|if
condition|(
name|calciteType
operator|.
name|getPrecision
argument_list|()
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
name|ht
operator|=
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|TOK_STRING
argument_list|,
literal|"TOK_STRING"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|calciteType
operator|.
name|getPrecision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|ht
operator|=
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|TOK_VARCHAR
argument_list|,
literal|"TOK_VARCHAR"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|calciteType
operator|.
name|getPrecision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DECIMAL
case|:
block|{
name|ht
operator|=
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|TOK_DECIMAL
argument_list|,
literal|"TOK_DECIMAL"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|calciteType
operator|.
name|getPrecision
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|calciteType
operator|.
name|getScale
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP_WITH_LOCAL_TIME_ZONE
case|:
block|{
name|ht
operator|=
operator|new
name|HiveToken
argument_list|(
name|HiveParser
operator|.
name|TOK_TIMESTAMPLOCALTZ
argument_list|,
literal|"TOK_TIMESTAMPLOCALTZ"
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|ht
operator|=
name|calciteToHiveTypeNameMap
operator|.
name|get
argument_list|(
name|calciteType
operator|.
name|getSqlTypeName
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ht
return|;
block|}
block|}
end_class

end_unit

