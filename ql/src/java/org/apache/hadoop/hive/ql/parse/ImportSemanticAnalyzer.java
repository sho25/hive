begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|tree
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ObjectUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReplCopyTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveFileFormatUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|HiveTxnManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|InvalidTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|DumpType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|load
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|load
operator|.
name|UpdatedMetaDataTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AddPartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CopyWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ImportTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DropTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadTableDesc
operator|.
name|LoadFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MoveWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * ImportSemanticAnalyzer.  *  */
end_comment

begin_class
specifier|public
class|class
name|ImportSemanticAnalyzer
extends|extends
name|BaseSemanticAnalyzer
block|{
specifier|public
name|ImportSemanticAnalyzer
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
comment|// Note that the tableExists flag as used by Auth is kinda a hack and
comment|// assumes only 1 table will ever be imported - this assumption is broken by
comment|// REPL LOAD.
comment|//
comment|// However, we've not chosen to expand this to a map of tables/etc, since
comment|// we have expanded how auth works with REPL DUMP / REPL LOAD to simply
comment|// require ADMIN privileges, rather than checking each object, which
comment|// quickly becomes untenable, and even more so, costly on memory.
specifier|private
name|boolean
name|tableExists
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|existsTable
parameter_list|()
block|{
return|return
name|tableExists
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyzeInternal
parameter_list|(
name|ASTNode
name|ast
parameter_list|)
throws|throws
name|SemanticException
block|{
try|try
block|{
name|Tree
name|fromTree
init|=
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|boolean
name|isLocationSet
init|=
literal|false
decl_stmt|;
name|boolean
name|isExternalSet
init|=
literal|false
decl_stmt|;
name|boolean
name|isPartSpecSet
init|=
literal|false
decl_stmt|;
name|String
name|parsedLocation
init|=
literal|null
decl_stmt|;
name|String
name|parsedTableName
init|=
literal|null
decl_stmt|;
name|String
name|parsedDbName
init|=
literal|null
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parsedPartSpec
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// waitOnPrecursor determines whether or not non-existence of
comment|// a dependent object is an error. For regular imports, it is.
comment|// for now, the only thing this affects is whether or not the
comment|// db exists.
name|boolean
name|waitOnPrecursor
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|ast
operator|.
name|getChildCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|child
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|KW_EXTERNAL
case|:
name|isExternalSet
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_TABLELOCATION
case|:
name|isLocationSet
operator|=
literal|true
expr_stmt|;
name|parsedLocation
operator|=
name|EximUtil
operator|.
name|relativeToAbsolutePath
argument_list|(
name|conf
argument_list|,
name|unescapeSQLString
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_TAB
case|:
name|ASTNode
name|tableNameNode
init|=
operator|(
name|ASTNode
operator|)
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dbTablePair
init|=
name|getDbTableNamePair
argument_list|(
name|tableNameNode
argument_list|)
decl_stmt|;
name|parsedDbName
operator|=
name|dbTablePair
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|parsedTableName
operator|=
name|dbTablePair
operator|.
name|getValue
argument_list|()
expr_stmt|;
comment|// get partition metadata if partition specified
if|if
condition|(
name|child
operator|.
name|getChildCount
argument_list|()
operator|==
literal|2
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ASTNode
name|partspec
init|=
operator|(
name|ASTNode
operator|)
name|child
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|isPartSpecSet
operator|=
literal|true
expr_stmt|;
name|parsePartitionSpec
argument_list|(
name|child
argument_list|,
name|parsedPartSpec
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|parsedDbName
argument_list|)
condition|)
block|{
name|parsedDbName
operator|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
expr_stmt|;
block|}
comment|// parsing statement is now done, on to logic.
name|tableExists
operator|=
name|prepareImport
argument_list|(
literal|true
argument_list|,
name|isLocationSet
argument_list|,
name|isExternalSet
argument_list|,
name|isPartSpecSet
argument_list|,
name|waitOnPrecursor
argument_list|,
name|parsedLocation
argument_list|,
name|parsedTableName
argument_list|,
name|parsedDbName
argument_list|,
name|parsedPartSpec
argument_list|,
name|fromTree
operator|.
name|getText
argument_list|()
argument_list|,
operator|new
name|EximUtil
operator|.
name|SemanticAnalyzerWrapperContext
argument_list|(
name|conf
argument_list|,
name|db
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|,
name|rootTasks
argument_list|,
name|LOG
argument_list|,
name|ctx
argument_list|)
argument_list|,
literal|null
argument_list|,
name|getTxnMgr
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|IMPORT_SEMANTIC_ERROR
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|parsePartitionSpec
parameter_list|(
name|ASTNode
name|tableNode
parameter_list|,
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// get partition metadata if partition specified
if|if
condition|(
name|tableNode
operator|.
name|getChildCount
argument_list|()
operator|==
literal|2
condition|)
block|{
name|ASTNode
name|partspec
init|=
operator|(
name|ASTNode
operator|)
name|tableNode
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// partSpec is a mapping from partition column name to its value.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|partspec
operator|.
name|getChildCount
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|ASTNode
name|partspec_val
init|=
operator|(
name|ASTNode
operator|)
name|partspec
operator|.
name|getChild
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|String
name|val
init|=
literal|null
decl_stmt|;
name|String
name|colName
init|=
name|unescapeIdentifier
argument_list|(
name|partspec_val
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|partspec_val
operator|.
name|getChildCount
argument_list|()
operator|<
literal|2
condition|)
block|{
comment|// DP in the form of T
comment|// partition (ds, hr)
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PARTITION
operator|.
name|getMsg
argument_list|(
literal|" - Dynamic partitions not allowed"
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
comment|// in the form of T partition (ds="2010-03-03")
name|val
operator|=
name|stripQuotes
argument_list|(
name|partspec_val
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|partSpec
operator|.
name|put
argument_list|(
name|colName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * The same code is used from both the "repl load" as well as "import".    * Given that "repl load" now supports two modes "repl load dbName [location]" and    * "repl load [location]" in which case the database name has to be taken from the table metadata    * by default and then over-ridden if something specified on the command line.    *    * hence for import to work correctly we have to pass in the sessionState default Db via the    * parsedDbName parameter    */
specifier|public
specifier|static
name|boolean
name|prepareImport
parameter_list|(
name|boolean
name|isImportCmd
parameter_list|,
name|boolean
name|isLocationSet
parameter_list|,
name|boolean
name|isExternalSet
parameter_list|,
name|boolean
name|isPartSpecSet
parameter_list|,
name|boolean
name|waitOnPrecursor
parameter_list|,
name|String
name|parsedLocation
parameter_list|,
name|String
name|parsedTableName
parameter_list|,
name|String
name|overrideDBName
parameter_list|,
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parsedPartSpec
parameter_list|,
name|String
name|fromLocn
parameter_list|,
name|EximUtil
operator|.
name|SemanticAnalyzerWrapperContext
name|x
parameter_list|,
name|UpdatedMetaDataTracker
name|updatedMetadata
parameter_list|,
name|HiveTxnManager
name|txnMgr
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaException
throws|,
name|HiveException
throws|,
name|URISyntaxException
block|{
comment|// initialize load path
name|URI
name|fromURI
init|=
name|EximUtil
operator|.
name|getValidatedURI
argument_list|(
name|x
operator|.
name|getConf
argument_list|()
argument_list|,
name|stripQuotes
argument_list|(
name|fromLocn
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|fromPath
init|=
operator|new
name|Path
argument_list|(
name|fromURI
operator|.
name|getScheme
argument_list|()
argument_list|,
name|fromURI
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|fromURI
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|fromURI
argument_list|,
name|x
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|x
operator|.
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
name|toReadEntity
argument_list|(
name|fromPath
argument_list|,
name|x
operator|.
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|MetaData
name|rv
decl_stmt|;
try|try
block|{
name|rv
operator|=
name|EximUtil
operator|.
name|readMetaData
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|fromPath
argument_list|,
name|EximUtil
operator|.
name|METADATA_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PATH
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|rv
operator|.
name|getTable
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// nothing to do here, silently return.
return|return
literal|false
return|;
block|}
name|ReplicationSpec
name|replicationSpec
init|=
name|rv
operator|.
name|getReplicationSpec
argument_list|()
decl_stmt|;
if|if
condition|(
name|replicationSpec
operator|.
name|isNoop
argument_list|()
condition|)
block|{
comment|// nothing to do here, silently return.
name|x
operator|.
name|getLOG
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Current update with ID:{} is noop"
argument_list|,
name|replicationSpec
operator|.
name|getCurrentReplicationState
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isImportCmd
condition|)
block|{
name|replicationSpec
operator|.
name|setReplSpecType
argument_list|(
name|ReplicationSpec
operator|.
name|Type
operator|.
name|IMPORT
argument_list|)
expr_stmt|;
block|}
name|String
name|dbname
init|=
name|rv
operator|.
name|getTable
argument_list|()
operator|.
name|getDbName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|overrideDBName
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|overrideDBName
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
comment|// If the parsed statement contained a db.tablename specification, prefer that.
name|dbname
operator|=
name|overrideDBName
expr_stmt|;
block|}
comment|// Create table associated with the import
comment|// Executed if relevant, and used to contain all the other details about the table if not.
name|ImportTableDesc
name|tblDesc
decl_stmt|;
try|try
block|{
name|tblDesc
operator|=
name|getBaseCreateTableDescFromTable
argument_list|(
name|dbname
argument_list|,
name|rv
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|replicationSpec
operator|!=
literal|null
operator|)
operator|&&
name|replicationSpec
operator|.
name|isInReplicationScope
argument_list|()
condition|)
block|{
name|tblDesc
operator|.
name|setReplicationSpec
argument_list|(
name|replicationSpec
argument_list|)
expr_stmt|;
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|tblDesc
operator|.
name|getTblProps
argument_list|()
argument_list|,
name|StatsSetupConst
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isExternalSet
condition|)
block|{
if|if
condition|(
name|AcidUtils
operator|.
name|isInsertOnlyTable
argument_list|(
name|tblDesc
operator|.
name|getTblProps
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Cannot import an MM table as external"
argument_list|)
throw|;
block|}
name|tblDesc
operator|.
name|setExternal
argument_list|(
name|isExternalSet
argument_list|)
expr_stmt|;
comment|// This condition-check could have been avoided, but to honour the old
comment|// default of not calling if it wasn't set, we retain that behaviour.
comment|// TODO:cleanup after verification that the outer if isn't really needed here
block|}
if|if
condition|(
name|isLocationSet
condition|)
block|{
name|tblDesc
operator|.
name|setLocation
argument_list|(
name|parsedLocation
argument_list|)
expr_stmt|;
name|x
operator|.
name|getInputs
argument_list|()
operator|.
name|add
argument_list|(
name|toReadEntity
argument_list|(
operator|new
name|Path
argument_list|(
name|parsedLocation
argument_list|)
argument_list|,
name|x
operator|.
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|parsedTableName
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|parsedTableName
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|tblDesc
operator|.
name|setTableName
argument_list|(
name|parsedTableName
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|AddPartitionDesc
argument_list|>
name|partitionDescs
init|=
operator|new
name|ArrayList
argument_list|<
name|AddPartitionDesc
argument_list|>
argument_list|()
decl_stmt|;
name|Iterable
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|rv
operator|.
name|getPartitions
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
comment|// TODO: this should ideally not create AddPartitionDesc per partition
name|AddPartitionDesc
name|partsDesc
init|=
name|getBaseAddPartitionDescFromPartition
argument_list|(
name|fromPath
argument_list|,
name|dbname
argument_list|,
name|tblDesc
argument_list|,
name|partition
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|replicationSpec
operator|!=
literal|null
operator|)
operator|&&
name|replicationSpec
operator|.
name|isInReplicationScope
argument_list|()
condition|)
block|{
name|StatsSetupConst
operator|.
name|setBasicStatsState
argument_list|(
name|partsDesc
operator|.
name|getPartition
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartParams
argument_list|()
argument_list|,
name|StatsSetupConst
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
name|partitionDescs
operator|.
name|add
argument_list|(
name|partsDesc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isPartSpecSet
condition|)
block|{
comment|// The import specification asked for only a particular partition to be loaded
comment|// We load only that, and ignore all the others.
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|AddPartitionDesc
argument_list|>
name|partnIter
init|=
name|partitionDescs
operator|.
name|listIterator
argument_list|()
init|;
name|partnIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AddPartitionDesc
name|addPartitionDesc
init|=
name|partnIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|found
operator|&&
name|addPartitionDesc
operator|.
name|getPartition
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartSpec
argument_list|()
operator|.
name|equals
argument_list|(
name|parsedPartSpec
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|partnIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PARTITION
operator|.
name|getMsg
argument_list|(
literal|" - Specified partition not found in import directory"
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|tblDesc
operator|.
name|getTableName
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Either we got the tablename from the IMPORT statement (first priority)
comment|// or from the export dump.
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|NEED_TABLE_SPECIFICATION
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|x
operator|.
name|getConf
argument_list|()
operator|.
name|set
argument_list|(
literal|"import.destination.table"
argument_list|,
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AddPartitionDesc
name|addPartitionDesc
range|:
name|partitionDescs
control|)
block|{
name|addPartitionDesc
operator|.
name|setTableName
argument_list|(
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Warehouse
name|wh
init|=
operator|new
name|Warehouse
argument_list|(
name|x
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|tableIfExists
argument_list|(
name|tblDesc
argument_list|,
name|x
operator|.
name|getHive
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|tableExists
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|checkTable
argument_list|(
name|table
argument_list|,
name|tblDesc
argument_list|,
name|replicationSpec
argument_list|,
name|x
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|getLOG
argument_list|()
operator|.
name|debug
argument_list|(
literal|"table "
operator|+
name|tblDesc
operator|.
name|getTableName
argument_list|()
operator|+
literal|" exists: metadata checked"
argument_list|)
expr_stmt|;
name|tableExists
operator|=
literal|true
expr_stmt|;
block|}
name|Long
name|writeId
init|=
literal|0L
decl_stmt|;
comment|// Initialize with 0 for non-ACID and non-MM tables.
name|int
name|stmtId
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|replicationSpec
operator|.
name|isInReplicationScope
argument_list|()
operator|&&
operator|(
operator|(
name|tableExists
operator|&&
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|table
argument_list|)
operator|)
operator|||
operator|(
operator|!
name|tableExists
operator|&&
name|AcidUtils
operator|.
name|isTablePropertyTransactional
argument_list|(
name|tblDesc
operator|.
name|getTblProps
argument_list|()
argument_list|)
operator|)
operator|)
condition|)
block|{
comment|//if importing into existing transactional table or will create a new transactional table
comment|//(because Export was done from transactional table), need a writeId
comment|// Explain plan doesn't open a txn and hence no need to allocate write id.
if|if
condition|(
name|x
operator|.
name|getCtx
argument_list|()
operator|.
name|getExplainConfig
argument_list|()
operator|==
literal|null
condition|)
block|{
name|writeId
operator|=
name|txnMgr
operator|.
name|getTableWriteId
argument_list|(
name|tblDesc
operator|.
name|getDatabaseName
argument_list|()
argument_list|,
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|stmtId
operator|=
name|txnMgr
operator|.
name|getStmtIdAndIncrement
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|replicationSpec
operator|.
name|isInReplicationScope
argument_list|()
condition|)
block|{
name|createRegularImportTasks
argument_list|(
name|tblDesc
argument_list|,
name|partitionDescs
argument_list|,
name|isPartSpecSet
argument_list|,
name|replicationSpec
argument_list|,
name|table
argument_list|,
name|fromURI
argument_list|,
name|fs
argument_list|,
name|wh
argument_list|,
name|x
argument_list|,
name|writeId
argument_list|,
name|stmtId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createReplImportTasks
argument_list|(
name|tblDesc
argument_list|,
name|partitionDescs
argument_list|,
name|replicationSpec
argument_list|,
name|waitOnPrecursor
argument_list|,
name|table
argument_list|,
name|fromURI
argument_list|,
name|fs
argument_list|,
name|wh
argument_list|,
name|x
argument_list|,
name|writeId
argument_list|,
name|stmtId
argument_list|,
name|updatedMetadata
argument_list|)
expr_stmt|;
block|}
return|return
name|tableExists
return|;
block|}
specifier|private
specifier|static
name|AddPartitionDesc
name|getBaseAddPartitionDescFromPartition
parameter_list|(
name|Path
name|fromPath
parameter_list|,
name|String
name|dbname
parameter_list|,
name|ImportTableDesc
name|tblDesc
parameter_list|,
name|Partition
name|partition
parameter_list|)
throws|throws
name|MetaException
throws|,
name|SemanticException
block|{
name|AddPartitionDesc
name|partsDesc
init|=
operator|new
name|AddPartitionDesc
argument_list|(
name|dbname
argument_list|,
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|EximUtil
operator|.
name|makePartSpec
argument_list|(
name|tblDesc
operator|.
name|getPartCols
argument_list|()
argument_list|,
name|partition
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|,
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|partition
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|AddPartitionDesc
operator|.
name|OnePartitionDesc
name|partDesc
init|=
name|partsDesc
operator|.
name|getPartition
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|partDesc
operator|.
name|setInputFormat
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|setOutputFormat
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|setNumBuckets
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|setCols
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|setSerializationLib
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|setSerdeParams
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|setBucketCols
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketCols
argument_list|()
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|setSortCols
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getSortCols
argument_list|()
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|setLocation
argument_list|(
operator|new
name|Path
argument_list|(
name|fromPath
argument_list|,
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tblDesc
operator|.
name|getPartCols
argument_list|()
argument_list|,
name|partition
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|partsDesc
return|;
block|}
specifier|private
specifier|static
name|ImportTableDesc
name|getBaseCreateTableDescFromTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|tblObj
parameter_list|)
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tblObj
argument_list|)
decl_stmt|;
name|ImportTableDesc
name|tblDesc
init|=
operator|new
name|ImportTableDesc
argument_list|(
name|dbName
argument_list|,
name|table
argument_list|)
decl_stmt|;
return|return
name|tblDesc
return|;
block|}
specifier|private
specifier|static
name|Task
argument_list|<
name|?
argument_list|>
name|loadTable
parameter_list|(
name|URI
name|fromURI
parameter_list|,
name|Table
name|table
parameter_list|,
name|boolean
name|replace
parameter_list|,
name|Path
name|tgtPath
parameter_list|,
name|ReplicationSpec
name|replicationSpec
parameter_list|,
name|EximUtil
operator|.
name|SemanticAnalyzerWrapperContext
name|x
parameter_list|,
name|Long
name|writeId
parameter_list|,
name|int
name|stmtId
parameter_list|)
block|{
assert|assert
name|table
operator|!=
literal|null
assert|;
assert|assert
name|table
operator|.
name|getParameters
argument_list|()
operator|!=
literal|null
assert|;
name|Path
name|dataPath
init|=
operator|new
name|Path
argument_list|(
name|fromURI
operator|.
name|toString
argument_list|()
argument_list|,
name|EximUtil
operator|.
name|DATA_PATH_NAME
argument_list|)
decl_stmt|;
name|Path
name|destPath
init|=
literal|null
decl_stmt|,
name|loadPath
init|=
literal|null
decl_stmt|;
name|LoadFileType
name|lft
decl_stmt|;
if|if
condition|(
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
name|String
name|mmSubdir
init|=
name|replace
condition|?
name|AcidUtils
operator|.
name|baseDir
argument_list|(
name|writeId
argument_list|)
else|:
name|AcidUtils
operator|.
name|deltaSubdir
argument_list|(
name|writeId
argument_list|,
name|writeId
argument_list|,
name|stmtId
argument_list|)
decl_stmt|;
name|destPath
operator|=
operator|new
name|Path
argument_list|(
name|tgtPath
argument_list|,
name|mmSubdir
argument_list|)
expr_stmt|;
comment|/**        * CopyTask below will copy files from the 'archive' to a delta_x_x in the table/partition        * directory, i.e. the final destination for these files.  This has to be a copy to preserve        * the archive.  MoveTask is optimized to do a 'rename' if files are on the same FileSystem.        * So setting 'loadPath' this way will make        * {@link Hive#loadTable(Path, String, LoadFileType, boolean, boolean, boolean,        * boolean, Long, int)}        * skip the unnecessary file (rename) operation but it will perform other things.        */
name|loadPath
operator|=
name|tgtPath
expr_stmt|;
name|lft
operator|=
name|LoadFileType
operator|.
name|KEEP_EXISTING
expr_stmt|;
block|}
else|else
block|{
name|destPath
operator|=
name|loadPath
operator|=
name|x
operator|.
name|getCtx
argument_list|()
operator|.
name|getExternalTmpPath
argument_list|(
name|tgtPath
argument_list|)
expr_stmt|;
name|lft
operator|=
name|replace
condition|?
name|LoadFileType
operator|.
name|REPLACE_ALL
else|:
name|LoadFileType
operator|.
name|OVERWRITE_EXISTING
expr_stmt|;
block|}
if|if
condition|(
name|Utilities
operator|.
name|FILE_OP_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|Utilities
operator|.
name|FILE_OP_LOGGER
operator|.
name|trace
argument_list|(
literal|"adding import work for table with source location: "
operator|+
name|dataPath
operator|+
literal|"; table: "
operator|+
name|tgtPath
operator|+
literal|"; copy destination "
operator|+
name|destPath
operator|+
literal|"; mm "
operator|+
name|writeId
operator|+
literal|" for "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|": "
operator|+
operator|(
name|AcidUtils
operator|.
name|isFullAcidTable
argument_list|(
name|table
argument_list|)
condition|?
literal|"acid"
else|:
operator|(
name|AcidUtils
operator|.
name|isInsertOnlyTable
argument_list|(
name|table
argument_list|)
condition|?
literal|"mm"
else|:
literal|"flat"
operator|)
operator|)
argument_list|)
expr_stmt|;
block|}
name|Task
argument_list|<
name|?
argument_list|>
name|copyTask
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|replicationSpec
operator|.
name|isInReplicationScope
argument_list|()
condition|)
block|{
name|copyTask
operator|=
name|ReplCopyTask
operator|.
name|getLoadCopyTask
argument_list|(
name|replicationSpec
argument_list|,
name|dataPath
argument_list|,
name|destPath
argument_list|,
name|x
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyTask
operator|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|CopyWork
argument_list|(
name|dataPath
argument_list|,
name|destPath
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LoadTableDesc
name|loadTableWork
init|=
operator|new
name|LoadTableDesc
argument_list|(
name|loadPath
argument_list|,
name|Utilities
operator|.
name|getTableDesc
argument_list|(
name|table
argument_list|)
argument_list|,
operator|new
name|TreeMap
argument_list|<>
argument_list|()
argument_list|,
name|lft
argument_list|,
name|writeId
argument_list|)
decl_stmt|;
name|loadTableWork
operator|.
name|setStmtId
argument_list|(
name|stmtId
argument_list|)
expr_stmt|;
comment|//if Importing into existing table, FileFormat is checked by
comment|// ImportSemanticAnalzyer.checked checkTable()
name|MoveWork
name|mv
init|=
operator|new
name|MoveWork
argument_list|(
name|x
operator|.
name|getInputs
argument_list|()
argument_list|,
name|x
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|loadTableWork
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|loadTableTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
name|mv
argument_list|,
name|x
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|copyTask
operator|.
name|addDependentTask
argument_list|(
name|loadTableTask
argument_list|)
expr_stmt|;
name|x
operator|.
name|getTasks
argument_list|()
operator|.
name|add
argument_list|(
name|copyTask
argument_list|)
expr_stmt|;
return|return
name|loadTableTask
return|;
block|}
specifier|private
specifier|static
name|Task
argument_list|<
name|?
argument_list|>
name|createTableTask
parameter_list|(
name|ImportTableDesc
name|tableDesc
parameter_list|,
name|EximUtil
operator|.
name|SemanticAnalyzerWrapperContext
name|x
parameter_list|)
block|{
return|return
name|tableDesc
operator|.
name|getCreateTableTask
argument_list|(
name|x
operator|.
name|getInputs
argument_list|()
argument_list|,
name|x
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|x
operator|.
name|getConf
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Task
argument_list|<
name|?
argument_list|>
name|dropTableTask
parameter_list|(
name|Table
name|table
parameter_list|,
name|EximUtil
operator|.
name|SemanticAnalyzerWrapperContext
name|x
parameter_list|,
name|ReplicationSpec
name|replicationSpec
parameter_list|)
block|{
name|DropTableDesc
name|dropTblDesc
init|=
operator|new
name|DropTableDesc
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableType
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|replicationSpec
argument_list|)
decl_stmt|;
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|x
operator|.
name|getInputs
argument_list|()
argument_list|,
name|x
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|dropTblDesc
argument_list|)
argument_list|,
name|x
operator|.
name|getConf
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|alterTableTask
parameter_list|(
name|ImportTableDesc
name|tableDesc
parameter_list|,
name|EximUtil
operator|.
name|SemanticAnalyzerWrapperContext
name|x
parameter_list|,
name|ReplicationSpec
name|replicationSpec
parameter_list|)
block|{
name|tableDesc
operator|.
name|setReplaceMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|replicationSpec
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|replicationSpec
operator|.
name|isInReplicationScope
argument_list|()
operator|)
condition|)
block|{
name|tableDesc
operator|.
name|setReplicationSpec
argument_list|(
name|replicationSpec
argument_list|)
expr_stmt|;
block|}
return|return
name|tableDesc
operator|.
name|getCreateTableTask
argument_list|(
name|x
operator|.
name|getInputs
argument_list|()
argument_list|,
name|x
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|x
operator|.
name|getConf
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|alterSinglePartition
parameter_list|(
name|URI
name|fromURI
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|ImportTableDesc
name|tblDesc
parameter_list|,
name|Table
name|table
parameter_list|,
name|Warehouse
name|wh
parameter_list|,
name|AddPartitionDesc
name|addPartitionDesc
parameter_list|,
name|ReplicationSpec
name|replicationSpec
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
name|ptn
parameter_list|,
name|EximUtil
operator|.
name|SemanticAnalyzerWrapperContext
name|x
parameter_list|)
throws|throws
name|MetaException
throws|,
name|IOException
throws|,
name|HiveException
block|{
name|addPartitionDesc
operator|.
name|setReplaceMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|replicationSpec
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|replicationSpec
operator|.
name|isInReplicationScope
argument_list|()
operator|)
condition|)
block|{
name|addPartitionDesc
operator|.
name|setReplicationSpec
argument_list|(
name|replicationSpec
argument_list|)
expr_stmt|;
block|}
name|AddPartitionDesc
operator|.
name|OnePartitionDesc
name|partSpec
init|=
name|addPartitionDesc
operator|.
name|getPartition
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptn
operator|==
literal|null
condition|)
block|{
name|fixLocationInPartSpec
argument_list|(
name|fs
argument_list|,
name|tblDesc
argument_list|,
name|table
argument_list|,
name|wh
argument_list|,
name|replicationSpec
argument_list|,
name|partSpec
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|partSpec
operator|.
name|setLocation
argument_list|(
name|ptn
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
comment|// use existing location
block|}
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|x
operator|.
name|getInputs
argument_list|()
argument_list|,
name|x
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|addPartitionDesc
argument_list|)
argument_list|,
name|x
operator|.
name|getConf
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Task
argument_list|<
name|?
argument_list|>
name|addSinglePartition
parameter_list|(
name|URI
name|fromURI
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|ImportTableDesc
name|tblDesc
parameter_list|,
name|Table
name|table
parameter_list|,
name|Warehouse
name|wh
parameter_list|,
name|AddPartitionDesc
name|addPartitionDesc
parameter_list|,
name|ReplicationSpec
name|replicationSpec
parameter_list|,
name|EximUtil
operator|.
name|SemanticAnalyzerWrapperContext
name|x
parameter_list|,
name|Long
name|writeId
parameter_list|,
name|int
name|stmtId
parameter_list|)
throws|throws
name|MetaException
throws|,
name|IOException
throws|,
name|HiveException
block|{
name|AddPartitionDesc
operator|.
name|OnePartitionDesc
name|partSpec
init|=
name|addPartitionDesc
operator|.
name|getPartition
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblDesc
operator|.
name|isExternal
argument_list|()
operator|&&
name|tblDesc
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
name|x
operator|.
name|getLOG
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Importing in-place: adding AddPart for partition "
operator|+
name|partSpecToString
argument_list|(
name|partSpec
operator|.
name|getPartSpec
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// addPartitionDesc already has the right partition location
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Task
argument_list|<
name|?
argument_list|>
name|addPartTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|x
operator|.
name|getInputs
argument_list|()
argument_list|,
name|x
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|addPartitionDesc
argument_list|)
argument_list|,
name|x
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|addPartTask
return|;
block|}
else|else
block|{
name|String
name|srcLocation
init|=
name|partSpec
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|fixLocationInPartSpec
argument_list|(
name|fs
argument_list|,
name|tblDesc
argument_list|,
name|table
argument_list|,
name|wh
argument_list|,
name|replicationSpec
argument_list|,
name|partSpec
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|x
operator|.
name|getLOG
argument_list|()
operator|.
name|debug
argument_list|(
literal|"adding dependent CopyWork/AddPart/MoveWork for partition "
operator|+
name|partSpecToString
argument_list|(
name|partSpec
operator|.
name|getPartSpec
argument_list|()
argument_list|)
operator|+
literal|" with source location: "
operator|+
name|srcLocation
argument_list|)
expr_stmt|;
name|Path
name|tgtLocation
init|=
operator|new
name|Path
argument_list|(
name|partSpec
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|destPath
init|=
operator|!
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
argument_list|)
condition|?
name|x
operator|.
name|getCtx
argument_list|()
operator|.
name|getExternalTmpPath
argument_list|(
name|tgtLocation
argument_list|)
else|:
operator|new
name|Path
argument_list|(
name|tgtLocation
argument_list|,
name|AcidUtils
operator|.
name|deltaSubdir
argument_list|(
name|writeId
argument_list|,
name|writeId
argument_list|,
name|stmtId
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|moveTaskSrc
init|=
operator|!
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
argument_list|)
condition|?
name|destPath
else|:
name|tgtLocation
decl_stmt|;
if|if
condition|(
name|Utilities
operator|.
name|FILE_OP_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|Utilities
operator|.
name|FILE_OP_LOGGER
operator|.
name|trace
argument_list|(
literal|"adding import work for partition with source location: "
operator|+
name|srcLocation
operator|+
literal|"; target: "
operator|+
name|tgtLocation
operator|+
literal|"; copy dest "
operator|+
name|destPath
operator|+
literal|"; mm "
operator|+
name|writeId
operator|+
literal|" for "
operator|+
name|partSpecToString
argument_list|(
name|partSpec
operator|.
name|getPartSpec
argument_list|()
argument_list|)
operator|+
literal|": "
operator|+
operator|(
name|AcidUtils
operator|.
name|isFullAcidTable
argument_list|(
name|table
argument_list|)
condition|?
literal|"acid"
else|:
operator|(
name|AcidUtils
operator|.
name|isInsertOnlyTable
argument_list|(
name|table
argument_list|)
condition|?
literal|"mm"
else|:
literal|"flat"
operator|)
operator|)
argument_list|)
expr_stmt|;
block|}
name|Task
argument_list|<
name|?
argument_list|>
name|copyTask
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|replicationSpec
operator|.
name|isInReplicationScope
argument_list|()
condition|)
block|{
name|copyTask
operator|=
name|ReplCopyTask
operator|.
name|getLoadCopyTask
argument_list|(
name|replicationSpec
argument_list|,
operator|new
name|Path
argument_list|(
name|srcLocation
argument_list|)
argument_list|,
name|destPath
argument_list|,
name|x
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyTask
operator|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|CopyWork
argument_list|(
operator|new
name|Path
argument_list|(
name|srcLocation
argument_list|)
argument_list|,
name|destPath
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Task
argument_list|<
name|?
argument_list|>
name|addPartTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|x
operator|.
name|getInputs
argument_list|()
argument_list|,
name|x
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|addPartitionDesc
argument_list|)
argument_list|,
name|x
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// Note: this sets LoadFileType incorrectly for ACID; is that relevant for import?
comment|//       See setLoadFileType and setIsAcidIow calls elsewhere for an example.
name|LoadTableDesc
name|loadTableWork
init|=
operator|new
name|LoadTableDesc
argument_list|(
name|moveTaskSrc
argument_list|,
name|Utilities
operator|.
name|getTableDesc
argument_list|(
name|table
argument_list|)
argument_list|,
name|partSpec
operator|.
name|getPartSpec
argument_list|()
argument_list|,
name|replicationSpec
operator|.
name|isReplace
argument_list|()
condition|?
name|LoadFileType
operator|.
name|REPLACE_ALL
else|:
name|LoadFileType
operator|.
name|OVERWRITE_EXISTING
argument_list|,
name|writeId
argument_list|)
decl_stmt|;
name|loadTableWork
operator|.
name|setStmtId
argument_list|(
name|stmtId
argument_list|)
expr_stmt|;
name|loadTableWork
operator|.
name|setInheritTableSpecs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|loadPartTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|MoveWork
argument_list|(
name|x
operator|.
name|getInputs
argument_list|()
argument_list|,
name|x
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|loadTableWork
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|,
name|x
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|copyTask
operator|.
name|addDependentTask
argument_list|(
name|loadPartTask
argument_list|)
expr_stmt|;
name|addPartTask
operator|.
name|addDependentTask
argument_list|(
name|loadPartTask
argument_list|)
expr_stmt|;
name|x
operator|.
name|getTasks
argument_list|()
operator|.
name|add
argument_list|(
name|copyTask
argument_list|)
expr_stmt|;
return|return
name|addPartTask
return|;
block|}
block|}
comment|/**    * Helper method to set location properly in partSpec    */
specifier|private
specifier|static
name|void
name|fixLocationInPartSpec
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|ImportTableDesc
name|tblDesc
parameter_list|,
name|Table
name|table
parameter_list|,
name|Warehouse
name|wh
parameter_list|,
name|ReplicationSpec
name|replicationSpec
parameter_list|,
name|AddPartitionDesc
operator|.
name|OnePartitionDesc
name|partSpec
parameter_list|,
name|EximUtil
operator|.
name|SemanticAnalyzerWrapperContext
name|x
parameter_list|)
throws|throws
name|MetaException
throws|,
name|HiveException
throws|,
name|IOException
block|{
name|Path
name|tgtPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tblDesc
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|table
operator|.
name|getDataLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tgtPath
operator|=
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|Warehouse
operator|.
name|makePartPath
argument_list|(
name|partSpec
operator|.
name|getPartSpec
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Database
name|parentDb
init|=
name|x
operator|.
name|getHive
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|tblDesc
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
decl_stmt|;
name|tgtPath
operator|=
operator|new
name|Path
argument_list|(
name|wh
operator|.
name|getDefaultTablePath
argument_list|(
name|parentDb
argument_list|,
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|Warehouse
operator|.
name|makePartPath
argument_list|(
name|partSpec
operator|.
name|getPartSpec
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|tgtPath
operator|=
operator|new
name|Path
argument_list|(
name|tblDesc
operator|.
name|getLocation
argument_list|()
argument_list|,
name|Warehouse
operator|.
name|makePartPath
argument_list|(
name|partSpec
operator|.
name|getPartSpec
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FileSystem
name|tgtFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|tgtPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|x
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|checkTargetLocationEmpty
argument_list|(
name|tgtFs
argument_list|,
name|tgtPath
argument_list|,
name|replicationSpec
argument_list|,
name|x
operator|.
name|getLOG
argument_list|()
argument_list|)
expr_stmt|;
name|partSpec
operator|.
name|setLocation
argument_list|(
name|tgtPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|checkTargetLocationEmpty
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|targetPath
parameter_list|,
name|ReplicationSpec
name|replicationSpec
parameter_list|,
name|Logger
name|logger
parameter_list|)
throws|throws
name|IOException
throws|,
name|SemanticException
block|{
if|if
condition|(
name|replicationSpec
operator|.
name|isInReplicationScope
argument_list|()
condition|)
block|{
comment|// replication scope allows replacement, and does not require empty directories
return|return;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"checking emptiness of "
operator|+
name|targetPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|status
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|targetPath
argument_list|,
name|FileUtils
operator|.
name|HIDDEN_FILES_PATH_FILTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Files inc. "
operator|+
name|status
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" found in path : "
operator|+
name|targetPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|TABLE_DATA_EXISTS
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|String
name|partSpecToString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|firstTime
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|partSpec
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|firstTime
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|firstTime
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|checkTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|ImportTableDesc
name|tableDesc
parameter_list|,
name|ReplicationSpec
name|replicationSpec
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|SemanticException
throws|,
name|URISyntaxException
block|{
comment|// This method gets called only in the scope that a destination table already exists, so
comment|// we're validating if the table is an appropriate destination to import into
if|if
condition|(
name|replicationSpec
operator|.
name|isInReplicationScope
argument_list|()
condition|)
block|{
comment|// If this import is being done for replication, then this will be a managed table, and replacements
comment|// are allowed irrespective of what the table currently looks like. So no more checks are necessary.
return|return;
block|}
else|else
block|{
comment|// verify if table has been the target of replication, and if so, check HiveConf if we're allowed
comment|// to override. If not, fail.
if|if
condition|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|ReplicationSpec
operator|.
name|KEY
operator|.
name|CURR_STATE_ID
operator|.
name|toString
argument_list|()
argument_list|)
operator|&&
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXIM_RESTRICT_IMPORTS_INTO_REPLICATED_TABLES
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|IMPORT_INTO_STRICT_REPL_TABLE
operator|.
name|getMsg
argument_list|(
literal|"Table "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|" has repl.last.id parameter set."
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// Next, we verify that the destination table is not offline, or a non-native table
name|EximUtil
operator|.
name|validateTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// If the import statement specified that we're importing to an external
comment|// table, we seem to be doing the following:
comment|//    a) We don't allow replacement in an unpartitioned pre-existing table
comment|//    b) We don't allow replacement in a partitioned pre-existing table where that table is external
comment|// TODO : Does this simply mean we don't allow replacement in external tables if they already exist?
comment|//    If so(i.e. the check is superfluous and wrong), this can be a simpler check. If not, then
comment|//    what we seem to be saying is that the only case we allow is to allow an IMPORT into an EXTERNAL
comment|//    table in the statement, if a destination partitioned table exists, so long as it is actually
comment|//    not external itself. Is that the case? Why?
block|{
if|if
condition|(
operator|(
name|tableDesc
operator|.
name|isExternal
argument_list|()
operator|)
comment|// IMPORT statement specified EXTERNAL
operator|&&
operator|(
operator|!
name|table
operator|.
name|isPartitioned
argument_list|()
operator|||
operator|!
name|table
operator|.
name|getTableType
argument_list|()
operator|.
name|equals
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" External table cannot overwrite existing table. Drop existing table first."
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// If a table import statement specified a location and the table(unpartitioned)
comment|// already exists, ensure that the locations are the same.
comment|// Partitioned tables not checked here, since the location provided would need
comment|// checking against the partition in question instead.
block|{
if|if
condition|(
operator|(
name|tableDesc
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|table
operator|.
name|isPartitioned
argument_list|()
operator|)
operator|&&
operator|(
operator|!
name|table
operator|.
name|getDataLocation
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Path
argument_list|(
name|tableDesc
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Location does not match"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|{
comment|// check column order and types
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|existingTableCols
init|=
name|table
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|importedTableCols
init|=
name|tableDesc
operator|.
name|getCols
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|EximUtil
operator|.
name|schemaCompare
argument_list|(
name|importedTableCols
argument_list|,
name|existingTableCols
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Column Schema does not match"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|{
comment|// check partitioning column order and types
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|existingTablePartCols
init|=
name|table
operator|.
name|getPartCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|importedTablePartCols
init|=
name|tableDesc
operator|.
name|getPartCols
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|EximUtil
operator|.
name|schemaCompare
argument_list|(
name|importedTablePartCols
argument_list|,
name|existingTablePartCols
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Partition Schema does not match"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|{
comment|// check table params
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|existingTableParams
init|=
name|table
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|importedTableParams
init|=
name|tableDesc
operator|.
name|getTblProps
argument_list|()
decl_stmt|;
name|String
name|error
init|=
name|checkParams
argument_list|(
name|existingTableParams
argument_list|,
name|importedTableParams
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"howl.isd"
block|,
literal|"howl.osd"
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Table parameters do not match: "
operator|+
name|error
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|{
comment|// check IF/OF/Serde
name|String
name|existingifc
init|=
name|table
operator|.
name|getInputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|importedifc
init|=
name|tableDesc
operator|.
name|getInputFormat
argument_list|()
decl_stmt|;
name|String
name|existingofc
init|=
name|table
operator|.
name|getOutputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|importedofc
init|=
name|tableDesc
operator|.
name|getOutputFormat
argument_list|()
decl_stmt|;
comment|/*        * substitute OutputFormat name based on HiveFileFormatUtils.outputFormatSubstituteMap        */
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|origin
init|=
name|Class
operator|.
name|forName
argument_list|(
name|importedofc
argument_list|,
literal|true
argument_list|,
name|Utilities
operator|.
name|getSessionSpecifiedClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|replaced
init|=
name|HiveFileFormatUtils
operator|.
name|getOutputFormatSubstitute
argument_list|(
name|origin
argument_list|)
decl_stmt|;
if|if
condition|(
name|replaced
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_OUTPUT_FORMAT_TYPE
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|importedofc
operator|=
name|replaced
operator|.
name|getCanonicalName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_OUTPUT_FORMAT_TYPE
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
operator|!
name|existingifc
operator|.
name|equals
argument_list|(
name|importedifc
argument_list|)
operator|)
operator|||
operator|(
operator|!
name|existingofc
operator|.
name|equals
argument_list|(
name|importedofc
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Table inputformat/outputformats do not match"
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|existingSerde
init|=
name|table
operator|.
name|getSerializationLib
argument_list|()
decl_stmt|;
name|String
name|importedSerde
init|=
name|tableDesc
operator|.
name|getSerName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|existingSerde
operator|.
name|equals
argument_list|(
name|importedSerde
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Table Serde class does not match"
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|existingSerdeFormat
init|=
name|table
operator|.
name|getSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|)
decl_stmt|;
name|String
name|importedSerdeFormat
init|=
name|tableDesc
operator|.
name|getSerdeProps
argument_list|()
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|)
decl_stmt|;
comment|/*        * If Imported SerdeFormat is null, then set it to "1" just as        * metadata.Table.getEmptyTable        */
name|importedSerdeFormat
operator|=
name|importedSerdeFormat
operator|==
literal|null
condition|?
literal|"1"
else|:
name|importedSerdeFormat
expr_stmt|;
if|if
condition|(
operator|!
name|ObjectUtils
operator|.
name|equals
argument_list|(
name|existingSerdeFormat
argument_list|,
name|importedSerdeFormat
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Table Serde format does not match"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|{
comment|// check bucket/sort cols
if|if
condition|(
operator|!
name|ObjectUtils
operator|.
name|equals
argument_list|(
name|table
operator|.
name|getBucketCols
argument_list|()
argument_list|,
name|tableDesc
operator|.
name|getBucketCols
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Table bucketing spec does not match"
argument_list|)
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Order
argument_list|>
name|existingOrder
init|=
name|table
operator|.
name|getSortCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Order
argument_list|>
name|importedOrder
init|=
name|tableDesc
operator|.
name|getSortCols
argument_list|()
decl_stmt|;
comment|// safely sorting
specifier|final
class|class
name|OrderComparator
implements|implements
name|Comparator
argument_list|<
name|Order
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Order
name|o1
parameter_list|,
name|Order
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|.
name|getOrder
argument_list|()
operator|<
name|o2
operator|.
name|getOrder
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
if|if
condition|(
name|o1
operator|.
name|getOrder
argument_list|()
operator|==
name|o2
operator|.
name|getOrder
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|existingOrder
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|importedOrder
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|existingOrder
argument_list|,
operator|new
name|OrderComparator
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|importedOrder
argument_list|,
operator|new
name|OrderComparator
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|existingOrder
operator|.
name|equals
argument_list|(
name|importedOrder
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Table sorting spec does not match"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|importedOrder
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Table sorting spec does not match"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|checkParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map1
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map2
parameter_list|,
name|String
index|[]
name|keys
parameter_list|)
block|{
if|if
condition|(
name|map1
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|map2
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|String
name|v1
init|=
name|map1
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|v2
init|=
name|map2
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ObjectUtils
operator|.
name|equals
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
condition|)
block|{
return|return
literal|"Mismatch for "
operator|+
name|key
return|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
if|if
condition|(
name|map1
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|"Mismatch for "
operator|+
name|key
return|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|map2
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
if|if
condition|(
name|map2
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|"Mismatch for "
operator|+
name|key
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Create tasks for regular import, no repl complexity    * @param tblDesc    * @param partitionDescs    * @param isPartSpecSet    * @param replicationSpec    * @param table    * @param fromURI    * @param fs    * @param wh    */
specifier|private
specifier|static
name|void
name|createRegularImportTasks
parameter_list|(
name|ImportTableDesc
name|tblDesc
parameter_list|,
name|List
argument_list|<
name|AddPartitionDesc
argument_list|>
name|partitionDescs
parameter_list|,
name|boolean
name|isPartSpecSet
parameter_list|,
name|ReplicationSpec
name|replicationSpec
parameter_list|,
name|Table
name|table
parameter_list|,
name|URI
name|fromURI
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Warehouse
name|wh
parameter_list|,
name|EximUtil
operator|.
name|SemanticAnalyzerWrapperContext
name|x
parameter_list|,
name|Long
name|writeId
parameter_list|,
name|int
name|stmtId
parameter_list|)
throws|throws
name|HiveException
throws|,
name|IOException
throws|,
name|MetaException
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|x
operator|.
name|getLOG
argument_list|()
operator|.
name|debug
argument_list|(
literal|"table partitioned"
argument_list|)
expr_stmt|;
for|for
control|(
name|AddPartitionDesc
name|addPartitionDesc
range|:
name|partitionDescs
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
name|addPartitionDesc
operator|.
name|getPartition
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartSpec
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
name|ptn
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|ptn
operator|=
name|x
operator|.
name|getHive
argument_list|()
operator|.
name|getPartition
argument_list|(
name|table
argument_list|,
name|partSpec
argument_list|,
literal|false
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|x
operator|.
name|getTasks
argument_list|()
operator|.
name|add
argument_list|(
name|addSinglePartition
argument_list|(
name|fromURI
argument_list|,
name|fs
argument_list|,
name|tblDesc
argument_list|,
name|table
argument_list|,
name|wh
argument_list|,
name|addPartitionDesc
argument_list|,
name|replicationSpec
argument_list|,
name|x
argument_list|,
name|writeId
argument_list|,
name|stmtId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|PARTITION_EXISTS
operator|.
name|getMsg
argument_list|(
name|partSpecToString
argument_list|(
name|partSpec
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|x
operator|.
name|getLOG
argument_list|()
operator|.
name|debug
argument_list|(
literal|"table non-partitioned"
argument_list|)
expr_stmt|;
comment|// ensure if destination is not empty only for regular import
name|Path
name|tgtPath
init|=
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|tgtFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|tgtPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|x
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|checkTargetLocationEmpty
argument_list|(
name|tgtFs
argument_list|,
name|tgtPath
argument_list|,
name|replicationSpec
argument_list|,
name|x
operator|.
name|getLOG
argument_list|()
argument_list|)
expr_stmt|;
name|loadTable
argument_list|(
name|fromURI
argument_list|,
name|table
argument_list|,
literal|false
argument_list|,
name|tgtPath
argument_list|,
name|replicationSpec
argument_list|,
name|x
argument_list|,
name|writeId
argument_list|,
name|stmtId
argument_list|)
expr_stmt|;
block|}
comment|// Set this to read because we can't overwrite any existing partitions
name|x
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|table
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|x
operator|.
name|getLOG
argument_list|()
operator|.
name|debug
argument_list|(
literal|"table "
operator|+
name|tblDesc
operator|.
name|getTableName
argument_list|()
operator|+
literal|" does not exist"
argument_list|)
expr_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|t
init|=
name|createTableTask
argument_list|(
name|tblDesc
argument_list|,
name|x
argument_list|)
decl_stmt|;
name|table
operator|=
name|createNewTableMetadataObject
argument_list|(
name|tblDesc
argument_list|)
expr_stmt|;
name|Database
name|parentDb
init|=
name|x
operator|.
name|getHive
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|tblDesc
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Since we are going to be creating a new table in a db, we should mark that db as a write entity
comment|// so that the auth framework can go to work there.
name|x
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|parentDb
argument_list|,
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_SHARED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPartitioned
argument_list|(
name|tblDesc
argument_list|)
condition|)
block|{
for|for
control|(
name|AddPartitionDesc
name|addPartitionDesc
range|:
name|partitionDescs
control|)
block|{
name|t
operator|.
name|addDependentTask
argument_list|(
name|addSinglePartition
argument_list|(
name|fromURI
argument_list|,
name|fs
argument_list|,
name|tblDesc
argument_list|,
name|table
argument_list|,
name|wh
argument_list|,
name|addPartitionDesc
argument_list|,
name|replicationSpec
argument_list|,
name|x
argument_list|,
name|writeId
argument_list|,
name|stmtId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|x
operator|.
name|getLOG
argument_list|()
operator|.
name|debug
argument_list|(
literal|"adding dependent CopyWork/MoveWork for table"
argument_list|)
expr_stmt|;
if|if
condition|(
name|tblDesc
operator|.
name|isExternal
argument_list|()
operator|&&
operator|(
name|tblDesc
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
name|x
operator|.
name|getLOG
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Importing in place, no emptiness check, no copying/loading"
argument_list|)
expr_stmt|;
name|Path
name|dataPath
init|=
operator|new
name|Path
argument_list|(
name|fromURI
operator|.
name|toString
argument_list|()
argument_list|,
name|EximUtil
operator|.
name|DATA_PATH_NAME
argument_list|)
decl_stmt|;
name|tblDesc
operator|.
name|setLocation
argument_list|(
name|dataPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Path
name|tablePath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tblDesc
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tablePath
operator|=
operator|new
name|Path
argument_list|(
name|tblDesc
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tablePath
operator|=
name|wh
operator|.
name|getDefaultTablePath
argument_list|(
name|parentDb
argument_list|,
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FileSystem
name|tgtFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|tablePath
operator|.
name|toUri
argument_list|()
argument_list|,
name|x
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|checkTargetLocationEmpty
argument_list|(
name|tgtFs
argument_list|,
name|tablePath
argument_list|,
name|replicationSpec
argument_list|,
name|x
operator|.
name|getLOG
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|addDependentTask
argument_list|(
name|loadTable
argument_list|(
name|fromURI
argument_list|,
name|table
argument_list|,
literal|false
argument_list|,
name|tablePath
argument_list|,
name|replicationSpec
argument_list|,
name|x
argument_list|,
name|writeId
argument_list|,
name|stmtId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|x
operator|.
name|getTasks
argument_list|()
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Table
name|createNewTableMetadataObject
parameter_list|(
name|ImportTableDesc
name|tblDesc
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Table
name|newTable
init|=
operator|new
name|Table
argument_list|(
name|tblDesc
operator|.
name|getDatabaseName
argument_list|()
argument_list|,
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
comment|//so that we know the type of table we are creating: acid/MM to match what was exported
name|newTable
operator|.
name|setParameters
argument_list|(
name|tblDesc
operator|.
name|getTblProps
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tblDesc
operator|.
name|isExternal
argument_list|()
operator|&&
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|newTable
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"External tables may not be transactional: "
operator|+
name|Warehouse
operator|.
name|getQualifiedName
argument_list|(
name|tblDesc
operator|.
name|getDatabaseName
argument_list|()
argument_list|,
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|newTable
return|;
block|}
comment|/**    * Create tasks for repl import    */
specifier|private
specifier|static
name|void
name|createReplImportTasks
parameter_list|(
name|ImportTableDesc
name|tblDesc
parameter_list|,
name|List
argument_list|<
name|AddPartitionDesc
argument_list|>
name|partitionDescs
parameter_list|,
name|ReplicationSpec
name|replicationSpec
parameter_list|,
name|boolean
name|waitOnPrecursor
parameter_list|,
name|Table
name|table
parameter_list|,
name|URI
name|fromURI
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Warehouse
name|wh
parameter_list|,
name|EximUtil
operator|.
name|SemanticAnalyzerWrapperContext
name|x
parameter_list|,
name|Long
name|writeId
parameter_list|,
name|int
name|stmtId
parameter_list|,
name|UpdatedMetaDataTracker
name|updatedMetadata
parameter_list|)
throws|throws
name|HiveException
throws|,
name|URISyntaxException
throws|,
name|IOException
throws|,
name|MetaException
block|{
name|Task
argument_list|<
name|?
argument_list|>
name|dropTblTask
init|=
literal|null
decl_stmt|;
name|WriteEntity
operator|.
name|WriteType
name|lockType
init|=
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
decl_stmt|;
comment|// Normally, on import, trying to create a table or a partition in a db that does not yet exist
comment|// is a error condition. However, in the case of a REPL LOAD, it is possible that we are trying
comment|// to create tasks to create a table inside a db that as-of-now does not exist, but there is
comment|// a precursor Task waiting that will create it before this is encountered. Thus, we instantiate
comment|// defaults and do not error out in that case.
name|Database
name|parentDb
init|=
name|x
operator|.
name|getHive
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|tblDesc
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentDb
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|waitOnPrecursor
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|DATABASE_NOT_EXISTS
operator|.
name|getMsg
argument_list|(
name|tblDesc
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|replicationSpec
operator|.
name|allowReplacementInto
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
argument_list|)
condition|)
block|{
comment|// If the target table exists and is newer or same as current update based on repl.last.id, then just noop it.
name|x
operator|.
name|getLOG
argument_list|()
operator|.
name|info
argument_list|(
literal|"Table {}.{} is not replaced as it is newer than the update"
argument_list|,
name|tblDesc
operator|.
name|getDatabaseName
argument_list|()
argument_list|,
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// If the table exists and we found a valid create table event, then need to drop the table first
comment|// and then create it. This case is possible if the event sequence is drop_table(t1) -> create_table(t1).
comment|// We need to drop here to handle the case where the previous incremental load created the table but
comment|// didn't set the last repl ID due to some failure.
if|if
condition|(
name|x
operator|.
name|getEventType
argument_list|()
operator|==
name|DumpType
operator|.
name|EVENT_CREATE_TABLE
condition|)
block|{
name|dropTblTask
operator|=
name|dropTableTask
argument_list|(
name|table
argument_list|,
name|x
argument_list|,
name|replicationSpec
argument_list|)
expr_stmt|;
name|table
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// If table doesn't exist, allow creating a new one only if the database state is older than the update.
if|if
condition|(
operator|(
name|parentDb
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|replicationSpec
operator|.
name|allowReplacementInto
argument_list|(
name|parentDb
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|)
condition|)
block|{
comment|// If the target table exists and is newer or same as current update based on repl.last.id, then just noop it.
name|x
operator|.
name|getLOG
argument_list|()
operator|.
name|info
argument_list|(
literal|"Table {}.{} is not created as the database is newer than the update"
argument_list|,
name|tblDesc
operator|.
name|getDatabaseName
argument_list|()
argument_list|,
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|updatedMetadata
operator|!=
literal|null
condition|)
block|{
name|updatedMetadata
operator|.
name|set
argument_list|(
name|replicationSpec
operator|.
name|getReplicationState
argument_list|()
argument_list|,
name|tblDesc
operator|.
name|getDatabaseName
argument_list|()
argument_list|,
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tblDesc
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|waitOnPrecursor
condition|)
block|{
name|tblDesc
operator|.
name|setLocation
argument_list|(
name|wh
operator|.
name|getDefaultTablePath
argument_list|(
name|parentDb
argument_list|,
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tblDesc
operator|.
name|setLocation
argument_list|(
name|wh
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|wh
operator|.
name|getDefaultDatabasePath
argument_list|(
name|tblDesc
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
operator|.
name|encodeTableName
argument_list|(
name|tblDesc
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Note: In the following section, Metadata-only import handling logic is        interleaved with regular repl-import logic. The rule of thumb being        followed here is that MD-only imports are essentially ALTERs. They do        not load data, and should not be "creating" any metadata - they should        be replacing instead. The only place it makes sense for a MD-only import        to create is in the case of a table that's been dropped and recreated,        or in the case of an unpartitioned table. In all other cases, it should        behave like a noop or a pure MD alter.     */
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|lockType
operator|==
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
condition|)
block|{
name|lockType
operator|=
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_SHARED
expr_stmt|;
block|}
name|Task
name|t
init|=
name|createTableTask
argument_list|(
name|tblDesc
argument_list|,
name|x
argument_list|)
decl_stmt|;
name|table
operator|=
name|createNewTableMetadataObject
argument_list|(
name|tblDesc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|replicationSpec
operator|.
name|isMetadataOnly
argument_list|()
condition|)
block|{
if|if
condition|(
name|isPartitioned
argument_list|(
name|tblDesc
argument_list|)
condition|)
block|{
for|for
control|(
name|AddPartitionDesc
name|addPartitionDesc
range|:
name|partitionDescs
control|)
block|{
name|addPartitionDesc
operator|.
name|setReplicationSpec
argument_list|(
name|replicationSpec
argument_list|)
expr_stmt|;
name|t
operator|.
name|addDependentTask
argument_list|(
name|addSinglePartition
argument_list|(
name|fromURI
argument_list|,
name|fs
argument_list|,
name|tblDesc
argument_list|,
name|table
argument_list|,
name|wh
argument_list|,
name|addPartitionDesc
argument_list|,
name|replicationSpec
argument_list|,
name|x
argument_list|,
name|writeId
argument_list|,
name|stmtId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|updatedMetadata
operator|!=
literal|null
condition|)
block|{
name|updatedMetadata
operator|.
name|addPartition
argument_list|(
name|addPartitionDesc
operator|.
name|getPartition
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartSpec
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|x
operator|.
name|getLOG
argument_list|()
operator|.
name|debug
argument_list|(
literal|"adding dependent CopyWork/MoveWork for table"
argument_list|)
expr_stmt|;
name|t
operator|.
name|addDependentTask
argument_list|(
name|loadTable
argument_list|(
name|fromURI
argument_list|,
name|table
argument_list|,
literal|true
argument_list|,
operator|new
name|Path
argument_list|(
name|tblDesc
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|replicationSpec
argument_list|,
name|x
argument_list|,
name|writeId
argument_list|,
name|stmtId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dropTblTask
operator|!=
literal|null
condition|)
block|{
comment|// Drop first and then create
name|dropTblTask
operator|.
name|addDependentTask
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|x
operator|.
name|getTasks
argument_list|()
operator|.
name|add
argument_list|(
name|dropTblTask
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Simply create
name|x
operator|.
name|getTasks
argument_list|()
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// If table of current event has partition flag different from existing table, it means, some
comment|// of the previous events in same batch have drop and create table events with same same but
comment|// different partition flag. In this case, should go with current event's table type and so
comment|// create the dummy table object for adding repl tasks.
name|boolean
name|isOldTableValid
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|isPartitioned
argument_list|()
operator|!=
name|isPartitioned
argument_list|(
name|tblDesc
argument_list|)
condition|)
block|{
name|table
operator|=
name|createNewTableMetadataObject
argument_list|(
name|tblDesc
argument_list|)
expr_stmt|;
name|isOldTableValid
operator|=
literal|false
expr_stmt|;
block|}
comment|// Table existed, and is okay to replicate into, not dropping and re-creating.
if|if
condition|(
name|isPartitioned
argument_list|(
name|tblDesc
argument_list|)
condition|)
block|{
name|x
operator|.
name|getLOG
argument_list|()
operator|.
name|debug
argument_list|(
literal|"table partitioned"
argument_list|)
expr_stmt|;
for|for
control|(
name|AddPartitionDesc
name|addPartitionDesc
range|:
name|partitionDescs
control|)
block|{
name|addPartitionDesc
operator|.
name|setReplicationSpec
argument_list|(
name|replicationSpec
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
name|addPartitionDesc
operator|.
name|getPartition
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartSpec
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
name|ptn
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isOldTableValid
condition|)
block|{
comment|// If existing table is valid but the partition spec is different, then ignore partition
comment|// validation and create new partition.
try|try
block|{
name|ptn
operator|=
name|x
operator|.
name|getHive
argument_list|()
operator|.
name|getPartition
argument_list|(
name|table
argument_list|,
name|partSpec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|ex
parameter_list|)
block|{
name|ptn
operator|=
literal|null
expr_stmt|;
name|table
operator|=
name|createNewTableMetadataObject
argument_list|(
name|tblDesc
argument_list|)
expr_stmt|;
name|isOldTableValid
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ptn
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|replicationSpec
operator|.
name|isMetadataOnly
argument_list|()
condition|)
block|{
name|x
operator|.
name|getTasks
argument_list|()
operator|.
name|add
argument_list|(
name|addSinglePartition
argument_list|(
name|fromURI
argument_list|,
name|fs
argument_list|,
name|tblDesc
argument_list|,
name|table
argument_list|,
name|wh
argument_list|,
name|addPartitionDesc
argument_list|,
name|replicationSpec
argument_list|,
name|x
argument_list|,
name|writeId
argument_list|,
name|stmtId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|updatedMetadata
operator|!=
literal|null
condition|)
block|{
name|updatedMetadata
operator|.
name|addPartition
argument_list|(
name|addPartitionDesc
operator|.
name|getPartition
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartSpec
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|x
operator|.
name|getTasks
argument_list|()
operator|.
name|add
argument_list|(
name|alterSinglePartition
argument_list|(
name|fromURI
argument_list|,
name|fs
argument_list|,
name|tblDesc
argument_list|,
name|table
argument_list|,
name|wh
argument_list|,
name|addPartitionDesc
argument_list|,
name|replicationSpec
argument_list|,
literal|null
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|updatedMetadata
operator|!=
literal|null
condition|)
block|{
name|updatedMetadata
operator|.
name|addPartition
argument_list|(
name|addPartitionDesc
operator|.
name|getPartition
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartSpec
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// If replicating, then the partition already existing means we need to replace, maybe, if
comment|// the destination ptn's repl.last.id is older than the replacement's.
if|if
condition|(
name|replicationSpec
operator|.
name|allowReplacementInto
argument_list|(
name|ptn
operator|.
name|getParameters
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|replicationSpec
operator|.
name|isMetadataOnly
argument_list|()
condition|)
block|{
name|x
operator|.
name|getTasks
argument_list|()
operator|.
name|add
argument_list|(
name|addSinglePartition
argument_list|(
name|fromURI
argument_list|,
name|fs
argument_list|,
name|tblDesc
argument_list|,
name|table
argument_list|,
name|wh
argument_list|,
name|addPartitionDesc
argument_list|,
name|replicationSpec
argument_list|,
name|x
argument_list|,
name|writeId
argument_list|,
name|stmtId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|x
operator|.
name|getTasks
argument_list|()
operator|.
name|add
argument_list|(
name|alterSinglePartition
argument_list|(
name|fromURI
argument_list|,
name|fs
argument_list|,
name|tblDesc
argument_list|,
name|table
argument_list|,
name|wh
argument_list|,
name|addPartitionDesc
argument_list|,
name|replicationSpec
argument_list|,
name|ptn
argument_list|,
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updatedMetadata
operator|!=
literal|null
condition|)
block|{
name|updatedMetadata
operator|.
name|addPartition
argument_list|(
name|addPartitionDesc
operator|.
name|getPartition
argument_list|(
literal|0
argument_list|)
operator|.
name|getPartSpec
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lockType
operator|==
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
condition|)
block|{
name|lockType
operator|=
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_SHARED
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|replicationSpec
operator|.
name|isMetadataOnly
argument_list|()
operator|&&
name|partitionDescs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// MD-ONLY table alter
name|x
operator|.
name|getTasks
argument_list|()
operator|.
name|add
argument_list|(
name|alterTableTask
argument_list|(
name|tblDesc
argument_list|,
name|x
argument_list|,
name|replicationSpec
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|lockType
operator|==
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
condition|)
block|{
name|lockType
operator|=
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_SHARED
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|x
operator|.
name|getLOG
argument_list|()
operator|.
name|debug
argument_list|(
literal|"table non-partitioned"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|replicationSpec
operator|.
name|isMetadataOnly
argument_list|()
condition|)
block|{
comment|// repl-imports are replace-into unless the event is insert-into
name|loadTable
argument_list|(
name|fromURI
argument_list|,
name|table
argument_list|,
name|replicationSpec
operator|.
name|isReplace
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|tblDesc
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|replicationSpec
argument_list|,
name|x
argument_list|,
name|writeId
argument_list|,
name|stmtId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|x
operator|.
name|getTasks
argument_list|()
operator|.
name|add
argument_list|(
name|alterTableTask
argument_list|(
name|tblDesc
argument_list|,
name|x
argument_list|,
name|replicationSpec
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lockType
operator|==
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_NO_LOCK
condition|)
block|{
name|lockType
operator|=
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_SHARED
expr_stmt|;
block|}
block|}
block|}
name|x
operator|.
name|getOutputs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|table
argument_list|,
name|lockType
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|isPartitioned
parameter_list|(
name|ImportTableDesc
name|tblDesc
parameter_list|)
block|{
return|return
operator|!
operator|(
name|tblDesc
operator|.
name|getPartCols
argument_list|()
operator|==
literal|null
operator|||
name|tblDesc
operator|.
name|getPartCols
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
return|;
block|}
comment|/**    * Utility method that returns a table if one corresponding to the destination    * tblDesc is found. Returns null if no such table is found.    */
specifier|public
specifier|static
name|Table
name|tableIfExists
parameter_list|(
name|ImportTableDesc
name|tblDesc
parameter_list|,
name|Hive
name|db
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
return|return
name|db
operator|.
name|getTable
argument_list|(
name|tblDesc
operator|.
name|getDatabaseName
argument_list|()
argument_list|,
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidTableException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

