begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|tree
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ObjectUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|InvalidTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AddPartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CopyWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CreateTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MoveWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_comment
comment|/**  * ImportSemanticAnalyzer.  *  */
end_comment

begin_class
specifier|public
class|class
name|ImportSemanticAnalyzer
extends|extends
name|BaseSemanticAnalyzer
block|{
specifier|public
specifier|static
specifier|final
name|String
name|METADATA_NAME
init|=
literal|"_metadata"
decl_stmt|;
specifier|public
name|ImportSemanticAnalyzer
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|tableExists
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|existsTable
parameter_list|()
block|{
return|return
name|tableExists
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyzeInternal
parameter_list|(
name|ASTNode
name|ast
parameter_list|)
throws|throws
name|SemanticException
block|{
try|try
block|{
name|Tree
name|fromTree
init|=
name|ast
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// initialize load path
name|String
name|tmpPath
init|=
name|stripQuotes
argument_list|(
name|fromTree
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|URI
name|fromURI
init|=
name|EximUtil
operator|.
name|getValidatedURI
argument_list|(
name|conf
argument_list|,
name|tmpPath
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|fromURI
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|dbname
init|=
literal|null
decl_stmt|;
name|CreateTableDesc
name|tblDesc
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|AddPartitionDesc
argument_list|>
name|partitionDescs
init|=
operator|new
name|ArrayList
argument_list|<
name|AddPartitionDesc
argument_list|>
argument_list|()
decl_stmt|;
name|Path
name|fromPath
init|=
operator|new
name|Path
argument_list|(
name|fromURI
operator|.
name|getScheme
argument_list|()
argument_list|,
name|fromURI
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|fromURI
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Path
name|metadataPath
init|=
operator|new
name|Path
argument_list|(
name|fromPath
argument_list|,
name|METADATA_NAME
argument_list|)
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
argument_list|,
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|rv
init|=
name|EximUtil
operator|.
name|readMetaData
argument_list|(
name|fs
argument_list|,
name|metadataPath
argument_list|)
decl_stmt|;
name|dbname
operator|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
init|=
name|rv
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|tblDesc
operator|=
operator|new
name|CreateTableDesc
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|false
argument_list|,
comment|// isExternal: set to false here, can be overwritten by the
comment|// IMPORT stmt
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|,
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketCols
argument_list|()
argument_list|,
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getSortCols
argument_list|()
argument_list|,
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
comment|// these 5 delims passed as serde params
literal|null
argument_list|,
comment|// comment passed as table params
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
argument_list|,
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|,
literal|null
argument_list|,
comment|// location: set to null here, can be
comment|// overwritten by the IMPORT stmt
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|,
literal|null
argument_list|,
comment|// storagehandler passed as table params
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|,
name|table
operator|.
name|getParameters
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|(
literal|null
operator|==
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|)
condition|?
literal|null
else|:
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColNames
argument_list|()
argument_list|,
operator|(
literal|null
operator|==
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|)
condition|?
literal|null
else|:
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValues
argument_list|()
argument_list|)
expr_stmt|;
name|tblDesc
operator|.
name|setStoredAsSubDirectories
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
name|tblDesc
operator|.
name|getPartCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partColNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|partCols
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fsc
range|:
name|partCols
control|)
block|{
name|partColNames
operator|.
name|add
argument_list|(
name|fsc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|rv
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|AddPartitionDesc
name|partDesc
init|=
operator|new
name|AddPartitionDesc
argument_list|(
name|dbname
argument_list|,
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|EximUtil
operator|.
name|makePartSpec
argument_list|(
name|tblDesc
operator|.
name|getPartCols
argument_list|()
argument_list|,
name|partition
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|,
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|partition
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|partDesc
operator|.
name|setInputFormat
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|setOutputFormat
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|setNumBuckets
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|setCols
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|setSerializationLib
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|setSerdeParams
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|setBucketCols
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketCols
argument_list|()
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|setSortCols
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getSortCols
argument_list|()
argument_list|)
expr_stmt|;
name|partDesc
operator|.
name|setLocation
argument_list|(
operator|new
name|Path
argument_list|(
name|fromPath
argument_list|,
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tblDesc
operator|.
name|getPartCols
argument_list|()
argument_list|,
name|partition
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|partitionDescs
operator|.
name|add
argument_list|(
name|partDesc
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PATH
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"metadata read and parsed"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|ast
operator|.
name|getChildCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|ast
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|child
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|KW_EXTERNAL
case|:
name|tblDesc
operator|.
name|setExternal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_TABLELOCATION
case|:
name|String
name|location
init|=
name|unescapeSQLString
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|location
operator|=
name|EximUtil
operator|.
name|relativeToAbsolutePath
argument_list|(
name|conf
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|tblDesc
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
break|break;
case|case
name|HiveParser
operator|.
name|TOK_TAB
case|:
name|Tree
name|tableTree
init|=
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// initialize destination table/partition
name|String
name|tableName
init|=
name|getUnescapedName
argument_list|(
operator|(
name|ASTNode
operator|)
name|tableTree
argument_list|)
decl_stmt|;
name|tblDesc
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// get partition metadata if partition specified
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getChildCount
argument_list|()
operator|==
literal|2
condition|)
block|{
name|ASTNode
name|partspec
init|=
operator|(
name|ASTNode
operator|)
name|child
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// partSpec is a mapping from partition column name to its value.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|partspec
operator|.
name|getChildCount
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|ASTNode
name|partspec_val
init|=
operator|(
name|ASTNode
operator|)
name|partspec
operator|.
name|getChild
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|String
name|val
init|=
literal|null
decl_stmt|;
name|String
name|colName
init|=
name|unescapeIdentifier
argument_list|(
name|partspec_val
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|partspec_val
operator|.
name|getChildCount
argument_list|()
operator|<
literal|2
condition|)
block|{
comment|// DP in the form of T
comment|// partition (ds, hr)
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PARTITION
operator|.
name|getMsg
argument_list|(
literal|" - Dynamic partitions not allowed"
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
comment|// in the form of T partition (ds="2010-03-03")
name|val
operator|=
name|stripQuotes
argument_list|(
name|partspec_val
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|partSpec
operator|.
name|put
argument_list|(
name|colName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|AddPartitionDesc
argument_list|>
name|partnIter
init|=
name|partitionDescs
operator|.
name|listIterator
argument_list|()
init|;
name|partnIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AddPartitionDesc
name|addPartitionDesc
init|=
name|partnIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|found
operator|&&
name|addPartitionDesc
operator|.
name|getPartSpec
argument_list|()
operator|.
name|equals
argument_list|(
name|partSpec
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|partnIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PARTITION
operator|.
name|getMsg
argument_list|(
literal|" - Specified partition not found in import directory"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|tblDesc
operator|.
name|getTableName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|NEED_TABLE_SPECIFICATION
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"import.destination.table"
argument_list|,
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AddPartitionDesc
name|addPartitionDesc
range|:
name|partitionDescs
control|)
block|{
name|addPartitionDesc
operator|.
name|setTableName
argument_list|(
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Warehouse
name|wh
init|=
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|db
operator|.
name|getTable
argument_list|(
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|checkTable
argument_list|(
name|table
argument_list|,
name|tblDesc
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"table "
operator|+
name|tblDesc
operator|.
name|getTableName
argument_list|()
operator|+
literal|" exists: metadata checked"
argument_list|)
expr_stmt|;
name|tableExists
operator|=
literal|true
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"import.destination.dir"
argument_list|,
name|table
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"table partitioned"
argument_list|)
expr_stmt|;
for|for
control|(
name|AddPartitionDesc
name|addPartitionDesc
range|:
name|partitionDescs
control|)
block|{
if|if
condition|(
name|db
operator|.
name|getPartition
argument_list|(
name|table
argument_list|,
name|addPartitionDesc
operator|.
name|getPartSpec
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|==
literal|null
condition|)
block|{
name|rootTasks
operator|.
name|add
argument_list|(
name|addSinglePartition
argument_list|(
name|fromURI
argument_list|,
name|fs
argument_list|,
name|tblDesc
argument_list|,
name|table
argument_list|,
name|wh
argument_list|,
name|addPartitionDesc
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|PARTITION_EXISTS
operator|.
name|getMsg
argument_list|(
name|partSpecToString
argument_list|(
name|addPartitionDesc
operator|.
name|getPartSpec
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"table non-partitioned"
argument_list|)
expr_stmt|;
name|checkTargetLocationEmpty
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loadTable
argument_list|(
name|fromURI
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidTableException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"table "
operator|+
name|tblDesc
operator|.
name|getTableName
argument_list|()
operator|+
literal|" does not exist"
argument_list|)
expr_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|t
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|getInputs
argument_list|()
argument_list|,
name|getOutputs
argument_list|()
argument_list|,
name|tblDesc
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|dbname
argument_list|,
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|currentDb
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCurrentDatabase
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"import.destination.dir"
argument_list|,
name|wh
operator|.
name|getTablePath
argument_list|(
name|db
operator|.
name|getDatabaseCurrent
argument_list|()
argument_list|,
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|tblDesc
operator|.
name|getPartCols
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|tblDesc
operator|.
name|getPartCols
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|)
condition|)
block|{
for|for
control|(
name|AddPartitionDesc
name|addPartitionDesc
range|:
name|partitionDescs
control|)
block|{
name|t
operator|.
name|addDependentTask
argument_list|(
name|addSinglePartition
argument_list|(
name|fromURI
argument_list|,
name|fs
argument_list|,
name|tblDesc
argument_list|,
name|table
argument_list|,
name|wh
argument_list|,
name|addPartitionDesc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"adding dependent CopyWork/MoveWork for table"
argument_list|)
expr_stmt|;
if|if
condition|(
name|tblDesc
operator|.
name|isExternal
argument_list|()
operator|&&
operator|(
name|tblDesc
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Importing in place, no emptiness check, no copying/loading"
argument_list|)
expr_stmt|;
name|Path
name|dataPath
init|=
operator|new
name|Path
argument_list|(
name|fromURI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"data"
argument_list|)
decl_stmt|;
name|tblDesc
operator|.
name|setLocation
argument_list|(
name|dataPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Path
name|tablePath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tblDesc
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tablePath
operator|=
operator|new
name|Path
argument_list|(
name|tblDesc
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tablePath
operator|=
name|wh
operator|.
name|getTablePath
argument_list|(
name|db
operator|.
name|getDatabaseCurrent
argument_list|()
argument_list|,
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkTargetLocationEmpty
argument_list|(
name|fs
argument_list|,
name|tablePath
argument_list|)
expr_stmt|;
name|t
operator|.
name|addDependentTask
argument_list|(
name|loadTable
argument_list|(
name|fromURI
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|rootTasks
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
comment|//inputs.add(new ReadEntity(fromURI.toString(),
comment|//  fromURI.getScheme().equals("hdfs") ? true : false));
block|}
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|GENERIC_ERROR
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Task
argument_list|<
name|?
argument_list|>
name|loadTable
parameter_list|(
name|URI
name|fromURI
parameter_list|,
name|Table
name|table
parameter_list|)
block|{
name|Path
name|dataPath
init|=
operator|new
name|Path
argument_list|(
name|fromURI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"data"
argument_list|)
decl_stmt|;
name|String
name|tmpURI
init|=
name|ctx
operator|.
name|getExternalTmpFileURI
argument_list|(
name|fromURI
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|copyTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|CopyWork
argument_list|(
name|dataPath
operator|.
name|toString
argument_list|()
argument_list|,
name|tmpURI
argument_list|,
literal|false
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LoadTableDesc
name|loadTableWork
init|=
operator|new
name|LoadTableDesc
argument_list|(
name|tmpURI
operator|.
name|toString
argument_list|()
argument_list|,
name|ctx
operator|.
name|getExternalTmpFileURI
argument_list|(
name|fromURI
argument_list|)
argument_list|,
name|Utilities
operator|.
name|getTableDesc
argument_list|(
name|table
argument_list|)
argument_list|,
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|loadTableTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|MoveWork
argument_list|(
name|getInputs
argument_list|()
argument_list|,
name|getOutputs
argument_list|()
argument_list|,
name|loadTableWork
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|copyTask
operator|.
name|addDependentTask
argument_list|(
name|loadTableTask
argument_list|)
expr_stmt|;
name|rootTasks
operator|.
name|add
argument_list|(
name|copyTask
argument_list|)
expr_stmt|;
return|return
name|loadTableTask
return|;
block|}
specifier|private
name|Task
argument_list|<
name|?
argument_list|>
name|addSinglePartition
parameter_list|(
name|URI
name|fromURI
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|CreateTableDesc
name|tblDesc
parameter_list|,
name|Table
name|table
parameter_list|,
name|Warehouse
name|wh
parameter_list|,
name|AddPartitionDesc
name|addPartitionDesc
parameter_list|)
throws|throws
name|MetaException
throws|,
name|IOException
throws|,
name|HiveException
block|{
if|if
condition|(
name|tblDesc
operator|.
name|isExternal
argument_list|()
operator|&&
name|tblDesc
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Importing in-place: adding AddPart for partition "
operator|+
name|partSpecToString
argument_list|(
name|addPartitionDesc
operator|.
name|getPartSpec
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// addPartitionDesc already has the right partition location
name|Task
argument_list|<
name|?
argument_list|>
name|addPartTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|getInputs
argument_list|()
argument_list|,
name|getOutputs
argument_list|()
argument_list|,
name|addPartitionDesc
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|addPartTask
return|;
block|}
else|else
block|{
name|String
name|srcLocation
init|=
name|addPartitionDesc
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|Path
name|tgtPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tblDesc
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|table
operator|.
name|getDataLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tgtPath
operator|=
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|Warehouse
operator|.
name|makePartPath
argument_list|(
name|addPartitionDesc
operator|.
name|getPartSpec
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tgtPath
operator|=
operator|new
name|Path
argument_list|(
name|wh
operator|.
name|getTablePath
argument_list|(
name|db
operator|.
name|getDatabaseCurrent
argument_list|()
argument_list|,
name|tblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|Warehouse
operator|.
name|makePartPath
argument_list|(
name|addPartitionDesc
operator|.
name|getPartSpec
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|tgtPath
operator|=
operator|new
name|Path
argument_list|(
name|tblDesc
operator|.
name|getLocation
argument_list|()
argument_list|,
name|Warehouse
operator|.
name|makePartPath
argument_list|(
name|addPartitionDesc
operator|.
name|getPartSpec
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|checkTargetLocationEmpty
argument_list|(
name|fs
argument_list|,
name|tgtPath
argument_list|)
expr_stmt|;
name|addPartitionDesc
operator|.
name|setLocation
argument_list|(
name|tgtPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"adding dependent CopyWork/AddPart/MoveWork for partition "
operator|+
name|partSpecToString
argument_list|(
name|addPartitionDesc
operator|.
name|getPartSpec
argument_list|()
argument_list|)
operator|+
literal|" with source location: "
operator|+
name|srcLocation
argument_list|)
expr_stmt|;
name|String
name|tmpURI
init|=
name|ctx
operator|.
name|getExternalTmpFileURI
argument_list|(
name|fromURI
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|copyTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|CopyWork
argument_list|(
name|srcLocation
argument_list|,
name|tmpURI
argument_list|,
literal|false
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|addPartTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|getInputs
argument_list|()
argument_list|,
name|getOutputs
argument_list|()
argument_list|,
name|addPartitionDesc
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LoadTableDesc
name|loadTableWork
init|=
operator|new
name|LoadTableDesc
argument_list|(
name|tmpURI
argument_list|,
name|ctx
operator|.
name|getExternalTmpFileURI
argument_list|(
name|fromURI
argument_list|)
argument_list|,
name|Utilities
operator|.
name|getTableDesc
argument_list|(
name|table
argument_list|)
argument_list|,
name|addPartitionDesc
operator|.
name|getPartSpec
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|loadTableWork
operator|.
name|setInheritTableSpecs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|loadPartTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|MoveWork
argument_list|(
name|getInputs
argument_list|()
argument_list|,
name|getOutputs
argument_list|()
argument_list|,
name|loadTableWork
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|copyTask
operator|.
name|addDependentTask
argument_list|(
name|loadPartTask
argument_list|)
expr_stmt|;
name|addPartTask
operator|.
name|addDependentTask
argument_list|(
name|loadPartTask
argument_list|)
expr_stmt|;
name|rootTasks
operator|.
name|add
argument_list|(
name|copyTask
argument_list|)
expr_stmt|;
return|return
name|addPartTask
return|;
block|}
block|}
specifier|private
name|void
name|checkTargetLocationEmpty
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|targetPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|SemanticException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"checking emptiness of "
operator|+
name|targetPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|status
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|targetPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Files inc. "
operator|+
name|status
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" found in path : "
operator|+
name|targetPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|TABLE_DATA_EXISTS
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|partSpecToString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|firstTime
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|partSpec
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|firstTime
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|firstTime
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|checkTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|CreateTableDesc
name|tableDesc
parameter_list|)
throws|throws
name|SemanticException
throws|,
name|URISyntaxException
block|{
block|{
name|EximUtil
operator|.
name|validateTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
if|if
condition|(
name|tableDesc
operator|.
name|isExternal
argument_list|()
condition|)
block|{
comment|// the import statement specified external
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" External table cannot overwrite existing table."
operator|+
literal|" Drop existing table first."
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|tableDesc
operator|.
name|isExternal
argument_list|()
condition|)
block|{
comment|// the import statement specified external
if|if
condition|(
operator|!
name|table
operator|.
name|getTableType
argument_list|()
operator|.
name|equals
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" External table cannot overwrite existing table."
operator|+
literal|" Drop existing table first."
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|{
if|if
condition|(
operator|!
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
if|if
condition|(
name|tableDesc
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// IMPORT statement specified
comment|// location
if|if
condition|(
operator|!
name|table
operator|.
name|getDataLocation
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|URI
argument_list|(
name|tableDesc
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Location does not match"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|{
comment|// check column order and types
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|existingTableCols
init|=
name|table
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|importedTableCols
init|=
name|tableDesc
operator|.
name|getCols
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|EximUtil
operator|.
name|schemaCompare
argument_list|(
name|importedTableCols
argument_list|,
name|existingTableCols
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Column Schema does not match"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|{
comment|// check partitioning column order and types
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|existingTablePartCols
init|=
name|table
operator|.
name|getPartCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|importedTablePartCols
init|=
name|tableDesc
operator|.
name|getPartCols
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|EximUtil
operator|.
name|schemaCompare
argument_list|(
name|importedTablePartCols
argument_list|,
name|existingTablePartCols
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Partition Schema does not match"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|{
comment|// check table params
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|existingTableParams
init|=
name|table
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|importedTableParams
init|=
name|tableDesc
operator|.
name|getTblProps
argument_list|()
decl_stmt|;
name|String
name|error
init|=
name|checkParams
argument_list|(
name|existingTableParams
argument_list|,
name|importedTableParams
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"howl.isd"
block|,
literal|"howl.osd"
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Table parameters do not match: "
operator|+
name|error
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|{
comment|// check IF/OF/Serde
name|String
name|existingifc
init|=
name|table
operator|.
name|getInputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|importedifc
init|=
name|tableDesc
operator|.
name|getInputFormat
argument_list|()
decl_stmt|;
name|String
name|existingofc
init|=
name|table
operator|.
name|getOutputFormatClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|importedofc
init|=
name|tableDesc
operator|.
name|getOutputFormat
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|existingifc
operator|.
name|equals
argument_list|(
name|importedifc
argument_list|)
operator|)
operator|||
operator|(
operator|!
name|existingofc
operator|.
name|equals
argument_list|(
name|importedofc
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Table inputformat/outputformats do not match"
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|existingSerde
init|=
name|table
operator|.
name|getSerializationLib
argument_list|()
decl_stmt|;
name|String
name|importedSerde
init|=
name|tableDesc
operator|.
name|getSerName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|existingSerde
operator|.
name|equals
argument_list|(
name|importedSerde
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Table Serde class does not match"
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|existingSerdeFormat
init|=
name|table
operator|.
name|getSerdeParam
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|)
decl_stmt|;
name|String
name|importedSerdeFormat
init|=
name|tableDesc
operator|.
name|getSerdeProps
argument_list|()
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ObjectUtils
operator|.
name|equals
argument_list|(
name|existingSerdeFormat
argument_list|,
name|importedSerdeFormat
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Table Serde format does not match"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|{
comment|// check bucket/sort cols
if|if
condition|(
operator|!
name|ObjectUtils
operator|.
name|equals
argument_list|(
name|table
operator|.
name|getBucketCols
argument_list|()
argument_list|,
name|tableDesc
operator|.
name|getBucketCols
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Table bucketing spec does not match"
argument_list|)
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Order
argument_list|>
name|existingOrder
init|=
name|table
operator|.
name|getSortCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Order
argument_list|>
name|importedOrder
init|=
name|tableDesc
operator|.
name|getSortCols
argument_list|()
decl_stmt|;
comment|// safely sorting
specifier|final
class|class
name|OrderComparator
implements|implements
name|Comparator
argument_list|<
name|Order
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Order
name|o1
parameter_list|,
name|Order
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|.
name|getOrder
argument_list|()
operator|<
name|o2
operator|.
name|getOrder
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
if|if
condition|(
name|o1
operator|.
name|getOrder
argument_list|()
operator|==
name|o2
operator|.
name|getOrder
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|existingOrder
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|importedOrder
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|existingOrder
argument_list|,
operator|new
name|OrderComparator
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|importedOrder
argument_list|,
operator|new
name|OrderComparator
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|existingOrder
operator|.
name|equals
argument_list|(
name|importedOrder
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Table sorting spec does not match"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|importedOrder
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INCOMPATIBLE_SCHEMA
operator|.
name|getMsg
argument_list|(
literal|" Table sorting spec does not match"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|checkParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map1
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map2
parameter_list|,
name|String
index|[]
name|keys
parameter_list|)
block|{
if|if
condition|(
name|map1
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|map2
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|String
name|v1
init|=
name|map1
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|v2
init|=
name|map2
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ObjectUtils
operator|.
name|equals
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
condition|)
block|{
return|return
literal|"Mismatch for "
operator|+
name|key
return|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
if|if
condition|(
name|map1
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|"Mismatch for "
operator|+
name|key
return|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|map2
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
if|if
condition|(
name|map2
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|"Mismatch for "
operator|+
name|key
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

