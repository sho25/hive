begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ptf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|IntervalDayTimeColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContextRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedBatchUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IdentityExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BaseWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PTFDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorPTFDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorPTFDesc
operator|.
name|SupportedFunctionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowFrameDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorPTFInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_comment
comment|/**  * This class is native vectorized PTF operator class.  */
end_comment

begin_class
specifier|public
class|class
name|VectorPTFOperator
extends|extends
name|Operator
argument_list|<
name|PTFDesc
argument_list|>
implements|implements
name|VectorizationOperator
implements|,
name|VectorizationContextRegion
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
name|VectorPTFOperator
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CLASS_NAME
argument_list|)
decl_stmt|;
specifier|private
name|VectorizationContext
name|vContext
decl_stmt|;
specifier|private
name|VectorPTFDesc
name|vectorDesc
decl_stmt|;
comment|/**    * Information about our native vectorized PTF created by the Vectorizer class during    * it decision process and useful for execution.    */
specifier|private
name|VectorPTFInfo
name|vectorPTFInfo
decl_stmt|;
comment|// This is the vectorized row batch description of the output of the native vectorized PTF
comment|// operator.  It is based on the incoming vectorization context.  Its projection may include
comment|// a mixture of input columns and new scratch columns (for the aggregation output).
specifier|protected
name|VectorizationContext
name|vOutContext
decl_stmt|;
specifier|private
name|boolean
name|isPartitionOrderBy
decl_stmt|;
comment|/**    * PTF vector expressions.    */
specifier|private
name|TypeInfo
index|[]
name|reducerBatchTypeInfos
decl_stmt|;
specifier|private
name|int
index|[]
name|outputProjectionColumnMap
decl_stmt|;
specifier|private
name|String
index|[]
name|outputColumnNames
decl_stmt|;
specifier|private
name|TypeInfo
index|[]
name|outputTypeInfos
decl_stmt|;
specifier|private
name|int
name|evaluatorCount
decl_stmt|;
specifier|private
name|String
index|[]
name|evaluatorFunctionNames
decl_stmt|;
specifier|private
name|WindowFrameDef
index|[]
name|evaluatorWindowFrameDefs
decl_stmt|;
specifier|private
name|VectorExpression
index|[]
name|evaluatorInputExpressions
decl_stmt|;
specifier|private
name|Type
index|[]
name|evaluatorInputColumnVectorTypes
decl_stmt|;
specifier|private
name|ExprNodeDesc
index|[]
name|orderExprNodeDescs
decl_stmt|;
specifier|private
name|int
index|[]
name|orderColumnMap
decl_stmt|;
specifier|private
name|Type
index|[]
name|orderColumnVectorTypes
decl_stmt|;
specifier|private
name|VectorExpression
index|[]
name|orderExpressions
decl_stmt|;
specifier|private
name|ExprNodeDesc
index|[]
name|partitionExprNodeDescs
decl_stmt|;
specifier|private
name|int
index|[]
name|partitionColumnMap
decl_stmt|;
specifier|private
name|Type
index|[]
name|partitionColumnVectorTypes
decl_stmt|;
specifier|private
name|VectorExpression
index|[]
name|partitionExpressions
decl_stmt|;
specifier|private
name|int
index|[]
name|keyInputColumnMap
decl_stmt|;
specifier|private
name|int
index|[]
name|nonKeyInputColumnMap
decl_stmt|;
comment|// The above members are initialized by the constructor and must not be
comment|// transient.
comment|//---------------------------------------------------------------------------
specifier|private
specifier|transient
name|boolean
name|isLastGroupBatch
decl_stmt|;
specifier|private
specifier|transient
name|VectorizedRowBatch
name|overflowBatch
decl_stmt|;
specifier|private
specifier|transient
name|VectorPTFGroupBatches
name|groupBatches
decl_stmt|;
specifier|private
specifier|transient
name|VectorPTFEvaluatorBase
index|[]
name|evaluators
decl_stmt|;
specifier|private
specifier|transient
name|int
index|[]
name|streamingEvaluatorNums
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|allEvaluatorsAreStreaming
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|isFirstPartition
decl_stmt|;
specifier|private
specifier|transient
name|boolean
index|[]
name|currentPartitionIsNull
decl_stmt|;
specifier|private
specifier|transient
name|long
index|[]
name|currentPartitionLongs
decl_stmt|;
specifier|private
specifier|transient
name|double
index|[]
name|currentPartitionDoubles
decl_stmt|;
specifier|private
specifier|transient
name|byte
index|[]
index|[]
name|currentPartitionByteArrays
decl_stmt|;
specifier|private
specifier|transient
name|int
index|[]
name|currentPartitionByteLengths
decl_stmt|;
specifier|private
specifier|transient
name|HiveDecimalWritable
index|[]
name|currentPartitionDecimals
decl_stmt|;
specifier|private
specifier|transient
name|Timestamp
index|[]
name|currentPartitionTimestamps
decl_stmt|;
specifier|private
specifier|transient
name|HiveIntervalDayTime
index|[]
name|currentPartitionIntervalDayTimes
decl_stmt|;
comment|// For debug tracing: the name of the map or reduce task.
specifier|private
specifier|transient
name|String
name|taskName
decl_stmt|;
comment|// Debug display.
specifier|private
specifier|transient
name|long
name|batchCounter
decl_stmt|;
comment|//---------------------------------------------------------------------------
comment|/** Kryo ctor. */
specifier|protected
name|VectorPTFOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|VectorPTFOperator
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
specifier|public
name|VectorPTFOperator
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|,
name|OperatorDesc
name|conf
parameter_list|,
name|VectorizationContext
name|vContext
parameter_list|,
name|VectorDesc
name|vectorDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"VectorPTF constructor"
argument_list|)
expr_stmt|;
name|PTFDesc
name|desc
init|=
operator|(
name|PTFDesc
operator|)
name|conf
decl_stmt|;
name|this
operator|.
name|conf
operator|=
name|desc
expr_stmt|;
name|this
operator|.
name|vectorDesc
operator|=
operator|(
name|VectorPTFDesc
operator|)
name|vectorDesc
expr_stmt|;
name|vectorPTFInfo
operator|=
name|this
operator|.
name|vectorDesc
operator|.
name|getVectorPTFInfo
argument_list|()
expr_stmt|;
name|this
operator|.
name|vContext
operator|=
name|vContext
expr_stmt|;
name|reducerBatchTypeInfos
operator|=
name|this
operator|.
name|vectorDesc
operator|.
name|getReducerBatchTypeInfos
argument_list|()
expr_stmt|;
name|isPartitionOrderBy
operator|=
name|this
operator|.
name|vectorDesc
operator|.
name|getIsPartitionOrderBy
argument_list|()
expr_stmt|;
name|outputColumnNames
operator|=
name|this
operator|.
name|vectorDesc
operator|.
name|getOutputColumnNames
argument_list|()
expr_stmt|;
name|outputTypeInfos
operator|=
name|this
operator|.
name|vectorDesc
operator|.
name|getOutputTypeInfos
argument_list|()
expr_stmt|;
name|outputProjectionColumnMap
operator|=
name|vectorPTFInfo
operator|.
name|getOutputColumnMap
argument_list|()
expr_stmt|;
comment|/*      * Create a new vectorization context to create a new projection, but keep      * same output column manager must be inherited to track the scratch the columns.      */
name|vOutContext
operator|=
operator|new
name|VectorizationContext
argument_list|(
name|getName
argument_list|()
argument_list|,
name|this
operator|.
name|vContext
argument_list|)
expr_stmt|;
name|setupVOutContext
argument_list|()
expr_stmt|;
name|evaluatorFunctionNames
operator|=
name|this
operator|.
name|vectorDesc
operator|.
name|getEvaluatorFunctionNames
argument_list|()
expr_stmt|;
name|evaluatorCount
operator|=
name|evaluatorFunctionNames
operator|.
name|length
expr_stmt|;
name|evaluatorWindowFrameDefs
operator|=
name|this
operator|.
name|vectorDesc
operator|.
name|getEvaluatorWindowFrameDefs
argument_list|()
expr_stmt|;
name|evaluatorInputExpressions
operator|=
name|vectorPTFInfo
operator|.
name|getEvaluatorInputExpressions
argument_list|()
expr_stmt|;
name|evaluatorInputColumnVectorTypes
operator|=
name|vectorPTFInfo
operator|.
name|getEvaluatorInputColumnVectorTypes
argument_list|()
expr_stmt|;
name|orderExprNodeDescs
operator|=
name|this
operator|.
name|vectorDesc
operator|.
name|getOrderExprNodeDescs
argument_list|()
expr_stmt|;
name|orderColumnMap
operator|=
name|vectorPTFInfo
operator|.
name|getOrderColumnMap
argument_list|()
expr_stmt|;
name|orderColumnVectorTypes
operator|=
name|vectorPTFInfo
operator|.
name|getOrderColumnVectorTypes
argument_list|()
expr_stmt|;
name|orderExpressions
operator|=
name|vectorPTFInfo
operator|.
name|getOrderExpressions
argument_list|()
expr_stmt|;
name|partitionExprNodeDescs
operator|=
name|this
operator|.
name|vectorDesc
operator|.
name|getPartitionExprNodeDescs
argument_list|()
expr_stmt|;
name|partitionColumnMap
operator|=
name|vectorPTFInfo
operator|.
name|getPartitionColumnMap
argument_list|()
expr_stmt|;
name|partitionColumnVectorTypes
operator|=
name|vectorPTFInfo
operator|.
name|getPartitionColumnVectorTypes
argument_list|()
expr_stmt|;
name|partitionExpressions
operator|=
name|vectorPTFInfo
operator|.
name|getPartitionExpressions
argument_list|()
expr_stmt|;
name|keyInputColumnMap
operator|=
name|vectorPTFInfo
operator|.
name|getKeyInputColumnMap
argument_list|()
expr_stmt|;
name|nonKeyInputColumnMap
operator|=
name|vectorPTFInfo
operator|.
name|getNonKeyInputColumnMap
argument_list|()
expr_stmt|;
block|}
comment|/**    * Setup the vectorized row batch description of the output of the native vectorized PTF    * operator.  Use the output projection we previously built from a mixture of input    * columns and new scratch columns.    */
specifier|protected
name|void
name|setupVOutContext
parameter_list|()
block|{
name|vOutContext
operator|.
name|resetProjectionColumns
argument_list|()
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|outputColumnNames
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|String
name|columnName
init|=
name|outputColumnNames
index|[
name|i
index|]
decl_stmt|;
name|int
name|outputColumn
init|=
name|outputProjectionColumnMap
index|[
name|i
index|]
decl_stmt|;
name|vOutContext
operator|.
name|addProjectionColumn
argument_list|(
name|columnName
argument_list|,
name|outputColumn
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Allocate overflow batch columns by hand.    */
specifier|private
name|void
name|allocateOverflowBatchColumnVector
parameter_list|(
name|VectorizedRowBatch
name|overflowBatch
parameter_list|,
name|int
name|outputColumn
parameter_list|,
name|String
name|typeName
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|overflowBatch
operator|.
name|cols
index|[
name|outputColumn
index|]
operator|==
literal|null
condition|)
block|{
name|typeName
operator|=
name|VectorizationContext
operator|.
name|mapTypeNameSynonyms
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|overflowBatch
operator|.
name|cols
index|[
name|outputColumn
index|]
operator|=
name|VectorizedBatchUtil
operator|.
name|createColumnVector
argument_list|(
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Setup our 2nd batch with the same "column schema" as the output columns plus any scratch    * columns since the overflow batch will get forwarded to children operators.    */
specifier|protected
name|VectorizedRowBatch
name|setupOverflowBatch
parameter_list|()
throws|throws
name|HiveException
block|{
name|int
name|initialColumnCount
init|=
name|vContext
operator|.
name|firstOutputColumnIndex
argument_list|()
decl_stmt|;
name|VectorizedRowBatch
name|overflowBatch
decl_stmt|;
name|int
name|totalNumColumns
init|=
name|initialColumnCount
operator|+
name|vOutContext
operator|.
name|getScratchColumnTypeNames
argument_list|()
operator|.
name|length
decl_stmt|;
name|overflowBatch
operator|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|totalNumColumns
argument_list|)
expr_stmt|;
comment|// First, just allocate just the output columns we will be using.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputProjectionColumnMap
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|outputColumn
init|=
name|outputProjectionColumnMap
index|[
name|i
index|]
decl_stmt|;
name|String
name|typeName
init|=
name|outputTypeInfos
index|[
name|i
index|]
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
name|allocateOverflowBatchColumnVector
argument_list|(
name|overflowBatch
argument_list|,
name|outputColumn
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
block|}
comment|// Now, add any scratch columns needed for children operators.
name|int
name|outputColumn
init|=
name|initialColumnCount
decl_stmt|;
for|for
control|(
name|String
name|typeName
range|:
name|vOutContext
operator|.
name|getScratchColumnTypeNames
argument_list|()
control|)
block|{
name|allocateOverflowBatchColumnVector
argument_list|(
name|overflowBatch
argument_list|,
name|outputColumn
operator|++
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
block|}
name|overflowBatch
operator|.
name|projectedColumns
operator|=
name|outputProjectionColumnMap
expr_stmt|;
name|overflowBatch
operator|.
name|projectionSize
operator|=
name|outputProjectionColumnMap
operator|.
name|length
expr_stmt|;
name|overflowBatch
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|overflowBatch
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|initializeOp
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
comment|// Determine the name of our map or reduce task for debug tracing.
name|BaseWork
name|work
init|=
name|Utilities
operator|.
name|getMapWork
argument_list|(
name|hconf
argument_list|)
decl_stmt|;
if|if
condition|(
name|work
operator|==
literal|null
condition|)
block|{
name|work
operator|=
name|Utilities
operator|.
name|getReduceWork
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
name|taskName
operator|=
name|work
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isPartitionOrderBy
condition|)
block|{
name|currentPartitionIsNull
operator|=
literal|null
expr_stmt|;
name|currentPartitionLongs
operator|=
literal|null
expr_stmt|;
name|currentPartitionDoubles
operator|=
literal|null
expr_stmt|;
name|currentPartitionByteArrays
operator|=
literal|null
expr_stmt|;
name|currentPartitionByteLengths
operator|=
literal|null
expr_stmt|;
name|currentPartitionDecimals
operator|=
literal|null
expr_stmt|;
name|currentPartitionTimestamps
operator|=
literal|null
expr_stmt|;
name|currentPartitionIntervalDayTimes
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|partitionKeyCount
init|=
name|vectorDesc
operator|.
name|getPartitionExprNodeDescs
argument_list|()
operator|.
name|length
decl_stmt|;
name|currentPartitionIsNull
operator|=
operator|new
name|boolean
index|[
name|partitionKeyCount
index|]
expr_stmt|;
name|currentPartitionLongs
operator|=
operator|new
name|long
index|[
name|partitionKeyCount
index|]
expr_stmt|;
name|currentPartitionDoubles
operator|=
operator|new
name|double
index|[
name|partitionKeyCount
index|]
expr_stmt|;
name|currentPartitionByteArrays
operator|=
operator|new
name|byte
index|[
name|partitionKeyCount
index|]
index|[]
expr_stmt|;
name|currentPartitionByteLengths
operator|=
operator|new
name|int
index|[
name|partitionKeyCount
index|]
expr_stmt|;
name|currentPartitionDecimals
operator|=
operator|new
name|HiveDecimalWritable
index|[
name|partitionKeyCount
index|]
expr_stmt|;
name|currentPartitionTimestamps
operator|=
operator|new
name|Timestamp
index|[
name|partitionKeyCount
index|]
expr_stmt|;
name|currentPartitionIntervalDayTimes
operator|=
operator|new
name|HiveIntervalDayTime
index|[
name|partitionKeyCount
index|]
expr_stmt|;
block|}
name|evaluators
operator|=
name|VectorPTFDesc
operator|.
name|getEvaluators
argument_list|(
name|vectorDesc
argument_list|,
name|vectorPTFInfo
argument_list|)
expr_stmt|;
name|streamingEvaluatorNums
operator|=
name|VectorPTFDesc
operator|.
name|getStreamingEvaluatorNums
argument_list|(
name|evaluators
argument_list|)
expr_stmt|;
name|allEvaluatorsAreStreaming
operator|=
operator|(
name|streamingEvaluatorNums
operator|.
name|length
operator|==
name|evaluatorCount
operator|)
expr_stmt|;
comment|/*      * Setup the overflow batch.      */
name|overflowBatch
operator|=
name|setupOverflowBatch
argument_list|()
expr_stmt|;
name|groupBatches
operator|=
operator|new
name|VectorPTFGroupBatches
argument_list|(
name|hconf
argument_list|,
name|vectorDesc
operator|.
name|getVectorizedPTFMaxMemoryBufferingBatchCount
argument_list|()
argument_list|)
expr_stmt|;
name|groupBatches
operator|.
name|init
argument_list|(
name|reducerBatchTypeInfos
argument_list|,
name|evaluators
argument_list|,
name|outputProjectionColumnMap
argument_list|,
name|outputTypeInfos
argument_list|,
name|keyInputColumnMap
argument_list|,
name|nonKeyInputColumnMap
argument_list|,
name|streamingEvaluatorNums
argument_list|,
name|overflowBatch
argument_list|)
expr_stmt|;
name|isFirstPartition
operator|=
literal|true
expr_stmt|;
name|batchCounter
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNextVectorBatchGroupStatus
parameter_list|(
name|boolean
name|isLastGroupBatch
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
operator|.
name|isLastGroupBatch
operator|=
name|isLastGroupBatch
expr_stmt|;
block|}
comment|/**    * We are processing a batch from reduce processor that is only for one reducer key or PTF group.    *    * For a simple OVER (PARTITION BY column) or OVER (ORDER BY column), the reduce processor's    * group key is the partition or order by key.    *    * For an OVER (PARTITION BY column1, ORDER BY column2), the reduce-shuffle group key is    * the combination of the partition column1 and the order by column2.  In this case, this method    * has to watch for changes in the partition and reset the group aggregations.    *    * The reduce processor calls setNextVectorBatchGroupStatus beforehand to tell us whether the    * batch supplied to our process method is the last batch for the group key, or not.  This helps    * us intelligently process the batch.    */
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|(
name|VectorizedRowBatch
operator|)
name|row
decl_stmt|;
for|for
control|(
name|VectorExpression
name|orderExpression
range|:
name|orderExpressions
control|)
block|{
name|orderExpression
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|partitionExpressions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|VectorExpression
name|partitionExpression
range|:
name|partitionExpressions
control|)
block|{
name|partitionExpression
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isPartitionOrderBy
condition|)
block|{
comment|// Check for PARTITION BY key change when we have ORDER BY keys.
if|if
condition|(
name|isFirstPartition
condition|)
block|{
name|isFirstPartition
operator|=
literal|false
expr_stmt|;
name|setCurrentPartition
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isPartitionChanged
argument_list|(
name|batch
argument_list|)
condition|)
block|{
name|setCurrentPartition
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|groupBatches
operator|.
name|resetEvaluators
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allEvaluatorsAreStreaming
condition|)
block|{
comment|// We can process this batch immediately.
name|groupBatches
operator|.
name|evaluateStreamingGroupBatch
argument_list|(
name|batch
argument_list|,
name|isLastGroupBatch
argument_list|)
expr_stmt|;
name|forward
argument_list|(
name|batch
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Evaluate the aggregation functions over the group batch.
name|groupBatches
operator|.
name|evaluateGroupBatch
argument_list|(
name|batch
argument_list|,
name|isLastGroupBatch
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isLastGroupBatch
condition|)
block|{
comment|// The group spans a VectorizedRowBatch.  Swap the relevant columns into our batch buffers,
comment|// or write the batch to temporary storage.
name|groupBatches
operator|.
name|bufferGroupBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/*        * Last group batch.        *        * Take the (non-streaming) group aggregation values and write output columns for all        * rows of every batch of the group.  As each group batch is finished being written, they are        * forwarded to the next operator.        */
name|groupBatches
operator|.
name|fillGroupResultsAndForward
argument_list|(
name|this
argument_list|,
name|batch
argument_list|)
expr_stmt|;
block|}
comment|// If we are only processing a PARTITION BY, reset our evaluators.
if|if
condition|(
operator|!
name|isPartitionOrderBy
condition|)
block|{
name|groupBatches
operator|.
name|resetEvaluators
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isPartitionChanged
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
specifier|final
name|int
name|count
init|=
name|partitionColumnMap
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|partitionColumnMap
index|[
name|i
index|]
index|]
decl_stmt|;
comment|// Vector reduce key (i.e. partition) columns are repeated -- so we test element 0.
specifier|final
name|boolean
name|isNull
init|=
operator|!
name|colVector
operator|.
name|noNulls
operator|&&
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|boolean
name|currentIsNull
init|=
name|currentPartitionIsNull
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|isNull
operator|!=
name|currentIsNull
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|isNull
condition|)
block|{
comment|// NULL does equal NULL here.
continue|continue;
block|}
switch|switch
condition|(
name|partitionColumnVectorTypes
index|[
name|i
index|]
condition|)
block|{
case|case
name|LONG
case|:
if|if
condition|(
name|currentPartitionLongs
index|[
name|i
index|]
operator|!=
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|true
return|;
block|}
break|break;
case|case
name|DOUBLE
case|:
if|if
condition|(
name|currentPartitionDoubles
index|[
name|i
index|]
operator|!=
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
literal|0
index|]
condition|)
block|{
return|return
literal|true
return|;
block|}
break|break;
case|case
name|BYTES
case|:
block|{
name|BytesColumnVector
name|byteColVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|colVector
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|byteColVector
operator|.
name|vector
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|int
name|start
init|=
name|byteColVector
operator|.
name|start
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|byteColVector
operator|.
name|length
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|StringExpr
operator|.
name|equal
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|,
name|currentPartitionByteArrays
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|currentPartitionByteLengths
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
break|break;
case|case
name|DECIMAL
case|:
if|if
condition|(
operator|!
name|currentPartitionDecimals
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|colVector
operator|)
operator|.
name|compareTo
argument_list|(
literal|0
argument_list|,
name|currentPartitionTimestamps
index|[
name|i
index|]
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
if|if
condition|(
operator|(
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|colVector
operator|)
operator|.
name|compareTo
argument_list|(
literal|0
argument_list|,
name|currentPartitionIntervalDayTimes
index|[
name|i
index|]
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected column vector type "
operator|+
name|partitionColumnVectorTypes
index|[
name|i
index|]
argument_list|)
throw|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|setCurrentPartition
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
specifier|final
name|int
name|count
init|=
name|partitionColumnMap
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|partitionColumnMap
index|[
name|i
index|]
index|]
decl_stmt|;
comment|// Partition columns are repeated -- so we test element 0.
specifier|final
name|boolean
name|isNull
init|=
operator|!
name|colVector
operator|.
name|noNulls
operator|&&
name|colVector
operator|.
name|isNull
index|[
literal|0
index|]
decl_stmt|;
name|currentPartitionIsNull
index|[
name|i
index|]
operator|=
name|isNull
expr_stmt|;
if|if
condition|(
name|isNull
condition|)
block|{
continue|continue;
block|}
switch|switch
condition|(
name|partitionColumnVectorTypes
index|[
name|i
index|]
condition|)
block|{
case|case
name|LONG
case|:
name|currentPartitionLongs
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
literal|0
index|]
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|currentPartitionDoubles
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
literal|0
index|]
expr_stmt|;
break|break;
case|case
name|BYTES
case|:
block|{
name|BytesColumnVector
name|byteColVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|colVector
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|byteColVector
operator|.
name|vector
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|int
name|start
init|=
name|byteColVector
operator|.
name|start
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|byteColVector
operator|.
name|length
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|currentPartitionByteArrays
index|[
name|i
index|]
operator|==
literal|null
operator|||
name|currentPartitionByteLengths
index|[
name|i
index|]
operator|<
name|length
condition|)
block|{
name|currentPartitionByteArrays
index|[
name|i
index|]
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|start
operator|+
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|currentPartitionByteArrays
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|currentPartitionByteLengths
index|[
name|i
index|]
operator|=
name|length
expr_stmt|;
block|}
break|break;
case|case
name|DECIMAL
case|:
if|if
condition|(
name|currentPartitionDecimals
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|currentPartitionDecimals
index|[
name|i
index|]
operator|=
operator|new
name|HiveDecimalWritable
argument_list|()
expr_stmt|;
block|}
name|currentPartitionDecimals
index|[
name|i
index|]
operator|.
name|set
argument_list|(
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
if|if
condition|(
name|currentPartitionTimestamps
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|currentPartitionTimestamps
index|[
name|i
index|]
operator|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|colVector
operator|)
operator|.
name|timestampUpdate
argument_list|(
name|currentPartitionTimestamps
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
if|if
condition|(
name|currentPartitionIntervalDayTimes
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|currentPartitionIntervalDayTimes
index|[
name|i
index|]
operator|=
operator|new
name|HiveIntervalDayTime
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|colVector
operator|)
operator|.
name|intervalDayTimeUpdate
argument_list|(
name|currentPartitionIntervalDayTimes
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected column vector type "
operator|+
name|partitionColumnVectorTypes
index|[
name|i
index|]
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|forward
parameter_list|(
name|Object
name|row
parameter_list|,
name|ObjectInspector
name|rowInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|forward
argument_list|(
name|row
argument_list|,
name|rowInspector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|closeOp
argument_list|(
name|abort
argument_list|)
expr_stmt|;
comment|// We do not try to finish and flush an in-progress group because correct values require the
comment|// last group batch.
block|}
comment|/**    * @return the name of the operator    */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getOperatorName
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
literal|"PTF"
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|PTF
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorizationContext
name|getOutputVectorizationContext
parameter_list|()
block|{
return|return
name|vOutContext
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorizationContext
name|getInputVectorizationContext
parameter_list|()
block|{
return|return
name|vContext
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorDesc
name|getVectorDesc
parameter_list|()
block|{
return|return
name|vectorDesc
return|;
block|}
block|}
end_class

end_unit

