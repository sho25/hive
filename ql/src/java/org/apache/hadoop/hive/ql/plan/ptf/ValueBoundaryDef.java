begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|Direction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_class
specifier|public
class|class
name|ValueBoundaryDef
extends|extends
name|BoundaryDef
block|{
specifier|private
name|PTFExpressionDef
name|expressionDef
decl_stmt|;
specifier|private
specifier|final
name|int
name|amt
decl_stmt|;
specifier|private
specifier|final
name|int
name|relativeOffset
decl_stmt|;
specifier|public
name|ValueBoundaryDef
parameter_list|(
name|Direction
name|direction
parameter_list|,
name|int
name|amt
parameter_list|)
block|{
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
name|this
operator|.
name|amt
operator|=
name|amt
expr_stmt|;
comment|// Calculate relative offset
switch|switch
condition|(
name|this
operator|.
name|direction
condition|)
block|{
case|case
name|PRECEDING
case|:
name|relativeOffset
operator|=
operator|-
name|amt
expr_stmt|;
break|break;
case|case
name|FOLLOWING
case|:
name|relativeOffset
operator|=
name|amt
expr_stmt|;
break|break;
default|default:
name|relativeOffset
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|BoundaryDef
name|other
parameter_list|)
block|{
name|int
name|c
init|=
name|getDirection
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getDirection
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
return|;
block|}
name|ValueBoundaryDef
name|vb
init|=
operator|(
name|ValueBoundaryDef
operator|)
name|other
decl_stmt|;
return|return
name|this
operator|.
name|direction
operator|==
name|Direction
operator|.
name|PRECEDING
condition|?
name|vb
operator|.
name|amt
operator|-
name|this
operator|.
name|amt
else|:
name|this
operator|.
name|amt
operator|-
name|vb
operator|.
name|amt
return|;
block|}
specifier|public
name|PTFExpressionDef
name|getExpressionDef
parameter_list|()
block|{
return|return
name|expressionDef
return|;
block|}
specifier|public
name|void
name|setExpressionDef
parameter_list|(
name|PTFExpressionDef
name|expressionDef
parameter_list|)
block|{
name|this
operator|.
name|expressionDef
operator|=
name|expressionDef
expr_stmt|;
block|}
specifier|public
name|ObjectInspector
name|getOI
parameter_list|()
block|{
return|return
name|expressionDef
operator|==
literal|null
condition|?
literal|null
else|:
name|expressionDef
operator|.
name|getOI
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getAmt
parameter_list|()
block|{
return|return
name|amt
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRelativeOffset
parameter_list|()
block|{
return|return
name|relativeOffset
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPreceding
parameter_list|()
block|{
return|return
name|this
operator|.
name|direction
operator|==
name|Direction
operator|.
name|PRECEDING
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFollowing
parameter_list|()
block|{
return|return
name|this
operator|.
name|direction
operator|==
name|Direction
operator|.
name|FOLLOWING
return|;
block|}
block|}
end_class

end_unit

