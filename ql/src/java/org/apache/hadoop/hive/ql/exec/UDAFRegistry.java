begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|UDAFRegistry
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.hive.ql.exec.UDAFRegistry"
argument_list|)
decl_stmt|;
comment|/**    * The mapping from aggregation function names to aggregation classes.    */
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
argument_list|>
name|mUDAFs
decl_stmt|;
static|static
block|{
name|mUDAFs
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|registerUDAF
argument_list|(
literal|"sum"
argument_list|,
name|UDAFSum
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDAF
argument_list|(
literal|"count"
argument_list|,
name|UDAFCount
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDAF
argument_list|(
literal|"max"
argument_list|,
name|UDAFMax
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDAF
argument_list|(
literal|"min"
argument_list|,
name|UDAFMin
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerUDAF
argument_list|(
literal|"avg"
argument_list|,
name|UDAFAvg
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|registerUDAF
parameter_list|(
name|String
name|functionName
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
name|UDAFClass
parameter_list|)
block|{
if|if
condition|(
name|UDAF
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|UDAFClass
argument_list|)
condition|)
block|{
name|mUDAFs
operator|.
name|put
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|UDAFClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Registering UDAF Class "
operator|+
name|UDAFClass
operator|+
literal|" which does not extends "
operator|+
name|UDAF
operator|.
name|class
argument_list|)
throw|;
block|}
name|mUDAFs
operator|.
name|put
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|UDAFClass
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
name|getUDAF
parameter_list|(
name|String
name|functionName
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking up UDAF: "
operator|+
name|functionName
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
name|result
init|=
name|mUDAFs
operator|.
name|get
argument_list|(
name|functionName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|Method
name|getUDAFMethod
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|argumentClasses
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|UDAF
argument_list|>
name|udaf
init|=
name|getUDAF
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|udaf
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|UDFRegistry
operator|.
name|getMethodInternal
argument_list|(
name|udaf
argument_list|,
literal|"aggregate"
argument_list|,
literal|false
argument_list|,
name|argumentClasses
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Method
name|getUDAFMethod
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|argumentClasses
parameter_list|)
block|{
return|return
name|getUDAFMethod
argument_list|(
name|name
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|argumentClasses
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

