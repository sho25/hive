begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|BloomFilterIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|BinaryColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|BooleanColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|ColumnStatisticsImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|DateColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|DecimalColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|DoubleColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|IntegerColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|OrcIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|StringColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|StripeInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|StripeStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TimestampColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONStringer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONWriter
import|;
end_import

begin_comment
comment|/**  * File dump tool with json formatted output.  */
end_comment

begin_class
specifier|public
class|class
name|JsonFileDump
block|{
specifier|public
specifier|static
name|void
name|printJsonMetaData
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|rowIndexCols
parameter_list|,
name|boolean
name|prettyPrint
parameter_list|,
name|boolean
name|printTimeZone
parameter_list|)
throws|throws
name|JSONException
throws|,
name|IOException
block|{
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|JSONStringer
name|writer
init|=
operator|new
name|JSONStringer
argument_list|()
decl_stmt|;
name|boolean
name|multiFile
init|=
name|files
operator|.
name|size
argument_list|()
operator|>
literal|1
decl_stmt|;
if|if
condition|(
name|multiFile
condition|)
block|{
name|writer
operator|.
name|array
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|object
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|filename
range|:
name|files
control|)
block|{
try|try
block|{
if|if
condition|(
name|multiFile
condition|)
block|{
name|writer
operator|.
name|object
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|key
argument_list|(
literal|"fileName"
argument_list|)
operator|.
name|value
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
name|FileDump
operator|.
name|getReader
argument_list|(
name|path
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"status"
argument_list|)
operator|.
name|value
argument_list|(
literal|"FAILED"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|writer
operator|.
name|key
argument_list|(
literal|"fileVersion"
argument_list|)
operator|.
name|value
argument_list|(
name|reader
operator|.
name|getFileVersion
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"writerVersion"
argument_list|)
operator|.
name|value
argument_list|(
name|reader
operator|.
name|getWriterVersion
argument_list|()
argument_list|)
expr_stmt|;
name|RecordReaderImpl
name|rows
init|=
operator|(
name|RecordReaderImpl
operator|)
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"numberOfRows"
argument_list|)
operator|.
name|value
argument_list|(
name|reader
operator|.
name|getNumberOfRows
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"compression"
argument_list|)
operator|.
name|value
argument_list|(
name|reader
operator|.
name|getCompression
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reader
operator|.
name|getCompression
argument_list|()
operator|!=
name|CompressionKind
operator|.
name|NONE
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"compressionBufferSize"
argument_list|)
operator|.
name|value
argument_list|(
name|reader
operator|.
name|getCompressionSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|key
argument_list|(
literal|"schemaString"
argument_list|)
operator|.
name|value
argument_list|(
name|reader
operator|.
name|getObjectInspector
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"schema"
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
name|writeSchema
argument_list|(
name|writer
argument_list|,
name|reader
operator|.
name|getTypes
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"stripeStatistics"
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|StripeStatistics
argument_list|>
name|stripeStatistics
init|=
name|reader
operator|.
name|getStripeStatistics
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|stripeStatistics
operator|.
name|size
argument_list|()
condition|;
name|n
operator|++
control|)
block|{
name|writer
operator|.
name|object
argument_list|()
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"stripeNumber"
argument_list|)
operator|.
name|value
argument_list|(
name|n
operator|+
literal|1
argument_list|)
expr_stmt|;
name|StripeStatistics
name|ss
init|=
name|stripeStatistics
operator|.
name|get
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"columnStatistics"
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ss
operator|.
name|getColumnStatistics
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|object
argument_list|()
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"columnId"
argument_list|)
operator|.
name|value
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|writeColumnStatistics
argument_list|(
name|writer
argument_list|,
name|ss
operator|.
name|getColumnStatistics
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|writer
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|ColumnStatistics
index|[]
name|stats
init|=
name|reader
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|int
name|colCount
init|=
name|stats
operator|.
name|length
decl_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"fileStatistics"
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|object
argument_list|()
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"columnId"
argument_list|)
operator|.
name|value
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|writeColumnStatistics
argument_list|(
name|writer
argument_list|,
name|stats
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"stripes"
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
name|int
name|stripeIx
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|StripeInformation
name|stripe
range|:
name|reader
operator|.
name|getStripes
argument_list|()
control|)
block|{
operator|++
name|stripeIx
expr_stmt|;
name|long
name|stripeStart
init|=
name|stripe
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|OrcProto
operator|.
name|StripeFooter
name|footer
init|=
name|rows
operator|.
name|readStripeFooter
argument_list|(
name|stripe
argument_list|)
decl_stmt|;
name|writer
operator|.
name|object
argument_list|()
expr_stmt|;
comment|// start of stripe information
name|writer
operator|.
name|key
argument_list|(
literal|"stripeNumber"
argument_list|)
operator|.
name|value
argument_list|(
name|stripeIx
operator|+
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"stripeInformation"
argument_list|)
expr_stmt|;
name|writeStripeInformation
argument_list|(
name|writer
argument_list|,
name|stripe
argument_list|)
expr_stmt|;
if|if
condition|(
name|printTimeZone
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"writerTimezone"
argument_list|)
operator|.
name|value
argument_list|(
name|footer
operator|.
name|hasWriterTimezone
argument_list|()
condition|?
name|footer
operator|.
name|getWriterTimezone
argument_list|()
else|:
name|FileDump
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
name|long
name|sectionStart
init|=
name|stripeStart
decl_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"streams"
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|OrcProto
operator|.
name|Stream
name|section
range|:
name|footer
operator|.
name|getStreamsList
argument_list|()
control|)
block|{
name|writer
operator|.
name|object
argument_list|()
expr_stmt|;
name|String
name|kind
init|=
name|section
operator|.
name|hasKind
argument_list|()
condition|?
name|section
operator|.
name|getKind
argument_list|()
operator|.
name|name
argument_list|()
else|:
name|FileDump
operator|.
name|UNKNOWN
decl_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"columnId"
argument_list|)
operator|.
name|value
argument_list|(
name|section
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"section"
argument_list|)
operator|.
name|value
argument_list|(
name|kind
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"startOffset"
argument_list|)
operator|.
name|value
argument_list|(
name|sectionStart
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"length"
argument_list|)
operator|.
name|value
argument_list|(
name|section
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|sectionStart
operator|+=
name|section
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|writer
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"encodings"
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|footer
operator|.
name|getColumnsCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|object
argument_list|()
expr_stmt|;
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
init|=
name|footer
operator|.
name|getColumns
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"columnId"
argument_list|)
operator|.
name|value
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"kind"
argument_list|)
operator|.
name|value
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|==
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DICTIONARY
operator|||
name|encoding
operator|.
name|getKind
argument_list|()
operator|==
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DICTIONARY_V2
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"dictionarySize"
argument_list|)
operator|.
name|value
argument_list|(
name|encoding
operator|.
name|getDictionarySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|endArray
argument_list|()
expr_stmt|;
if|if
condition|(
name|rowIndexCols
operator|!=
literal|null
operator|&&
operator|!
name|rowIndexCols
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// include the columns that are specified, only if the columns are included, bloom filter
comment|// will be read
name|boolean
index|[]
name|sargColumns
init|=
operator|new
name|boolean
index|[
name|colCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|colIdx
range|:
name|rowIndexCols
control|)
block|{
name|sargColumns
index|[
name|colIdx
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|OrcIndex
name|indices
init|=
name|rows
operator|.
name|readRowIndex
argument_list|(
name|stripeIx
argument_list|,
literal|null
argument_list|,
name|sargColumns
argument_list|)
decl_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"indexes"
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|col
range|:
name|rowIndexCols
control|)
block|{
name|writer
operator|.
name|object
argument_list|()
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"columnId"
argument_list|)
operator|.
name|value
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|writeRowGroupIndexes
argument_list|(
name|writer
argument_list|,
name|col
argument_list|,
name|indices
operator|.
name|getRowGroupIndex
argument_list|()
argument_list|)
expr_stmt|;
name|writeBloomFilterIndexes
argument_list|(
name|writer
argument_list|,
name|col
argument_list|,
name|indices
operator|.
name|getBloomFilterIndex
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|endObject
argument_list|()
expr_stmt|;
comment|// end of stripe information
block|}
name|writer
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|fileLen
init|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|path
argument_list|)
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|long
name|paddedBytes
init|=
name|FileDump
operator|.
name|getTotalPaddingSize
argument_list|(
name|reader
argument_list|)
decl_stmt|;
comment|// empty ORC file is ~45 bytes. Assumption here is file length always>0
name|double
name|percentPadding
init|=
operator|(
operator|(
name|double
operator|)
name|paddedBytes
operator|/
operator|(
name|double
operator|)
name|fileLen
operator|)
operator|*
literal|100
decl_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"fileLength"
argument_list|)
operator|.
name|value
argument_list|(
name|fileLen
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"paddingLength"
argument_list|)
operator|.
name|value
argument_list|(
name|paddedBytes
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"paddingRatio"
argument_list|)
operator|.
name|value
argument_list|(
name|percentPadding
argument_list|)
expr_stmt|;
name|OrcRecordUpdater
operator|.
name|AcidStats
name|acidStats
init|=
name|OrcRecordUpdater
operator|.
name|parseAcidStats
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|acidStats
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"numInserts"
argument_list|)
operator|.
name|value
argument_list|(
name|acidStats
operator|.
name|inserts
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"numDeletes"
argument_list|)
operator|.
name|value
argument_list|(
name|acidStats
operator|.
name|deletes
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"numUpdates"
argument_list|)
operator|.
name|value
argument_list|(
name|acidStats
operator|.
name|updates
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|key
argument_list|(
literal|"status"
argument_list|)
operator|.
name|value
argument_list|(
literal|"OK"
argument_list|)
expr_stmt|;
name|rows
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"status"
argument_list|)
operator|.
name|value
argument_list|(
literal|"FAILED"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|multiFile
condition|)
block|{
name|writer
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|prettyPrint
condition|)
block|{
specifier|final
name|String
name|prettyJson
decl_stmt|;
if|if
condition|(
name|multiFile
condition|)
block|{
name|JSONArray
name|jsonArray
init|=
operator|new
name|JSONArray
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|prettyJson
operator|=
name|jsonArray
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|JSONObject
name|jsonObject
init|=
operator|new
name|JSONObject
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|prettyJson
operator|=
name|jsonObject
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|prettyJson
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeSchema
parameter_list|(
name|JSONStringer
name|writer
parameter_list|,
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
parameter_list|)
throws|throws
name|JSONException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|OrcProto
operator|.
name|Type
name|type
range|:
name|types
control|)
block|{
name|writer
operator|.
name|object
argument_list|()
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"columnId"
argument_list|)
operator|.
name|value
argument_list|(
name|i
operator|++
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"columnType"
argument_list|)
operator|.
name|value
argument_list|(
name|type
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|getFieldNamesCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"childColumnNames"
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|type
operator|.
name|getFieldNamesList
argument_list|()
control|)
block|{
name|writer
operator|.
name|value
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"childColumnIds"
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|Integer
name|colId
range|:
name|type
operator|.
name|getSubtypesList
argument_list|()
control|)
block|{
name|writer
operator|.
name|value
argument_list|(
name|colId
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|hasPrecision
argument_list|()
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"precision"
argument_list|)
operator|.
name|value
argument_list|(
name|type
operator|.
name|getPrecision
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|hasScale
argument_list|()
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"scale"
argument_list|)
operator|.
name|value
argument_list|(
name|type
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|hasMaximumLength
argument_list|()
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"maxLength"
argument_list|)
operator|.
name|value
argument_list|(
name|type
operator|.
name|getMaximumLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeStripeInformation
parameter_list|(
name|JSONWriter
name|writer
parameter_list|,
name|StripeInformation
name|stripe
parameter_list|)
throws|throws
name|JSONException
block|{
name|writer
operator|.
name|object
argument_list|()
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"offset"
argument_list|)
operator|.
name|value
argument_list|(
name|stripe
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"indexLength"
argument_list|)
operator|.
name|value
argument_list|(
name|stripe
operator|.
name|getIndexLength
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"dataLength"
argument_list|)
operator|.
name|value
argument_list|(
name|stripe
operator|.
name|getDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"footerLength"
argument_list|)
operator|.
name|value
argument_list|(
name|stripe
operator|.
name|getFooterLength
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"rowCount"
argument_list|)
operator|.
name|value
argument_list|(
name|stripe
operator|.
name|getNumberOfRows
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|writeColumnStatistics
parameter_list|(
name|JSONWriter
name|writer
parameter_list|,
name|ColumnStatistics
name|cs
parameter_list|)
throws|throws
name|JSONException
block|{
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"count"
argument_list|)
operator|.
name|value
argument_list|(
name|cs
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"hasNull"
argument_list|)
operator|.
name|value
argument_list|(
name|cs
operator|.
name|hasNull
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cs
operator|instanceof
name|BinaryColumnStatistics
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"totalLength"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|BinaryColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"type"
argument_list|)
operator|.
name|value
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|BINARY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cs
operator|instanceof
name|BooleanColumnStatistics
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"trueCount"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|BooleanColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getTrueCount
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"falseCount"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|BooleanColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getFalseCount
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"type"
argument_list|)
operator|.
name|value
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cs
operator|instanceof
name|IntegerColumnStatistics
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"min"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"max"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|isSumDefined
argument_list|()
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"sum"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|key
argument_list|(
literal|"type"
argument_list|)
operator|.
name|value
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|LONG
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cs
operator|instanceof
name|DoubleColumnStatistics
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"min"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|DoubleColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"max"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|DoubleColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"sum"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|DoubleColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"type"
argument_list|)
operator|.
name|value
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cs
operator|instanceof
name|StringColumnStatistics
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"min"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"max"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"totalLength"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"type"
argument_list|)
operator|.
name|value
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cs
operator|instanceof
name|DateColumnStatistics
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|DateColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getMaximum
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"min"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|DateColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"max"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|DateColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|key
argument_list|(
literal|"type"
argument_list|)
operator|.
name|value
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|DATE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cs
operator|instanceof
name|TimestampColumnStatistics
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|TimestampColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getMaximum
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"min"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|TimestampColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"max"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|TimestampColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|key
argument_list|(
literal|"type"
argument_list|)
operator|.
name|value
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cs
operator|instanceof
name|DecimalColumnStatistics
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|DecimalColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getMaximum
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"min"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|DecimalColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"max"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|DecimalColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"sum"
argument_list|)
operator|.
name|value
argument_list|(
operator|(
operator|(
name|DecimalColumnStatistics
operator|)
name|cs
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|key
argument_list|(
literal|"type"
argument_list|)
operator|.
name|value
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|writeBloomFilterIndexes
parameter_list|(
name|JSONWriter
name|writer
parameter_list|,
name|int
name|col
parameter_list|,
name|OrcProto
operator|.
name|BloomFilterIndex
index|[]
name|bloomFilterIndex
parameter_list|)
throws|throws
name|JSONException
block|{
name|BloomFilterIO
name|stripeLevelBF
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bloomFilterIndex
operator|!=
literal|null
operator|&&
name|bloomFilterIndex
index|[
name|col
index|]
operator|!=
literal|null
condition|)
block|{
name|int
name|entryIx
init|=
literal|0
decl_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"bloomFilterIndexes"
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|OrcProto
operator|.
name|BloomFilter
name|bf
range|:
name|bloomFilterIndex
index|[
name|col
index|]
operator|.
name|getBloomFilterList
argument_list|()
control|)
block|{
name|writer
operator|.
name|object
argument_list|()
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"entryId"
argument_list|)
operator|.
name|value
argument_list|(
name|entryIx
operator|++
argument_list|)
expr_stmt|;
name|BloomFilterIO
name|toMerge
init|=
operator|new
name|BloomFilterIO
argument_list|(
name|bf
argument_list|)
decl_stmt|;
name|writeBloomFilterStats
argument_list|(
name|writer
argument_list|,
name|toMerge
argument_list|)
expr_stmt|;
if|if
condition|(
name|stripeLevelBF
operator|==
literal|null
condition|)
block|{
name|stripeLevelBF
operator|=
name|toMerge
expr_stmt|;
block|}
else|else
block|{
name|stripeLevelBF
operator|.
name|merge
argument_list|(
name|toMerge
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|stripeLevelBF
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|key
argument_list|(
literal|"stripeLevelBloomFilter"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|object
argument_list|()
expr_stmt|;
name|writeBloomFilterStats
argument_list|(
name|writer
argument_list|,
name|stripeLevelBF
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeBloomFilterStats
parameter_list|(
name|JSONWriter
name|writer
parameter_list|,
name|BloomFilterIO
name|bf
parameter_list|)
throws|throws
name|JSONException
block|{
name|int
name|bitCount
init|=
name|bf
operator|.
name|getBitSize
argument_list|()
decl_stmt|;
name|int
name|popCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|l
range|:
name|bf
operator|.
name|getBitSet
argument_list|()
control|)
block|{
name|popCount
operator|+=
name|Long
operator|.
name|bitCount
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
name|int
name|k
init|=
name|bf
operator|.
name|getNumHashFunctions
argument_list|()
decl_stmt|;
name|float
name|loadFactor
init|=
operator|(
name|float
operator|)
name|popCount
operator|/
operator|(
name|float
operator|)
name|bitCount
decl_stmt|;
name|float
name|expectedFpp
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|pow
argument_list|(
name|loadFactor
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"numHashFunctions"
argument_list|)
operator|.
name|value
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"bitCount"
argument_list|)
operator|.
name|value
argument_list|(
name|bitCount
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"popCount"
argument_list|)
operator|.
name|value
argument_list|(
name|popCount
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"loadFactor"
argument_list|)
operator|.
name|value
argument_list|(
name|loadFactor
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"expectedFpp"
argument_list|)
operator|.
name|value
argument_list|(
name|expectedFpp
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|writeRowGroupIndexes
parameter_list|(
name|JSONWriter
name|writer
parameter_list|,
name|int
name|col
parameter_list|,
name|OrcProto
operator|.
name|RowIndex
index|[]
name|rowGroupIndex
parameter_list|)
throws|throws
name|JSONException
block|{
name|OrcProto
operator|.
name|RowIndex
name|index
decl_stmt|;
if|if
condition|(
name|rowGroupIndex
operator|==
literal|null
operator|||
operator|(
name|col
operator|>=
name|rowGroupIndex
operator|.
name|length
operator|)
operator|||
operator|(
operator|(
name|index
operator|=
name|rowGroupIndex
index|[
name|col
index|]
operator|)
operator|==
literal|null
operator|)
condition|)
block|{
return|return;
block|}
name|writer
operator|.
name|key
argument_list|(
literal|"rowGroupIndexes"
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|entryIx
init|=
literal|0
init|;
name|entryIx
operator|<
name|index
operator|.
name|getEntryCount
argument_list|()
condition|;
operator|++
name|entryIx
control|)
block|{
name|writer
operator|.
name|object
argument_list|()
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"entryId"
argument_list|)
operator|.
name|value
argument_list|(
name|entryIx
argument_list|)
expr_stmt|;
name|OrcProto
operator|.
name|RowIndexEntry
name|entry
init|=
name|index
operator|.
name|getEntry
argument_list|(
name|entryIx
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|OrcProto
operator|.
name|ColumnStatistics
name|colStats
init|=
name|entry
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|writeColumnStatistics
argument_list|(
name|writer
argument_list|,
name|ColumnStatisticsImpl
operator|.
name|deserialize
argument_list|(
name|colStats
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|key
argument_list|(
literal|"positions"
argument_list|)
operator|.
name|array
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|posIx
init|=
literal|0
init|;
name|posIx
operator|<
name|entry
operator|.
name|getPositionsCount
argument_list|()
condition|;
operator|++
name|posIx
control|)
block|{
name|writer
operator|.
name|value
argument_list|(
name|entry
operator|.
name|getPositions
argument_list|(
name|posIx
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|writer
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

