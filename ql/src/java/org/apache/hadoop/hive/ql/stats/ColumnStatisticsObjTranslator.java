begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BinaryColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BooleanColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Decimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|cache
operator|.
name|DateColumnStatsDataInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|cache
operator|.
name|DecimalColumnStatsDataInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|cache
operator|.
name|DoubleColumnStatsDataInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|cache
operator|.
name|LongColumnStatsDataInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|columnstats
operator|.
name|cache
operator|.
name|StringColumnStatsDataInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|BinaryObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|DateObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|DoubleObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|HiveDecimalObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_class
specifier|public
class|class
name|ColumnStatisticsObjTranslator
block|{
specifier|public
specifier|static
name|ColumnStatisticsObj
name|readHiveStruct
parameter_list|(
name|String
name|columnName
parameter_list|,
name|String
name|columnType
parameter_list|,
name|StructField
name|structField
parameter_list|,
name|Object
name|values
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Get the field objectInspector, fieldName and the field object.
name|ObjectInspector
name|foi
init|=
name|structField
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|Object
name|f
init|=
name|values
decl_stmt|;
name|String
name|fieldName
init|=
name|structField
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|statsObj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|statsObj
operator|.
name|setColName
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
name|statsObj
operator|.
name|setColType
argument_list|(
name|columnType
argument_list|)
expr_stmt|;
try|try
block|{
name|unpackStructObject
argument_list|(
name|foi
argument_list|,
name|f
argument_list|,
name|fieldName
argument_list|,
name|statsObj
argument_list|)
expr_stmt|;
return|return
name|statsObj
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"error calculating stats for column:"
operator|+
name|structField
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|unpackBooleanStats
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|,
name|Object
name|o
parameter_list|,
name|String
name|fName
parameter_list|,
name|ColumnStatisticsObj
name|statsObj
parameter_list|)
block|{
name|long
name|v
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"counttrues"
argument_list|)
condition|)
block|{
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|setNumTrues
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"countfalses"
argument_list|)
condition|)
block|{
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|setNumFalses
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"countnulls"
argument_list|)
condition|)
block|{
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|setNumNulls
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|static
class|class
name|UnsupportedDoubleException
extends|extends
name|Exception
block|{   }
specifier|private
specifier|static
name|void
name|unpackDoubleStats
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|,
name|Object
name|o
parameter_list|,
name|String
name|fName
parameter_list|,
name|ColumnStatisticsObj
name|statsObj
parameter_list|)
throws|throws
name|UnsupportedDoubleException
block|{
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"countnulls"
argument_list|)
condition|)
block|{
name|long
name|v
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|setNumNulls
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"numdistinctvalues"
argument_list|)
condition|)
block|{
name|long
name|v
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|setNumDVs
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"max"
argument_list|)
condition|)
block|{
name|double
name|d
init|=
operator|(
operator|(
name|DoubleObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|isInfinite
argument_list|(
name|d
argument_list|)
operator|||
name|Double
operator|.
name|isNaN
argument_list|(
name|d
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedDoubleException
argument_list|()
throw|;
block|}
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|setHighValue
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"min"
argument_list|)
condition|)
block|{
name|double
name|d
init|=
operator|(
operator|(
name|DoubleObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|isInfinite
argument_list|(
name|d
argument_list|)
operator|||
name|Double
operator|.
name|isNaN
argument_list|(
name|d
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedDoubleException
argument_list|()
throw|;
block|}
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|setLowValue
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"ndvbitvector"
argument_list|)
condition|)
block|{
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|(
operator|(
name|BinaryObjectInspector
operator|)
name|poi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|setBitVectors
argument_list|(
name|buf
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|unpackDecimalStats
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|,
name|Object
name|o
parameter_list|,
name|String
name|fName
parameter_list|,
name|ColumnStatisticsObj
name|statsObj
parameter_list|)
block|{
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"countnulls"
argument_list|)
condition|)
block|{
name|long
name|v
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|setNumNulls
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"numdistinctvalues"
argument_list|)
condition|)
block|{
name|long
name|v
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|setNumDVs
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"max"
argument_list|)
condition|)
block|{
name|HiveDecimal
name|d
init|=
operator|(
operator|(
name|HiveDecimalObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|setHighValue
argument_list|(
name|convertToThriftDecimal
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"min"
argument_list|)
condition|)
block|{
name|HiveDecimal
name|d
init|=
operator|(
operator|(
name|HiveDecimalObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|setLowValue
argument_list|(
name|convertToThriftDecimal
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"ndvbitvector"
argument_list|)
condition|)
block|{
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|(
operator|(
name|BinaryObjectInspector
operator|)
name|poi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|setBitVectors
argument_list|(
name|buf
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Decimal
name|convertToThriftDecimal
parameter_list|(
name|HiveDecimal
name|d
parameter_list|)
block|{
return|return
operator|new
name|Decimal
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|d
operator|.
name|unscaledValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|d
operator|.
name|scale
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|unpackLongStats
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|,
name|Object
name|o
parameter_list|,
name|String
name|fName
parameter_list|,
name|ColumnStatisticsObj
name|statsObj
parameter_list|)
block|{
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"countnulls"
argument_list|)
condition|)
block|{
name|long
name|v
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|setNumNulls
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"numdistinctvalues"
argument_list|)
condition|)
block|{
name|long
name|v
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|setNumDVs
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"max"
argument_list|)
condition|)
block|{
name|long
name|v
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|setHighValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"min"
argument_list|)
condition|)
block|{
name|long
name|v
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|setLowValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"ndvbitvector"
argument_list|)
condition|)
block|{
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|(
operator|(
name|BinaryObjectInspector
operator|)
name|poi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|setBitVectors
argument_list|(
name|buf
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|unpackStringStats
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|,
name|Object
name|o
parameter_list|,
name|String
name|fName
parameter_list|,
name|ColumnStatisticsObj
name|statsObj
parameter_list|)
block|{
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"countnulls"
argument_list|)
condition|)
block|{
name|long
name|v
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
operator|.
name|setNumNulls
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"numdistinctvalues"
argument_list|)
condition|)
block|{
name|long
name|v
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
operator|.
name|setNumDVs
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"avglength"
argument_list|)
condition|)
block|{
name|double
name|d
init|=
operator|(
operator|(
name|DoubleObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
operator|.
name|setAvgColLen
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"maxlength"
argument_list|)
condition|)
block|{
name|long
name|v
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
operator|.
name|setMaxColLen
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"ndvbitvector"
argument_list|)
condition|)
block|{
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|(
operator|(
name|BinaryObjectInspector
operator|)
name|poi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
operator|.
name|setBitVectors
argument_list|(
name|buf
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|unpackBinaryStats
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|,
name|Object
name|o
parameter_list|,
name|String
name|fName
parameter_list|,
name|ColumnStatisticsObj
name|statsObj
parameter_list|)
block|{
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"countnulls"
argument_list|)
condition|)
block|{
name|long
name|v
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|setNumNulls
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"avglength"
argument_list|)
condition|)
block|{
name|double
name|d
init|=
operator|(
operator|(
name|DoubleObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|setAvgColLen
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"maxlength"
argument_list|)
condition|)
block|{
name|long
name|v
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|setMaxColLen
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|unpackDateStats
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|,
name|Object
name|o
parameter_list|,
name|String
name|fName
parameter_list|,
name|ColumnStatisticsObj
name|statsObj
parameter_list|)
block|{
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"countnulls"
argument_list|)
condition|)
block|{
name|long
name|v
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
operator|.
name|setNumNulls
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"numdistinctvalues"
argument_list|)
condition|)
block|{
name|long
name|v
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
operator|.
name|setNumDVs
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"max"
argument_list|)
condition|)
block|{
name|DateWritable
name|v
init|=
operator|(
operator|(
name|DateObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
operator|.
name|setHighValue
argument_list|(
operator|new
name|Date
argument_list|(
name|v
operator|.
name|getDays
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"min"
argument_list|)
condition|)
block|{
name|DateWritable
name|v
init|=
operator|(
operator|(
name|DateObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
operator|.
name|setLowValue
argument_list|(
operator|new
name|Date
argument_list|(
name|v
operator|.
name|getDays
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fName
operator|.
name|equals
argument_list|(
literal|"ndvbitvector"
argument_list|)
condition|)
block|{
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|(
operator|(
name|BinaryObjectInspector
operator|)
name|poi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDateStats
argument_list|()
operator|.
name|setBitVectors
argument_list|(
name|buf
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|unpackPrimitiveObject
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|,
name|Object
name|o
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|ColumnStatisticsObj
name|statsObj
parameter_list|)
throws|throws
name|UnsupportedDoubleException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// First infer the type of object
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"columntype"
argument_list|)
condition|)
block|{
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
name|String
name|s
init|=
operator|(
operator|(
name|StringObjectInspector
operator|)
name|poi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|ColumnStatisticsData
name|statsData
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
name|LongColumnStatsDataInspector
name|longStats
init|=
operator|new
name|LongColumnStatsDataInspector
argument_list|()
decl_stmt|;
name|statsData
operator|.
name|setLongStats
argument_list|(
name|longStats
argument_list|)
expr_stmt|;
name|statsObj
operator|.
name|setStatsData
argument_list|(
name|statsData
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
name|DoubleColumnStatsDataInspector
name|doubleStats
init|=
operator|new
name|DoubleColumnStatsDataInspector
argument_list|()
decl_stmt|;
name|statsData
operator|.
name|setDoubleStats
argument_list|(
name|doubleStats
argument_list|)
expr_stmt|;
name|statsObj
operator|.
name|setStatsData
argument_list|(
name|statsData
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
name|StringColumnStatsDataInspector
name|stringStats
init|=
operator|new
name|StringColumnStatsDataInspector
argument_list|()
decl_stmt|;
name|statsData
operator|.
name|setStringStats
argument_list|(
name|stringStats
argument_list|)
expr_stmt|;
name|statsObj
operator|.
name|setStatsData
argument_list|(
name|statsData
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|BooleanColumnStatsData
name|booleanStats
init|=
operator|new
name|BooleanColumnStatsData
argument_list|()
decl_stmt|;
name|statsData
operator|.
name|setBooleanStats
argument_list|(
name|booleanStats
argument_list|)
expr_stmt|;
name|statsObj
operator|.
name|setStatsData
argument_list|(
name|statsData
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"binary"
argument_list|)
condition|)
block|{
name|BinaryColumnStatsData
name|binaryStats
init|=
operator|new
name|BinaryColumnStatsData
argument_list|()
decl_stmt|;
name|statsData
operator|.
name|setBinaryStats
argument_list|(
name|binaryStats
argument_list|)
expr_stmt|;
name|statsObj
operator|.
name|setStatsData
argument_list|(
name|statsData
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"decimal"
argument_list|)
condition|)
block|{
name|DecimalColumnStatsDataInspector
name|decimalStats
init|=
operator|new
name|DecimalColumnStatsDataInspector
argument_list|()
decl_stmt|;
name|statsData
operator|.
name|setDecimalStats
argument_list|(
name|decimalStats
argument_list|)
expr_stmt|;
name|statsObj
operator|.
name|setStatsData
argument_list|(
name|statsData
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"date"
argument_list|)
condition|)
block|{
name|DateColumnStatsDataInspector
name|dateStats
init|=
operator|new
name|DateColumnStatsDataInspector
argument_list|()
decl_stmt|;
name|statsData
operator|.
name|setDateStats
argument_list|(
name|dateStats
argument_list|)
expr_stmt|;
name|statsObj
operator|.
name|setStatsData
argument_list|(
name|statsData
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// invoke the right unpack method depending on data type of the column
if|if
condition|(
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|isSetBooleanStats
argument_list|()
condition|)
block|{
name|unpackBooleanStats
argument_list|(
name|oi
argument_list|,
name|o
argument_list|,
name|fieldName
argument_list|,
name|statsObj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|isSetLongStats
argument_list|()
condition|)
block|{
name|unpackLongStats
argument_list|(
name|oi
argument_list|,
name|o
argument_list|,
name|fieldName
argument_list|,
name|statsObj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|isSetDoubleStats
argument_list|()
condition|)
block|{
name|unpackDoubleStats
argument_list|(
name|oi
argument_list|,
name|o
argument_list|,
name|fieldName
argument_list|,
name|statsObj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|isSetStringStats
argument_list|()
condition|)
block|{
name|unpackStringStats
argument_list|(
name|oi
argument_list|,
name|o
argument_list|,
name|fieldName
argument_list|,
name|statsObj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|isSetBinaryStats
argument_list|()
condition|)
block|{
name|unpackBinaryStats
argument_list|(
name|oi
argument_list|,
name|o
argument_list|,
name|fieldName
argument_list|,
name|statsObj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|isSetDecimalStats
argument_list|()
condition|)
block|{
name|unpackDecimalStats
argument_list|(
name|oi
argument_list|,
name|o
argument_list|,
name|fieldName
argument_list|,
name|statsObj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|isSetDateStats
argument_list|()
condition|)
block|{
name|unpackDateStats
argument_list|(
name|oi
argument_list|,
name|o
argument_list|,
name|fieldName
argument_list|,
name|statsObj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|unpackStructObject
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|,
name|Object
name|o
parameter_list|,
name|String
name|fName
parameter_list|,
name|ColumnStatisticsObj
name|cStatsObj
parameter_list|)
throws|throws
name|UnsupportedDoubleException
block|{
if|if
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|STRUCT
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid object datatype : "
operator|+
name|oi
operator|.
name|getCategory
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|soi
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|o
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// Get the field objectInspector, fieldName and the field object.
name|ObjectInspector
name|foi
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|Object
name|f
init|=
operator|(
name|list
operator|==
literal|null
condition|?
literal|null
else|:
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
decl_stmt|;
name|String
name|fieldName
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
if|if
condition|(
name|foi
operator|.
name|getCategory
argument_list|()
operator|==
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|unpackPrimitiveObject
argument_list|(
name|foi
argument_list|,
name|f
argument_list|,
name|fieldName
argument_list|,
name|cStatsObj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unpackStructObject
argument_list|(
name|foi
argument_list|,
name|f
argument_list|,
name|fieldName
argument_list|,
name|cStatsObj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

