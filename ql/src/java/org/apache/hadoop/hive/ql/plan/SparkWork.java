begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * This class encapsulates all the work objects that can be executed  * in a single Spark job. Currently it's basically a tree with MapWork at the  * leaves and and ReduceWork in all other nodes.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Spark"
argument_list|)
specifier|public
class|class
name|SparkWork
extends|extends
name|AbstractOperatorDesc
block|{
specifier|private
specifier|static
specifier|transient
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SparkWork
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|counter
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
name|MapWork
name|mapWork
decl_stmt|;
specifier|private
name|ReduceWork
name|redWork
decl_stmt|;
specifier|public
name|SparkWork
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
operator|+
literal|":"
operator|+
operator|(
operator|++
name|counter
operator|)
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"DagName"
argument_list|)
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|MapWork
name|getMapWork
parameter_list|()
block|{
return|return
name|mapWork
return|;
block|}
specifier|public
name|void
name|setMapWork
parameter_list|(
name|MapWork
name|mapWork
parameter_list|)
block|{
name|this
operator|.
name|mapWork
operator|=
name|mapWork
expr_stmt|;
block|}
specifier|public
name|void
name|setReduceWork
parameter_list|(
name|ReduceWork
name|redWork
parameter_list|)
block|{
name|this
operator|.
name|redWork
operator|=
name|redWork
expr_stmt|;
block|}
specifier|public
name|ReduceWork
name|getReduceWork
parameter_list|()
block|{
return|return
name|redWork
return|;
block|}
block|}
end_class

end_unit

