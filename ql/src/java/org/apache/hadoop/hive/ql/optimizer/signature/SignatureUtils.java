begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Enables to calculate the signature of an object.  *  * If the object has methods annotated with {@link Signature}, they will be used.  * If the object has no methods marked with the annotation;  * the object itself is used in the signature to prevent incorrect matches.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SignatureUtils
block|{
specifier|private
specifier|static
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|SignatureMapper
argument_list|>
name|mappers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ret
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|ret
operator|.
name|put
argument_list|(
literal|"__null"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SignatureMapper
name|mapper
init|=
name|getSigMapper
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|mapper
operator|.
name|write
argument_list|(
name|ret
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Prevent construction. */
specifier|private
name|SignatureUtils
parameter_list|()
block|{   }
specifier|static
class|class
name|SignatureMapper
block|{
specifier|private
name|List
argument_list|<
name|Method
argument_list|>
name|sigMethods
decl_stmt|;
specifier|private
name|String
name|classLabel
decl_stmt|;
name|SignatureMapper
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|o
parameter_list|)
block|{
name|Method
index|[]
name|f
init|=
name|o
operator|.
name|getMethods
argument_list|()
decl_stmt|;
name|sigMethods
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|f
control|)
block|{
if|if
condition|(
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|Signature
operator|.
name|class
argument_list|)
condition|)
block|{
name|sigMethods
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
name|classLabel
operator|=
name|o
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ret
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|sigMethods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// by supplying using "o" this enforces identity/equls matching
comment|// which will most probably make the signature very unique
name|ret
operator|.
name|put
argument_list|(
name|classLabel
argument_list|,
name|System
operator|.
name|identityHashCode
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|put
argument_list|(
name|classLabel
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|sigMethods
control|)
block|{
try|try
block|{
name|Object
name|res
init|=
name|method
operator|.
name|invoke
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error invoking signature method"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|SignatureMapper
name|getSigMapper
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|o
parameter_list|)
block|{
name|SignatureMapper
name|m
init|=
name|mappers
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|m
operator|=
operator|new
name|SignatureMapper
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|mappers
operator|.
name|put
argument_list|(
name|o
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
block|}
end_class

end_unit

