begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|dump
operator|.
name|events
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|EventMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONMessageEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|abstract
class|class
name|AbstractEventHandler
parameter_list|<
name|T
extends|extends
name|EventMessage
parameter_list|>
implements|implements
name|EventHandler
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractEventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MessageEncoder
name|jsonMessageEncoder
init|=
name|JSONMessageEncoder
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|NotificationEvent
name|event
decl_stmt|;
specifier|final
name|MessageDeserializer
name|deserializer
decl_stmt|;
specifier|final
name|String
name|eventMessageAsJSON
decl_stmt|;
specifier|final
name|T
name|eventMessage
decl_stmt|;
name|AbstractEventHandler
parameter_list|(
name|NotificationEvent
name|event
parameter_list|)
block|{
name|this
operator|.
name|event
operator|=
name|event
expr_stmt|;
try|try
block|{
name|deserializer
operator|=
name|MessageFactory
operator|.
name|getInstance
argument_list|(
name|event
operator|.
name|getMessageFormat
argument_list|()
argument_list|)
operator|.
name|getDeserializer
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"could not create appropriate messageFactory for format "
operator|+
name|event
operator|.
name|getMessageFormat
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|eventMessage
operator|=
name|eventMessage
argument_list|(
name|event
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|eventMessageAsJSON
operator|=
name|eventMessageAsJSON
argument_list|(
name|eventMessage
argument_list|)
expr_stmt|;
block|}
comment|/**    * This takes in the string representation of the message in the format as specified in rdbms backing metastore.    */
specifier|abstract
name|T
name|eventMessage
parameter_list|(
name|String
name|stringRepresentation
parameter_list|)
function_decl|;
specifier|private
name|String
name|eventMessageAsJSON
parameter_list|(
name|T
name|eventMessage
parameter_list|)
block|{
if|if
condition|(
name|eventMessage
operator|==
literal|null
condition|)
block|{
comment|// this will only happen in case DefaultHandler is invoked
return|return
literal|null
return|;
block|}
return|return
name|jsonMessageEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|eventMessage
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|fromEventId
parameter_list|()
block|{
return|return
name|event
operator|.
name|getEventId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|toEventId
parameter_list|()
block|{
return|return
name|event
operator|.
name|getEventId
argument_list|()
return|;
block|}
block|}
end_class

end_unit

