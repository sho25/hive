begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|dump
operator|.
name|events
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ReplChangeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|EventMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|JSONMessageEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveFatalException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|EximUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|CopyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|dump
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|abstract
class|class
name|AbstractEventHandler
parameter_list|<
name|T
extends|extends
name|EventMessage
parameter_list|>
implements|implements
name|EventHandler
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractEventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MessageEncoder
name|jsonMessageEncoder
init|=
name|JSONMessageEncoder
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|NotificationEvent
name|event
decl_stmt|;
specifier|final
name|MessageDeserializer
name|deserializer
decl_stmt|;
specifier|final
name|String
name|eventMessageAsJSON
decl_stmt|;
specifier|final
name|T
name|eventMessage
decl_stmt|;
name|AbstractEventHandler
parameter_list|(
name|NotificationEvent
name|event
parameter_list|)
block|{
name|this
operator|.
name|event
operator|=
name|event
expr_stmt|;
try|try
block|{
name|deserializer
operator|=
name|MessageFactory
operator|.
name|getInstance
argument_list|(
name|event
operator|.
name|getMessageFormat
argument_list|()
argument_list|)
operator|.
name|getDeserializer
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"could not create appropriate messageFactory for format "
operator|+
name|event
operator|.
name|getMessageFormat
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|eventMessage
operator|=
name|eventMessage
argument_list|(
name|event
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|eventMessageAsJSON
operator|=
name|eventMessageAsJSON
argument_list|(
name|eventMessage
argument_list|)
expr_stmt|;
block|}
comment|/**    * This takes in the string representation of the message in the format as specified in rdbms backing metastore.    */
specifier|abstract
name|T
name|eventMessage
parameter_list|(
name|String
name|stringRepresentation
parameter_list|)
function_decl|;
specifier|private
name|String
name|eventMessageAsJSON
parameter_list|(
name|T
name|eventMessage
parameter_list|)
block|{
if|if
condition|(
name|eventMessage
operator|==
literal|null
condition|)
block|{
comment|// this will only happen in case DefaultHandler is invoked
return|return
literal|null
return|;
block|}
return|return
name|jsonMessageEncoder
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|eventMessage
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|fromEventId
parameter_list|()
block|{
return|return
name|event
operator|.
name|getEventId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|toEventId
parameter_list|()
block|{
return|return
name|event
operator|.
name|getEventId
argument_list|()
return|;
block|}
specifier|protected
name|void
name|writeFileEntry
parameter_list|(
name|String
name|dbName
parameter_list|,
name|Table
name|table
parameter_list|,
name|String
name|file
parameter_list|,
name|BufferedWriter
name|fileListWriter
parameter_list|,
name|Context
name|withinContext
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|MetaException
throws|,
name|HiveFatalException
block|{
name|HiveConf
name|hiveConf
init|=
name|withinContext
operator|.
name|hiveConf
decl_stmt|;
name|String
name|distCpDoAsUser
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DISTCP_DOAS_USER
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Utils
operator|.
name|shouldDumpMetaDataOnly
argument_list|(
name|table
argument_list|,
name|withinContext
operator|.
name|hiveConf
argument_list|)
condition|)
block|{
name|Path
name|dataPath
init|=
operator|new
name|Path
argument_list|(
name|withinContext
operator|.
name|dumpRoot
operator|.
name|toString
argument_list|()
argument_list|,
name|EximUtil
operator|.
name|DATA_PATH_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
name|filePaths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|decodedURISplits
init|=
name|ReplChangeManager
operator|.
name|decodeFileUri
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|String
name|srcDataFile
init|=
name|decodedURISplits
index|[
literal|0
index|]
decl_stmt|;
name|Path
name|srcDataPath
init|=
operator|new
name|Path
argument_list|(
name|srcDataFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataPath
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
name|dataPath
operator|=
operator|new
name|Path
argument_list|(
name|srcDataPath
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|,
name|srcDataPath
operator|.
name|toUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|dataPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|eventTblPath
init|=
name|event
operator|.
name|getEventId
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|dbName
operator|+
name|File
operator|.
name|separator
operator|+
name|table
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|srcDataFileRelativePath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|srcDataFile
operator|.
name|contains
argument_list|(
name|table
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|srcDataFileRelativePath
operator|=
name|srcDataFile
operator|.
name|substring
argument_list|(
name|table
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|decodedURISplits
index|[
literal|3
index|]
operator|==
literal|null
condition|)
block|{
name|srcDataFileRelativePath
operator|=
name|srcDataPath
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|srcDataFileRelativePath
operator|=
name|srcDataFileRelativePath
operator|+
name|File
operator|.
name|separator
operator|+
name|srcDataPath
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|dataPath
argument_list|,
name|eventTblPath
operator|+
name|File
operator|.
name|separator
operator|+
name|srcDataFileRelativePath
argument_list|)
decl_stmt|;
name|String
name|encodedTargetPath
init|=
name|ReplChangeManager
operator|.
name|encodeFileUri
argument_list|(
name|targetPath
operator|.
name|toString
argument_list|()
argument_list|,
name|decodedURISplits
index|[
literal|1
index|]
argument_list|,
name|decodedURISplits
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
name|ReplChangeManager
operator|.
name|FileInfo
name|f
init|=
name|ReplChangeManager
operator|.
name|getFileInfo
argument_list|(
operator|new
name|Path
argument_list|(
name|decodedURISplits
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|decodedURISplits
index|[
literal|1
index|]
argument_list|,
name|decodedURISplits
index|[
literal|2
index|]
argument_list|,
name|decodedURISplits
index|[
literal|3
index|]
argument_list|,
name|hiveConf
argument_list|)
decl_stmt|;
name|filePaths
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|FileSystem
name|dstFs
init|=
name|targetPath
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|Path
name|finalTargetPath
init|=
name|targetPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|decodedURISplits
index|[
literal|3
index|]
operator|!=
literal|null
condition|)
block|{
name|finalTargetPath
operator|=
name|finalTargetPath
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
operator|new
name|CopyUtils
argument_list|(
name|distCpDoAsUser
argument_list|,
name|hiveConf
argument_list|,
name|dstFs
argument_list|)
operator|.
name|copyAndVerify
argument_list|(
name|finalTargetPath
argument_list|,
name|filePaths
argument_list|,
name|srcDataPath
argument_list|)
expr_stmt|;
name|fileListWriter
operator|.
name|write
argument_list|(
name|encodedTargetPath
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

