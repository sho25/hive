begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|GroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|LimitOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDescUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LimitDesc
import|;
end_import

begin_comment
comment|/**  * Make RS calculate top-K selection for limit clause.  * It's only works with RS for limit operation which means between RS and LITMIT,  * there should not be other operators which may change number of rows like FilterOperator.  * see {@link Operator#acceptLimitPushdown}  *  * If RS is only for limiting rows, RSHash counts row with same key separately.  * But if RS is for GBY, RSHash should forward all the rows with the same key.  *  * Legend : A(a) --> key A, value a, row A(a)  *  * If each RS in mapper tasks is forwarded rows like this  *  * MAP1(RS) : 40(a)-10(b)-30(c)-10(d)-70(e)-80(f)  * MAP2(RS) : 90(g)-80(h)-60(i)-40(j)-30(k)-20(l)  * MAP3(RS) : 40(m)-50(n)-30(o)-30(p)-60(q)-70(r)  *  * OBY or GBY makes result like this,  *  * REDUCER : 10(b,d)-20(l)-30(c,k,o,p)-40(a,j,m)-50(n)-60(i,q)-70(e,r)-80(f,h)-90(g)  * LIMIT 3 for GBY: 10(b,d)-20(l)-30(c,k,o,p)  * LIMIT 3 for OBY: 10(b,d)-20(l)  *  * with the optimization, the amount of shuffling can be reduced, making identical result  *  * For GBY,  *  * MAP1 : 40(a)-10(b)-30(c)-10(d)  * MAP2 : 40(j)-30(k)-20(l)  * MAP3 : 40(m)-50(n)-30(o)-30(p)  *  * REDUCER : 10(b,d)-20(l)-30(c,k,o,p)-40(a,j,m)-50(n)  * LIMIT 3 : 10(b,d)-20(l)-30(c,k,o,p)  *  * For OBY,  *  * MAP1 : 10(b)-30(c)-10(d)  * MAP2 : 40(j)-30(k)-20(l)  * MAP3 : 40(m)-50(n)-30(o)  *  * REDUCER : 10(b,d)-20(l)-30(c,k,o)-40(j,m)-50(n)  * LIMIT 3 : 10(b,d)-20(l)  */
end_comment

begin_class
specifier|public
class|class
name|LimitPushdownOptimizer
extends|extends
name|Transform
block|{
annotation|@
name|Override
specifier|public
name|ParseContext
name|transform
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
operator|+
literal|".*"
operator|+
name|LimitOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
operator|new
name|TopNReducer
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R2"
argument_list|,
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
operator|+
literal|".*"
operator|+
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
operator|new
name|TopNPropagator
argument_list|()
argument_list|)
expr_stmt|;
name|LimitPushdownContext
name|context
init|=
operator|new
name|LimitPushdownContext
argument_list|(
name|pctx
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
literal|null
argument_list|,
name|opRules
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|(
name|pctx
operator|.
name|getTopOps
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|pctx
return|;
block|}
specifier|private
specifier|static
class|class
name|TopNReducer
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ReduceSinkOperator
name|rs
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|operator
init|=
operator|(
name|Operator
argument_list|<
name|?
argument_list|>
operator|)
name|stack
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|operator
operator|.
name|getNumChild
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
literal|false
return|;
comment|// multi-GBY single-RS (TODO)
block|}
if|if
condition|(
name|operator
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
name|rs
operator|=
operator|(
name|ReduceSinkOperator
operator|)
name|operator
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|operator
operator|.
name|acceptLimitPushdown
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|OperatorUtils
operator|.
name|findOperators
argument_list|(
name|rs
argument_list|,
name|GroupByOperator
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// Not safe to continue for RS-GBY-GBY-LIM kind of pipelines. See HIVE-10607 for more.
return|return
literal|false
return|;
block|}
name|LimitOperator
name|limit
init|=
operator|(
name|LimitOperator
operator|)
name|nd
decl_stmt|;
name|LimitDesc
name|limitDesc
init|=
name|limit
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Integer
name|offset
init|=
name|limitDesc
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|rs
operator|.
name|getConf
argument_list|()
operator|.
name|setTopN
argument_list|(
name|limitDesc
operator|.
name|getLimit
argument_list|()
operator|+
operator|(
operator|(
name|offset
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|offset
operator|)
argument_list|)
expr_stmt|;
name|rs
operator|.
name|getConf
argument_list|()
operator|.
name|setTopNMemoryUsage
argument_list|(
operator|(
operator|(
name|LimitPushdownContext
operator|)
name|procCtx
operator|)
operator|.
name|threshold
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|getNumChild
argument_list|()
operator|==
literal|1
operator|&&
name|rs
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|GroupByOperator
condition|)
block|{
name|rs
operator|.
name|getConf
argument_list|()
operator|.
name|setMapGroupBy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TopNPropagator
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ReduceSinkOperator
name|cRS
init|=
operator|(
name|ReduceSinkOperator
operator|)
name|nd
decl_stmt|;
if|if
condition|(
name|cRS
operator|.
name|getConf
argument_list|()
operator|.
name|getTopN
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
comment|// No limit, nothing to propagate, we just bail out
return|return
literal|false
return|;
block|}
name|ReduceSinkOperator
name|pRS
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|operator
init|=
operator|(
name|Operator
argument_list|<
name|?
argument_list|>
operator|)
name|stack
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|operator
operator|.
name|getNumChild
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
literal|false
return|;
comment|// multi-GBY single-RS (TODO)
block|}
if|if
condition|(
name|operator
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
name|pRS
operator|=
operator|(
name|ReduceSinkOperator
operator|)
name|operator
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|operator
operator|.
name|acceptLimitPushdown
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|pRS
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|OperatorUtils
operator|.
name|findOperators
argument_list|(
name|pRS
argument_list|,
name|GroupByOperator
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// Not safe to continue for RS-GBY-GBY-LIM kind of pipelines. See HIVE-10607 for more.
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|checkKeys
argument_list|(
name|cRS
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
argument_list|,
name|pRS
operator|.
name|getConf
argument_list|()
operator|.
name|getKeyCols
argument_list|()
argument_list|,
name|cRS
argument_list|,
name|pRS
argument_list|)
condition|)
block|{
comment|// Keys are not the same; bail out
return|return
literal|false
return|;
block|}
comment|// Copy order
name|StringBuilder
name|order
init|=
operator|new
name|StringBuilder
argument_list|(
name|cRS
operator|.
name|getConf
argument_list|()
operator|.
name|getOrder
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|orderNull
init|=
operator|new
name|StringBuilder
argument_list|(
name|cRS
operator|.
name|getConf
argument_list|()
operator|.
name|getNullOrder
argument_list|()
argument_list|)
decl_stmt|;
name|order
operator|.
name|append
argument_list|(
name|pRS
operator|.
name|getConf
argument_list|()
operator|.
name|getOrder
argument_list|()
operator|.
name|substring
argument_list|(
name|order
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|orderNull
operator|.
name|append
argument_list|(
name|pRS
operator|.
name|getConf
argument_list|()
operator|.
name|getNullOrder
argument_list|()
operator|.
name|substring
argument_list|(
name|orderNull
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pRS
operator|.
name|getConf
argument_list|()
operator|.
name|setOrder
argument_list|(
name|order
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pRS
operator|.
name|getConf
argument_list|()
operator|.
name|setNullOrder
argument_list|(
name|orderNull
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Copy limit
name|pRS
operator|.
name|getConf
argument_list|()
operator|.
name|setTopN
argument_list|(
name|cRS
operator|.
name|getConf
argument_list|()
operator|.
name|getTopN
argument_list|()
argument_list|)
expr_stmt|;
name|pRS
operator|.
name|getConf
argument_list|()
operator|.
name|setTopNMemoryUsage
argument_list|(
name|cRS
operator|.
name|getConf
argument_list|()
operator|.
name|getTopNMemoryUsage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pRS
operator|.
name|getNumChild
argument_list|()
operator|==
literal|1
operator|&&
name|pRS
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|GroupByOperator
condition|)
block|{
name|pRS
operator|.
name|getConf
argument_list|()
operator|.
name|setMapGroupBy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|checkKeys
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|cKeys
parameter_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|pKeys
parameter_list|,
name|ReduceSinkOperator
name|cRS
parameter_list|,
name|ReduceSinkOperator
name|pRS
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|cKeys
operator|==
literal|null
operator|||
name|cKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|pKeys
operator|!=
literal|null
operator|&&
operator|!
name|pKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|pKeys
operator|==
literal|null
operator|||
name|pKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|cKeys
operator|.
name|size
argument_list|()
operator|>
name|pKeys
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cKeys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeDesc
name|expr
init|=
name|ExprNodeDescUtils
operator|.
name|backtrack
argument_list|(
name|cKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|cRS
argument_list|,
name|pRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|expr
operator|==
literal|null
condition|)
block|{
comment|// cKey is not present in parent
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|expr
operator|.
name|isSame
argument_list|(
name|pKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
class|class
name|LimitPushdownContext
implements|implements
name|NodeProcessorCtx
block|{
specifier|private
specifier|final
name|float
name|threshold
decl_stmt|;
specifier|public
name|LimitPushdownContext
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|SemanticException
block|{
name|threshold
operator|=
name|conf
operator|.
name|getFloatVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVELIMITPUSHDOWNMEMORYUSAGE
argument_list|)
expr_stmt|;
if|if
condition|(
name|threshold
operator|<=
literal|0
operator|||
name|threshold
operator|>=
literal|1
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Invalid memory usage value "
operator|+
name|threshold
operator|+
literal|" for "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVELIMITPUSHDOWNMEMORYUSAGE
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

