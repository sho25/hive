begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|druid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Ord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelFieldCollation
operator|.
name|Direction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|AggregateCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Litmus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveDateGranularity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Interval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * Relational expression representing a scan of a Druid data set.  *  * TODO: to be removed when Calcite is upgraded to 1.9  */
end_comment

begin_class
specifier|public
class|class
name|DruidQuery
extends|extends
name|TableScan
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DruidQuery
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|QuerySpec
name|querySpec
decl_stmt|;
specifier|final
name|DruidTable
name|druidTable
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|RelNode
argument_list|>
name|rels
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|VALID_SIG
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"sf?p?a?l?"
argument_list|)
decl_stmt|;
comment|/**    * Creates a DruidQuery.    *    * @param cluster        Cluster    * @param traitSet       Traits    * @param table          Table    * @param druidTable     Druid table    * @param interval       Interval for the query    * @param rels           Internal relational expressions    */
specifier|private
name|DruidQuery
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|DruidTable
name|druidTable
parameter_list|,
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|rels
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|this
operator|.
name|druidTable
operator|=
name|druidTable
expr_stmt|;
name|this
operator|.
name|intervals
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|intervals
argument_list|)
expr_stmt|;
name|this
operator|.
name|rels
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|rels
argument_list|)
expr_stmt|;
assert|assert
name|isValid
argument_list|(
name|Litmus
operator|.
name|THROW
argument_list|)
assert|;
block|}
comment|/** Returns a string describing the operations inside this query.    *    *<p>For example, "sfpal" means {@link TableScan} (s)    * followed by {@link Filter} (f)    * followed by {@link Project} (p)    * followed by {@link Aggregate} (a)    * followed by {@link Sort} (l).    *    * @see #isValidSignature(String)    */
name|String
name|signature
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RelNode
name|rel
range|:
name|rels
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|rel
operator|instanceof
name|TableScan
condition|?
literal|'s'
else|:
name|rel
operator|instanceof
name|Project
condition|?
literal|'p'
else|:
name|rel
operator|instanceof
name|Filter
condition|?
literal|'f'
else|:
name|rel
operator|instanceof
name|Aggregate
condition|?
literal|'a'
else|:
name|rel
operator|instanceof
name|Sort
condition|?
literal|'l'
else|:
literal|'!'
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|Litmus
name|litmus
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|isValid
argument_list|(
name|litmus
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|signature
init|=
name|signature
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isValidSignature
argument_list|(
name|signature
argument_list|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"invalid signature"
argument_list|)
return|;
block|}
if|if
condition|(
name|rels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"must have at least one rel"
argument_list|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RelNode
name|r
init|=
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|r
operator|instanceof
name|TableScan
operator|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"first rel must be TableScan"
argument_list|)
return|;
block|}
if|if
condition|(
name|r
operator|.
name|getTable
argument_list|()
operator|!=
name|table
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"first rel must be based on table table"
argument_list|)
return|;
block|}
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
init|=
name|r
operator|.
name|getInputs
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputs
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|inputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
name|rels
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"each rel must have a single input"
argument_list|)
return|;
block|}
if|if
condition|(
name|r
operator|instanceof
name|Aggregate
condition|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
operator|(
name|Aggregate
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|aggregate
operator|.
name|getGroupSets
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|aggregate
operator|.
name|indicator
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"no grouping sets"
argument_list|)
return|;
block|}
for|for
control|(
name|AggregateCall
name|call
range|:
name|aggregate
operator|.
name|getAggCallList
argument_list|()
control|)
block|{
if|if
condition|(
name|call
operator|.
name|filterArg
operator|>=
literal|0
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"no filtered aggregate functions"
argument_list|)
return|;
block|}
block|}
block|}
if|if
condition|(
name|r
operator|instanceof
name|Filter
condition|)
block|{
specifier|final
name|Filter
name|filter
init|=
operator|(
name|Filter
operator|)
name|r
decl_stmt|;
if|if
condition|(
operator|!
name|isValidFilter
argument_list|(
name|filter
operator|.
name|getCondition
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"invalid filter"
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|r
operator|instanceof
name|Sort
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
operator|(
name|Sort
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|sort
operator|.
name|offset
operator|!=
literal|null
operator|&&
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|offset
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
name|litmus
operator|.
name|fail
argument_list|(
literal|"offset not supported"
argument_list|)
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
name|boolean
name|isValidFilter
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|INPUT_REF
case|:
case|case
name|LITERAL
case|:
return|return
literal|true
return|;
case|case
name|AND
case|:
case|case
name|OR
case|:
case|case
name|NOT
case|:
case|case
name|EQUALS
case|:
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|BETWEEN
case|:
case|case
name|IN
case|:
case|case
name|CAST
case|:
return|return
name|areValidFilters
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|e
operator|)
operator|.
name|getOperands
argument_list|()
argument_list|)
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|boolean
name|areValidFilters
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|es
parameter_list|)
block|{
for|for
control|(
name|RexNode
name|e
range|:
name|es
control|)
block|{
if|if
condition|(
operator|!
name|isValidFilter
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/** Returns whether a signature represents an sequence of relational operators    * that can be translated into a valid Druid query. */
specifier|static
name|boolean
name|isValidSignature
parameter_list|(
name|String
name|signature
parameter_list|)
block|{
return|return
name|VALID_SIG
operator|.
name|matcher
argument_list|(
name|signature
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
comment|/** Creates a DruidQuery. */
specifier|public
specifier|static
name|DruidQuery
name|create
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|DruidTable
name|druidTable
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|rels
parameter_list|)
block|{
return|return
operator|new
name|DruidQuery
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|table
argument_list|,
name|druidTable
argument_list|,
name|druidTable
operator|.
name|intervals
argument_list|,
name|rels
argument_list|)
return|;
block|}
comment|/** Creates a DruidQuery. */
specifier|private
specifier|static
name|DruidQuery
name|create
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelOptTable
name|table
parameter_list|,
name|DruidTable
name|druidTable
parameter_list|,
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|rels
parameter_list|)
block|{
return|return
operator|new
name|DruidQuery
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|table
argument_list|,
name|druidTable
argument_list|,
name|intervals
argument_list|,
name|rels
argument_list|)
return|;
block|}
comment|/** Extends a DruidQuery. */
specifier|public
specifier|static
name|DruidQuery
name|extendQuery
parameter_list|(
name|DruidQuery
name|query
parameter_list|,
name|RelNode
name|r
parameter_list|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RelNode
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
return|return
name|DruidQuery
operator|.
name|create
argument_list|(
name|query
operator|.
name|getCluster
argument_list|()
argument_list|,
name|query
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|query
operator|.
name|getTable
argument_list|()
argument_list|,
name|query
operator|.
name|druidTable
argument_list|,
name|query
operator|.
name|intervals
argument_list|,
name|builder
operator|.
name|addAll
argument_list|(
name|query
operator|.
name|rels
argument_list|)
operator|.
name|add
argument_list|(
name|r
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/** Extends a DruidQuery. */
specifier|public
specifier|static
name|DruidQuery
name|extendQuery
parameter_list|(
name|DruidQuery
name|query
parameter_list|,
name|List
argument_list|<
name|Interval
argument_list|>
name|intervals
parameter_list|)
block|{
return|return
name|DruidQuery
operator|.
name|create
argument_list|(
name|query
operator|.
name|getCluster
argument_list|()
argument_list|,
name|query
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|query
operator|.
name|getTable
argument_list|()
argument_list|,
name|query
operator|.
name|druidTable
argument_list|,
name|intervals
argument_list|,
name|query
operator|.
name|rels
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|inputs
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelDataType
name|deriveRowType
parameter_list|()
block|{
return|return
name|getCluster
argument_list|()
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createStructType
argument_list|(
name|Pair
operator|.
name|right
argument_list|(
name|Util
operator|.
name|last
argument_list|(
name|rels
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
argument_list|)
argument_list|,
name|getQuerySpec
argument_list|()
operator|.
name|fieldNames
argument_list|)
return|;
block|}
specifier|public
name|TableScan
name|getTableScan
parameter_list|()
block|{
return|return
operator|(
name|TableScan
operator|)
name|rels
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|RelNode
name|getTopNode
parameter_list|()
block|{
return|return
name|Util
operator|.
name|last
argument_list|(
name|rels
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptTable
name|getTable
parameter_list|()
block|{
return|return
name|table
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelWriter
name|explainTerms
parameter_list|(
name|RelWriter
name|pw
parameter_list|)
block|{
for|for
control|(
name|RelNode
name|rel
range|:
name|rels
control|)
block|{
if|if
condition|(
name|rel
operator|instanceof
name|TableScan
condition|)
block|{
name|TableScan
name|tableScan
init|=
operator|(
name|TableScan
operator|)
name|rel
decl_stmt|;
name|pw
operator|.
name|item
argument_list|(
literal|"table"
argument_list|,
name|tableScan
operator|.
name|getTable
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|item
argument_list|(
literal|"intervals"
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|Filter
condition|)
block|{
name|pw
operator|.
name|item
argument_list|(
literal|"filter"
argument_list|,
operator|(
operator|(
name|Filter
operator|)
name|rel
operator|)
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|Project
condition|)
block|{
name|pw
operator|.
name|item
argument_list|(
literal|"projects"
argument_list|,
operator|(
operator|(
name|Project
operator|)
name|rel
operator|)
operator|.
name|getProjects
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|Aggregate
condition|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
operator|(
name|Aggregate
operator|)
name|rel
decl_stmt|;
name|pw
operator|.
name|item
argument_list|(
literal|"groups"
argument_list|,
name|aggregate
operator|.
name|getGroupSet
argument_list|()
argument_list|)
operator|.
name|item
argument_list|(
literal|"aggs"
argument_list|,
name|aggregate
operator|.
name|getAggCallList
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rel
operator|instanceof
name|Sort
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
operator|(
name|Sort
operator|)
name|rel
decl_stmt|;
for|for
control|(
name|Ord
argument_list|<
name|RelFieldCollation
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|sort
operator|.
name|collation
operator|.
name|getFieldCollations
argument_list|()
argument_list|)
control|)
block|{
name|pw
operator|.
name|item
argument_list|(
literal|"sort"
operator|+
name|ord
operator|.
name|i
argument_list|,
name|ord
operator|.
name|e
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Ord
argument_list|<
name|RelFieldCollation
argument_list|>
name|ord
range|:
name|Ord
operator|.
name|zip
argument_list|(
name|sort
operator|.
name|collation
operator|.
name|getFieldCollations
argument_list|()
argument_list|)
control|)
block|{
name|pw
operator|.
name|item
argument_list|(
literal|"dir"
operator|+
name|ord
operator|.
name|i
argument_list|,
name|ord
operator|.
name|e
operator|.
name|shortString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|itemIf
argument_list|(
literal|"fetch"
argument_list|,
name|sort
operator|.
name|fetch
argument_list|,
name|sort
operator|.
name|fetch
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"rel type not supported in Druid query "
operator|+
name|rel
argument_list|)
throw|;
block|}
block|}
return|return
name|pw
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
comment|// Heuristic: we assume pushing query to Druid reduces cost by 90%
return|return
name|Util
operator|.
name|last
argument_list|(
name|rels
argument_list|)
operator|.
name|computeSelfCost
argument_list|(
name|planner
argument_list|,
name|mq
argument_list|)
operator|.
name|multiplyBy
argument_list|(
literal|.1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|project
parameter_list|(
name|ImmutableBitSet
name|fieldsUsed
parameter_list|,
name|Set
argument_list|<
name|RelDataTypeField
argument_list|>
name|extraFields
parameter_list|,
name|RelBuilder
name|relBuilder
parameter_list|)
block|{
specifier|final
name|int
name|fieldCount
init|=
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldsUsed
operator|.
name|equals
argument_list|(
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|fieldCount
argument_list|)
argument_list|)
operator|&&
name|extraFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
specifier|final
name|List
argument_list|<
name|RexNode
argument_list|>
name|exprList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nameList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RelDataTypeField
argument_list|>
name|fields
init|=
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
decl_stmt|;
comment|// Project the subset of fields.
for|for
control|(
name|int
name|i
range|:
name|fieldsUsed
control|)
block|{
name|RelDataTypeField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|exprList
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|this
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|nameList
operator|.
name|add
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Project nulls for the extra fields. (Maybe a sub-class table has
comment|// extra fields, but we don't.)
for|for
control|(
name|RelDataTypeField
name|extraField
range|:
name|extraFields
control|)
block|{
name|exprList
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|ensureType
argument_list|(
name|extraField
operator|.
name|getType
argument_list|()
argument_list|,
name|rexBuilder
operator|.
name|constantNull
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|nameList
operator|.
name|add
argument_list|(
name|extraField
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HiveProject
name|hp
init|=
operator|(
name|HiveProject
operator|)
name|relBuilder
operator|.
name|push
argument_list|(
name|this
argument_list|)
operator|.
name|project
argument_list|(
name|exprList
argument_list|,
name|nameList
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|hp
operator|.
name|setSynthetic
argument_list|()
expr_stmt|;
return|return
name|hp
return|;
block|}
specifier|public
name|QuerySpec
name|getQuerySpec
parameter_list|()
block|{
if|if
condition|(
name|querySpec
operator|==
literal|null
condition|)
block|{
name|querySpec
operator|=
name|deriveQuerySpec
argument_list|()
expr_stmt|;
assert|assert
name|querySpec
operator|!=
literal|null
operator|:
name|this
assert|;
block|}
return|return
name|querySpec
return|;
block|}
specifier|protected
name|QuerySpec
name|deriveQuerySpec
parameter_list|()
block|{
specifier|final
name|RelDataType
name|rowType
init|=
name|table
operator|.
name|getRowType
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|RexNode
name|filter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
operator|&&
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Filter
condition|)
block|{
specifier|final
name|Filter
name|filterRel
init|=
operator|(
name|Filter
operator|)
name|rels
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|filter
operator|=
name|filterRel
operator|.
name|getCondition
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
operator|&&
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Project
condition|)
block|{
specifier|final
name|Project
name|project
init|=
operator|(
name|Project
operator|)
name|rels
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|projects
operator|=
name|project
operator|.
name|getProjects
argument_list|()
expr_stmt|;
block|}
name|ImmutableBitSet
name|groupSet
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aggNames
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
operator|&&
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Aggregate
condition|)
block|{
specifier|final
name|Aggregate
name|aggregate
init|=
operator|(
name|Aggregate
operator|)
name|rels
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|groupSet
operator|=
name|aggregate
operator|.
name|getGroupSet
argument_list|()
expr_stmt|;
name|aggCalls
operator|=
name|aggregate
operator|.
name|getAggCallList
argument_list|()
expr_stmt|;
name|aggNames
operator|=
name|Util
operator|.
name|skip
argument_list|(
name|aggregate
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldNames
argument_list|()
argument_list|,
name|groupSet
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|collationIndexes
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Direction
argument_list|>
name|collationDirections
init|=
literal|null
decl_stmt|;
name|Integer
name|fetch
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|rels
operator|.
name|size
argument_list|()
operator|&&
name|rels
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Sort
condition|)
block|{
specifier|final
name|Sort
name|sort
init|=
operator|(
name|Sort
operator|)
name|rels
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|collationIndexes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|collationDirections
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|RelFieldCollation
name|fCol
range|:
name|sort
operator|.
name|collation
operator|.
name|getFieldCollations
argument_list|()
control|)
block|{
name|collationIndexes
operator|.
name|add
argument_list|(
name|fCol
operator|.
name|getFieldIndex
argument_list|()
argument_list|)
expr_stmt|;
name|collationDirections
operator|.
name|add
argument_list|(
name|fCol
operator|.
name|getDirection
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fetch
operator|=
name|sort
operator|.
name|fetch
operator|!=
literal|null
condition|?
name|RexLiteral
operator|.
name|intValue
argument_list|(
name|sort
operator|.
name|fetch
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
name|rels
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"could not implement all rels"
argument_list|)
throw|;
block|}
return|return
name|getQuery
argument_list|(
name|rowType
argument_list|,
name|filter
argument_list|,
name|projects
argument_list|,
name|groupSet
argument_list|,
name|aggCalls
argument_list|,
name|aggNames
argument_list|,
name|collationIndexes
argument_list|,
name|collationDirections
argument_list|,
name|fetch
argument_list|)
return|;
block|}
specifier|public
name|String
name|getQueryType
parameter_list|()
block|{
return|return
name|getQuerySpec
argument_list|()
operator|.
name|queryType
operator|.
name|getQueryName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getQueryString
parameter_list|()
block|{
return|return
name|getQuerySpec
argument_list|()
operator|.
name|queryString
return|;
block|}
specifier|private
name|QuerySpec
name|getQuery
parameter_list|(
name|RelDataType
name|rowType
parameter_list|,
name|RexNode
name|filter
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|projects
parameter_list|,
name|ImmutableBitSet
name|groupSet
parameter_list|,
name|List
argument_list|<
name|AggregateCall
argument_list|>
name|aggCalls
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|aggNames
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|collationIndexes
parameter_list|,
name|List
argument_list|<
name|Direction
argument_list|>
name|collationDirections
parameter_list|,
name|Integer
name|fetch
parameter_list|)
block|{
name|DruidQueryType
name|queryType
init|=
name|DruidQueryType
operator|.
name|SELECT
decl_stmt|;
specifier|final
name|Translator
name|translator
init|=
operator|new
name|Translator
argument_list|(
name|druidTable
argument_list|,
name|rowType
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|rowType
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
comment|// Handle filter
name|Json
name|jsonFilter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|jsonFilter
operator|=
name|translator
operator|.
name|translateFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
comment|// Then we handle project
if|if
condition|(
name|projects
operator|!=
literal|null
condition|)
block|{
name|translator
operator|.
name|metrics
operator|.
name|clear
argument_list|()
expr_stmt|;
name|translator
operator|.
name|dimensions
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|project
range|:
name|projects
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|translator
operator|.
name|translate
argument_list|(
name|project
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fieldNames
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|// Finally we handle aggregate and sort. Handling of these
comment|// operators is more complex, since we need to extract
comment|// the conditions to know whether the query will be
comment|// executed as a Timeseries, TopN, or GroupBy in Druid
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|dimensions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|JsonAggregation
argument_list|>
name|aggregations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|granularity
init|=
literal|"ALL"
decl_stmt|;
name|Direction
name|timeSeriesDirection
init|=
literal|null
decl_stmt|;
name|JsonLimit
name|limit
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|groupSet
operator|!=
literal|null
condition|)
block|{
assert|assert
name|aggCalls
operator|!=
literal|null
assert|;
assert|assert
name|aggNames
operator|!=
literal|null
assert|;
assert|assert
name|aggCalls
operator|.
name|size
argument_list|()
operator|==
name|aggNames
operator|.
name|size
argument_list|()
assert|;
name|int
name|timePositionIdx
init|=
operator|-
literal|1
decl_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|String
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|projects
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|groupKey
range|:
name|groupSet
control|)
block|{
specifier|final
name|String
name|s
init|=
name|fieldNames
operator|.
name|get
argument_list|(
name|groupKey
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|project
init|=
name|projects
operator|.
name|get
argument_list|(
name|groupKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|instanceof
name|RexInputRef
condition|)
block|{
comment|// Reference, it could be to the timestamp column or any other dimension
specifier|final
name|RexInputRef
name|ref
init|=
operator|(
name|RexInputRef
operator|)
name|project
decl_stmt|;
specifier|final
name|String
name|origin
init|=
name|druidTable
operator|.
name|rowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|ref
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|origin
operator|.
name|equals
argument_list|(
name|DruidTable
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
argument_list|)
condition|)
block|{
name|granularity
operator|=
literal|"NONE"
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
assert|assert
name|timePositionIdx
operator|==
operator|-
literal|1
assert|;
name|timePositionIdx
operator|=
name|groupKey
expr_stmt|;
block|}
else|else
block|{
name|dimensions
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|project
operator|instanceof
name|RexCall
condition|)
block|{
comment|// Call, check if we should infer granularity
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|project
decl_stmt|;
if|if
condition|(
name|HiveDateGranularity
operator|.
name|ALL_FUNCTIONS
operator|.
name|contains
argument_list|(
name|call
operator|.
name|getOperator
argument_list|()
argument_list|)
condition|)
block|{
name|granularity
operator|=
name|call
operator|.
name|getOperator
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
assert|assert
name|timePositionIdx
operator|==
operator|-
literal|1
assert|;
name|timePositionIdx
operator|=
name|groupKey
expr_stmt|;
block|}
else|else
block|{
name|dimensions
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"incompatible project expression: "
operator|+
name|project
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|groupKey
range|:
name|groupSet
control|)
block|{
specifier|final
name|String
name|s
init|=
name|fieldNames
operator|.
name|get
argument_list|(
name|groupKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
name|DruidTable
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
argument_list|)
condition|)
block|{
name|granularity
operator|=
literal|"NONE"
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
assert|assert
name|timePositionIdx
operator|==
operator|-
literal|1
assert|;
name|timePositionIdx
operator|=
name|groupKey
expr_stmt|;
block|}
else|else
block|{
name|dimensions
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Pair
argument_list|<
name|AggregateCall
argument_list|,
name|String
argument_list|>
name|agg
range|:
name|Pair
operator|.
name|zip
argument_list|(
name|aggCalls
argument_list|,
name|aggNames
argument_list|)
control|)
block|{
specifier|final
name|JsonAggregation
name|jsonAggregation
init|=
name|getJsonAggregation
argument_list|(
name|fieldNames
argument_list|,
name|agg
operator|.
name|right
argument_list|,
name|agg
operator|.
name|left
argument_list|)
decl_stmt|;
name|aggregations
operator|.
name|add
argument_list|(
name|jsonAggregation
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|jsonAggregation
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|fieldNames
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|ImmutableList
argument_list|<
name|JsonCollation
argument_list|>
name|collations
init|=
literal|null
decl_stmt|;
name|boolean
name|sortsMetric
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|collationIndexes
operator|!=
literal|null
condition|)
block|{
assert|assert
name|collationDirections
operator|!=
literal|null
assert|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|JsonCollation
argument_list|>
name|colBuilder
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|JsonCollation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Direction
argument_list|>
name|p
range|:
name|Pair
operator|.
name|zip
argument_list|(
name|collationIndexes
argument_list|,
name|collationDirections
argument_list|)
control|)
block|{
name|colBuilder
operator|.
name|add
argument_list|(
operator|new
name|JsonCollation
argument_list|(
name|fieldNames
operator|.
name|get
argument_list|(
name|p
operator|.
name|left
argument_list|)
argument_list|,
name|p
operator|.
name|right
operator|==
name|Direction
operator|.
name|DESCENDING
condition|?
literal|"descending"
else|:
literal|"ascending"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|left
operator|>=
name|groupSet
operator|.
name|cardinality
argument_list|()
operator|&&
name|p
operator|.
name|right
operator|==
name|Direction
operator|.
name|DESCENDING
condition|)
block|{
comment|// Currently only support for DESC in TopN
name|sortsMetric
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|left
operator|==
name|timePositionIdx
condition|)
block|{
assert|assert
name|timeSeriesDirection
operator|==
literal|null
assert|;
name|timeSeriesDirection
operator|=
name|p
operator|.
name|right
expr_stmt|;
block|}
block|}
name|collations
operator|=
name|colBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|limit
operator|=
operator|new
name|JsonLimit
argument_list|(
literal|"default"
argument_list|,
name|fetch
argument_list|,
name|collations
argument_list|)
expr_stmt|;
if|if
condition|(
name|dimensions
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|collations
operator|==
literal|null
operator|||
name|timeSeriesDirection
operator|!=
literal|null
operator|)
condition|)
block|{
name|queryType
operator|=
name|DruidQueryType
operator|.
name|TIMESERIES
expr_stmt|;
assert|assert
name|fetch
operator|==
literal|null
assert|;
block|}
elseif|else
if|if
condition|(
name|dimensions
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|sortsMetric
operator|&&
name|collations
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|fetch
operator|!=
literal|null
condition|)
block|{
name|queryType
operator|=
name|DruidQueryType
operator|.
name|TOP_N
expr_stmt|;
block|}
else|else
block|{
name|queryType
operator|=
name|DruidQueryType
operator|.
name|GROUP_BY
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
name|aggCalls
operator|==
literal|null
assert|;
assert|assert
name|aggNames
operator|==
literal|null
assert|;
assert|assert
name|collationIndexes
operator|==
literal|null
operator|||
name|collationIndexes
operator|.
name|isEmpty
argument_list|()
assert|;
assert|assert
name|collationDirections
operator|==
literal|null
operator|||
name|collationDirections
operator|.
name|isEmpty
argument_list|()
assert|;
block|}
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|JsonFactory
name|factory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|JsonGenerator
name|generator
init|=
name|factory
operator|.
name|createGenerator
argument_list|(
name|sw
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|queryType
condition|)
block|{
case|case
name|TIMESERIES
case|:
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"queryType"
argument_list|,
literal|"timeseries"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dataSource"
argument_list|,
name|druidTable
operator|.
name|dataSource
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"descending"
argument_list|,
name|timeSeriesDirection
operator|!=
literal|null
operator|&&
name|timeSeriesDirection
operator|==
name|Direction
operator|.
name|DESCENDING
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"granularity"
argument_list|,
name|granularity
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"filter"
argument_list|,
name|jsonFilter
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"aggregations"
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"postAggregations"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"intervals"
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
break|break;
case|case
name|TOP_N
case|:
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"queryType"
argument_list|,
literal|"topN"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dataSource"
argument_list|,
name|druidTable
operator|.
name|dataSource
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"granularity"
argument_list|,
name|granularity
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dimension"
argument_list|,
name|dimensions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"metric"
argument_list|,
name|fieldNames
operator|.
name|get
argument_list|(
name|collationIndexes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"filter"
argument_list|,
name|jsonFilter
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"aggregations"
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"postAggregations"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"intervals"
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeNumberField
argument_list|(
literal|"threshold"
argument_list|,
name|fetch
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
break|break;
case|case
name|GROUP_BY
case|:
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|aggregations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Druid requires at least one aggregation, otherwise gives:
comment|//   Must have at least one AggregatorFactory
name|aggregations
operator|.
name|add
argument_list|(
operator|new
name|JsonAggregation
argument_list|(
literal|"longSum"
argument_list|,
literal|"dummy_agg"
argument_list|,
literal|"dummy_agg"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"queryType"
argument_list|,
literal|"groupBy"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dataSource"
argument_list|,
name|druidTable
operator|.
name|dataSource
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"granularity"
argument_list|,
name|granularity
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"dimensions"
argument_list|,
name|dimensions
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"limitSpec"
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"filter"
argument_list|,
name|jsonFilter
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"aggregations"
argument_list|,
name|aggregations
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"postAggregations"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"intervals"
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"having"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
break|break;
case|case
name|SELECT
case|:
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"queryType"
argument_list|,
literal|"select"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dataSource"
argument_list|,
name|druidTable
operator|.
name|dataSource
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"descending"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"intervals"
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"filter"
argument_list|,
name|jsonFilter
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"dimensions"
argument_list|,
name|translator
operator|.
name|dimensions
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"metrics"
argument_list|,
name|translator
operator|.
name|metrics
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"granularity"
argument_list|,
name|granularity
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"pagingSpec"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeNumberField
argument_list|(
literal|"threshold"
argument_list|,
name|fetch
operator|!=
literal|null
condition|?
name|fetch
else|:
literal|1
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"context"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeBooleanField
argument_list|(
name|Constants
operator|.
name|DRUID_QUERY_FETCH
argument_list|,
name|fetch
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown query type "
operator|+
name|queryType
argument_list|)
throw|;
block|}
name|generator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|QuerySpec
argument_list|(
name|queryType
argument_list|,
name|sw
operator|.
name|toString
argument_list|()
argument_list|,
name|fieldNames
argument_list|)
return|;
block|}
specifier|private
name|JsonAggregation
name|getJsonAggregation
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|,
name|String
name|name
parameter_list|,
name|AggregateCall
name|aggCall
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|arg
range|:
name|aggCall
operator|.
name|getArgList
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|fieldNames
operator|.
name|get
argument_list|(
name|arg
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|only
init|=
name|Iterables
operator|.
name|getFirst
argument_list|(
name|list
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|b
init|=
name|aggCall
operator|.
name|getType
argument_list|()
operator|.
name|getSqlTypeName
argument_list|()
operator|==
name|SqlTypeName
operator|.
name|DOUBLE
decl_stmt|;
switch|switch
condition|(
name|aggCall
operator|.
name|getAggregation
argument_list|()
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|COUNT
case|:
if|if
condition|(
name|aggCall
operator|.
name|isDistinct
argument_list|()
condition|)
block|{
return|return
operator|new
name|JsonCardinalityAggregation
argument_list|(
literal|"cardinality"
argument_list|,
name|name
argument_list|,
name|list
argument_list|)
return|;
block|}
return|return
operator|new
name|JsonAggregation
argument_list|(
literal|"count"
argument_list|,
name|name
argument_list|,
name|only
argument_list|)
return|;
case|case
name|SUM
case|:
case|case
name|SUM0
case|:
return|return
operator|new
name|JsonAggregation
argument_list|(
name|b
condition|?
literal|"doubleSum"
else|:
literal|"longSum"
argument_list|,
name|name
argument_list|,
name|only
argument_list|)
return|;
case|case
name|MIN
case|:
return|return
operator|new
name|JsonAggregation
argument_list|(
name|b
condition|?
literal|"doubleMin"
else|:
literal|"longMin"
argument_list|,
name|name
argument_list|,
name|only
argument_list|)
return|;
case|case
name|MAX
case|:
return|return
operator|new
name|JsonAggregation
argument_list|(
name|b
condition|?
literal|"doubleMax"
else|:
literal|"longMax"
argument_list|,
name|name
argument_list|,
name|only
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unknown aggregate "
operator|+
name|aggCall
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeField
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeFieldName
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|generator
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|writeFieldIf
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|writeField
argument_list|(
name|generator
argument_list|,
name|fieldName
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeArray
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|List
argument_list|<
name|?
argument_list|>
name|elements
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|elements
control|)
block|{
name|writeObject
argument_list|(
name|generator
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|writeObject
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|String
name|s
init|=
operator|(
name|String
operator|)
name|o
decl_stmt|;
name|generator
operator|.
name|writeString
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Interval
condition|)
block|{
name|Interval
name|i
init|=
operator|(
name|Interval
operator|)
name|o
decl_stmt|;
name|generator
operator|.
name|writeString
argument_list|(
name|i
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Integer
condition|)
block|{
name|Integer
name|i
init|=
operator|(
name|Integer
operator|)
name|o
decl_stmt|;
name|generator
operator|.
name|writeNumber
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|List
condition|)
block|{
name|writeArray
argument_list|(
name|generator
argument_list|,
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Json
condition|)
block|{
operator|(
operator|(
name|Json
operator|)
name|o
operator|)
operator|.
name|write
argument_list|(
name|generator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"not a json object: "
operator|+
name|o
argument_list|)
throw|;
block|}
block|}
comment|/** Druid query specification. */
specifier|public
specifier|static
class|class
name|QuerySpec
block|{
specifier|final
name|DruidQueryType
name|queryType
decl_stmt|;
specifier|final
name|String
name|queryString
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
name|QuerySpec
parameter_list|(
name|DruidQueryType
name|queryType
parameter_list|,
name|String
name|queryString
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
name|this
operator|.
name|queryType
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|queryType
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryString
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|queryString
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldNames
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|fieldNames
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|queryType
argument_list|,
name|queryString
argument_list|,
name|fieldNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|==
name|this
operator|||
name|obj
operator|instanceof
name|QuerySpec
operator|&&
name|queryType
operator|==
operator|(
operator|(
name|QuerySpec
operator|)
name|obj
operator|)
operator|.
name|queryType
operator|&&
name|queryString
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|QuerySpec
operator|)
name|obj
operator|)
operator|.
name|queryString
argument_list|)
operator|&&
name|fieldNames
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|QuerySpec
operator|)
name|obj
operator|)
operator|.
name|fieldNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{queryType: "
operator|+
name|queryType
operator|+
literal|", queryString: "
operator|+
name|queryString
operator|+
literal|", fieldNames: "
operator|+
name|fieldNames
operator|+
literal|"}"
return|;
block|}
name|String
name|getQueryString
parameter_list|(
name|String
name|pagingIdentifier
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|pagingIdentifier
operator|==
literal|null
condition|)
block|{
return|return
name|queryString
return|;
block|}
return|return
name|queryString
operator|.
name|replace
argument_list|(
literal|"\"threshold\":"
argument_list|,
literal|"\"pagingIdentifiers\":{\""
operator|+
name|pagingIdentifier
operator|+
literal|"\":"
operator|+
name|offset
operator|+
literal|"},\"threshold\":"
argument_list|)
return|;
block|}
block|}
comment|/** Translates scalar expressions to Druid field references. */
specifier|private
specifier|static
class|class
name|Translator
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|dimensions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|metrics
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|DruidTable
name|druidTable
decl_stmt|;
specifier|final
name|RelDataType
name|rowType
decl_stmt|;
name|Translator
parameter_list|(
name|DruidTable
name|druidTable
parameter_list|,
name|RelDataType
name|rowType
parameter_list|)
block|{
name|this
operator|.
name|druidTable
operator|=
name|druidTable
expr_stmt|;
name|this
operator|.
name|rowType
operator|=
name|rowType
expr_stmt|;
for|for
control|(
name|RelDataTypeField
name|f
range|:
name|rowType
operator|.
name|getFieldList
argument_list|()
control|)
block|{
specifier|final
name|String
name|fieldName
init|=
name|f
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|druidTable
operator|.
name|metricFieldNames
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|DruidTable
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|dimensions
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|translate
parameter_list|(
name|RexNode
name|e
parameter_list|,
name|boolean
name|set
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|INPUT_REF
case|:
specifier|final
name|RexInputRef
name|ref
init|=
operator|(
name|RexInputRef
operator|)
name|e
decl_stmt|;
specifier|final
name|String
name|fieldName
init|=
name|rowType
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|ref
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|set
condition|)
block|{
if|if
condition|(
name|druidTable
operator|.
name|metricFieldNames
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|metrics
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|DruidTable
operator|.
name|DEFAULT_TIMESTAMP_COLUMN
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|dimensions
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fieldName
return|;
case|case
name|CAST
case|:
return|return
name|tr
argument_list|(
name|e
argument_list|,
literal|0
argument_list|,
name|set
argument_list|)
return|;
case|case
name|LITERAL
case|:
return|return
operator|(
operator|(
name|RexLiteral
operator|)
name|e
operator|)
operator|.
name|getValue2
argument_list|()
operator|.
name|toString
argument_list|()
return|;
case|case
name|OTHER_FUNCTION
case|:
specifier|final
name|RexCall
name|call
init|=
operator|(
name|RexCall
operator|)
name|e
decl_stmt|;
assert|assert
name|HiveDateGranularity
operator|.
name|ALL_FUNCTIONS
operator|.
name|contains
argument_list|(
name|call
operator|.
name|getOperator
argument_list|()
argument_list|)
assert|;
return|return
name|tr
argument_list|(
name|call
argument_list|,
literal|0
argument_list|,
name|set
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"invalid expression "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"incomplete-switch"
argument_list|)
specifier|private
name|JsonFilter
name|translateFilter
parameter_list|(
name|RexNode
name|e
parameter_list|)
block|{
name|RexCall
name|call
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
case|case
name|NOT_EQUALS
case|:
case|case
name|GREATER_THAN
case|:
case|case
name|GREATER_THAN_OR_EQUAL
case|:
case|case
name|LESS_THAN
case|:
case|case
name|LESS_THAN_OR_EQUAL
case|:
name|call
operator|=
operator|(
name|RexCall
operator|)
name|e
expr_stmt|;
name|int
name|posRef
decl_stmt|;
name|int
name|posConstant
decl_stmt|;
if|if
condition|(
name|RexUtil
operator|.
name|isConstant
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|posRef
operator|=
literal|0
expr_stmt|;
name|posConstant
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RexUtil
operator|.
name|isConstant
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|posRef
operator|=
literal|1
expr_stmt|;
name|posConstant
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"it is not a valid comparison: "
operator|+
name|e
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|e
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
return|return
operator|new
name|JsonSelector
argument_list|(
literal|"selector"
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
name|posRef
argument_list|)
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
name|posConstant
argument_list|)
argument_list|)
return|;
case|case
name|NOT_EQUALS
case|:
return|return
operator|new
name|JsonCompositeFilter
argument_list|(
literal|"not"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|JsonSelector
argument_list|(
literal|"selector"
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
name|posRef
argument_list|)
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
name|posConstant
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|GREATER_THAN
case|:
return|return
operator|new
name|JsonBound
argument_list|(
literal|"bound"
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
name|posRef
argument_list|)
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
name|posConstant
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
operator|new
name|JsonBound
argument_list|(
literal|"bound"
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
name|posRef
argument_list|)
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
name|posConstant
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|LESS_THAN
case|:
return|return
operator|new
name|JsonBound
argument_list|(
literal|"bound"
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
name|posRef
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
name|posConstant
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
operator|new
name|JsonBound
argument_list|(
literal|"bound"
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
name|posRef
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|tr
argument_list|(
name|e
argument_list|,
name|posConstant
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
case|case
name|AND
case|:
case|case
name|OR
case|:
case|case
name|NOT
case|:
name|call
operator|=
operator|(
name|RexCall
operator|)
name|e
expr_stmt|;
return|return
operator|new
name|JsonCompositeFilter
argument_list|(
name|e
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|translateFilters
argument_list|(
name|call
operator|.
name|getOperands
argument_list|()
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"cannot translate filter: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|tr
parameter_list|(
name|RexNode
name|call
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|tr
argument_list|(
name|call
argument_list|,
name|index
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|String
name|tr
parameter_list|(
name|RexNode
name|call
parameter_list|,
name|int
name|index
parameter_list|,
name|boolean
name|set
parameter_list|)
block|{
return|return
name|translate
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|call
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|set
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|JsonFilter
argument_list|>
name|translateFilters
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
parameter_list|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|JsonFilter
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|operand
range|:
name|operands
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|translateFilter
argument_list|(
name|operand
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/** Object that knows how to write itself to a    * {@link com.fasterxml.jackson.core.JsonGenerator}. */
specifier|private
interface|interface
name|Json
block|{
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/** Aggregation element of a Druid "groupBy" or "topN" query. */
specifier|private
specifier|static
class|class
name|JsonAggregation
implements|implements
name|Json
block|{
specifier|final
name|String
name|type
decl_stmt|;
specifier|final
name|String
name|name
decl_stmt|;
specifier|final
name|String
name|fieldName
decl_stmt|;
specifier|private
name|JsonAggregation
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"fieldName"
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Collation element of a Druid "groupBy" query. */
specifier|private
specifier|static
class|class
name|JsonLimit
implements|implements
name|Json
block|{
specifier|final
name|String
name|type
decl_stmt|;
specifier|final
name|Integer
name|limit
decl_stmt|;
specifier|final
name|ImmutableList
argument_list|<
name|JsonCollation
argument_list|>
name|collations
decl_stmt|;
specifier|private
name|JsonLimit
parameter_list|(
name|String
name|type
parameter_list|,
name|Integer
name|limit
parameter_list|,
name|ImmutableList
argument_list|<
name|JsonCollation
argument_list|>
name|collations
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
name|this
operator|.
name|collations
operator|=
name|collations
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"limit"
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"columns"
argument_list|,
name|collations
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Collation element of a Druid "groupBy" query. */
specifier|private
specifier|static
class|class
name|JsonCollation
implements|implements
name|Json
block|{
specifier|final
name|String
name|dimension
decl_stmt|;
specifier|final
name|String
name|direction
decl_stmt|;
specifier|private
name|JsonCollation
parameter_list|(
name|String
name|dimension
parameter_list|,
name|String
name|direction
parameter_list|)
block|{
name|this
operator|.
name|dimension
operator|=
name|dimension
expr_stmt|;
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dimension"
argument_list|,
name|dimension
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"direction"
argument_list|,
name|direction
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Aggregation element that calls the "cardinality" function. */
specifier|private
specifier|static
class|class
name|JsonCardinalityAggregation
extends|extends
name|JsonAggregation
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
specifier|private
name|JsonCardinalityAggregation
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldNames
operator|=
name|fieldNames
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|writeFieldIf
argument_list|(
name|generator
argument_list|,
literal|"fieldNames"
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Filter element of a Druid "groupBy" or "topN" query. */
specifier|private
specifier|abstract
specifier|static
class|class
name|JsonFilter
implements|implements
name|Json
block|{
specifier|final
name|String
name|type
decl_stmt|;
specifier|private
name|JsonFilter
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
block|}
comment|/** Equality filter. */
specifier|private
specifier|static
class|class
name|JsonSelector
extends|extends
name|JsonFilter
block|{
specifier|private
specifier|final
name|String
name|dimension
decl_stmt|;
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
specifier|private
name|JsonSelector
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|dimension
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|dimension
operator|=
name|dimension
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dimension"
argument_list|,
name|dimension
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Bound filter. */
specifier|private
specifier|static
class|class
name|JsonBound
extends|extends
name|JsonFilter
block|{
specifier|private
specifier|final
name|String
name|dimension
decl_stmt|;
specifier|private
specifier|final
name|String
name|lower
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|lowerStrict
decl_stmt|;
specifier|private
specifier|final
name|String
name|upper
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|upperStrict
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|alphaNumeric
decl_stmt|;
specifier|private
name|JsonBound
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|dimension
parameter_list|,
name|String
name|lower
parameter_list|,
name|boolean
name|lowerStrict
parameter_list|,
name|String
name|upper
parameter_list|,
name|boolean
name|upperStrict
parameter_list|,
name|boolean
name|alphaNumeric
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|dimension
operator|=
name|dimension
expr_stmt|;
name|this
operator|.
name|lower
operator|=
name|lower
expr_stmt|;
name|this
operator|.
name|lowerStrict
operator|=
name|lowerStrict
expr_stmt|;
name|this
operator|.
name|upper
operator|=
name|upper
expr_stmt|;
name|this
operator|.
name|upperStrict
operator|=
name|upperStrict
expr_stmt|;
name|this
operator|.
name|alphaNumeric
operator|=
name|alphaNumeric
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"dimension"
argument_list|,
name|dimension
argument_list|)
expr_stmt|;
if|if
condition|(
name|lower
operator|!=
literal|null
condition|)
block|{
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"lower"
argument_list|,
name|lower
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBooleanField
argument_list|(
literal|"lowerStrict"
argument_list|,
name|lowerStrict
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|upper
operator|!=
literal|null
condition|)
block|{
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"upper"
argument_list|,
name|upper
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBooleanField
argument_list|(
literal|"upperStrict"
argument_list|,
name|upperStrict
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeBooleanField
argument_list|(
literal|"alphaNumeric"
argument_list|,
name|alphaNumeric
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Filter that combines other filters using a boolean operator. */
specifier|private
specifier|static
class|class
name|JsonCompositeFilter
extends|extends
name|JsonFilter
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|JsonFilter
argument_list|>
name|fields
decl_stmt|;
specifier|private
name|JsonCompositeFilter
parameter_list|(
name|String
name|type
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|JsonFilter
argument_list|>
name|fields
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeStringField
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|"NOT"
case|:
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"field"
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|writeField
argument_list|(
name|generator
argument_list|,
literal|"fields"
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|// End DruidQuery.java
end_comment

end_unit

