begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MemoryMonitorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
operator|.
name|Vectorization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|HashTableImplementationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|VectorMapJoinVariation
import|;
end_import

begin_comment
comment|/**  * Map Join operator Descriptor implementation.  *  */
end_comment

begin_class
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Map Join Operator"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
class|class
name|MapJoinDesc
extends|extends
name|JoinDesc
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|keys
decl_stmt|;
specifier|private
name|TableDesc
name|keyTblDesc
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TableDesc
argument_list|>
name|valueTblDescs
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TableDesc
argument_list|>
name|valueFilteredTblDescs
decl_stmt|;
specifier|private
name|int
name|posBigTable
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Byte
argument_list|,
name|int
index|[]
argument_list|>
name|valueIndices
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|retainList
decl_stmt|;
specifier|private
specifier|transient
name|String
name|bigTableAlias
decl_stmt|;
comment|// for tez. used to remember which position maps to which logical input
comment|// TODO: should these rather be arrays?
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|parentToInput
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|parentKeyCounts
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|parentDataSizes
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|// table alias (small) --> input file name (big) --> target file names (small)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|aliasBucketFileNameMapping
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bigTableBucketNumMapping
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|bigTablePartSpecToFileMapping
decl_stmt|;
comment|//map join dump file name
specifier|private
name|String
name|dumpFilePrefix
decl_stmt|;
comment|// flag for bucket map join. One usage is to set BucketizedHiveInputFormat
specifier|private
name|boolean
name|isBucketMapJoin
decl_stmt|;
comment|// Hash table memory usage allowed; used in case of non-staged mapjoin.
specifier|private
name|float
name|hashtableMemoryUsage
decl_stmt|;
comment|// This is a percentage value between 0 and 1
specifier|protected
name|boolean
name|genJoinKeys
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|isHybridHashJoin
decl_stmt|;
specifier|private
name|boolean
name|isDynamicPartitionHashJoin
init|=
literal|false
decl_stmt|;
specifier|public
name|MapJoinDesc
parameter_list|()
block|{
name|vectorDesc
operator|=
literal|null
expr_stmt|;
name|bigTableBucketNumMapping
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|MapJoinDesc
parameter_list|(
name|MapJoinDesc
name|clone
parameter_list|)
block|{
name|super
argument_list|(
name|clone
argument_list|)
expr_stmt|;
if|if
condition|(
name|clone
operator|.
name|vectorDesc
operator|!=
literal|null
condition|)
block|{
name|vectorDesc
operator|=
operator|(
name|VectorDesc
operator|)
name|clone
operator|.
name|vectorDesc
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|keys
operator|=
name|clone
operator|.
name|keys
expr_stmt|;
name|this
operator|.
name|keyTblDesc
operator|=
name|clone
operator|.
name|keyTblDesc
expr_stmt|;
name|this
operator|.
name|valueTblDescs
operator|=
name|clone
operator|.
name|valueTblDescs
expr_stmt|;
name|this
operator|.
name|posBigTable
operator|=
name|clone
operator|.
name|posBigTable
expr_stmt|;
name|this
operator|.
name|valueIndices
operator|=
name|clone
operator|.
name|valueIndices
expr_stmt|;
name|this
operator|.
name|retainList
operator|=
name|clone
operator|.
name|retainList
expr_stmt|;
name|this
operator|.
name|bigTableAlias
operator|=
name|clone
operator|.
name|bigTableAlias
expr_stmt|;
name|this
operator|.
name|aliasBucketFileNameMapping
operator|=
name|clone
operator|.
name|aliasBucketFileNameMapping
expr_stmt|;
name|this
operator|.
name|bigTableBucketNumMapping
operator|=
name|clone
operator|.
name|bigTableBucketNumMapping
expr_stmt|;
name|this
operator|.
name|bigTablePartSpecToFileMapping
operator|=
name|clone
operator|.
name|bigTablePartSpecToFileMapping
expr_stmt|;
name|this
operator|.
name|dumpFilePrefix
operator|=
name|clone
operator|.
name|dumpFilePrefix
expr_stmt|;
name|this
operator|.
name|parentToInput
operator|=
name|clone
operator|.
name|parentToInput
expr_stmt|;
name|this
operator|.
name|parentKeyCounts
operator|=
name|clone
operator|.
name|parentKeyCounts
expr_stmt|;
name|this
operator|.
name|parentDataSizes
operator|=
name|clone
operator|.
name|parentDataSizes
expr_stmt|;
name|this
operator|.
name|isBucketMapJoin
operator|=
name|clone
operator|.
name|isBucketMapJoin
expr_stmt|;
name|this
operator|.
name|isHybridHashJoin
operator|=
name|clone
operator|.
name|isHybridHashJoin
expr_stmt|;
block|}
specifier|public
name|MapJoinDesc
parameter_list|(
specifier|final
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|keys
parameter_list|,
specifier|final
name|TableDesc
name|keyTblDesc
parameter_list|,
specifier|final
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|values
parameter_list|,
specifier|final
name|List
argument_list|<
name|TableDesc
argument_list|>
name|valueTblDescs
parameter_list|,
specifier|final
name|List
argument_list|<
name|TableDesc
argument_list|>
name|valueFilteredTblDescs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|outputColumnNames
parameter_list|,
specifier|final
name|int
name|posBigTable
parameter_list|,
specifier|final
name|JoinCondDesc
index|[]
name|conds
parameter_list|,
specifier|final
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|filters
parameter_list|,
name|boolean
name|noOuterJoin
parameter_list|,
name|String
name|dumpFilePrefix
parameter_list|,
specifier|final
name|MemoryMonitorInfo
name|memoryMonitorInfo
parameter_list|,
specifier|final
name|long
name|inMemoryDataSize
parameter_list|)
block|{
name|super
argument_list|(
name|values
argument_list|,
name|outputColumnNames
argument_list|,
name|noOuterJoin
argument_list|,
name|conds
argument_list|,
name|filters
argument_list|,
literal|null
argument_list|,
name|memoryMonitorInfo
argument_list|)
expr_stmt|;
name|vectorDesc
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|keys
operator|=
name|keys
expr_stmt|;
name|this
operator|.
name|keyTblDesc
operator|=
name|keyTblDesc
expr_stmt|;
name|this
operator|.
name|valueTblDescs
operator|=
name|valueTblDescs
expr_stmt|;
name|this
operator|.
name|valueFilteredTblDescs
operator|=
name|valueFilteredTblDescs
expr_stmt|;
name|this
operator|.
name|posBigTable
operator|=
name|posBigTable
expr_stmt|;
name|this
operator|.
name|bigTableBucketNumMapping
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|dumpFilePrefix
operator|=
name|dumpFilePrefix
expr_stmt|;
name|this
operator|.
name|inMemoryDataSize
operator|=
name|inMemoryDataSize
expr_stmt|;
name|initRetainExprList
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initRetainExprList
parameter_list|()
block|{
name|retainList
operator|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|>
name|set
init|=
name|super
operator|.
name|getExprs
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|>
name|setIter
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|setIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|current
init|=
name|setIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|current
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|retainList
operator|.
name|put
argument_list|(
name|current
operator|.
name|getKey
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"input vertices"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|getParentToInput
parameter_list|()
block|{
return|return
name|parentToInput
return|;
block|}
specifier|public
name|void
name|setParentToInput
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|parentToInput
parameter_list|)
block|{
name|this
operator|.
name|parentToInput
operator|=
name|parentToInput
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|getParentKeyCounts
parameter_list|()
block|{
return|return
name|parentKeyCounts
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|getParentDataSizes
parameter_list|()
block|{
return|return
name|parentDataSizes
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Estimated key counts"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getKeyCountsExplainDesc
parameter_list|()
block|{
name|StringBuilder
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|parentKeyCounts
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|parentToInput
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" => "
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|==
literal|null
condition|?
literal|null
else|:
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setParentKeyCount
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|parentKeyCounts
parameter_list|)
block|{
name|this
operator|.
name|parentKeyCounts
operator|=
name|parentKeyCounts
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|Byte
argument_list|,
name|int
index|[]
argument_list|>
name|getValueIndices
parameter_list|()
block|{
return|return
name|valueIndices
return|;
block|}
specifier|public
name|void
name|setValueIndices
parameter_list|(
name|Map
argument_list|<
name|Byte
argument_list|,
name|int
index|[]
argument_list|>
name|valueIndices
parameter_list|)
block|{
name|this
operator|.
name|valueIndices
operator|=
name|valueIndices
expr_stmt|;
block|}
specifier|public
name|int
index|[]
name|getValueIndex
parameter_list|(
name|byte
name|alias
parameter_list|)
block|{
return|return
name|valueIndices
operator|==
literal|null
condition|?
literal|null
else|:
name|valueIndices
operator|.
name|get
argument_list|(
name|alias
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|getRetainList
parameter_list|()
block|{
return|return
name|retainList
return|;
block|}
specifier|public
name|void
name|setRetainList
parameter_list|(
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|retainList
parameter_list|)
block|{
name|this
operator|.
name|retainList
operator|=
name|retainList
expr_stmt|;
block|}
comment|/**    * @return the dumpFilePrefix    */
specifier|public
name|String
name|getDumpFilePrefix
parameter_list|()
block|{
return|return
name|dumpFilePrefix
return|;
block|}
comment|/**    * @param dumpFilePrefix    *          the dumpFilePrefix to set    */
specifier|public
name|void
name|setDumpFilePrefix
parameter_list|(
name|String
name|dumpFilePrefix
parameter_list|)
block|{
name|this
operator|.
name|dumpFilePrefix
operator|=
name|dumpFilePrefix
expr_stmt|;
block|}
comment|/**    * @return the keys in string form    */
annotation|@
name|Override
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"keys"
argument_list|)
specifier|public
name|Map
argument_list|<
name|Byte
argument_list|,
name|String
argument_list|>
name|getKeysString
parameter_list|()
block|{
name|Map
argument_list|<
name|Byte
argument_list|,
name|String
argument_list|>
name|keyMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Byte
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|k
range|:
name|getKeys
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|keyMap
operator|.
name|put
argument_list|(
name|k
operator|.
name|getKey
argument_list|()
argument_list|,
name|PlanUtils
operator|.
name|getExprListString
argument_list|(
name|k
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|keyMap
return|;
block|}
annotation|@
name|Override
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"keys"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|}
argument_list|)
specifier|public
name|Map
argument_list|<
name|Byte
argument_list|,
name|String
argument_list|>
name|getUserLevelExplainKeysString
parameter_list|()
block|{
name|Map
argument_list|<
name|Byte
argument_list|,
name|String
argument_list|>
name|keyMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Byte
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|k
range|:
name|getKeys
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|keyMap
operator|.
name|put
argument_list|(
name|k
operator|.
name|getKey
argument_list|()
argument_list|,
name|PlanUtils
operator|.
name|getExprListString
argument_list|(
name|k
operator|.
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|keyMap
return|;
block|}
comment|/**    * @return the keys    */
specifier|public
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|getKeys
parameter_list|()
block|{
return|return
name|keys
return|;
block|}
comment|/**    * @param keys    *          the keys to set    */
specifier|public
name|void
name|setKeys
parameter_list|(
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|keys
parameter_list|)
block|{
name|this
operator|.
name|keys
operator|=
name|keys
expr_stmt|;
block|}
comment|/**    * @return the position of the big table not in memory    */
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Position of Big Table"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|int
name|getPosBigTable
parameter_list|()
block|{
return|return
name|posBigTable
return|;
block|}
comment|/**    * @param posBigTable    *          the position of the big table not in memory    */
specifier|public
name|void
name|setPosBigTable
parameter_list|(
name|int
name|posBigTable
parameter_list|)
block|{
name|this
operator|.
name|posBigTable
operator|=
name|posBigTable
expr_stmt|;
block|}
comment|/**    * @return the keyTblDesc    */
specifier|public
name|TableDesc
name|getKeyTblDesc
parameter_list|()
block|{
return|return
name|keyTblDesc
return|;
block|}
comment|/**    * @param keyTblDesc    *          the keyTblDesc to set    */
specifier|public
name|void
name|setKeyTblDesc
parameter_list|(
name|TableDesc
name|keyTblDesc
parameter_list|)
block|{
name|this
operator|.
name|keyTblDesc
operator|=
name|keyTblDesc
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TableDesc
argument_list|>
name|getValueFilteredTblDescs
parameter_list|()
block|{
return|return
name|valueFilteredTblDescs
return|;
block|}
specifier|public
name|void
name|setValueFilteredTblDescs
parameter_list|(
name|List
argument_list|<
name|TableDesc
argument_list|>
name|valueFilteredTblDescs
parameter_list|)
block|{
name|this
operator|.
name|valueFilteredTblDescs
operator|=
name|valueFilteredTblDescs
expr_stmt|;
block|}
comment|/**    * @return the valueTblDescs    */
specifier|public
name|List
argument_list|<
name|TableDesc
argument_list|>
name|getValueTblDescs
parameter_list|()
block|{
return|return
name|valueTblDescs
return|;
block|}
comment|/**    * @param valueTblDescs    *          the valueTblDescs to set    */
specifier|public
name|void
name|setValueTblDescs
parameter_list|(
name|List
argument_list|<
name|TableDesc
argument_list|>
name|valueTblDescs
parameter_list|)
block|{
name|this
operator|.
name|valueTblDescs
operator|=
name|valueTblDescs
expr_stmt|;
block|}
comment|/**    * @return bigTableAlias    */
specifier|public
name|String
name|getBigTableAlias
parameter_list|()
block|{
return|return
name|bigTableAlias
return|;
block|}
comment|/**    * @param bigTableAlias    */
specifier|public
name|void
name|setBigTableAlias
parameter_list|(
name|String
name|bigTableAlias
parameter_list|)
block|{
name|this
operator|.
name|bigTableAlias
operator|=
name|bigTableAlias
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|getAliasBucketFileNameMapping
parameter_list|()
block|{
return|return
name|aliasBucketFileNameMapping
return|;
block|}
specifier|public
name|void
name|setAliasBucketFileNameMapping
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|aliasBucketFileNameMapping
parameter_list|)
block|{
name|this
operator|.
name|aliasBucketFileNameMapping
operator|=
name|aliasBucketFileNameMapping
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getBigTableBucketNumMapping
parameter_list|()
block|{
return|return
name|bigTableBucketNumMapping
return|;
block|}
specifier|public
name|void
name|setBigTableBucketNumMapping
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bigTableBucketNumMapping
parameter_list|)
block|{
name|this
operator|.
name|bigTableBucketNumMapping
operator|=
name|bigTableBucketNumMapping
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getBigTablePartSpecToFileMapping
parameter_list|()
block|{
return|return
name|bigTablePartSpecToFileMapping
return|;
block|}
specifier|public
name|void
name|setBigTablePartSpecToFileMapping
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partToFileMapping
parameter_list|)
block|{
name|this
operator|.
name|bigTablePartSpecToFileMapping
operator|=
name|partToFileMapping
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"BucketMapJoin"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|,
name|displayOnlyOnTrue
operator|=
literal|true
argument_list|)
specifier|public
name|boolean
name|isBucketMapJoin
parameter_list|()
block|{
return|return
name|isBucketMapJoin
return|;
block|}
specifier|public
name|void
name|setBucketMapJoin
parameter_list|(
name|boolean
name|isBucketMapJoin
parameter_list|)
block|{
name|this
operator|.
name|isBucketMapJoin
operator|=
name|isBucketMapJoin
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"HybridGraceHashJoin"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|,
name|displayOnlyOnTrue
operator|=
literal|true
argument_list|)
specifier|public
name|boolean
name|isHybridHashJoin
parameter_list|()
block|{
return|return
name|isHybridHashJoin
return|;
block|}
specifier|public
name|void
name|setHybridHashJoin
parameter_list|(
name|boolean
name|isHybridHashJoin
parameter_list|)
block|{
name|this
operator|.
name|isHybridHashJoin
operator|=
name|isHybridHashJoin
expr_stmt|;
block|}
specifier|public
name|void
name|setHashTableMemoryUsage
parameter_list|(
name|float
name|hashtableMemoryUsage
parameter_list|)
block|{
name|this
operator|.
name|hashtableMemoryUsage
operator|=
name|hashtableMemoryUsage
expr_stmt|;
block|}
specifier|public
name|float
name|getHashTableMemoryUsage
parameter_list|()
block|{
return|return
name|hashtableMemoryUsage
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMapSideJoin
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|setGenJoinKeys
parameter_list|(
name|boolean
name|genJoinKeys
parameter_list|)
block|{
name|this
operator|.
name|genJoinKeys
operator|=
name|genJoinKeys
expr_stmt|;
block|}
specifier|public
name|boolean
name|getGenJoinKeys
parameter_list|()
block|{
return|return
name|genJoinKeys
return|;
block|}
specifier|public
name|boolean
name|isDynamicPartitionHashJoin
parameter_list|()
block|{
return|return
name|isDynamicPartitionHashJoin
return|;
block|}
specifier|public
name|void
name|setDynamicPartitionHashJoin
parameter_list|(
name|boolean
name|isDistributedHashJoin
parameter_list|)
block|{
name|this
operator|.
name|isDynamicPartitionHashJoin
operator|=
name|isDistributedHashJoin
expr_stmt|;
block|}
comment|// Use LinkedHashSet to give predictable display order.
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|vectorizableMapJoinNativeEngines
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"tez"
argument_list|,
literal|"spark"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
class|class
name|MapJoinOperatorExplainVectorization
extends|extends
name|OperatorExplainVectorization
block|{
specifier|private
specifier|final
name|MapJoinDesc
name|mapJoinDesc
decl_stmt|;
specifier|private
specifier|final
name|VectorMapJoinDesc
name|vectorMapJoinDesc
decl_stmt|;
specifier|private
specifier|final
name|VectorMapJoinInfo
name|vectorMapJoinInfo
decl_stmt|;
specifier|private
name|VectorizationCondition
index|[]
name|nativeConditions
decl_stmt|;
specifier|public
name|MapJoinOperatorExplainVectorization
parameter_list|(
name|MapJoinDesc
name|mapJoinDesc
parameter_list|,
name|VectorDesc
name|vectorDesc
parameter_list|)
block|{
comment|// VectorMapJoinOperator is not native vectorized.
name|super
argument_list|(
name|vectorDesc
argument_list|,
operator|(
operator|(
name|VectorMapJoinDesc
operator|)
name|vectorDesc
operator|)
operator|.
name|getHashTableImplementationType
argument_list|()
operator|!=
name|HashTableImplementationType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapJoinDesc
operator|=
name|mapJoinDesc
expr_stmt|;
name|vectorMapJoinDesc
operator|=
operator|(
name|VectorMapJoinDesc
operator|)
name|vectorDesc
expr_stmt|;
name|vectorMapJoinInfo
operator|=
name|vectorMapJoinDesc
operator|.
name|getVectorMapJoinInfo
argument_list|()
expr_stmt|;
block|}
specifier|private
name|VectorizationCondition
index|[]
name|createNativeConditions
parameter_list|()
block|{
name|boolean
name|enabled
init|=
name|vectorMapJoinDesc
operator|.
name|getIsVectorizationMapJoinNativeEnabled
argument_list|()
decl_stmt|;
name|String
name|engine
init|=
name|vectorMapJoinDesc
operator|.
name|getEngine
argument_list|()
decl_stmt|;
name|String
name|engineInSupportedCondName
init|=
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
operator|.
name|varname
operator|+
literal|" "
operator|+
name|engine
operator|+
literal|" IN "
operator|+
name|vectorizableMapJoinNativeEngines
decl_stmt|;
name|boolean
name|engineInSupported
init|=
name|vectorizableMapJoinNativeEngines
operator|.
name|contains
argument_list|(
name|engine
argument_list|)
decl_stmt|;
name|boolean
name|isFastHashTableEnabled
init|=
name|vectorMapJoinDesc
operator|.
name|getIsFastHashTableEnabled
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|VectorizationCondition
argument_list|>
name|conditionList
init|=
operator|new
name|ArrayList
argument_list|<
name|VectorizationCondition
argument_list|>
argument_list|()
decl_stmt|;
name|conditionList
operator|.
name|add
argument_list|(
operator|new
name|VectorizationCondition
argument_list|(
name|vectorMapJoinDesc
operator|.
name|getUseOptimizedTable
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPJOINUSEOPTIMIZEDTABLE
operator|.
name|varname
argument_list|)
argument_list|)
expr_stmt|;
name|conditionList
operator|.
name|add
argument_list|(
operator|new
name|VectorizationCondition
argument_list|(
name|enabled
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_MAPJOIN_NATIVE_ENABLED
operator|.
name|varname
argument_list|)
argument_list|)
expr_stmt|;
name|conditionList
operator|.
name|add
argument_list|(
operator|new
name|VectorizationCondition
argument_list|(
name|engineInSupported
argument_list|,
name|engineInSupportedCondName
argument_list|)
argument_list|)
expr_stmt|;
name|conditionList
operator|.
name|add
argument_list|(
operator|new
name|VectorizationCondition
argument_list|(
name|vectorMapJoinDesc
operator|.
name|getOneMapJoinCondition
argument_list|()
argument_list|,
literal|"One MapJoin Condition"
argument_list|)
argument_list|)
expr_stmt|;
name|conditionList
operator|.
name|add
argument_list|(
operator|new
name|VectorizationCondition
argument_list|(
operator|!
name|vectorMapJoinDesc
operator|.
name|getHasNullSafes
argument_list|()
argument_list|,
literal|"No nullsafe"
argument_list|)
argument_list|)
expr_stmt|;
name|conditionList
operator|.
name|add
argument_list|(
operator|new
name|VectorizationCondition
argument_list|(
name|vectorMapJoinDesc
operator|.
name|getSmallTableExprVectorizes
argument_list|()
argument_list|,
literal|"Small table vectorizes"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFastHashTableEnabled
condition|)
block|{
name|conditionList
operator|.
name|add
argument_list|(
operator|new
name|VectorizationCondition
argument_list|(
operator|!
name|vectorMapJoinDesc
operator|.
name|getIsHybridHashJoin
argument_list|()
argument_list|,
literal|"Fast Hash Table and No Hybrid Hash Join"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conditionList
operator|.
name|add
argument_list|(
operator|new
name|VectorizationCondition
argument_list|(
name|vectorMapJoinDesc
operator|.
name|getSupportsKeyTypes
argument_list|()
argument_list|,
literal|"Optimized Table and Supports Key Types"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|VectorizationCondition
index|[]
name|conditions
init|=
name|conditionList
operator|.
name|toArray
argument_list|(
operator|new
name|VectorizationCondition
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
return|return
name|conditions
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|OPERATOR
argument_list|,
name|displayName
operator|=
literal|"nativeConditionsMet"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getNativeConditionsMet
parameter_list|()
block|{
if|if
condition|(
name|nativeConditions
operator|==
literal|null
condition|)
block|{
name|nativeConditions
operator|=
name|createNativeConditions
argument_list|()
expr_stmt|;
block|}
return|return
name|VectorizationCondition
operator|.
name|getConditionsMet
argument_list|(
name|nativeConditions
argument_list|)
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|OPERATOR
argument_list|,
name|displayName
operator|=
literal|"nativeConditionsNotMet"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getNativeConditionsNotMet
parameter_list|()
block|{
if|if
condition|(
name|nativeConditions
operator|==
literal|null
condition|)
block|{
name|nativeConditions
operator|=
name|createNativeConditions
argument_list|()
expr_stmt|;
block|}
return|return
name|VectorizationCondition
operator|.
name|getConditionsNotMet
argument_list|(
name|nativeConditions
argument_list|)
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|EXPRESSION
argument_list|,
name|displayName
operator|=
literal|"bigTableKeyExpressions"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBigTableKeyExpressions
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isNative
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|vectorExpressionsToStringList
argument_list|(
name|vectorMapJoinInfo
operator|.
name|getBigTableKeyExpressions
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|DETAIL
argument_list|,
name|displayName
operator|=
literal|"bigTableKeyColumns"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getBigTableKeyColumns
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isNative
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
index|[]
name|bigTableKeyColumnMap
init|=
name|vectorMapJoinInfo
operator|.
name|getBigTableKeyColumnMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|bigTableKeyColumnMap
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Arrays
operator|.
name|toString
argument_list|(
name|bigTableKeyColumnMap
argument_list|)
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|EXPRESSION
argument_list|,
name|displayName
operator|=
literal|"bigTableValueExpressions"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBigTableValueExpressions
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isNative
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|vectorExpressionsToStringList
argument_list|(
name|vectorMapJoinInfo
operator|.
name|getBigTableValueExpressions
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|DETAIL
argument_list|,
name|displayName
operator|=
literal|"bigTableValueColumns"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getBigTableValueColumns
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isNative
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
index|[]
name|bigTableValueColumnMap
init|=
name|vectorMapJoinInfo
operator|.
name|getBigTableValueColumnMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|bigTableValueColumnMap
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Arrays
operator|.
name|toString
argument_list|(
name|bigTableValueColumnMap
argument_list|)
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|DETAIL
argument_list|,
name|displayName
operator|=
literal|"smallTableMapping"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getSmallTableColumns
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isNative
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|outputColumnsToStringList
argument_list|(
name|vectorMapJoinInfo
operator|.
name|getSmallTableMapping
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|DETAIL
argument_list|,
name|displayName
operator|=
literal|"projectedOutputColumns"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getProjectedOutputColumns
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isNative
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|outputColumnsToStringList
argument_list|(
name|vectorMapJoinInfo
operator|.
name|getProjectionMapping
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|DETAIL
argument_list|,
name|displayName
operator|=
literal|"bigTableOuterKeyMapping"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBigTableOuterKey
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isNative
operator|||
name|vectorMapJoinDesc
operator|.
name|getVectorMapJoinVariation
argument_list|()
operator|!=
name|VectorMapJoinVariation
operator|.
name|OUTER
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|columnMappingToStringList
argument_list|(
name|vectorMapJoinInfo
operator|.
name|getBigTableOuterKeyMapping
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|DETAIL
argument_list|,
name|displayName
operator|=
literal|"bigTableRetainedColumns"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getBigTableRetainedColumns
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isNative
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|outputColumnsToStringList
argument_list|(
name|vectorMapJoinInfo
operator|.
name|getBigTableRetainedMapping
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|OPERATOR
argument_list|,
name|displayName
operator|=
literal|"nativeNotSupportedKeyTypes"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getNativeNotSupportedKeyTypes
parameter_list|()
block|{
return|return
name|vectorMapJoinDesc
operator|.
name|getNotSupportedKeyTypes
argument_list|()
return|;
block|}
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|OPERATOR
argument_list|,
name|displayName
operator|=
literal|"Map Join Vectorization"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|MapJoinOperatorExplainVectorization
name|getMapJoinVectorization
parameter_list|()
block|{
if|if
condition|(
name|vectorDesc
operator|==
literal|null
operator|||
name|this
operator|instanceof
name|SMBJoinDesc
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|MapJoinOperatorExplainVectorization
argument_list|(
name|this
argument_list|,
name|vectorDesc
argument_list|)
return|;
block|}
specifier|public
class|class
name|SMBJoinOperatorExplainVectorization
extends|extends
name|OperatorExplainVectorization
block|{
specifier|private
specifier|final
name|SMBJoinDesc
name|smbJoinDesc
decl_stmt|;
specifier|private
specifier|final
name|VectorSMBJoinDesc
name|vectorSMBJoinDesc
decl_stmt|;
specifier|public
name|SMBJoinOperatorExplainVectorization
parameter_list|(
name|SMBJoinDesc
name|smbJoinDesc
parameter_list|,
name|VectorDesc
name|vectorDesc
parameter_list|)
block|{
comment|// Native vectorization NOT supported.
name|super
argument_list|(
name|vectorDesc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|smbJoinDesc
operator|=
name|smbJoinDesc
expr_stmt|;
name|vectorSMBJoinDesc
operator|=
operator|(
name|VectorSMBJoinDesc
operator|)
name|vectorDesc
expr_stmt|;
block|}
block|}
comment|// Handle dual nature.
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|OPERATOR
argument_list|,
name|displayName
operator|=
literal|"SMB Map Join Vectorization"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|SMBJoinOperatorExplainVectorization
name|getSMBJoinVectorization
parameter_list|()
block|{
if|if
condition|(
name|vectorDesc
operator|==
literal|null
operator|||
operator|!
operator|(
name|this
operator|instanceof
name|SMBJoinDesc
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|SMBJoinOperatorExplainVectorization
argument_list|(
operator|(
name|SMBJoinDesc
operator|)
name|this
argument_list|,
name|vectorDesc
argument_list|)
return|;
block|}
block|}
end_class

end_unit

