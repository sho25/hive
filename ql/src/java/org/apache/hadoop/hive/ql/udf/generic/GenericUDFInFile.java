begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentLengthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_comment
comment|/**  * IN_FILE(str, filename) returns true if 'str' appears in the file specified  * by 'filename'.  A string is considered to be in the file if it that string  * appears as a line in the file.  *  * If either argument is NULL then NULL is returned.  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"in_file"
argument_list|,
name|value
operator|=
literal|"_FUNC_(str, filename) - Returns true if str appears in the file"
argument_list|)
specifier|public
class|class
name|GenericUDFInFile
extends|extends
name|GenericUDF
block|{
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|set
decl_stmt|;
specifier|private
specifier|transient
name|ObjectInspector
name|strObjectInspector
decl_stmt|;
specifier|private
specifier|transient
name|ObjectInspector
name|fileObjectInspector
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentLengthException
argument_list|(
literal|"IN_FILE() accepts exactly 2 arguments."
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|String
operator|.
name|class
operator|.
name|equals
argument_list|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getJavaPrimitiveClassFromObjectInspector
argument_list|(
name|arguments
index|[
name|i
index|]
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|i
argument_list|,
literal|"The "
operator|+
name|GenericUDFUtils
operator|.
name|getOrdinal
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|+
literal|" argument of function IN_FILE must be a string but "
operator|+
name|arguments
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|" was given."
argument_list|)
throw|;
block|}
block|}
name|strObjectInspector
operator|=
name|arguments
index|[
literal|0
index|]
expr_stmt|;
name|fileObjectInspector
operator|=
name|arguments
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|ObjectInspectorUtils
operator|.
name|isConstantObjectInspector
argument_list|(
name|fileObjectInspector
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"The second argument of IN_FILE() must be a constant string but "
operator|+
name|fileObjectInspector
operator|.
name|toString
argument_list|()
operator|+
literal|" was given."
argument_list|)
throw|;
block|}
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|javaBooleanObjectInspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getRequiredFiles
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
name|ObjectInspectorUtils
operator|.
name|getWritableConstantValue
argument_list|(
name|fileObjectInspector
argument_list|)
operator|.
name|toString
argument_list|()
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|||
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|str
init|=
operator|(
name|String
operator|)
name|ObjectInspectorUtils
operator|.
name|copyToStandardJavaObject
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|,
name|strObjectInspector
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|==
literal|null
condition|)
block|{
name|String
name|fileName
init|=
operator|(
name|String
operator|)
name|ObjectInspectorUtils
operator|.
name|copyToStandardJavaObject
argument_list|(
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
argument_list|,
name|fileObjectInspector
argument_list|)
decl_stmt|;
try|try
block|{
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
operator|(
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|set
operator|.
name|contains
argument_list|(
name|str
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Load the file from an InputStream.    * @param is The InputStream contains the file data.    * @throws HiveException    */
specifier|public
name|void
name|load
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|HiveException
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|set
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
assert|assert
operator|(
name|children
operator|.
name|length
operator|==
literal|2
operator|)
assert|;
return|return
literal|"in_file("
operator|+
name|children
index|[
literal|0
index|]
operator|+
literal|", "
operator|+
name|children
index|[
literal|1
index|]
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

