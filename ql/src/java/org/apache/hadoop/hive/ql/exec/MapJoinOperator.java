begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|tableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|RecordManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|RecordManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|RecordManagerOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|htree
operator|.
name|HTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * Map side Join operator implementation.  */
end_comment

begin_class
specifier|public
class|class
name|MapJoinOperator
extends|extends
name|CommonJoinOperator
argument_list|<
name|mapJoinDesc
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MapJoinOperator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * The expressions for join inputs's join keys.    */
specifier|transient
specifier|protected
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
argument_list|>
name|joinKeys
decl_stmt|;
comment|/**    * The ObjectInspectors for the join inputs's join keys.    */
specifier|transient
specifier|protected
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|>
name|joinKeysObjectInspectors
decl_stmt|;
comment|/**    * The standard ObjectInspectors for the join inputs's join keys.    */
specifier|transient
specifier|protected
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|>
name|joinKeysStandardObjectInspectors
decl_stmt|;
specifier|transient
specifier|private
name|int
name|posBigTable
decl_stmt|;
comment|// one of the tables that is not in memory
specifier|transient
name|int
name|mapJoinRowsKey
decl_stmt|;
comment|// rows for a given key
specifier|transient
specifier|protected
name|Map
argument_list|<
name|Byte
argument_list|,
name|HTree
argument_list|>
name|mapJoinTables
decl_stmt|;
specifier|public
specifier|static
class|class
name|MapJoinObjectCtx
block|{
name|ObjectInspector
name|standardOI
decl_stmt|;
name|SerDe
name|serde
decl_stmt|;
comment|/**      * @param standardOI      * @param serde      */
specifier|public
name|MapJoinObjectCtx
parameter_list|(
name|ObjectInspector
name|standardOI
parameter_list|,
name|SerDe
name|serde
parameter_list|)
block|{
name|this
operator|.
name|standardOI
operator|=
name|standardOI
expr_stmt|;
name|this
operator|.
name|serde
operator|=
name|serde
expr_stmt|;
block|}
comment|/**      * @return the standardOI      */
specifier|public
name|ObjectInspector
name|getStandardOI
parameter_list|()
block|{
return|return
name|standardOI
return|;
block|}
comment|/**      * @return the serde      */
specifier|public
name|SerDe
name|getSerDe
parameter_list|()
block|{
return|return
name|serde
return|;
block|}
block|}
specifier|transient
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|MapJoinObjectCtx
argument_list|>
name|mapMetadata
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|MapJoinObjectCtx
argument_list|>
argument_list|()
decl_stmt|;
specifier|transient
specifier|static
name|int
name|nextVal
init|=
literal|0
decl_stmt|;
specifier|static
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|MapJoinObjectCtx
argument_list|>
name|getMapMetadata
parameter_list|()
block|{
return|return
name|mapMetadata
return|;
block|}
specifier|transient
name|boolean
name|firstRow
decl_stmt|;
specifier|transient
name|int
name|metadataKeyTag
decl_stmt|;
specifier|transient
name|int
index|[]
name|metadataValueTag
decl_stmt|;
specifier|transient
name|List
argument_list|<
name|File
argument_list|>
name|hTables
decl_stmt|;
specifier|transient
name|int
name|numMapRowsRead
decl_stmt|;
specifier|transient
name|int
name|heartbeatInterval
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|initializeOp
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|numMapRowsRead
operator|=
literal|0
expr_stmt|;
name|firstRow
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|heartbeatInterval
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESENDHEARTBEAT
argument_list|)
expr_stmt|;
name|joinKeys
operator|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeEvaluator
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|populateJoinKeyValue
argument_list|(
name|joinKeys
argument_list|,
name|conf
operator|.
name|getKeys
argument_list|()
argument_list|)
expr_stmt|;
name|joinKeysObjectInspectors
operator|=
name|getObjectInspectorsFromEvaluators
argument_list|(
name|joinKeys
argument_list|,
name|inputObjInspectors
argument_list|)
expr_stmt|;
name|joinKeysStandardObjectInspectors
operator|=
name|getStandardObjectInspectors
argument_list|(
name|joinKeysObjectInspectors
argument_list|)
expr_stmt|;
comment|// all other tables are small, and are cached in the hash table
name|posBigTable
operator|=
name|conf
operator|.
name|getPosBigTable
argument_list|()
expr_stmt|;
name|metadataValueTag
operator|=
operator|new
name|int
index|[
name|numAliases
index|]
expr_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|numAliases
condition|;
name|pos
operator|++
control|)
name|metadataValueTag
index|[
name|pos
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|mapJoinTables
operator|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|HTree
argument_list|>
argument_list|()
expr_stmt|;
name|hTables
operator|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
expr_stmt|;
comment|// initialize the hash tables for other tables
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|numAliases
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|pos
operator|==
name|posBigTable
condition|)
continue|continue;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|RecordManagerOptions
operator|.
name|CACHE_SIZE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPJOINCACHEROWS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|File
name|newDir
init|=
operator|new
name|File
argument_list|(
literal|"/tmp/"
operator|+
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|newDirName
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|newDir
operator|.
name|mkdir
argument_list|()
condition|)
block|{
name|newDirName
operator|=
name|newDir
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|hTables
operator|.
name|add
argument_list|(
name|newDir
argument_list|)
expr_stmt|;
break|break;
block|}
name|newDir
operator|=
operator|new
name|File
argument_list|(
literal|"/tmp"
operator|+
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RecordManager
name|recman
init|=
name|RecordManagerFactory
operator|.
name|createRecordManager
argument_list|(
name|newDirName
operator|+
literal|"/"
operator|+
name|pos
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|HTree
name|hashTable
init|=
name|HTree
operator|.
name|createInstance
argument_list|(
name|recman
argument_list|)
decl_stmt|;
name|mapJoinTables
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
name|pos
argument_list|)
argument_list|,
name|hashTable
argument_list|)
expr_stmt|;
block|}
name|storage
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|posBigTable
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|mapJoinRowsKey
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPJOINROWSIZE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|structFields
init|=
operator|(
operator|(
name|StructObjectInspector
operator|)
name|outputObjInspector
operator|)
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|structFields
operator|.
name|size
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|structFieldObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Byte
name|alias
range|:
name|order
control|)
block|{
name|int
name|sz
init|=
name|conf
operator|.
name|getExprs
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|retained
init|=
name|conf
operator|.
name|getRetainList
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|int
name|pos
init|=
name|retained
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|structFieldObjectInspectors
operator|.
name|add
argument_list|(
name|structFields
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|outputObjInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|,
name|structFieldObjectInspectors
argument_list|)
expr_stmt|;
block|}
name|initializeChildren
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|processOp
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
comment|// get alias
name|alias
operator|=
operator|(
name|byte
operator|)
name|tag
expr_stmt|;
if|if
condition|(
operator|(
name|lastAlias
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
name|lastAlias
operator|.
name|equals
argument_list|(
name|alias
argument_list|)
operator|)
condition|)
name|nextSz
operator|=
name|joinEmitInterval
expr_stmt|;
comment|// compute keys and values as StandardObjects
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|key
init|=
name|computeValues
argument_list|(
name|row
argument_list|,
name|joinKeys
operator|.
name|get
argument_list|(
name|alias
argument_list|)
argument_list|,
name|joinKeysObjectInspectors
operator|.
name|get
argument_list|(
name|alias
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|value
init|=
name|computeValues
argument_list|(
name|row
argument_list|,
name|joinValues
operator|.
name|get
argument_list|(
name|alias
argument_list|)
argument_list|,
name|joinValuesObjectInspectors
operator|.
name|get
argument_list|(
name|alias
argument_list|)
argument_list|)
decl_stmt|;
comment|// does this source need to be stored in the hash map
if|if
condition|(
name|tag
operator|!=
name|posBigTable
condition|)
block|{
if|if
condition|(
name|firstRow
condition|)
block|{
name|metadataKeyTag
operator|=
name|nextVal
operator|++
expr_stmt|;
name|tableDesc
name|keyTableDesc
init|=
name|conf
operator|.
name|getKeyTblDesc
argument_list|()
decl_stmt|;
name|SerDe
name|keySerializer
init|=
operator|(
name|SerDe
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|keyTableDesc
operator|.
name|getDeserializerClass
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|keySerializer
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|keyTableDesc
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|mapMetadata
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|metadataKeyTag
argument_list|)
argument_list|,
operator|new
name|MapJoinObjectCtx
argument_list|(
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|keySerializer
operator|.
name|getObjectInspector
argument_list|()
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
argument_list|,
name|keySerializer
argument_list|)
argument_list|)
expr_stmt|;
name|firstRow
operator|=
literal|false
expr_stmt|;
block|}
comment|// Send some status perodically
name|numMapRowsRead
operator|++
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|numMapRowsRead
operator|%
name|heartbeatInterval
operator|)
operator|==
literal|0
operator|)
operator|&&
operator|(
name|reporter
operator|!=
literal|null
operator|)
condition|)
name|reporter
operator|.
name|progress
argument_list|()
expr_stmt|;
name|HTree
name|hashTable
init|=
name|mapJoinTables
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
name|MapJoinObjectKey
name|keyMap
init|=
operator|new
name|MapJoinObjectKey
argument_list|(
name|metadataKeyTag
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|MapJoinObjectValue
name|o
init|=
operator|(
name|MapJoinObjectValue
operator|)
name|hashTable
operator|.
name|get
argument_list|(
name|keyMap
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|res
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|res
operator|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|res
operator|=
name|o
operator|.
name|getObj
argument_list|()
expr_stmt|;
block|}
name|res
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|metadataValueTag
index|[
name|tag
index|]
operator|==
operator|-
literal|1
condition|)
block|{
name|metadataValueTag
index|[
name|tag
index|]
operator|=
name|nextVal
operator|++
expr_stmt|;
name|tableDesc
name|valueTableDesc
init|=
name|conf
operator|.
name|getValueTblDescs
argument_list|()
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|SerDe
name|valueSerDe
init|=
operator|(
name|SerDe
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|valueTableDesc
operator|.
name|getDeserializerClass
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|valueSerDe
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|valueTableDesc
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|mapMetadata
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|metadataValueTag
index|[
name|tag
index|]
argument_list|)
argument_list|,
operator|new
name|MapJoinObjectCtx
argument_list|(
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|valueSerDe
operator|.
name|getObjectInspector
argument_list|()
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
argument_list|,
name|valueSerDe
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Construct externalizable objects for key and value
name|MapJoinObjectKey
name|keyObj
init|=
operator|new
name|MapJoinObjectKey
argument_list|(
name|metadataKeyTag
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|MapJoinObjectValue
name|valueObj
init|=
operator|new
name|MapJoinObjectValue
argument_list|(
name|metadataValueTag
index|[
name|tag
index|]
argument_list|,
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|hashTable
operator|.
name|remove
argument_list|(
name|keyObj
argument_list|)
expr_stmt|;
comment|// This may potentially increase the size of the hashmap on the mapper
if|if
condition|(
name|res
operator|.
name|size
argument_list|()
operator|>
name|mapJoinRowsKey
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Number of values for a given key "
operator|+
name|keyObj
operator|+
literal|" are "
operator|+
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"used memory "
operator|+
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hashTable
operator|.
name|put
argument_list|(
name|keyObj
argument_list|,
name|valueObj
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Add the value to the ArrayList
name|storage
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
for|for
control|(
name|Byte
name|pos
range|:
name|order
control|)
block|{
if|if
condition|(
name|pos
operator|.
name|intValue
argument_list|()
operator|!=
name|tag
condition|)
block|{
name|MapJoinObjectKey
name|keyMap
init|=
operator|new
name|MapJoinObjectKey
argument_list|(
name|metadataKeyTag
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|MapJoinObjectValue
name|o
init|=
operator|(
name|MapJoinObjectValue
operator|)
name|mapJoinTables
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|get
argument_list|(
name|keyMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|storage
operator|.
name|put
argument_list|(
name|pos
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storage
operator|.
name|put
argument_list|(
name|pos
argument_list|,
name|o
operator|.
name|getObj
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// generate the output records
name|checkAndGenObject
argument_list|()
expr_stmt|;
comment|// done with the row
name|storage
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Byte
name|pos
range|:
name|order
control|)
if|if
condition|(
name|pos
operator|.
name|intValue
argument_list|()
operator|!=
name|tag
condition|)
name|storage
operator|.
name|put
argument_list|(
name|pos
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Implements the getName function for the Node Interface.    * @return the name of the operator    */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"MAPJOIN"
return|;
block|}
specifier|public
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|File
name|hTbl
range|:
name|hTables
control|)
block|{
name|deleteDir
argument_list|(
name|hTbl
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deleteDir
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
if|if
condition|(
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|String
index|[]
name|children
init|=
name|dir
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|deleteDir
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|children
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|dir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|MAPJOIN
return|;
block|}
block|}
end_class

end_unit

