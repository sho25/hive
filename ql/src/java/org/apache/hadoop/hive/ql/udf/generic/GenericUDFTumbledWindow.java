begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_comment
comment|/**  * Tumbling windows are a series of fixed-sized, non-overlapping and contiguous time intervals.  * Tumbling windows are inclusive start exclusive end.  * By default the beginning instant of fist window is Epoch 0 Thu Jan 01 00:00:00 1970 UTC.  * Optionally users may provide a different origin as a timestamp arg3.  *  * This an example of series of window with an interval of 5 seconds and origin Epoch 0 Thu Jan 01 00:00:00 1970 UTC:  *  *  *   interval 1           interval 2            interval 3  *   Jan 01 00:00:00      Jan 01 00:00:05       Jan 01 00:00:10  * 0 -------------- 4 : 5 --------------- 9: 10 --------------- 14  *  * This UDF rounds timestamp agr1 to the beginning of window interval where it belongs to.  *  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"tumbling_window"
argument_list|,
name|value
operator|=
literal|"_FUNC_(timestamp, interval, origin) - returns the timestamp truncated to the "
operator|+
literal|" beginning of tumbling window time interval starting from origin timestamp, "
operator|+
literal|" by default origin is unix epoch 0"
argument_list|,
name|extended
operator|=
literal|"param has to be a timestamp value, Example:\n"
operator|+
literal|"> SELECT _FUNC_(timestamp, interval) FROM src ;\n"
operator|+
literal|"> SELECT _FUNC_(timestamp, interval, origin_timestamp);\n"
argument_list|)
specifier|public
class|class
name|GenericUDFTumbledWindow
extends|extends
name|GenericUDF
block|{
specifier|private
name|PrimitiveObjectInspector
name|intervalOI
decl_stmt|;
specifier|private
name|PrimitiveObjectInspector
name|timestampOI
decl_stmt|;
specifier|private
name|PrimitiveObjectInspector
name|originTsOI
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
specifier|transient
name|TimestampWritableV2
name|timestampResult
init|=
operator|new
name|TimestampWritableV2
argument_list|()
decl_stmt|;
comment|/**    * Initialize this GenericUDF. This will be called once and only once per    * GenericUDF instance.    *    * @param arguments    *          The ObjectInspector for the arguments    * @throws UDFArgumentException    *           Thrown when arguments have wrong types, wrong length, etc.    * @return The ObjectInspector for the return value    */
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|checkArgsSize
argument_list|(
name|arguments
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|//arg 1 has to be of timestamp type
comment|//arg 2 has to be an interval
comment|//arg 3 has to be absent or timestamp type
name|timestampOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
expr_stmt|;
name|intervalOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|arguments
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|originTsOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|2
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|originTsOI
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|DATE_GROUP
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"Third arg has to be timestamp got "
operator|+
name|originTsOI
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|timestampOI
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|DATE_GROUP
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"First arg has to be timestamp got "
operator|+
name|timestampOI
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|intervalOI
operator|.
name|getPrimitiveCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
operator|.
name|INTERVAL_DAY_TIME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"Second arg has to be interval got "
operator|+
name|intervalOI
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|)
return|;
block|}
comment|/**    * Evaluate the GenericUDF with the arguments.    *    * @param arguments timestamp and interval.    *    * @return The truncated timestamp to the beginning of tumbled window interval.    */
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|arguments
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Timestamp
name|ts
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTimestamp
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
argument_list|,
name|timestampOI
argument_list|)
decl_stmt|;
name|HiveIntervalDayTime
name|idt
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getHiveIntervalDayTime
argument_list|(
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
argument_list|,
name|intervalOI
argument_list|)
decl_stmt|;
name|Timestamp
name|origin
init|=
name|originTsOI
operator|==
literal|null
condition|?
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
literal|0
argument_list|)
else|:
name|PrimitiveObjectInspectorUtils
operator|.
name|getTimestamp
argument_list|(
name|arguments
index|[
literal|2
index|]
operator|.
name|get
argument_list|()
argument_list|,
name|originTsOI
argument_list|)
decl_stmt|;
name|timestampResult
operator|.
name|set
argument_list|(
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
name|truncate
argument_list|(
name|ts
argument_list|,
name|idt
argument_list|,
name|origin
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|timestampResult
return|;
block|}
specifier|private
name|long
name|truncate
parameter_list|(
name|Timestamp
name|ts
parameter_list|,
name|HiveIntervalDayTime
name|idt
parameter_list|,
name|Timestamp
name|origin
parameter_list|)
block|{
name|long
name|intervalDurationMs
init|=
name|idt
operator|.
name|getTotalSeconds
argument_list|()
operator|*
literal|1000L
operator|+
name|idt
operator|.
name|getNanos
argument_list|()
operator|/
literal|1000L
decl_stmt|;
name|long
name|offset
init|=
name|ts
operator|.
name|toEpochMilli
argument_list|()
operator|%
name|intervalDurationMs
operator|-
name|origin
operator|.
name|toEpochMilli
argument_list|()
operator|%
name|intervalDurationMs
decl_stmt|;
if|if
condition|(
name|offset
operator|<
literal|0
condition|)
block|{
name|offset
operator|+=
name|intervalDurationMs
expr_stmt|;
block|}
return|return
name|ts
operator|.
name|toEpochMilli
argument_list|()
operator|-
name|offset
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
return|return
name|getStandardDisplayString
argument_list|(
name|getFuncName
argument_list|()
argument_list|,
name|children
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getFuncName
parameter_list|()
block|{
return|return
literal|"tumbling_window"
return|;
block|}
block|}
end_class

end_unit

