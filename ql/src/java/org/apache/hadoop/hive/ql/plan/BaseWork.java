begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|DataTypePhysicalVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|HashTableDummyOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatchCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedSupport
operator|.
name|Support
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|RuntimeValuesInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|VirtualColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
operator|.
name|VectorizerReason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|Explain
operator|.
name|Vectorization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_comment
comment|/**  * BaseWork. Base class for any "work" that's being done on the cluster. Items like stats  * gathering that are commonly used regardless of the type of work live here.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"serial"
block|}
argument_list|)
specifier|public
specifier|abstract
class|class
name|BaseWork
extends|extends
name|AbstractOperatorDesc
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BaseWork
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// dummyOps is a reference to all the HashTableDummy operators in the
comment|// plan. These have to be separately initialized when we setup a task.
comment|// Their function is mainly as root ops to give the mapjoin the correct
comment|// schema info.
name|List
argument_list|<
name|HashTableDummyOperator
argument_list|>
name|dummyOps
decl_stmt|;
name|int
name|tag
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|sortColNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|MapredLocalWork
name|mrLocalWork
decl_stmt|;
specifier|public
name|BaseWork
parameter_list|()
block|{}
specifier|public
name|BaseWork
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|gatheringStats
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
comment|/*    * Vectorization.    */
comment|// This will be true if a node was examined by the Vectorizer class.
specifier|protected
name|boolean
name|vectorizationExamined
decl_stmt|;
specifier|protected
name|boolean
name|vectorizationEnabled
decl_stmt|;
specifier|protected
name|VectorizedRowBatchCtx
name|vectorizedRowBatchCtx
decl_stmt|;
specifier|protected
name|boolean
name|useVectorizedInputFileFormat
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|Support
argument_list|>
name|inputFormatSupportSet
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|Support
argument_list|>
name|supportSetInUse
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|supportRemovedReasons
decl_stmt|;
specifier|private
name|VectorizerReason
name|notVectorizedReason
decl_stmt|;
specifier|private
name|boolean
name|groupByVectorOutput
decl_stmt|;
specifier|private
name|boolean
name|allNative
decl_stmt|;
specifier|private
name|boolean
name|usesVectorUDFAdaptor
decl_stmt|;
specifier|protected
name|long
name|vectorizedVertexNum
decl_stmt|;
specifier|protected
name|int
name|vectorizedTestingReducerBatchSize
decl_stmt|;
specifier|protected
name|boolean
name|llapMode
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|uberMode
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|reservedMemoryMB
init|=
operator|-
literal|1
decl_stmt|;
comment|// default to -1 means we leave it up to Tez to decide
comment|// Used for value registry
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RuntimeValuesInfo
argument_list|>
name|inputSourceToRuntimeValuesInfo
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RuntimeValuesInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|setGatheringStats
parameter_list|(
name|boolean
name|gatherStats
parameter_list|)
block|{
name|this
operator|.
name|gatheringStats
operator|=
name|gatherStats
expr_stmt|;
block|}
specifier|public
name|boolean
name|isGatheringStats
parameter_list|()
block|{
return|return
name|this
operator|.
name|gatheringStats
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|HashTableDummyOperator
argument_list|>
name|getDummyOps
parameter_list|()
block|{
return|return
name|dummyOps
return|;
block|}
specifier|public
name|void
name|setDummyOps
parameter_list|(
name|List
argument_list|<
name|HashTableDummyOperator
argument_list|>
name|dummyOps
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|dummyOps
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|dummyOps
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|dummyOps
operator|==
literal|null
operator|||
name|dummyOps
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing dummy operators from "
operator|+
name|name
operator|+
literal|" "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|dummyOps
operator|=
name|dummyOps
expr_stmt|;
block|}
specifier|public
name|void
name|addDummyOp
parameter_list|(
name|HashTableDummyOperator
name|dummyOp
parameter_list|)
block|{
if|if
condition|(
name|dummyOps
operator|==
literal|null
condition|)
block|{
name|dummyOps
operator|=
operator|new
name|LinkedList
argument_list|<
name|HashTableDummyOperator
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|dummyOps
operator|.
name|add
argument_list|(
name|dummyOp
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|void
name|replaceRoots
parameter_list|(
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|,
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|replacementMap
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|getAllRootOperators
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|getAnyRootOperator
parameter_list|()
function_decl|;
specifier|public
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|getAllOperators
parameter_list|()
block|{
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|returnSet
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|opSet
init|=
name|getAllRootOperators
argument_list|()
decl_stmt|;
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|opStack
init|=
operator|new
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// add all children
name|opStack
operator|.
name|addAll
argument_list|(
name|opSet
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|opStack
operator|.
name|empty
argument_list|()
condition|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|op
init|=
name|opStack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|returnSet
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|opStack
operator|.
name|addAll
argument_list|(
name|op
operator|.
name|getChildOperators
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|returnSet
return|;
block|}
comment|/**    * Returns a set containing all leaf operators from the operator tree in this work.    * @return a set containing all leaf operators in this operator tree.    */
specifier|public
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|getAllLeafOperators
parameter_list|()
block|{
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|returnSet
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|opSet
init|=
name|getAllRootOperators
argument_list|()
decl_stmt|;
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|opStack
init|=
operator|new
name|Stack
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// add all children
name|opStack
operator|.
name|addAll
argument_list|(
name|opSet
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|opStack
operator|.
name|empty
argument_list|()
condition|)
block|{
name|Operator
argument_list|<
name|?
argument_list|>
name|op
init|=
name|opStack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getNumChild
argument_list|()
operator|==
literal|0
condition|)
block|{
name|returnSet
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|opStack
operator|.
name|addAll
argument_list|(
name|op
operator|.
name|getChildOperators
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|returnSet
return|;
block|}
specifier|public
name|void
name|setVectorizedVertexNum
parameter_list|(
name|long
name|vectorizedVertexNum
parameter_list|)
block|{
name|this
operator|.
name|vectorizedVertexNum
operator|=
name|vectorizedVertexNum
expr_stmt|;
block|}
specifier|public
name|long
name|getVectorizedVertexNum
parameter_list|()
block|{
return|return
name|vectorizedVertexNum
return|;
block|}
specifier|public
name|void
name|setVectorizedTestingReducerBatchSize
parameter_list|(
name|int
name|vectorizedTestingReducerBatchSize
parameter_list|)
block|{
name|this
operator|.
name|vectorizedTestingReducerBatchSize
operator|=
name|vectorizedTestingReducerBatchSize
expr_stmt|;
block|}
specifier|public
name|int
name|getVectorizedTestingReducerBatchSize
parameter_list|()
block|{
return|return
name|vectorizedTestingReducerBatchSize
return|;
block|}
comment|// -----------------------------------------------------------------------------------------------
specifier|public
name|void
name|setVectorizationExamined
parameter_list|(
name|boolean
name|vectorizationExamined
parameter_list|)
block|{
name|this
operator|.
name|vectorizationExamined
operator|=
name|vectorizationExamined
expr_stmt|;
block|}
specifier|public
name|boolean
name|getVectorizationExamined
parameter_list|()
block|{
return|return
name|vectorizationExamined
return|;
block|}
specifier|public
name|void
name|setVectorizationEnabled
parameter_list|(
name|boolean
name|vectorizationEnabled
parameter_list|)
block|{
name|this
operator|.
name|vectorizationEnabled
operator|=
name|vectorizationEnabled
expr_stmt|;
block|}
specifier|public
name|boolean
name|getVectorizationEnabled
parameter_list|()
block|{
return|return
name|vectorizationEnabled
return|;
block|}
comment|/*    * The vectorization context for creating the VectorizedRowBatch for the node.    */
specifier|public
name|VectorizedRowBatchCtx
name|getVectorizedRowBatchCtx
parameter_list|()
block|{
return|return
name|vectorizedRowBatchCtx
return|;
block|}
specifier|public
name|void
name|setVectorizedRowBatchCtx
parameter_list|(
name|VectorizedRowBatchCtx
name|vectorizedRowBatchCtx
parameter_list|)
block|{
name|this
operator|.
name|vectorizedRowBatchCtx
operator|=
name|vectorizedRowBatchCtx
expr_stmt|;
block|}
specifier|public
name|void
name|setNotVectorizedReason
parameter_list|(
name|VectorizerReason
name|notVectorizedReason
parameter_list|)
block|{
name|this
operator|.
name|notVectorizedReason
operator|=
name|notVectorizedReason
expr_stmt|;
block|}
specifier|public
name|VectorizerReason
name|getNotVectorizedReason
parameter_list|()
block|{
return|return
name|notVectorizedReason
return|;
block|}
specifier|public
name|void
name|setUsesVectorUDFAdaptor
parameter_list|(
name|boolean
name|usesVectorUDFAdaptor
parameter_list|)
block|{
name|this
operator|.
name|usesVectorUDFAdaptor
operator|=
name|usesVectorUDFAdaptor
expr_stmt|;
block|}
specifier|public
name|boolean
name|getUsesVectorUDFAdaptor
parameter_list|()
block|{
return|return
name|usesVectorUDFAdaptor
return|;
block|}
specifier|public
name|void
name|setAllNative
parameter_list|(
name|boolean
name|allNative
parameter_list|)
block|{
name|this
operator|.
name|allNative
operator|=
name|allNative
expr_stmt|;
block|}
specifier|public
name|boolean
name|getAllNative
parameter_list|()
block|{
return|return
name|allNative
return|;
block|}
specifier|public
specifier|static
class|class
name|BaseExplainVectorization
block|{
specifier|private
specifier|final
name|BaseWork
name|baseWork
decl_stmt|;
specifier|public
name|BaseExplainVectorization
parameter_list|(
name|BaseWork
name|baseWork
parameter_list|)
block|{
name|this
operator|.
name|baseWork
operator|=
name|baseWork
expr_stmt|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getColumnAndTypes
parameter_list|(
name|int
index|[]
name|projectionColumns
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|,
name|TypeInfo
index|[]
name|typeInfos
parameter_list|,
name|DataTypePhysicalVariation
index|[]
name|dataTypePhysicalVariations
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|columnNames
operator|.
name|length
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|displayString
init|=
name|projectionColumns
index|[
name|i
index|]
operator|+
literal|":"
operator|+
name|columnNames
index|[
name|i
index|]
operator|+
literal|":"
operator|+
name|typeInfos
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|dataTypePhysicalVariations
operator|!=
literal|null
operator|&&
name|dataTypePhysicalVariations
index|[
name|i
index|]
operator|!=
name|DataTypePhysicalVariation
operator|.
name|NONE
condition|)
block|{
name|displayString
operator|+=
literal|"/"
operator|+
name|dataTypePhysicalVariations
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|displayString
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|SUMMARY
argument_list|,
name|displayName
operator|=
literal|"enabled"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|boolean
name|enabled
parameter_list|()
block|{
return|return
name|baseWork
operator|.
name|getVectorizationEnabled
argument_list|()
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|SUMMARY
argument_list|,
name|displayName
operator|=
literal|"vectorized"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|Boolean
name|vectorized
parameter_list|()
block|{
if|if
condition|(
operator|!
name|baseWork
operator|.
name|getVectorizationEnabled
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|baseWork
operator|.
name|getVectorMode
argument_list|()
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|SUMMARY
argument_list|,
name|displayName
operator|=
literal|"notVectorizedReason"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|notVectorizedReason
parameter_list|()
block|{
if|if
condition|(
operator|!
name|baseWork
operator|.
name|getVectorizationEnabled
argument_list|()
operator|||
name|baseWork
operator|.
name|getVectorMode
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|VectorizerReason
name|notVectorizedReason
init|=
name|baseWork
operator|.
name|getNotVectorizedReason
argument_list|()
decl_stmt|;
if|if
condition|(
name|notVectorizedReason
operator|==
literal|null
condition|)
block|{
return|return
literal|"Unknown"
return|;
block|}
return|return
name|notVectorizedReason
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|SUMMARY
argument_list|,
name|displayName
operator|=
literal|"allNative"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|Boolean
name|nativeVectorized
parameter_list|()
block|{
if|if
condition|(
operator|!
name|baseWork
operator|.
name|getVectorMode
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|baseWork
operator|.
name|getAllNative
argument_list|()
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|SUMMARY
argument_list|,
name|displayName
operator|=
literal|"usesVectorUDFAdaptor"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|Boolean
name|usesVectorUDFAdaptor
parameter_list|()
block|{
if|if
condition|(
operator|!
name|baseWork
operator|.
name|getVectorMode
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|baseWork
operator|.
name|getUsesVectorUDFAdaptor
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|RowBatchContextExplainVectorization
block|{
specifier|private
specifier|final
name|VectorizedRowBatchCtx
name|vectorizedRowBatchCtx
decl_stmt|;
specifier|public
name|RowBatchContextExplainVectorization
parameter_list|(
name|VectorizedRowBatchCtx
name|vectorizedRowBatchCtx
parameter_list|)
block|{
name|this
operator|.
name|vectorizedRowBatchCtx
operator|=
name|vectorizedRowBatchCtx
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getColumns
parameter_list|(
name|int
name|startIndex
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|String
index|[]
name|rowColumnNames
init|=
name|vectorizedRowBatchCtx
operator|.
name|getRowColumnNames
argument_list|()
decl_stmt|;
name|TypeInfo
index|[]
name|rowColumnTypeInfos
init|=
name|vectorizedRowBatchCtx
operator|.
name|getRowColumnTypeInfos
argument_list|()
decl_stmt|;
name|DataTypePhysicalVariation
index|[]
name|dataTypePhysicalVariations
init|=
name|vectorizedRowBatchCtx
operator|.
name|getRowdataTypePhysicalVariations
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|count
argument_list|)
decl_stmt|;
specifier|final
name|int
name|end
init|=
name|startIndex
operator|+
name|count
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startIndex
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|String
name|displayString
init|=
name|rowColumnNames
index|[
name|i
index|]
operator|+
literal|":"
operator|+
name|rowColumnTypeInfos
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|dataTypePhysicalVariations
operator|!=
literal|null
operator|&&
name|dataTypePhysicalVariations
index|[
name|i
index|]
operator|!=
name|DataTypePhysicalVariation
operator|.
name|NONE
condition|)
block|{
name|displayString
operator|+=
literal|"/"
operator|+
name|dataTypePhysicalVariations
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|displayString
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|DETAIL
argument_list|,
name|displayName
operator|=
literal|"dataColumns"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDataColumns
parameter_list|()
block|{
return|return
name|getColumns
argument_list|(
literal|0
argument_list|,
name|vectorizedRowBatchCtx
operator|.
name|getDataColumnCount
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|DETAIL
argument_list|,
name|displayName
operator|=
literal|"partitionColumns"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPartitionColumns
parameter_list|()
block|{
return|return
name|getColumns
argument_list|(
name|vectorizedRowBatchCtx
operator|.
name|getDataColumnCount
argument_list|()
argument_list|,
name|vectorizedRowBatchCtx
operator|.
name|getPartitionColumnCount
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|DETAIL
argument_list|,
name|displayName
operator|=
literal|"includeColumns"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getDataColumnNums
parameter_list|()
block|{
name|int
index|[]
name|dataColumnNums
init|=
name|vectorizedRowBatchCtx
operator|.
name|getDataColumnNums
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataColumnNums
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Arrays
operator|.
name|toString
argument_list|(
name|vectorizedRowBatchCtx
operator|.
name|getDataColumnNums
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|DETAIL
argument_list|,
name|displayName
operator|=
literal|"dataColumnCount"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|int
name|getDataColumnCount
parameter_list|()
block|{
return|return
name|vectorizedRowBatchCtx
operator|.
name|getDataColumnCount
argument_list|()
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|DETAIL
argument_list|,
name|displayName
operator|=
literal|"partitionColumnCount"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|int
name|getPartitionColumnCount
parameter_list|()
block|{
return|return
name|vectorizedRowBatchCtx
operator|.
name|getPartitionColumnCount
argument_list|()
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|DETAIL
argument_list|,
name|displayName
operator|=
literal|"scratchColumnTypeNames"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getScratchColumnTypeNames
parameter_list|()
block|{
name|String
index|[]
name|scratchColumnTypeNames
init|=
name|vectorizedRowBatchCtx
operator|.
name|getScratchColumnTypeNames
argument_list|()
decl_stmt|;
name|DataTypePhysicalVariation
index|[]
name|scratchDataTypePhysicalVariations
init|=
name|vectorizedRowBatchCtx
operator|.
name|getScratchDataTypePhysicalVariations
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|scratchColumnTypeNames
operator|.
name|length
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|displayString
init|=
name|scratchColumnTypeNames
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|scratchDataTypePhysicalVariations
operator|!=
literal|null
operator|&&
name|scratchDataTypePhysicalVariations
index|[
name|i
index|]
operator|!=
name|DataTypePhysicalVariation
operator|.
name|NONE
condition|)
block|{
name|displayString
operator|+=
literal|"/"
operator|+
name|scratchDataTypePhysicalVariations
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|displayString
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|DETAIL
argument_list|,
name|displayName
operator|=
literal|"neededVirtualColumns"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|String
name|getNeededVirtualColumns
parameter_list|()
block|{
name|VirtualColumn
index|[]
name|neededVirtualColumns
init|=
name|vectorizedRowBatchCtx
operator|.
name|getNeededVirtualColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|neededVirtualColumns
operator|==
literal|null
operator|||
name|neededVirtualColumns
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Arrays
operator|.
name|toString
argument_list|(
name|neededVirtualColumns
argument_list|)
return|;
block|}
block|}
annotation|@
name|Explain
argument_list|(
name|vectorization
operator|=
name|Vectorization
operator|.
name|DETAIL
argument_list|,
name|displayName
operator|=
literal|"rowBatchContext"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|RowBatchContextExplainVectorization
name|vectorizedRowBatchContext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|baseWork
operator|.
name|getVectorMode
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|RowBatchContextExplainVectorization
argument_list|(
name|baseWork
operator|.
name|getVectorizedRowBatchCtx
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|// -----------------------------------------------------------------------------------------------
comment|/**    * @return the mapredLocalWork    */
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"Local Work"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|,
name|Level
operator|.
name|DEFAULT
block|,
name|Level
operator|.
name|EXTENDED
block|}
argument_list|)
specifier|public
name|MapredLocalWork
name|getMapRedLocalWork
parameter_list|()
block|{
return|return
name|mrLocalWork
return|;
block|}
comment|/**    * @param mapLocalWork    *          the mapredLocalWork to set    */
specifier|public
name|void
name|setMapRedLocalWork
parameter_list|(
specifier|final
name|MapredLocalWork
name|mapLocalWork
parameter_list|)
block|{
name|this
operator|.
name|mrLocalWork
operator|=
name|mapLocalWork
expr_stmt|;
block|}
specifier|public
name|void
name|setUberMode
parameter_list|(
name|boolean
name|uberMode
parameter_list|)
block|{
name|this
operator|.
name|uberMode
operator|=
name|uberMode
expr_stmt|;
block|}
specifier|public
name|boolean
name|getUberMode
parameter_list|()
block|{
return|return
name|uberMode
return|;
block|}
specifier|public
name|void
name|setLlapMode
parameter_list|(
name|boolean
name|llapMode
parameter_list|)
block|{
name|this
operator|.
name|llapMode
operator|=
name|llapMode
expr_stmt|;
block|}
specifier|public
name|boolean
name|getLlapMode
parameter_list|()
block|{
return|return
name|llapMode
return|;
block|}
specifier|public
name|int
name|getReservedMemoryMB
parameter_list|()
block|{
return|return
name|reservedMemoryMB
return|;
block|}
specifier|public
name|void
name|setReservedMemoryMB
parameter_list|(
name|int
name|memoryMB
parameter_list|)
block|{
name|reservedMemoryMB
operator|=
name|memoryMB
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|void
name|configureJobConf
parameter_list|(
name|JobConf
name|job
parameter_list|)
function_decl|;
specifier|public
name|void
name|setTag
parameter_list|(
name|int
name|tag
parameter_list|)
block|{
name|this
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
block|}
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"tag"
argument_list|,
name|explainLevels
operator|=
block|{
name|Level
operator|.
name|USER
block|}
argument_list|)
specifier|public
name|int
name|getTag
parameter_list|()
block|{
return|return
name|tag
return|;
block|}
specifier|public
name|void
name|addSortCols
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|sortCols
parameter_list|)
block|{
name|this
operator|.
name|sortColNames
operator|.
name|addAll
argument_list|(
name|sortCols
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSortCols
parameter_list|()
block|{
return|return
name|sortColNames
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|RuntimeValuesInfo
argument_list|>
name|getInputSourceToRuntimeValuesInfo
parameter_list|()
block|{
return|return
name|inputSourceToRuntimeValuesInfo
return|;
block|}
specifier|public
name|void
name|setInputSourceToRuntimeValuesInfo
parameter_list|(
name|String
name|workName
parameter_list|,
name|RuntimeValuesInfo
name|runtimeValuesInfo
parameter_list|)
block|{
name|inputSourceToRuntimeValuesInfo
operator|.
name|put
argument_list|(
name|workName
argument_list|,
name|runtimeValuesInfo
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

