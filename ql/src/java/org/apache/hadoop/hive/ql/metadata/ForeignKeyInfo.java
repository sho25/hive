begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLForeignKey
import|;
end_import

begin_comment
comment|/**  * ForeignKeyInfo is a metadata structure containing the foreign keys associated with a table.  * The fields include the child database name, the child table name, mapping of the constraint  * name to the foreign key columns associated with the key. The foreign key column structure   * contains the parent database name, parent table name, associated parent column name,  * associated child column name and the position of the foreign key column in the key.  * The position is one-based index.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
class|class
name|ForeignKeyInfo
implements|implements
name|Serializable
block|{
specifier|public
class|class
name|ForeignKeyCol
block|{
specifier|public
name|String
name|parentTableName
decl_stmt|;
specifier|public
name|String
name|parentDatabaseName
decl_stmt|;
specifier|public
name|String
name|parentColName
decl_stmt|;
specifier|public
name|String
name|childColName
decl_stmt|;
specifier|public
name|Integer
name|position
decl_stmt|;
specifier|public
name|ForeignKeyCol
parameter_list|(
name|String
name|parentTableName
parameter_list|,
name|String
name|parentDatabaseName
parameter_list|,
name|String
name|parentColName
parameter_list|,
name|String
name|childColName
parameter_list|,
name|Integer
name|position
parameter_list|)
block|{
name|this
operator|.
name|parentTableName
operator|=
name|parentTableName
expr_stmt|;
name|this
operator|.
name|parentDatabaseName
operator|=
name|parentDatabaseName
expr_stmt|;
name|this
operator|.
name|parentColName
operator|=
name|parentColName
expr_stmt|;
name|this
operator|.
name|childColName
operator|=
name|childColName
expr_stmt|;
name|this
operator|.
name|position
operator|=
name|position
expr_stmt|;
block|}
block|}
comment|// Mapping from constraint name to list of foreign keys
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ForeignKeyCol
argument_list|>
argument_list|>
name|foreignKeys
decl_stmt|;
name|String
name|childTableName
decl_stmt|;
name|String
name|childDatabaseName
decl_stmt|;
specifier|public
name|ForeignKeyInfo
parameter_list|()
block|{}
specifier|public
name|ForeignKeyInfo
parameter_list|(
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|fks
parameter_list|,
name|String
name|childTableName
parameter_list|,
name|String
name|childDatabaseName
parameter_list|)
block|{
name|this
operator|.
name|childTableName
operator|=
name|childTableName
expr_stmt|;
name|this
operator|.
name|childDatabaseName
operator|=
name|childDatabaseName
expr_stmt|;
name|foreignKeys
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ForeignKeyCol
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|fks
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|SQLForeignKey
name|fk
range|:
name|fks
control|)
block|{
if|if
condition|(
name|fk
operator|.
name|getFktable_db
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|childDatabaseName
argument_list|)
operator|&&
name|fk
operator|.
name|getFktable_name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|childTableName
argument_list|)
condition|)
block|{
name|ForeignKeyCol
name|currCol
init|=
operator|new
name|ForeignKeyCol
argument_list|(
name|fk
operator|.
name|getPktable_name
argument_list|()
argument_list|,
name|fk
operator|.
name|getPktable_db
argument_list|()
argument_list|,
name|fk
operator|.
name|getPkcolumn_name
argument_list|()
argument_list|,
name|fk
operator|.
name|getFkcolumn_name
argument_list|()
argument_list|,
name|fk
operator|.
name|getKey_seq
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|constraintName
init|=
name|fk
operator|.
name|getFk_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|foreignKeys
operator|.
name|containsKey
argument_list|(
name|constraintName
argument_list|)
condition|)
block|{
name|foreignKeys
operator|.
name|get
argument_list|(
name|constraintName
argument_list|)
operator|.
name|add
argument_list|(
name|currCol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|ForeignKeyCol
argument_list|>
name|currList
init|=
operator|new
name|ArrayList
argument_list|<
name|ForeignKeyCol
argument_list|>
argument_list|()
decl_stmt|;
name|currList
operator|.
name|add
argument_list|(
name|currCol
argument_list|)
expr_stmt|;
name|foreignKeys
operator|.
name|put
argument_list|(
name|constraintName
argument_list|,
name|currList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|String
name|getChildTableName
parameter_list|()
block|{
return|return
name|childTableName
return|;
block|}
specifier|public
name|String
name|getChildDatabaseName
parameter_list|()
block|{
return|return
name|childDatabaseName
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ForeignKeyCol
argument_list|>
argument_list|>
name|getForeignKeys
parameter_list|()
block|{
return|return
name|foreignKeys
return|;
block|}
specifier|public
name|void
name|setChildTableName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|childTableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|void
name|setChildDatabaseName
parameter_list|(
name|String
name|databaseName
parameter_list|)
block|{
name|this
operator|.
name|childDatabaseName
operator|=
name|databaseName
expr_stmt|;
block|}
specifier|public
name|void
name|setForeignKeys
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ForeignKeyCol
argument_list|>
argument_list|>
name|foreignKeys
parameter_list|)
block|{
name|this
operator|.
name|foreignKeys
operator|=
name|foreignKeys
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Foreign Keys for "
operator|+
name|childDatabaseName
operator|+
literal|"."
operator|+
name|childTableName
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
if|if
condition|(
name|foreignKeys
operator|!=
literal|null
operator|&&
name|foreignKeys
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ForeignKeyCol
argument_list|>
argument_list|>
name|me
range|:
name|foreignKeys
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" {Constraint Name: "
operator|+
name|me
operator|.
name|getKey
argument_list|()
operator|+
literal|","
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ForeignKeyCol
argument_list|>
name|currCol
init|=
name|me
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|currCol
operator|!=
literal|null
operator|&&
name|currCol
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ForeignKeyCol
name|fkc
range|:
name|currCol
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" (Parent Column Name: "
operator|+
name|fkc
operator|.
name|parentDatabaseName
operator|+
literal|"."
operator|+
name|fkc
operator|.
name|parentTableName
operator|+
literal|"."
operator|+
name|fkc
operator|.
name|parentColName
operator|+
literal|", Column Name: "
operator|+
name|fkc
operator|.
name|childColName
operator|+
literal|", Key Sequence: "
operator|+
name|fkc
operator|.
name|position
operator|+
literal|"),"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|setLength
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"},"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|setLength
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isForeignKeyInfoNotEmpty
parameter_list|(
name|ForeignKeyInfo
name|info
parameter_list|)
block|{
return|return
name|info
operator|!=
literal|null
operator|&&
operator|!
name|info
operator|.
name|getForeignKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

