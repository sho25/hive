begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2010 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FetchWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|InspectableObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_class
specifier|public
class|class
name|PartitionKeySampler
implements|implements
name|OutputCollector
argument_list|<
name|HiveKey
argument_list|,
name|Object
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|byte
index|[]
argument_list|>
name|C
init|=
operator|new
name|Comparator
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
specifier|final
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|o1
parameter_list|,
name|byte
index|[]
name|o2
parameter_list|)
block|{
return|return
name|WritableComparator
operator|.
name|compareBytes
argument_list|(
name|o1
argument_list|,
literal|0
argument_list|,
name|o1
operator|.
name|length
argument_list|,
name|o2
argument_list|,
literal|0
argument_list|,
name|o2
operator|.
name|length
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|sampled
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addSampleFile
parameter_list|(
name|Path
name|inputPath
parameter_list|,
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|inputPath
operator|.
name|getFileSystem
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|input
init|=
name|fs
operator|.
name|open
argument_list|(
name|inputPath
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|count
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
name|input
operator|.
name|readInt
argument_list|()
index|]
decl_stmt|;
name|input
operator|.
name|readFully
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|sampled
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
comment|// keys from FetchSampler are collected here
specifier|public
name|void
name|collect
parameter_list|(
name|HiveKey
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|sampled
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|key
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// sort and pick partition keys
comment|// copied from org.apache.hadoop.mapred.lib.InputSampler
specifier|private
name|byte
index|[]
index|[]
name|getPartitionKeys
parameter_list|(
name|int
name|numReduce
parameter_list|)
block|{
if|if
condition|(
name|sampled
operator|.
name|size
argument_list|()
operator|<
name|numReduce
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"not enough number of sample"
argument_list|)
throw|;
block|}
name|byte
index|[]
index|[]
name|sorted
init|=
name|sampled
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
name|sampled
operator|.
name|size
argument_list|()
index|]
index|[]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|sorted
argument_list|,
name|C
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|partitionKeys
init|=
operator|new
name|byte
index|[
name|numReduce
operator|-
literal|1
index|]
index|[]
decl_stmt|;
name|float
name|stepSize
init|=
name|sorted
operator|.
name|length
operator|/
operator|(
name|float
operator|)
name|numReduce
decl_stmt|;
name|int
name|last
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numReduce
condition|;
operator|++
name|i
control|)
block|{
name|int
name|k
init|=
name|Math
operator|.
name|round
argument_list|(
name|stepSize
operator|*
name|i
argument_list|)
decl_stmt|;
while|while
condition|(
name|last
operator|>=
name|k
operator|&&
name|C
operator|.
name|compare
argument_list|(
name|sorted
index|[
name|last
index|]
argument_list|,
name|sorted
index|[
name|k
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
name|k
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|k
operator|>=
name|sorted
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"not enough number of sample"
argument_list|)
throw|;
block|}
name|partitionKeys
index|[
name|i
operator|-
literal|1
index|]
operator|=
name|sorted
index|[
name|k
index|]
expr_stmt|;
name|last
operator|=
name|k
expr_stmt|;
block|}
return|return
name|partitionKeys
return|;
block|}
specifier|public
name|void
name|writePartitionKeys
parameter_list|(
name|Path
name|path
parameter_list|,
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|partitionKeys
init|=
name|getPartitionKeys
argument_list|(
name|job
operator|.
name|getNumReduceTasks
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|job
argument_list|,
name|path
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|byte
index|[]
name|pkey
range|:
name|partitionKeys
control|)
block|{
name|BytesWritable
name|wrapper
init|=
operator|new
name|BytesWritable
argument_list|(
name|pkey
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|wrapper
argument_list|,
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
comment|// random sampling
specifier|public
specifier|static
name|FetchSampler
name|createSampler
parameter_list|(
name|FetchWork
name|work
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|operator
parameter_list|)
block|{
name|int
name|sampleNum
init|=
name|conf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESAMPLINGNUMBERFORORDERBY
argument_list|)
decl_stmt|;
name|float
name|samplePercent
init|=
name|conf
operator|.
name|getFloatVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESAMPLINGPERCENTFORORDERBY
argument_list|)
decl_stmt|;
if|if
condition|(
name|samplePercent
argument_list|<
literal|0.0
operator|||
name|samplePercent
argument_list|>
literal|1.0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Percentile value must be within the range of 0 to 1."
argument_list|)
throw|;
block|}
name|FetchSampler
name|sampler
init|=
operator|new
name|FetchSampler
argument_list|(
name|work
argument_list|,
name|job
argument_list|,
name|operator
argument_list|)
decl_stmt|;
name|sampler
operator|.
name|setSampleNum
argument_list|(
name|sampleNum
argument_list|)
expr_stmt|;
name|sampler
operator|.
name|setSamplePercent
argument_list|(
name|samplePercent
argument_list|)
expr_stmt|;
return|return
name|sampler
return|;
block|}
specifier|private
specifier|static
class|class
name|FetchSampler
extends|extends
name|FetchOperator
block|{
specifier|private
name|int
name|sampleNum
init|=
literal|1000
decl_stmt|;
specifier|private
name|float
name|samplePercent
init|=
literal|0.1f
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|public
name|FetchSampler
parameter_list|(
name|FetchWork
name|work
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|operator
parameter_list|)
block|{
name|super
argument_list|(
name|work
argument_list|,
name|job
argument_list|,
name|operator
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSampleNum
parameter_list|(
name|int
name|numSample
parameter_list|)
block|{
name|this
operator|.
name|sampleNum
operator|=
name|numSample
expr_stmt|;
block|}
specifier|public
name|void
name|setSamplePercent
parameter_list|(
name|float
name|samplePercent
parameter_list|)
block|{
name|this
operator|.
name|samplePercent
operator|=
name|samplePercent
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|pushRow
parameter_list|()
throws|throws
name|IOException
throws|,
name|HiveException
block|{
name|InspectableObject
name|row
init|=
name|getNextRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|!=
literal|null
operator|&&
name|random
operator|.
name|nextFloat
argument_list|()
operator|<
name|samplePercent
condition|)
block|{
name|sampleNum
operator|--
expr_stmt|;
name|pushRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
return|return
name|sampleNum
operator|>
literal|0
operator|&&
name|row
operator|!=
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

