begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveFileFormatUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HivePartitioner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * File Sink operator implementation.  **/
end_comment

begin_class
specifier|public
class|class
name|FileSinkOperator
extends|extends
name|TerminalOperator
argument_list|<
name|FileSinkDesc
argument_list|>
implements|implements
name|Serializable
block|{
comment|/**    * RecordWriter.    *    */
specifier|public
specifier|static
interface|interface
name|RecordWriter
block|{
name|void
name|write
parameter_list|(
name|Writable
name|w
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
specifier|transient
name|FileSystem
name|fs
decl_stmt|;
specifier|protected
specifier|transient
name|Serializer
name|serializer
decl_stmt|;
specifier|protected
specifier|transient
name|BytesWritable
name|commonKey
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
specifier|protected
specifier|transient
name|TableIdEnum
name|tabIdEnum
init|=
literal|null
decl_stmt|;
specifier|private
specifier|transient
name|LongWritable
name|row_count
decl_stmt|;
comment|/**    * The evaluators for the multiFile sprayer. If the table under consideration has 1000 buckets,    * it is not a good idea to start so many reducers - if the maximum number of reducers is 100,    * each reducer can write 10 files - this way we effectively get 1000 files.    */
specifier|private
specifier|transient
name|ExprNodeEvaluator
index|[]
name|partitionEval
decl_stmt|;
specifier|private
specifier|transient
name|int
name|totalFiles
decl_stmt|;
specifier|private
specifier|transient
name|int
name|numFiles
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|multiFileSpray
decl_stmt|;
specifier|private
specifier|transient
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|bucketMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|transient
name|RecordWriter
index|[]
name|outWriters
decl_stmt|;
specifier|private
specifier|transient
name|Path
index|[]
name|outPaths
decl_stmt|;
specifier|private
specifier|transient
name|Path
index|[]
name|finalPaths
decl_stmt|;
specifier|private
specifier|transient
name|ObjectInspector
index|[]
name|partitionObjectInspectors
decl_stmt|;
specifier|private
specifier|transient
name|HivePartitioner
argument_list|<
name|HiveKey
argument_list|,
name|Object
argument_list|>
name|prtner
decl_stmt|;
specifier|private
specifier|transient
name|HiveKey
name|key
init|=
operator|new
name|HiveKey
argument_list|()
decl_stmt|;
comment|/**    * TableIdEnum.    *    */
specifier|public
specifier|static
enum|enum
name|TableIdEnum
block|{
name|TABLE_ID_1_ROWCOUNT
block|,
name|TABLE_ID_2_ROWCOUNT
block|,
name|TABLE_ID_3_ROWCOUNT
block|,
name|TABLE_ID_4_ROWCOUNT
block|,
name|TABLE_ID_5_ROWCOUNT
block|,
name|TABLE_ID_6_ROWCOUNT
block|,
name|TABLE_ID_7_ROWCOUNT
block|,
name|TABLE_ID_8_ROWCOUNT
block|,
name|TABLE_ID_9_ROWCOUNT
block|,
name|TABLE_ID_10_ROWCOUNT
block|,
name|TABLE_ID_11_ROWCOUNT
block|,
name|TABLE_ID_12_ROWCOUNT
block|,
name|TABLE_ID_13_ROWCOUNT
block|,
name|TABLE_ID_14_ROWCOUNT
block|,
name|TABLE_ID_15_ROWCOUNT
block|;   }
specifier|protected
specifier|transient
name|boolean
name|autoDelete
init|=
literal|false
decl_stmt|;
specifier|private
name|void
name|commit
parameter_list|(
name|int
name|idx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|outPaths
index|[
name|idx
index|]
argument_list|,
name|finalPaths
index|[
name|idx
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to rename output to: "
operator|+
name|finalPaths
index|[
name|idx
index|]
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Committed "
operator|+
name|outPaths
index|[
name|idx
index|]
operator|+
literal|" to output file: "
operator|+
name|finalPaths
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|serializer
operator|=
operator|(
name|Serializer
operator|)
name|conf
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getDeserializerClass
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|conf
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|JobConf
name|jc
decl_stmt|;
if|if
condition|(
name|hconf
operator|instanceof
name|JobConf
condition|)
block|{
name|jc
operator|=
operator|(
name|JobConf
operator|)
name|hconf
expr_stmt|;
block|}
else|else
block|{
comment|// test code path
name|jc
operator|=
operator|new
name|JobConf
argument_list|(
name|hconf
argument_list|,
name|ExecDriver
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|multiFileSpray
operator|=
name|conf
operator|.
name|isMultiFileSpray
argument_list|()
expr_stmt|;
name|totalFiles
operator|=
name|conf
operator|.
name|getTotalFiles
argument_list|()
expr_stmt|;
name|numFiles
operator|=
name|conf
operator|.
name|getNumFiles
argument_list|()
expr_stmt|;
if|if
condition|(
name|multiFileSpray
condition|)
block|{
name|partitionEval
operator|=
operator|new
name|ExprNodeEvaluator
index|[
name|conf
operator|.
name|getPartitionCols
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|e
range|:
name|conf
operator|.
name|getPartitionCols
argument_list|()
control|)
block|{
name|partitionEval
index|[
name|i
operator|++
index|]
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|partitionObjectInspectors
operator|=
name|initEvaluators
argument_list|(
name|partitionEval
argument_list|,
name|outputObjInspector
argument_list|)
expr_stmt|;
name|prtner
operator|=
operator|(
name|HivePartitioner
argument_list|<
name|HiveKey
argument_list|,
name|Object
argument_list|>
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|jc
operator|.
name|getPartitionerClass
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|outWriters
operator|=
operator|new
name|RecordWriter
index|[
name|numFiles
index|]
expr_stmt|;
name|outPaths
operator|=
operator|new
name|Path
index|[
name|numFiles
index|]
expr_stmt|;
name|finalPaths
operator|=
operator|new
name|Path
index|[
name|numFiles
index|]
expr_stmt|;
name|String
name|specPath
init|=
name|conf
operator|.
name|getDirName
argument_list|()
decl_stmt|;
name|Path
name|tmpPath
init|=
name|Utilities
operator|.
name|toTempPath
argument_list|(
name|specPath
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|seenBuckets
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|fs
operator|=
operator|(
operator|new
name|Path
argument_list|(
name|specPath
argument_list|)
operator|)
operator|.
name|getFileSystem
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|hiveOutputFormat
init|=
name|conf
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getOutputFileFormatClass
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|boolean
name|isCompressed
init|=
name|conf
operator|.
name|getCompressed
argument_list|()
decl_stmt|;
name|Path
name|parent
init|=
name|Utilities
operator|.
name|toTempPath
argument_list|(
name|specPath
argument_list|)
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|outputClass
init|=
name|serializer
operator|.
name|getSerializedClass
argument_list|()
decl_stmt|;
comment|// Create all the files - this is required because empty files need to be created for empty buckets
name|int
name|filesIdx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|totalFiles
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|taskId
init|=
name|Utilities
operator|.
name|getTaskId
argument_list|(
name|hconf
argument_list|)
decl_stmt|;
if|if
condition|(
name|multiFileSpray
condition|)
block|{
name|key
operator|.
name|setHashCode
argument_list|(
name|idx
argument_list|)
expr_stmt|;
comment|// Does this hashcode belong to this reducer
name|int
name|numReducers
init|=
name|totalFiles
operator|/
name|numFiles
decl_stmt|;
if|if
condition|(
name|numReducers
operator|>
literal|1
condition|)
block|{
name|int
name|currReducer
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|Utilities
operator|.
name|getTaskIdFromFilename
argument_list|(
name|Utilities
operator|.
name|getTaskId
argument_list|(
name|hconf
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|reducerIdx
init|=
name|prtner
operator|.
name|getPartition
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|numReducers
argument_list|)
decl_stmt|;
if|if
condition|(
name|currReducer
operator|!=
name|reducerIdx
condition|)
continue|continue;
block|}
name|int
name|bucketNum
init|=
name|prtner
operator|.
name|getBucket
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|totalFiles
argument_list|)
decl_stmt|;
if|if
condition|(
name|seenBuckets
operator|.
name|contains
argument_list|(
name|bucketNum
argument_list|)
condition|)
continue|continue;
name|seenBuckets
operator|.
name|add
argument_list|(
name|bucketNum
argument_list|)
expr_stmt|;
name|bucketMap
operator|.
name|put
argument_list|(
name|bucketNum
argument_list|,
name|filesIdx
argument_list|)
expr_stmt|;
name|taskId
operator|=
name|Utilities
operator|.
name|replaceTaskIdFromFilename
argument_list|(
name|Utilities
operator|.
name|getTaskId
argument_list|(
name|hconf
argument_list|)
argument_list|,
name|bucketNum
argument_list|)
expr_stmt|;
block|}
name|finalPaths
index|[
name|filesIdx
index|]
operator|=
operator|new
name|Path
argument_list|(
name|tmpPath
argument_list|,
name|taskId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Final Path: FS "
operator|+
name|finalPaths
index|[
name|filesIdx
index|]
argument_list|)
expr_stmt|;
name|outPaths
index|[
name|filesIdx
index|]
operator|=
operator|new
name|Path
argument_list|(
name|tmpPath
argument_list|,
name|Utilities
operator|.
name|toTempPath
argument_list|(
name|taskId
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing to temp file: FS "
operator|+
name|outPaths
index|[
name|filesIdx
index|]
argument_list|)
expr_stmt|;
comment|// The reason to keep these instead of using
comment|// OutputFormat.getRecordWriter() is that
comment|// getRecordWriter does not give us enough control over the file name that
comment|// we create.
name|finalPaths
index|[
name|filesIdx
index|]
operator|=
name|HiveFileFormatUtils
operator|.
name|getOutputFormatFinalPath
argument_list|(
name|parent
argument_list|,
name|taskId
argument_list|,
name|jc
argument_list|,
name|hiveOutputFormat
argument_list|,
name|isCompressed
argument_list|,
name|finalPaths
index|[
name|filesIdx
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"New Final Path: FS "
operator|+
name|finalPaths
index|[
name|filesIdx
index|]
argument_list|)
expr_stmt|;
name|outWriters
index|[
name|filesIdx
index|]
operator|=
name|HiveFileFormatUtils
operator|.
name|getHiveRecordWriter
argument_list|(
name|jc
argument_list|,
name|conf
operator|.
name|getTableInfo
argument_list|()
argument_list|,
name|outputClass
argument_list|,
name|conf
argument_list|,
name|outPaths
index|[
name|filesIdx
index|]
argument_list|)
expr_stmt|;
name|filesIdx
operator|++
expr_stmt|;
block|}
assert|assert
name|filesIdx
operator|==
name|numFiles
assert|;
comment|// in recent hadoop versions, use deleteOnExit to clean tmp files.
name|autoDelete
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|fileSystemDeleteOnExit
argument_list|(
name|fs
argument_list|,
name|outPaths
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|int
name|id
init|=
name|conf
operator|.
name|getDestTableId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|id
operator|!=
literal|0
operator|)
operator|&&
operator|(
name|id
operator|<=
name|TableIdEnum
operator|.
name|values
argument_list|()
operator|.
name|length
operator|)
condition|)
block|{
name|String
name|enumName
init|=
literal|"TABLE_ID_"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
operator|+
literal|"_ROWCOUNT"
decl_stmt|;
name|tabIdEnum
operator|=
name|TableIdEnum
operator|.
name|valueOf
argument_list|(
name|enumName
argument_list|)
expr_stmt|;
name|row_count
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
name|statsMap
operator|.
name|put
argument_list|(
name|tabIdEnum
argument_list|,
name|row_count
argument_list|)
expr_stmt|;
block|}
name|initializeChildren
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|Writable
name|recordValue
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|processOp
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Since File Sink is a terminal operator, forward is not called - so,
comment|// maintain the number of output rows explicitly
if|if
condition|(
name|counterNameToEnum
operator|!=
literal|null
condition|)
block|{
operator|++
name|outputRows
expr_stmt|;
if|if
condition|(
name|outputRows
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|incrCounter
argument_list|(
name|numOutputRowsCntr
argument_list|,
name|outputRows
argument_list|)
expr_stmt|;
name|outputRows
operator|=
literal|0
expr_stmt|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|reporter
operator|!=
literal|null
condition|)
block|{
name|reporter
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
comment|// user SerDe to serialize r, and write it out
name|recordValue
operator|=
name|serializer
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|inputObjInspectors
index|[
name|tag
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|row_count
operator|!=
literal|null
condition|)
block|{
name|row_count
operator|.
name|set
argument_list|(
name|row_count
operator|.
name|get
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|multiFileSpray
condition|)
block|{
name|outWriters
index|[
literal|0
index|]
operator|.
name|write
argument_list|(
name|recordValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|keyHashCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitionEval
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|partitionEval
index|[
name|i
index|]
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|keyHashCode
operator|=
name|keyHashCode
operator|*
literal|31
operator|+
name|ObjectInspectorUtils
operator|.
name|hashCode
argument_list|(
name|o
argument_list|,
name|partitionObjectInspectors
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|key
operator|.
name|setHashCode
argument_list|(
name|keyHashCode
argument_list|)
expr_stmt|;
name|int
name|bucketNum
init|=
name|prtner
operator|.
name|getBucket
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|totalFiles
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
name|bucketMap
operator|.
name|get
argument_list|(
name|bucketNum
argument_list|)
decl_stmt|;
name|outWriters
index|[
name|bucketMap
operator|.
name|get
argument_list|(
name|bucketNum
argument_list|)
index|]
operator|.
name|write
argument_list|(
name|recordValue
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|abort
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|numFiles
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|outWriters
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|outWriters
index|[
name|idx
index|]
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
name|commit
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// Will come here if an Exception was thrown in map() or reduce().
comment|// Hadoop always call close() even if an Exception was thrown in map() or
comment|// reduce().
try|try
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|numFiles
condition|;
name|idx
operator|++
control|)
block|{
name|outWriters
index|[
name|idx
index|]
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|autoDelete
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outPaths
index|[
name|idx
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @return the name of the operator    */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
literal|"FS"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|jobClose
parameter_list|(
name|Configuration
name|hconf
parameter_list|,
name|boolean
name|success
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|String
name|specPath
init|=
name|conf
operator|.
name|getDirName
argument_list|()
decl_stmt|;
name|FileSinkOperator
operator|.
name|mvFileToFinalPath
argument_list|(
name|specPath
argument_list|,
name|hconf
argument_list|,
name|success
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|super
operator|.
name|jobClose
argument_list|(
name|hconf
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|mvFileToFinalPath
parameter_list|(
name|String
name|specPath
parameter_list|,
name|Configuration
name|hconf
parameter_list|,
name|boolean
name|success
parameter_list|,
name|Log
name|log
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveException
block|{
name|FileSystem
name|fs
init|=
operator|(
operator|new
name|Path
argument_list|(
name|specPath
argument_list|)
operator|)
operator|.
name|getFileSystem
argument_list|(
name|hconf
argument_list|)
decl_stmt|;
name|Path
name|tmpPath
init|=
name|Utilities
operator|.
name|toTempPath
argument_list|(
name|specPath
argument_list|)
decl_stmt|;
name|Path
name|intermediatePath
init|=
operator|new
name|Path
argument_list|(
name|tmpPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|tmpPath
operator|.
name|getName
argument_list|()
operator|+
literal|".intermediate"
argument_list|)
decl_stmt|;
name|Path
name|finalPath
init|=
operator|new
name|Path
argument_list|(
name|specPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|tmpPath
argument_list|)
condition|)
block|{
comment|// Step1: rename tmp output folder to intermediate path. After this
comment|// point, updates from speculative tasks still writing to tmpPath
comment|// will not appear in finalPath.
name|log
operator|.
name|info
argument_list|(
literal|"Moving tmp dir: "
operator|+
name|tmpPath
operator|+
literal|" to: "
operator|+
name|intermediatePath
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|rename
argument_list|(
name|fs
argument_list|,
name|tmpPath
argument_list|,
name|intermediatePath
argument_list|)
expr_stmt|;
comment|// Step2: remove any tmp file or double-committed output files
name|Utilities
operator|.
name|removeTempOrDuplicateFiles
argument_list|(
name|fs
argument_list|,
name|intermediatePath
argument_list|)
expr_stmt|;
comment|// Step3: move to the file destination
name|log
operator|.
name|info
argument_list|(
literal|"Moving tmp dir: "
operator|+
name|intermediatePath
operator|+
literal|" to: "
operator|+
name|finalPath
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|renameOrMoveFiles
argument_list|(
name|fs
argument_list|,
name|intermediatePath
argument_list|,
name|finalPath
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fs
operator|.
name|delete
argument_list|(
name|tmpPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|FILESINK
return|;
block|}
block|}
end_class

end_unit

