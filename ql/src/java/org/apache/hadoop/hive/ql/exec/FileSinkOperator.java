begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveFileFormatUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HivePartitioner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|StatsProvidingRecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|StreamingOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveFatalException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DynamicPartitionCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
operator|.
name|DPSortState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ListBucketingCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SkewedColumnPositionPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsCollectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|SubStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|IntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|StoragePolicyShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|StoragePolicyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TEMPORARY_TABLE_STORAGE
import|;
end_import

begin_comment
comment|/**  * File Sink operator implementation.  **/
end_comment

begin_class
specifier|public
class|class
name|FileSinkOperator
extends|extends
name|TerminalOperator
argument_list|<
name|FileSinkDesc
argument_list|>
implements|implements
name|Serializable
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileSinkOperator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|isInfoEnabled
init|=
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|isDebugEnabled
init|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
specifier|protected
specifier|transient
name|HashMap
argument_list|<
name|String
argument_list|,
name|FSPaths
argument_list|>
name|valToPaths
decl_stmt|;
specifier|protected
specifier|transient
name|int
name|numDynParts
decl_stmt|;
specifier|protected
specifier|transient
name|List
argument_list|<
name|String
argument_list|>
name|dpColNames
decl_stmt|;
specifier|protected
specifier|transient
name|DynamicPartitionCtx
name|dpCtx
decl_stmt|;
specifier|protected
specifier|transient
name|boolean
name|isCompressed
decl_stmt|;
specifier|protected
specifier|transient
name|boolean
name|isTemporary
decl_stmt|;
specifier|protected
specifier|transient
name|Path
name|parent
decl_stmt|;
specifier|protected
specifier|transient
name|HiveOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|hiveOutputFormat
decl_stmt|;
specifier|protected
specifier|transient
name|Path
name|specPath
decl_stmt|;
specifier|protected
specifier|transient
name|String
name|childSpecPathDynLinkedPartitions
decl_stmt|;
specifier|protected
specifier|transient
name|int
name|dpStartCol
decl_stmt|;
comment|// start column # for DP columns
specifier|protected
specifier|transient
name|List
argument_list|<
name|String
argument_list|>
name|dpVals
decl_stmt|;
comment|// array of values corresponding to DP columns
specifier|protected
specifier|transient
name|List
argument_list|<
name|Object
argument_list|>
name|dpWritables
decl_stmt|;
specifier|protected
specifier|transient
name|RecordWriter
index|[]
name|rowOutWriters
decl_stmt|;
comment|// row specific RecordWriters
specifier|protected
specifier|transient
name|int
name|maxPartitions
decl_stmt|;
specifier|protected
specifier|transient
name|ListBucketingCtx
name|lbCtx
decl_stmt|;
specifier|protected
specifier|transient
name|boolean
name|isSkewedStoredAsSubDirectories
decl_stmt|;
specifier|protected
specifier|transient
name|boolean
index|[]
name|statsFromRecordWriter
decl_stmt|;
specifier|protected
specifier|transient
name|boolean
name|isCollectRWStats
decl_stmt|;
specifier|private
specifier|transient
name|FSPaths
name|prevFsp
decl_stmt|;
specifier|private
specifier|transient
name|FSPaths
name|fpaths
decl_stmt|;
specifier|private
name|StructField
name|recIdField
decl_stmt|;
comment|// field to find record identifier in
specifier|private
name|StructField
name|bucketField
decl_stmt|;
comment|// field bucket is in in record id
specifier|private
name|StructObjectInspector
name|recIdInspector
decl_stmt|;
comment|// OI for inspecting record id
specifier|private
name|IntObjectInspector
name|bucketInspector
decl_stmt|;
comment|// OI for inspecting bucket id
specifier|protected
specifier|transient
name|long
name|numRows
init|=
literal|0
decl_stmt|;
specifier|protected
specifier|transient
name|long
name|cntr
init|=
literal|1
decl_stmt|;
specifier|protected
specifier|transient
name|long
name|logEveryNRows
init|=
literal|0
decl_stmt|;
specifier|protected
specifier|transient
name|int
name|rowIndex
init|=
literal|0
decl_stmt|;
comment|/**    * Counters.    */
specifier|public
specifier|static
enum|enum
name|Counter
block|{
name|RECORDS_OUT
block|}
comment|/**    * RecordWriter.    *    */
specifier|public
specifier|static
interface|interface
name|RecordWriter
block|{
name|void
name|write
parameter_list|(
name|Writable
name|w
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|public
class|class
name|FSPaths
implements|implements
name|Cloneable
block|{
name|Path
name|tmpPath
decl_stmt|;
name|Path
name|taskOutputTempPath
decl_stmt|;
name|Path
index|[]
name|outPaths
decl_stmt|;
name|Path
index|[]
name|finalPaths
decl_stmt|;
name|RecordWriter
index|[]
name|outWriters
decl_stmt|;
name|RecordUpdater
index|[]
name|updaters
decl_stmt|;
name|Stat
name|stat
decl_stmt|;
name|int
name|acidLastBucket
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|acidFileOffset
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|FSPaths
parameter_list|(
name|Path
name|specPath
parameter_list|)
block|{
name|tmpPath
operator|=
name|Utilities
operator|.
name|toTempPath
argument_list|(
name|specPath
argument_list|)
expr_stmt|;
name|taskOutputTempPath
operator|=
name|Utilities
operator|.
name|toTaskTempPath
argument_list|(
name|specPath
argument_list|)
expr_stmt|;
name|outPaths
operator|=
operator|new
name|Path
index|[
name|numFiles
index|]
expr_stmt|;
name|finalPaths
operator|=
operator|new
name|Path
index|[
name|numFiles
index|]
expr_stmt|;
name|outWriters
operator|=
operator|new
name|RecordWriter
index|[
name|numFiles
index|]
expr_stmt|;
name|updaters
operator|=
operator|new
name|RecordUpdater
index|[
name|numFiles
index|]
expr_stmt|;
if|if
condition|(
name|isDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created slots for  "
operator|+
name|numFiles
argument_list|)
expr_stmt|;
block|}
name|stat
operator|=
operator|new
name|Stat
argument_list|()
expr_stmt|;
block|}
comment|/**      * Update OutPath according to tmpPath.      */
specifier|public
name|Path
name|getTaskOutPath
parameter_list|(
name|String
name|taskId
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|this
operator|.
name|taskOutputTempPath
argument_list|,
name|Utilities
operator|.
name|toTempPath
argument_list|(
name|taskId
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Update the final paths according to tmpPath.      */
specifier|public
name|Path
name|getFinalPath
parameter_list|(
name|String
name|taskId
parameter_list|,
name|Path
name|tmpPath
parameter_list|,
name|String
name|extension
parameter_list|)
block|{
if|if
condition|(
name|extension
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|tmpPath
argument_list|,
name|taskId
operator|+
name|extension
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Path
argument_list|(
name|tmpPath
argument_list|,
name|taskId
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|closeWriters
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|outWriters
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|outWriters
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|outWriters
index|[
name|idx
index|]
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
name|updateProgress
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|updaters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|updaters
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|updaters
index|[
name|i
index|]
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|commit
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|outPaths
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
try|try
block|{
if|if
condition|(
operator|(
name|bDynParts
operator|||
name|isSkewedStoredAsSubDirectories
operator|)
operator|&&
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|finalPaths
index|[
name|idx
index|]
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|finalPaths
index|[
name|idx
index|]
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|needToRename
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getWriteType
argument_list|()
operator|==
name|AcidUtils
operator|.
name|Operation
operator|.
name|UPDATE
operator|||
name|conf
operator|.
name|getWriteType
argument_list|()
operator|==
name|AcidUtils
operator|.
name|Operation
operator|.
name|DELETE
condition|)
block|{
comment|// If we're updating or deleting there may be no file to close.  This can happen
comment|// because the where clause strained out all of the records for a given bucket.  So
comment|// before attempting the rename below, check if our file exists.  If it doesn't,
comment|// then skip the rename.  If it does try it.  We could just blindly try the rename
comment|// and avoid the extra stat, but that would mask other errors.
try|try
block|{
if|if
condition|(
name|outPaths
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
name|FileStatus
name|stat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|outPaths
index|[
name|idx
index|]
argument_list|)
decl_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|needToRename
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needToRename
operator|&&
name|outPaths
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|outPaths
index|[
name|idx
index|]
argument_list|,
name|finalPaths
index|[
name|idx
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unable to rename output from: "
operator|+
name|outPaths
index|[
name|idx
index|]
operator|+
literal|" to: "
operator|+
name|finalPaths
index|[
name|idx
index|]
argument_list|)
throw|;
block|}
name|updateProgress
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unable to rename output from: "
operator|+
name|outPaths
index|[
name|idx
index|]
operator|+
literal|" to: "
operator|+
name|finalPaths
index|[
name|idx
index|]
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|abortWriters
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|boolean
name|abort
parameter_list|,
name|boolean
name|delete
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|outWriters
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|outWriters
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|outWriters
index|[
name|idx
index|]
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
if|if
condition|(
name|delete
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outPaths
index|[
name|idx
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|updateProgress
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|public
name|Stat
name|getStat
parameter_list|()
block|{
return|return
name|stat
return|;
block|}
block|}
comment|// class FSPaths
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
specifier|transient
name|FileSystem
name|fs
decl_stmt|;
specifier|protected
specifier|transient
name|Serializer
name|serializer
decl_stmt|;
specifier|protected
specifier|final
specifier|transient
name|LongWritable
name|row_count
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|isNativeTable
init|=
literal|true
decl_stmt|;
comment|/**    * The evaluators for the multiFile sprayer. If the table under consideration has 1000 buckets,    * it is not a good idea to start so many reducers - if the maximum number of reducers is 100,    * each reducer can write 10 files - this way we effectively get 1000 files.    */
specifier|private
specifier|transient
name|ExprNodeEvaluator
index|[]
name|partitionEval
decl_stmt|;
specifier|protected
specifier|transient
name|int
name|totalFiles
decl_stmt|;
specifier|private
specifier|transient
name|int
name|numFiles
decl_stmt|;
specifier|protected
specifier|transient
name|boolean
name|multiFileSpray
decl_stmt|;
specifier|protected
specifier|transient
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|bucketMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|transient
name|ObjectInspector
index|[]
name|partitionObjectInspectors
decl_stmt|;
specifier|protected
specifier|transient
name|HivePartitioner
argument_list|<
name|HiveKey
argument_list|,
name|Object
argument_list|>
name|prtner
decl_stmt|;
specifier|protected
specifier|transient
specifier|final
name|HiveKey
name|key
init|=
operator|new
name|HiveKey
argument_list|()
decl_stmt|;
specifier|private
specifier|transient
name|Configuration
name|hconf
decl_stmt|;
specifier|protected
specifier|transient
name|FSPaths
name|fsp
decl_stmt|;
specifier|protected
specifier|transient
name|boolean
name|bDynParts
decl_stmt|;
specifier|private
specifier|transient
name|SubStructObjectInspector
name|subSetOI
decl_stmt|;
specifier|private
specifier|transient
name|int
name|timeOut
decl_stmt|;
comment|// JT timeout in msec.
specifier|private
specifier|transient
name|long
name|lastProgressReport
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|protected
specifier|transient
name|boolean
name|autoDelete
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|transient
name|JobConf
name|jc
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|outputClass
decl_stmt|;
name|String
name|taskId
decl_stmt|;
specifier|protected
name|boolean
name|filesCreated
init|=
literal|false
decl_stmt|;
specifier|private
name|void
name|initializeSpecPath
parameter_list|()
block|{
comment|// For a query of the type:
comment|// insert overwrite table T1
comment|// select * from (subq1 union all subq2)u;
comment|// subQ1 and subQ2 write to directories Parent/Child_1 and
comment|// Parent/Child_2 respectively, and union is removed.
comment|// The movetask that follows subQ1 and subQ2 tasks moves the directory
comment|// 'Parent'
comment|// However, if the above query contains dynamic partitions, subQ1 and
comment|// subQ2 have to write to directories: Parent/DynamicPartition/Child_1
comment|// and Parent/DynamicPartition/Child_1 respectively.
comment|// The movetask that follows subQ1 and subQ2 tasks still moves the directory
comment|// 'Parent'
if|if
condition|(
operator|(
operator|!
name|conf
operator|.
name|isLinkedFileSink
argument_list|()
operator|)
operator|||
operator|(
name|dpCtx
operator|==
literal|null
operator|)
condition|)
block|{
name|specPath
operator|=
name|conf
operator|.
name|getDirName
argument_list|()
expr_stmt|;
name|childSpecPathDynLinkedPartitions
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|specPath
operator|=
name|conf
operator|.
name|getParentDir
argument_list|()
expr_stmt|;
name|childSpecPathDynLinkedPartitions
operator|=
name|conf
operator|.
name|getDirName
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
comment|/** Kryo ctor. */
specifier|protected
name|FileSinkOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|FileSinkOperator
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|initializeOp
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|hconf
operator|=
name|hconf
expr_stmt|;
name|filesCreated
operator|=
literal|false
expr_stmt|;
name|isNativeTable
operator|=
operator|!
name|conf
operator|.
name|getTableInfo
argument_list|()
operator|.
name|isNonNative
argument_list|()
expr_stmt|;
name|isTemporary
operator|=
name|conf
operator|.
name|isTemporary
argument_list|()
expr_stmt|;
name|multiFileSpray
operator|=
name|conf
operator|.
name|isMultiFileSpray
argument_list|()
expr_stmt|;
name|totalFiles
operator|=
name|conf
operator|.
name|getTotalFiles
argument_list|()
expr_stmt|;
name|numFiles
operator|=
name|conf
operator|.
name|getNumFiles
argument_list|()
expr_stmt|;
name|dpCtx
operator|=
name|conf
operator|.
name|getDynPartCtx
argument_list|()
expr_stmt|;
name|lbCtx
operator|=
name|conf
operator|.
name|getLbCtx
argument_list|()
expr_stmt|;
name|fsp
operator|=
name|prevFsp
operator|=
literal|null
expr_stmt|;
name|valToPaths
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FSPaths
argument_list|>
argument_list|()
expr_stmt|;
name|taskId
operator|=
name|Utilities
operator|.
name|getTaskId
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|initializeSpecPath
argument_list|()
expr_stmt|;
name|fs
operator|=
name|specPath
operator|.
name|getFileSystem
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
try|try
block|{
name|createHiveOutputFormat
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|ex
parameter_list|)
block|{
name|logOutputFormatError
argument_list|(
name|hconf
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|isCompressed
operator|=
name|conf
operator|.
name|getCompressed
argument_list|()
expr_stmt|;
name|parent
operator|=
name|Utilities
operator|.
name|toTempPath
argument_list|(
name|conf
operator|.
name|getDirName
argument_list|()
argument_list|)
expr_stmt|;
name|statsFromRecordWriter
operator|=
operator|new
name|boolean
index|[
name|numFiles
index|]
expr_stmt|;
name|serializer
operator|=
operator|(
name|Serializer
operator|)
name|conf
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getDeserializerClass
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|initialize
argument_list|(
name|hconf
argument_list|,
name|conf
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|outputClass
operator|=
name|serializer
operator|.
name|getSerializedClass
argument_list|()
expr_stmt|;
if|if
condition|(
name|isLogInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using serializer : "
operator|+
name|serializer
operator|+
literal|" and formatter : "
operator|+
name|hiveOutputFormat
operator|+
operator|(
name|isCompressed
condition|?
literal|" with compression"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// Timeout is chosen to make sure that even if one iteration takes more than
comment|// half of the script.timeout but less than script.timeout, we will still
comment|// be able to report progress.
name|timeOut
operator|=
name|hconf
operator|.
name|getInt
argument_list|(
literal|"mapred.healthChecker.script.timeout"
argument_list|,
literal|600000
argument_list|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|hconf
operator|instanceof
name|JobConf
condition|)
block|{
name|jc
operator|=
operator|(
name|JobConf
operator|)
name|hconf
expr_stmt|;
block|}
else|else
block|{
comment|// test code path
name|jc
operator|=
operator|new
name|JobConf
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|multiFileSpray
condition|)
block|{
name|partitionEval
operator|=
operator|new
name|ExprNodeEvaluator
index|[
name|conf
operator|.
name|getPartitionCols
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|e
range|:
name|conf
operator|.
name|getPartitionCols
argument_list|()
control|)
block|{
name|partitionEval
index|[
name|i
operator|++
index|]
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|partitionObjectInspectors
operator|=
name|initEvaluators
argument_list|(
name|partitionEval
argument_list|,
name|outputObjInspector
argument_list|)
expr_stmt|;
name|prtner
operator|=
operator|(
name|HivePartitioner
argument_list|<
name|HiveKey
argument_list|,
name|Object
argument_list|>
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|jc
operator|.
name|getPartitionerClass
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dpCtx
operator|!=
literal|null
condition|)
block|{
name|dpSetup
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lbCtx
operator|!=
literal|null
condition|)
block|{
name|lbSetup
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|bDynParts
condition|)
block|{
name|fsp
operator|=
operator|new
name|FSPaths
argument_list|(
name|specPath
argument_list|)
expr_stmt|;
comment|// Create all the files - this is required because empty files need to be created for
comment|// empty buckets
comment|// createBucketFiles(fsp);
if|if
condition|(
operator|!
name|this
operator|.
name|isSkewedStoredAsSubDirectories
condition|)
block|{
name|valToPaths
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|fsp
argument_list|)
expr_stmt|;
comment|// special entry for non-DP case
block|}
block|}
specifier|final
name|StoragePolicyValue
name|tmpStorage
init|=
name|StoragePolicyValue
operator|.
name|lookup
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hconf
argument_list|,
name|HIVE_TEMPORARY_TABLE_STORAGE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTemporary
operator|&&
name|fsp
operator|!=
literal|null
operator|&&
name|tmpStorage
operator|!=
name|StoragePolicyValue
operator|.
name|DEFAULT
condition|)
block|{
specifier|final
name|Path
name|outputPath
init|=
name|fsp
operator|.
name|taskOutputTempPath
decl_stmt|;
name|StoragePolicyShim
name|shim
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getStoragePolicyShim
argument_list|(
name|fs
argument_list|)
decl_stmt|;
if|if
condition|(
name|shim
operator|!=
literal|null
condition|)
block|{
comment|// directory creation is otherwise within the writers
name|fs
operator|.
name|mkdirs
argument_list|(
name|outputPath
argument_list|)
expr_stmt|;
name|shim
operator|.
name|setStoragePolicy
argument_list|(
name|outputPath
argument_list|,
name|tmpStorage
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|conf
operator|.
name|getWriteType
argument_list|()
operator|==
name|AcidUtils
operator|.
name|Operation
operator|.
name|UPDATE
operator|||
name|conf
operator|.
name|getWriteType
argument_list|()
operator|==
name|AcidUtils
operator|.
name|Operation
operator|.
name|DELETE
condition|)
block|{
comment|// ROW__ID is always in the first field
name|recIdField
operator|=
operator|(
operator|(
name|StructObjectInspector
operator|)
name|outputObjInspector
operator|)
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|recIdInspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|recIdField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
comment|// bucket is the second field in the record id
name|bucketField
operator|=
name|recIdInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucketInspector
operator|=
operator|(
name|IntObjectInspector
operator|)
name|bucketField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
block|}
name|numRows
operator|=
literal|0
expr_stmt|;
name|cntr
operator|=
literal|1
expr_stmt|;
name|logEveryNRows
operator|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_LOG_N_RECORDS
argument_list|)
expr_stmt|;
name|statsMap
operator|.
name|put
argument_list|(
name|getCounterName
argument_list|(
name|Counter
operator|.
name|RECORDS_OUT
argument_list|)
argument_list|,
name|row_count
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getCounterName
parameter_list|(
name|Counter
name|counter
parameter_list|)
block|{
name|String
name|suffix
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|conf
operator|.
name|getDestTableId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|fullName
init|=
name|conf
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fullName
operator|!=
literal|null
condition|)
block|{
name|suffix
operator|=
name|suffix
operator|+
literal|"_"
operator|+
name|fullName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
return|return
name|counter
operator|+
literal|"_"
operator|+
name|suffix
return|;
block|}
specifier|private
name|void
name|logOutputFormatError
parameter_list|(
name|Configuration
name|hconf
parameter_list|,
name|HiveException
name|ex
parameter_list|)
block|{
name|StringWriter
name|errorWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|errorWriter
operator|.
name|append
argument_list|(
literal|"Failed to create output format; configuration: "
argument_list|)
expr_stmt|;
try|try
block|{
name|Configuration
operator|.
name|dumpConfiguration
argument_list|(
name|hconf
argument_list|,
name|errorWriter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex2
parameter_list|)
block|{
name|errorWriter
operator|.
name|append
argument_list|(
literal|"{ failed to dump configuration: "
operator|+
name|ex2
operator|.
name|getMessage
argument_list|()
operator|+
literal|" }"
argument_list|)
expr_stmt|;
block|}
name|Properties
name|tdp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|conf
operator|.
name|getTableInfo
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|tdp
operator|=
name|this
operator|.
name|conf
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|errorWriter
operator|.
name|append
argument_list|(
literal|";\n table properties: { "
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|tdp
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|errorWriter
operator|.
name|append
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getValue
argument_list|()
operator|+
literal|", "
argument_list|)
expr_stmt|;
block|}
name|errorWriter
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
name|errorWriter
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialize list bucketing information    */
specifier|private
name|void
name|lbSetup
parameter_list|()
block|{
name|this
operator|.
name|isSkewedStoredAsSubDirectories
operator|=
operator|(
operator|(
name|lbCtx
operator|==
literal|null
operator|)
condition|?
literal|false
else|:
name|lbCtx
operator|.
name|isSkewedStoredAsDir
argument_list|()
operator|)
expr_stmt|;
block|}
comment|/**    * Set up for dynamic partitioning including a new ObjectInspector for the output row.    */
specifier|private
name|void
name|dpSetup
parameter_list|()
block|{
name|this
operator|.
name|bDynParts
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|numDynParts
operator|=
name|dpCtx
operator|.
name|getNumDPCols
argument_list|()
expr_stmt|;
name|this
operator|.
name|dpColNames
operator|=
name|dpCtx
operator|.
name|getDPColNames
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxPartitions
operator|=
name|dpCtx
operator|.
name|getMaxPartitionsPerNode
argument_list|()
expr_stmt|;
assert|assert
name|numDynParts
operator|==
name|dpColNames
operator|.
name|size
argument_list|()
operator|:
literal|"number of dynamic partitions should be the same as the size of DP mapping"
assert|;
if|if
condition|(
name|dpColNames
operator|!=
literal|null
operator|&&
name|dpColNames
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|bDynParts
operator|=
literal|true
expr_stmt|;
assert|assert
name|inputObjInspectors
operator|.
name|length
operator|==
literal|1
operator|:
literal|"FileSinkOperator should have 1 parent, but it has "
operator|+
name|inputObjInspectors
operator|.
name|length
assert|;
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|inputObjInspectors
index|[
literal|0
index|]
decl_stmt|;
name|this
operator|.
name|dpStartCol
operator|=
name|Utilities
operator|.
name|getDPColOffset
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|subSetOI
operator|=
operator|new
name|SubStructObjectInspector
argument_list|(
name|soi
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|dpStartCol
argument_list|)
expr_stmt|;
name|this
operator|.
name|dpVals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|numDynParts
argument_list|)
expr_stmt|;
name|this
operator|.
name|dpWritables
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|numDynParts
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|createBucketFiles
parameter_list|(
name|FSPaths
name|fsp
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|int
name|filesIdx
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|seenBuckets
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|totalFiles
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|this
operator|.
name|getExecContext
argument_list|()
operator|!=
literal|null
operator|&&
name|this
operator|.
name|getExecContext
argument_list|()
operator|.
name|getFileId
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"replace taskId from execContext "
argument_list|)
expr_stmt|;
block|}
name|taskId
operator|=
name|Utilities
operator|.
name|replaceTaskIdFromFilename
argument_list|(
name|taskId
argument_list|,
name|this
operator|.
name|getExecContext
argument_list|()
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"new taskId: FS "
operator|+
name|taskId
argument_list|)
expr_stmt|;
block|}
assert|assert
operator|!
name|multiFileSpray
assert|;
assert|assert
name|totalFiles
operator|==
literal|1
assert|;
block|}
name|int
name|bucketNum
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|multiFileSpray
condition|)
block|{
name|key
operator|.
name|setHashCode
argument_list|(
name|idx
argument_list|)
expr_stmt|;
comment|// Does this hashcode belong to this reducer
name|int
name|numReducers
init|=
name|totalFiles
operator|/
name|numFiles
decl_stmt|;
if|if
condition|(
name|numReducers
operator|>
literal|1
condition|)
block|{
name|int
name|currReducer
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|Utilities
operator|.
name|getTaskIdFromFilename
argument_list|(
name|Utilities
operator|.
name|getTaskId
argument_list|(
name|hconf
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|reducerIdx
init|=
name|prtner
operator|.
name|getPartition
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|numReducers
argument_list|)
decl_stmt|;
if|if
condition|(
name|currReducer
operator|!=
name|reducerIdx
condition|)
block|{
continue|continue;
block|}
block|}
name|bucketNum
operator|=
name|prtner
operator|.
name|getBucket
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|totalFiles
argument_list|)
expr_stmt|;
if|if
condition|(
name|seenBuckets
operator|.
name|contains
argument_list|(
name|bucketNum
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|seenBuckets
operator|.
name|add
argument_list|(
name|bucketNum
argument_list|)
expr_stmt|;
name|bucketMap
operator|.
name|put
argument_list|(
name|bucketNum
argument_list|,
name|filesIdx
argument_list|)
expr_stmt|;
name|taskId
operator|=
name|Utilities
operator|.
name|replaceTaskIdFromFilename
argument_list|(
name|Utilities
operator|.
name|getTaskId
argument_list|(
name|hconf
argument_list|)
argument_list|,
name|bucketNum
argument_list|)
expr_stmt|;
block|}
name|createBucketForFileIdx
argument_list|(
name|fsp
argument_list|,
name|filesIdx
argument_list|)
expr_stmt|;
name|filesIdx
operator|++
expr_stmt|;
block|}
assert|assert
name|filesIdx
operator|==
name|numFiles
assert|;
comment|// in recent hadoop versions, use deleteOnExit to clean tmp files.
if|if
condition|(
name|isNativeTable
operator|&&
name|fs
operator|!=
literal|null
operator|&&
name|fsp
operator|!=
literal|null
condition|)
block|{
name|autoDelete
operator|=
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|fsp
operator|.
name|outPaths
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|filesCreated
operator|=
literal|true
expr_stmt|;
block|}
specifier|protected
name|void
name|createBucketForFileIdx
parameter_list|(
name|FSPaths
name|fsp
parameter_list|,
name|int
name|filesIdx
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
if|if
condition|(
name|isNativeTable
condition|)
block|{
name|fsp
operator|.
name|finalPaths
index|[
name|filesIdx
index|]
operator|=
name|fsp
operator|.
name|getFinalPath
argument_list|(
name|taskId
argument_list|,
name|fsp
operator|.
name|tmpPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|isInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Final Path: FS "
operator|+
name|fsp
operator|.
name|finalPaths
index|[
name|filesIdx
index|]
argument_list|)
expr_stmt|;
block|}
name|fsp
operator|.
name|outPaths
index|[
name|filesIdx
index|]
operator|=
name|fsp
operator|.
name|getTaskOutPath
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
if|if
condition|(
name|isInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing to temp file: FS "
operator|+
name|fsp
operator|.
name|outPaths
index|[
name|filesIdx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fsp
operator|.
name|finalPaths
index|[
name|filesIdx
index|]
operator|=
name|fsp
operator|.
name|outPaths
index|[
name|filesIdx
index|]
operator|=
name|specPath
expr_stmt|;
block|}
comment|// The reason to keep these instead of using
comment|// OutputFormat.getRecordWriter() is that
comment|// getRecordWriter does not give us enough control over the file name that
comment|// we create.
name|String
name|extension
init|=
name|Utilities
operator|.
name|getFileExtension
argument_list|(
name|jc
argument_list|,
name|isCompressed
argument_list|,
name|hiveOutputFormat
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bDynParts
operator|&&
operator|!
name|this
operator|.
name|isSkewedStoredAsSubDirectories
condition|)
block|{
name|fsp
operator|.
name|finalPaths
index|[
name|filesIdx
index|]
operator|=
name|fsp
operator|.
name|getFinalPath
argument_list|(
name|taskId
argument_list|,
name|parent
argument_list|,
name|extension
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fsp
operator|.
name|finalPaths
index|[
name|filesIdx
index|]
operator|=
name|fsp
operator|.
name|getFinalPath
argument_list|(
name|taskId
argument_list|,
name|fsp
operator|.
name|tmpPath
argument_list|,
name|extension
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"New Final Path: FS "
operator|+
name|fsp
operator|.
name|finalPaths
index|[
name|filesIdx
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isNativeTable
condition|)
block|{
comment|// in recent hadoop versions, use deleteOnExit to clean tmp files.
name|autoDelete
operator|=
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|fsp
operator|.
name|outPaths
index|[
name|filesIdx
index|]
argument_list|)
expr_stmt|;
block|}
name|Utilities
operator|.
name|copyTableJobPropertiesToConf
argument_list|(
name|conf
operator|.
name|getTableInfo
argument_list|()
argument_list|,
name|jc
argument_list|)
expr_stmt|;
comment|// only create bucket files only if no dynamic partitions,
comment|// buckets of dynamic partitions will be created for each newly created partition
if|if
condition|(
name|conf
operator|.
name|getWriteType
argument_list|()
operator|==
name|AcidUtils
operator|.
name|Operation
operator|.
name|NOT_ACID
condition|)
block|{
name|fsp
operator|.
name|outWriters
index|[
name|filesIdx
index|]
operator|=
name|HiveFileFormatUtils
operator|.
name|getHiveRecordWriter
argument_list|(
name|jc
argument_list|,
name|conf
operator|.
name|getTableInfo
argument_list|()
argument_list|,
name|outputClass
argument_list|,
name|conf
argument_list|,
name|fsp
operator|.
name|outPaths
index|[
name|filesIdx
index|]
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
comment|// If the record writer provides stats, get it from there instead of the serde
name|statsFromRecordWriter
index|[
name|filesIdx
index|]
operator|=
name|fsp
operator|.
name|outWriters
index|[
name|filesIdx
index|]
operator|instanceof
name|StatsProvidingRecordWriter
expr_stmt|;
comment|// increment the CREATED_FILES counter
block|}
elseif|else
if|if
condition|(
name|conf
operator|.
name|getWriteType
argument_list|()
operator|==
name|AcidUtils
operator|.
name|Operation
operator|.
name|INSERT
condition|)
block|{
comment|// Only set up the updater for insert.  For update and delete we don't know unitl we see
comment|// the row.
name|ObjectInspector
name|inspector
init|=
name|bDynParts
condition|?
name|subSetOI
else|:
name|outputObjInspector
decl_stmt|;
name|int
name|acidBucketNum
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|Utilities
operator|.
name|getTaskIdFromFilename
argument_list|(
name|taskId
argument_list|)
argument_list|)
decl_stmt|;
name|fsp
operator|.
name|updaters
index|[
name|filesIdx
index|]
operator|=
name|HiveFileFormatUtils
operator|.
name|getAcidRecordUpdater
argument_list|(
name|jc
argument_list|,
name|conf
operator|.
name|getTableInfo
argument_list|()
argument_list|,
name|acidBucketNum
argument_list|,
name|conf
argument_list|,
name|fsp
operator|.
name|outPaths
index|[
name|filesIdx
index|]
argument_list|,
name|inspector
argument_list|,
name|reporter
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reporter
operator|!=
literal|null
condition|)
block|{
name|reporter
operator|.
name|incrCounter
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECOUNTERGROUP
argument_list|)
argument_list|,
name|Operator
operator|.
name|HIVECOUNTERCREATEDFILES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Report status to JT so that JT won't kill this task if closing takes too long    * due to too many files to close and the NN is overloaded.    *    * @return true if a new progress update is reported, false otherwise.    */
specifier|protected
name|boolean
name|updateProgress
parameter_list|()
block|{
if|if
condition|(
name|reporter
operator|!=
literal|null
operator|&&
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastProgressReport
operator|)
operator|>
name|timeOut
condition|)
block|{
name|reporter
operator|.
name|progress
argument_list|()
expr_stmt|;
name|lastProgressReport
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|protected
name|Writable
name|recordValue
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|runTimeNumRows
operator|++
expr_stmt|;
comment|/* Create list bucketing sub-directory only if stored-as-directories is on. */
name|String
name|lbDirName
init|=
literal|null
decl_stmt|;
name|lbDirName
operator|=
operator|(
name|lbCtx
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|generateListBucketingDirName
argument_list|(
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bDynParts
operator|&&
operator|!
name|filesCreated
condition|)
block|{
if|if
condition|(
name|lbDirName
operator|!=
literal|null
condition|)
block|{
name|FSPaths
name|fsp2
init|=
name|lookupListBucketingPaths
argument_list|(
name|lbDirName
argument_list|)
decl_stmt|;
block|}
else|else
block|{
name|createBucketFiles
argument_list|(
name|fsp
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|updateProgress
argument_list|()
expr_stmt|;
comment|// if DP is enabled, get the final output writers and prepare the real output row
assert|assert
name|inputObjInspectors
index|[
literal|0
index|]
operator|.
name|getCategory
argument_list|()
operator|==
name|ObjectInspector
operator|.
name|Category
operator|.
name|STRUCT
operator|:
literal|"input object inspector is not struct"
assert|;
if|if
condition|(
name|bDynParts
condition|)
block|{
comment|// we need to read bucket number which is the last column in value (after partition columns)
if|if
condition|(
name|conf
operator|.
name|getDpSortState
argument_list|()
operator|.
name|equals
argument_list|(
name|DPSortState
operator|.
name|PARTITION_BUCKET_SORTED
argument_list|)
condition|)
block|{
name|numDynParts
operator|+=
literal|1
expr_stmt|;
block|}
comment|// copy the DP column values from the input row to dpVals
name|dpVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dpWritables
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ObjectInspectorUtils
operator|.
name|partialCopyToStandardObject
argument_list|(
name|dpWritables
argument_list|,
name|row
argument_list|,
name|dpStartCol
argument_list|,
name|numDynParts
argument_list|,
operator|(
name|StructObjectInspector
operator|)
name|inputObjInspectors
index|[
literal|0
index|]
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
expr_stmt|;
comment|// get a set of RecordWriter based on the DP column values
comment|// pass the null value along to the escaping process to determine what the dir should be
for|for
control|(
name|Object
name|o
range|:
name|dpWritables
control|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|dpVals
operator|.
name|add
argument_list|(
name|dpCtx
operator|.
name|getDefaultPartitionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dpVals
operator|.
name|add
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|invalidPartitionVal
decl_stmt|;
if|if
condition|(
operator|(
name|invalidPartitionVal
operator|=
name|HiveStringUtils
operator|.
name|getPartitionValWithInvalidCharacter
argument_list|(
name|dpVals
argument_list|,
name|dpCtx
operator|.
name|getWhiteListPattern
argument_list|()
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveFatalException
argument_list|(
literal|"Partition value '"
operator|+
name|invalidPartitionVal
operator|+
literal|"' contains a character not matched by whitelist pattern '"
operator|+
name|dpCtx
operator|.
name|getWhiteListPattern
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"'.  "
operator|+
literal|"(configure with "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_PARTITION_NAME_WHITELIST_PATTERN
operator|.
name|varname
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|fpaths
operator|=
name|getDynOutPaths
argument_list|(
name|dpVals
argument_list|,
name|lbDirName
argument_list|)
expr_stmt|;
comment|// use SubStructObjectInspector to serialize the non-partitioning columns in the input row
name|recordValue
operator|=
name|serializer
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|subSetOI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|lbDirName
operator|!=
literal|null
condition|)
block|{
name|fpaths
operator|=
name|lookupListBucketingPaths
argument_list|(
name|lbDirName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fpaths
operator|=
name|fsp
expr_stmt|;
block|}
name|recordValue
operator|=
name|serializer
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|inputObjInspectors
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// if serializer is ThriftJDBCBinarySerDe, then recordValue is null if the buffer is not full (the size of buffer
comment|// is kept track of in the SerDe)
if|if
condition|(
name|recordValue
operator|==
literal|null
condition|)
block|{
return|return;
block|}
block|}
name|rowOutWriters
operator|=
name|fpaths
operator|.
name|outWriters
expr_stmt|;
comment|// check if all record writers implement statistics. if atleast one RW
comment|// doesn't implement stats interface we will fallback to conventional way
comment|// of gathering stats
name|isCollectRWStats
operator|=
name|areAllTrue
argument_list|(
name|statsFromRecordWriter
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|isGatherStats
argument_list|()
operator|&&
operator|!
name|isCollectRWStats
condition|)
block|{
name|SerDeStats
name|stats
init|=
name|serializer
operator|.
name|getSerDeStats
argument_list|()
decl_stmt|;
if|if
condition|(
name|stats
operator|!=
literal|null
condition|)
block|{
name|fpaths
operator|.
name|stat
operator|.
name|addToStat
argument_list|(
name|StatsSetupConst
operator|.
name|RAW_DATA_SIZE
argument_list|,
name|stats
operator|.
name|getRawDataSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fpaths
operator|.
name|stat
operator|.
name|addToStat
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|++
name|numRows
operator|==
name|cntr
operator|)
operator|&&
name|isLogInfoEnabled
condition|)
block|{
name|cntr
operator|=
name|logEveryNRows
operator|==
literal|0
condition|?
name|cntr
operator|*
literal|10
else|:
name|numRows
operator|+
name|logEveryNRows
expr_stmt|;
if|if
condition|(
name|cntr
operator|<
literal|0
operator|||
name|numRows
operator|<
literal|0
condition|)
block|{
name|cntr
operator|=
literal|0
expr_stmt|;
name|numRows
operator|=
literal|1
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|toString
argument_list|()
operator|+
literal|": records written - "
operator|+
name|numRows
argument_list|)
expr_stmt|;
block|}
comment|// This should always be 0 for the final result file
name|int
name|writerOffset
init|=
name|findWriterOffset
argument_list|(
name|row
argument_list|)
decl_stmt|;
comment|// This if/else chain looks ugly in the inner loop, but given that it will be 100% the same
comment|// for a given operator branch prediction should work quite nicely on it.
comment|// RecordUpdateer expects to get the actual row, not a serialized version of it.  Thus we
comment|// pass the row rather than recordValue.
if|if
condition|(
name|conf
operator|.
name|getWriteType
argument_list|()
operator|==
name|AcidUtils
operator|.
name|Operation
operator|.
name|NOT_ACID
condition|)
block|{
name|rowOutWriters
index|[
name|writerOffset
index|]
operator|.
name|write
argument_list|(
name|recordValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|conf
operator|.
name|getWriteType
argument_list|()
operator|==
name|AcidUtils
operator|.
name|Operation
operator|.
name|INSERT
condition|)
block|{
name|fpaths
operator|.
name|updaters
index|[
name|writerOffset
index|]
operator|.
name|insert
argument_list|(
name|conf
operator|.
name|getTransactionId
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO I suspect we could skip much of the stuff above this in the function in the case
comment|// of update and delete.  But I don't understand all of the side effects of the above
comment|// code and don't want to skip over it yet.
comment|// Find the bucket id, and switch buckets if need to
name|ObjectInspector
name|rowInspector
init|=
name|bDynParts
condition|?
name|subSetOI
else|:
name|outputObjInspector
decl_stmt|;
name|Object
name|recId
init|=
operator|(
operator|(
name|StructObjectInspector
operator|)
name|rowInspector
operator|)
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|recIdField
argument_list|)
decl_stmt|;
name|int
name|bucketNum
init|=
name|bucketInspector
operator|.
name|get
argument_list|(
name|recIdInspector
operator|.
name|getStructFieldData
argument_list|(
name|recId
argument_list|,
name|bucketField
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fpaths
operator|.
name|acidLastBucket
operator|!=
name|bucketNum
condition|)
block|{
name|fpaths
operator|.
name|acidLastBucket
operator|=
name|bucketNum
expr_stmt|;
comment|// Switch files
name|fpaths
operator|.
name|updaters
index|[
name|conf
operator|.
name|getDpSortState
argument_list|()
operator|.
name|equals
argument_list|(
name|DPSortState
operator|.
name|PARTITION_BUCKET_SORTED
argument_list|)
condition|?
literal|0
else|:
operator|++
name|fpaths
operator|.
name|acidFileOffset
index|]
operator|=
name|HiveFileFormatUtils
operator|.
name|getAcidRecordUpdater
argument_list|(
name|jc
argument_list|,
name|conf
operator|.
name|getTableInfo
argument_list|()
argument_list|,
name|bucketNum
argument_list|,
name|conf
argument_list|,
name|fpaths
operator|.
name|outPaths
index|[
name|conf
operator|.
name|getDpSortState
argument_list|()
operator|.
name|equals
argument_list|(
name|DPSortState
operator|.
name|PARTITION_BUCKET_SORTED
argument_list|)
condition|?
literal|0
else|:
name|fpaths
operator|.
name|acidFileOffset
index|]
argument_list|,
name|rowInspector
argument_list|,
name|reporter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDebugEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created updater for bucket number "
operator|+
name|bucketNum
operator|+
literal|" using file "
operator|+
name|fpaths
operator|.
name|outPaths
index|[
name|conf
operator|.
name|getDpSortState
argument_list|()
operator|.
name|equals
argument_list|(
name|DPSortState
operator|.
name|PARTITION_BUCKET_SORTED
argument_list|)
condition|?
literal|0
else|:
name|fpaths
operator|.
name|acidFileOffset
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|conf
operator|.
name|getWriteType
argument_list|()
operator|==
name|AcidUtils
operator|.
name|Operation
operator|.
name|UPDATE
condition|)
block|{
name|fpaths
operator|.
name|updaters
index|[
name|conf
operator|.
name|getDpSortState
argument_list|()
operator|.
name|equals
argument_list|(
name|DPSortState
operator|.
name|PARTITION_BUCKET_SORTED
argument_list|)
condition|?
literal|0
else|:
name|fpaths
operator|.
name|acidFileOffset
index|]
operator|.
name|update
argument_list|(
name|conf
operator|.
name|getTransactionId
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|conf
operator|.
name|getWriteType
argument_list|()
operator|==
name|AcidUtils
operator|.
name|Operation
operator|.
name|DELETE
condition|)
block|{
name|fpaths
operator|.
name|updaters
index|[
name|conf
operator|.
name|getDpSortState
argument_list|()
operator|.
name|equals
argument_list|(
name|DPSortState
operator|.
name|PARTITION_BUCKET_SORTED
argument_list|)
condition|?
literal|0
else|:
name|fpaths
operator|.
name|acidFileOffset
index|]
operator|.
name|delete
argument_list|(
name|conf
operator|.
name|getTransactionId
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unknown write type "
operator|+
name|conf
operator|.
name|getWriteType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|boolean
name|areAllTrue
parameter_list|(
name|boolean
index|[]
name|statsFromRW
parameter_list|)
block|{
comment|// If we are doing an acid operation they will always all be true as RecordUpdaters always
comment|// collect stats
if|if
condition|(
name|conf
operator|.
name|getWriteType
argument_list|()
operator|!=
name|AcidUtils
operator|.
name|Operation
operator|.
name|NOT_ACID
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|boolean
name|b
range|:
name|statsFromRW
control|)
block|{
if|if
condition|(
operator|!
name|b
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|int
name|findWriterOffset
parameter_list|(
name|Object
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|multiFileSpray
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
name|Object
index|[]
name|bucketFieldValues
init|=
operator|new
name|Object
index|[
name|partitionEval
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitionEval
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bucketFieldValues
index|[
name|i
index|]
operator|=
name|partitionEval
index|[
name|i
index|]
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|int
name|keyHashCode
init|=
name|ObjectInspectorUtils
operator|.
name|getBucketHashCode
argument_list|(
name|bucketFieldValues
argument_list|,
name|partitionObjectInspectors
argument_list|)
decl_stmt|;
name|key
operator|.
name|setHashCode
argument_list|(
name|keyHashCode
argument_list|)
expr_stmt|;
name|int
name|bucketNum
init|=
name|prtner
operator|.
name|getBucket
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|totalFiles
argument_list|)
decl_stmt|;
return|return
name|bucketMap
operator|.
name|get
argument_list|(
name|bucketNum
argument_list|)
return|;
block|}
block|}
comment|/**    * Lookup list bucketing path.    * @param lbDirName    * @return    * @throws HiveException    */
specifier|protected
name|FSPaths
name|lookupListBucketingPaths
parameter_list|(
name|String
name|lbDirName
parameter_list|)
throws|throws
name|HiveException
block|{
name|FSPaths
name|fsp2
init|=
name|valToPaths
operator|.
name|get
argument_list|(
name|lbDirName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsp2
operator|==
literal|null
condition|)
block|{
name|fsp2
operator|=
name|createNewPaths
argument_list|(
name|lbDirName
argument_list|)
expr_stmt|;
block|}
return|return
name|fsp2
return|;
block|}
comment|/**    * create new path.    *    * @param dirName    * @return    * @throws HiveException    */
specifier|private
name|FSPaths
name|createNewPaths
parameter_list|(
name|String
name|dirName
parameter_list|)
throws|throws
name|HiveException
block|{
name|FSPaths
name|fsp2
init|=
operator|new
name|FSPaths
argument_list|(
name|specPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|childSpecPathDynLinkedPartitions
operator|!=
literal|null
condition|)
block|{
name|fsp2
operator|.
name|tmpPath
operator|=
operator|new
name|Path
argument_list|(
name|fsp2
operator|.
name|tmpPath
argument_list|,
name|dirName
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|childSpecPathDynLinkedPartitions
argument_list|)
expr_stmt|;
name|fsp2
operator|.
name|taskOutputTempPath
operator|=
operator|new
name|Path
argument_list|(
name|fsp2
operator|.
name|taskOutputTempPath
argument_list|,
name|dirName
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|childSpecPathDynLinkedPartitions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fsp2
operator|.
name|tmpPath
operator|=
operator|new
name|Path
argument_list|(
name|fsp2
operator|.
name|tmpPath
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
name|fsp2
operator|.
name|taskOutputTempPath
operator|=
operator|new
name|Path
argument_list|(
name|fsp2
operator|.
name|taskOutputTempPath
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|conf
operator|.
name|getDpSortState
argument_list|()
operator|.
name|equals
argument_list|(
name|DPSortState
operator|.
name|PARTITION_BUCKET_SORTED
argument_list|)
condition|)
block|{
name|createBucketFiles
argument_list|(
name|fsp2
argument_list|)
expr_stmt|;
name|valToPaths
operator|.
name|put
argument_list|(
name|dirName
argument_list|,
name|fsp2
argument_list|)
expr_stmt|;
block|}
return|return
name|fsp2
return|;
block|}
comment|/**    * Generate list bucketing directory name from a row.    * @param row row to process.    * @return directory name.    */
specifier|protected
name|String
name|generateListBucketingDirName
parameter_list|(
name|Object
name|row
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isSkewedStoredAsSubDirectories
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|lbDirName
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|standObjs
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|skewedCols
init|=
name|lbCtx
operator|.
name|getSkewedColNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|allSkewedVals
init|=
name|lbCtx
operator|.
name|getSkewedColValues
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|skewedValsCandidate
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|locationMap
init|=
name|lbCtx
operator|.
name|getLbLocationMap
argument_list|()
decl_stmt|;
comment|/* Convert input row to standard objects. */
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|standObjs
argument_list|,
name|row
argument_list|,
operator|(
name|StructObjectInspector
operator|)
name|inputObjInspectors
index|[
literal|0
index|]
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|standObjs
operator|.
name|size
argument_list|()
operator|>=
name|skewedCols
operator|.
name|size
argument_list|()
operator|)
operator|:
literal|"The row has less number of columns than no. of skewed column."
assert|;
name|skewedValsCandidate
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|skewedCols
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SkewedColumnPositionPair
name|posPair
range|:
name|lbCtx
operator|.
name|getRowSkewedIndex
argument_list|()
control|)
block|{
name|skewedValsCandidate
operator|.
name|add
argument_list|(
name|posPair
operator|.
name|getSkewColPosition
argument_list|()
argument_list|,
name|standObjs
operator|.
name|get
argument_list|(
name|posPair
operator|.
name|getTblColPosition
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* The row matches skewed column names. */
if|if
condition|(
name|allSkewedVals
operator|.
name|contains
argument_list|(
name|skewedValsCandidate
argument_list|)
condition|)
block|{
comment|/* matches skewed values. */
name|lbDirName
operator|=
name|FileUtils
operator|.
name|makeListBucketingDirName
argument_list|(
name|skewedCols
argument_list|,
name|skewedValsCandidate
argument_list|)
expr_stmt|;
name|locationMap
operator|.
name|put
argument_list|(
name|skewedValsCandidate
argument_list|,
name|lbDirName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* create default directory. */
name|lbDirName
operator|=
name|FileUtils
operator|.
name|makeDefaultListBucketingDirName
argument_list|(
name|skewedCols
argument_list|,
name|lbCtx
operator|.
name|getDefaultDirName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|defaultKey
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|lbCtx
operator|.
name|getDefaultKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|locationMap
operator|.
name|containsKey
argument_list|(
name|defaultKey
argument_list|)
condition|)
block|{
name|locationMap
operator|.
name|put
argument_list|(
name|defaultKey
argument_list|,
name|lbDirName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lbDirName
return|;
block|}
specifier|protected
name|FSPaths
name|getDynOutPaths
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|row
parameter_list|,
name|String
name|lbDirName
parameter_list|)
throws|throws
name|HiveException
block|{
name|FSPaths
name|fp
decl_stmt|;
comment|// get the path corresponding to the dynamic partition columns,
name|String
name|dpDir
init|=
name|getDynPartDirectory
argument_list|(
name|row
argument_list|,
name|dpColNames
argument_list|)
decl_stmt|;
name|String
name|pathKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dpDir
operator|!=
literal|null
condition|)
block|{
name|dpDir
operator|=
name|appendToSource
argument_list|(
name|lbDirName
argument_list|,
name|dpDir
argument_list|)
expr_stmt|;
name|pathKey
operator|=
name|dpDir
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getDpSortState
argument_list|()
operator|.
name|equals
argument_list|(
name|DPSortState
operator|.
name|PARTITION_BUCKET_SORTED
argument_list|)
condition|)
block|{
name|String
name|buckNum
init|=
name|row
operator|.
name|get
argument_list|(
name|row
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|taskId
operator|=
name|Utilities
operator|.
name|replaceTaskIdFromFilename
argument_list|(
name|taskId
argument_list|,
name|buckNum
argument_list|)
expr_stmt|;
name|pathKey
operator|=
name|appendToSource
argument_list|(
name|taskId
argument_list|,
name|dpDir
argument_list|)
expr_stmt|;
block|}
name|FSPaths
name|fsp2
init|=
name|valToPaths
operator|.
name|get
argument_list|(
name|pathKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsp2
operator|==
literal|null
condition|)
block|{
comment|// check # of dp
if|if
condition|(
name|valToPaths
operator|.
name|size
argument_list|()
operator|>
name|maxPartitions
condition|)
block|{
comment|// we cannot proceed and need to tell the hive client that retries won't succeed either
throw|throw
operator|new
name|HiveFatalException
argument_list|(
name|ErrorMsg
operator|.
name|DYNAMIC_PARTITIONS_TOO_MANY_PER_NODE_ERROR
operator|.
name|getErrorCodedMsg
argument_list|()
operator|+
literal|"Maximum was set to "
operator|+
name|maxPartitions
operator|+
literal|" partitions per node"
operator|+
literal|", number of dynamic partitions on this node: "
operator|+
name|valToPaths
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|conf
operator|.
name|getDpSortState
argument_list|()
operator|.
name|equals
argument_list|(
name|DPSortState
operator|.
name|NONE
argument_list|)
operator|&&
name|prevFsp
operator|!=
literal|null
condition|)
block|{
comment|// close the previous fsp as it is no longer needed
name|prevFsp
operator|.
name|closeWriters
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// since we are closing the previous fsp's record writers, we need to see if we can get
comment|// stats from the record writer and store in the previous fsp that is cached
if|if
condition|(
name|conf
operator|.
name|isGatherStats
argument_list|()
operator|&&
name|isCollectRWStats
condition|)
block|{
name|SerDeStats
name|stats
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getWriteType
argument_list|()
operator|==
name|AcidUtils
operator|.
name|Operation
operator|.
name|NOT_ACID
condition|)
block|{
name|RecordWriter
name|outWriter
init|=
name|prevFsp
operator|.
name|outWriters
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|outWriter
operator|!=
literal|null
condition|)
block|{
name|stats
operator|=
operator|(
operator|(
name|StatsProvidingRecordWriter
operator|)
name|outWriter
operator|)
operator|.
name|getStats
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|prevFsp
operator|.
name|updaters
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
name|stats
operator|=
name|prevFsp
operator|.
name|updaters
index|[
literal|0
index|]
operator|.
name|getStats
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|stats
operator|!=
literal|null
condition|)
block|{
name|prevFsp
operator|.
name|stat
operator|.
name|addToStat
argument_list|(
name|StatsSetupConst
operator|.
name|RAW_DATA_SIZE
argument_list|,
name|stats
operator|.
name|getRawDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|prevFsp
operator|.
name|stat
operator|.
name|addToStat
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
name|stats
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// let writers release the memory for garbage collection
name|prevFsp
operator|.
name|outWriters
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
name|prevFsp
operator|=
literal|null
expr_stmt|;
block|}
name|fsp2
operator|=
name|createNewPaths
argument_list|(
name|dpDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|prevFsp
operator|==
literal|null
condition|)
block|{
name|prevFsp
operator|=
name|fsp2
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|getDpSortState
argument_list|()
operator|.
name|equals
argument_list|(
name|DPSortState
operator|.
name|PARTITION_BUCKET_SORTED
argument_list|)
condition|)
block|{
name|createBucketForFileIdx
argument_list|(
name|fsp2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|valToPaths
operator|.
name|put
argument_list|(
name|pathKey
argument_list|,
name|fsp2
argument_list|)
expr_stmt|;
block|}
block|}
name|fp
operator|=
name|fsp2
expr_stmt|;
block|}
else|else
block|{
name|fp
operator|=
name|fsp
expr_stmt|;
block|}
return|return
name|fp
return|;
block|}
comment|/**    * Append dir to source dir    * @param appendDir    * @param srcDir    * @return    */
specifier|private
name|String
name|appendToSource
parameter_list|(
name|String
name|appendDir
parameter_list|,
name|String
name|srcDir
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|srcDir
argument_list|)
decl_stmt|;
name|srcDir
operator|=
operator|(
name|appendDir
operator|==
literal|null
operator|)
condition|?
name|srcDir
else|:
name|builder
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|appendDir
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|srcDir
return|;
block|}
comment|// given the current input row, the mapping for input col info to dp columns, and # of dp cols,
comment|// return the relative path corresponding to the row.
comment|// e.g., ds=2008-04-08/hr=11
specifier|private
name|String
name|getDynPartDirectory
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|row
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dpColNames
parameter_list|)
block|{
return|return
name|FileUtils
operator|.
name|makePartName
argument_list|(
name|dpColNames
argument_list|,
name|row
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
name|row_count
operator|.
name|set
argument_list|(
name|numRows
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|toString
argument_list|()
operator|+
literal|": records written - "
operator|+
name|numRows
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bDynParts
operator|&&
operator|!
name|filesCreated
condition|)
block|{
name|boolean
name|skipFiles
init|=
literal|"tez"
operator|.
name|equalsIgnoreCase
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hconf
argument_list|,
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|skipFiles
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|conf
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getOutputFileFormatClass
argument_list|()
decl_stmt|;
name|skipFiles
operator|=
operator|!
name|StreamingOutputFormat
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|skipFiles
condition|)
block|{
name|createBucketFiles
argument_list|(
name|fsp
argument_list|)
expr_stmt|;
block|}
block|}
name|lastProgressReport
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|abort
condition|)
block|{
comment|// If serializer is ThriftJDBCBinarySerDe, then it buffers rows to a certain limit (hive.server2.thrift.resultset.max.fetch.size)
comment|// and serializes the whole batch when the buffer is full. The serialize returns null if the buffer is not full
comment|// (the size of buffer is kept track of in the ThriftJDBCBinarySerDe).
if|if
condition|(
name|conf
operator|.
name|isUsingThriftJDBCBinarySerDe
argument_list|()
condition|)
block|{
try|try
block|{
name|recordValue
operator|=
name|serializer
operator|.
name|serialize
argument_list|(
literal|null
argument_list|,
name|inputObjInspectors
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|fpaths
condition|)
block|{
name|rowOutWriters
operator|=
name|fpaths
operator|.
name|outWriters
expr_stmt|;
name|rowOutWriters
index|[
literal|0
index|]
operator|.
name|write
argument_list|(
name|recordValue
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SerDeException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|FSPaths
name|fsp
range|:
name|valToPaths
operator|.
name|values
argument_list|()
control|)
block|{
name|fsp
operator|.
name|closeWriters
argument_list|(
name|abort
argument_list|)
expr_stmt|;
comment|// before closing the operator check if statistics gathering is requested
comment|// and is provided by record writer. this is different from the statistics
comment|// gathering done in processOp(). In processOp(), for each row added
comment|// serde statistics about the row is gathered and accumulated in hashmap.
comment|// this adds more overhead to the actual processing of row. But if the
comment|// record writer already gathers the statistics, it can simply return the
comment|// accumulated statistics which will be aggregated in case of spray writers
if|if
condition|(
name|conf
operator|.
name|isGatherStats
argument_list|()
operator|&&
name|isCollectRWStats
condition|)
block|{
if|if
condition|(
name|conf
operator|.
name|getWriteType
argument_list|()
operator|==
name|AcidUtils
operator|.
name|Operation
operator|.
name|NOT_ACID
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|fsp
operator|.
name|outWriters
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|RecordWriter
name|outWriter
init|=
name|fsp
operator|.
name|outWriters
index|[
name|idx
index|]
decl_stmt|;
if|if
condition|(
name|outWriter
operator|!=
literal|null
condition|)
block|{
name|SerDeStats
name|stats
init|=
operator|(
operator|(
name|StatsProvidingRecordWriter
operator|)
name|outWriter
operator|)
operator|.
name|getStats
argument_list|()
decl_stmt|;
if|if
condition|(
name|stats
operator|!=
literal|null
condition|)
block|{
name|fsp
operator|.
name|stat
operator|.
name|addToStat
argument_list|(
name|StatsSetupConst
operator|.
name|RAW_DATA_SIZE
argument_list|,
name|stats
operator|.
name|getRawDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|fsp
operator|.
name|stat
operator|.
name|addToStat
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
name|stats
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fsp
operator|.
name|updaters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fsp
operator|.
name|updaters
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|SerDeStats
name|stats
init|=
name|fsp
operator|.
name|updaters
index|[
name|i
index|]
operator|.
name|getStats
argument_list|()
decl_stmt|;
if|if
condition|(
name|stats
operator|!=
literal|null
condition|)
block|{
name|fsp
operator|.
name|stat
operator|.
name|addToStat
argument_list|(
name|StatsSetupConst
operator|.
name|RAW_DATA_SIZE
argument_list|,
name|stats
operator|.
name|getRawDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|fsp
operator|.
name|stat
operator|.
name|addToStat
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
name|stats
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|isNativeTable
condition|)
block|{
name|fsp
operator|.
name|commit
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Only publish stats if this operator's flag was set to gather stats
if|if
condition|(
name|conf
operator|.
name|isGatherStats
argument_list|()
condition|)
block|{
name|publishStats
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Will come here if an Exception was thrown in map() or reduce().
comment|// Hadoop always call close() even if an Exception was thrown in map() or
comment|// reduce().
for|for
control|(
name|FSPaths
name|fsp
range|:
name|valToPaths
operator|.
name|values
argument_list|()
control|)
block|{
name|fsp
operator|.
name|abortWriters
argument_list|(
name|fs
argument_list|,
name|abort
argument_list|,
operator|!
name|autoDelete
operator|&&
name|isNativeTable
argument_list|)
expr_stmt|;
block|}
block|}
name|fsp
operator|=
name|prevFsp
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|closeOp
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the name of the operator    */
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getOperatorName
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|String
name|getOperatorName
parameter_list|()
block|{
return|return
literal|"FS"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|jobCloseOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|,
name|boolean
name|success
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
if|if
condition|(
operator|(
name|conf
operator|!=
literal|null
operator|)
operator|&&
name|isNativeTable
condition|)
block|{
name|Path
name|specPath
init|=
name|conf
operator|.
name|getDirName
argument_list|()
decl_stmt|;
name|DynamicPartitionCtx
name|dpCtx
init|=
name|conf
operator|.
name|getDynPartCtx
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|isLinkedFileSink
argument_list|()
operator|&&
operator|(
name|dpCtx
operator|!=
literal|null
operator|)
condition|)
block|{
name|specPath
operator|=
name|conf
operator|.
name|getParentDir
argument_list|()
expr_stmt|;
block|}
name|Utilities
operator|.
name|mvFileToFinalPath
argument_list|(
name|specPath
argument_list|,
name|hconf
argument_list|,
name|success
argument_list|,
name|LOG
argument_list|,
name|dpCtx
argument_list|,
name|conf
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|super
operator|.
name|jobCloseOp
argument_list|(
name|hconf
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|FILESINK
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|augmentPlan
parameter_list|()
block|{
name|PlanUtils
operator|.
name|configureOutputJobPropertiesForStorageHandler
argument_list|(
name|getConf
argument_list|()
operator|.
name|getTableInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|FileSystem
name|ignored
parameter_list|,
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hiveOutputFormat
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|createHiveOutputFormat
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|ex
parameter_list|)
block|{
name|logOutputFormatError
argument_list|(
name|job
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|conf
operator|.
name|getTableInfo
argument_list|()
operator|.
name|isNonNative
argument_list|()
condition|)
block|{
comment|//check the ouput specs only if it is a storage handler (native tables's outputformats does
comment|//not set the job's output properties correctly)
try|try
block|{
name|hiveOutputFormat
operator|.
name|checkOutputSpecs
argument_list|(
name|ignored
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodError
name|e
parameter_list|)
block|{
comment|//For BC, ignore this for now, but leave a log message
name|LOG
operator|.
name|warn
argument_list|(
literal|"HiveOutputFormat should implement checkOutputSpecs() method`"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|createHiveOutputFormat
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|hiveOutputFormat
operator|==
literal|null
condition|)
block|{
name|Utilities
operator|.
name|copyTableJobPropertiesToConf
argument_list|(
name|conf
operator|.
name|getTableInfo
argument_list|()
argument_list|,
name|hconf
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|hiveOutputFormat
operator|=
name|HiveFileFormatUtils
operator|.
name|getHiveOutputFormat
argument_list|(
name|hconf
argument_list|,
name|getConf
argument_list|()
operator|.
name|getTableInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|(
name|t
operator|instanceof
name|HiveException
operator|)
condition|?
operator|(
name|HiveException
operator|)
name|t
else|:
operator|new
name|HiveException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|publishStats
parameter_list|()
throws|throws
name|HiveException
block|{
name|boolean
name|isStatsReliable
init|=
name|conf
operator|.
name|isStatsReliable
argument_list|()
decl_stmt|;
comment|// Initializing a stats publisher
name|StatsPublisher
name|statsPublisher
init|=
name|Utilities
operator|.
name|getStatsPublisher
argument_list|(
name|jc
argument_list|)
decl_stmt|;
if|if
condition|(
name|statsPublisher
operator|==
literal|null
condition|)
block|{
comment|// just return, stats gathering should not block the main query
name|LOG
operator|.
name|error
argument_list|(
literal|"StatsPublishing error: StatsPublisher is not initialized."
argument_list|)
expr_stmt|;
if|if
condition|(
name|isStatsReliable
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|STATSPUBLISHER_NOT_OBTAINED
operator|.
name|getErrorCodedMsg
argument_list|()
argument_list|)
throw|;
block|}
return|return;
block|}
name|StatsCollectionContext
name|sContext
init|=
operator|new
name|StatsCollectionContext
argument_list|(
name|hconf
argument_list|)
decl_stmt|;
name|sContext
operator|.
name|setStatsTmpDir
argument_list|(
name|conf
operator|.
name|getStatsTmpDir
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|statsPublisher
operator|.
name|connect
argument_list|(
name|sContext
argument_list|)
condition|)
block|{
comment|// just return, stats gathering should not block the main query
name|LOG
operator|.
name|error
argument_list|(
literal|"StatsPublishing error: cannot connect to database"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isStatsReliable
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|STATSPUBLISHER_CONNECTION_ERROR
operator|.
name|getErrorCodedMsg
argument_list|()
argument_list|)
throw|;
block|}
return|return;
block|}
name|String
name|spSpec
init|=
name|conf
operator|.
name|getStaticSpec
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FSPaths
argument_list|>
name|entry
range|:
name|valToPaths
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fspKey
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// DP/LB
name|FSPaths
name|fspValue
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// for bucketed tables, hive.optimize.sort.dynamic.partition optimization
comment|// adds the taskId to the fspKey.
if|if
condition|(
name|conf
operator|.
name|getDpSortState
argument_list|()
operator|.
name|equals
argument_list|(
name|DPSortState
operator|.
name|PARTITION_BUCKET_SORTED
argument_list|)
condition|)
block|{
name|String
name|taskID
init|=
name|Utilities
operator|.
name|getTaskIdFromFilename
argument_list|(
name|fspKey
argument_list|)
decl_stmt|;
comment|// if length of (prefix/ds=__HIVE_DEFAULT_PARTITION__/000000_0) is greater than max key prefix
comment|// and if (prefix/ds=10/000000_0) is less than max key prefix, then former will get hashed
comment|// to a smaller prefix (MD5hash/000000_0) and later will stored as such in staging stats table.
comment|// When stats gets aggregated in StatsTask only the keys that starts with "prefix" will be fetched.
comment|// Now that (prefix/ds=__HIVE_DEFAULT_PARTITION__) is hashed to a smaller prefix it will
comment|// not be retrieved from staging table and hence not aggregated. To avoid this issue
comment|// we will remove the taskId from the key which is redundant anyway.
name|fspKey
operator|=
name|fspKey
operator|.
name|split
argument_list|(
name|taskID
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|// split[0] = DP, split[1] = LB
name|String
index|[]
name|split
init|=
name|splitKey
argument_list|(
name|fspKey
argument_list|)
decl_stmt|;
name|String
name|dpSpec
init|=
name|split
index|[
literal|0
index|]
decl_stmt|;
comment|// key = "database.table/SP/DP/"LB/
comment|// Hive store lowercase table name in metastore, and Counters is character case sensitive, so we
comment|// use lowercase table name as prefix here, as StatsTask get table name from metastore to fetch counter.
name|String
name|prefix
init|=
name|conf
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|prefix
operator|=
name|Utilities
operator|.
name|join
argument_list|(
name|prefix
argument_list|,
name|spSpec
argument_list|,
name|dpSpec
argument_list|)
expr_stmt|;
name|prefix
operator|=
name|prefix
operator|.
name|endsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|?
name|prefix
else|:
name|prefix
operator|+
name|Path
operator|.
name|SEPARATOR
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|statsToPublish
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|statType
range|:
name|fspValue
operator|.
name|stat
operator|.
name|getStoredStats
argument_list|()
control|)
block|{
name|statsToPublish
operator|.
name|put
argument_list|(
name|statType
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|fspValue
operator|.
name|stat
operator|.
name|getStat
argument_list|(
name|statType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|statsPublisher
operator|.
name|publishStat
argument_list|(
name|prefix
argument_list|,
name|statsToPublish
argument_list|)
condition|)
block|{
comment|// The original exception is lost.
comment|// Not changing the interface to maintain backward compatibility
if|if
condition|(
name|isStatsReliable
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|STATSPUBLISHER_PUBLISHING_ERROR
operator|.
name|getErrorCodedMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|sContext
operator|.
name|setIndexForTezUnion
argument_list|(
name|this
operator|.
name|getIndexForTezUnion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|statsPublisher
operator|.
name|closeConnection
argument_list|(
name|sContext
argument_list|)
condition|)
block|{
comment|// The original exception is lost.
comment|// Not changing the interface to maintain backward compatibility
if|if
condition|(
name|isStatsReliable
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|STATSPUBLISHER_CLOSING_ERROR
operator|.
name|getErrorCodedMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * This is server side code to create key in order to save statistics to stats database.    * Client side will read it via StatsTask.java aggregateStats().    * Client side reads it via db query prefix which is based on partition spec.    * Since store-as-subdir information is not part of partition spec, we have to    * remove store-as-subdir information from variable "keyPrefix" calculation.    * But we have to keep store-as-subdir information in variable "key" calculation    * since each skewed value has a row in stats db and "key" is db key,    * otherwise later value overwrites previous value.    * Performance impact due to string handling is minimum since this method is    * only called once in FileSinkOperator closeOp().    * For example,    * create table test skewed by (key, value) on (('484','val_484') stored as DIRECTORIES;    * skewedValueDirList contains 2 elements:    * 1. key=484/value=val_484    * 2. HIVE_LIST_BUCKETING_DEFAULT_DIR_NAME/HIVE_LIST_BUCKETING_DEFAULT_DIR_NAME    * Case #1: Static partition with store-as-sub-dir    * spSpec has SP path    * fspKey has either    * key=484/value=val_484 or    * HIVE_LIST_BUCKETING_DEFAULT_DIR_NAME/HIVE_LIST_BUCKETING_DEFAULT_DIR_NAME    * After filter, fspKey is empty, storedAsDirPostFix has either    * key=484/value=val_484 or    * HIVE_LIST_BUCKETING_DEFAULT_DIR_NAME/HIVE_LIST_BUCKETING_DEFAULT_DIR_NAME    * so, at the end, "keyPrefix" doesnt have subdir information but "key" has    * Case #2: Dynamic partition with store-as-sub-dir. Assume dp part is hr    * spSpec has SP path    * fspKey has either    * hr=11/key=484/value=val_484 or    * hr=11/HIVE_LIST_BUCKETING_DEFAULT_DIR_NAME/HIVE_LIST_BUCKETING_DEFAULT_DIR_NAME    * After filter, fspKey is hr=11, storedAsDirPostFix has either    * key=484/value=val_484 or    * HIVE_LIST_BUCKETING_DEFAULT_DIR_NAME/HIVE_LIST_BUCKETING_DEFAULT_DIR_NAME    * so, at the end, "keyPrefix" doesn't have subdir information from skewed but "key" has    *    * In a word, fspKey is consists of DP(dynamic partition spec) + LB(list bucketing spec)    * In stats publishing, full partition spec consists of prefix part of stat key    * but list bucketing spec is regarded as a postfix of stat key. So we split it here.    */
specifier|private
name|String
index|[]
name|splitKey
parameter_list|(
name|String
name|fspKey
parameter_list|)
block|{
if|if
condition|(
operator|!
name|fspKey
operator|.
name|isEmpty
argument_list|()
operator|&&
name|isSkewedStoredAsSubDirectories
condition|)
block|{
for|for
control|(
name|String
name|dir
range|:
name|lbCtx
operator|.
name|getSkewedValuesDirNames
argument_list|()
control|)
block|{
name|int
name|index
init|=
name|fspKey
operator|.
name|indexOf
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
name|fspKey
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
block|,
name|fspKey
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
block|}
return|;
block|}
block|}
block|}
return|return
operator|new
name|String
index|[]
block|{
name|fspKey
block|,
literal|null
block|}
return|;
block|}
block|}
end_class

end_unit

