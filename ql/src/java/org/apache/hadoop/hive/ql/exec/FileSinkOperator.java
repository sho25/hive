begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|fileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IgnoreKeyTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|SerDeException
import|;
end_import

begin_comment
comment|/**  * File Sink operator implementation  **/
end_comment

begin_class
specifier|public
class|class
name|FileSinkOperator
extends|extends
name|TerminalOperator
argument_list|<
name|fileSinkDesc
argument_list|>
implements|implements
name|Serializable
block|{
specifier|public
specifier|static
interface|interface
name|RecordWriter
block|{
specifier|public
name|void
name|write
parameter_list|(
name|Writable
name|w
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|transient
specifier|protected
name|RecordWriter
name|outWriter
decl_stmt|;
specifier|transient
specifier|protected
name|FileSystem
name|fs
decl_stmt|;
specifier|transient
specifier|protected
name|Path
name|outPath
decl_stmt|;
specifier|transient
specifier|protected
name|Path
name|finalPath
decl_stmt|;
specifier|transient
specifier|protected
name|SerDe
name|serDe
decl_stmt|;
specifier|transient
specifier|protected
name|BytesWritable
name|commonKey
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
specifier|private
name|void
name|commit
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|rename
argument_list|(
name|outPath
argument_list|,
name|finalPath
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
operator|!
name|abort
condition|)
block|{
if|if
condition|(
name|outWriter
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|outWriter
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Error in committing output in file: "
operator|+
name|outPath
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
try|try
block|{
name|outWriter
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|finalPath
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|getDirName
argument_list|()
argument_list|,
name|Utilities
operator|.
name|getTaskId
argument_list|(
name|hconf
argument_list|)
argument_list|)
expr_stmt|;
name|outPath
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|getDirName
argument_list|()
argument_list|,
literal|"_tmp."
operator|+
name|Utilities
operator|.
name|getTaskId
argument_list|(
name|hconf
argument_list|)
argument_list|)
expr_stmt|;
name|OutputFormat
name|outputFormat
init|=
name|conf
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getOutputFileFormatClass
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|outputFormat
operator|instanceof
name|IgnoreKeyTextOutputFormat
condition|)
block|{
specifier|final
name|FSDataOutputStream
name|outStream
init|=
name|fs
operator|.
name|create
argument_list|(
name|outPath
argument_list|)
decl_stmt|;
name|outWriter
operator|=
operator|new
name|RecordWriter
argument_list|()
block|{
specifier|public
name|void
name|write
parameter_list|(
name|Writable
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
name|tr
init|=
operator|(
name|Text
operator|)
name|r
decl_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|tr
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|tr
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|IOException
block|{
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|outputFormat
operator|instanceof
name|SequenceFileOutputFormat
condition|)
block|{
specifier|final
name|SequenceFile
operator|.
name|Writer
name|outStream
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|hconf
argument_list|,
name|outPath
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|)
decl_stmt|;
name|outWriter
operator|=
operator|new
name|RecordWriter
argument_list|()
block|{
specifier|public
name|void
name|write
parameter_list|(
name|Writable
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|outStream
operator|.
name|append
argument_list|(
name|commonKey
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|IOException
block|{
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
comment|// should never come here - we should be catching this in ddl command
assert|assert
operator|(
literal|false
operator|)
assert|;
block|}
name|serDe
operator|=
name|conf
operator|.
name|getTableInfo
argument_list|()
operator|.
name|getSerdeClass
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|process
parameter_list|(
name|HiveObject
name|r
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
comment|// user SerDe to serialize r, and write it out
name|Writable
name|value
init|=
name|serDe
operator|.
name|serialize
argument_list|(
name|r
operator|.
name|getJavaObject
argument_list|()
argument_list|)
decl_stmt|;
name|outWriter
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

