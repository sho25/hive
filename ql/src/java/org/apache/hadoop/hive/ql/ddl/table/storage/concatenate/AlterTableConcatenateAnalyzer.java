begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|storage
operator|.
name|concatenate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLSemanticAnalyzerFactory
operator|.
name|DDLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AbstractAlterTableAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AlterTableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|partition
operator|.
name|PartitionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|storage
operator|.
name|compact
operator|.
name|AlterTableCompactDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ArchiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BasicStatsWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ListBucketingCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MoveWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|StatsWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_comment
comment|/**  * Analyzer for compact commands.  */
end_comment

begin_class
annotation|@
name|DDLType
argument_list|(
name|types
operator|=
block|{
name|HiveParser
operator|.
name|TOK_ALTERTABLE_MERGEFILES
block|,
name|HiveParser
operator|.
name|TOK_ALTERPARTITION_MERGEFILES
block|}
argument_list|)
specifier|public
class|class
name|AlterTableConcatenateAnalyzer
extends|extends
name|AbstractAlterTableAnalyzer
block|{
specifier|public
name|AlterTableConcatenateAnalyzer
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|analyzeCommand
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|ASTNode
name|command
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Table
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
name|compactAcidTable
argument_list|(
name|tableName
argument_list|,
name|partitionSpec
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// non-native and non-managed tables are not supported as MoveTask requires filenames to be in specific format,
comment|// violating which can cause data loss
if|if
condition|(
name|table
operator|.
name|isNonNative
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|CONCATENATE_UNSUPPORTED_TABLE_NON_NATIVE
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|table
operator|.
name|getTableType
argument_list|()
operator|!=
name|TableType
operator|.
name|MANAGED_TABLE
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|CONCATENATE_UNSUPPORTED_TABLE_NOT_MANAGED
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|concatenatePartitionedTable
argument_list|(
name|tableName
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|concatenateUnpartitionedTable
argument_list|(
name|tableName
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|compactAcidTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|)
block|{
name|boolean
name|isBlocking
init|=
operator|!
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|TRANSACTIONAL_CONCATENATE_NOBLOCK
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AlterTableCompactDesc
name|desc
init|=
operator|new
name|AlterTableCompactDesc
argument_list|(
name|tableName
argument_list|,
name|partitionSpec
argument_list|,
literal|"MAJOR"
argument_list|,
name|isBlocking
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rootTasks
operator|.
name|add
argument_list|(
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|getInputs
argument_list|()
argument_list|,
name|getOutputs
argument_list|()
argument_list|,
name|desc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|void
name|concatenatePartitionedTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|partitionSpec
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"source table "
operator|+
name|tableName
operator|+
literal|" is partitioned but no partition desc found."
argument_list|)
throw|;
block|}
name|Partition
name|part
init|=
name|PartitionUtils
operator|.
name|getPartition
argument_list|(
name|db
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"source table "
operator|+
name|tableName
operator|+
literal|" is partitioned but partition not found."
argument_list|)
throw|;
block|}
if|if
condition|(
name|ArchiveUtils
operator|.
name|isArchived
argument_list|(
name|part
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|CONCATENATE_UNSUPPORTED_PARTITION_ARCHIVED
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|Path
name|tablePath
init|=
name|table
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
name|partitionPath
init|=
name|part
operator|.
name|getDataLocation
argument_list|()
decl_stmt|;
name|Path
name|oldLocation
init|=
name|partitionPath
decl_stmt|;
comment|// if the table is in a different dfs than the partition, replace the partition's dfs with the table's dfs.
name|Path
name|newLocation
init|=
operator|new
name|Path
argument_list|(
name|tablePath
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|,
name|tablePath
operator|.
name|toUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|partitionPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|ListBucketingCtx
name|lbCtx
init|=
name|constructListBucketingCtx
argument_list|(
name|part
operator|.
name|getSkewedColNames
argument_list|()
argument_list|,
name|part
operator|.
name|getSkewedColValues
argument_list|()
argument_list|,
name|part
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
argument_list|,
name|part
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
init|=
name|part
operator|.
name|getBucketCols
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
init|=
literal|null
decl_stmt|;
try|try
block|{
name|inputFormatClass
operator|=
name|part
operator|.
name|getInputFormatClass
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|createConcatenateTasks
argument_list|(
name|tableName
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|,
name|oldLocation
argument_list|,
name|newLocation
argument_list|,
name|lbCtx
argument_list|,
name|bucketCols
argument_list|,
name|inputFormatClass
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|void
name|concatenateUnpartitionedTable
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Path
name|oldLocation
init|=
name|table
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
name|newLocation
init|=
name|table
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|ListBucketingCtx
name|lbCtx
init|=
name|constructListBucketingCtx
argument_list|(
name|table
operator|.
name|getSkewedColNames
argument_list|()
argument_list|,
name|table
operator|.
name|getSkewedColValues
argument_list|()
argument_list|,
name|table
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
argument_list|,
name|table
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
init|=
name|table
operator|.
name|getBucketCols
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
init|=
name|table
operator|.
name|getInputFormatClass
argument_list|()
decl_stmt|;
name|createConcatenateTasks
argument_list|(
name|tableName
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|,
name|oldLocation
argument_list|,
name|newLocation
argument_list|,
name|lbCtx
argument_list|,
name|bucketCols
argument_list|,
name|inputFormatClass
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|void
name|createConcatenateTasks
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|Path
name|oldLocation
parameter_list|,
name|Path
name|newLocation
parameter_list|,
name|ListBucketingCtx
name|lbCtx
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
operator|!
operator|(
name|inputFormatClass
operator|.
name|equals
argument_list|(
name|RCFileInputFormat
operator|.
name|class
argument_list|)
operator|||
name|inputFormatClass
operator|.
name|equals
argument_list|(
name|OrcInputFormat
operator|.
name|class
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|CONCATENATE_UNSUPPORTED_FILE_FORMAT
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|bucketCols
operator|!=
literal|null
operator|&&
name|bucketCols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|CONCATENATE_UNSUPPORTED_TABLE_BUCKETED
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|addInputsOutputsAlterTable
argument_list|(
name|tableName
argument_list|,
name|partitionSpec
argument_list|,
literal|null
argument_list|,
name|AlterTableType
operator|.
name|MERGEFILES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TableDesc
name|tableDesc
init|=
name|Utilities
operator|.
name|getTableDesc
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|Path
name|queryTmpDir
init|=
name|ctx
operator|.
name|getExternalTmpPath
argument_list|(
name|newLocation
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|mergeTask
init|=
name|createMergeTask
argument_list|(
name|tableName
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|,
name|oldLocation
argument_list|,
name|lbCtx
argument_list|,
name|inputFormatClass
argument_list|,
name|queryTmpDir
argument_list|)
decl_stmt|;
name|addMoveTask
argument_list|(
name|tableName
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|,
name|oldLocation
argument_list|,
name|newLocation
argument_list|,
name|lbCtx
argument_list|,
name|tableDesc
argument_list|,
name|queryTmpDir
argument_list|,
name|mergeTask
argument_list|)
expr_stmt|;
name|rootTasks
operator|.
name|add
argument_list|(
name|mergeTask
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|Task
argument_list|<
name|?
argument_list|>
name|createMergeTask
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|Path
name|oldLocation
parameter_list|,
name|ListBucketingCtx
name|lbCtx
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|inputFormatClass
parameter_list|,
name|Path
name|queryTmpDir
parameter_list|)
block|{
name|AlterTableConcatenateDesc
name|desc
init|=
operator|new
name|AlterTableConcatenateDesc
argument_list|(
name|tableName
argument_list|,
name|partitionSpec
argument_list|,
name|lbCtx
argument_list|,
name|oldLocation
argument_list|,
name|queryTmpDir
argument_list|,
name|inputFormatClass
argument_list|,
name|Utilities
operator|.
name|getTableDesc
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|DDLWork
name|ddlWork
init|=
operator|new
name|DDLWork
argument_list|(
name|getInputs
argument_list|()
argument_list|,
name|getOutputs
argument_list|()
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|ddlWork
operator|.
name|setNeedLock
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
name|ddlWork
argument_list|)
return|;
block|}
specifier|private
name|void
name|addMoveTask
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|Path
name|oldLocation
parameter_list|,
name|Path
name|newLocation
parameter_list|,
name|ListBucketingCtx
name|lbCtx
parameter_list|,
name|TableDesc
name|tableDesc
parameter_list|,
name|Path
name|queryTmpDir
parameter_list|,
name|Task
argument_list|<
name|?
argument_list|>
name|mergeTask
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// No need to handle MM tables - unsupported path.
name|LoadTableDesc
name|loadTableDesc
init|=
operator|new
name|LoadTableDesc
argument_list|(
name|queryTmpDir
argument_list|,
name|tableDesc
argument_list|,
name|partitionSpec
operator|==
literal|null
condition|?
operator|new
name|HashMap
argument_list|<>
argument_list|()
else|:
name|partitionSpec
argument_list|)
decl_stmt|;
name|loadTableDesc
operator|.
name|setLbCtx
argument_list|(
name|lbCtx
argument_list|)
expr_stmt|;
name|loadTableDesc
operator|.
name|setInheritTableSpecs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Task
argument_list|<
name|MoveWork
argument_list|>
name|moveTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|MoveWork
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|loadTableDesc
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|mergeTask
operator|.
name|addDependentTask
argument_list|(
name|moveTask
argument_list|)
expr_stmt|;
name|addStatTask
argument_list|(
name|tableName
argument_list|,
name|table
argument_list|,
name|partitionSpec
argument_list|,
name|oldLocation
argument_list|,
name|newLocation
argument_list|,
name|loadTableDesc
argument_list|,
name|moveTask
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addStatTask
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|Path
name|oldLocation
parameter_list|,
name|Path
name|newLocation
parameter_list|,
name|LoadTableDesc
name|loadTableDesc
parameter_list|,
name|Task
argument_list|<
name|MoveWork
argument_list|>
name|moveTask
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|)
condition|)
block|{
name|BasicStatsWork
name|basicStatsWork
decl_stmt|;
if|if
condition|(
name|oldLocation
operator|.
name|equals
argument_list|(
name|newLocation
argument_list|)
condition|)
block|{
comment|// If we're merging to the same location, we can avoid some metastore calls
try|try
block|{
name|TableSpec
name|tableSpec
init|=
operator|new
name|TableSpec
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|,
name|partitionSpec
argument_list|)
decl_stmt|;
name|basicStatsWork
operator|=
operator|new
name|BasicStatsWork
argument_list|(
name|tableSpec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|basicStatsWork
operator|=
operator|new
name|BasicStatsWork
argument_list|(
name|loadTableDesc
argument_list|)
expr_stmt|;
block|}
name|basicStatsWork
operator|.
name|setNoStatsAggregator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|basicStatsWork
operator|.
name|setClearAggregatorStats
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|StatsWork
name|statsWork
init|=
operator|new
name|StatsWork
argument_list|(
name|table
argument_list|,
name|basicStatsWork
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|statTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
name|statsWork
argument_list|)
decl_stmt|;
name|moveTask
operator|.
name|addDependentTask
argument_list|(
name|statTask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

