begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|bootstrap
operator|.
name|load
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|bootstrap
operator|.
name|events
operator|.
name|DatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|bootstrap
operator|.
name|load
operator|.
name|util
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ReplicationSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AlterDatabaseDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CreateDatabaseDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PrincipalDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|ReplUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|LoadDatabase
block|{
specifier|final
name|Context
name|context
decl_stmt|;
specifier|final
name|TaskTracker
name|tracker
decl_stmt|;
specifier|private
specifier|final
name|DatabaseEvent
name|event
decl_stmt|;
specifier|private
specifier|final
name|String
name|dbNameToLoadIn
decl_stmt|;
specifier|public
name|LoadDatabase
parameter_list|(
name|Context
name|context
parameter_list|,
name|DatabaseEvent
name|event
parameter_list|,
name|String
name|dbNameToLoadIn
parameter_list|,
name|TaskTracker
name|loadTaskTracker
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|event
operator|=
name|event
expr_stmt|;
name|this
operator|.
name|dbNameToLoadIn
operator|=
name|dbNameToLoadIn
expr_stmt|;
name|this
operator|.
name|tracker
operator|=
operator|new
name|TaskTracker
argument_list|(
name|loadTaskTracker
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TaskTracker
name|tasks
parameter_list|()
throws|throws
name|SemanticException
block|{
try|try
block|{
name|Database
name|dbInMetadata
init|=
name|readDbMetadata
argument_list|()
decl_stmt|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|dbRootTask
init|=
name|existEmptyDb
argument_list|(
name|dbInMetadata
operator|.
name|getName
argument_list|()
argument_list|)
condition|?
name|alterDbTask
argument_list|(
name|dbInMetadata
argument_list|,
name|context
operator|.
name|hiveConf
argument_list|)
else|:
name|createDbTask
argument_list|(
name|dbInMetadata
argument_list|)
decl_stmt|;
name|dbRootTask
operator|.
name|addDependentTask
argument_list|(
name|setOwnerInfoTask
argument_list|(
name|dbInMetadata
argument_list|)
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|addTask
argument_list|(
name|dbRootTask
argument_list|)
expr_stmt|;
return|return
name|tracker
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|Database
name|readDbMetadata
parameter_list|()
throws|throws
name|SemanticException
block|{
return|return
name|event
operator|.
name|dbInMetadata
argument_list|(
name|dbNameToLoadIn
argument_list|)
return|;
block|}
specifier|private
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|createDbTask
parameter_list|(
name|Database
name|dbObj
parameter_list|)
block|{
name|CreateDatabaseDesc
name|createDbDesc
init|=
operator|new
name|CreateDatabaseDesc
argument_list|()
decl_stmt|;
name|createDbDesc
operator|.
name|setName
argument_list|(
name|dbObj
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|createDbDesc
operator|.
name|setComment
argument_list|(
name|dbObj
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
comment|/*     explicitly remove the setting of last.repl.id from the db object parameters as loadTask is going     to run multiple times and explicit logic is in place which prevents updates to tables when db level     last repl id is set and we create a AlterDatabaseTask at the end of processing a database.      */
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|dbObj
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|remove
argument_list|(
name|ReplicationSpec
operator|.
name|KEY
operator|.
name|CURR_STATE_ID
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add the checkpoint key to the Database binding it to current dump directory.
comment|// So, if retry using same dump, we shall skip Database object update.
name|parameters
operator|.
name|put
argument_list|(
name|ReplUtils
operator|.
name|REPL_CHECKPOINT_KEY
argument_list|,
name|context
operator|.
name|dumpDirectory
argument_list|)
expr_stmt|;
name|createDbDesc
operator|.
name|setDatabaseProperties
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
comment|// note that we do not set location - for repl load, we want that auto-created.
name|createDbDesc
operator|.
name|setIfNotExists
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// If it exists, we want this to be an error condition. Repl Load is not intended to replace a
comment|// db.
comment|// TODO: we might revisit this in create-drop-recreate cases, needs some thinking on.
name|DDLWork
name|work
init|=
operator|new
name|DDLWork
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|,
name|createDbDesc
argument_list|)
decl_stmt|;
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
name|work
argument_list|,
name|context
operator|.
name|hiveConf
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|alterDbTask
parameter_list|(
name|Database
name|dbObj
parameter_list|,
name|HiveConf
name|hiveConf
parameter_list|)
block|{
name|AlterDatabaseDesc
name|alterDbDesc
init|=
operator|new
name|AlterDatabaseDesc
argument_list|(
name|dbObj
operator|.
name|getName
argument_list|()
argument_list|,
name|dbObj
operator|.
name|getParameters
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DDLWork
name|work
init|=
operator|new
name|DDLWork
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|,
name|alterDbDesc
argument_list|)
decl_stmt|;
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
name|work
argument_list|,
name|hiveConf
argument_list|)
return|;
block|}
specifier|private
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|setOwnerInfoTask
parameter_list|(
name|Database
name|dbObj
parameter_list|)
block|{
name|AlterDatabaseDesc
name|alterDbDesc
init|=
operator|new
name|AlterDatabaseDesc
argument_list|(
name|dbObj
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|PrincipalDesc
argument_list|(
name|dbObj
operator|.
name|getOwnerName
argument_list|()
argument_list|,
name|dbObj
operator|.
name|getOwnerType
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DDLWork
name|work
init|=
operator|new
name|DDLWork
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|,
name|alterDbDesc
argument_list|)
decl_stmt|;
return|return
name|TaskFactory
operator|.
name|get
argument_list|(
name|work
argument_list|,
name|context
operator|.
name|hiveConf
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|existEmptyDb
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|HiveException
block|{
name|Database
name|db
init|=
name|context
operator|.
name|hiveDb
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|allTables
init|=
name|context
operator|.
name|hiveDb
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allFunctions
init|=
name|context
operator|.
name|hiveDb
operator|.
name|getFunctions
argument_list|(
name|dbName
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
if|if
condition|(
name|allTables
operator|.
name|isEmpty
argument_list|()
operator|&&
name|allFunctions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Database "
operator|+
name|db
operator|.
name|getName
argument_list|()
operator|+
literal|" is not empty. One or more tables/functions exist."
argument_list|)
throw|;
block|}
specifier|public
specifier|static
class|class
name|AlterDatabase
extends|extends
name|LoadDatabase
block|{
specifier|public
name|AlterDatabase
parameter_list|(
name|Context
name|context
parameter_list|,
name|DatabaseEvent
name|event
parameter_list|,
name|String
name|dbNameToLoadIn
parameter_list|,
name|TaskTracker
name|loadTaskTracker
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|event
argument_list|,
name|dbNameToLoadIn
argument_list|,
name|loadTaskTracker
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TaskTracker
name|tasks
parameter_list|()
throws|throws
name|SemanticException
block|{
name|tracker
operator|.
name|addTask
argument_list|(
name|alterDbTask
argument_list|(
name|readDbMetadata
argument_list|()
argument_list|,
name|context
operator|.
name|hiveConf
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tracker
return|;
block|}
block|}
block|}
end_class

end_unit

