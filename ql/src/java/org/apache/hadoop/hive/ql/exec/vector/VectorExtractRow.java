begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveCharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveDecimalObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveVarcharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_comment
comment|/**  * This class extracts specified VectorizedRowBatch row columns into a Writable row Object[].  *  * The caller provides the hive type names and target column numbers in the order desired to  * extract from the Writable row Object[].  *  * This class is abstract to allow the subclasses to control batch reuse.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|VectorExtractRow
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VectorExtractRow
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|tolerateNullColumns
decl_stmt|;
specifier|public
name|VectorExtractRow
parameter_list|()
block|{
comment|// UNDONE: For now allow null columns until vector_decimal_mapjoin.q is understood...
name|tolerateNullColumns
operator|=
literal|true
expr_stmt|;
block|}
specifier|protected
specifier|abstract
class|class
name|Extractor
block|{
specifier|protected
name|int
name|columnIndex
decl_stmt|;
specifier|protected
name|Object
name|object
decl_stmt|;
specifier|public
name|Extractor
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|this
operator|.
name|columnIndex
operator|=
name|columnIndex
expr_stmt|;
block|}
specifier|public
name|int
name|getColumnIndex
parameter_list|()
block|{
return|return
name|columnIndex
return|;
block|}
specifier|abstract
name|void
name|setColumnVector
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
function_decl|;
specifier|abstract
name|void
name|forgetColumnVector
parameter_list|()
function_decl|;
specifier|abstract
name|Object
name|extract
parameter_list|(
name|int
name|batchIndex
parameter_list|)
function_decl|;
block|}
specifier|private
class|class
name|VoidExtractor
extends|extends
name|Extractor
block|{
name|VoidExtractor
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setColumnVector
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{     }
annotation|@
name|Override
name|void
name|forgetColumnVector
parameter_list|()
block|{     }
annotation|@
name|Override
name|Object
name|extract
parameter_list|(
name|int
name|batchIndex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|abstract
class|class
name|AbstractLongExtractor
extends|extends
name|Extractor
block|{
specifier|protected
name|LongColumnVector
name|colVector
decl_stmt|;
specifier|protected
name|long
index|[]
name|vector
decl_stmt|;
name|AbstractLongExtractor
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setColumnVector
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
name|colVector
operator|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
expr_stmt|;
name|vector
operator|=
name|colVector
operator|.
name|vector
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|forgetColumnVector
parameter_list|()
block|{
name|colVector
operator|=
literal|null
expr_stmt|;
name|vector
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
class|class
name|BooleanExtractor
extends|extends
name|AbstractLongExtractor
block|{
name|BooleanExtractor
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|object
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBooleanObjectInspector
operator|.
name|create
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|extract
parameter_list|(
name|int
name|batchIndex
parameter_list|)
block|{
name|int
name|adjustedIndex
init|=
operator|(
name|colVector
operator|.
name|isRepeating
condition|?
literal|0
else|:
name|batchIndex
operator|)
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|adjustedIndex
index|]
condition|)
block|{
name|long
name|value
init|=
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBooleanObjectInspector
operator|.
name|set
argument_list|(
name|object
argument_list|,
name|value
operator|==
literal|0
condition|?
literal|false
else|:
literal|true
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|protected
class|class
name|ByteExtractor
extends|extends
name|AbstractLongExtractor
block|{
name|ByteExtractor
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|object
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableByteObjectInspector
operator|.
name|create
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|extract
parameter_list|(
name|int
name|batchIndex
parameter_list|)
block|{
name|int
name|adjustedIndex
init|=
operator|(
name|colVector
operator|.
name|isRepeating
condition|?
literal|0
else|:
name|batchIndex
operator|)
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|adjustedIndex
index|]
condition|)
block|{
name|long
name|value
init|=
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|PrimitiveObjectInspectorFactory
operator|.
name|writableByteObjectInspector
operator|.
name|set
argument_list|(
name|object
argument_list|,
operator|(
name|byte
operator|)
name|value
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
class|class
name|ShortExtractor
extends|extends
name|AbstractLongExtractor
block|{
name|ShortExtractor
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|object
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableShortObjectInspector
operator|.
name|create
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|extract
parameter_list|(
name|int
name|batchIndex
parameter_list|)
block|{
name|int
name|adjustedIndex
init|=
operator|(
name|colVector
operator|.
name|isRepeating
condition|?
literal|0
else|:
name|batchIndex
operator|)
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|adjustedIndex
index|]
condition|)
block|{
name|long
name|value
init|=
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|PrimitiveObjectInspectorFactory
operator|.
name|writableShortObjectInspector
operator|.
name|set
argument_list|(
name|object
argument_list|,
operator|(
name|short
operator|)
name|value
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
class|class
name|IntExtractor
extends|extends
name|AbstractLongExtractor
block|{
name|IntExtractor
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|object
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
operator|.
name|create
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|extract
parameter_list|(
name|int
name|batchIndex
parameter_list|)
block|{
name|int
name|adjustedIndex
init|=
operator|(
name|colVector
operator|.
name|isRepeating
condition|?
literal|0
else|:
name|batchIndex
operator|)
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|adjustedIndex
index|]
condition|)
block|{
name|long
name|value
init|=
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
operator|.
name|set
argument_list|(
name|object
argument_list|,
operator|(
name|int
operator|)
name|value
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
class|class
name|LongExtractor
extends|extends
name|AbstractLongExtractor
block|{
name|LongExtractor
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|object
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
operator|.
name|create
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|extract
parameter_list|(
name|int
name|batchIndex
parameter_list|)
block|{
name|int
name|adjustedIndex
init|=
operator|(
name|colVector
operator|.
name|isRepeating
condition|?
literal|0
else|:
name|batchIndex
operator|)
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|adjustedIndex
index|]
condition|)
block|{
name|long
name|value
init|=
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
operator|.
name|set
argument_list|(
name|object
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
class|class
name|DateExtractor
extends|extends
name|AbstractLongExtractor
block|{
specifier|private
name|Date
name|date
decl_stmt|;
name|DateExtractor
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|object
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
operator|.
name|create
argument_list|(
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|date
operator|=
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|extract
parameter_list|(
name|int
name|batchIndex
parameter_list|)
block|{
name|int
name|adjustedIndex
init|=
operator|(
name|colVector
operator|.
name|isRepeating
condition|?
literal|0
else|:
name|batchIndex
operator|)
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|adjustedIndex
index|]
condition|)
block|{
name|long
name|value
init|=
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|date
operator|.
name|setTime
argument_list|(
name|DateWritable
operator|.
name|daysToMillis
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
operator|.
name|set
argument_list|(
name|object
argument_list|,
name|date
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
class|class
name|TimestampExtractor
extends|extends
name|AbstractLongExtractor
block|{
specifier|private
name|Timestamp
name|timestamp
decl_stmt|;
name|TimestampExtractor
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|object
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
operator|.
name|create
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|timestamp
operator|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|extract
parameter_list|(
name|int
name|batchIndex
parameter_list|)
block|{
name|int
name|adjustedIndex
init|=
operator|(
name|colVector
operator|.
name|isRepeating
condition|?
literal|0
else|:
name|batchIndex
operator|)
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|adjustedIndex
index|]
condition|)
block|{
name|long
name|value
init|=
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|TimestampUtils
operator|.
name|assignTimeInNanoSec
argument_list|(
name|value
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
operator|.
name|set
argument_list|(
name|object
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
class|class
name|IntervalYearMonthExtractor
extends|extends
name|AbstractLongExtractor
block|{
specifier|private
name|HiveIntervalYearMonth
name|hiveIntervalYearMonth
decl_stmt|;
name|IntervalYearMonthExtractor
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|object
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableHiveIntervalYearMonthObjectInspector
operator|.
name|create
argument_list|(
operator|new
name|HiveIntervalYearMonth
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|hiveIntervalYearMonth
operator|=
operator|new
name|HiveIntervalYearMonth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|extract
parameter_list|(
name|int
name|batchIndex
parameter_list|)
block|{
name|int
name|adjustedIndex
init|=
operator|(
name|colVector
operator|.
name|isRepeating
condition|?
literal|0
else|:
name|batchIndex
operator|)
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|adjustedIndex
index|]
condition|)
block|{
name|int
name|totalMonths
init|=
operator|(
name|int
operator|)
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|hiveIntervalYearMonth
operator|.
name|set
argument_list|(
name|totalMonths
argument_list|)
expr_stmt|;
name|PrimitiveObjectInspectorFactory
operator|.
name|writableHiveIntervalYearMonthObjectInspector
operator|.
name|set
argument_list|(
name|object
argument_list|,
name|hiveIntervalYearMonth
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
class|class
name|IntervalDayTimeExtractor
extends|extends
name|AbstractLongExtractor
block|{
specifier|private
name|HiveIntervalDayTime
name|hiveIntervalDayTime
decl_stmt|;
name|IntervalDayTimeExtractor
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|object
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableHiveIntervalDayTimeObjectInspector
operator|.
name|create
argument_list|(
operator|new
name|HiveIntervalDayTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|hiveIntervalDayTime
operator|=
operator|new
name|HiveIntervalDayTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|extract
parameter_list|(
name|int
name|batchIndex
parameter_list|)
block|{
name|int
name|adjustedIndex
init|=
operator|(
name|colVector
operator|.
name|isRepeating
condition|?
literal|0
else|:
name|batchIndex
operator|)
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|adjustedIndex
index|]
condition|)
block|{
name|long
name|value
init|=
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|DateUtils
operator|.
name|setIntervalDayTimeTotalNanos
argument_list|(
name|hiveIntervalDayTime
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|PrimitiveObjectInspectorFactory
operator|.
name|writableHiveIntervalDayTimeObjectInspector
operator|.
name|set
argument_list|(
name|object
argument_list|,
name|hiveIntervalDayTime
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
specifier|abstract
class|class
name|AbstractDoubleExtractor
extends|extends
name|Extractor
block|{
specifier|protected
name|DoubleColumnVector
name|colVector
decl_stmt|;
specifier|protected
name|double
index|[]
name|vector
decl_stmt|;
name|AbstractDoubleExtractor
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setColumnVector
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
name|colVector
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
expr_stmt|;
name|vector
operator|=
name|colVector
operator|.
name|vector
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|forgetColumnVector
parameter_list|()
block|{
name|colVector
operator|=
literal|null
expr_stmt|;
name|vector
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|FloatExtractor
extends|extends
name|AbstractDoubleExtractor
block|{
name|FloatExtractor
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|object
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableFloatObjectInspector
operator|.
name|create
argument_list|(
literal|0f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|extract
parameter_list|(
name|int
name|batchIndex
parameter_list|)
block|{
name|int
name|adjustedIndex
init|=
operator|(
name|colVector
operator|.
name|isRepeating
condition|?
literal|0
else|:
name|batchIndex
operator|)
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|adjustedIndex
index|]
condition|)
block|{
name|double
name|value
init|=
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|PrimitiveObjectInspectorFactory
operator|.
name|writableFloatObjectInspector
operator|.
name|set
argument_list|(
name|object
argument_list|,
operator|(
name|float
operator|)
name|value
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
class|class
name|DoubleExtractor
extends|extends
name|AbstractDoubleExtractor
block|{
name|DoubleExtractor
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|object
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
operator|.
name|create
argument_list|(
literal|0f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|extract
parameter_list|(
name|int
name|batchIndex
parameter_list|)
block|{
name|int
name|adjustedIndex
init|=
operator|(
name|colVector
operator|.
name|isRepeating
condition|?
literal|0
else|:
name|batchIndex
operator|)
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|adjustedIndex
index|]
condition|)
block|{
name|double
name|value
init|=
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
operator|.
name|set
argument_list|(
name|object
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
specifier|abstract
class|class
name|AbstractBytesExtractor
extends|extends
name|Extractor
block|{
specifier|protected
name|BytesColumnVector
name|colVector
decl_stmt|;
name|AbstractBytesExtractor
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setColumnVector
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
name|colVector
operator|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|forgetColumnVector
parameter_list|()
block|{
name|colVector
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|BinaryExtractorByValue
extends|extends
name|AbstractBytesExtractor
block|{
specifier|private
name|DataOutputBuffer
name|buffer
decl_stmt|;
comment|// Use the BytesWritable instance here as a reference to data saved in buffer.  We do not
comment|// want to pass the binary object inspector a byte[] since we would need to allocate it on the
comment|// heap each time to get the length correct.
specifier|private
name|BytesWritable
name|bytesWritable
decl_stmt|;
name|BinaryExtractorByValue
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|object
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
operator|.
name|create
argument_list|(
name|ArrayUtils
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|buffer
operator|=
operator|new
name|DataOutputBuffer
argument_list|()
expr_stmt|;
name|bytesWritable
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|extract
parameter_list|(
name|int
name|batchIndex
parameter_list|)
block|{
name|int
name|adjustedIndex
init|=
operator|(
name|colVector
operator|.
name|isRepeating
condition|?
literal|0
else|:
name|batchIndex
operator|)
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|adjustedIndex
index|]
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
name|colVector
operator|.
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|int
name|start
init|=
name|colVector
operator|.
name|start
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|int
name|length
init|=
name|colVector
operator|.
name|length
index|[
name|adjustedIndex
index|]
decl_stmt|;
comment|// Save a copy of the binary data.
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|buffer
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"bad write"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
name|bytesWritable
operator|.
name|set
argument_list|(
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
operator|.
name|set
argument_list|(
name|object
argument_list|,
name|bytesWritable
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
class|class
name|StringExtractorByValue
extends|extends
name|AbstractBytesExtractor
block|{
comment|// Use org.apache.hadoop.io.Text as our helper to go from byte[] to String.
specifier|private
name|Text
name|text
decl_stmt|;
name|StringExtractorByValue
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|object
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
operator|.
name|create
argument_list|(
name|StringUtils
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|text
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|extract
parameter_list|(
name|int
name|batchIndex
parameter_list|)
block|{
name|int
name|adjustedIndex
init|=
operator|(
name|colVector
operator|.
name|isRepeating
condition|?
literal|0
else|:
name|batchIndex
operator|)
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|adjustedIndex
index|]
condition|)
block|{
name|byte
index|[]
name|value
init|=
name|colVector
operator|.
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|int
name|start
init|=
name|colVector
operator|.
name|start
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|int
name|length
init|=
name|colVector
operator|.
name|length
index|[
name|adjustedIndex
index|]
decl_stmt|;
comment|// Use org.apache.hadoop.io.Text as our helper to go from byte[] to String.
name|text
operator|.
name|set
argument_list|(
name|value
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
operator|.
name|set
argument_list|(
name|object
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
class|class
name|VarCharExtractorByValue
extends|extends
name|AbstractBytesExtractor
block|{
comment|// We need our own instance of the VARCHAR object inspector to hold the maximum length
comment|// from the TypeInfo.
specifier|private
name|WritableHiveVarcharObjectInspector
name|writableVarcharObjectInspector
decl_stmt|;
comment|// Use org.apache.hadoop.io.Text as our helper to go from byte[] to String.
specifier|private
name|Text
name|text
decl_stmt|;
comment|/*      * @param varcharTypeInfo      *                      We need the VARCHAR type information that contains the maximum length.      * @param columnIndex      *                      The vector row batch column that contains the bytes for the VARCHAR.      */
name|VarCharExtractorByValue
parameter_list|(
name|VarcharTypeInfo
name|varcharTypeInfo
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|writableVarcharObjectInspector
operator|=
operator|new
name|WritableHiveVarcharObjectInspector
argument_list|(
name|varcharTypeInfo
argument_list|)
expr_stmt|;
name|object
operator|=
name|writableVarcharObjectInspector
operator|.
name|create
argument_list|(
operator|new
name|HiveVarchar
argument_list|(
name|StringUtils
operator|.
name|EMPTY
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|text
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|extract
parameter_list|(
name|int
name|batchIndex
parameter_list|)
block|{
name|int
name|adjustedIndex
init|=
operator|(
name|colVector
operator|.
name|isRepeating
condition|?
literal|0
else|:
name|batchIndex
operator|)
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|adjustedIndex
index|]
condition|)
block|{
name|byte
index|[]
name|value
init|=
name|colVector
operator|.
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|int
name|start
init|=
name|colVector
operator|.
name|start
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|int
name|length
init|=
name|colVector
operator|.
name|length
index|[
name|adjustedIndex
index|]
decl_stmt|;
comment|// Use org.apache.hadoop.io.Text as our helper to go from byte[] to String.
name|text
operator|.
name|set
argument_list|(
name|value
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|writableVarcharObjectInspector
operator|.
name|set
argument_list|(
name|object
argument_list|,
name|text
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
class|class
name|CharExtractorByValue
extends|extends
name|AbstractBytesExtractor
block|{
comment|// We need our own instance of the CHAR object inspector to hold the maximum length
comment|// from the TypeInfo.
specifier|private
name|WritableHiveCharObjectInspector
name|writableCharObjectInspector
decl_stmt|;
comment|// Use org.apache.hadoop.io.Text as our helper to go from byte[] to String.
specifier|private
name|Text
name|text
decl_stmt|;
comment|/*      * @param varcharTypeInfo      *                      We need the CHAR type information that contains the maximum length.      * @param columnIndex      *                      The vector row batch column that contains the bytes for the CHAR.      */
name|CharExtractorByValue
parameter_list|(
name|CharTypeInfo
name|charTypeInfo
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|writableCharObjectInspector
operator|=
operator|new
name|WritableHiveCharObjectInspector
argument_list|(
name|charTypeInfo
argument_list|)
expr_stmt|;
name|object
operator|=
name|writableCharObjectInspector
operator|.
name|create
argument_list|(
operator|new
name|HiveChar
argument_list|(
name|StringUtils
operator|.
name|EMPTY
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|text
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|extract
parameter_list|(
name|int
name|batchIndex
parameter_list|)
block|{
name|int
name|adjustedIndex
init|=
operator|(
name|colVector
operator|.
name|isRepeating
condition|?
literal|0
else|:
name|batchIndex
operator|)
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|adjustedIndex
index|]
condition|)
block|{
name|byte
index|[]
name|value
init|=
name|colVector
operator|.
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|int
name|start
init|=
name|colVector
operator|.
name|start
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|int
name|length
init|=
name|colVector
operator|.
name|length
index|[
name|adjustedIndex
index|]
decl_stmt|;
comment|// Use org.apache.hadoop.io.Text as our helper to go from byte[] to String.
name|text
operator|.
name|set
argument_list|(
name|value
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|writableCharObjectInspector
operator|.
name|set
argument_list|(
name|object
argument_list|,
name|text
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
class|class
name|DecimalExtractor
extends|extends
name|Extractor
block|{
specifier|private
name|WritableHiveDecimalObjectInspector
name|writableDecimalObjectInspector
decl_stmt|;
specifier|protected
name|DecimalColumnVector
name|colVector
decl_stmt|;
comment|/*      * @param decimalTypeInfo      *                      We need the DECIMAL type information that contains scale and precision.      * @param columnIndex      *                      The vector row batch column that contains the bytes for the VARCHAR.      */
name|DecimalExtractor
parameter_list|(
name|DecimalTypeInfo
name|decimalTypeInfo
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
name|super
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|writableDecimalObjectInspector
operator|=
operator|new
name|WritableHiveDecimalObjectInspector
argument_list|(
name|decimalTypeInfo
argument_list|)
expr_stmt|;
name|object
operator|=
name|writableDecimalObjectInspector
operator|.
name|create
argument_list|(
name|HiveDecimal
operator|.
name|ZERO
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|setColumnVector
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
name|colVector
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|forgetColumnVector
parameter_list|()
block|{
name|colVector
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|extract
parameter_list|(
name|int
name|batchIndex
parameter_list|)
block|{
name|int
name|adjustedIndex
init|=
operator|(
name|colVector
operator|.
name|isRepeating
condition|?
literal|0
else|:
name|batchIndex
operator|)
decl_stmt|;
if|if
condition|(
name|colVector
operator|.
name|noNulls
operator|||
operator|!
name|colVector
operator|.
name|isNull
index|[
name|adjustedIndex
index|]
condition|)
block|{
name|HiveDecimal
name|value
init|=
name|colVector
operator|.
name|vector
index|[
name|adjustedIndex
index|]
operator|.
name|getHiveDecimal
argument_list|()
decl_stmt|;
name|writableDecimalObjectInspector
operator|.
name|set
argument_list|(
name|object
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
name|Extractor
name|createExtractor
parameter_list|(
name|PrimitiveTypeInfo
name|primitiveTypeInfo
parameter_list|,
name|int
name|columnIndex
parameter_list|)
throws|throws
name|HiveException
block|{
name|PrimitiveCategory
name|primitiveCategory
init|=
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
name|Extractor
name|extracter
decl_stmt|;
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
case|case
name|VOID
case|:
name|extracter
operator|=
operator|new
name|VoidExtractor
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
name|extracter
operator|=
operator|new
name|BooleanExtractor
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|extracter
operator|=
operator|new
name|ByteExtractor
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|extracter
operator|=
operator|new
name|ShortExtractor
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|extracter
operator|=
operator|new
name|IntExtractor
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|extracter
operator|=
operator|new
name|LongExtractor
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|extracter
operator|=
operator|new
name|TimestampExtractor
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|extracter
operator|=
operator|new
name|DateExtractor
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|extracter
operator|=
operator|new
name|FloatExtractor
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|extracter
operator|=
operator|new
name|DoubleExtractor
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
name|extracter
operator|=
operator|new
name|BinaryExtractorByValue
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|extracter
operator|=
operator|new
name|StringExtractorByValue
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|VARCHAR
case|:
name|extracter
operator|=
operator|new
name|VarCharExtractorByValue
argument_list|(
operator|(
name|VarcharTypeInfo
operator|)
name|primitiveTypeInfo
argument_list|,
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
name|extracter
operator|=
operator|new
name|CharExtractorByValue
argument_list|(
operator|(
name|CharTypeInfo
operator|)
name|primitiveTypeInfo
argument_list|,
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|extracter
operator|=
operator|new
name|DecimalExtractor
argument_list|(
operator|(
name|DecimalTypeInfo
operator|)
name|primitiveTypeInfo
argument_list|,
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
name|extracter
operator|=
operator|new
name|IntervalYearMonthExtractor
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
name|extracter
operator|=
operator|new
name|IntervalDayTimeExtractor
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"No vector row extracter for primitive category "
operator|+
name|primitiveCategory
argument_list|)
throw|;
block|}
return|return
name|extracter
return|;
block|}
name|Extractor
index|[]
name|extracters
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|(
name|StructObjectInspector
name|structObjectInspector
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|projectedColumns
parameter_list|)
throws|throws
name|HiveException
block|{
name|extracters
operator|=
operator|new
name|Extractor
index|[
name|projectedColumns
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|structObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StructField
name|field
range|:
name|fields
control|)
block|{
name|int
name|columnIndex
init|=
name|projectedColumns
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ObjectInspector
name|fieldInspector
init|=
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|fieldInspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
decl_stmt|;
name|extracters
index|[
name|i
index|]
operator|=
name|createExtractor
argument_list|(
name|primitiveTypeInfo
argument_list|,
name|columnIndex
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|typeNames
parameter_list|)
throws|throws
name|HiveException
block|{
name|extracters
operator|=
operator|new
name|Extractor
index|[
name|typeNames
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|typeName
range|:
name|typeNames
control|)
block|{
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|extracters
index|[
name|i
index|]
operator|=
name|createExtractor
argument_list|(
name|primitiveTypeInfo
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|extracters
operator|.
name|length
return|;
block|}
specifier|protected
name|void
name|setBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extracters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Extractor
name|extracter
init|=
name|extracters
index|[
name|i
index|]
decl_stmt|;
name|int
name|columnIndex
init|=
name|extracter
operator|.
name|getColumnIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|batch
operator|.
name|cols
index|[
name|columnIndex
index|]
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|tolerateNullColumns
condition|)
block|{
comment|// Replace with void...
name|extracter
operator|=
operator|new
name|VoidExtractor
argument_list|(
name|columnIndex
argument_list|)
expr_stmt|;
name|extracters
index|[
name|i
index|]
operator|=
name|extracter
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unexpected null vector column "
operator|+
name|columnIndex
argument_list|)
throw|;
block|}
block|}
name|extracter
operator|.
name|setColumnVector
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|forgetBatch
parameter_list|()
block|{
for|for
control|(
name|Extractor
name|extracter
range|:
name|extracters
control|)
block|{
name|extracter
operator|.
name|forgetColumnVector
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Object
name|extractRowColumn
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|int
name|logicalColumnIndex
parameter_list|)
block|{
return|return
name|extracters
index|[
name|logicalColumnIndex
index|]
operator|.
name|extract
argument_list|(
name|batchIndex
argument_list|)
return|;
block|}
specifier|public
name|void
name|extractRow
parameter_list|(
name|int
name|batchIndex
parameter_list|,
name|Object
index|[]
name|objects
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Extractor
name|extracter
range|:
name|extracters
control|)
block|{
name|objects
index|[
name|i
operator|++
index|]
operator|=
name|extracter
operator|.
name|extract
argument_list|(
name|batchIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

