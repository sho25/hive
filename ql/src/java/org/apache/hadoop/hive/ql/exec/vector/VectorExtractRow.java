begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardUnionObjectInspector
operator|.
name|StandardUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalDayTimeWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalYearMonthWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_comment
comment|/**  * This class extracts specified VectorizedRowBatch row columns into writables.  *  * The caller provides the data types and projection column numbers of a subset of the columns  * to extract.  */
end_comment

begin_class
specifier|public
class|class
name|VectorExtractRow
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VectorExtractRow
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/*    * These members have information for extracting a row column objects from VectorizedRowBatch    * columns.    */
name|int
index|[]
name|projectionColumnNums
decl_stmt|;
comment|// Extraction can be a subset of columns, so this is the projection --
comment|// the batch column numbers.
name|TypeInfo
index|[]
name|typeInfos
decl_stmt|;
name|ObjectInspector
index|[]
name|objectInspectors
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BYTES
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY_STRING
init|=
literal|""
decl_stmt|;
comment|/*    * Allocate the various arrays.    */
specifier|private
name|void
name|allocateArrays
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|projectionColumnNums
operator|=
operator|new
name|int
index|[
name|count
index|]
expr_stmt|;
name|typeInfos
operator|=
operator|new
name|TypeInfo
index|[
name|count
index|]
expr_stmt|;
name|objectInspectors
operator|=
operator|new
name|ObjectInspector
index|[
name|count
index|]
expr_stmt|;
block|}
comment|/*    * Initialize one column's array entries.    */
specifier|private
name|void
name|initEntry
parameter_list|(
name|int
name|logicalColumnIndex
parameter_list|,
name|int
name|projectionColumnNum
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
name|projectionColumnNums
index|[
name|logicalColumnIndex
index|]
operator|=
name|projectionColumnNum
expr_stmt|;
name|typeInfos
index|[
name|logicalColumnIndex
index|]
operator|=
name|typeInfo
expr_stmt|;
name|objectInspectors
index|[
name|logicalColumnIndex
index|]
operator|=
name|TypeInfoUtils
operator|.
name|getStandardJavaObjectInspectorFromTypeInfo
argument_list|(
name|typeInfo
argument_list|)
expr_stmt|;
block|}
comment|/*    * Initialize using an StructObjectInspector and a column projection list.    */
specifier|public
name|void
name|init
parameter_list|(
name|StructObjectInspector
name|structObjectInspector
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|projectedColumns
parameter_list|)
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|structObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|fields
operator|.
name|size
argument_list|()
decl_stmt|;
name|allocateArrays
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|projectionColumnNum
init|=
name|projectedColumns
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|StructField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ObjectInspector
name|fieldInspector
init|=
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|fieldInspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
decl_stmt|;
name|initEntry
argument_list|(
name|i
argument_list|,
name|projectionColumnNum
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Initialize using an ObjectInspector array and a column projection array.    */
specifier|public
name|void
name|init
parameter_list|(
name|TypeInfo
index|[]
name|typeInfos
parameter_list|,
name|int
index|[]
name|projectedColumns
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|int
name|count
init|=
name|typeInfos
operator|.
name|length
decl_stmt|;
name|allocateArrays
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|initEntry
argument_list|(
name|i
argument_list|,
name|projectedColumns
index|[
name|i
index|]
argument_list|,
name|typeInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Initialize using data type names.    * No projection -- the column range 0 .. types.size()-1    */
annotation|@
name|VisibleForTesting
name|void
name|init
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|typeNames
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|int
name|count
init|=
name|typeNames
operator|.
name|size
argument_list|()
decl_stmt|;
name|allocateArrays
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|initEntry
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|TypeInfo
index|[]
name|typeInfos
parameter_list|)
throws|throws
name|HiveException
block|{
specifier|final
name|int
name|count
init|=
name|typeInfos
operator|.
name|length
decl_stmt|;
name|allocateArrays
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|initEntry
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|typeInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|projectionColumnNums
operator|.
name|length
return|;
block|}
comment|/**    * Extract a row's column object from the ColumnVector at batchIndex in the VectorizedRowBatch.    *    * @param batch    * @param batchIndex    * @param logicalColumnIndex    * @return    */
specifier|private
name|Object
name|extractRowColumn
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|int
name|logicalColumnIndex
parameter_list|)
block|{
specifier|final
name|int
name|projectionColumnNum
init|=
name|projectionColumnNums
index|[
name|logicalColumnIndex
index|]
decl_stmt|;
specifier|final
name|ColumnVector
name|colVector
init|=
name|batch
operator|.
name|cols
index|[
name|projectionColumnNum
index|]
decl_stmt|;
specifier|final
name|TypeInfo
name|typeInfo
init|=
name|typeInfos
index|[
name|logicalColumnIndex
index|]
decl_stmt|;
comment|// try {
return|return
name|extractRowColumn
argument_list|(
name|colVector
argument_list|,
name|typeInfo
argument_list|,
name|objectInspectors
index|[
name|logicalColumnIndex
index|]
argument_list|,
name|batchIndex
argument_list|)
return|;
comment|// } catch (Exception e){
comment|//   throw new RuntimeException("Error evaluating column number " + projectionColumnNum +
comment|//       ", typeInfo " + typeInfo.toString() + ", batchIndex " + batchIndex);
comment|// }
block|}
specifier|public
name|Object
name|extractRowColumn
parameter_list|(
name|ColumnVector
name|colVector
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|,
name|ObjectInspector
name|objectInspector
parameter_list|,
name|int
name|batchIndex
parameter_list|)
block|{
if|if
condition|(
name|colVector
operator|==
literal|null
condition|)
block|{
comment|// The planner will not include unneeded columns for reading but other parts of execution
comment|// may ask for them..
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|adjustedIndex
init|=
operator|(
name|colVector
operator|.
name|isRepeating
condition|?
literal|0
else|:
name|batchIndex
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|colVector
operator|.
name|noNulls
operator|&&
name|colVector
operator|.
name|isNull
index|[
name|adjustedIndex
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Category
name|category
init|=
name|typeInfo
operator|.
name|getCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
specifier|final
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|PrimitiveCategory
name|primitiveCategory
init|=
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
specifier|final
name|Writable
name|primitiveWritable
init|=
name|VectorizedBatchUtil
operator|.
name|getPrimitiveWritable
argument_list|(
name|primitiveCategory
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
case|case
name|VOID
case|:
return|return
literal|null
return|;
case|case
name|BOOLEAN
case|:
operator|(
operator|(
name|BooleanWritable
operator|)
name|primitiveWritable
operator|)
operator|.
name|set
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|adjustedIndex
index|]
operator|==
literal|0
condition|?
literal|false
else|:
literal|true
argument_list|)
expr_stmt|;
return|return
name|primitiveWritable
return|;
case|case
name|BYTE
case|:
operator|(
operator|(
name|ByteWritable
operator|)
name|primitiveWritable
operator|)
operator|.
name|set
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|colVector
argument_list|)
operator|.
name|vector
index|[
name|adjustedIndex
index|]
argument_list|)
expr_stmt|;
return|return
name|primitiveWritable
return|;
case|case
name|SHORT
case|:
operator|(
operator|(
name|ShortWritable
operator|)
name|primitiveWritable
operator|)
operator|.
name|set
argument_list|(
call|(
name|short
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|colVector
argument_list|)
operator|.
name|vector
index|[
name|adjustedIndex
index|]
argument_list|)
expr_stmt|;
return|return
name|primitiveWritable
return|;
case|case
name|INT
case|:
operator|(
operator|(
name|IntWritable
operator|)
name|primitiveWritable
operator|)
operator|.
name|set
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|colVector
argument_list|)
operator|.
name|vector
index|[
name|adjustedIndex
index|]
argument_list|)
expr_stmt|;
return|return
name|primitiveWritable
return|;
case|case
name|LONG
case|:
operator|(
operator|(
name|LongWritable
operator|)
name|primitiveWritable
operator|)
operator|.
name|set
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|adjustedIndex
index|]
argument_list|)
expr_stmt|;
return|return
name|primitiveWritable
return|;
case|case
name|TIMESTAMP
case|:
comment|// From java.sql.Timestamp used by vectorization to serializable org.apache.hadoop.hive.common.type.Timestamp
name|java
operator|.
name|sql
operator|.
name|Timestamp
name|ts
init|=
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|colVector
operator|)
operator|.
name|asScratchTimestamp
argument_list|(
name|adjustedIndex
argument_list|)
decl_stmt|;
name|Timestamp
name|serializableTS
init|=
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
name|ts
operator|.
name|getTime
argument_list|()
argument_list|,
name|ts
operator|.
name|getNanos
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|TimestampWritableV2
operator|)
name|primitiveWritable
operator|)
operator|.
name|set
argument_list|(
name|serializableTS
argument_list|)
expr_stmt|;
return|return
name|primitiveWritable
return|;
case|case
name|DATE
case|:
operator|(
operator|(
name|DateWritableV2
operator|)
name|primitiveWritable
operator|)
operator|.
name|set
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|colVector
argument_list|)
operator|.
name|vector
index|[
name|adjustedIndex
index|]
argument_list|)
expr_stmt|;
return|return
name|primitiveWritable
return|;
case|case
name|FLOAT
case|:
operator|(
operator|(
name|FloatWritable
operator|)
name|primitiveWritable
operator|)
operator|.
name|set
argument_list|(
call|(
name|float
call|)
argument_list|(
operator|(
name|DoubleColumnVector
operator|)
name|colVector
argument_list|)
operator|.
name|vector
index|[
name|adjustedIndex
index|]
argument_list|)
expr_stmt|;
return|return
name|primitiveWritable
return|;
case|case
name|DOUBLE
case|:
operator|(
operator|(
name|DoubleWritable
operator|)
name|primitiveWritable
operator|)
operator|.
name|set
argument_list|(
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|adjustedIndex
index|]
argument_list|)
expr_stmt|;
return|return
name|primitiveWritable
return|;
case|case
name|BINARY
case|:
block|{
specifier|final
name|BytesColumnVector
name|bytesColVector
init|=
operator|(
operator|(
name|BytesColumnVector
operator|)
name|colVector
operator|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|bytesColVector
operator|.
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
specifier|final
name|int
name|start
init|=
name|bytesColVector
operator|.
name|start
index|[
name|adjustedIndex
index|]
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|bytesColVector
operator|.
name|length
index|[
name|adjustedIndex
index|]
decl_stmt|;
name|BytesWritable
name|bytesWritable
init|=
operator|(
name|BytesWritable
operator|)
name|primitiveWritable
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|nullBytesReadError
argument_list|(
name|primitiveCategory
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
name|bytesWritable
operator|.
name|set
argument_list|(
name|EMPTY_BYTES
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bytesWritable
operator|.
name|set
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|primitiveWritable
return|;
block|}
case|case
name|STRING
case|:
block|{
specifier|final
name|BytesColumnVector
name|bytesColVector
init|=
operator|(
operator|(
name|BytesColumnVector
operator|)
name|colVector
operator|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|bytesColVector
operator|.
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
specifier|final
name|int
name|start
init|=
name|bytesColVector
operator|.
name|start
index|[
name|adjustedIndex
index|]
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|bytesColVector
operator|.
name|length
index|[
name|adjustedIndex
index|]
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|nullBytesReadError
argument_list|(
name|primitiveCategory
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|Text
operator|)
name|primitiveWritable
operator|)
operator|.
name|set
argument_list|(
name|EMPTY_BYTES
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Use org.apache.hadoop.io.Text as our helper to go from byte[] to String.
operator|(
operator|(
name|Text
operator|)
name|primitiveWritable
operator|)
operator|.
name|set
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|primitiveWritable
return|;
block|}
case|case
name|VARCHAR
case|:
block|{
specifier|final
name|BytesColumnVector
name|bytesColVector
init|=
operator|(
operator|(
name|BytesColumnVector
operator|)
name|colVector
operator|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|bytesColVector
operator|.
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
specifier|final
name|int
name|start
init|=
name|bytesColVector
operator|.
name|start
index|[
name|adjustedIndex
index|]
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|bytesColVector
operator|.
name|length
index|[
name|adjustedIndex
index|]
decl_stmt|;
specifier|final
name|HiveVarcharWritable
name|hiveVarcharWritable
init|=
operator|(
name|HiveVarcharWritable
operator|)
name|primitiveWritable
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|nullBytesReadError
argument_list|(
name|primitiveCategory
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
name|hiveVarcharWritable
operator|.
name|set
argument_list|(
name|EMPTY_STRING
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|adjustedLength
init|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|,
operator|(
operator|(
name|VarcharTypeInfo
operator|)
name|primitiveTypeInfo
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|adjustedLength
operator|==
literal|0
condition|)
block|{
name|hiveVarcharWritable
operator|.
name|set
argument_list|(
name|EMPTY_STRING
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveVarcharWritable
operator|.
name|set
argument_list|(
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|adjustedLength
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|primitiveWritable
return|;
block|}
case|case
name|CHAR
case|:
block|{
specifier|final
name|BytesColumnVector
name|bytesColVector
init|=
operator|(
operator|(
name|BytesColumnVector
operator|)
name|colVector
operator|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|bytesColVector
operator|.
name|vector
index|[
name|adjustedIndex
index|]
decl_stmt|;
specifier|final
name|int
name|start
init|=
name|bytesColVector
operator|.
name|start
index|[
name|adjustedIndex
index|]
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|bytesColVector
operator|.
name|length
index|[
name|adjustedIndex
index|]
decl_stmt|;
specifier|final
name|HiveCharWritable
name|hiveCharWritable
init|=
operator|(
name|HiveCharWritable
operator|)
name|primitiveWritable
decl_stmt|;
specifier|final
name|int
name|maxLength
init|=
operator|(
operator|(
name|CharTypeInfo
operator|)
name|primitiveTypeInfo
operator|)
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|nullBytesReadError
argument_list|(
name|primitiveCategory
argument_list|,
name|batchIndex
argument_list|)
expr_stmt|;
block|}
name|hiveCharWritable
operator|.
name|set
argument_list|(
name|EMPTY_STRING
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|adjustedLength
init|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|,
operator|(
operator|(
name|CharTypeInfo
operator|)
name|primitiveTypeInfo
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|adjustedLength
operator|==
literal|0
condition|)
block|{
name|hiveCharWritable
operator|.
name|set
argument_list|(
name|EMPTY_STRING
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveCharWritable
operator|.
name|set
argument_list|(
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|adjustedLength
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|primitiveWritable
return|;
block|}
case|case
name|DECIMAL
case|:
if|if
condition|(
name|colVector
operator|instanceof
name|Decimal64ColumnVector
condition|)
block|{
name|Decimal64ColumnVector
name|dec32ColVector
init|=
operator|(
name|Decimal64ColumnVector
operator|)
name|colVector
decl_stmt|;
operator|(
operator|(
name|HiveDecimalWritable
operator|)
name|primitiveWritable
operator|)
operator|.
name|deserialize64
argument_list|(
name|dec32ColVector
operator|.
name|vector
index|[
name|adjustedIndex
index|]
argument_list|,
name|dec32ColVector
operator|.
name|scale
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The HiveDecimalWritable set method will quickly copy the deserialized decimal writable fields.
operator|(
operator|(
name|HiveDecimalWritable
operator|)
name|primitiveWritable
operator|)
operator|.
name|set
argument_list|(
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|colVector
operator|)
operator|.
name|vector
index|[
name|adjustedIndex
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|primitiveWritable
return|;
case|case
name|INTERVAL_YEAR_MONTH
case|:
operator|(
operator|(
name|HiveIntervalYearMonthWritable
operator|)
name|primitiveWritable
operator|)
operator|.
name|set
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|colVector
argument_list|)
operator|.
name|vector
index|[
name|adjustedIndex
index|]
argument_list|)
expr_stmt|;
return|return
name|primitiveWritable
return|;
case|case
name|INTERVAL_DAY_TIME
case|:
operator|(
operator|(
name|HiveIntervalDayTimeWritable
operator|)
name|primitiveWritable
operator|)
operator|.
name|set
argument_list|(
operator|(
operator|(
name|IntervalDayTimeColumnVector
operator|)
name|colVector
operator|)
operator|.
name|asScratchIntervalDayTime
argument_list|(
name|adjustedIndex
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|primitiveWritable
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Primitive category "
operator|+
name|primitiveCategory
operator|.
name|name
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
block|}
case|case
name|LIST
case|:
block|{
specifier|final
name|ListColumnVector
name|listColumnVector
init|=
operator|(
name|ListColumnVector
operator|)
name|colVector
decl_stmt|;
specifier|final
name|ListTypeInfo
name|listTypeInfo
init|=
operator|(
name|ListTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|ListObjectInspector
name|listObjectInspector
init|=
operator|(
name|ListObjectInspector
operator|)
name|objectInspector
decl_stmt|;
specifier|final
name|int
name|offset
init|=
operator|(
name|int
operator|)
name|listColumnVector
operator|.
name|offsets
index|[
name|adjustedIndex
index|]
decl_stmt|;
specifier|final
name|int
name|size
init|=
operator|(
name|int
operator|)
name|listColumnVector
operator|.
name|lengths
index|[
name|adjustedIndex
index|]
decl_stmt|;
specifier|final
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|extractRowColumn
argument_list|(
name|listColumnVector
operator|.
name|child
argument_list|,
name|listTypeInfo
operator|.
name|getListElementTypeInfo
argument_list|()
argument_list|,
name|listObjectInspector
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|,
name|offset
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
case|case
name|MAP
case|:
block|{
specifier|final
name|MapColumnVector
name|mapColumnVector
init|=
operator|(
name|MapColumnVector
operator|)
name|colVector
decl_stmt|;
specifier|final
name|MapTypeInfo
name|mapTypeInfo
init|=
operator|(
name|MapTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|MapObjectInspector
name|mapObjectInspector
init|=
operator|(
name|MapObjectInspector
operator|)
name|objectInspector
decl_stmt|;
specifier|final
name|int
name|offset
init|=
operator|(
name|int
operator|)
name|mapColumnVector
operator|.
name|offsets
index|[
name|adjustedIndex
index|]
decl_stmt|;
specifier|final
name|int
name|size
init|=
operator|(
name|int
operator|)
name|mapColumnVector
operator|.
name|lengths
index|[
name|adjustedIndex
index|]
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Object
name|key
init|=
name|extractRowColumn
argument_list|(
name|mapColumnVector
operator|.
name|keys
argument_list|,
name|mapTypeInfo
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|,
name|mapObjectInspector
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|,
name|offset
operator|+
name|i
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|extractRowColumn
argument_list|(
name|mapColumnVector
operator|.
name|values
argument_list|,
name|mapTypeInfo
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|,
name|mapObjectInspector
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|,
name|offset
operator|+
name|i
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
case|case
name|STRUCT
case|:
block|{
specifier|final
name|StructColumnVector
name|structColumnVector
init|=
operator|(
name|StructColumnVector
operator|)
name|colVector
decl_stmt|;
specifier|final
name|StructTypeInfo
name|structTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|StandardStructObjectInspector
name|structInspector
init|=
operator|(
name|StandardStructObjectInspector
operator|)
name|objectInspector
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|fieldTypeInfos
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|structFields
init|=
name|structInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|struct
init|=
name|structInspector
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StructField
name|structField
init|=
name|structFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|TypeInfo
name|fieldTypeInfo
init|=
name|fieldTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|extractRowColumn
argument_list|(
name|structColumnVector
operator|.
name|fields
index|[
name|i
index|]
argument_list|,
name|fieldTypeInfo
argument_list|,
name|structField
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|adjustedIndex
argument_list|)
decl_stmt|;
name|structInspector
operator|.
name|setStructFieldData
argument_list|(
name|struct
argument_list|,
name|structField
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|struct
return|;
block|}
case|case
name|UNION
case|:
block|{
specifier|final
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|(
name|UnionTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|objectTypeInfos
init|=
name|unionTypeInfo
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|UnionObjectInspector
name|unionInspector
init|=
operator|(
name|UnionObjectInspector
operator|)
name|objectInspector
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|unionInspectors
init|=
name|unionInspector
operator|.
name|getObjectInspectors
argument_list|()
decl_stmt|;
specifier|final
name|UnionColumnVector
name|unionColumnVector
init|=
operator|(
name|UnionColumnVector
operator|)
name|colVector
decl_stmt|;
specifier|final
name|byte
name|tag
init|=
operator|(
name|byte
operator|)
name|unionColumnVector
operator|.
name|tags
index|[
name|adjustedIndex
index|]
decl_stmt|;
specifier|final
name|Object
name|object
init|=
name|extractRowColumn
argument_list|(
name|unionColumnVector
operator|.
name|fields
index|[
name|tag
index|]
argument_list|,
name|objectTypeInfos
operator|.
name|get
argument_list|(
name|tag
argument_list|)
argument_list|,
name|unionInspectors
operator|.
name|get
argument_list|(
name|tag
argument_list|)
argument_list|,
name|adjustedIndex
argument_list|)
decl_stmt|;
specifier|final
name|StandardUnion
name|standardUnion
init|=
operator|new
name|StandardUnion
argument_list|()
decl_stmt|;
name|standardUnion
operator|.
name|setTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|standardUnion
operator|.
name|setObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
return|return
name|standardUnion
return|;
block|}
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Category "
operator|+
name|category
operator|.
name|name
argument_list|()
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Extract an row object from a VectorizedRowBatch at batchIndex.    *    * @param batch    * @param batchIndex    * @param objects    */
specifier|public
name|void
name|extractRow
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchIndex
parameter_list|,
name|Object
index|[]
name|objects
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|projectionColumnNums
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|objects
index|[
name|i
index|]
operator|=
name|extractRowColumn
argument_list|(
name|batch
argument_list|,
name|batchIndex
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|nullBytesReadError
parameter_list|(
name|PrimitiveCategory
name|primitiveCategory
parameter_list|,
name|int
name|batchIndex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"null "
operator|+
name|primitiveCategory
operator|.
name|name
argument_list|()
operator|+
literal|" entry: batchIndex "
operator|+
name|batchIndex
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

