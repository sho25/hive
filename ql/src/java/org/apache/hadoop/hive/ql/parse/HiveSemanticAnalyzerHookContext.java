begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_comment
comment|/**  * Context information provided by Hive to implementations of  * HiveSemanticAnalyzerHook.  */
end_comment

begin_interface
specifier|public
interface|interface
name|HiveSemanticAnalyzerHookContext
extends|extends
name|Configurable
block|{
comment|/**    * @return the Hive db instance; hook implementations can use this for    * purposes such as getting configuration information or making metastore calls    */
specifier|public
name|Hive
name|getHive
parameter_list|()
throws|throws
name|HiveException
function_decl|;
comment|/**    * This should be called after the semantic analyzer completes.    * @param sem    */
specifier|public
name|void
name|update
parameter_list|(
name|BaseSemanticAnalyzer
name|sem
parameter_list|)
function_decl|;
comment|/**    * The following methods will only be available to hooks executing postAnalyze.  If called in a    * preAnalyze method, they should return null.    * @return the set of read entities    */
specifier|public
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|getInputs
parameter_list|()
function_decl|;
specifier|public
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|getOutputs
parameter_list|()
function_decl|;
specifier|public
name|String
name|getUserName
parameter_list|()
function_decl|;
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
function_decl|;
specifier|public
name|String
name|getIpAddress
parameter_list|()
function_decl|;
specifier|public
name|void
name|setIpAddress
parameter_list|(
name|String
name|ipAddress
parameter_list|)
function_decl|;
specifier|public
name|String
name|getCommand
parameter_list|()
function_decl|;
specifier|public
name|void
name|setCommand
parameter_list|(
name|String
name|command
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

