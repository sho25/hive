begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SMBMapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|SparkTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|GenMapRedUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|spark
operator|.
name|GenSparkProcContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BucketMapJoinContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredLocalWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_comment
comment|/** * Operator factory for Spark SMBJoin processing. */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SparkSortMergeJoinFactory
block|{
specifier|private
name|SparkSortMergeJoinFactory
parameter_list|()
block|{
comment|// prevent instantiation
block|}
comment|/**    * Get the branch on which we are invoked (walking) from.  See diagram below.    * We are at the SMBJoinOp and could have come from TS of any of the input tables.    */
specifier|public
specifier|static
name|int
name|getPositionParent
parameter_list|(
name|SMBMapJoinOperator
name|op
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|)
block|{
name|int
name|size
init|=
name|stack
operator|.
name|size
argument_list|()
decl_stmt|;
assert|assert
name|size
operator|>=
literal|2
operator|&&
name|stack
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
operator|==
name|op
assert|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
init|=
operator|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
operator|)
name|stack
operator|.
name|get
argument_list|(
name|size
operator|-
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|parOp
init|=
name|op
operator|.
name|getParentOperators
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|parOp
operator|.
name|indexOf
argument_list|(
name|parent
argument_list|)
decl_stmt|;
return|return
name|pos
return|;
block|}
comment|/**    * SortMergeMapJoin processor, input is a SMBJoinOp that is part of a MapWork:    *    *  MapWork:    *    *   (Big)   (Small)  (Small)    *    TS       TS       TS    *     \       |       /    *       \     DS     DS    *         \   |    /    *          SMBJoinOP    *    * 1. Initializes the MapWork's aliasToWork, pointing to big-table's TS.    * 2. Adds the bucketing information to the MapWork.    * 3. Adds localwork to the MapWork, with localWork's aliasToWork pointing to small-table's TS.    */
specifier|private
specifier|static
class|class
name|SortMergeJoinProcessor
implements|implements
name|NodeProcessor
block|{
specifier|public
specifier|static
name|void
name|setupBucketMapJoinInfo
parameter_list|(
name|MapWork
name|plan
parameter_list|,
name|SMBMapJoinOperator
name|currMapJoinOp
parameter_list|)
block|{
if|if
condition|(
name|currMapJoinOp
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|aliasBucketFileNameMapping
init|=
name|currMapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getAliasBucketFileNameMapping
argument_list|()
decl_stmt|;
if|if
condition|(
name|aliasBucketFileNameMapping
operator|!=
literal|null
condition|)
block|{
name|MapredLocalWork
name|localPlan
init|=
name|plan
operator|.
name|getMapLocalWork
argument_list|()
decl_stmt|;
if|if
condition|(
name|localPlan
operator|==
literal|null
condition|)
block|{
name|localPlan
operator|=
name|currMapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getLocalWork
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// local plan is not null, we want to merge it into SMBMapJoinOperator's local work
name|MapredLocalWork
name|smbLocalWork
init|=
name|currMapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getLocalWork
argument_list|()
decl_stmt|;
if|if
condition|(
name|smbLocalWork
operator|!=
literal|null
condition|)
block|{
name|localPlan
operator|.
name|getAliasToFetchWork
argument_list|()
operator|.
name|putAll
argument_list|(
name|smbLocalWork
operator|.
name|getAliasToFetchWork
argument_list|()
argument_list|)
expr_stmt|;
name|localPlan
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|putAll
argument_list|(
name|smbLocalWork
operator|.
name|getAliasToWork
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|localPlan
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|plan
operator|.
name|setMapLocalWork
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|currMapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|setLocalWork
argument_list|(
name|localPlan
argument_list|)
expr_stmt|;
name|BucketMapJoinContext
name|bucketMJCxt
init|=
operator|new
name|BucketMapJoinContext
argument_list|()
decl_stmt|;
name|localPlan
operator|.
name|setBucketMapjoinContext
argument_list|(
name|bucketMJCxt
argument_list|)
expr_stmt|;
name|bucketMJCxt
operator|.
name|setAliasBucketFileNameMapping
argument_list|(
name|aliasBucketFileNameMapping
argument_list|)
expr_stmt|;
name|bucketMJCxt
operator|.
name|setBucketFileNameMapping
argument_list|(
name|currMapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getBigTableBucketNumMapping
argument_list|()
argument_list|)
expr_stmt|;
name|localPlan
operator|.
name|setInputFileChangeSensitive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bucketMJCxt
operator|.
name|setMapJoinBigTableAlias
argument_list|(
name|currMapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getBigTableAlias
argument_list|()
argument_list|)
expr_stmt|;
name|bucketMJCxt
operator|.
name|setBucketMatcherClass
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|DefaultBucketMatcher
operator|.
name|class
argument_list|)
expr_stmt|;
name|bucketMJCxt
operator|.
name|setBigTablePartSpecToFileMapping
argument_list|(
name|currMapJoinOp
operator|.
name|getConf
argument_list|()
operator|.
name|getBigTablePartSpecToFileMapping
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setUseBucketizedHiveInputFormat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Initialize the mapWork.      *      * @param opProcCtx      *          processing context      */
specifier|private
specifier|static
name|void
name|initSMBJoinPlan
parameter_list|(
name|MapWork
name|mapWork
parameter_list|,
name|GenSparkProcContext
name|opProcCtx
parameter_list|,
name|boolean
name|local
parameter_list|)
throws|throws
name|SemanticException
block|{
name|TableScanOperator
name|ts
init|=
operator|(
name|TableScanOperator
operator|)
name|opProcCtx
operator|.
name|currentRootOperator
decl_stmt|;
name|String
name|currAliasId
init|=
name|findAliasId
argument_list|(
name|opProcCtx
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|GenMapRedUtils
operator|.
name|setMapWork
argument_list|(
name|mapWork
argument_list|,
name|opProcCtx
operator|.
name|parseContext
argument_list|,
name|opProcCtx
operator|.
name|inputs
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
name|currAliasId
argument_list|,
name|opProcCtx
operator|.
name|conf
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|findAliasId
parameter_list|(
name|GenSparkProcContext
name|opProcCtx
parameter_list|,
name|TableScanOperator
name|ts
parameter_list|)
block|{
for|for
control|(
name|String
name|alias
range|:
name|opProcCtx
operator|.
name|topOps
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|opProcCtx
operator|.
name|topOps
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|==
name|ts
condition|)
block|{
return|return
name|alias
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * 1. Initializes the MapWork's aliasToWork, pointing to big-table's TS.      * 2. Adds the bucketing information to the MapWork.      * 3. Adds localwork to the MapWork, with localWork's aliasToWork pointing to small-table's TS.      */
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|SMBMapJoinOperator
name|mapJoin
init|=
operator|(
name|SMBMapJoinOperator
operator|)
name|nd
decl_stmt|;
name|GenSparkProcContext
name|ctx
init|=
operator|(
name|GenSparkProcContext
operator|)
name|procCtx
decl_stmt|;
name|SparkTask
name|currTask
init|=
name|ctx
operator|.
name|currentTask
decl_stmt|;
comment|// find the branch on which this processor was invoked
name|int
name|pos
init|=
name|getPositionParent
argument_list|(
name|mapJoin
argument_list|,
name|stack
argument_list|)
decl_stmt|;
name|boolean
name|local
init|=
name|pos
operator|!=
name|mapJoin
operator|.
name|getConf
argument_list|()
operator|.
name|getPosBigTable
argument_list|()
decl_stmt|;
name|MapWork
name|mapWork
init|=
name|ctx
operator|.
name|smbJoinWorkMap
operator|.
name|get
argument_list|(
name|mapJoin
argument_list|)
decl_stmt|;
name|initSMBJoinPlan
argument_list|(
name|mapWork
argument_list|,
name|ctx
argument_list|,
name|local
argument_list|)
expr_stmt|;
comment|// find the associated mapWork that contains this processor.
name|setupBucketMapJoinInfo
argument_list|(
name|mapWork
argument_list|,
name|mapJoin
argument_list|)
expr_stmt|;
comment|// local aliases need not to hand over context further
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|NodeProcessor
name|getTableScanMapJoin
parameter_list|()
block|{
return|return
operator|new
name|SortMergeJoinProcessor
argument_list|()
return|;
block|}
block|}
end_class

end_unit

