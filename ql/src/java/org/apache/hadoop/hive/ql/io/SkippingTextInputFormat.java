begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * SkippingInputFormat is a header/footer aware input format. It truncates  * splits identified by TextInputFormat. Header and footers are removed  * from the splits.  */
end_comment

begin_class
specifier|public
class|class
name|SkippingTextInputFormat
extends|extends
name|TextInputFormat
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|Long
argument_list|>
name|startIndexMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Path
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|Long
argument_list|>
name|endIndexMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Path
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|JobConf
name|conf
decl_stmt|;
specifier|private
name|int
name|headerCount
decl_stmt|;
specifier|private
name|int
name|footerCount
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|super
operator|.
name|configure
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|int
name|headerCount
parameter_list|,
name|int
name|footerCount
parameter_list|)
block|{
name|configure
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|headerCount
operator|=
name|headerCount
expr_stmt|;
name|this
operator|.
name|footerCount
operator|=
name|footerCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|FileSplit
name|makeSplit
parameter_list|(
name|Path
name|file
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|length
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|)
block|{
return|return
name|makeSplitInternal
argument_list|(
name|file
argument_list|,
name|start
argument_list|,
name|length
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|FileSplit
name|makeSplit
parameter_list|(
name|Path
name|file
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|length
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|String
index|[]
name|inMemoryHosts
parameter_list|)
block|{
return|return
name|makeSplitInternal
argument_list|(
name|file
argument_list|,
name|start
argument_list|,
name|length
argument_list|,
name|hosts
argument_list|,
name|inMemoryHosts
argument_list|)
return|;
block|}
specifier|private
name|FileSplit
name|makeSplitInternal
parameter_list|(
name|Path
name|file
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|length
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|String
index|[]
name|inMemoryHosts
parameter_list|)
block|{
name|long
name|cachedStart
decl_stmt|;
name|long
name|cachedEnd
decl_stmt|;
try|try
block|{
name|cachedStart
operator|=
name|getCachedStartIndex
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|cachedEnd
operator|=
name|getCachedEndIndex
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not detect header/footer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|NullRowsInputFormat
operator|.
name|DummyInputSplit
argument_list|(
name|file
argument_list|)
return|;
block|}
if|if
condition|(
name|cachedStart
operator|>
name|start
operator|+
name|length
condition|)
block|{
return|return
operator|new
name|NullRowsInputFormat
operator|.
name|DummyInputSplit
argument_list|(
name|file
argument_list|)
return|;
block|}
if|if
condition|(
name|cachedStart
operator|>
name|start
condition|)
block|{
name|length
operator|=
name|length
operator|-
operator|(
name|cachedStart
operator|-
name|start
operator|)
expr_stmt|;
name|start
operator|=
name|cachedStart
expr_stmt|;
block|}
if|if
condition|(
name|cachedEnd
operator|<
name|start
condition|)
block|{
return|return
operator|new
name|NullRowsInputFormat
operator|.
name|DummyInputSplit
argument_list|(
name|file
argument_list|)
return|;
block|}
if|if
condition|(
name|cachedEnd
operator|<
name|start
operator|+
name|length
condition|)
block|{
name|length
operator|=
name|cachedEnd
operator|-
name|start
expr_stmt|;
block|}
if|if
condition|(
name|inMemoryHosts
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|makeSplit
argument_list|(
name|file
argument_list|,
name|start
argument_list|,
name|length
argument_list|,
name|hosts
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|makeSplit
argument_list|(
name|file
argument_list|,
name|start
argument_list|,
name|length
argument_list|,
name|hosts
argument_list|,
name|inMemoryHosts
argument_list|)
return|;
block|}
block|}
specifier|private
name|long
name|getCachedStartIndex
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|headerCount
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|Long
name|startIndexForFile
init|=
name|startIndexMap
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|startIndexForFile
operator|==
literal|null
condition|)
block|{
name|FileSystem
name|fileSystem
decl_stmt|;
name|FSDataInputStream
name|fis
init|=
literal|null
decl_stmt|;
name|fileSystem
operator|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|fis
operator|=
name|fileSystem
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|headerCount
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|fis
operator|.
name|readLine
argument_list|()
operator|==
literal|null
condition|)
block|{
name|startIndexMap
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
block|}
comment|// Readers skip the entire first row if the start index of the
comment|// split is not zero. We are setting the start of the index as
comment|// the last byte of the previous row so the last line of header
comment|// is discarded instead of the first valid input row.
name|startIndexForFile
operator|=
name|fis
operator|.
name|getPos
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|startIndexMap
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|startIndexForFile
argument_list|)
expr_stmt|;
block|}
return|return
name|startIndexForFile
return|;
block|}
specifier|private
name|long
name|getCachedEndIndex
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|endIndexForFile
init|=
name|endIndexMap
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|endIndexForFile
operator|==
literal|null
condition|)
block|{
specifier|final
name|long
name|bufferSectionSize
init|=
literal|5
operator|*
literal|1024
decl_stmt|;
name|FileSystem
name|fileSystem
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|endOfFile
init|=
name|fileSystem
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
if|if
condition|(
name|footerCount
operator|==
literal|0
condition|)
block|{
name|endIndexForFile
operator|=
name|endOfFile
expr_stmt|;
block|}
else|else
block|{
name|long
name|bufferSectionEnd
init|=
name|endOfFile
decl_stmt|;
comment|// first byte that is not included in the section
name|long
name|bufferSectionStart
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|bufferSectionEnd
operator|-
name|bufferSectionSize
argument_list|)
decl_stmt|;
comment|// we need 'footer count' lines and one space for EOF
name|LineBuffer
name|buffer
init|=
operator|new
name|LineBuffer
argument_list|(
name|footerCount
operator|+
literal|1
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fis
operator|=
name|fileSystem
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
while|while
condition|(
name|bufferSectionEnd
operator|>
name|bufferSectionStart
condition|)
block|{
name|fis
operator|.
name|seek
argument_list|(
name|bufferSectionStart
argument_list|)
expr_stmt|;
name|long
name|pos
init|=
name|fis
operator|.
name|getPos
argument_list|()
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|bufferSectionEnd
condition|)
block|{
if|if
condition|(
name|fis
operator|.
name|readLine
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// if there is not enough lines in this section, check the previous
comment|// section. If this is the beginning section, there are simply not
comment|// enough lines in the file.
break|break;
block|}
name|pos
operator|=
name|fis
operator|.
name|getPos
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|consume
argument_list|(
name|pos
argument_list|,
name|bufferSectionEnd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buffer
operator|.
name|getRemainingLineCount
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// if we consumed all the required line ends, that means the buffer now
comment|// contains the index of the first byte of the footer.
break|break;
block|}
else|else
block|{
name|bufferSectionEnd
operator|=
name|bufferSectionStart
expr_stmt|;
name|bufferSectionStart
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|bufferSectionEnd
operator|-
name|bufferSectionSize
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|buffer
operator|.
name|getRemainingLineCount
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// buffer.getFirstLineStart() is the first byte of the footer. So the split
comment|// must end before this.
name|endIndexForFile
operator|=
name|buffer
operator|.
name|getFirstLineStart
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// there were not enough lines in the file to consume all footer rows.
name|endIndexForFile
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|endIndexMap
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|endIndexForFile
argument_list|)
expr_stmt|;
block|}
return|return
name|endIndexForFile
return|;
block|}
specifier|static
class|class
name|LineBuffer
block|{
specifier|private
specifier|final
name|Queue
argument_list|<
name|Long
argument_list|>
name|queue
init|=
operator|new
name|ArrayDeque
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|remainingLineEnds
decl_stmt|;
specifier|private
name|long
name|lowPosition
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|LineBuffer
parameter_list|(
name|int
name|requiredLines
parameter_list|)
block|{
name|this
operator|.
name|remainingLineEnds
operator|=
name|requiredLines
expr_stmt|;
block|}
specifier|public
name|void
name|consume
parameter_list|(
name|long
name|position
parameter_list|,
name|long
name|sectionEnd
parameter_list|)
block|{
if|if
condition|(
name|position
operator|>
name|sectionEnd
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|position
operator|<
name|lowPosition
condition|)
block|{
name|remainingLineEnds
operator|-=
name|queue
operator|.
name|size
argument_list|()
expr_stmt|;
name|queue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|lowPosition
operator|=
name|position
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|position
operator|>
name|lowPosition
condition|)
block|{
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|==
name|remainingLineEnds
condition|)
block|{
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
name|queue
operator|.
name|add
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|lowPosition
operator|=
name|queue
operator|.
name|peek
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getRemainingLineCount
parameter_list|()
block|{
return|return
name|remainingLineEnds
operator|-
name|queue
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|long
name|getFirstLineStart
parameter_list|()
block|{
return|return
name|lowPosition
return|;
block|}
block|}
block|}
end_class

end_unit

