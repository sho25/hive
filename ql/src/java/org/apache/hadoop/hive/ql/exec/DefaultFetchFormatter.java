begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|SERIALIZATION_NULL_FORMAT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|DelimitedJSONSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * serialize row by user specified serde and call toString() to make string type result  */
end_comment

begin_class
specifier|public
class|class
name|DefaultFetchFormatter
parameter_list|<
name|T
parameter_list|>
implements|implements
name|FetchFormatter
argument_list|<
name|String
argument_list|>
block|{
specifier|private
name|SerDe
name|mSerde
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|hconf
parameter_list|,
name|Properties
name|props
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|mSerde
operator|=
name|initializeSerde
argument_list|(
name|hconf
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|SerDe
name|initializeSerde
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|props
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|serdeName
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEFETCHOUTPUTSERDE
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|SerDe
argument_list|>
name|serdeClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|serdeName
argument_list|,
literal|true
argument_list|,
name|Utilities
operator|.
name|getSessionSpecifiedClassLoader
argument_list|()
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|SerDe
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// cast only needed for Hadoop 0.17 compatibility
name|SerDe
name|serde
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|serdeClass
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Properties
name|serdeProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|serde
operator|instanceof
name|DelimitedJSONSerDe
condition|)
block|{
name|serdeProps
operator|.
name|put
argument_list|(
name|SERIALIZATION_FORMAT
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|SERIALIZATION_FORMAT
argument_list|)
argument_list|)
expr_stmt|;
name|serdeProps
operator|.
name|put
argument_list|(
name|SERIALIZATION_NULL_FORMAT
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|SERIALIZATION_NULL_FORMAT
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serde
argument_list|,
name|conf
argument_list|,
name|serdeProps
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|serde
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|convert
parameter_list|(
name|Object
name|row
parameter_list|,
name|ObjectInspector
name|rowOI
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|mSerde
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|rowOI
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{   }
block|}
end_class

end_unit

