begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|JoinUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MatchTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinBytesHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashMapResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinNonMatchedIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|WriteBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|WriteBuffers
operator|.
name|ByteSegmentRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HashCodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/*  * An bytes key hash map optimized for vector map join.  *  * This is the abstract base for the multi-key and string bytes key hash map implementations.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|VectorMapJoinFastBytesHashMap
extends|extends
name|VectorMapJoinFastBytesHashTable
implements|implements
name|VectorMapJoinBytesHashMap
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VectorMapJoinFastBytesHashMap
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|VectorMapJoinFastBytesHashMapStore
name|hashMapStore
decl_stmt|;
specifier|protected
name|BytesWritable
name|testValueBytesWritable
decl_stmt|;
specifier|private
name|long
name|fullOuterNullKeyRefWord
decl_stmt|;
specifier|private
specifier|static
class|class
name|NonMatchedBytesHashMapIterator
extends|extends
name|VectorMapJoinFastNonMatchedIterator
block|{
specifier|private
name|VectorMapJoinFastBytesHashMap
name|hashMap
decl_stmt|;
specifier|private
name|boolean
name|noMore
decl_stmt|;
specifier|private
name|boolean
name|keyIsNull
decl_stmt|;
specifier|private
name|WriteBuffers
operator|.
name|Position
name|nonMatchedReadPos
decl_stmt|;
specifier|private
name|ByteSegmentRef
name|nonMatchedKeyByteSegmentRef
decl_stmt|;
specifier|private
name|VectorMapJoinFastBytesHashMapStore
operator|.
name|HashMapResult
name|nonMatchedHashMapResult
decl_stmt|;
name|NonMatchedBytesHashMapIterator
parameter_list|(
name|MatchTracker
name|matchTracker
parameter_list|,
name|VectorMapJoinFastBytesHashMap
name|hashMap
parameter_list|)
block|{
name|super
argument_list|(
name|matchTracker
argument_list|)
expr_stmt|;
name|this
operator|.
name|hashMap
operator|=
name|hashMap
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
name|noMore
operator|=
literal|false
expr_stmt|;
name|keyIsNull
operator|=
literal|false
expr_stmt|;
name|nonMatchedReadPos
operator|=
operator|new
name|WriteBuffers
operator|.
name|Position
argument_list|()
expr_stmt|;
name|nonMatchedKeyByteSegmentRef
operator|=
operator|new
name|ByteSegmentRef
argument_list|()
expr_stmt|;
name|nonMatchedHashMapResult
operator|=
operator|new
name|VectorMapJoinFastBytesHashMapStore
operator|.
name|HashMapResult
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|findNextNonMatched
parameter_list|()
block|{
if|if
condition|(
name|noMore
condition|)
block|{
return|return
literal|false
return|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|nonMatchedLogicalSlotNum
operator|++
expr_stmt|;
if|if
condition|(
name|nonMatchedLogicalSlotNum
operator|>=
name|hashMap
operator|.
name|logicalHashBucketCount
condition|)
block|{
comment|// Fall below and handle Small Table NULL key.
break|break;
block|}
specifier|final
name|long
name|refWord
init|=
name|hashMap
operator|.
name|slots
index|[
name|nonMatchedLogicalSlotNum
index|]
decl_stmt|;
if|if
condition|(
name|refWord
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|matchTracker
operator|.
name|wasMatched
argument_list|(
name|nonMatchedLogicalSlotNum
argument_list|)
condition|)
block|{
name|nonMatchedHashMapResult
operator|.
name|set
argument_list|(
name|hashMap
operator|.
name|hashMapStore
argument_list|,
name|refWord
argument_list|)
expr_stmt|;
name|keyIsNull
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
comment|// Do we have a Small Table NULL Key?
if|if
condition|(
name|hashMap
operator|.
name|fullOuterNullKeyRefWord
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|nonMatchedHashMapResult
operator|.
name|set
argument_list|(
name|hashMap
operator|.
name|hashMapStore
argument_list|,
name|hashMap
operator|.
name|fullOuterNullKeyRefWord
argument_list|)
expr_stmt|;
name|noMore
operator|=
literal|true
expr_stmt|;
name|keyIsNull
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|readNonMatchedBytesKey
parameter_list|()
throws|throws
name|HiveException
block|{
if|if
condition|(
name|keyIsNull
condition|)
block|{
return|return
literal|false
return|;
block|}
name|hashMap
operator|.
name|hashMapStore
operator|.
name|getKey
argument_list|(
name|hashMap
operator|.
name|slots
index|[
name|nonMatchedLogicalSlotNum
index|]
argument_list|,
name|nonMatchedKeyByteSegmentRef
argument_list|,
name|nonMatchedReadPos
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getNonMatchedBytes
parameter_list|()
block|{
return|return
name|nonMatchedKeyByteSegmentRef
operator|.
name|getBytes
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNonMatchedBytesOffset
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|nonMatchedKeyByteSegmentRef
operator|.
name|getOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNonMatchedBytesLength
parameter_list|()
block|{
return|return
name|nonMatchedKeyByteSegmentRef
operator|.
name|getLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorMapJoinHashMapResult
name|getNonMatchedHashMapResult
parameter_list|()
block|{
return|return
name|nonMatchedHashMapResult
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|VectorMapJoinHashMapResult
name|createHashMapResult
parameter_list|()
block|{
return|return
operator|new
name|VectorMapJoinFastBytesHashMapStore
operator|.
name|HashMapResult
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorMapJoinNonMatchedIterator
name|createNonMatchedIterator
parameter_list|(
name|MatchTracker
name|matchTracker
parameter_list|)
block|{
return|return
operator|new
name|NonMatchedBytesHashMapIterator
argument_list|(
name|matchTracker
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|byte
index|[]
name|keyBytes
parameter_list|,
name|int
name|keyStart
parameter_list|,
name|int
name|keyLength
parameter_list|,
name|BytesWritable
name|currentValue
parameter_list|)
block|{
if|if
condition|(
name|resizeThreshold
operator|<=
name|keysAssigned
condition|)
block|{
name|expandAndRehash
argument_list|()
expr_stmt|;
block|}
name|long
name|hashCode
init|=
name|HashCodeUtil
operator|.
name|murmurHash
argument_list|(
name|keyBytes
argument_list|,
name|keyStart
argument_list|,
name|keyLength
argument_list|)
decl_stmt|;
name|int
name|intHashCode
init|=
operator|(
name|int
operator|)
name|hashCode
decl_stmt|;
name|int
name|slot
init|=
operator|(
name|intHashCode
operator|&
name|logicalHashBucketMask
operator|)
decl_stmt|;
name|long
name|probeSlot
init|=
name|slot
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|boolean
name|isNewKey
decl_stmt|;
name|long
name|refWord
decl_stmt|;
specifier|final
name|long
name|partialHashCode
init|=
name|VectorMapJoinFastBytesHashKeyRef
operator|.
name|extractPartialHashCode
argument_list|(
name|hashCode
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|refWord
operator|=
name|slots
index|[
name|slot
index|]
expr_stmt|;
if|if
condition|(
name|refWord
operator|==
literal|0
condition|)
block|{
name|isNewKey
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|VectorMapJoinFastBytesHashKeyRef
operator|.
name|getPartialHashCodeFromRefWord
argument_list|(
name|refWord
argument_list|)
operator|==
name|partialHashCode
operator|&&
name|VectorMapJoinFastBytesHashKeyRef
operator|.
name|equalKey
argument_list|(
name|refWord
argument_list|,
name|keyBytes
argument_list|,
name|keyStart
argument_list|,
name|keyLength
argument_list|,
name|writeBuffers
argument_list|,
name|unsafeReadPos
argument_list|)
condition|)
block|{
name|isNewKey
operator|=
literal|false
expr_stmt|;
break|break;
block|}
operator|++
name|metricPutConflict
expr_stmt|;
comment|// Some other key (collision) - keep probing.
name|probeSlot
operator|+=
operator|(
operator|++
name|i
operator|)
expr_stmt|;
name|slot
operator|=
call|(
name|int
call|)
argument_list|(
name|probeSlot
operator|&
name|logicalHashBucketMask
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|largestNumberOfSteps
operator|<
name|i
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Probed "
operator|+
name|i
operator|+
literal|" slots (the longest so far) to find space"
argument_list|)
expr_stmt|;
block|}
name|largestNumberOfSteps
operator|=
name|i
expr_stmt|;
comment|// debugDumpKeyProbe(keyOffset, keyLength, hashCode, slot);
block|}
name|byte
index|[]
name|valueBytes
init|=
name|currentValue
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|valueLength
init|=
name|currentValue
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNewKey
condition|)
block|{
name|slots
index|[
name|slot
index|]
operator|=
name|hashMapStore
operator|.
name|addFirst
argument_list|(
name|partialHashCode
argument_list|,
name|keyBytes
argument_list|,
name|keyStart
argument_list|,
name|keyLength
argument_list|,
name|valueBytes
argument_list|,
literal|0
argument_list|,
name|valueLength
argument_list|)
expr_stmt|;
name|keysAssigned
operator|++
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|long
name|newRefWord
init|=
name|hashMapStore
operator|.
name|addMore
argument_list|(
name|refWord
argument_list|,
name|valueBytes
argument_list|,
literal|0
argument_list|,
name|valueLength
argument_list|,
name|unsafeReadPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|newRefWord
operator|!=
name|refWord
condition|)
block|{
name|slots
index|[
name|slot
index|]
operator|=
name|newRefWord
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|JoinUtil
operator|.
name|JoinResult
name|lookup
parameter_list|(
name|byte
index|[]
name|keyBytes
parameter_list|,
name|int
name|keyStart
parameter_list|,
name|int
name|keyLength
parameter_list|,
name|VectorMapJoinHashMapResult
name|hashMapResult
parameter_list|)
block|{
name|VectorMapJoinFastBytesHashMapStore
operator|.
name|HashMapResult
name|fastHashMapResult
init|=
operator|(
name|VectorMapJoinFastBytesHashMapStore
operator|.
name|HashMapResult
operator|)
name|hashMapResult
decl_stmt|;
name|fastHashMapResult
operator|.
name|forget
argument_list|()
expr_stmt|;
name|long
name|hashCode
init|=
name|HashCodeUtil
operator|.
name|murmurHash
argument_list|(
name|keyBytes
argument_list|,
name|keyStart
argument_list|,
name|keyLength
argument_list|)
decl_stmt|;
name|doHashMapMatch
argument_list|(
name|keyBytes
argument_list|,
name|keyStart
argument_list|,
name|keyLength
argument_list|,
name|hashCode
argument_list|,
name|fastHashMapResult
argument_list|)
expr_stmt|;
return|return
name|fastHashMapResult
operator|.
name|joinResult
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|JoinUtil
operator|.
name|JoinResult
name|lookup
parameter_list|(
name|byte
index|[]
name|keyBytes
parameter_list|,
name|int
name|keyStart
parameter_list|,
name|int
name|keyLength
parameter_list|,
name|VectorMapJoinHashMapResult
name|hashMapResult
parameter_list|,
name|MatchTracker
name|matchTracker
parameter_list|)
block|{
name|VectorMapJoinFastBytesHashMapStore
operator|.
name|HashMapResult
name|fastHashMapResult
init|=
operator|(
name|VectorMapJoinFastBytesHashMapStore
operator|.
name|HashMapResult
operator|)
name|hashMapResult
decl_stmt|;
name|fastHashMapResult
operator|.
name|forget
argument_list|()
expr_stmt|;
name|long
name|hashCode
init|=
name|HashCodeUtil
operator|.
name|murmurHash
argument_list|(
name|keyBytes
argument_list|,
name|keyStart
argument_list|,
name|keyLength
argument_list|)
decl_stmt|;
specifier|final
name|int
name|slot
init|=
name|doHashMapMatch
argument_list|(
name|keyBytes
argument_list|,
name|keyStart
argument_list|,
name|keyLength
argument_list|,
name|hashCode
argument_list|,
name|fastHashMapResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|slot
operator|!=
operator|-
literal|1
operator|&&
name|matchTracker
operator|!=
literal|null
condition|)
block|{
name|matchTracker
operator|.
name|trackMatch
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
return|return
name|fastHashMapResult
operator|.
name|joinResult
argument_list|()
return|;
block|}
specifier|protected
specifier|final
name|int
name|doHashMapMatch
parameter_list|(
name|byte
index|[]
name|keyBytes
parameter_list|,
name|int
name|keyStart
parameter_list|,
name|int
name|keyLength
parameter_list|,
name|long
name|hashCode
parameter_list|,
name|VectorMapJoinFastBytesHashMapStore
operator|.
name|HashMapResult
name|fastHashMapResult
parameter_list|)
block|{
name|int
name|intHashCode
init|=
operator|(
name|int
operator|)
name|hashCode
decl_stmt|;
name|int
name|slot
init|=
operator|(
name|intHashCode
operator|&
name|logicalHashBucketMask
operator|)
decl_stmt|;
name|long
name|probeSlot
init|=
name|slot
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|partialHashCode
init|=
name|VectorMapJoinFastBytesHashKeyRef
operator|.
name|extractPartialHashCode
argument_list|(
name|hashCode
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|long
name|refWord
init|=
name|slots
index|[
name|slot
index|]
decl_stmt|;
if|if
condition|(
name|refWord
operator|==
literal|0
condition|)
block|{
comment|// Given that we do not delete, an empty slot means no match.
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|VectorMapJoinFastBytesHashKeyRef
operator|.
name|getPartialHashCodeFromRefWord
argument_list|(
name|refWord
argument_list|)
operator|==
name|partialHashCode
condition|)
block|{
comment|// Finally, verify the key bytes match and remember read positions, etc in
comment|// fastHashMapResult.
name|fastHashMapResult
operator|.
name|setKey
argument_list|(
name|hashMapStore
argument_list|,
name|refWord
argument_list|)
expr_stmt|;
if|if
condition|(
name|fastHashMapResult
operator|.
name|equalKey
argument_list|(
name|keyBytes
argument_list|,
name|keyStart
argument_list|,
name|keyLength
argument_list|)
condition|)
block|{
name|fastHashMapResult
operator|.
name|setMatch
argument_list|()
expr_stmt|;
return|return
name|slot
return|;
block|}
block|}
comment|// Some other key (collision) - keep probing.
name|probeSlot
operator|+=
operator|(
operator|++
name|i
operator|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
name|largestNumberOfSteps
condition|)
block|{
comment|// We know we never went that far when we were inserting.
return|return
operator|-
literal|1
return|;
block|}
name|slot
operator|=
call|(
name|int
call|)
argument_list|(
name|probeSlot
operator|&
name|logicalHashBucketMask
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BYTES
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
specifier|public
name|void
name|addFullOuterNullKeyValue
parameter_list|(
name|BytesWritable
name|currentValue
parameter_list|)
block|{
name|byte
index|[]
name|valueBytes
init|=
name|currentValue
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|valueLength
init|=
name|currentValue
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|fullOuterNullKeyRefWord
operator|==
literal|0
condition|)
block|{
name|fullOuterNullKeyRefWord
operator|=
name|hashMapStore
operator|.
name|addFirst
argument_list|(
comment|/* partialHashCode */
literal|0
argument_list|,
name|EMPTY_BYTES
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|valueBytes
argument_list|,
literal|0
argument_list|,
name|valueLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Add another value.
name|fullOuterNullKeyRefWord
operator|=
name|hashMapStore
operator|.
name|addMore
argument_list|(
name|fullOuterNullKeyRefWord
argument_list|,
name|valueBytes
argument_list|,
literal|0
argument_list|,
name|valueLength
argument_list|,
name|unsafeReadPos
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|VectorMapJoinFastBytesHashMap
parameter_list|(
name|boolean
name|isFullOuter
parameter_list|,
name|int
name|initialCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|,
name|int
name|writeBuffersSize
parameter_list|,
name|long
name|estimatedKeyCount
parameter_list|)
block|{
name|super
argument_list|(
name|isFullOuter
argument_list|,
name|initialCapacity
argument_list|,
name|loadFactor
argument_list|,
name|writeBuffersSize
argument_list|,
name|estimatedKeyCount
argument_list|)
expr_stmt|;
name|fullOuterNullKeyRefWord
operator|=
literal|0
expr_stmt|;
name|hashMapStore
operator|=
operator|new
name|VectorMapJoinFastBytesHashMapStore
argument_list|(
name|writeBuffersSize
argument_list|)
expr_stmt|;
name|writeBuffers
operator|=
name|hashMapStore
operator|.
name|getWriteBuffers
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getEstimatedMemorySize
parameter_list|()
block|{
name|long
name|size
init|=
name|super
operator|.
name|getEstimatedMemorySize
argument_list|()
decl_stmt|;
name|size
operator|+=
name|hashMapStore
operator|.
name|getEstimatedMemorySize
argument_list|()
expr_stmt|;
return|return
name|size
return|;
block|}
block|}
end_class

end_unit

