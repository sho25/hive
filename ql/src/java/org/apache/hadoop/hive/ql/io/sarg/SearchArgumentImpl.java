begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
package|;
end_package

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Kryo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|io
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|io
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|FilterPredicateLeafBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|LeafFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBetween
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFIn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNotEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|filter2
operator|.
name|predicate
operator|.
name|FilterApi
import|;
end_import

begin_import
import|import
name|parquet
operator|.
name|filter2
operator|.
name|predicate
operator|.
name|FilterPredicate
import|;
end_import

begin_comment
comment|/**  * The implementation of SearchArguments.  */
end_comment

begin_class
specifier|final
class|class
name|SearchArgumentImpl
implements|implements
name|SearchArgument
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SearchArgumentImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
class|class
name|PredicateLeafImpl
implements|implements
name|PredicateLeaf
block|{
specifier|private
specifier|final
name|Operator
name|operator
decl_stmt|;
specifier|private
specifier|final
name|Type
name|type
decl_stmt|;
specifier|private
specifier|final
name|String
name|columnName
decl_stmt|;
specifier|private
specifier|final
name|Object
name|literal
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|literalList
decl_stmt|;
name|PredicateLeafImpl
parameter_list|()
block|{
name|operator
operator|=
literal|null
expr_stmt|;
name|type
operator|=
literal|null
expr_stmt|;
name|columnName
operator|=
literal|null
expr_stmt|;
name|literal
operator|=
literal|null
expr_stmt|;
name|literalList
operator|=
literal|null
expr_stmt|;
block|}
name|PredicateLeafImpl
parameter_list|(
name|Operator
name|operator
parameter_list|,
name|Type
name|type
parameter_list|,
name|String
name|columnName
parameter_list|,
name|Object
name|literal
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|literalList
parameter_list|)
block|{
name|this
operator|.
name|operator
operator|=
name|operator
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|literal
operator|=
name|literal
expr_stmt|;
name|this
operator|.
name|literalList
operator|=
name|literalList
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Operator
name|getOperator
parameter_list|()
block|{
return|return
name|operator
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getColumnName
parameter_list|()
block|{
return|return
name|columnName
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getLiteral
parameter_list|(
name|FileFormat
name|format
parameter_list|)
block|{
comment|// To get around a kryo 2.22 bug while deserialize a Timestamp into Date
comment|// (https://github.com/EsotericSoftware/kryo/issues/88)
comment|// When we see a Date, convert back into Timestamp
if|if
condition|(
name|literal
operator|instanceof
name|java
operator|.
name|util
operator|.
name|Date
condition|)
block|{
return|return
operator|new
name|Timestamp
argument_list|(
operator|(
operator|(
name|java
operator|.
name|util
operator|.
name|Date
operator|)
name|literal
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|ORC
case|:
comment|// adapt base type to what orc needs
if|if
condition|(
name|literal
operator|instanceof
name|Integer
condition|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|literal
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
name|literal
return|;
case|case
name|PARQUET
case|:
return|return
name|literal
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"File format "
operator|+
name|format
operator|+
literal|"is not support to build search arguments"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getLiteralList
parameter_list|(
name|FileFormat
name|format
parameter_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|ORC
case|:
return|return
name|getOrcLiteralList
argument_list|()
return|;
case|case
name|PARQUET
case|:
return|return
name|getParquetLiteralList
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"File format is not support to build search arguments"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|getOrcLiteralList
parameter_list|()
block|{
comment|// no need to cast
if|if
condition|(
name|literalList
operator|==
literal|null
operator|||
name|literalList
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
operator|!
operator|(
name|literalList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Integer
operator|)
condition|)
block|{
return|return
name|literalList
return|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|literalList
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|getParquetLiteralList
parameter_list|()
block|{
return|return
name|literalList
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|operator
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
if|if
condition|(
name|literal
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|literal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|literalList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|lit
range|:
name|literalList
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|lit
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isEqual
parameter_list|(
name|Object
name|left
parameter_list|,
name|Object
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
name|right
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|left
operator|==
literal|null
operator|||
name|right
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|left
operator|.
name|equals
argument_list|(
name|right
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|other
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|other
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|PredicateLeafImpl
name|o
init|=
operator|(
name|PredicateLeafImpl
operator|)
name|other
decl_stmt|;
return|return
name|operator
operator|==
name|o
operator|.
name|operator
operator|&&
name|type
operator|==
name|o
operator|.
name|type
operator|&&
name|columnName
operator|.
name|equals
argument_list|(
name|o
operator|.
name|columnName
argument_list|)
operator|&&
name|isEqual
argument_list|(
name|literal
argument_list|,
name|o
operator|.
name|literal
argument_list|)
operator|&&
name|isEqual
argument_list|(
name|literalList
argument_list|,
name|o
operator|.
name|literalList
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|operator
operator|.
name|hashCode
argument_list|()
operator|+
name|type
operator|.
name|hashCode
argument_list|()
operator|*
literal|17
operator|+
name|columnName
operator|.
name|hashCode
argument_list|()
operator|*
literal|3
operator|*
literal|17
operator|+
operator|(
name|literal
operator|==
literal|null
condition|?
literal|0
else|:
name|literal
operator|.
name|hashCode
argument_list|()
operator|)
operator|*
literal|101
operator|*
literal|3
operator|*
literal|17
operator|+
operator|(
name|literalList
operator|==
literal|null
condition|?
literal|0
else|:
name|literalList
operator|.
name|hashCode
argument_list|()
operator|)
operator|*
literal|103
operator|*
literal|101
operator|*
literal|3
operator|*
literal|17
return|;
block|}
block|}
specifier|static
class|class
name|ExpressionTree
block|{
specifier|static
enum|enum
name|Operator
block|{
name|OR
block|,
name|AND
block|,
name|NOT
block|,
name|LEAF
block|,
name|CONSTANT
block|}
specifier|private
specifier|final
name|Operator
name|operator
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|children
decl_stmt|;
specifier|private
specifier|final
name|int
name|leaf
decl_stmt|;
specifier|private
specifier|final
name|TruthValue
name|constant
decl_stmt|;
name|ExpressionTree
parameter_list|()
block|{
name|operator
operator|=
literal|null
expr_stmt|;
name|children
operator|=
literal|null
expr_stmt|;
name|leaf
operator|=
literal|0
expr_stmt|;
name|constant
operator|=
literal|null
expr_stmt|;
block|}
name|ExpressionTree
parameter_list|(
name|Operator
name|op
parameter_list|,
name|ExpressionTree
modifier|...
name|kids
parameter_list|)
block|{
name|operator
operator|=
name|op
expr_stmt|;
name|children
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExpressionTree
argument_list|>
argument_list|()
expr_stmt|;
name|leaf
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|constant
operator|=
literal|null
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|children
argument_list|,
name|kids
argument_list|)
expr_stmt|;
block|}
name|ExpressionTree
parameter_list|(
name|int
name|leaf
parameter_list|)
block|{
name|operator
operator|=
name|Operator
operator|.
name|LEAF
expr_stmt|;
name|children
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|leaf
operator|=
name|leaf
expr_stmt|;
name|this
operator|.
name|constant
operator|=
literal|null
expr_stmt|;
block|}
name|ExpressionTree
parameter_list|(
name|TruthValue
name|constant
parameter_list|)
block|{
name|operator
operator|=
name|Operator
operator|.
name|CONSTANT
expr_stmt|;
name|children
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|leaf
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|constant
operator|=
name|constant
expr_stmt|;
block|}
name|ExpressionTree
parameter_list|(
name|ExpressionTree
name|other
parameter_list|)
block|{
name|this
operator|.
name|operator
operator|=
name|other
operator|.
name|operator
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|children
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|children
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|children
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExpressionTree
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|ExpressionTree
name|child
range|:
name|other
operator|.
name|children
control|)
block|{
name|children
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|leaf
operator|=
name|other
operator|.
name|leaf
expr_stmt|;
name|this
operator|.
name|constant
operator|=
name|other
operator|.
name|constant
expr_stmt|;
block|}
name|TruthValue
name|evaluate
parameter_list|(
name|TruthValue
index|[]
name|leaves
parameter_list|)
block|{
name|TruthValue
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|OR
case|:
for|for
control|(
name|ExpressionTree
name|child
range|:
name|children
control|)
block|{
name|result
operator|=
name|child
operator|.
name|evaluate
argument_list|(
name|leaves
argument_list|)
operator|.
name|or
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
case|case
name|AND
case|:
for|for
control|(
name|ExpressionTree
name|child
range|:
name|children
control|)
block|{
name|result
operator|=
name|child
operator|.
name|evaluate
argument_list|(
name|leaves
argument_list|)
operator|.
name|and
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
case|case
name|NOT
case|:
return|return
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|evaluate
argument_list|(
name|leaves
argument_list|)
operator|.
name|not
argument_list|()
return|;
case|case
name|LEAF
case|:
return|return
name|leaves
index|[
name|leaf
index|]
return|;
case|case
name|CONSTANT
case|:
return|return
name|constant
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown operator: "
operator|+
name|operator
argument_list|)
throw|;
block|}
block|}
name|FilterPredicate
name|translate
parameter_list|(
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|leafs
parameter_list|)
block|{
name|FilterPredicate
name|p
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|OR
case|:
for|for
control|(
name|ExpressionTree
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
name|child
operator|.
name|translate
argument_list|(
name|leafs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FilterPredicate
name|right
init|=
name|child
operator|.
name|translate
argument_list|(
name|leafs
argument_list|)
decl_stmt|;
comment|// constant means no filter, ignore it when it is null
if|if
condition|(
name|right
operator|!=
literal|null
condition|)
block|{
name|p
operator|=
name|FilterApi
operator|.
name|or
argument_list|(
name|p
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|p
return|;
case|case
name|AND
case|:
for|for
control|(
name|ExpressionTree
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
name|child
operator|.
name|translate
argument_list|(
name|leafs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FilterPredicate
name|right
init|=
name|child
operator|.
name|translate
argument_list|(
name|leafs
argument_list|)
decl_stmt|;
comment|// constant means no filter, ignore it when it is null
if|if
condition|(
name|right
operator|!=
literal|null
condition|)
block|{
name|p
operator|=
name|FilterApi
operator|.
name|and
argument_list|(
name|p
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|p
return|;
case|case
name|NOT
case|:
name|FilterPredicate
name|op
init|=
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|translate
argument_list|(
name|leafs
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|!=
literal|null
condition|)
block|{
return|return
name|FilterApi
operator|.
name|not
argument_list|(
name|op
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
case|case
name|LEAF
case|:
return|return
name|buildFilterPredicateFromPredicateLeaf
argument_list|(
name|leafs
operator|.
name|get
argument_list|(
name|leaf
argument_list|)
argument_list|)
return|;
case|case
name|CONSTANT
case|:
return|return
literal|null
return|;
comment|// no filter will be executed for constant
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown operator: "
operator|+
name|operator
argument_list|)
throw|;
block|}
block|}
specifier|private
name|FilterPredicate
name|buildFilterPredicateFromPredicateLeaf
parameter_list|(
name|PredicateLeaf
name|leaf
parameter_list|)
block|{
name|LeafFilterFactory
name|leafFilterFactory
init|=
operator|new
name|LeafFilterFactory
argument_list|()
decl_stmt|;
name|FilterPredicateLeafBuilder
name|builder
decl_stmt|;
try|try
block|{
name|builder
operator|=
name|leafFilterFactory
operator|.
name|getLeafFilterBuilderByType
argument_list|(
name|leaf
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|isMultiLiteralsOperator
argument_list|(
name|leaf
operator|.
name|getOperator
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|builder
operator|.
name|buildPredicate
argument_list|(
name|leaf
operator|.
name|getOperator
argument_list|()
argument_list|,
name|leaf
operator|.
name|getLiteralList
argument_list|(
name|PredicateLeaf
operator|.
name|FileFormat
operator|.
name|PARQUET
argument_list|)
argument_list|,
name|leaf
operator|.
name|getColumnName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|builder
operator|.
name|buildPredict
argument_list|(
name|leaf
operator|.
name|getOperator
argument_list|()
argument_list|,
name|leaf
operator|.
name|getLiteral
argument_list|(
name|PredicateLeaf
operator|.
name|FileFormat
operator|.
name|PARQUET
argument_list|)
argument_list|,
name|leaf
operator|.
name|getColumnName
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"fail to build predicate filter leaf with errors"
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|boolean
name|isMultiLiteralsOperator
parameter_list|(
name|PredicateLeaf
operator|.
name|Operator
name|op
parameter_list|)
block|{
return|return
operator|(
name|op
operator|==
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|IN
operator|)
operator|||
operator|(
name|op
operator|==
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|BETWEEN
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|OR
case|:
name|buffer
operator|.
name|append
argument_list|(
literal|"(or"
argument_list|)
expr_stmt|;
for|for
control|(
name|ExpressionTree
name|child
range|:
name|children
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|child
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
break|break;
case|case
name|AND
case|:
name|buffer
operator|.
name|append
argument_list|(
literal|"(and"
argument_list|)
expr_stmt|;
for|for
control|(
name|ExpressionTree
name|child
range|:
name|children
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|child
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
break|break;
case|case
name|NOT
case|:
name|buffer
operator|.
name|append
argument_list|(
literal|"(not "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
break|break;
case|case
name|LEAF
case|:
name|buffer
operator|.
name|append
argument_list|(
literal|"leaf-"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|leaf
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONSTANT
case|:
name|buffer
operator|.
name|append
argument_list|(
name|constant
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
name|Operator
name|getOperator
parameter_list|()
block|{
return|return
name|operator
return|;
block|}
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
block|}
specifier|static
class|class
name|ExpressionBuilder
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|leaves
init|=
operator|new
name|ArrayList
argument_list|<
name|PredicateLeaf
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Get the type of the given expression node.      * @param expr the expression to get the type of      * @return int, string, or float or null if we don't know the type      */
specifier|private
specifier|static
name|PredicateLeaf
operator|.
name|Type
name|getType
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
name|TypeInfo
name|type
init|=
name|expr
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getCategory
argument_list|()
operator|==
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|type
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|INTEGER
return|;
case|case
name|LONG
case|:
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
return|;
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
case|case
name|STRING
case|:
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|STRING
return|;
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|FLOAT
return|;
case|case
name|DATE
case|:
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|DATE
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|TIMESTAMP
return|;
case|case
name|DECIMAL
case|:
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|DECIMAL
return|;
case|case
name|BOOLEAN
case|:
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|BOOLEAN
return|;
default|default:
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Get the column name referenced in the expression. It must be at the top      * level of this expression and there must be exactly one column.      * @param expr the expression to look in      * @param variable the slot the variable is expected in      * @return the column name or null if there isn't exactly one column      */
specifier|private
specifier|static
name|String
name|getColumnName
parameter_list|(
name|ExprNodeGenericFuncDesc
name|expr
parameter_list|,
name|int
name|variable
parameter_list|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|expr
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|variable
operator|<
literal|0
operator|||
name|variable
operator|>=
name|children
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ExprNodeDesc
name|child
init|=
name|children
operator|.
name|get
argument_list|(
name|variable
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
return|return
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|child
operator|)
operator|.
name|getColumn
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Object
name|boxLiteral
parameter_list|(
name|ExprNodeConstantDesc
name|lit
parameter_list|)
block|{
switch|switch
condition|(
name|getType
argument_list|(
name|lit
argument_list|)
condition|)
block|{
case|case
name|INTEGER
case|:
return|return
operator|(
operator|(
name|Number
operator|)
name|lit
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
return|;
case|case
name|LONG
case|:
return|return
operator|(
operator|(
name|Number
operator|)
name|lit
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
return|;
case|case
name|STRING
case|:
return|return
name|StringUtils
operator|.
name|stripEnd
argument_list|(
name|lit
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|lit
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
case|case
name|DATE
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|DECIMAL
case|:
case|case
name|BOOLEAN
case|:
return|return
name|lit
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown literal "
operator|+
name|getType
argument_list|(
name|lit
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Object
name|getLiteral
parameter_list|(
name|ExprNodeGenericFuncDesc
name|expr
parameter_list|)
block|{
name|Object
name|result
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|expr
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|ExprNodeDesc
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|result
operator|=
name|boxLiteral
argument_list|(
operator|(
name|ExprNodeConstantDesc
operator|)
name|child
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|getLiteralList
parameter_list|(
name|ExprNodeGenericFuncDesc
name|expr
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|expr
operator|.
name|getChildren
argument_list|()
decl_stmt|;
comment|// ignore the first child, since it is the variable
for|for
control|(
name|ExprNodeDesc
name|child
range|:
name|children
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|children
operator|.
name|size
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|boxLiteral
argument_list|(
operator|(
name|ExprNodeConstantDesc
operator|)
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if we get some non-literals, we need to punt
return|return
literal|null
return|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|ExpressionTree
name|createLeaf
parameter_list|(
name|PredicateLeaf
operator|.
name|Operator
name|operator
parameter_list|,
name|ExprNodeGenericFuncDesc
name|expression
parameter_list|,
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|leafCache
parameter_list|,
name|int
name|variable
parameter_list|)
block|{
name|String
name|columnName
init|=
name|getColumnName
argument_list|(
name|expression
argument_list|,
name|variable
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnName
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ExpressionTree
argument_list|(
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
return|;
block|}
name|PredicateLeaf
operator|.
name|Type
name|type
init|=
name|getType
argument_list|(
name|expression
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
name|variable
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ExpressionTree
argument_list|(
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
return|;
block|}
name|Object
name|literal
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|literalList
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|IS_NULL
case|:
break|break;
case|case
name|IN
case|:
case|case
name|BETWEEN
case|:
name|literalList
operator|=
name|getLiteralList
argument_list|(
name|expression
argument_list|,
name|variable
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|literalList
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ExpressionTree
argument_list|(
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
return|;
block|}
break|break;
default|default:
name|literal
operator|=
name|getLiteral
argument_list|(
name|expression
argument_list|)
expr_stmt|;
if|if
condition|(
name|literal
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ExpressionTree
argument_list|(
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
return|;
block|}
break|break;
block|}
comment|// if the variable was on the right, we need to swap things around
name|boolean
name|needSwap
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|variable
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|operator
operator|==
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN
condition|)
block|{
name|needSwap
operator|=
literal|true
expr_stmt|;
name|operator
operator|=
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN_EQUALS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN_EQUALS
condition|)
block|{
name|needSwap
operator|=
literal|true
expr_stmt|;
name|operator
operator|=
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN
expr_stmt|;
block|}
block|}
name|leafCache
operator|.
name|add
argument_list|(
operator|new
name|PredicateLeafImpl
argument_list|(
name|operator
argument_list|,
name|type
argument_list|,
name|columnName
argument_list|,
name|literal
argument_list|,
name|literalList
argument_list|)
argument_list|)
expr_stmt|;
name|ExpressionTree
name|result
init|=
operator|new
name|ExpressionTree
argument_list|(
name|leafCache
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|needSwap
condition|)
block|{
name|result
operator|=
name|negate
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Find the variable in the expression.      * @param expr the expression to look in      * @return the index of the variable or -1 if there is not exactly one      *   variable.      */
specifier|private
name|int
name|findVariable
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
name|int
name|result
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|expr
operator|.
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ExprNodeDesc
name|child
init|=
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
comment|// if we already found a variable, this isn't a sarg
if|if
condition|(
name|result
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|result
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Create a leaf expression when we aren't sure where the variable is      * located.      * @param operator the operator type that was found      * @param expression the expression to check      * @param leafCache the list of leaves      * @return if the expression is a sarg, return it, otherwise null      */
specifier|private
name|ExpressionTree
name|createLeaf
parameter_list|(
name|PredicateLeaf
operator|.
name|Operator
name|operator
parameter_list|,
name|ExprNodeGenericFuncDesc
name|expression
parameter_list|,
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|leafCache
parameter_list|)
block|{
return|return
name|createLeaf
argument_list|(
name|operator
argument_list|,
name|expression
argument_list|,
name|leafCache
argument_list|,
name|findVariable
argument_list|(
name|expression
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|ExpressionTree
name|negate
parameter_list|(
name|ExpressionTree
name|expr
parameter_list|)
block|{
name|ExpressionTree
name|result
init|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|NOT
argument_list|)
decl_stmt|;
name|result
operator|.
name|children
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|void
name|addChildren
parameter_list|(
name|ExpressionTree
name|result
parameter_list|,
name|ExprNodeGenericFuncDesc
name|node
parameter_list|,
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|leafCache
parameter_list|)
block|{
for|for
control|(
name|ExprNodeDesc
name|child
range|:
name|node
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|result
operator|.
name|children
operator|.
name|add
argument_list|(
name|parse
argument_list|(
name|child
argument_list|,
name|leafCache
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Do the recursive parse of the Hive ExprNodeDesc into our ExpressionTree.      * @param expression the Hive ExprNodeDesc      * @return the non-normalized ExpressionTree      */
specifier|private
name|ExpressionTree
name|parse
parameter_list|(
name|ExprNodeDesc
name|expression
parameter_list|,
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|leafCache
parameter_list|)
block|{
comment|// if we don't know the expression, just assume maybe
if|if
condition|(
name|expression
operator|.
name|getClass
argument_list|()
operator|!=
name|ExprNodeGenericFuncDesc
operator|.
name|class
condition|)
block|{
return|return
operator|new
name|ExpressionTree
argument_list|(
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
return|;
block|}
comment|// get the kind of expression
name|ExprNodeGenericFuncDesc
name|expr
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|expression
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|op
init|=
name|expr
operator|.
name|getGenericUDF
argument_list|()
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|ExpressionTree
name|result
decl_stmt|;
comment|// handle the logical operators
if|if
condition|(
name|op
operator|==
name|GenericUDFOPOr
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|OR
argument_list|)
expr_stmt|;
name|addChildren
argument_list|(
name|result
argument_list|,
name|expr
argument_list|,
name|leafCache
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPAnd
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
name|addChildren
argument_list|(
name|result
argument_list|,
name|expr
argument_list|,
name|leafCache
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPNot
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|NOT
argument_list|)
expr_stmt|;
name|addChildren
argument_list|(
name|result
argument_list|,
name|expr
argument_list|,
name|leafCache
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPEqual
operator|.
name|class
condition|)
block|{
name|result
operator|=
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|EQUALS
argument_list|,
name|expr
argument_list|,
name|leafCache
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPNotEqual
operator|.
name|class
condition|)
block|{
name|result
operator|=
name|negate
argument_list|(
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|EQUALS
argument_list|,
name|expr
argument_list|,
name|leafCache
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPEqualNS
operator|.
name|class
condition|)
block|{
name|result
operator|=
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|NULL_SAFE_EQUALS
argument_list|,
name|expr
argument_list|,
name|leafCache
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPGreaterThan
operator|.
name|class
condition|)
block|{
name|result
operator|=
name|negate
argument_list|(
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN_EQUALS
argument_list|,
name|expr
argument_list|,
name|leafCache
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPEqualOrGreaterThan
operator|.
name|class
condition|)
block|{
name|result
operator|=
name|negate
argument_list|(
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN
argument_list|,
name|expr
argument_list|,
name|leafCache
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPLessThan
operator|.
name|class
condition|)
block|{
name|result
operator|=
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN
argument_list|,
name|expr
argument_list|,
name|leafCache
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPEqualOrLessThan
operator|.
name|class
condition|)
block|{
name|result
operator|=
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN_EQUALS
argument_list|,
name|expr
argument_list|,
name|leafCache
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFIn
operator|.
name|class
condition|)
block|{
name|result
operator|=
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|IN
argument_list|,
name|expr
argument_list|,
name|leafCache
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFBetween
operator|.
name|class
condition|)
block|{
name|result
operator|=
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|BETWEEN
argument_list|,
name|expr
argument_list|,
name|leafCache
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPNull
operator|.
name|class
condition|)
block|{
name|result
operator|=
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|IS_NULL
argument_list|,
name|expr
argument_list|,
name|leafCache
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GenericUDFOPNotNull
operator|.
name|class
condition|)
block|{
name|result
operator|=
name|negate
argument_list|(
name|createLeaf
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|IS_NULL
argument_list|,
name|expr
argument_list|,
name|leafCache
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// otherwise, we didn't understand it, so mark it maybe
block|}
else|else
block|{
name|result
operator|=
operator|new
name|ExpressionTree
argument_list|(
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Push the negations all the way to just before the leaves. Also remove      * double negatives.      * @param root the expression to normalize      * @return the normalized expression, which may share some or all of the      * nodes of the original expression.      */
specifier|static
name|ExpressionTree
name|pushDownNot
parameter_list|(
name|ExpressionTree
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|.
name|operator
operator|==
name|ExpressionTree
operator|.
name|Operator
operator|.
name|NOT
condition|)
block|{
name|ExpressionTree
name|child
init|=
name|root
operator|.
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|child
operator|.
name|operator
condition|)
block|{
case|case
name|NOT
case|:
return|return
name|pushDownNot
argument_list|(
name|child
operator|.
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
case|case
name|CONSTANT
case|:
return|return
operator|new
name|ExpressionTree
argument_list|(
name|child
operator|.
name|constant
operator|.
name|not
argument_list|()
argument_list|)
return|;
case|case
name|AND
case|:
name|root
operator|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|OR
argument_list|)
expr_stmt|;
for|for
control|(
name|ExpressionTree
name|kid
range|:
name|child
operator|.
name|children
control|)
block|{
name|root
operator|.
name|children
operator|.
name|add
argument_list|(
name|pushDownNot
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|NOT
argument_list|,
name|kid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|OR
case|:
name|root
operator|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
for|for
control|(
name|ExpressionTree
name|kid
range|:
name|child
operator|.
name|children
control|)
block|{
name|root
operator|.
name|children
operator|.
name|add
argument_list|(
name|pushDownNot
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|NOT
argument_list|,
name|kid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
comment|// for leaf, we don't do anything
default|default:
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|root
operator|.
name|children
operator|!=
literal|null
condition|)
block|{
comment|// iterate through children and push down not for each one
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|root
operator|.
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|root
operator|.
name|children
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|pushDownNot
argument_list|(
name|root
operator|.
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|root
return|;
block|}
comment|/**      * Remove MAYBE values from the expression. If they are in an AND operator,      * they are dropped. If they are in an OR operator, they kill their parent.      * This assumes that pushDownNot has already been called.      * @param expr The expression to clean up      * @return The cleaned up expression      */
specifier|static
name|ExpressionTree
name|foldMaybe
parameter_list|(
name|ExpressionTree
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|.
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expr
operator|.
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ExpressionTree
name|child
init|=
name|foldMaybe
argument_list|(
name|expr
operator|.
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|constant
operator|==
name|TruthValue
operator|.
name|YES_NO_NULL
condition|)
block|{
switch|switch
condition|(
name|expr
operator|.
name|operator
condition|)
block|{
case|case
name|AND
case|:
name|expr
operator|.
name|children
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|i
operator|-=
literal|1
expr_stmt|;
break|break;
case|case
name|OR
case|:
comment|// a maybe will kill the or condition
return|return
name|child
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Got a maybe as child of "
operator|+
name|expr
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|expr
operator|.
name|children
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expr
operator|.
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|ExpressionTree
argument_list|(
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
return|;
block|}
block|}
return|return
name|expr
return|;
block|}
comment|/**      * Generate all combinations of items on the andList. For each item on the      * andList, it generates all combinations of one child from each and      * expression. Thus, (and a b) (and c d) will be expanded to: (or a c)      * (or a d) (or b c) (or b d). If there are items on the nonAndList, they      * are added to each or expression.      * @param result a list to put the results onto      * @param andList a list of and expressions      * @param nonAndList a list of non-and expressions      */
specifier|private
specifier|static
name|void
name|generateAllCombinations
parameter_list|(
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|result
parameter_list|,
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|andList
parameter_list|,
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|nonAndList
parameter_list|)
block|{
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|kids
init|=
name|andList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|children
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ExpressionTree
name|kid
range|:
name|kids
control|)
block|{
name|ExpressionTree
name|or
init|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|OR
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|or
argument_list|)
expr_stmt|;
for|for
control|(
name|ExpressionTree
name|node
range|:
name|nonAndList
control|)
block|{
name|or
operator|.
name|children
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|or
operator|.
name|children
operator|.
name|add
argument_list|(
name|kid
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|work
init|=
operator|new
name|ArrayList
argument_list|<
name|ExpressionTree
argument_list|>
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ExpressionTree
name|kid
range|:
name|kids
control|)
block|{
for|for
control|(
name|ExpressionTree
name|or
range|:
name|work
control|)
block|{
name|ExpressionTree
name|copy
init|=
operator|new
name|ExpressionTree
argument_list|(
name|or
argument_list|)
decl_stmt|;
name|copy
operator|.
name|children
operator|.
name|add
argument_list|(
name|kid
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|andList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|generateAllCombinations
argument_list|(
name|result
argument_list|,
name|andList
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|andList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|nonAndList
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Convert an expression so that the top level operator is AND with OR      * operators under it. This routine assumes that all of the NOT operators      * have been pushed to the leaves via pushdDownNot.      * @param root the expression      * @return the normalized expression      */
specifier|static
name|ExpressionTree
name|convertToCNF
parameter_list|(
name|ExpressionTree
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|.
name|children
operator|!=
literal|null
condition|)
block|{
comment|// convert all of the children to CNF
name|int
name|size
init|=
name|root
operator|.
name|children
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|root
operator|.
name|children
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|convertToCNF
argument_list|(
name|root
operator|.
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|root
operator|.
name|operator
operator|==
name|ExpressionTree
operator|.
name|Operator
operator|.
name|OR
condition|)
block|{
comment|// a list of leaves that weren't under AND expressions
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|nonAndList
init|=
operator|new
name|ArrayList
argument_list|<
name|ExpressionTree
argument_list|>
argument_list|()
decl_stmt|;
comment|// a list of AND expressions that we need to distribute
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|andList
init|=
operator|new
name|ArrayList
argument_list|<
name|ExpressionTree
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExpressionTree
name|child
range|:
name|root
operator|.
name|children
control|)
block|{
if|if
condition|(
name|child
operator|.
name|operator
operator|==
name|ExpressionTree
operator|.
name|Operator
operator|.
name|AND
condition|)
block|{
name|andList
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child
operator|.
name|operator
operator|==
name|ExpressionTree
operator|.
name|Operator
operator|.
name|OR
condition|)
block|{
comment|// pull apart the kids of the OR expression
for|for
control|(
name|ExpressionTree
name|grandkid
range|:
name|child
operator|.
name|children
control|)
block|{
name|nonAndList
operator|.
name|add
argument_list|(
name|grandkid
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|nonAndList
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|andList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|root
operator|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
name|generateAllCombinations
argument_list|(
name|root
operator|.
name|children
argument_list|,
name|andList
argument_list|,
name|nonAndList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|root
return|;
block|}
comment|/**      * Converts multi-level ands and ors into single level ones.      * @param root the expression to flatten      * @return the flattened expression, which will always be root with      *   potentially modified children.      */
specifier|static
name|ExpressionTree
name|flatten
parameter_list|(
name|ExpressionTree
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|.
name|children
operator|!=
literal|null
condition|)
block|{
comment|// iterate through the index, so that if we add more children,
comment|// they don't get re-visited
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|root
operator|.
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ExpressionTree
name|child
init|=
name|flatten
argument_list|(
name|root
operator|.
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
comment|// do we need to flatten?
if|if
condition|(
name|child
operator|.
name|operator
operator|==
name|root
operator|.
name|operator
operator|&&
name|child
operator|.
name|operator
operator|!=
name|ExpressionTree
operator|.
name|Operator
operator|.
name|NOT
condition|)
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExpressionTree
name|grandkid
range|:
name|child
operator|.
name|children
control|)
block|{
comment|// for the first grandkid replace the original parent
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
name|root
operator|.
name|children
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|grandkid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|root
operator|.
name|children
operator|.
name|add
argument_list|(
operator|++
name|i
argument_list|,
name|grandkid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|root
operator|.
name|children
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if we have a singleton AND or OR, just return the child
if|if
condition|(
operator|(
name|root
operator|.
name|operator
operator|==
name|ExpressionTree
operator|.
name|Operator
operator|.
name|OR
operator|||
name|root
operator|.
name|operator
operator|==
name|ExpressionTree
operator|.
name|Operator
operator|.
name|AND
operator|)
operator|&&
name|root
operator|.
name|children
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|root
operator|.
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
return|return
name|root
return|;
block|}
comment|/**      * Iterates through the expression, finding all of the leaves. It creates      * the leaves list with each unique leaf that is found in the expression.      * The expression is updated with the new leaf ids for each leaf.      * @param expr the expression to find the leaves in      * @param leafCache the list of all of the leaves      * @param lookup a map that is used to uniquify the leaves      * @return The potentially modified expression      */
specifier|private
name|ExpressionTree
name|buildLeafList
parameter_list|(
name|ExpressionTree
name|expr
parameter_list|,
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|leafCache
parameter_list|,
name|Map
argument_list|<
name|PredicateLeaf
argument_list|,
name|ExpressionTree
argument_list|>
name|lookup
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|.
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expr
operator|.
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|expr
operator|.
name|children
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|buildLeafList
argument_list|(
name|expr
operator|.
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|leafCache
argument_list|,
name|lookup
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|expr
operator|.
name|operator
operator|==
name|ExpressionTree
operator|.
name|Operator
operator|.
name|LEAF
condition|)
block|{
name|PredicateLeaf
name|leaf
init|=
name|leafCache
operator|.
name|get
argument_list|(
name|expr
operator|.
name|leaf
argument_list|)
decl_stmt|;
name|ExpressionTree
name|val
init|=
name|lookup
operator|.
name|get
argument_list|(
name|leaf
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
operator|new
name|ExpressionTree
argument_list|(
name|leaves
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|put
argument_list|(
name|leaf
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|leaves
operator|.
name|add
argument_list|(
name|leaf
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
return|return
name|expr
return|;
block|}
comment|/**      * Builds the expression and leaf list from the original predicate.      * @param expression the expression to translate      * @return The normalized expression.      */
name|ExpressionTree
name|expression
parameter_list|(
name|ExprNodeGenericFuncDesc
name|expression
parameter_list|)
block|{
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|leafCache
init|=
operator|new
name|ArrayList
argument_list|<
name|PredicateLeaf
argument_list|>
argument_list|()
decl_stmt|;
name|ExpressionTree
name|expr
init|=
name|parse
argument_list|(
name|expression
argument_list|,
name|leafCache
argument_list|)
decl_stmt|;
return|return
name|expression
argument_list|(
name|expr
argument_list|,
name|leafCache
argument_list|)
return|;
block|}
comment|/**      * Builds the expression and optimized leaf list from a non-normalized      * expression. Sets the leaves field with the unique leaves.      * @param expr non-normalized expression      * @param leaves non-unique leaves      * @return the normalized expression      */
name|ExpressionTree
name|expression
parameter_list|(
name|ExpressionTree
name|expr
parameter_list|,
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|leaves
parameter_list|)
block|{
name|expr
operator|=
name|pushDownNot
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|expr
operator|=
name|foldMaybe
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|expr
operator|=
name|flatten
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|expr
operator|=
name|convertToCNF
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|expr
operator|=
name|flatten
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|expr
operator|=
name|buildLeafList
argument_list|(
name|expr
argument_list|,
name|leaves
argument_list|,
operator|new
name|HashMap
argument_list|<
name|PredicateLeaf
argument_list|,
name|ExpressionTree
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|expr
return|;
block|}
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|getLeaves
parameter_list|()
block|{
return|return
name|leaves
return|;
block|}
block|}
specifier|private
specifier|final
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|leaves
decl_stmt|;
specifier|private
specifier|final
name|ExpressionTree
name|expression
decl_stmt|;
name|SearchArgumentImpl
parameter_list|(
name|ExprNodeGenericFuncDesc
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|==
literal|null
condition|)
block|{
name|leaves
operator|=
operator|new
name|ArrayList
argument_list|<
name|PredicateLeaf
argument_list|>
argument_list|()
expr_stmt|;
name|expression
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|ExpressionBuilder
name|builder
init|=
operator|new
name|ExpressionBuilder
argument_list|()
decl_stmt|;
name|expression
operator|=
name|builder
operator|.
name|expression
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|leaves
operator|=
name|builder
operator|.
name|getLeaves
argument_list|()
expr_stmt|;
block|}
block|}
name|SearchArgumentImpl
parameter_list|()
block|{
name|leaves
operator|=
literal|null
expr_stmt|;
name|expression
operator|=
literal|null
expr_stmt|;
block|}
name|SearchArgumentImpl
parameter_list|(
name|ExpressionTree
name|expression
parameter_list|,
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|leaves
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
name|this
operator|.
name|leaves
operator|=
name|leaves
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|getLeaves
parameter_list|()
block|{
return|return
name|leaves
return|;
block|}
annotation|@
name|Override
specifier|public
name|TruthValue
name|evaluate
parameter_list|(
name|TruthValue
index|[]
name|leaves
parameter_list|)
block|{
return|return
name|expression
operator|==
literal|null
condition|?
name|TruthValue
operator|.
name|YES
else|:
name|expression
operator|.
name|evaluate
argument_list|(
name|leaves
argument_list|)
return|;
block|}
name|ExpressionTree
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leaves
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"leaf-"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"expr = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|expression
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|toKryo
parameter_list|()
block|{
name|Output
name|out
init|=
operator|new
name|Output
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
literal|10
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
operator|new
name|Kryo
argument_list|()
operator|.
name|writeObject
argument_list|(
name|out
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|Base64
operator|.
name|encodeBase64String
argument_list|(
name|out
operator|.
name|toBytes
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|SearchArgument
name|fromKryo
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|Input
name|input
init|=
operator|new
name|Input
argument_list|(
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Kryo
argument_list|()
operator|.
name|readObject
argument_list|(
name|input
argument_list|,
name|SearchArgumentImpl
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FilterPredicate
name|toFilterPredicate
parameter_list|()
block|{
return|return
name|expression
operator|.
name|translate
argument_list|(
name|leaves
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|BuilderImpl
implements|implements
name|Builder
block|{
specifier|private
specifier|final
name|Deque
argument_list|<
name|ExpressionTree
argument_list|>
name|currentTree
init|=
operator|new
name|ArrayDeque
argument_list|<
name|ExpressionTree
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|leaves
init|=
operator|new
name|ArrayList
argument_list|<
name|PredicateLeaf
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ExpressionTree
name|root
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Builder
name|startOr
parameter_list|()
block|{
name|ExpressionTree
name|node
init|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|OR
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentTree
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|ExpressionTree
name|parent
init|=
name|currentTree
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|parent
operator|.
name|children
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|currentTree
operator|.
name|addFirst
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|startAnd
parameter_list|()
block|{
name|ExpressionTree
name|node
init|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|AND
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentTree
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|ExpressionTree
name|parent
init|=
name|currentTree
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|parent
operator|.
name|children
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|currentTree
operator|.
name|addFirst
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|startNot
parameter_list|()
block|{
name|ExpressionTree
name|node
init|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|NOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentTree
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|ExpressionTree
name|parent
init|=
name|currentTree
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|parent
operator|.
name|children
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|currentTree
operator|.
name|addFirst
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|end
parameter_list|()
block|{
name|root
operator|=
name|currentTree
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
if|if
condition|(
name|root
operator|.
name|children
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't create expression "
operator|+
name|root
operator|+
literal|" with no children."
argument_list|)
throw|;
block|}
if|if
condition|(
name|root
operator|.
name|operator
operator|==
name|ExpressionTree
operator|.
name|Operator
operator|.
name|NOT
operator|&&
name|root
operator|.
name|children
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't create not expression "
operator|+
name|root
operator|+
literal|" with more than 1 child."
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
specifier|private
specifier|static
name|Object
name|boxLiteral
parameter_list|(
name|Object
name|literal
parameter_list|)
block|{
if|if
condition|(
name|literal
operator|instanceof
name|String
operator|||
name|literal
operator|instanceof
name|Long
operator|||
name|literal
operator|instanceof
name|Double
operator|||
name|literal
operator|instanceof
name|DateWritable
operator|||
name|literal
operator|instanceof
name|Timestamp
operator|||
name|literal
operator|instanceof
name|HiveDecimal
operator|||
name|literal
operator|instanceof
name|BigDecimal
operator|||
name|literal
operator|instanceof
name|Boolean
condition|)
block|{
return|return
name|literal
return|;
block|}
elseif|else
if|if
condition|(
name|literal
operator|instanceof
name|HiveChar
operator|||
name|literal
operator|instanceof
name|HiveVarchar
condition|)
block|{
return|return
name|StringUtils
operator|.
name|stripEnd
argument_list|(
name|literal
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|literal
operator|instanceof
name|Byte
operator|||
name|literal
operator|instanceof
name|Short
operator|||
name|literal
operator|instanceof
name|Integer
condition|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|literal
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|literal
operator|instanceof
name|Float
condition|)
block|{
comment|// to avoid change in precision when upcasting float to double
comment|// we convert the literal to string and parse it as double. (HIVE-8460)
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|literal
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown type for literal "
operator|+
name|literal
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|PredicateLeaf
operator|.
name|Type
name|getType
parameter_list|(
name|Object
name|literal
parameter_list|)
block|{
if|if
condition|(
name|literal
operator|instanceof
name|Byte
operator|||
name|literal
operator|instanceof
name|Short
operator|||
name|literal
operator|instanceof
name|Integer
condition|)
block|{
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|INTEGER
return|;
block|}
elseif|else
if|if
condition|(
name|literal
operator|instanceof
name|Long
condition|)
block|{
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|LONG
return|;
block|}
elseif|else
if|if
condition|(
name|literal
operator|instanceof
name|HiveChar
operator|||
name|literal
operator|instanceof
name|HiveVarchar
operator|||
name|literal
operator|instanceof
name|String
condition|)
block|{
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|STRING
return|;
block|}
elseif|else
if|if
condition|(
name|literal
operator|instanceof
name|Float
operator|||
name|literal
operator|instanceof
name|Double
condition|)
block|{
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|FLOAT
return|;
block|}
elseif|else
if|if
condition|(
name|literal
operator|instanceof
name|DateWritable
condition|)
block|{
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|DATE
return|;
block|}
elseif|else
if|if
condition|(
name|literal
operator|instanceof
name|Timestamp
condition|)
block|{
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|TIMESTAMP
return|;
block|}
elseif|else
if|if
condition|(
name|literal
operator|instanceof
name|HiveDecimal
operator|||
name|literal
operator|instanceof
name|BigDecimal
condition|)
block|{
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|DECIMAL
return|;
block|}
elseif|else
if|if
condition|(
name|literal
operator|instanceof
name|Boolean
condition|)
block|{
return|return
name|PredicateLeaf
operator|.
name|Type
operator|.
name|BOOLEAN
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown type for literal "
operator|+
name|literal
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|lessThan
parameter_list|(
name|String
name|column
parameter_list|,
name|Object
name|literal
parameter_list|)
block|{
name|ExpressionTree
name|parent
init|=
name|currentTree
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|Object
name|box
init|=
name|boxLiteral
argument_list|(
name|literal
argument_list|)
decl_stmt|;
name|PredicateLeaf
name|leaf
init|=
operator|new
name|PredicateLeafImpl
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN
argument_list|,
name|getType
argument_list|(
name|box
argument_list|)
argument_list|,
name|column
argument_list|,
name|box
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|leaves
operator|.
name|add
argument_list|(
name|leaf
argument_list|)
expr_stmt|;
name|parent
operator|.
name|children
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|leaves
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|lessThanEquals
parameter_list|(
name|String
name|column
parameter_list|,
name|Object
name|literal
parameter_list|)
block|{
name|ExpressionTree
name|parent
init|=
name|currentTree
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|Object
name|box
init|=
name|boxLiteral
argument_list|(
name|literal
argument_list|)
decl_stmt|;
name|PredicateLeaf
name|leaf
init|=
operator|new
name|PredicateLeafImpl
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN_EQUALS
argument_list|,
name|getType
argument_list|(
name|box
argument_list|)
argument_list|,
name|column
argument_list|,
name|box
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|leaves
operator|.
name|add
argument_list|(
name|leaf
argument_list|)
expr_stmt|;
name|parent
operator|.
name|children
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|leaves
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|equals
parameter_list|(
name|String
name|column
parameter_list|,
name|Object
name|literal
parameter_list|)
block|{
name|ExpressionTree
name|parent
init|=
name|currentTree
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|Object
name|box
init|=
name|boxLiteral
argument_list|(
name|literal
argument_list|)
decl_stmt|;
name|PredicateLeaf
name|leaf
init|=
operator|new
name|PredicateLeafImpl
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|EQUALS
argument_list|,
name|getType
argument_list|(
name|box
argument_list|)
argument_list|,
name|column
argument_list|,
name|box
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|leaves
operator|.
name|add
argument_list|(
name|leaf
argument_list|)
expr_stmt|;
name|parent
operator|.
name|children
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|leaves
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|nullSafeEquals
parameter_list|(
name|String
name|column
parameter_list|,
name|Object
name|literal
parameter_list|)
block|{
name|ExpressionTree
name|parent
init|=
name|currentTree
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|Object
name|box
init|=
name|boxLiteral
argument_list|(
name|literal
argument_list|)
decl_stmt|;
name|PredicateLeaf
name|leaf
init|=
operator|new
name|PredicateLeafImpl
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|NULL_SAFE_EQUALS
argument_list|,
name|getType
argument_list|(
name|box
argument_list|)
argument_list|,
name|column
argument_list|,
name|box
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|leaves
operator|.
name|add
argument_list|(
name|leaf
argument_list|)
expr_stmt|;
name|parent
operator|.
name|children
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|leaves
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|in
parameter_list|(
name|String
name|column
parameter_list|,
name|Object
modifier|...
name|literal
parameter_list|)
block|{
name|ExpressionTree
name|parent
init|=
name|currentTree
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|literal
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't create in expression with "
operator|+
literal|"no arguments"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|argList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|lit
range|:
name|literal
control|)
block|{
name|argList
operator|.
name|add
argument_list|(
name|boxLiteral
argument_list|(
name|lit
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PredicateLeaf
name|leaf
init|=
operator|new
name|PredicateLeafImpl
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|IN
argument_list|,
name|getType
argument_list|(
name|argList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|column
argument_list|,
literal|null
argument_list|,
name|argList
argument_list|)
decl_stmt|;
name|leaves
operator|.
name|add
argument_list|(
name|leaf
argument_list|)
expr_stmt|;
name|parent
operator|.
name|children
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|leaves
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|isNull
parameter_list|(
name|String
name|column
parameter_list|)
block|{
name|ExpressionTree
name|parent
init|=
name|currentTree
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|PredicateLeaf
name|leaf
init|=
operator|new
name|PredicateLeafImpl
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|IS_NULL
argument_list|,
name|PredicateLeaf
operator|.
name|Type
operator|.
name|STRING
argument_list|,
name|column
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|leaves
operator|.
name|add
argument_list|(
name|leaf
argument_list|)
expr_stmt|;
name|parent
operator|.
name|children
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|leaves
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|between
parameter_list|(
name|String
name|column
parameter_list|,
name|Object
name|lower
parameter_list|,
name|Object
name|upper
parameter_list|)
block|{
name|ExpressionTree
name|parent
init|=
name|currentTree
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|argList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|argList
operator|.
name|add
argument_list|(
name|boxLiteral
argument_list|(
name|lower
argument_list|)
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
name|boxLiteral
argument_list|(
name|upper
argument_list|)
argument_list|)
expr_stmt|;
name|PredicateLeaf
name|leaf
init|=
operator|new
name|PredicateLeafImpl
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|BETWEEN
argument_list|,
name|getType
argument_list|(
name|argList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|column
argument_list|,
literal|null
argument_list|,
name|argList
argument_list|)
decl_stmt|;
name|leaves
operator|.
name|add
argument_list|(
name|leaf
argument_list|)
expr_stmt|;
name|parent
operator|.
name|children
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|leaves
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|SearchArgument
name|build
parameter_list|()
block|{
if|if
condition|(
name|currentTree
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to end "
operator|+
name|currentTree
operator|.
name|size
argument_list|()
operator|+
literal|" operations."
argument_list|)
throw|;
block|}
name|ExpressionBuilder
name|internal
init|=
operator|new
name|ExpressionBuilder
argument_list|()
decl_stmt|;
name|ExpressionTree
name|normalized
init|=
name|internal
operator|.
name|expression
argument_list|(
name|root
argument_list|,
name|leaves
argument_list|)
decl_stmt|;
return|return
operator|new
name|SearchArgumentImpl
argument_list|(
name|normalized
argument_list|,
name|internal
operator|.
name|getLeaves
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|BuilderImpl
argument_list|()
return|;
block|}
block|}
end_class

end_unit

