begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|load
operator|.
name|message
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AlterPartitionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AlterTableMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|ReplExternalTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|EximUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ImportSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|DumpType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|load
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|TableHandler
extends|extends
name|AbstractMessageHandler
block|{
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_WRITE_ID
init|=
literal|0L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TableHandler
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|handle
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|SemanticException
block|{
try|try
block|{
name|List
argument_list|<
name|Task
argument_list|<
name|?
argument_list|>
argument_list|>
name|importTasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|isExternal
init|=
literal|false
decl_stmt|,
name|isLocationSet
init|=
literal|false
decl_stmt|;
name|String
name|parsedLocation
init|=
literal|null
decl_stmt|;
name|DumpType
name|eventType
init|=
name|context
operator|.
name|dmd
operator|.
name|getDumpType
argument_list|()
decl_stmt|;
name|Tuple
name|tuple
init|=
name|extract
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|tuple
operator|.
name|isExternalTable
condition|)
block|{
name|URI
name|fromURI
init|=
name|EximUtil
operator|.
name|getValidatedURI
argument_list|(
name|context
operator|.
name|hiveConf
argument_list|,
name|context
operator|.
name|location
argument_list|)
decl_stmt|;
name|Path
name|fromPath
init|=
operator|new
name|Path
argument_list|(
name|fromURI
operator|.
name|getScheme
argument_list|()
argument_list|,
name|fromURI
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|fromURI
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|isLocationSet
operator|=
literal|true
expr_stmt|;
name|isExternal
operator|=
literal|true
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|fromURI
argument_list|,
name|context
operator|.
name|hiveConf
argument_list|)
decl_stmt|;
try|try
block|{
name|MetaData
name|rv
init|=
name|EximUtil
operator|.
name|readMetaData
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|fromPath
argument_list|,
name|EximUtil
operator|.
name|METADATA_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|rv
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
name|parsedLocation
operator|=
name|ReplExternalTables
operator|.
name|externalTableLocation
argument_list|(
name|context
operator|.
name|hiveConf
argument_list|,
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|INVALID_PATH
operator|.
name|getMsg
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|context
operator|.
name|nestedContext
operator|.
name|setConf
argument_list|(
name|context
operator|.
name|hiveConf
argument_list|)
expr_stmt|;
name|EximUtil
operator|.
name|SemanticAnalyzerWrapperContext
name|x
init|=
operator|new
name|EximUtil
operator|.
name|SemanticAnalyzerWrapperContext
argument_list|(
name|context
operator|.
name|hiveConf
argument_list|,
name|context
operator|.
name|db
argument_list|,
name|readEntitySet
argument_list|,
name|writeEntitySet
argument_list|,
name|importTasks
argument_list|,
name|context
operator|.
name|log
argument_list|,
name|context
operator|.
name|nestedContext
argument_list|)
decl_stmt|;
name|x
operator|.
name|setEventType
argument_list|(
name|eventType
argument_list|)
expr_stmt|;
comment|// REPL LOAD is not partition level. It is always DB or table level. So, passing null for partition specs.
name|ImportSemanticAnalyzer
operator|.
name|prepareImport
argument_list|(
literal|false
argument_list|,
name|isLocationSet
argument_list|,
name|isExternal
argument_list|,
literal|false
argument_list|,
operator|(
name|context
operator|.
name|precursor
operator|!=
literal|null
operator|)
argument_list|,
name|parsedLocation
argument_list|,
literal|null
argument_list|,
name|context
operator|.
name|dbName
argument_list|,
literal|null
argument_list|,
name|context
operator|.
name|location
argument_list|,
name|x
argument_list|,
name|updatedMetadata
argument_list|,
name|context
operator|.
name|getTxnMgr
argument_list|()
argument_list|,
name|tuple
operator|.
name|writeId
argument_list|)
expr_stmt|;
name|Task
argument_list|<
name|?
argument_list|>
name|openTxnTask
init|=
name|x
operator|.
name|getOpenTxnTask
argument_list|()
decl_stmt|;
if|if
condition|(
name|openTxnTask
operator|!=
literal|null
operator|&&
operator|!
name|importTasks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
argument_list|>
name|t
range|:
name|importTasks
control|)
block|{
name|openTxnTask
operator|.
name|addDependentTask
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|importTasks
operator|.
name|add
argument_list|(
name|openTxnTask
argument_list|)
expr_stmt|;
block|}
return|return
name|importTasks
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Tuple
name|extract
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|SemanticException
block|{
try|try
block|{
name|String
name|tableType
init|=
literal|null
decl_stmt|;
name|long
name|writeId
init|=
name|DEFAULT_WRITE_ID
decl_stmt|;
switch|switch
condition|(
name|context
operator|.
name|dmd
operator|.
name|getDumpType
argument_list|()
condition|)
block|{
case|case
name|EVENT_CREATE_TABLE
case|:
case|case
name|EVENT_ADD_PARTITION
case|:
name|Path
name|metadataPath
init|=
operator|new
name|Path
argument_list|(
name|context
operator|.
name|location
argument_list|,
name|EximUtil
operator|.
name|METADATA_NAME
argument_list|)
decl_stmt|;
name|MetaData
name|rv
init|=
name|EximUtil
operator|.
name|readMetaData
argument_list|(
name|metadataPath
operator|.
name|getFileSystem
argument_list|(
name|context
operator|.
name|hiveConf
argument_list|)
argument_list|,
name|metadataPath
argument_list|)
decl_stmt|;
name|tableType
operator|=
name|rv
operator|.
name|getTable
argument_list|()
operator|.
name|getTableType
argument_list|()
expr_stmt|;
break|break;
case|case
name|EVENT_ALTER_TABLE
case|:
name|AlterTableMessage
name|alterTableMessage
init|=
name|deserializer
operator|.
name|getAlterTableMessage
argument_list|(
name|context
operator|.
name|dmd
operator|.
name|getPayload
argument_list|()
argument_list|)
decl_stmt|;
name|tableType
operator|=
name|alterTableMessage
operator|.
name|getTableObjAfter
argument_list|()
operator|.
name|getTableType
argument_list|()
expr_stmt|;
name|writeId
operator|=
name|alterTableMessage
operator|.
name|getWriteId
argument_list|()
expr_stmt|;
break|break;
case|case
name|EVENT_ALTER_PARTITION
case|:
name|AlterPartitionMessage
name|msg
init|=
name|deserializer
operator|.
name|getAlterPartitionMessage
argument_list|(
name|context
operator|.
name|dmd
operator|.
name|getPayload
argument_list|()
argument_list|)
decl_stmt|;
name|tableType
operator|=
name|msg
operator|.
name|getTableObj
argument_list|()
operator|.
name|getTableType
argument_list|()
expr_stmt|;
name|writeId
operator|=
name|msg
operator|.
name|getWriteId
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|boolean
name|isExternalTable
init|=
name|tableType
operator|!=
literal|null
operator|&&
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|equals
argument_list|(
name|Enum
operator|.
name|valueOf
argument_list|(
name|TableType
operator|.
name|class
argument_list|,
name|tableType
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Tuple
argument_list|(
name|isExternalTable
argument_list|,
name|writeId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed to determine if the table associated with the event is external or not"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|Tuple
block|{
specifier|private
specifier|final
name|boolean
name|isExternalTable
decl_stmt|;
specifier|private
specifier|final
name|long
name|writeId
decl_stmt|;
specifier|private
name|Tuple
parameter_list|(
name|boolean
name|isExternalTable
parameter_list|,
name|long
name|writeId
parameter_list|)
block|{
name|this
operator|.
name|isExternalTable
operator|=
name|isExternalTable
expr_stmt|;
name|this
operator|.
name|writeId
operator|=
name|writeId
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

