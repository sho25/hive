begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
package|;
end_package

begin_comment
comment|/**  * An MRU (Most Recently Used) cache implementation. This implementation  * maintains a doubly circular linked list and it can be used with an auxiliary  * data structure such as a HashMap to locate the item quickly.  */
end_comment

begin_class
specifier|public
class|class
name|MRU
parameter_list|<
name|T
extends|extends
name|DCLLItem
parameter_list|>
block|{
name|T
name|head
decl_stmt|;
comment|// head of the linked list -- MRU; tail (head.prev) will be the LRU
specifier|public
name|MRU
parameter_list|()
block|{
name|head
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Insert a value into the MRU. It will appear as the head.    */
specifier|public
name|T
name|put
parameter_list|(
name|T
name|item
parameter_list|)
block|{
name|addToHead
argument_list|(
name|item
argument_list|)
expr_stmt|;
return|return
name|item
return|;
block|}
comment|/**    * Remove a item from the MRU list.    *     * @param v    *          linked list item.    */
specifier|public
name|void
name|remove
parameter_list|(
name|T
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|v
operator|==
name|head
condition|)
block|{
if|if
condition|(
name|head
operator|!=
name|head
operator|.
name|getNext
argument_list|()
condition|)
block|{
name|head
operator|=
operator|(
name|T
operator|)
name|head
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|head
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|v
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the most recently used.    *     * @return the most recently used item.    */
specifier|public
name|T
name|head
parameter_list|()
block|{
return|return
name|head
return|;
block|}
comment|/**    * Get the least recently used.    *     * @return the least recently used item.    */
specifier|public
name|T
name|tail
parameter_list|()
block|{
return|return
operator|(
name|T
operator|)
name|head
operator|.
name|getPrev
argument_list|()
return|;
block|}
comment|/**    * Insert a new item as the head    *     * @param v    *          the new linked list item to be added to the head.    */
specifier|private
name|void
name|addToHead
parameter_list|(
name|T
name|v
parameter_list|)
block|{
if|if
condition|(
name|head
operator|==
literal|null
condition|)
block|{
name|head
operator|=
name|v
expr_stmt|;
block|}
else|else
block|{
name|head
operator|.
name|insertBefore
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|head
operator|=
name|v
expr_stmt|;
block|}
block|}
comment|/**    * Move an existing item to the head.    *     * @param v    *          the linked list item to be moved to the head.    */
specifier|public
name|void
name|moveToHead
parameter_list|(
name|T
name|v
parameter_list|)
block|{
assert|assert
operator|(
name|head
operator|!=
literal|null
operator|)
assert|;
if|if
condition|(
name|head
operator|!=
name|v
condition|)
block|{
name|v
operator|.
name|remove
argument_list|()
expr_stmt|;
name|head
operator|.
name|insertBefore
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|head
operator|=
name|v
expr_stmt|;
block|}
block|}
comment|/**    * Clear all elements in the MRU list. This is not very efficient (linear)    * since it will call remove() to every item in the list.    */
specifier|public
name|void
name|clear
parameter_list|()
block|{
while|while
condition|(
name|head
operator|.
name|getNext
argument_list|()
operator|!=
name|head
condition|)
block|{
name|head
operator|.
name|getNext
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|head
operator|.
name|remove
argument_list|()
expr_stmt|;
name|head
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

