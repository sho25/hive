begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|DataTypePhysicalVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|HashTableLoaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|HashTableLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainerSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorColumnOutputMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorColumnSourceMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorCopyRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorDeserializeRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContextRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedBatchUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|optimized
operator|.
name|VectorMapJoinOptimizedCreateHashTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinTableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
operator|.
name|VectorMapJoinFastHashTableLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|HashTableImplementationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|HashTableKeyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|HashTableKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|VectorMapJoinVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|fast
operator|.
name|BinarySortableDeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|fast
operator|.
name|LazyBinaryDeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * This class is common operator class for native vectorized map join.  *  * It contain common initialization logic.  *  * It is used by both inner and outer joins.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|VectorMapJoinCommonOperator
extends|extends
name|MapJoinOperator
implements|implements
name|VectorizationOperator
implements|,
name|VectorizationContextRegion
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|//------------------------------------------------------------------------------------------------
specifier|private
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
name|VectorMapJoinCommonOperator
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CLASS_NAME
argument_list|)
decl_stmt|;
specifier|protected
specifier|abstract
name|String
name|getLoggingPrefix
parameter_list|()
function_decl|;
comment|// For debug tracing: information about the map or reduce task, operator, operator class, etc.
specifier|protected
specifier|transient
name|String
name|loggingPrefix
decl_stmt|;
specifier|protected
name|String
name|getLoggingPrefix
parameter_list|(
name|String
name|className
parameter_list|)
block|{
if|if
condition|(
name|loggingPrefix
operator|==
literal|null
condition|)
block|{
name|initLoggingPrefix
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
return|return
name|loggingPrefix
return|;
block|}
specifier|protected
name|void
name|initLoggingPrefix
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|loggingPrefix
operator|=
name|className
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
specifier|protected
name|VectorMapJoinDesc
name|vectorDesc
decl_stmt|;
specifier|protected
name|VectorMapJoinInfo
name|vectorMapJoinInfo
decl_stmt|;
comment|// Whether this operator is an outer join.
specifier|protected
name|boolean
name|isOuterJoin
decl_stmt|;
comment|// Position of the *single* native vector map join small table.
specifier|protected
name|byte
name|posSingleVectorMapJoinSmallTable
decl_stmt|;
comment|// The incoming vectorization context.  It describes the input big table vectorized row batch.
specifier|protected
name|VectorizationContext
name|vContext
decl_stmt|;
comment|// This is the vectorized row batch description of the output of the native vectorized map join
comment|// operator.  It is based on the incoming vectorization context.  Its projection may include
comment|// a mixture of input big table columns and new scratch columns.
specifier|protected
name|VectorizationContext
name|vOutContext
decl_stmt|;
specifier|protected
name|VectorMapJoinVariation
name|vectorMapJoinVariation
decl_stmt|;
specifier|protected
name|HashTableKind
name|hashTableKind
decl_stmt|;
specifier|protected
name|HashTableKeyType
name|hashTableKeyType
decl_stmt|;
comment|// The output column projection of the vectorized row batch.  And, the type infos of the output
comment|// columns.
specifier|protected
name|int
index|[]
name|outputProjection
decl_stmt|;
specifier|protected
name|TypeInfo
index|[]
name|outputTypeInfos
decl_stmt|;
comment|// These are the vectorized batch expressions for filtering, key expressions, and value
comment|// expressions.
specifier|protected
name|VectorExpression
index|[]
name|bigTableFilterExpressions
decl_stmt|;
specifier|protected
name|VectorExpression
index|[]
name|bigTableKeyExpressions
decl_stmt|;
specifier|protected
name|VectorExpression
index|[]
name|bigTableValueExpressions
decl_stmt|;
comment|// This is map of which vectorized row batch columns are the big table key columns.  Since
comment|// we may have key expressions that produce new scratch columns, we need a mapping.
comment|// And, we have their type infos.
specifier|protected
name|int
index|[]
name|bigTableKeyColumnMap
decl_stmt|;
specifier|protected
name|String
index|[]
name|bigTableKeyColumnNames
decl_stmt|;
specifier|protected
name|TypeInfo
index|[]
name|bigTableKeyTypeInfos
decl_stmt|;
comment|// Similarly, this is map of which vectorized row batch columns are the big table value columns.
comment|// Since we may have value expressions that produce new scratch columns, we need a mapping.
comment|// And, we have their type infos.
specifier|protected
name|int
index|[]
name|bigTableValueColumnMap
decl_stmt|;
specifier|protected
name|String
index|[]
name|bigTableValueColumnNames
decl_stmt|;
specifier|protected
name|TypeInfo
index|[]
name|bigTableValueTypeInfos
decl_stmt|;
comment|/*    * NOTE:    *    The Big Table key columns are from the key expressions.    *    The Big Table value columns are from the getExpr(posBigTable) expressions.    *    Any calculations needed for those will be scratch columns.    *    *    The Small Table key and value output columns are scratch columns.    *    * Big Table Retain Column Map / TypeInfos:    *    Any Big Table Batch columns that will be in the output result.    *    0, 1, ore more Column Nums and TypeInfos    *    * Non Outer Small Table Key Mapping:    *    For non-[FULL] OUTER MapJoin, when Big Table key columns are not retained for the output    *    result but are needed for the Small Table output result, they are put in this mapping    *    as they are required for copying rows to the overflow batch.    *    * Outer Small Table Key Mapping    *    For [FULL] OUTER MapJoin, the mapping for any Small Table key columns needed for the    *    output result from the Big Table key columns.  The Big Table keys cannot be projected since    *    on NOMATCH there must be a physical column present to hold the non-match NULL.    *    * Full Outer Small Table Key Mapping    *    For FULL OUTER MapJoin, the mapping from any needed Small Table key columns to their area    *    in the output result.    *    *    For deserializing a FULL OUTER non-match Small Table key into the output result.    *    Can be partial or empty if some or all Small Table key columns are not retained.    *    * Small Table Value Mapping    *    The mapping from Small Table value columns to their area in the output result.    *    *    For deserializing Small Table value into the output result.    *    *    It is the Small Table value index to output column numbers and TypeInfos.    *    That is, a mapping of the LazyBinary field order to output batch scratch columns for the    *       small table portion.    *    Or, to use the output column nums for OUTER Small Table value NULLs.    *    */
specifier|protected
name|int
index|[]
name|bigTableRetainColumnMap
decl_stmt|;
specifier|protected
name|TypeInfo
index|[]
name|bigTableRetainTypeInfos
decl_stmt|;
specifier|protected
name|int
index|[]
name|nonOuterSmallTableKeyColumnMap
decl_stmt|;
specifier|protected
name|TypeInfo
index|[]
name|nonOuterSmallTableKeyTypeInfos
decl_stmt|;
specifier|protected
name|VectorColumnOutputMapping
name|outerSmallTableKeyMapping
decl_stmt|;
specifier|protected
name|VectorColumnSourceMapping
name|fullOuterSmallTableKeyMapping
decl_stmt|;
specifier|protected
name|VectorColumnSourceMapping
name|smallTableValueMapping
decl_stmt|;
comment|// The MapJoin output result projection for both the Big Table input batch and the overflow batch.
specifier|protected
name|VectorColumnSourceMapping
name|projectionMapping
decl_stmt|;
comment|// These are the output columns for the small table and the outer small table keys.
specifier|protected
name|int
index|[]
name|outerSmallTableKeyColumnMap
decl_stmt|;
specifier|protected
name|int
index|[]
name|smallTableValueColumnMap
decl_stmt|;
comment|// These are the columns in the big and small table that are ByteColumnVector columns.
comment|// We create data buffers for these columns so we can copy strings into those columns by value.
specifier|protected
name|int
index|[]
name|bigTableByteColumnVectorColumns
decl_stmt|;
specifier|protected
name|int
index|[]
name|nonOuterSmallTableKeyByteColumnVectorColumns
decl_stmt|;
specifier|protected
name|int
index|[]
name|outerSmallTableKeyByteColumnVectorColumns
decl_stmt|;
specifier|protected
name|int
index|[]
name|smallTableByteColumnVectorColumns
decl_stmt|;
comment|// The above members are initialized by the constructor and must not be
comment|// transient.
comment|//---------------------------------------------------------------------------
comment|// The threshold where we should use a repeating vectorized row batch optimization for
comment|// generating join output results.
specifier|protected
specifier|transient
name|boolean
name|useOverflowRepeatedThreshold
decl_stmt|;
specifier|protected
specifier|transient
name|int
name|overflowRepeatedThreshold
decl_stmt|;
comment|// A helper object that efficiently copies the big table columns that are for the big table
comment|// portion of the join output.
specifier|protected
specifier|transient
name|VectorCopyRow
name|bigTableRetainedVectorCopy
decl_stmt|;
comment|// This helper object deserializes BinarySortable format small table keys into columns of a row
comment|// in a vectorized row batch.
specifier|protected
name|int
index|[]
name|allSmallTableKeyColumnNums
decl_stmt|;
specifier|protected
name|boolean
index|[]
name|allSmallTableKeyColumnIncluded
decl_stmt|;
specifier|protected
specifier|transient
name|VectorDeserializeRow
argument_list|<
name|BinarySortableDeserializeRead
argument_list|>
name|smallTableKeyOuterVectorDeserializeRow
decl_stmt|;
specifier|protected
specifier|transient
name|VectorCopyRow
name|nonOuterSmallTableKeyVectorCopy
decl_stmt|;
comment|// UNDONE
comment|// A helper object that efficiently copies the big table key columns (input or key expressions)
comment|// that appear in the small table portion of the join output.
specifier|protected
specifier|transient
name|VectorCopyRow
name|outerSmallTableKeyVectorCopy
decl_stmt|;
comment|// This helper object deserializes LazyBinary format small table values into columns of a row
comment|// in a vectorized row batch.
specifier|protected
specifier|transient
name|VectorDeserializeRow
argument_list|<
name|LazyBinaryDeserializeRead
argument_list|>
name|smallTableValueVectorDeserializeRow
decl_stmt|;
comment|// This a 2nd batch with the same "column schema" as the big table batch that can be used to
comment|// build join output results in.  If we can create some join output results in the big table
comment|// batch, we will for better efficiency (i.e. avoiding copying).  Otherwise, we will use the
comment|// overflow batch.
specifier|protected
specifier|transient
name|VectorizedRowBatch
name|overflowBatch
decl_stmt|;
comment|// A scratch batch that will be used to play back big table rows that were spilled
comment|// to disk for the Hybrid Grace hash partitioning.
specifier|protected
specifier|transient
name|VectorizedRowBatch
name|spillReplayBatch
decl_stmt|;
comment|// Whether the native vectorized map join operator has performed its common setup.
specifier|protected
specifier|transient
name|boolean
name|needCommonSetup
decl_stmt|;
comment|// Whether the native vectorized map join operator has performed its first batch setup.
specifier|protected
specifier|transient
name|boolean
name|needFirstBatchSetup
decl_stmt|;
comment|// Whether the native vectorized map join operator has performed its
comment|// native vector map join hash table setup.
specifier|protected
specifier|transient
name|boolean
name|needHashTableSetup
decl_stmt|;
comment|// The small table hash table for the native vectorized map join operator.
specifier|protected
specifier|transient
name|VectorMapJoinHashTable
name|vectorMapJoinHashTable
decl_stmt|;
specifier|protected
specifier|transient
name|long
name|batchCounter
decl_stmt|;
specifier|protected
specifier|transient
name|long
name|rowCounter
decl_stmt|;
comment|/** Kryo ctor. */
specifier|protected
name|VectorMapJoinCommonOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|VectorMapJoinCommonOperator
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
specifier|public
name|VectorMapJoinCommonOperator
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|,
name|OperatorDesc
name|conf
parameter_list|,
name|VectorizationContext
name|vContext
parameter_list|,
name|VectorDesc
name|vectorDesc
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|MapJoinDesc
name|desc
init|=
operator|(
name|MapJoinDesc
operator|)
name|conf
decl_stmt|;
name|this
operator|.
name|conf
operator|=
name|desc
expr_stmt|;
name|this
operator|.
name|vectorDesc
operator|=
operator|(
name|VectorMapJoinDesc
operator|)
name|vectorDesc
expr_stmt|;
name|vectorMapJoinInfo
operator|=
name|this
operator|.
name|vectorDesc
operator|.
name|getVectorMapJoinInfo
argument_list|()
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|vectorMapJoinInfo
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|vContext
operator|=
name|vContext
expr_stmt|;
comment|/*      * Create a new vectorization context to create a new projection, but keep      * same output column manager must be inherited to track the scratch the columns.      */
name|vOutContext
operator|=
operator|new
name|VectorizationContext
argument_list|(
name|getName
argument_list|()
argument_list|,
name|this
operator|.
name|vContext
argument_list|)
expr_stmt|;
name|order
operator|=
name|desc
operator|.
name|getTagOrder
argument_list|()
expr_stmt|;
name|posBigTable
operator|=
operator|(
name|byte
operator|)
name|desc
operator|.
name|getPosBigTable
argument_list|()
expr_stmt|;
name|posSingleVectorMapJoinSmallTable
operator|=
operator|(
name|order
index|[
literal|0
index|]
operator|==
name|posBigTable
condition|?
name|order
index|[
literal|1
index|]
else|:
name|order
index|[
literal|0
index|]
operator|)
expr_stmt|;
name|isOuterJoin
operator|=
operator|!
name|desc
operator|.
name|getNoOuterJoin
argument_list|()
expr_stmt|;
name|vectorMapJoinVariation
operator|=
name|this
operator|.
name|vectorDesc
operator|.
name|getVectorMapJoinVariation
argument_list|()
expr_stmt|;
name|hashTableKind
operator|=
name|this
operator|.
name|vectorDesc
operator|.
name|getHashTableKind
argument_list|()
expr_stmt|;
name|hashTableKeyType
operator|=
name|this
operator|.
name|vectorDesc
operator|.
name|getHashTableKeyType
argument_list|()
expr_stmt|;
name|bigTableKeyColumnMap
operator|=
name|vectorMapJoinInfo
operator|.
name|getBigTableKeyColumnMap
argument_list|()
expr_stmt|;
name|bigTableKeyColumnNames
operator|=
name|vectorMapJoinInfo
operator|.
name|getBigTableKeyColumnNames
argument_list|()
expr_stmt|;
name|bigTableKeyTypeInfos
operator|=
name|vectorMapJoinInfo
operator|.
name|getBigTableKeyTypeInfos
argument_list|()
expr_stmt|;
name|bigTableKeyExpressions
operator|=
name|vectorMapJoinInfo
operator|.
name|getSlimmedBigTableKeyExpressions
argument_list|()
expr_stmt|;
name|bigTableValueColumnMap
operator|=
name|vectorMapJoinInfo
operator|.
name|getBigTableValueColumnMap
argument_list|()
expr_stmt|;
name|bigTableValueColumnNames
operator|=
name|vectorMapJoinInfo
operator|.
name|getBigTableValueColumnNames
argument_list|()
expr_stmt|;
name|bigTableValueTypeInfos
operator|=
name|vectorMapJoinInfo
operator|.
name|getBigTableValueTypeInfos
argument_list|()
expr_stmt|;
name|bigTableValueExpressions
operator|=
name|vectorMapJoinInfo
operator|.
name|getSlimmedBigTableValueExpressions
argument_list|()
expr_stmt|;
name|bigTableFilterExpressions
operator|=
name|vectorMapJoinInfo
operator|.
name|getBigTableFilterExpressions
argument_list|()
expr_stmt|;
name|bigTableRetainColumnMap
operator|=
name|vectorMapJoinInfo
operator|.
name|getBigTableRetainColumnMap
argument_list|()
expr_stmt|;
name|bigTableRetainTypeInfos
operator|=
name|vectorMapJoinInfo
operator|.
name|getBigTableRetainTypeInfos
argument_list|()
expr_stmt|;
name|nonOuterSmallTableKeyColumnMap
operator|=
name|vectorMapJoinInfo
operator|.
name|getNonOuterSmallTableKeyColumnMap
argument_list|()
expr_stmt|;
name|nonOuterSmallTableKeyTypeInfos
operator|=
name|vectorMapJoinInfo
operator|.
name|getNonOuterSmallTableKeyTypeInfos
argument_list|()
expr_stmt|;
name|outerSmallTableKeyMapping
operator|=
name|vectorMapJoinInfo
operator|.
name|getOuterSmallTableKeyMapping
argument_list|()
expr_stmt|;
name|fullOuterSmallTableKeyMapping
operator|=
name|vectorMapJoinInfo
operator|.
name|getFullOuterSmallTableKeyMapping
argument_list|()
expr_stmt|;
name|smallTableValueMapping
operator|=
name|vectorMapJoinInfo
operator|.
name|getSmallTableValueMapping
argument_list|()
expr_stmt|;
name|projectionMapping
operator|=
name|vectorMapJoinInfo
operator|.
name|getProjectionMapping
argument_list|()
expr_stmt|;
name|determineCommonInfo
argument_list|(
name|isOuterJoin
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|determineCommonInfo
parameter_list|(
name|boolean
name|isOuter
parameter_list|)
throws|throws
name|HiveException
block|{
name|outerSmallTableKeyColumnMap
operator|=
name|outerSmallTableKeyMapping
operator|.
name|getOutputColumns
argument_list|()
expr_stmt|;
name|smallTableValueColumnMap
operator|=
name|smallTableValueMapping
operator|.
name|getOutputColumns
argument_list|()
expr_stmt|;
comment|// Which big table and small table columns are ByteColumnVector and need have their data buffer
comment|// to be manually reset for some join result processing?
name|bigTableByteColumnVectorColumns
operator|=
name|getByteColumnVectorColumns
argument_list|(
name|bigTableRetainColumnMap
argument_list|,
name|bigTableRetainTypeInfos
argument_list|)
expr_stmt|;
name|nonOuterSmallTableKeyByteColumnVectorColumns
operator|=
name|getByteColumnVectorColumns
argument_list|(
name|nonOuterSmallTableKeyColumnMap
argument_list|,
name|nonOuterSmallTableKeyTypeInfos
argument_list|)
expr_stmt|;
name|outerSmallTableKeyByteColumnVectorColumns
operator|=
name|getByteColumnVectorColumns
argument_list|(
name|outerSmallTableKeyMapping
argument_list|)
expr_stmt|;
name|smallTableByteColumnVectorColumns
operator|=
name|getByteColumnVectorColumns
argument_list|(
name|smallTableValueMapping
argument_list|)
expr_stmt|;
name|outputProjection
operator|=
name|projectionMapping
operator|.
name|getOutputColumns
argument_list|()
expr_stmt|;
name|outputTypeInfos
operator|=
name|projectionMapping
operator|.
name|getTypeInfos
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|int
index|[]
name|orderDisplayable
init|=
operator|new
name|int
index|[
name|order
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|order
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|orderDisplayable
index|[
name|i
index|]
operator|=
operator|(
name|int
operator|)
name|order
index|[
name|i
index|]
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" order "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|orderDisplayable
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" posBigTable "
operator|+
operator|(
name|int
operator|)
name|posBigTable
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" posSingleVectorMapJoinSmallTable "
operator|+
operator|(
name|int
operator|)
name|posSingleVectorMapJoinSmallTable
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" bigTableKeyColumnMap "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bigTableKeyColumnMap
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" bigTableKeyColumnNames "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bigTableKeyColumnNames
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" bigTableKeyTypeInfos "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bigTableKeyTypeInfos
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" bigTableValueColumnMap "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bigTableValueColumnMap
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" bigTableValueColumnNames "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bigTableValueColumnNames
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" bigTableValueTypeNames "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bigTableValueTypeInfos
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" getBigTableRetainColumnMap "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bigTableRetainColumnMap
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" bigTableRetainTypeInfos "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bigTableRetainTypeInfos
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" nonOuterSmallTableKeyColumnMap "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|nonOuterSmallTableKeyColumnMap
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" nonOuterSmallTableKeyTypeInfos "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|nonOuterSmallTableKeyTypeInfos
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" outerSmallTableKeyMapping "
operator|+
name|outerSmallTableKeyMapping
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" fullOuterSmallTableKeyMapping "
operator|+
name|fullOuterSmallTableKeyMapping
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" smallTableValueMapping "
operator|+
name|smallTableValueMapping
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" bigTableByteColumnVectorColumns "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bigTableByteColumnVectorColumns
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" smallTableByteColumnVectorColumns "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|smallTableByteColumnVectorColumns
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" outputProjection "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|outputProjection
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" outputTypeInfos "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|outputTypeInfos
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" mapJoinDesc.getKeysString "
operator|+
name|conf
operator|.
name|getKeysString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getValueIndices
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|Byte
argument_list|,
name|int
index|[]
argument_list|>
name|entry
range|:
name|conf
operator|.
name|getValueIndices
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" mapJoinDesc.getValueIndices +"
operator|+
operator|(
name|int
operator|)
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" mapJoinDesc.getExprs "
operator|+
name|conf
operator|.
name|getExprs
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" mapJoinDesc.getRetainList "
operator|+
name|conf
operator|.
name|getRetainList
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setupVOutContext
argument_list|(
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Determine from a mapping which columns are BytesColumnVector columns.    */
specifier|private
name|int
index|[]
name|getByteColumnVectorColumns
parameter_list|(
name|VectorColumnMapping
name|mapping
parameter_list|)
block|{
return|return
name|getByteColumnVectorColumns
argument_list|(
name|mapping
operator|.
name|getOutputColumns
argument_list|()
argument_list|,
name|mapping
operator|.
name|getTypeInfos
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|int
index|[]
name|getByteColumnVectorColumns
parameter_list|(
name|int
index|[]
name|outputColumns
parameter_list|,
name|TypeInfo
index|[]
name|typeInfos
parameter_list|)
block|{
comment|// Search mapping for any strings and return their output columns.
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|outputColumns
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|outputColumn
init|=
name|outputColumns
index|[
name|i
index|]
decl_stmt|;
name|String
name|typeName
init|=
name|typeInfos
index|[
name|i
index|]
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|VectorizationContext
operator|.
name|isStringFamily
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|outputColumn
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ArrayUtils
operator|.
name|toPrimitive
argument_list|(
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Setup the vectorized row batch description of the output of the native vectorized map join    * operator.  Use the output projection we previously built from a mixture of input big table    * columns and new scratch columns.    */
specifier|protected
name|void
name|setupVOutContext
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|outputColumnNames
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" outputColumnNames "
operator|+
name|outputColumnNames
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outputColumnNames
operator|.
name|size
argument_list|()
operator|!=
name|outputProjection
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Output column names "
operator|+
name|outputColumnNames
operator|+
literal|" length and output projection "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|outputProjection
argument_list|)
operator|+
literal|" / "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|outputTypeInfos
argument_list|)
operator|+
literal|" length mismatch"
argument_list|)
throw|;
block|}
name|vOutContext
operator|.
name|resetProjectionColumns
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputColumnNames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|String
name|columnName
init|=
name|outputColumnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|outputColumn
init|=
name|outputProjection
index|[
name|i
index|]
decl_stmt|;
name|vOutContext
operator|.
name|addProjectionColumn
argument_list|(
name|columnName
argument_list|,
name|outputColumn
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" addProjectionColumn "
operator|+
name|i
operator|+
literal|" columnName "
operator|+
name|columnName
operator|+
literal|" outputColumn "
operator|+
name|outputColumn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This override lets us substitute our own fast vectorized hash table loader.    */
annotation|@
name|Override
specifier|protected
name|HashTableLoader
name|getHashTableLoader
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
block|{
name|HashTableImplementationType
name|hashTableImplementationType
init|=
name|vectorDesc
operator|.
name|getHashTableImplementationType
argument_list|()
decl_stmt|;
name|HashTableLoader
name|hashTableLoader
decl_stmt|;
switch|switch
condition|(
name|vectorDesc
operator|.
name|getHashTableImplementationType
argument_list|()
condition|)
block|{
case|case
name|OPTIMIZED
case|:
comment|// Use the Tez hash table loader.
name|hashTableLoader
operator|=
name|HashTableLoaderFactory
operator|.
name|getLoader
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
break|break;
case|case
name|FAST
case|:
comment|// Use our specialized hash table loader.
name|hashTableLoader
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
operator|.
name|equals
argument_list|(
literal|"spark"
argument_list|)
condition|?
name|HashTableLoaderFactory
operator|.
name|getLoader
argument_list|(
name|hconf
argument_list|)
else|:
operator|new
name|VectorMapJoinFastHashTableLoader
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown vector map join hash table implementation type "
operator|+
name|hashTableImplementationType
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|hashTableLoader
return|;
block|}
comment|/*    * Do FULL OUTER MapJoin operator initialization.    */
specifier|private
name|void
name|initializeFullOuterObjects
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// The Small Table key type jnfo is the same as Big Table's.
name|TypeInfo
index|[]
name|smallTableKeyTypeInfos
init|=
name|bigTableKeyTypeInfos
decl_stmt|;
specifier|final
name|int
name|allKeysSize
init|=
name|smallTableKeyTypeInfos
operator|.
name|length
decl_stmt|;
comment|/*      * The VectorMapJoinFullOuter{Long|MultiKey|String}Operator outputs 0, 1, or more      * Small Key columns in the join result.      */
name|allSmallTableKeyColumnNums
operator|=
operator|new
name|int
index|[
name|allKeysSize
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|allSmallTableKeyColumnNums
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|allSmallTableKeyColumnIncluded
operator|=
operator|new
name|boolean
index|[
name|allKeysSize
index|]
expr_stmt|;
specifier|final
name|int
name|outputKeysSize
init|=
name|fullOuterSmallTableKeyMapping
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|int
index|[]
name|outputKeyNums
init|=
name|fullOuterSmallTableKeyMapping
operator|.
name|getInputColumns
argument_list|()
decl_stmt|;
name|int
index|[]
name|outputKeyOutputColumns
init|=
name|fullOuterSmallTableKeyMapping
operator|.
name|getOutputColumns
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputKeysSize
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|outputKeyNum
init|=
name|outputKeyNums
index|[
name|i
index|]
decl_stmt|;
name|allSmallTableKeyColumnNums
index|[
name|outputKeyNum
index|]
operator|=
name|outputKeyOutputColumns
index|[
name|i
index|]
expr_stmt|;
name|allSmallTableKeyColumnIncluded
index|[
name|outputKeyNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|hashTableKeyType
operator|==
name|HashTableKeyType
operator|.
name|MULTI_KEY
operator|&&
name|outputKeysSize
operator|>
literal|0
condition|)
block|{
name|smallTableKeyOuterVectorDeserializeRow
operator|=
operator|new
name|VectorDeserializeRow
argument_list|<
name|BinarySortableDeserializeRead
argument_list|>
argument_list|(
name|BinarySortableDeserializeRead
operator|.
name|with
argument_list|(
name|smallTableKeyTypeInfos
argument_list|,
literal|true
argument_list|,
name|getConf
argument_list|()
operator|.
name|getKeyTblDesc
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|smallTableKeyOuterVectorDeserializeRow
operator|.
name|init
argument_list|(
name|allSmallTableKeyColumnNums
argument_list|,
name|allSmallTableKeyColumnIncluded
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|initializeOp
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|VectorExpression
operator|.
name|doTransientInit
argument_list|(
name|bigTableFilterExpressions
argument_list|,
name|hconf
argument_list|)
expr_stmt|;
name|VectorExpression
operator|.
name|doTransientInit
argument_list|(
name|bigTableKeyExpressions
argument_list|,
name|hconf
argument_list|)
expr_stmt|;
name|VectorExpression
operator|.
name|doTransientInit
argument_list|(
name|bigTableValueExpressions
argument_list|,
name|hconf
argument_list|)
expr_stmt|;
name|VectorExpression
operator|.
name|doTransientInit
argument_list|(
name|bigTableValueExpressions
argument_list|,
name|hconf
argument_list|)
expr_stmt|;
comment|/*      * Get configuration parameters.      */
name|overflowRepeatedThreshold
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_MAPJOIN_NATIVE_OVERFLOW_REPEATED_THRESHOLD
argument_list|)
expr_stmt|;
name|useOverflowRepeatedThreshold
operator|=
operator|(
name|overflowRepeatedThreshold
operator|>=
literal|0
operator|)
expr_stmt|;
comment|/*      * Create our vectorized copy row and deserialize row helper objects.      */
if|if
condition|(
name|vectorMapJoinVariation
operator|==
name|VectorMapJoinVariation
operator|.
name|FULL_OUTER
condition|)
block|{
name|initializeFullOuterObjects
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|smallTableValueMapping
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|smallTableValueVectorDeserializeRow
operator|=
operator|new
name|VectorDeserializeRow
argument_list|<
name|LazyBinaryDeserializeRead
argument_list|>
argument_list|(
operator|new
name|LazyBinaryDeserializeRead
argument_list|(
name|smallTableValueMapping
operator|.
name|getTypeInfos
argument_list|()
argument_list|,
comment|/* useExternalBuffer */
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|smallTableValueVectorDeserializeRow
operator|.
name|init
argument_list|(
name|smallTableValueMapping
operator|.
name|getOutputColumns
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bigTableRetainColumnMap
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|bigTableRetainedVectorCopy
operator|=
operator|new
name|VectorCopyRow
argument_list|()
expr_stmt|;
name|bigTableRetainedVectorCopy
operator|.
name|init
argument_list|(
name|bigTableRetainColumnMap
argument_list|,
name|bigTableRetainTypeInfos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nonOuterSmallTableKeyColumnMap
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|nonOuterSmallTableKeyVectorCopy
operator|=
operator|new
name|VectorCopyRow
argument_list|()
expr_stmt|;
name|nonOuterSmallTableKeyVectorCopy
operator|.
name|init
argument_list|(
name|nonOuterSmallTableKeyColumnMap
argument_list|,
name|nonOuterSmallTableKeyTypeInfos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outerSmallTableKeyMapping
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|outerSmallTableKeyVectorCopy
operator|=
operator|new
name|VectorCopyRow
argument_list|()
expr_stmt|;
name|outerSmallTableKeyVectorCopy
operator|.
name|init
argument_list|(
name|outerSmallTableKeyMapping
argument_list|)
expr_stmt|;
block|}
comment|/*      * Setup the overflow batch.      */
name|overflowBatch
operator|=
name|setupOverflowBatch
argument_list|()
expr_stmt|;
name|needCommonSetup
operator|=
literal|true
expr_stmt|;
name|needFirstBatchSetup
operator|=
literal|true
expr_stmt|;
name|needHashTableSetup
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|int
index|[]
name|currentScratchColumns
init|=
name|vOutContext
operator|.
name|currentScratchColumns
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator initializeOp currentScratchColumns "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|currentScratchColumns
argument_list|)
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|structOutputObjectInspector
init|=
operator|(
name|StructObjectInspector
operator|)
name|outputObjInspector
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|structOutputObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StructField
name|field
range|:
name|fields
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator initializeOp "
operator|+
name|i
operator|+
literal|" field "
operator|+
name|field
operator|.
name|getFieldName
argument_list|()
operator|+
literal|" type "
operator|+
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|completeInitializationOp
parameter_list|(
name|Object
index|[]
name|os
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// setup mapJoinTables and serdes
name|super
operator|.
name|completeInitializationOp
argument_list|(
name|os
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTestingNoHashTableLoad
condition|)
block|{
return|return;
block|}
name|MapJoinTableContainer
name|mapJoinTableContainer
init|=
name|mapJoinTables
index|[
name|posSingleVectorMapJoinSmallTable
index|]
decl_stmt|;
name|setUpHashTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|Override
specifier|public
name|void
name|setTestMapJoinTableContainer
parameter_list|(
name|int
name|posSmallTable
parameter_list|,
name|MapJoinTableContainer
name|testMapJoinTableContainer
parameter_list|,
name|MapJoinTableContainerSerDe
name|mapJoinTableContainerSerDe
parameter_list|)
block|{
name|mapJoinTables
index|[
name|posSingleVectorMapJoinSmallTable
index|]
operator|=
name|testMapJoinTableContainer
expr_stmt|;
name|setUpHashTable
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setUpHashTable
parameter_list|()
block|{
name|HashTableImplementationType
name|hashTableImplementationType
init|=
name|vectorDesc
operator|.
name|getHashTableImplementationType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|vectorDesc
operator|.
name|getHashTableImplementationType
argument_list|()
condition|)
block|{
case|case
name|OPTIMIZED
case|:
block|{
comment|// Create our vector map join optimized hash table variation *above* the
comment|// map join table container.
name|vectorMapJoinHashTable
operator|=
name|VectorMapJoinOptimizedCreateHashTable
operator|.
name|createHashTable
argument_list|(
name|conf
argument_list|,
name|mapJoinTables
index|[
name|posSingleVectorMapJoinSmallTable
index|]
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FAST
case|:
block|{
comment|// Get our vector map join fast hash table variation from the
comment|// vector map join table container.
name|VectorMapJoinTableContainer
name|vectorMapJoinTableContainer
init|=
operator|(
name|VectorMapJoinTableContainer
operator|)
name|mapJoinTables
index|[
name|posSingleVectorMapJoinSmallTable
index|]
decl_stmt|;
name|vectorMapJoinHashTable
operator|=
name|vectorMapJoinTableContainer
operator|.
name|vectorMapJoinHashTable
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown vector map join hash table implementation type "
operator|+
name|hashTableImplementationType
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Using "
operator|+
name|vectorMapJoinHashTable
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" from "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * Setup our 2nd batch with the same "column schema" as the big table batch that can be used to    * build join output results in.    */
specifier|protected
name|VectorizedRowBatch
name|setupOverflowBatch
parameter_list|()
throws|throws
name|HiveException
block|{
name|int
name|initialColumnCount
init|=
name|vContext
operator|.
name|firstOutputColumnIndex
argument_list|()
decl_stmt|;
name|VectorizedRowBatch
name|overflowBatch
decl_stmt|;
name|int
name|totalNumColumns
init|=
name|initialColumnCount
operator|+
name|vOutContext
operator|.
name|getScratchColumnTypeNames
argument_list|()
operator|.
name|length
decl_stmt|;
name|overflowBatch
operator|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|totalNumColumns
argument_list|)
expr_stmt|;
comment|// First, just allocate just the projection columns we will be using.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputProjection
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|outputColumn
init|=
name|outputProjection
index|[
name|i
index|]
decl_stmt|;
name|String
name|typeName
init|=
name|outputTypeInfos
index|[
name|i
index|]
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
name|allocateOverflowBatchColumnVector
argument_list|(
name|overflowBatch
argument_list|,
name|outputColumn
argument_list|,
name|typeName
argument_list|,
name|vOutContext
operator|.
name|getDataTypePhysicalVariation
argument_list|(
name|outputColumn
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now, add any scratch columns needed for children operators.
name|int
name|outputColumn
init|=
name|initialColumnCount
decl_stmt|;
for|for
control|(
name|String
name|typeName
range|:
name|vOutContext
operator|.
name|getScratchColumnTypeNames
argument_list|()
control|)
block|{
name|allocateOverflowBatchColumnVector
argument_list|(
name|overflowBatch
argument_list|,
name|outputColumn
argument_list|,
name|typeName
argument_list|,
name|vOutContext
operator|.
name|getDataTypePhysicalVariation
argument_list|(
name|outputColumn
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|overflowBatch
operator|.
name|projectedColumns
operator|=
name|outputProjection
expr_stmt|;
name|overflowBatch
operator|.
name|projectionSize
operator|=
name|outputProjection
operator|.
name|length
expr_stmt|;
name|overflowBatch
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|overflowBatch
return|;
block|}
comment|/*    * Allocate overflow batch columns by hand.    */
specifier|private
name|void
name|allocateOverflowBatchColumnVector
parameter_list|(
name|VectorizedRowBatch
name|overflowBatch
parameter_list|,
name|int
name|outputColumn
parameter_list|,
name|String
name|typeName
parameter_list|,
name|DataTypePhysicalVariation
name|dataTypePhysicalVariation
parameter_list|)
block|{
if|if
condition|(
name|overflowBatch
operator|.
name|cols
index|[
name|outputColumn
index|]
operator|==
literal|null
condition|)
block|{
name|typeName
operator|=
name|VectorizationContext
operator|.
name|mapTypeNameSynonyms
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|overflowBatch
operator|.
name|cols
index|[
name|outputColumn
index|]
operator|=
name|VectorizedBatchUtil
operator|.
name|createColumnVector
argument_list|(
name|typeInfo
argument_list|,
name|dataTypePhysicalVariation
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator initializeOp overflowBatch outputColumn "
operator|+
name|outputColumn
operator|+
literal|" class "
operator|+
name|overflowBatch
operator|.
name|cols
index|[
name|outputColumn
index|]
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Common one time setup for Native Vector MapJoin operator.    */
specifier|protected
name|void
name|commonSetup
parameter_list|()
throws|throws
name|HiveException
block|{
comment|/*      * Make sure big table BytesColumnVectors have room for string values in the overflow batch...      */
for|for
control|(
name|int
name|column
range|:
name|bigTableByteColumnVectorColumns
control|)
block|{
name|BytesColumnVector
name|bytesColumnVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|overflowBatch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|bytesColumnVector
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|column
range|:
name|nonOuterSmallTableKeyByteColumnVectorColumns
control|)
block|{
name|BytesColumnVector
name|bytesColumnVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|overflowBatch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|bytesColumnVector
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|column
range|:
name|outerSmallTableKeyByteColumnVectorColumns
control|)
block|{
name|BytesColumnVector
name|bytesColumnVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|overflowBatch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|bytesColumnVector
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|column
range|:
name|smallTableByteColumnVectorColumns
control|)
block|{
name|BytesColumnVector
name|bytesColumnVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|overflowBatch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|bytesColumnVector
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
block|}
name|batchCounter
operator|=
literal|0
expr_stmt|;
name|rowCounter
operator|=
literal|0
expr_stmt|;
block|}
comment|/*    * Common one time setup by native vectorized map join operator's first batch.    */
specifier|public
name|void
name|firstBatchSetup
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// Make sure small table BytesColumnVectors have room for string values in the big table and
comment|// overflow batchs...
for|for
control|(
name|int
name|column
range|:
name|smallTableByteColumnVectorColumns
control|)
block|{
name|BytesColumnVector
name|bytesColumnVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|bytesColumnVector
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
block|}
comment|// Setup a scratch batch that will be used to play back big table rows that were spilled
comment|// to disk for the Hybrid Grace hash partitioning.
name|spillReplayBatch
operator|=
name|VectorizedBatchUtil
operator|.
name|makeLike
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
comment|/*    * Perform any Native Vector MapJoin operator specific hash table setup.    */
specifier|public
name|void
name|hashTableSetup
parameter_list|()
throws|throws
name|HiveException
block|{   }
comment|/*    * Perform the Native Vector MapJoin operator work.    */
specifier|public
specifier|abstract
name|void
name|processBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
function_decl|;
comment|/*    * Common process method for all Native Vector MapJoin operators.    *    * Do common initialization work and invoke the override-able common setup methods.    *    * Then, invoke the processBatch override method to do the operator work.    */
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|(
name|VectorizedRowBatch
operator|)
name|row
decl_stmt|;
name|alias
operator|=
operator|(
name|byte
operator|)
name|tag
expr_stmt|;
if|if
condition|(
name|needCommonSetup
condition|)
block|{
comment|// Our one time process method initialization.
name|commonSetup
argument_list|()
expr_stmt|;
name|needCommonSetup
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|needFirstBatchSetup
condition|)
block|{
comment|// Our one time first-batch method initialization.
name|firstBatchSetup
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|needFirstBatchSetup
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|needHashTableSetup
condition|)
block|{
comment|// Setup our hash table specialization.  It will be the first time the process
comment|// method is called, or after a Hybrid Grace reload.
name|hashTableSetup
argument_list|()
expr_stmt|;
name|needHashTableSetup
operator|=
literal|false
expr_stmt|;
block|}
name|batchCounter
operator|++
expr_stmt|;
if|if
condition|(
name|batch
operator|.
name|size
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|rowCounter
operator|+=
name|batch
operator|.
name|size
expr_stmt|;
name|processBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|displayBatchColumns
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|String
name|batchName
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator commonSetup "
operator|+
name|batchName
operator|+
literal|" column count "
operator|+
name|batch
operator|.
name|numCols
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|batch
operator|.
name|numCols
condition|;
name|column
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getLoggingPrefix
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator commonSetup "
operator|+
name|batchName
operator|+
literal|"     column "
operator|+
name|column
operator|+
literal|" type "
operator|+
operator|(
name|batch
operator|.
name|cols
index|[
name|column
index|]
operator|==
literal|null
condition|?
literal|"NULL"
else|:
name|batch
operator|.
name|cols
index|[
name|column
index|]
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|MAPJOIN
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorizationContext
name|getInputVectorizationContext
parameter_list|()
block|{
return|return
name|vContext
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorDesc
name|getVectorDesc
parameter_list|()
block|{
return|return
name|vectorDesc
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorizationContext
name|getOutputVectorizationContext
parameter_list|()
block|{
return|return
name|vOutContext
return|;
block|}
block|}
end_class

end_unit

