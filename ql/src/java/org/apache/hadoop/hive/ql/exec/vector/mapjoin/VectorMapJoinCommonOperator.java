begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|HashTableLoaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|HashTableLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapredContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|ExecMapperContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainerSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainer
operator|.
name|ReusableGetAdaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorColumnOutputMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorColumnSourceMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorCopyRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorDeserializeRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExpressionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContextRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedBatchUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatchCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|IdentityExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|optimized
operator|.
name|VectorMapJoinOptimizedCreateHashTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinHashTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|hashtable
operator|.
name|VectorMapJoinTableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|fast
operator|.
name|VectorMapJoinFastHashTableLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|BaseWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|HashTableImplementationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|fast
operator|.
name|LazyBinaryDeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_comment
comment|/**  * This class is common operator class for native vectorized map join.  *  * It contain common initialization logic.  *  * It is used by both inner and outer joins.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|VectorMapJoinCommonOperator
extends|extends
name|MapJoinOperator
implements|implements
name|VectorizationContextRegion
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VectorMapJoinCommonOperator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Whether this operator is an outer join.
specifier|protected
name|boolean
name|isOuterJoin
decl_stmt|;
comment|// Position of the *single* native vector map join small table.
specifier|protected
name|byte
name|posSingleVectorMapJoinSmallTable
decl_stmt|;
comment|// The incoming vectorization context.  It describes the input big table vectorized row batch.
specifier|protected
name|VectorizationContext
name|vContext
decl_stmt|;
comment|// This is the vectorized row batch description of the output of the native vectorized map join
comment|// operator.  It is based on the incoming vectorization context.  Its projection may include
comment|// a mixture of input big table columns and new scratch columns.
specifier|protected
name|VectorizationContext
name|vOutContext
decl_stmt|;
comment|// The output column projection of the vectorized row batch.  And, the type names of the output
comment|// columns.
specifier|protected
name|int
index|[]
name|outputProjection
decl_stmt|;
specifier|protected
name|String
index|[]
name|outputTypeNames
decl_stmt|;
comment|// These are the vectorized batch expressions for filtering, key expressions, and value
comment|// expressions.
specifier|protected
name|VectorExpression
index|[]
name|bigTableFilterExpressions
decl_stmt|;
specifier|protected
name|VectorExpression
index|[]
name|bigTableKeyExpressions
decl_stmt|;
specifier|protected
name|VectorExpression
index|[]
name|bigTableValueExpressions
decl_stmt|;
comment|// This is map of which vectorized row batch columns are the big table key columns.  Since
comment|// we may have key expressions that produce new scratch columns, we need a mapping.
comment|// And, we have their type names.
specifier|protected
name|int
index|[]
name|bigTableKeyColumnMap
decl_stmt|;
specifier|protected
name|ArrayList
argument_list|<
name|String
argument_list|>
name|bigTableKeyTypeNames
decl_stmt|;
comment|// Similarly, this is map of which vectorized row batch columns are the big table value columns.
comment|// Since we may have value expressions that produce new scratch columns, we need a mapping.
comment|// And, we have their type names.
specifier|protected
name|int
index|[]
name|bigTableValueColumnMap
decl_stmt|;
specifier|protected
name|ArrayList
argument_list|<
name|String
argument_list|>
name|bigTableValueTypeNames
decl_stmt|;
comment|// This is a mapping of which big table columns (input and key/value expressions) will be
comment|// part of the big table portion of the join output result.
specifier|protected
name|VectorColumnOutputMapping
name|bigTableRetainedMapping
decl_stmt|;
comment|// This is a mapping of which keys will be copied from the big table (input and key expressions)
comment|// to the small table result portion of the output for outer join.
specifier|protected
name|VectorColumnOutputMapping
name|bigTableOuterKeyMapping
decl_stmt|;
comment|// This is a mapping of the values in the small table hash table that will be copied to the
comment|// small table result portion of the output.  That is, a mapping of the LazyBinary field order
comment|// to output batch scratch columns for the small table portion.
specifier|protected
name|VectorColumnSourceMapping
name|smallTableMapping
decl_stmt|;
comment|// These are the output columns for the small table and the outer small table keys.
specifier|protected
name|int
index|[]
name|smallTableOutputVectorColumns
decl_stmt|;
specifier|protected
name|int
index|[]
name|bigTableOuterKeyOutputVectorColumns
decl_stmt|;
comment|// These are the columns in the big and small table that are ByteColumnVector columns.
comment|// We create data buffers for these columns so we can copy strings into those columns by value.
specifier|protected
name|int
index|[]
name|bigTableByteColumnVectorColumns
decl_stmt|;
specifier|protected
name|int
index|[]
name|smallTableByteColumnVectorColumns
decl_stmt|;
comment|// The above members are initialized by the constructor and must not be
comment|// transient.
comment|//---------------------------------------------------------------------------
comment|// For debug tracing: the name of the map or reduce task.
specifier|protected
specifier|transient
name|String
name|taskName
decl_stmt|;
comment|// The threshold where we should use a repeating vectorized row batch optimization for
comment|// generating join output results.
specifier|protected
specifier|transient
name|boolean
name|useOverflowRepeatedThreshold
decl_stmt|;
specifier|protected
specifier|transient
name|int
name|overflowRepeatedThreshold
decl_stmt|;
comment|// A helper object that efficiently copies the big table columns that are for the big table
comment|// portion of the join output.
specifier|protected
specifier|transient
name|VectorCopyRow
name|bigTableRetainedVectorCopy
decl_stmt|;
comment|// A helper object that efficiently copies the big table key columns (input or key expressions)
comment|// that appear in the small table portion of the join output for outer joins.
specifier|protected
specifier|transient
name|VectorCopyRow
name|bigTableVectorCopyOuterKeys
decl_stmt|;
comment|// This helper object deserializes LazyBinary format small table values into columns of a row
comment|// in a vectorized row batch.
specifier|protected
specifier|transient
name|VectorDeserializeRow
name|smallTableVectorDeserializeRow
decl_stmt|;
comment|// This a 2nd batch with the same "column schema" as the big table batch that can be used to
comment|// build join output results in.  If we can create some join output results in the big table
comment|// batch, we will for better efficiency (i.e. avoiding copying).  Otherwise, we will use the
comment|// overflow batch.
specifier|protected
specifier|transient
name|VectorizedRowBatch
name|overflowBatch
decl_stmt|;
comment|// A scratch batch that will be used to play back big table rows that were spilled
comment|// to disk for the Hybrid Grace hash partitioning.
specifier|protected
specifier|transient
name|VectorizedRowBatch
name|spillReplayBatch
decl_stmt|;
comment|// Whether the native vectorized map join operator has performed its common setup.
specifier|protected
specifier|transient
name|boolean
name|needCommonSetup
decl_stmt|;
comment|// Whether the native vectorized map join operator has performed its
comment|// native vector map join hash table setup.
specifier|protected
specifier|transient
name|boolean
name|needHashTableSetup
decl_stmt|;
comment|// The small table hash table for the native vectorized map join operator.
specifier|protected
specifier|transient
name|VectorMapJoinHashTable
name|vectorMapJoinHashTable
decl_stmt|;
specifier|public
name|VectorMapJoinCommonOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|VectorMapJoinCommonOperator
parameter_list|(
name|VectorizationContext
name|vContext
parameter_list|,
name|OperatorDesc
name|conf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
argument_list|()
expr_stmt|;
name|MapJoinDesc
name|desc
init|=
operator|(
name|MapJoinDesc
operator|)
name|conf
decl_stmt|;
name|this
operator|.
name|conf
operator|=
name|desc
expr_stmt|;
name|this
operator|.
name|vContext
operator|=
name|vContext
expr_stmt|;
comment|/*      * Create a new vectorization context to create a new projection, but keep      * same output column manager must be inherited to track the scratch the columns.      */
name|vOutContext
operator|=
operator|new
name|VectorizationContext
argument_list|(
name|getName
argument_list|()
argument_list|,
name|this
operator|.
name|vContext
argument_list|)
expr_stmt|;
name|order
operator|=
name|desc
operator|.
name|getTagOrder
argument_list|()
expr_stmt|;
name|posBigTable
operator|=
operator|(
name|byte
operator|)
name|desc
operator|.
name|getPosBigTable
argument_list|()
expr_stmt|;
name|posSingleVectorMapJoinSmallTable
operator|=
operator|(
name|order
index|[
literal|0
index|]
operator|==
name|posBigTable
condition|?
name|order
index|[
literal|1
index|]
else|:
name|order
index|[
literal|0
index|]
operator|)
expr_stmt|;
name|isOuterJoin
operator|=
operator|!
name|desc
operator|.
name|getNoOuterJoin
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|filterExpressions
init|=
name|desc
operator|.
name|getFilters
argument_list|()
decl_stmt|;
name|bigTableFilterExpressions
operator|=
name|vContext
operator|.
name|getVectorExpressions
argument_list|(
name|filterExpressions
operator|.
name|get
argument_list|(
name|posBigTable
argument_list|)
argument_list|,
name|VectorExpressionDescriptor
operator|.
name|Mode
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyDesc
init|=
name|desc
operator|.
name|getKeys
argument_list|()
operator|.
name|get
argument_list|(
name|posBigTable
argument_list|)
decl_stmt|;
name|bigTableKeyExpressions
operator|=
name|vContext
operator|.
name|getVectorExpressions
argument_list|(
name|keyDesc
argument_list|)
expr_stmt|;
comment|// Since a key expression can be a calculation and the key will go into a scratch column,
comment|// we need the mapping and type information.
name|bigTableKeyColumnMap
operator|=
operator|new
name|int
index|[
name|bigTableKeyExpressions
operator|.
name|length
index|]
expr_stmt|;
name|bigTableKeyTypeNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|boolean
name|onlyColumns
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bigTableKeyColumnMap
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|VectorExpression
name|ve
init|=
name|bigTableKeyExpressions
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|IdentityExpression
operator|.
name|isColumnOnly
argument_list|(
name|ve
argument_list|)
condition|)
block|{
name|onlyColumns
operator|=
literal|false
expr_stmt|;
block|}
name|bigTableKeyTypeNames
operator|.
name|add
argument_list|(
name|keyDesc
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTypeString
argument_list|()
argument_list|)
expr_stmt|;
name|bigTableKeyColumnMap
index|[
name|i
index|]
operator|=
name|ve
operator|.
name|getOutputColumn
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|onlyColumns
condition|)
block|{
name|bigTableKeyExpressions
operator|=
literal|null
expr_stmt|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bigTableExprs
init|=
name|desc
operator|.
name|getExprs
argument_list|()
operator|.
name|get
argument_list|(
name|posBigTable
argument_list|)
decl_stmt|;
name|bigTableValueExpressions
operator|=
name|vContext
operator|.
name|getVectorExpressions
argument_list|(
name|bigTableExprs
argument_list|)
expr_stmt|;
comment|/*      * Similarly, we need a mapping since a value expression can be a calculation and the value      * will go into a scratch column.      */
name|bigTableValueColumnMap
operator|=
operator|new
name|int
index|[
name|bigTableValueExpressions
operator|.
name|length
index|]
expr_stmt|;
name|bigTableValueTypeNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|onlyColumns
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bigTableValueColumnMap
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|VectorExpression
name|ve
init|=
name|bigTableValueExpressions
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|IdentityExpression
operator|.
name|isColumnOnly
argument_list|(
name|ve
argument_list|)
condition|)
block|{
name|onlyColumns
operator|=
literal|false
expr_stmt|;
block|}
name|bigTableValueTypeNames
operator|.
name|add
argument_list|(
name|bigTableExprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTypeString
argument_list|()
argument_list|)
expr_stmt|;
name|bigTableValueColumnMap
index|[
name|i
index|]
operator|=
name|ve
operator|.
name|getOutputColumn
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|onlyColumns
condition|)
block|{
name|bigTableValueExpressions
operator|=
literal|null
expr_stmt|;
block|}
name|determineCommonInfo
argument_list|(
name|isOuterJoin
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|determineCommonInfo
parameter_list|(
name|boolean
name|isOuter
parameter_list|)
block|{
name|bigTableRetainedMapping
operator|=
operator|new
name|VectorColumnOutputMapping
argument_list|(
literal|"Big Table Retained Mapping"
argument_list|)
expr_stmt|;
name|bigTableOuterKeyMapping
operator|=
operator|new
name|VectorColumnOutputMapping
argument_list|(
literal|"Big Table Outer Key Mapping"
argument_list|)
expr_stmt|;
comment|// The order of the fields in the LazyBinary small table value must be used, so
comment|// we use the source ordering flavor for the mapping.
name|smallTableMapping
operator|=
operator|new
name|VectorColumnSourceMapping
argument_list|(
literal|"Small Table Mapping"
argument_list|)
expr_stmt|;
comment|// We use a mapping object here so we can build the projection in any order and
comment|// get the ordered by 0 to n-1 output columns at the end.
comment|//
comment|// Also, to avoid copying a big table key into the small table result area for inner joins,
comment|// we reference it with the projection so there can be duplicate output columns
comment|// in the projection.
name|VectorColumnSourceMapping
name|projectionMapping
init|=
operator|new
name|VectorColumnSourceMapping
argument_list|(
literal|"Projection Mapping"
argument_list|)
decl_stmt|;
comment|/*      * Gather up big and small table output result information from the MapJoinDesc.      */
name|List
argument_list|<
name|Integer
argument_list|>
name|bigTableRetainList
init|=
name|conf
operator|.
name|getRetainList
argument_list|()
operator|.
name|get
argument_list|(
name|posBigTable
argument_list|)
decl_stmt|;
name|int
name|bigTableRetainSize
init|=
name|bigTableRetainList
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
index|[]
name|smallTableIndices
decl_stmt|;
name|int
name|smallTableIndicesSize
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|smallTableExprs
init|=
name|conf
operator|.
name|getExprs
argument_list|()
operator|.
name|get
argument_list|(
name|posSingleVectorMapJoinSmallTable
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getValueIndices
argument_list|()
operator|!=
literal|null
operator|&&
name|conf
operator|.
name|getValueIndices
argument_list|()
operator|.
name|get
argument_list|(
name|posSingleVectorMapJoinSmallTable
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|smallTableIndices
operator|=
name|conf
operator|.
name|getValueIndices
argument_list|()
operator|.
name|get
argument_list|(
name|posSingleVectorMapJoinSmallTable
argument_list|)
expr_stmt|;
name|smallTableIndicesSize
operator|=
name|smallTableIndices
operator|.
name|length
expr_stmt|;
block|}
else|else
block|{
name|smallTableIndices
operator|=
literal|null
expr_stmt|;
name|smallTableIndicesSize
operator|=
literal|0
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|smallTableRetainList
init|=
name|conf
operator|.
name|getRetainList
argument_list|()
operator|.
name|get
argument_list|(
name|posSingleVectorMapJoinSmallTable
argument_list|)
decl_stmt|;
name|int
name|smallTableRetainSize
init|=
name|smallTableRetainList
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|smallTableResultSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|smallTableIndicesSize
operator|>
literal|0
condition|)
block|{
name|smallTableResultSize
operator|=
name|smallTableIndicesSize
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|smallTableRetainSize
operator|>
literal|0
condition|)
block|{
name|smallTableResultSize
operator|=
name|smallTableRetainSize
expr_stmt|;
block|}
comment|/*      * Determine the big table retained mapping first so we can optimize out (with      * projection) copying inner join big table keys in the subsequent small table results section.      */
name|int
name|nextOutputColumn
init|=
operator|(
name|order
index|[
literal|0
index|]
operator|==
name|posBigTable
condition|?
literal|0
else|:
name|smallTableResultSize
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bigTableRetainSize
condition|;
name|i
operator|++
control|)
block|{
comment|// Since bigTableValueExpressions may do a calculation and produce a scratch column, we
comment|// need to map to the right batch column.
name|int
name|retainColumn
init|=
name|bigTableRetainList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|batchColumnIndex
init|=
name|bigTableValueColumnMap
index|[
name|retainColumn
index|]
decl_stmt|;
name|String
name|typeName
init|=
name|bigTableValueTypeNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// With this map we project the big table batch to make it look like an output batch.
name|projectionMapping
operator|.
name|add
argument_list|(
name|nextOutputColumn
argument_list|,
name|batchColumnIndex
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
comment|// Collect columns we copy from the big table batch to the overflow batch.
if|if
condition|(
operator|!
name|bigTableRetainedMapping
operator|.
name|containsOutputColumn
argument_list|(
name|batchColumnIndex
argument_list|)
condition|)
block|{
comment|// Tolerate repeated use of a big table column.
name|bigTableRetainedMapping
operator|.
name|add
argument_list|(
name|batchColumnIndex
argument_list|,
name|batchColumnIndex
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
block|}
name|nextOutputColumn
operator|++
expr_stmt|;
block|}
comment|/*      * Now determine the small table results.      */
name|int
name|firstSmallTableOutputColumn
decl_stmt|;
name|firstSmallTableOutputColumn
operator|=
operator|(
name|order
index|[
literal|0
index|]
operator|==
name|posBigTable
condition|?
name|bigTableRetainSize
else|:
literal|0
operator|)
expr_stmt|;
name|int
name|smallTableOutputCount
init|=
literal|0
decl_stmt|;
name|nextOutputColumn
operator|=
name|firstSmallTableOutputColumn
expr_stmt|;
comment|// Small table indices has more information (i.e. keys) than retain, so use it if it exists...
if|if
condition|(
name|smallTableIndicesSize
operator|>
literal|0
condition|)
block|{
name|smallTableOutputCount
operator|=
name|smallTableIndicesSize
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|smallTableIndicesSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|smallTableIndices
index|[
name|i
index|]
operator|>=
literal|0
condition|)
block|{
comment|// Zero and above numbers indicate a big table key is needed for
comment|// small table result "area".
name|int
name|keyIndex
init|=
name|smallTableIndices
index|[
name|i
index|]
decl_stmt|;
comment|// Since bigTableKeyExpressions may do a calculation and produce a scratch column, we
comment|// need to map the right column.
name|int
name|batchKeyColumn
init|=
name|bigTableKeyColumnMap
index|[
name|keyIndex
index|]
decl_stmt|;
name|String
name|typeName
init|=
name|bigTableKeyTypeNames
operator|.
name|get
argument_list|(
name|keyIndex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isOuter
condition|)
block|{
comment|// Optimize inner join keys of small table results.
comment|// Project the big table key into the small table result "area".
name|projectionMapping
operator|.
name|add
argument_list|(
name|nextOutputColumn
argument_list|,
name|batchKeyColumn
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bigTableRetainedMapping
operator|.
name|containsOutputColumn
argument_list|(
name|batchKeyColumn
argument_list|)
condition|)
block|{
comment|// If necessary, copy the big table key into the overflow batch's small table
comment|// result "area".
name|bigTableRetainedMapping
operator|.
name|add
argument_list|(
name|batchKeyColumn
argument_list|,
name|batchKeyColumn
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// For outer joins, since the small table key can be null when there is no match,
comment|// we must have a physical (scratch) column for those keys.  We cannot use the
comment|// projection optimization used by inner joins above.
name|int
name|scratchColumn
init|=
name|vOutContext
operator|.
name|allocateScratchColumn
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|projectionMapping
operator|.
name|add
argument_list|(
name|nextOutputColumn
argument_list|,
name|scratchColumn
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
name|bigTableRetainedMapping
operator|.
name|add
argument_list|(
name|batchKeyColumn
argument_list|,
name|scratchColumn
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
name|bigTableOuterKeyMapping
operator|.
name|add
argument_list|(
name|batchKeyColumn
argument_list|,
name|scratchColumn
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Negative numbers indicate a column to be (deserialize) read from the small table's
comment|// LazyBinary value row.
name|int
name|smallTableValueIndex
init|=
operator|-
name|smallTableIndices
index|[
name|i
index|]
operator|-
literal|1
decl_stmt|;
name|String
name|typeName
init|=
name|smallTableExprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
comment|// Make a new big table scratch column for the small table value.
name|int
name|scratchColumn
init|=
name|vOutContext
operator|.
name|allocateScratchColumn
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|projectionMapping
operator|.
name|add
argument_list|(
name|nextOutputColumn
argument_list|,
name|scratchColumn
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
name|smallTableMapping
operator|.
name|add
argument_list|(
name|smallTableValueIndex
argument_list|,
name|scratchColumn
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
block|}
name|nextOutputColumn
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|smallTableRetainSize
operator|>
literal|0
condition|)
block|{
name|smallTableOutputCount
operator|=
name|smallTableRetainSize
expr_stmt|;
comment|// Only small table values appear in join output result.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|smallTableRetainSize
condition|;
name|i
operator|++
control|)
block|{
name|int
name|smallTableValueIndex
init|=
name|smallTableRetainList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Make a new big table scratch column for the small table value.
name|String
name|typeName
init|=
name|smallTableExprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
name|int
name|scratchColumn
init|=
name|vOutContext
operator|.
name|allocateScratchColumn
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|projectionMapping
operator|.
name|add
argument_list|(
name|nextOutputColumn
argument_list|,
name|scratchColumn
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
name|smallTableMapping
operator|.
name|add
argument_list|(
name|smallTableValueIndex
argument_list|,
name|scratchColumn
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
name|nextOutputColumn
operator|++
expr_stmt|;
block|}
block|}
comment|// Convert dynamic arrays and maps to simple arrays.
name|bigTableRetainedMapping
operator|.
name|finalize
argument_list|()
expr_stmt|;
name|bigTableOuterKeyMapping
operator|.
name|finalize
argument_list|()
expr_stmt|;
name|smallTableMapping
operator|.
name|finalize
argument_list|()
expr_stmt|;
name|bigTableOuterKeyOutputVectorColumns
operator|=
name|bigTableOuterKeyMapping
operator|.
name|getOutputColumns
argument_list|()
expr_stmt|;
name|smallTableOutputVectorColumns
operator|=
name|smallTableMapping
operator|.
name|getOutputColumns
argument_list|()
expr_stmt|;
comment|// Which big table and small table columns are ByteColumnVector and need have their data buffer
comment|// to be manually reset for some join result processing?
name|bigTableByteColumnVectorColumns
operator|=
name|getByteColumnVectorColumns
argument_list|(
name|bigTableOuterKeyMapping
argument_list|)
expr_stmt|;
name|smallTableByteColumnVectorColumns
operator|=
name|getByteColumnVectorColumns
argument_list|(
name|smallTableMapping
argument_list|)
expr_stmt|;
name|projectionMapping
operator|.
name|finalize
argument_list|()
expr_stmt|;
comment|// Verify we added an entry for each output.
assert|assert
name|projectionMapping
operator|.
name|isSourceSequenceGood
argument_list|()
assert|;
name|outputProjection
operator|=
name|projectionMapping
operator|.
name|getOutputColumns
argument_list|()
expr_stmt|;
name|outputTypeNames
operator|=
name|projectionMapping
operator|.
name|getTypeNames
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|int
index|[]
name|orderDisplayable
init|=
operator|new
name|int
index|[
name|order
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|order
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|orderDisplayable
index|[
name|i
index|]
operator|=
operator|(
name|int
operator|)
name|order
index|[
name|i
index|]
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor order "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|orderDisplayable
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor posBigTable "
operator|+
operator|(
name|int
operator|)
name|posBigTable
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor posSingleVectorMapJoinSmallTable "
operator|+
operator|(
name|int
operator|)
name|posSingleVectorMapJoinSmallTable
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor bigTableKeyColumnMap "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bigTableKeyColumnMap
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor bigTableKeyTypeNames "
operator|+
name|bigTableKeyTypeNames
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor bigTableValueColumnMap "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bigTableValueColumnMap
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor bigTableValueTypeNames "
operator|+
name|bigTableValueTypeNames
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor smallTableIndices "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|smallTableIndices
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor smallTableRetainList "
operator|+
name|smallTableRetainList
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor firstSmallTableOutputColumn "
operator|+
name|firstSmallTableOutputColumn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor smallTableOutputCount "
operator|+
name|smallTableOutputCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor bigTableRetainedMapping "
operator|+
name|bigTableRetainedMapping
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor bigTableOuterKeyMapping "
operator|+
name|bigTableOuterKeyMapping
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor smallTableMapping "
operator|+
name|smallTableMapping
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor bigTableByteColumnVectorColumns "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bigTableByteColumnVectorColumns
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor smallTableByteColumnVectorColumns "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|smallTableByteColumnVectorColumns
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor outputProjection "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|outputProjection
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor outputTypeNames "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|outputTypeNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setupVOutContext
argument_list|(
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Determine from a mapping which columns are BytesColumnVector columns.    */
specifier|private
name|int
index|[]
name|getByteColumnVectorColumns
parameter_list|(
name|VectorColumnMapping
name|mapping
parameter_list|)
block|{
comment|// Search mapping for any strings and return their output columns.
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|mapping
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|int
index|[]
name|outputColumns
init|=
name|mapping
operator|.
name|getOutputColumns
argument_list|()
decl_stmt|;
name|String
index|[]
name|typeNames
init|=
name|mapping
operator|.
name|getTypeNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|outputColumn
init|=
name|outputColumns
index|[
name|i
index|]
decl_stmt|;
name|String
name|typeName
init|=
name|typeNames
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|VectorizationContext
operator|.
name|isStringFamily
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|outputColumn
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ArrayUtils
operator|.
name|toPrimitive
argument_list|(
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Setup the vectorized row batch description of the output of the native vectorized map join    * operator.  Use the output projection we previously built from a mixture of input big table    * columns and new scratch columns.    */
specifier|protected
name|void
name|setupVOutContext
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|outputColumnNames
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor outputColumnNames "
operator|+
name|outputColumnNames
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outputColumnNames
operator|.
name|size
argument_list|()
operator|!=
name|outputProjection
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Output column names "
operator|+
name|outputColumnNames
operator|+
literal|" length and output projection "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|outputProjection
argument_list|)
operator|+
literal|" / "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|outputTypeNames
argument_list|)
operator|+
literal|" length mismatch"
argument_list|)
throw|;
block|}
name|vOutContext
operator|.
name|resetProjectionColumns
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputColumnNames
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|String
name|columnName
init|=
name|outputColumnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|outputColumn
init|=
name|outputProjection
index|[
name|i
index|]
decl_stmt|;
name|vOutContext
operator|.
name|addProjectionColumn
argument_list|(
name|columnName
argument_list|,
name|outputColumn
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator constructor addProjectionColumn "
operator|+
name|i
operator|+
literal|" columnName "
operator|+
name|columnName
operator|+
literal|" outputColumn "
operator|+
name|outputColumn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This override lets us substitute our own fast vectorized hash table loader.    */
annotation|@
name|Override
specifier|protected
name|HashTableLoader
name|getHashTableLoader
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
block|{
name|VectorMapJoinDesc
name|vectorDesc
init|=
name|conf
operator|.
name|getVectorDesc
argument_list|()
decl_stmt|;
name|HashTableImplementationType
name|hashTableImplementationType
init|=
name|vectorDesc
operator|.
name|hashTableImplementationType
argument_list|()
decl_stmt|;
name|HashTableLoader
name|hashTableLoader
decl_stmt|;
switch|switch
condition|(
name|vectorDesc
operator|.
name|hashTableImplementationType
argument_list|()
condition|)
block|{
case|case
name|OPTIMIZED
case|:
comment|// Use the Tez hash table loader.
name|hashTableLoader
operator|=
name|HashTableLoaderFactory
operator|.
name|getLoader
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
break|break;
case|case
name|FAST
case|:
comment|// Use our specialized hash table loader.
name|hashTableLoader
operator|=
operator|new
name|VectorMapJoinFastHashTableLoader
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown vector map join hash table implementation type "
operator|+
name|hashTableImplementationType
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|hashTableLoader
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|initializeOp
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
comment|// Determine the name of our map or reduce task for debug tracing.
name|BaseWork
name|work
init|=
name|Utilities
operator|.
name|getMapWork
argument_list|(
name|hconf
argument_list|)
decl_stmt|;
if|if
condition|(
name|work
operator|==
literal|null
condition|)
block|{
name|work
operator|=
name|Utilities
operator|.
name|getReduceWork
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
name|taskName
operator|=
name|work
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
comment|/*      * Get configuration parameters.      */
name|overflowRepeatedThreshold
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_MAPJOIN_NATIVE_OVERFLOW_REPEATED_THRESHOLD
argument_list|)
expr_stmt|;
name|useOverflowRepeatedThreshold
operator|=
operator|(
name|overflowRepeatedThreshold
operator|>=
literal|0
operator|)
expr_stmt|;
comment|/*      * Create our vectorized copy row and deserialize row helper objects.      */
if|if
condition|(
name|smallTableMapping
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|smallTableVectorDeserializeRow
operator|=
operator|new
name|VectorDeserializeRow
argument_list|(
operator|new
name|LazyBinaryDeserializeRead
argument_list|(
name|VectorizedBatchUtil
operator|.
name|primitiveTypeInfosFromTypeNames
argument_list|(
name|smallTableMapping
operator|.
name|getTypeNames
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|smallTableVectorDeserializeRow
operator|.
name|init
argument_list|(
name|smallTableMapping
operator|.
name|getOutputColumns
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bigTableRetainedMapping
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|bigTableRetainedVectorCopy
operator|=
operator|new
name|VectorCopyRow
argument_list|()
expr_stmt|;
name|bigTableRetainedVectorCopy
operator|.
name|init
argument_list|(
name|bigTableRetainedMapping
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bigTableOuterKeyMapping
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|bigTableVectorCopyOuterKeys
operator|=
operator|new
name|VectorCopyRow
argument_list|()
expr_stmt|;
name|bigTableVectorCopyOuterKeys
operator|.
name|init
argument_list|(
name|bigTableOuterKeyMapping
argument_list|)
expr_stmt|;
block|}
comment|/*      * Setup the overflow batch.      */
name|overflowBatch
operator|=
name|setupOverflowBatch
argument_list|()
expr_stmt|;
name|needCommonSetup
operator|=
literal|true
expr_stmt|;
name|needHashTableSetup
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|int
index|[]
name|currentScratchColumns
init|=
name|vOutContext
operator|.
name|currentScratchColumns
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator initializeOp currentScratchColumns "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|currentScratchColumns
argument_list|)
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|structOutputObjectInspector
init|=
operator|(
name|StructObjectInspector
operator|)
name|outputObjInspector
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|structOutputObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StructField
name|field
range|:
name|fields
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"VectorMapJoinInnerBigOnlyCommonOperator initializeOp "
operator|+
name|i
operator|+
literal|" field "
operator|+
name|field
operator|.
name|getFieldName
argument_list|()
operator|+
literal|" type "
operator|+
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Pair
argument_list|<
name|MapJoinTableContainer
index|[]
argument_list|,
name|MapJoinTableContainerSerDe
index|[]
argument_list|>
name|loadHashTable
parameter_list|(
name|ExecMapperContext
name|mapContext
parameter_list|,
name|MapredContext
name|mrContext
parameter_list|)
throws|throws
name|HiveException
block|{
name|Pair
argument_list|<
name|MapJoinTableContainer
index|[]
argument_list|,
name|MapJoinTableContainerSerDe
index|[]
argument_list|>
name|pair
decl_stmt|;
name|VectorMapJoinDesc
name|vectorDesc
init|=
name|conf
operator|.
name|getVectorDesc
argument_list|()
decl_stmt|;
name|HashTableImplementationType
name|hashTableImplementationType
init|=
name|vectorDesc
operator|.
name|hashTableImplementationType
argument_list|()
decl_stmt|;
name|HashTableLoader
name|hashTableLoader
decl_stmt|;
switch|switch
condition|(
name|vectorDesc
operator|.
name|hashTableImplementationType
argument_list|()
condition|)
block|{
case|case
name|OPTIMIZED
case|:
block|{
comment|// Using Tez's HashTableLoader, create either a MapJoinBytesTableContainer or
comment|// HybridHashTableContainer.
name|pair
operator|=
name|super
operator|.
name|loadHashTable
argument_list|(
name|mapContext
argument_list|,
name|mrContext
argument_list|)
expr_stmt|;
comment|// Create our vector map join optimized hash table variation *above* the
comment|// map join table container.
name|MapJoinTableContainer
index|[]
name|mapJoinTableContainers
init|=
name|pair
operator|.
name|getLeft
argument_list|()
decl_stmt|;
name|vectorMapJoinHashTable
operator|=
name|VectorMapJoinOptimizedCreateHashTable
operator|.
name|createHashTable
argument_list|(
name|conf
argument_list|,
name|mapJoinTableContainers
index|[
name|posSingleVectorMapJoinSmallTable
index|]
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FAST
case|:
block|{
comment|// Use our VectorMapJoinFastHashTableLoader to create a VectorMapJoinTableContainer.
name|pair
operator|=
name|super
operator|.
name|loadHashTable
argument_list|(
name|mapContext
argument_list|,
name|mrContext
argument_list|)
expr_stmt|;
comment|// Get our vector map join fast hash table variation from the
comment|// vector map join table container.
name|MapJoinTableContainer
index|[]
name|mapJoinTableContainers
init|=
name|pair
operator|.
name|getLeft
argument_list|()
decl_stmt|;
name|VectorMapJoinTableContainer
name|vectorMapJoinTableContainer
init|=
operator|(
name|VectorMapJoinTableContainer
operator|)
name|mapJoinTableContainers
index|[
name|posSingleVectorMapJoinSmallTable
index|]
decl_stmt|;
name|vectorMapJoinHashTable
operator|=
name|vectorMapJoinTableContainer
operator|.
name|vectorMapJoinHashTable
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown vector map join hash table implementation type "
operator|+
name|hashTableImplementationType
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|pair
return|;
block|}
comment|/*    * Setup our 2nd batch with the same "column schema" as the big table batch that can be used to    * build join output results in.    */
specifier|protected
name|VectorizedRowBatch
name|setupOverflowBatch
parameter_list|()
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|overflowBatch
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|scratchColumnTypeMap
init|=
name|vOutContext
operator|.
name|getScratchColumnTypeMap
argument_list|()
decl_stmt|;
name|int
name|maxColumn
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputProjection
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|outputColumn
init|=
name|outputProjection
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|maxColumn
operator|<
name|outputColumn
condition|)
block|{
name|maxColumn
operator|=
name|outputColumn
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|outputColumn
range|:
name|scratchColumnTypeMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|maxColumn
operator|<
name|outputColumn
condition|)
block|{
name|maxColumn
operator|=
name|outputColumn
expr_stmt|;
block|}
block|}
name|overflowBatch
operator|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|maxColumn
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// First, just allocate just the projection columns we will be using.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputProjection
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|outputColumn
init|=
name|outputProjection
index|[
name|i
index|]
decl_stmt|;
name|String
name|typeName
init|=
name|outputTypeNames
index|[
name|i
index|]
decl_stmt|;
name|allocateOverflowBatchColumnVector
argument_list|(
name|overflowBatch
argument_list|,
name|outputColumn
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
block|}
comment|// Now, add any scratch columns needed for children operators.
for|for
control|(
name|int
name|outputColumn
range|:
name|scratchColumnTypeMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|typeName
init|=
name|scratchColumnTypeMap
operator|.
name|get
argument_list|(
name|outputColumn
argument_list|)
decl_stmt|;
name|allocateOverflowBatchColumnVector
argument_list|(
name|overflowBatch
argument_list|,
name|outputColumn
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
block|}
name|overflowBatch
operator|.
name|projectedColumns
operator|=
name|outputProjection
expr_stmt|;
name|overflowBatch
operator|.
name|projectionSize
operator|=
name|outputProjection
operator|.
name|length
expr_stmt|;
name|overflowBatch
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|overflowBatch
return|;
block|}
comment|/*    * Allocate overflow batch columns by hand.    */
specifier|private
name|void
name|allocateOverflowBatchColumnVector
parameter_list|(
name|VectorizedRowBatch
name|overflowBatch
parameter_list|,
name|int
name|outputColumn
parameter_list|,
name|String
name|typeName
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|overflowBatch
operator|.
name|cols
index|[
name|outputColumn
index|]
operator|==
literal|null
condition|)
block|{
name|typeName
operator|=
name|VectorizationContext
operator|.
name|mapTypeNameSynonyms
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|String
name|columnVectorTypeName
decl_stmt|;
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|Type
name|columnVectorType
init|=
name|VectorizationContext
operator|.
name|getColumnVectorTypeFromTypeInfo
argument_list|(
name|typeInfo
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|columnVectorType
condition|)
block|{
case|case
name|LONG
case|:
name|columnVectorTypeName
operator|=
literal|"long"
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|columnVectorTypeName
operator|=
literal|"double"
expr_stmt|;
break|break;
case|case
name|BYTES
case|:
name|columnVectorTypeName
operator|=
literal|"string"
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|columnVectorTypeName
operator|=
name|typeName
expr_stmt|;
comment|// Keep precision and scale.
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Unexpected column vector type "
operator|+
name|columnVectorType
argument_list|)
throw|;
block|}
name|overflowBatch
operator|.
name|cols
index|[
name|outputColumn
index|]
operator|=
name|VectorizedRowBatchCtx
operator|.
name|allocateColumnVector
argument_list|(
name|columnVectorTypeName
argument_list|,
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|taskName
operator|+
literal|", "
operator|+
name|getOperatorId
argument_list|()
operator|+
literal|" VectorMapJoinCommonOperator initializeOp overflowBatch outputColumn "
operator|+
name|outputColumn
operator|+
literal|" class "
operator|+
name|overflowBatch
operator|.
name|cols
index|[
name|outputColumn
index|]
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Common one time setup by native vectorized map join operator's processOp.    */
specifier|protected
name|void
name|commonSetup
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"VectorMapJoinInnerCommonOperator commonSetup begin..."
argument_list|)
expr_stmt|;
name|displayBatchColumns
argument_list|(
name|batch
argument_list|,
literal|"batch"
argument_list|)
expr_stmt|;
name|displayBatchColumns
argument_list|(
name|overflowBatch
argument_list|,
literal|"overflowBatch"
argument_list|)
expr_stmt|;
block|}
comment|// Make sure big table BytesColumnVectors have room for string values in the overflow batch...
for|for
control|(
name|int
name|column
range|:
name|bigTableByteColumnVectorColumns
control|)
block|{
name|BytesColumnVector
name|bytesColumnVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|overflowBatch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|bytesColumnVector
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
block|}
comment|// Make sure small table BytesColumnVectors have room for string values in the big table and
comment|// overflow batchs...
for|for
control|(
name|int
name|column
range|:
name|smallTableByteColumnVectorColumns
control|)
block|{
name|BytesColumnVector
name|bytesColumnVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
name|column
index|]
decl_stmt|;
name|bytesColumnVector
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
name|bytesColumnVector
operator|=
operator|(
name|BytesColumnVector
operator|)
name|overflowBatch
operator|.
name|cols
index|[
name|column
index|]
expr_stmt|;
name|bytesColumnVector
operator|.
name|initBuffer
argument_list|()
expr_stmt|;
block|}
comment|// Setup a scratch batch that will be used to play back big table rows that were spilled
comment|// to disk for the Hybrid Grace hash partitioning.
name|spillReplayBatch
operator|=
name|VectorizedBatchUtil
operator|.
name|makeLike
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|displayBatchColumns
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|String
name|batchName
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"commonSetup "
operator|+
name|batchName
operator|+
literal|" column count "
operator|+
name|batch
operator|.
name|numCols
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|batch
operator|.
name|numCols
condition|;
name|column
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"commonSetup "
operator|+
name|batchName
operator|+
literal|"     column "
operator|+
name|column
operator|+
literal|" type "
operator|+
operator|(
name|batch
operator|.
name|cols
index|[
name|column
index|]
operator|==
literal|null
condition|?
literal|"NULL"
else|:
name|batch
operator|.
name|cols
index|[
name|column
index|]
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|MAPJOIN
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorizationContext
name|getOuputVectorizationContext
parameter_list|()
block|{
return|return
name|vOutContext
return|;
block|}
block|}
end_class

end_unit

