begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|workloadmanagement
operator|.
name|pool
operator|.
name|create
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|WMPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_comment
comment|/**  * Operation process of creating a workload management pool.  */
end_comment

begin_class
specifier|public
class|class
name|CreateWMPoolOperation
extends|extends
name|DDLOperation
argument_list|<
name|CreateWMPoolDesc
argument_list|>
block|{
specifier|public
name|CreateWMPoolOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|CreateWMPoolDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
throws|,
name|IOException
block|{
name|WMPool
name|pool
init|=
operator|new
name|WMPool
argument_list|(
name|desc
operator|.
name|getResourcePlanName
argument_list|()
argument_list|,
name|desc
operator|.
name|getPoolPath
argument_list|()
argument_list|)
decl_stmt|;
name|pool
operator|.
name|setAllocFraction
argument_list|(
name|desc
operator|.
name|getAllocFraction
argument_list|()
argument_list|)
expr_stmt|;
name|pool
operator|.
name|setQueryParallelism
argument_list|(
name|desc
operator|.
name|getQueryParallelism
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|.
name|getSchedulingPolicy
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|MetaStoreUtils
operator|.
name|isValidSchedulingPolicy
argument_list|(
name|desc
operator|.
name|getSchedulingPolicy
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Invalid scheduling policy "
operator|+
name|desc
operator|.
name|getSchedulingPolicy
argument_list|()
argument_list|)
throw|;
block|}
name|pool
operator|.
name|setSchedulingPolicy
argument_list|(
name|desc
operator|.
name|getSchedulingPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|createWMPool
argument_list|(
name|pool
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

