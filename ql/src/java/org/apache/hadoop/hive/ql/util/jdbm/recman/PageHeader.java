begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * JDBM LICENSE v1.00  *  * Redistribution and use of this software and associated documentation  * ("Software"), with or without modification, are permitted provided  * that the following conditions are met:  *  * 1. Redistributions of source code must retain copyright  *    statements and notices.  Redistributions must also contain a  *    copy of this document.  *  * 2. Redistributions in binary form must reproduce the  *    above copyright notice, this list of conditions and the  *    following disclaimer in the documentation and/or other  *    materials provided with the distribution.  *  * 3. The name "JDBM" must not be used to endorse or promote  *    products derived from this Software without prior written  *    permission of Cees de Groot.  For written permission,  *    please contact cg@cdegroot.com.  *  * 4. Products derived from this Software may not be called "JDBM"  *    nor may "JDBM" appear in their names without prior written  *    permission of Cees de Groot.   *  * 5. Due credit should be given to the JDBM Project  *    (http://jdbm.sourceforge.net/).  *  * THIS SOFTWARE IS PROVIDED BY THE JDBM PROJECT AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL  * CEES DE GROOT OR ANY CONTRIBUTORS BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  *  * Copyright 2000 (C) Cees de Groot. All Rights Reserved.  * Contributions are Copyright (C) 2000 by their associated contributors.  *  * $Id: PageHeader.java,v 1.2 2003/09/21 15:47:01 boisvert Exp $  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|jdbm
operator|.
name|recman
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This class represents a page header. It is the common superclass for all  * different page views.  */
end_comment

begin_class
specifier|public
class|class
name|PageHeader
implements|implements
name|BlockView
block|{
comment|// offsets
specifier|private
specifier|static
specifier|final
name|short
name|O_MAGIC
init|=
literal|0
decl_stmt|;
comment|// short magic
specifier|private
specifier|static
specifier|final
name|short
name|O_NEXT
init|=
name|Magic
operator|.
name|SZ_SHORT
decl_stmt|;
comment|// long next
specifier|private
specifier|static
specifier|final
name|short
name|O_PREV
init|=
name|O_NEXT
operator|+
name|Magic
operator|.
name|SZ_LONG
decl_stmt|;
comment|// long prev
specifier|protected
specifier|static
specifier|final
name|short
name|SIZE
init|=
name|O_PREV
operator|+
name|Magic
operator|.
name|SZ_LONG
decl_stmt|;
comment|// my block
specifier|protected
name|BlockIo
name|block
decl_stmt|;
comment|/**    * Constructs a PageHeader object from a block    *     * @param block    *          The block that contains the file header    * @throws IOException    *           if the block is too short to keep the file header.    */
specifier|protected
name|PageHeader
parameter_list|(
name|BlockIo
name|block
parameter_list|)
block|{
name|initialize
argument_list|(
name|block
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|magicOk
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"CRITICAL: page header magic for block "
operator|+
name|block
operator|.
name|getBlockId
argument_list|()
operator|+
literal|" not OK "
operator|+
name|getMagic
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Constructs a new PageHeader of the indicated type. Used for newly created    * pages.    */
name|PageHeader
parameter_list|(
name|BlockIo
name|block
parameter_list|,
name|short
name|type
parameter_list|)
block|{
name|initialize
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
comment|/**    * Factory method to create or return a page header for the indicated block.    */
specifier|static
name|PageHeader
name|getView
parameter_list|(
name|BlockIo
name|block
parameter_list|)
block|{
name|BlockView
name|view
init|=
name|block
operator|.
name|getView
argument_list|()
decl_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
operator|&&
name|view
operator|instanceof
name|PageHeader
condition|)
block|{
return|return
operator|(
name|PageHeader
operator|)
name|view
return|;
block|}
else|else
block|{
return|return
operator|new
name|PageHeader
argument_list|(
name|block
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|initialize
parameter_list|(
name|BlockIo
name|block
parameter_list|)
block|{
name|this
operator|.
name|block
operator|=
name|block
expr_stmt|;
name|block
operator|.
name|setView
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns true if the magic corresponds with the fileHeader magic.    */
specifier|private
name|boolean
name|magicOk
parameter_list|()
block|{
name|int
name|magic
init|=
name|getMagic
argument_list|()
decl_stmt|;
return|return
name|magic
operator|>=
name|Magic
operator|.
name|BLOCK
operator|&&
name|magic
operator|<=
operator|(
name|Magic
operator|.
name|BLOCK
operator|+
name|Magic
operator|.
name|FREEPHYSIDS_PAGE
operator|)
return|;
block|}
comment|/**    * For paranoia mode    */
specifier|protected
name|void
name|paranoiaMagicOk
parameter_list|()
block|{
if|if
condition|(
operator|!
name|magicOk
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"CRITICAL: page header magic not OK "
operator|+
name|getMagic
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/** Returns the magic code */
name|short
name|getMagic
parameter_list|()
block|{
return|return
name|block
operator|.
name|readShort
argument_list|(
name|O_MAGIC
argument_list|)
return|;
block|}
comment|/** Returns the next block. */
name|long
name|getNext
parameter_list|()
block|{
name|paranoiaMagicOk
argument_list|()
expr_stmt|;
return|return
name|block
operator|.
name|readLong
argument_list|(
name|O_NEXT
argument_list|)
return|;
block|}
comment|/** Sets the next block. */
name|void
name|setNext
parameter_list|(
name|long
name|next
parameter_list|)
block|{
name|paranoiaMagicOk
argument_list|()
expr_stmt|;
name|block
operator|.
name|writeLong
argument_list|(
name|O_NEXT
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
comment|/** Returns the previous block. */
name|long
name|getPrev
parameter_list|()
block|{
name|paranoiaMagicOk
argument_list|()
expr_stmt|;
return|return
name|block
operator|.
name|readLong
argument_list|(
name|O_PREV
argument_list|)
return|;
block|}
comment|/** Sets the previous block. */
name|void
name|setPrev
parameter_list|(
name|long
name|prev
parameter_list|)
block|{
name|paranoiaMagicOk
argument_list|()
expr_stmt|;
name|block
operator|.
name|writeLong
argument_list|(
name|O_PREV
argument_list|,
name|prev
argument_list|)
expr_stmt|;
block|}
comment|/** Sets the type of the page header */
name|void
name|setType
parameter_list|(
name|short
name|type
parameter_list|)
block|{
name|block
operator|.
name|writeShort
argument_list|(
name|O_MAGIC
argument_list|,
call|(
name|short
call|)
argument_list|(
name|Magic
operator|.
name|BLOCK
operator|+
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

