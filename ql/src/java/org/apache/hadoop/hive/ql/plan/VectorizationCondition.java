begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|VectorizationCondition
block|{
specifier|private
specifier|final
name|boolean
name|flag
decl_stmt|;
specifier|private
specifier|final
name|String
name|conditionName
decl_stmt|;
specifier|public
name|VectorizationCondition
parameter_list|(
name|boolean
name|flag
parameter_list|,
name|String
name|conditionName
parameter_list|)
block|{
name|this
operator|.
name|flag
operator|=
name|flag
expr_stmt|;
name|this
operator|.
name|conditionName
operator|=
name|conditionName
expr_stmt|;
block|}
specifier|public
name|boolean
name|getFlag
parameter_list|()
block|{
return|return
name|flag
return|;
block|}
specifier|public
name|String
name|getConditionName
parameter_list|()
block|{
return|return
name|conditionName
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getConditionsMet
parameter_list|(
name|VectorizationCondition
index|[]
name|conditions
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|metList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|VectorizationCondition
name|condition
range|:
name|conditions
control|)
block|{
if|if
condition|(
name|condition
operator|.
name|getFlag
argument_list|()
condition|)
block|{
name|metList
operator|.
name|add
argument_list|(
name|condition
operator|.
name|getConditionName
argument_list|()
operator|+
literal|" IS true"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|metList
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getConditionsNotMet
parameter_list|(
name|VectorizationCondition
index|[]
name|conditions
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|notMetList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|VectorizationCondition
name|condition
range|:
name|conditions
control|)
block|{
if|if
condition|(
operator|!
name|condition
operator|.
name|getFlag
argument_list|()
condition|)
block|{
name|notMetList
operator|.
name|add
argument_list|(
name|condition
operator|.
name|getConditionName
argument_list|()
operator|+
literal|" IS false"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|notMetList
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|addBooleans
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|conditions
parameter_list|,
name|boolean
name|flag
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|conditions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|condition
range|:
name|conditions
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|condition
operator|+
literal|" IS "
operator|+
name|flag
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// Helper method.
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getConditionsSupported
parameter_list|(
name|boolean
name|isSupported
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Supported IS "
operator|+
name|isSupported
argument_list|)
return|;
block|}
block|}
end_class

end_unit

