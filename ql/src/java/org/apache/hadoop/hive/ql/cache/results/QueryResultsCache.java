begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|cache
operator|.
name|results
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsConstant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|Entity
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|SessionHiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|events
operator|.
name|EventConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ColumnAccessInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|TableAccessInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FetchWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|TxnIdUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A class to handle management and lookup of cached Hive query results.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|QueryResultsCache
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueryResultsCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
class|class
name|LookupInfo
block|{
specifier|private
name|String
name|queryText
decl_stmt|;
specifier|private
name|Supplier
argument_list|<
name|ValidTxnWriteIdList
argument_list|>
name|txnWriteIdListProvider
decl_stmt|;
specifier|public
name|LookupInfo
parameter_list|(
name|String
name|queryText
parameter_list|,
name|Supplier
argument_list|<
name|ValidTxnWriteIdList
argument_list|>
name|txnWriteIdListProvider
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|queryText
operator|=
name|queryText
expr_stmt|;
name|this
operator|.
name|txnWriteIdListProvider
operator|=
name|txnWriteIdListProvider
expr_stmt|;
block|}
specifier|public
name|String
name|getQueryText
parameter_list|()
block|{
return|return
name|queryText
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|QueryInfo
block|{
specifier|private
name|long
name|queryTime
decl_stmt|;
specifier|private
name|LookupInfo
name|lookupInfo
decl_stmt|;
specifier|private
name|HiveOperation
name|hiveOperation
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|resultSchema
decl_stmt|;
specifier|private
name|TableAccessInfo
name|tableAccessInfo
decl_stmt|;
specifier|private
name|ColumnAccessInfo
name|columnAccessInfo
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
decl_stmt|;
specifier|public
name|QueryInfo
parameter_list|(
name|long
name|queryTime
parameter_list|,
name|LookupInfo
name|lookupInfo
parameter_list|,
name|HiveOperation
name|hiveOperation
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|resultSchema
parameter_list|,
name|TableAccessInfo
name|tableAccessInfo
parameter_list|,
name|ColumnAccessInfo
name|columnAccessInfo
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|)
block|{
name|this
operator|.
name|queryTime
operator|=
name|queryTime
expr_stmt|;
name|this
operator|.
name|lookupInfo
operator|=
name|lookupInfo
expr_stmt|;
name|this
operator|.
name|hiveOperation
operator|=
name|hiveOperation
expr_stmt|;
name|this
operator|.
name|resultSchema
operator|=
name|resultSchema
expr_stmt|;
name|this
operator|.
name|tableAccessInfo
operator|=
name|tableAccessInfo
expr_stmt|;
name|this
operator|.
name|columnAccessInfo
operator|=
name|columnAccessInfo
expr_stmt|;
name|this
operator|.
name|inputs
operator|=
name|inputs
expr_stmt|;
block|}
specifier|public
name|LookupInfo
name|getLookupInfo
parameter_list|()
block|{
return|return
name|lookupInfo
return|;
block|}
specifier|public
name|void
name|setLookupInfo
parameter_list|(
name|LookupInfo
name|lookupInfo
parameter_list|)
block|{
name|this
operator|.
name|lookupInfo
operator|=
name|lookupInfo
expr_stmt|;
block|}
specifier|public
name|HiveOperation
name|getHiveOperation
parameter_list|()
block|{
return|return
name|hiveOperation
return|;
block|}
specifier|public
name|void
name|setHiveOperation
parameter_list|(
name|HiveOperation
name|hiveOperation
parameter_list|)
block|{
name|this
operator|.
name|hiveOperation
operator|=
name|hiveOperation
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getResultSchema
parameter_list|()
block|{
return|return
name|resultSchema
return|;
block|}
specifier|public
name|void
name|setResultSchema
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|resultSchema
parameter_list|)
block|{
name|this
operator|.
name|resultSchema
operator|=
name|resultSchema
expr_stmt|;
block|}
specifier|public
name|TableAccessInfo
name|getTableAccessInfo
parameter_list|()
block|{
return|return
name|tableAccessInfo
return|;
block|}
specifier|public
name|void
name|setTableAccessInfo
parameter_list|(
name|TableAccessInfo
name|tableAccessInfo
parameter_list|)
block|{
name|this
operator|.
name|tableAccessInfo
operator|=
name|tableAccessInfo
expr_stmt|;
block|}
specifier|public
name|ColumnAccessInfo
name|getColumnAccessInfo
parameter_list|()
block|{
return|return
name|columnAccessInfo
return|;
block|}
specifier|public
name|void
name|setColumnAccessInfo
parameter_list|(
name|ColumnAccessInfo
name|columnAccessInfo
parameter_list|)
block|{
name|this
operator|.
name|columnAccessInfo
operator|=
name|columnAccessInfo
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|getInputs
parameter_list|()
block|{
return|return
name|inputs
return|;
block|}
specifier|public
name|void
name|setInputs
parameter_list|(
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|)
block|{
name|this
operator|.
name|inputs
operator|=
name|inputs
expr_stmt|;
block|}
specifier|public
name|long
name|getQueryTime
parameter_list|()
block|{
return|return
name|queryTime
return|;
block|}
specifier|public
name|void
name|setQueryTime
parameter_list|(
name|long
name|queryTime
parameter_list|)
block|{
name|this
operator|.
name|queryTime
operator|=
name|queryTime
expr_stmt|;
block|}
block|}
specifier|public
enum|enum
name|CacheEntryStatus
block|{
name|VALID
block|,
name|INVALID
block|,
name|PENDING
block|}
specifier|public
specifier|static
class|class
name|CacheEntry
block|{
specifier|private
name|QueryInfo
name|queryInfo
decl_stmt|;
specifier|private
name|FetchWork
name|fetchWork
decl_stmt|;
specifier|private
name|Path
name|cachedResultsPath
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|FileStatus
argument_list|>
name|cachedResultPaths
decl_stmt|;
comment|// Cache administration
specifier|private
name|long
name|size
decl_stmt|;
specifier|private
name|AtomicInteger
name|readers
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|invalidationFuture
init|=
literal|null
decl_stmt|;
specifier|private
specifier|volatile
name|CacheEntryStatus
name|status
init|=
name|CacheEntryStatus
operator|.
name|PENDING
decl_stmt|;
specifier|private
name|ValidTxnWriteIdList
name|txnWriteIdList
decl_stmt|;
specifier|public
name|void
name|releaseReader
parameter_list|()
block|{
name|int
name|readerCount
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|readerCount
operator|=
name|readers
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"releaseReader: entry: {}, readerCount: {}"
argument_list|,
name|this
argument_list|,
name|readerCount
argument_list|)
expr_stmt|;
name|cleanupIfNeeded
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"CacheEntry#%s query: [ %s ], status: %s, location: %s, size: %d"
argument_list|,
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
argument_list|,
name|getQueryInfo
argument_list|()
operator|.
name|getLookupInfo
argument_list|()
operator|.
name|getQueryText
argument_list|()
argument_list|,
name|status
argument_list|,
name|cachedResultsPath
argument_list|,
name|size
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|addReader
parameter_list|()
block|{
name|boolean
name|added
init|=
literal|false
decl_stmt|;
name|int
name|readerCount
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|status
operator|==
name|CacheEntryStatus
operator|.
name|VALID
condition|)
block|{
name|readerCount
operator|=
name|readers
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|added
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"addReader: entry: {}, readerCount: {}, added: {}"
argument_list|,
name|this
argument_list|,
name|readerCount
argument_list|,
name|added
argument_list|)
expr_stmt|;
return|return
name|added
return|;
block|}
specifier|private
name|int
name|numReaders
parameter_list|()
block|{
return|return
name|readers
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
name|void
name|invalidate
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Invalidating cache entry: {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|CacheEntryStatus
name|prevStatus
init|=
name|setStatus
argument_list|(
name|CacheEntryStatus
operator|.
name|INVALID
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevStatus
operator|==
name|CacheEntryStatus
operator|.
name|VALID
condition|)
block|{
if|if
condition|(
name|invalidationFuture
operator|!=
literal|null
condition|)
block|{
comment|// The cache entry has just been invalidated, no need for the scheduled invalidation.
name|invalidationFuture
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|cleanupIfNeeded
argument_list|()
expr_stmt|;
name|decrementMetric
argument_list|(
name|MetricsConstant
operator|.
name|QC_VALID_ENTRIES
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prevStatus
operator|==
name|CacheEntryStatus
operator|.
name|PENDING
condition|)
block|{
comment|// Need to notify any queries waiting on the change from pending status.
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|decrementMetric
argument_list|(
name|MetricsConstant
operator|.
name|QC_PENDING_FAILS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|CacheEntryStatus
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
specifier|private
name|CacheEntryStatus
name|setStatus
parameter_list|(
name|CacheEntryStatus
name|newStatus
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|CacheEntryStatus
name|oldStatus
init|=
name|status
decl_stmt|;
name|status
operator|=
name|newStatus
expr_stmt|;
return|return
name|oldStatus
return|;
block|}
block|}
specifier|private
name|void
name|cleanupIfNeeded
parameter_list|()
block|{
if|if
condition|(
name|status
operator|==
name|CacheEntryStatus
operator|.
name|INVALID
operator|&&
name|readers
operator|.
name|get
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|QueryResultsCache
operator|.
name|cleanupEntry
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getQueryText
parameter_list|()
block|{
return|return
name|getQueryInfo
argument_list|()
operator|.
name|getLookupInfo
argument_list|()
operator|.
name|getQueryText
argument_list|()
return|;
block|}
specifier|public
name|FetchWork
name|getFetchWork
parameter_list|()
block|{
comment|// FetchWork's sink is used to hold results, so each query needs a separate copy of FetchWork
name|FetchWork
name|fetch
init|=
operator|new
name|FetchWork
argument_list|(
name|fetchWork
operator|.
name|getTblDir
argument_list|()
argument_list|,
name|fetchWork
operator|.
name|getTblDesc
argument_list|()
argument_list|,
name|fetchWork
operator|.
name|getLimit
argument_list|()
argument_list|)
decl_stmt|;
name|fetch
operator|.
name|setCachedResult
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fetch
operator|.
name|setFilesToFetch
argument_list|(
name|this
operator|.
name|cachedResultPaths
argument_list|)
expr_stmt|;
return|return
name|fetch
return|;
block|}
specifier|public
name|QueryInfo
name|getQueryInfo
parameter_list|()
block|{
return|return
name|queryInfo
return|;
block|}
specifier|public
name|Path
name|getCachedResultsPath
parameter_list|()
block|{
return|return
name|cachedResultsPath
return|;
block|}
comment|/**      * Wait for the cache entry to go from PENDING to VALID status.      * @return true if the cache entry successfully changed to VALID status,      *         false if the status changes from PENDING to INVALID      */
specifier|public
name|boolean
name|waitForValidStatus
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting on pending cacheEntry: {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|long
name|timeout
init|=
literal|1000
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|endTime
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|VALID
case|:
name|endTime
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|incrementMetric
argument_list|(
name|MetricsConstant
operator|.
name|QC_PENDING_SUCCESS_WAIT_TIME
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|INVALID
case|:
name|endTime
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|incrementMetric
argument_list|(
name|MetricsConstant
operator|.
name|QC_PENDING_FAILS_WAIT_TIME
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
case|case
name|PENDING
case|:
comment|// Status has not changed, continue waiting.
break|break;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|wait
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|err
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|public
name|Stream
argument_list|<
name|String
argument_list|>
name|getTableNames
parameter_list|()
block|{
return|return
name|queryInfo
operator|.
name|getInputs
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|readEntity
lambda|->
name|readEntity
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|TABLE
argument_list|)
operator|.
name|map
argument_list|(
name|readEntity
lambda|->
name|readEntity
operator|.
name|getTable
argument_list|()
operator|.
name|getFullyQualifiedName
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|// Allow lookup by query string
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|CacheEntry
argument_list|>
argument_list|>
name|queryMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|CacheEntry
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// LRU. Could also implement LRU as a doubly linked list if CacheEntry keeps its node.
comment|// Use synchronized map since even read actions cause the lru to get updated.
specifier|private
specifier|final
name|Map
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
name|lru
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
argument_list|(
name|INITIAL_LRU_SIZE
argument_list|,
name|LRU_LOAD_FACTOR
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
comment|// Lookup of cache entries by table used in the query, for cache invalidation.
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|CacheEntry
argument_list|>
argument_list|>
name|tableToEntryMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|Path
name|cacheDirPath
decl_stmt|;
specifier|private
name|Path
name|zeroRowsPath
decl_stmt|;
specifier|private
name|long
name|cacheSize
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|maxCacheSize
decl_stmt|;
specifier|private
name|long
name|maxEntrySize
decl_stmt|;
specifier|private
name|long
name|maxEntryLifetime
decl_stmt|;
specifier|private
name|ReadWriteLock
name|rwLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|invalidationPollFuture
decl_stmt|;
specifier|private
name|QueryResultsCache
parameter_list|(
name|HiveConf
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|configuration
expr_stmt|;
comment|// Set up cache directory
name|Path
name|rootCacheDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_QUERY_RESULTS_CACHE_DIRECTORY
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing query results cache at {}"
argument_list|,
name|rootCacheDir
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|ensurePathIsWritable
argument_list|(
name|rootCacheDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|String
name|currentCacheDirName
init|=
literal|"results-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|cacheDirPath
operator|=
operator|new
name|Path
argument_list|(
name|rootCacheDir
argument_list|,
name|currentCacheDirName
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cacheDirPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FsPermission
name|fsPermission
init|=
operator|new
name|FsPermission
argument_list|(
literal|"700"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|cacheDirPath
argument_list|,
name|fsPermission
argument_list|)
expr_stmt|;
comment|// Create non-existent path for 0-row results
name|zeroRowsPath
operator|=
operator|new
name|Path
argument_list|(
name|cacheDirPath
argument_list|,
literal|"dummy_zero_rows"
argument_list|)
expr_stmt|;
comment|// Results cache directory should be cleaned up at process termination.
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|cacheDirPath
argument_list|)
expr_stmt|;
name|maxCacheSize
operator|=
name|conf
operator|.
name|getLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_QUERY_RESULTS_CACHE_MAX_SIZE
argument_list|)
expr_stmt|;
name|maxEntrySize
operator|=
name|conf
operator|.
name|getLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_QUERY_RESULTS_CACHE_MAX_ENTRY_SIZE
argument_list|)
expr_stmt|;
name|maxEntryLifetime
operator|=
name|conf
operator|.
name|getTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_QUERY_RESULTS_CACHE_MAX_ENTRY_LIFETIME
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Query results cache: cacheDirectory {}, maxCacheSize {}, maxEntrySize {}, maxEntryLifetime {}"
argument_list|,
name|cacheDirPath
argument_list|,
name|maxCacheSize
argument_list|,
name|maxEntrySize
argument_list|,
name|maxEntryLifetime
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|AtomicBoolean
name|inited
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|QueryResultsCache
name|instance
decl_stmt|;
specifier|public
specifier|static
name|void
name|initialize
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|inited
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
try|try
block|{
name|instance
operator|=
operator|new
name|QueryResultsCache
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Metrics
name|metrics
init|=
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|registerMetrics
argument_list|(
name|metrics
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|inited
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
throw|throw
name|err
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|QueryResultsCache
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
specifier|public
name|Path
name|getCacheDirPath
parameter_list|()
block|{
return|return
name|cacheDirPath
return|;
block|}
comment|/**    * Check if the cache contains an entry for the requested LookupInfo.    * @param request    * @return  The cached result if there is a match in the cache, or null if no match is found.    */
specifier|public
name|CacheEntry
name|lookup
parameter_list|(
name|LookupInfo
name|request
parameter_list|)
block|{
name|CacheEntry
name|result
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"QueryResultsCache lookup for query: {}"
argument_list|,
name|request
operator|.
name|queryText
argument_list|)
expr_stmt|;
name|boolean
name|foundPending
init|=
literal|false
decl_stmt|;
comment|// Cannot entries while we currently hold read lock, so keep track of them to delete later.
name|Set
argument_list|<
name|CacheEntry
argument_list|>
name|entriesToRemove
init|=
operator|new
name|HashSet
argument_list|<
name|CacheEntry
argument_list|>
argument_list|()
decl_stmt|;
name|Lock
name|readLock
init|=
name|rwLock
operator|.
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Note: ReentrantReadWriteLock deos not allow upgrading a read lock to a write lock.
comment|// Care must be taken while under read lock, to make sure we do not perform any actions
comment|// which attempt to take a write lock.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|CacheEntry
argument_list|>
name|candidates
init|=
name|queryMap
operator|.
name|get
argument_list|(
name|request
operator|.
name|queryText
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidates
operator|!=
literal|null
condition|)
block|{
name|CacheEntry
name|pendingResult
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CacheEntry
name|candidate
range|:
name|candidates
control|)
block|{
if|if
condition|(
name|entryMatches
argument_list|(
name|request
argument_list|,
name|candidate
argument_list|,
name|entriesToRemove
argument_list|)
condition|)
block|{
name|CacheEntryStatus
name|entryStatus
init|=
name|candidate
operator|.
name|status
decl_stmt|;
if|if
condition|(
name|entryStatus
operator|==
name|CacheEntryStatus
operator|.
name|VALID
condition|)
block|{
name|result
operator|=
name|candidate
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|entryStatus
operator|==
name|CacheEntryStatus
operator|.
name|PENDING
operator|&&
name|pendingResult
operator|==
literal|null
condition|)
block|{
name|pendingResult
operator|=
name|candidate
expr_stmt|;
block|}
block|}
block|}
comment|// Try to find valid entry, but settle for pending entry if that is all we have.
if|if
condition|(
name|result
operator|==
literal|null
operator|&&
name|pendingResult
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|pendingResult
expr_stmt|;
name|foundPending
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|lru
operator|.
name|get
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Update LRU
block|}
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Now that we have exited read lock it is safe to remove any invalid entries.
for|for
control|(
name|CacheEntry
name|invalidEntry
range|:
name|entriesToRemove
control|)
block|{
name|removeEntry
argument_list|(
name|invalidEntry
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"QueryResultsCache lookup result: {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|incrementMetric
argument_list|(
name|MetricsConstant
operator|.
name|QC_LOOKUPS
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|foundPending
condition|)
block|{
name|incrementMetric
argument_list|(
name|MetricsConstant
operator|.
name|QC_PENDING_HITS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|incrementMetric
argument_list|(
name|MetricsConstant
operator|.
name|QC_VALID_HITS
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Add an entry to the cache.    * The new entry will be in PENDING state and not usable setEntryValid() is called on the entry.    * @param queryInfo    * @return    */
specifier|public
name|CacheEntry
name|addToCache
parameter_list|(
name|QueryInfo
name|queryInfo
parameter_list|,
name|ValidTxnWriteIdList
name|txnWriteIdList
parameter_list|)
block|{
comment|// Create placeholder entry with PENDING state.
name|String
name|queryText
init|=
name|queryInfo
operator|.
name|getLookupInfo
argument_list|()
operator|.
name|getQueryText
argument_list|()
decl_stmt|;
name|CacheEntry
name|addedEntry
init|=
operator|new
name|CacheEntry
argument_list|()
decl_stmt|;
name|addedEntry
operator|.
name|queryInfo
operator|=
name|queryInfo
expr_stmt|;
name|addedEntry
operator|.
name|txnWriteIdList
operator|=
name|txnWriteIdList
expr_stmt|;
name|Lock
name|writeLock
init|=
name|rwLock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding placeholder cache entry for query '{}'"
argument_list|,
name|queryText
argument_list|)
expr_stmt|;
comment|// Add the entry to the cache structures while under write lock.
name|addToEntryMap
argument_list|(
name|queryMap
argument_list|,
name|queryText
argument_list|,
name|addedEntry
argument_list|)
expr_stmt|;
name|lru
operator|.
name|put
argument_list|(
name|addedEntry
argument_list|,
name|addedEntry
argument_list|)
expr_stmt|;
comment|// Index of entries by table usage.
name|addedEntry
operator|.
name|getTableNames
argument_list|()
operator|.
name|forEach
argument_list|(
name|tableName
lambda|->
name|addToEntryMap
argument_list|(
name|tableToEntryMap
argument_list|,
name|tableName
argument_list|,
name|addedEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|addedEntry
return|;
block|}
comment|/**    * Updates a pending cache entry with a FetchWork result from a finished query.    * If successful the cache entry will be set to valid status and be usable for cached queries.    * Important: Adding the entry to the cache will increment the reader count for the cache entry.    * CacheEntry.releaseReader() should be called when the caller is done with the cache entry.    * @param cacheEntry    * @param fetchWork    * @return    */
specifier|public
name|boolean
name|setEntryValid
parameter_list|(
name|CacheEntry
name|cacheEntry
parameter_list|,
name|FetchWork
name|fetchWork
parameter_list|)
block|{
name|Path
name|queryResultsPath
init|=
literal|null
decl_stmt|;
name|Path
name|cachedResultsPath
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// if we are here file sink op should have created files to fetch from
assert|assert
operator|(
name|fetchWork
operator|.
name|getFilesToFetch
argument_list|()
operator|!=
literal|null
operator|)
assert|;
name|boolean
name|requiresCaching
init|=
literal|true
decl_stmt|;
name|queryResultsPath
operator|=
name|fetchWork
operator|.
name|getTblDir
argument_list|()
expr_stmt|;
name|FileSystem
name|resultsFs
init|=
name|queryResultsPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|resultSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|fs
range|:
name|fetchWork
operator|.
name|getFilesToFetch
argument_list|()
control|)
block|{
if|if
condition|(
name|resultsFs
operator|.
name|exists
argument_list|(
name|fs
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|resultSize
operator|+=
name|fs
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// No actual result directory, no need to cache anything.
name|requiresCaching
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|shouldEntryBeAdded
argument_list|(
name|cacheEntry
argument_list|,
name|resultSize
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Synchronize on the cache entry so that no one else can invalidate this entry
comment|// while we are in the process of setting it to valid.
synchronized|synchronized
init|(
name|cacheEntry
init|)
block|{
if|if
condition|(
name|cacheEntry
operator|.
name|getStatus
argument_list|()
operator|==
name|CacheEntryStatus
operator|.
name|INVALID
condition|)
block|{
comment|// Entry either expired, or was invalidated due to table updates
return|return
literal|false
return|;
block|}
if|if
condition|(
name|requiresCaching
condition|)
block|{
name|cacheEntry
operator|.
name|cachedResultPaths
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|FileStatus
name|fs
range|:
name|fetchWork
operator|.
name|getFilesToFetch
argument_list|()
control|)
block|{
name|cacheEntry
operator|.
name|cachedResultPaths
operator|.
name|add
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Cached query result paths located at {} (size {}) for query '{}'"
argument_list|,
name|queryResultsPath
argument_list|,
name|resultSize
argument_list|,
name|cacheEntry
operator|.
name|getQueryText
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Create a new FetchWork to reference the new cache location.
name|FetchWork
name|fetchWorkForCache
init|=
operator|new
name|FetchWork
argument_list|(
name|fetchWork
operator|.
name|getTblDir
argument_list|()
argument_list|,
name|fetchWork
operator|.
name|getTblDesc
argument_list|()
argument_list|,
name|fetchWork
operator|.
name|getLimit
argument_list|()
argument_list|)
decl_stmt|;
name|fetchWorkForCache
operator|.
name|setCachedResult
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fetchWorkForCache
operator|.
name|setFilesToFetch
argument_list|(
name|fetchWork
operator|.
name|getFilesToFetch
argument_list|()
argument_list|)
expr_stmt|;
name|cacheEntry
operator|.
name|fetchWork
operator|=
name|fetchWorkForCache
expr_stmt|;
comment|//cacheEntry.cachedResultsPath = cachedResultsPath;
name|cacheEntry
operator|.
name|size
operator|=
name|resultSize
expr_stmt|;
name|this
operator|.
name|cacheSize
operator|+=
name|resultSize
expr_stmt|;
name|cacheEntry
operator|.
name|setStatus
argument_list|(
name|CacheEntryStatus
operator|.
name|VALID
argument_list|)
expr_stmt|;
comment|// Mark this entry as being in use. Caller will need to release later.
name|cacheEntry
operator|.
name|addReader
argument_list|()
expr_stmt|;
name|scheduleEntryInvalidation
argument_list|(
name|cacheEntry
argument_list|)
expr_stmt|;
comment|// Notify any queries waiting on this cacheEntry to become valid.
name|cacheEntry
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|incrementMetric
argument_list|(
name|MetricsConstant
operator|.
name|QC_VALID_ENTRIES
argument_list|)
expr_stmt|;
name|incrementMetric
argument_list|(
name|MetricsConstant
operator|.
name|QC_TOTAL_ENTRIES_ADDED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|String
name|queryText
init|=
name|cacheEntry
operator|.
name|getQueryText
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create cache entry for query results for query: "
operator|+
name|queryText
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|cacheEntry
operator|.
name|size
operator|=
literal|0
expr_stmt|;
name|cacheEntry
operator|.
name|cachedResultsPath
operator|=
literal|null
expr_stmt|;
comment|// Invalidate the entry. Rely on query cleanup to remove from lookup.
name|cacheEntry
operator|.
name|invalidate
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|Lock
name|writeLock
init|=
name|rwLock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Clearing the results cache"
argument_list|)
expr_stmt|;
name|CacheEntry
index|[]
name|allEntries
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|lru
init|)
block|{
name|allEntries
operator|=
name|lru
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
name|EMPTY_CACHEENTRY_ARRAY
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CacheEntry
name|entry
range|:
name|allEntries
control|)
block|{
try|try
block|{
name|removeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error removing cache entry "
operator|+
name|entry
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getSize
parameter_list|()
block|{
name|Lock
name|readLock
init|=
name|rwLock
operator|.
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|cacheSize
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|notifyTableChanged
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|long
name|updateTime
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table changed: {}.{}, at {}"
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|updateTime
argument_list|)
expr_stmt|;
comment|// Invalidate all cache entries using this table.
name|List
argument_list|<
name|CacheEntry
argument_list|>
name|entriesToInvalidate
init|=
literal|null
decl_stmt|;
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|key
init|=
operator|(
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"."
operator|+
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|)
decl_stmt|;
name|Set
argument_list|<
name|CacheEntry
argument_list|>
name|entriesForTable
init|=
name|tableToEntryMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entriesForTable
operator|!=
literal|null
condition|)
block|{
comment|// Possible concurrent modification issues if we try to remove cache entries while
comment|// traversing the cache structures. Save the entries to remove in a separate list.
name|entriesToInvalidate
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|entriesForTable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entriesToInvalidate
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CacheEntry
name|entry
range|:
name|entriesToInvalidate
control|)
block|{
comment|// Ignore updates that occured before this cached query was created.
if|if
condition|(
name|entry
operator|.
name|getQueryInfo
argument_list|()
operator|.
name|getQueryTime
argument_list|()
operator|<=
name|updateTime
condition|)
block|{
name|removeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|int
name|INITIAL_LRU_SIZE
init|=
literal|16
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|LRU_LOAD_FACTOR
init|=
literal|0.75f
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CacheEntry
index|[]
name|EMPTY_CACHEENTRY_ARRAY
init|=
block|{}
decl_stmt|;
comment|/**    * Check that the cache entry matches the lookupInfo.    * @param lookupInfo    * @param entry    * @param entriesToRemove Set of entries to be removed after exiting read lock section.    *                        If the entry is found to be invalid it will be added to this set.    * @return    */
specifier|private
name|boolean
name|entryMatches
parameter_list|(
name|LookupInfo
name|lookupInfo
parameter_list|,
name|CacheEntry
name|entry
parameter_list|,
name|Set
argument_list|<
name|CacheEntry
argument_list|>
name|entriesToRemove
parameter_list|)
block|{
name|QueryInfo
name|queryInfo
init|=
name|entry
operator|.
name|getQueryInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|ReadEntity
name|readEntity
range|:
name|queryInfo
operator|.
name|getInputs
argument_list|()
control|)
block|{
comment|// Check that the tables used do not resolve to temp tables.
if|if
condition|(
name|readEntity
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|TABLE
condition|)
block|{
name|Table
name|tableUsed
init|=
name|readEntity
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tempTables
init|=
name|SessionHiveMetaStoreClient
operator|.
name|getTempTablesForDatabase
argument_list|(
name|tableUsed
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tableUsed
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tempTables
operator|!=
literal|null
operator|&&
name|tempTables
operator|.
name|containsKey
argument_list|(
name|tableUsed
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{} resolves to a temporary table in the current session. This query cannot use the cache."
argument_list|,
name|tableUsed
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Has the table changed since the query was cached?
comment|// For transactional tables, can compare the table writeIDs of the current/cached query.
if|if
condition|(
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|tableUsed
argument_list|)
condition|)
block|{
name|boolean
name|writeIdCheckPassed
init|=
literal|false
decl_stmt|;
name|String
name|tableName
init|=
name|tableUsed
operator|.
name|getFullyQualifiedName
argument_list|()
decl_stmt|;
name|ValidTxnWriteIdList
name|currentTxnWriteIdList
init|=
name|lookupInfo
operator|.
name|txnWriteIdListProvider
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTxnWriteIdList
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Current query's txnWriteIdList is null!"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|entry
operator|.
name|txnWriteIdList
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cache entry's txnWriteIdList is null!"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|ValidWriteIdList
name|currentWriteIdForTable
init|=
name|currentTxnWriteIdList
operator|.
name|getTableValidWriteIdList
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|ValidWriteIdList
name|cachedWriteIdForTable
init|=
name|entry
operator|.
name|txnWriteIdList
operator|.
name|getTableValidWriteIdList
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking writeIds for table {}: currentWriteIdForTable {}, cachedWriteIdForTable {}"
argument_list|,
name|tableName
argument_list|,
name|currentWriteIdForTable
argument_list|,
name|cachedWriteIdForTable
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentWriteIdForTable
operator|!=
literal|null
operator|&&
name|cachedWriteIdForTable
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|currentWriteIdForTable
argument_list|,
name|cachedWriteIdForTable
argument_list|)
condition|)
block|{
name|writeIdCheckPassed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|writeIdCheckPassed
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cached query no longer valid due to table {}"
argument_list|,
name|tableUsed
operator|.
name|getFullyQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
comment|// We can invalidate the entry now, but calling removeEntry() requires a write lock
comment|// and we may already have read lock taken now. Add to entriesToRemove to delete later.
name|entriesToRemove
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entry
operator|.
name|invalidate
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|removeEntry
parameter_list|(
name|CacheEntry
name|entry
parameter_list|)
block|{
name|entry
operator|.
name|invalidate
argument_list|()
expr_stmt|;
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|removeFromLookup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|lru
operator|.
name|remove
argument_list|(
name|entry
argument_list|)
expr_stmt|;
comment|// Should the cache size be updated here, or after the result data has actually been deleted?
name|cacheSize
operator|-=
name|entry
operator|.
name|size
expr_stmt|;
block|}
finally|finally
block|{
name|rwLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeFromLookup
parameter_list|(
name|CacheEntry
name|entry
parameter_list|)
block|{
name|String
name|queryString
init|=
name|entry
operator|.
name|getQueryText
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|removeFromEntryMap
argument_list|(
name|queryMap
argument_list|,
name|queryString
argument_list|,
name|entry
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Attempted to remove entry but it was not in the cache: {}"
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
comment|// Remove this entry from the table usage mappings.
name|entry
operator|.
name|getTableNames
argument_list|()
operator|.
name|forEach
argument_list|(
name|tableName
lambda|->
name|removeFromEntryMap
argument_list|(
name|tableToEntryMap
argument_list|,
name|tableName
argument_list|,
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|calculateEntrySize
parameter_list|(
name|CacheEntry
name|entry
parameter_list|,
name|FetchWork
name|fetchWork
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|queryResultsPath
init|=
name|fetchWork
operator|.
name|getTblDir
argument_list|()
decl_stmt|;
name|FileSystem
name|resultsFs
init|=
name|queryResultsPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ContentSummary
name|cs
init|=
name|resultsFs
operator|.
name|getContentSummary
argument_list|(
name|queryResultsPath
argument_list|)
decl_stmt|;
name|entry
operator|.
name|size
operator|=
name|cs
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|/**    * Determines if the cache entry should be added to the results cache.    */
specifier|private
name|boolean
name|shouldEntryBeAdded
parameter_list|(
name|CacheEntry
name|entry
parameter_list|,
name|long
name|size
parameter_list|)
block|{
comment|// Assumes the cache lock has already been taken.
if|if
condition|(
name|maxEntrySize
operator|>=
literal|0
operator|&&
name|size
operator|>
name|maxEntrySize
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cache entry size {} larger than max entry size ({})"
argument_list|,
name|size
argument_list|,
name|maxEntrySize
argument_list|)
expr_stmt|;
name|incrementMetric
argument_list|(
name|MetricsConstant
operator|.
name|QC_REJECTED_TOO_LARGE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|clearSpaceForCacheEntry
argument_list|(
name|entry
argument_list|,
name|size
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|hasSpaceForCacheEntry
parameter_list|(
name|CacheEntry
name|entry
parameter_list|,
name|long
name|size
parameter_list|)
block|{
if|if
condition|(
name|maxCacheSize
operator|>=
literal|0
condition|)
block|{
return|return
operator|(
name|cacheSize
operator|+
name|size
operator|)
operator|<=
name|maxCacheSize
return|;
block|}
comment|// Negative max cache size means unbounded.
return|return
literal|true
return|;
block|}
specifier|private
name|CacheEntry
name|findEntryToRemove
parameter_list|()
block|{
comment|// Entries should be in LRU order in the keyset iterator.
name|Set
argument_list|<
name|CacheEntry
argument_list|>
name|entries
init|=
name|lru
operator|.
name|keySet
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|lru
init|)
block|{
for|for
control|(
name|CacheEntry
name|removalCandidate
range|:
name|entries
control|)
block|{
if|if
condition|(
name|removalCandidate
operator|.
name|getStatus
argument_list|()
operator|!=
name|CacheEntryStatus
operator|.
name|VALID
condition|)
block|{
continue|continue;
block|}
return|return
name|removalCandidate
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|clearSpaceForCacheEntry
parameter_list|(
name|CacheEntry
name|entry
parameter_list|,
name|long
name|size
parameter_list|)
block|{
if|if
condition|(
name|hasSpaceForCacheEntry
argument_list|(
name|entry
argument_list|,
name|size
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Clearing space for cache entry for query: [{}] with size {}"
argument_list|,
name|entry
operator|.
name|getQueryText
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|CacheEntry
name|removalCandidate
decl_stmt|;
while|while
condition|(
operator|(
name|removalCandidate
operator|=
name|findEntryToRemove
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing entry: {}"
argument_list|,
name|removalCandidate
argument_list|)
expr_stmt|;
name|removeEntry
argument_list|(
name|removalCandidate
argument_list|)
expr_stmt|;
comment|// TODO: Should we wait for the entry to actually be deleted from HDFS? Would have to
comment|// poll the reader count, waiting for it to reach 0, at which point cleanup should occur.
if|if
condition|(
name|hasSpaceForCacheEntry
argument_list|(
name|entry
argument_list|,
name|size
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not free enough space for cache entry for query: [{}] withe size {}"
argument_list|,
name|entry
operator|.
name|getQueryText
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|void
name|addToEntryMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|CacheEntry
argument_list|>
argument_list|>
name|entryMap
parameter_list|,
name|String
name|key
parameter_list|,
name|CacheEntry
name|entry
parameter_list|)
block|{
name|Set
argument_list|<
name|CacheEntry
argument_list|>
name|entriesForKey
init|=
name|entryMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entriesForKey
operator|==
literal|null
condition|)
block|{
name|entriesForKey
operator|=
operator|new
name|HashSet
argument_list|<
name|CacheEntry
argument_list|>
argument_list|()
expr_stmt|;
name|entryMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|entriesForKey
argument_list|)
expr_stmt|;
block|}
name|entriesForKey
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|removeFromEntryMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|CacheEntry
argument_list|>
argument_list|>
name|entryMap
parameter_list|,
name|String
name|key
parameter_list|,
name|CacheEntry
name|entry
parameter_list|)
block|{
name|Set
argument_list|<
name|CacheEntry
argument_list|>
name|entries
init|=
name|entryMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|deleted
init|=
name|entries
operator|.
name|remove
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|entryMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|void
name|cleanupInstance
parameter_list|()
block|{
comment|// This should only ever be called in testing scenarios.
comment|// There should not be any other users of the cache or its entries or this may mess up cleanup.
if|if
condition|(
name|inited
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|instance
operator|.
name|invalidationPollFuture
operator|!=
literal|null
condition|)
block|{
name|instance
operator|.
name|invalidationPollFuture
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|instance
operator|.
name|invalidationPollFuture
operator|=
literal|null
expr_stmt|;
block|}
name|instance
operator|.
name|clear
argument_list|()
expr_stmt|;
name|instance
operator|=
literal|null
expr_stmt|;
name|inited
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|ScheduledExecutorService
name|invalidationExecutor
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|ExecutorService
name|deletionExecutor
init|=
literal|null
decl_stmt|;
static|static
block|{
name|ThreadFactory
name|threadFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"QueryResultsCache %d"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|invalidationExecutor
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
name|threadFactory
argument_list|)
expr_stmt|;
name|deletionExecutor
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
name|threadFactory
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scheduleEntryInvalidation
parameter_list|(
specifier|final
name|CacheEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|maxEntryLifetime
operator|>=
literal|0
condition|)
block|{
comment|// Schedule task to invalidate cache entry and remove from lookup.
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
name|invalidationExecutor
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|removeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|maxEntryLifetime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|entry
operator|.
name|invalidationFuture
operator|=
name|future
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|cleanupEntry
parameter_list|(
specifier|final
name|CacheEntry
name|entry
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|entry
operator|.
name|getStatus
argument_list|()
operator|==
name|CacheEntryStatus
operator|.
name|INVALID
argument_list|)
expr_stmt|;
specifier|final
name|HiveConf
name|conf
init|=
name|getInstance
argument_list|()
operator|.
name|conf
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|cachedResultsPath
operator|!=
literal|null
operator|&&
operator|!
name|getInstance
argument_list|()
operator|.
name|zeroRowsPath
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|cachedResultsPath
argument_list|)
condition|)
block|{
name|deletionExecutor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Path
name|path
init|=
name|entry
operator|.
name|cachedResultsPath
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cache directory cleanup: deleting {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|entry
operator|.
name|cachedResultsPath
operator|.
name|getFileSystem
argument_list|(
name|getInstance
argument_list|()
operator|.
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|entry
operator|.
name|cachedResultsPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while trying to delete "
operator|+
name|path
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|incrementMetric
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|Metrics
name|metrics
init|=
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|incrementCounter
argument_list|(
name|name
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|decrementMetric
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|Metrics
name|metrics
init|=
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|decrementCounter
argument_list|(
name|name
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|incrementMetric
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|incrementMetric
argument_list|(
name|name
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|decrementMetric
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|decrementMetric
argument_list|(
name|name
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|registerMetrics
parameter_list|(
name|Metrics
name|metrics
parameter_list|,
specifier|final
name|QueryResultsCache
name|cache
parameter_list|)
block|{
name|MetricsVariable
argument_list|<
name|Long
argument_list|>
name|maxCacheSize
init|=
operator|new
name|MetricsVariable
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
return|return
name|cache
operator|.
name|maxCacheSize
return|;
block|}
block|}
decl_stmt|;
name|MetricsVariable
argument_list|<
name|Long
argument_list|>
name|curCacheSize
init|=
operator|new
name|MetricsVariable
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|getValue
parameter_list|()
block|{
return|return
name|cache
operator|.
name|cacheSize
return|;
block|}
block|}
decl_stmt|;
name|metrics
operator|.
name|addGauge
argument_list|(
name|MetricsConstant
operator|.
name|QC_MAX_SIZE
argument_list|,
name|maxCacheSize
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addGauge
argument_list|(
name|MetricsConstant
operator|.
name|QC_CURRENT_SIZE
argument_list|,
name|curCacheSize
argument_list|)
expr_stmt|;
block|}
comment|// EventConsumer to invalidate cache entries based on metastore notification events (alter table, add partition, etc).
specifier|public
specifier|static
class|class
name|InvalidationEventConsumer
implements|implements
name|EventConsumer
block|{
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
name|NotificationEvent
name|event
parameter_list|)
block|{
name|String
name|dbName
decl_stmt|;
name|String
name|tableName
decl_stmt|;
switch|switch
condition|(
name|event
operator|.
name|getEventType
argument_list|()
condition|)
block|{
case|case
name|MessageBuilder
operator|.
name|ADD_PARTITION_EVENT
case|:
case|case
name|MessageBuilder
operator|.
name|ALTER_PARTITION_EVENT
case|:
case|case
name|MessageBuilder
operator|.
name|DROP_PARTITION_EVENT
case|:
case|case
name|MessageBuilder
operator|.
name|ALTER_TABLE_EVENT
case|:
case|case
name|MessageBuilder
operator|.
name|DROP_TABLE_EVENT
case|:
case|case
name|MessageBuilder
operator|.
name|INSERT_EVENT
case|:
name|dbName
operator|=
name|event
operator|.
name|getDbName
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|event
operator|.
name|getTableName
argument_list|()
expr_stmt|;
break|break;
default|default:
return|return;
block|}
if|if
condition|(
name|dbName
operator|==
literal|null
operator|||
name|tableName
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Possibly malformed notification event, missing db or table name: {}"
argument_list|,
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Handling event {} on table {}.{}"
argument_list|,
name|event
operator|.
name|getEventType
argument_list|()
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|QueryResultsCache
name|cache
init|=
name|QueryResultsCache
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|long
name|eventTime
init|=
name|event
operator|.
name|getEventTime
argument_list|()
operator|*
literal|1000L
decl_stmt|;
name|cache
operator|.
name|notifyTableChanged
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|eventTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cache not instantiated, skipping event on {}.{}"
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

