begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|cache
operator|.
name|results
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|Entity
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|SessionHiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ColumnAccessInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|TableAccessInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FetchWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A class to handle management and lookup of cached Hive query results.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|QueryResultsCache
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueryResultsCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
class|class
name|LookupInfo
block|{
specifier|private
name|String
name|queryText
decl_stmt|;
specifier|public
name|LookupInfo
parameter_list|(
name|String
name|queryText
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|queryText
operator|=
name|queryText
expr_stmt|;
block|}
specifier|public
name|String
name|getQueryText
parameter_list|()
block|{
return|return
name|queryText
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|QueryInfo
block|{
specifier|private
name|LookupInfo
name|lookupInfo
decl_stmt|;
specifier|private
name|HiveOperation
name|hiveOperation
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|resultSchema
decl_stmt|;
specifier|private
name|TableAccessInfo
name|tableAccessInfo
decl_stmt|;
specifier|private
name|ColumnAccessInfo
name|columnAccessInfo
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
decl_stmt|;
specifier|public
name|QueryInfo
parameter_list|(
name|LookupInfo
name|lookupInfo
parameter_list|,
name|HiveOperation
name|hiveOperation
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|resultSchema
parameter_list|,
name|TableAccessInfo
name|tableAccessInfo
parameter_list|,
name|ColumnAccessInfo
name|columnAccessInfo
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|)
block|{
name|this
operator|.
name|lookupInfo
operator|=
name|lookupInfo
expr_stmt|;
name|this
operator|.
name|hiveOperation
operator|=
name|hiveOperation
expr_stmt|;
name|this
operator|.
name|resultSchema
operator|=
name|resultSchema
expr_stmt|;
name|this
operator|.
name|tableAccessInfo
operator|=
name|tableAccessInfo
expr_stmt|;
name|this
operator|.
name|columnAccessInfo
operator|=
name|columnAccessInfo
expr_stmt|;
name|this
operator|.
name|inputs
operator|=
name|inputs
expr_stmt|;
block|}
specifier|public
name|LookupInfo
name|getLookupInfo
parameter_list|()
block|{
return|return
name|lookupInfo
return|;
block|}
specifier|public
name|void
name|setLookupInfo
parameter_list|(
name|LookupInfo
name|lookupInfo
parameter_list|)
block|{
name|this
operator|.
name|lookupInfo
operator|=
name|lookupInfo
expr_stmt|;
block|}
specifier|public
name|HiveOperation
name|getHiveOperation
parameter_list|()
block|{
return|return
name|hiveOperation
return|;
block|}
specifier|public
name|void
name|setHiveOperation
parameter_list|(
name|HiveOperation
name|hiveOperation
parameter_list|)
block|{
name|this
operator|.
name|hiveOperation
operator|=
name|hiveOperation
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getResultSchema
parameter_list|()
block|{
return|return
name|resultSchema
return|;
block|}
specifier|public
name|void
name|setResultSchema
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|resultSchema
parameter_list|)
block|{
name|this
operator|.
name|resultSchema
operator|=
name|resultSchema
expr_stmt|;
block|}
specifier|public
name|TableAccessInfo
name|getTableAccessInfo
parameter_list|()
block|{
return|return
name|tableAccessInfo
return|;
block|}
specifier|public
name|void
name|setTableAccessInfo
parameter_list|(
name|TableAccessInfo
name|tableAccessInfo
parameter_list|)
block|{
name|this
operator|.
name|tableAccessInfo
operator|=
name|tableAccessInfo
expr_stmt|;
block|}
specifier|public
name|ColumnAccessInfo
name|getColumnAccessInfo
parameter_list|()
block|{
return|return
name|columnAccessInfo
return|;
block|}
specifier|public
name|void
name|setColumnAccessInfo
parameter_list|(
name|ColumnAccessInfo
name|columnAccessInfo
parameter_list|)
block|{
name|this
operator|.
name|columnAccessInfo
operator|=
name|columnAccessInfo
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|getInputs
parameter_list|()
block|{
return|return
name|inputs
return|;
block|}
specifier|public
name|void
name|setInputs
parameter_list|(
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|)
block|{
name|this
operator|.
name|inputs
operator|=
name|inputs
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CacheEntry
block|{
specifier|private
name|QueryInfo
name|queryInfo
decl_stmt|;
specifier|private
name|FetchWork
name|fetchWork
decl_stmt|;
specifier|private
name|Path
name|cachedResultsPath
decl_stmt|;
comment|// Cache administration
specifier|private
name|long
name|createTime
decl_stmt|;
specifier|private
name|long
name|size
decl_stmt|;
specifier|private
name|AtomicBoolean
name|valid
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|AtomicInteger
name|readers
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|invalidationFuture
init|=
literal|null
decl_stmt|;
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
name|valid
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|releaseReader
parameter_list|()
block|{
name|int
name|readerCount
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|readerCount
operator|=
name|readers
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"releaseReader: entry: {}, readerCount: {}"
argument_list|,
name|this
argument_list|,
name|readerCount
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|readerCount
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|cleanupIfNeeded
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CacheEntry query: ["
operator|+
name|getQueryInfo
argument_list|()
operator|.
name|getLookupInfo
argument_list|()
operator|.
name|getQueryText
argument_list|()
operator|+
literal|"], location: "
operator|+
name|cachedResultsPath
operator|+
literal|", size: "
operator|+
name|size
return|;
block|}
specifier|public
name|boolean
name|addReader
parameter_list|()
block|{
name|boolean
name|added
init|=
literal|false
decl_stmt|;
name|int
name|readerCount
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|valid
operator|.
name|get
argument_list|()
condition|)
block|{
name|readerCount
operator|=
name|readers
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|added
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|readerCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"addReader: entry: {}, readerCount: {}"
argument_list|,
name|this
argument_list|,
name|readerCount
argument_list|)
expr_stmt|;
return|return
name|added
return|;
block|}
specifier|private
name|int
name|numReaders
parameter_list|()
block|{
return|return
name|readers
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
name|void
name|invalidate
parameter_list|()
block|{
name|boolean
name|wasValid
init|=
name|setValidity
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|wasValid
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Invalidated cache entry: {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|invalidationFuture
operator|!=
literal|null
condition|)
block|{
comment|// The cache entry has just been invalidated, no need for the scheduled invalidation.
name|invalidationFuture
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|cleanupIfNeeded
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Set the validity, returning the previous validity value.      * @param valid      * @return      */
specifier|private
name|boolean
name|setValidity
parameter_list|(
name|boolean
name|valid
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
return|return
name|this
operator|.
name|valid
operator|.
name|getAndSet
argument_list|(
name|valid
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|cleanupIfNeeded
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
operator|&&
name|readers
operator|.
name|get
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|QueryResultsCache
operator|.
name|cleanupEntry
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getQueryText
parameter_list|()
block|{
return|return
name|getQueryInfo
argument_list|()
operator|.
name|getLookupInfo
argument_list|()
operator|.
name|getQueryText
argument_list|()
return|;
block|}
specifier|public
name|FetchWork
name|getFetchWork
parameter_list|()
block|{
return|return
name|fetchWork
return|;
block|}
specifier|public
name|QueryInfo
name|getQueryInfo
parameter_list|()
block|{
return|return
name|queryInfo
return|;
block|}
specifier|public
name|Path
name|getCachedResultsPath
parameter_list|()
block|{
return|return
name|cachedResultsPath
return|;
block|}
block|}
comment|// Allow lookup by query string
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|CacheEntry
argument_list|>
argument_list|>
name|queryMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|CacheEntry
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// LRU. Could also implement LRU as a doubly linked list if CacheEntry keeps its node.
comment|// Use synchronized map since even read actions cause the lru to get updated.
specifier|private
specifier|final
name|Map
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
name|lru
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|CacheEntry
argument_list|,
name|CacheEntry
argument_list|>
argument_list|(
name|INITIAL_LRU_SIZE
argument_list|,
name|LRU_LOAD_FACTOR
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|Path
name|cacheDirPath
decl_stmt|;
specifier|private
name|long
name|cacheSize
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|maxCacheSize
decl_stmt|;
specifier|private
name|long
name|maxEntrySize
decl_stmt|;
specifier|private
name|long
name|maxEntryLifetime
decl_stmt|;
specifier|private
name|ReadWriteLock
name|rwLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
name|QueryResultsCache
parameter_list|(
name|HiveConf
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|configuration
expr_stmt|;
comment|// Set up cache directory
name|Path
name|rootCacheDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_QUERY_RESULTS_CACHE_DIRECTORY
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing query results cache at {}"
argument_list|,
name|rootCacheDir
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|ensurePathIsWritable
argument_list|(
name|rootCacheDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|String
name|currentCacheDirName
init|=
literal|"results-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|cacheDirPath
operator|=
operator|new
name|Path
argument_list|(
name|rootCacheDir
argument_list|,
name|currentCacheDirName
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cacheDirPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FsPermission
name|fsPermission
init|=
operator|new
name|FsPermission
argument_list|(
literal|"700"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|cacheDirPath
argument_list|,
name|fsPermission
argument_list|)
expr_stmt|;
comment|// Results cache directory should be cleaned up at process termination.
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|cacheDirPath
argument_list|)
expr_stmt|;
name|maxCacheSize
operator|=
name|conf
operator|.
name|getLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_QUERY_RESULTS_CACHE_MAX_SIZE
argument_list|)
expr_stmt|;
name|maxEntrySize
operator|=
name|conf
operator|.
name|getLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_QUERY_RESULTS_CACHE_MAX_ENTRY_SIZE
argument_list|)
expr_stmt|;
name|maxEntryLifetime
operator|=
name|conf
operator|.
name|getTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_QUERY_RESULTS_CACHE_MAX_ENTRY_LIFETIME
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Query results cache: cacheDirectory {}, maxCacheSize {}, maxEntrySize {}, maxEntryLifetime {}"
argument_list|,
name|cacheDirPath
argument_list|,
name|maxCacheSize
argument_list|,
name|maxEntrySize
argument_list|,
name|maxEntryLifetime
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|AtomicBoolean
name|inited
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|QueryResultsCache
name|instance
decl_stmt|;
specifier|public
specifier|static
name|void
name|initialize
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|inited
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
try|try
block|{
name|instance
operator|=
operator|new
name|QueryResultsCache
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|inited
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
throw|throw
name|err
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|QueryResultsCache
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
comment|/**    * Check if the cache contains an entry for the requested LookupInfo.    * @param request    * @param addReader Should the reader count be incremented during the lookup.    *        This will ensure the returned entry can be used after the lookup.    *        If true, the caller will be responsible for decrementing the reader count    *        using CacheEntry.releaseReader().    * @return  The cached result if there is a match in the cache, or null if no match is found.    */
specifier|public
name|CacheEntry
name|lookup
parameter_list|(
name|LookupInfo
name|request
parameter_list|,
name|boolean
name|addReader
parameter_list|)
block|{
name|CacheEntry
name|result
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"QueryResultsCache lookup for query: {}"
argument_list|,
name|request
operator|.
name|queryText
argument_list|)
expr_stmt|;
name|Lock
name|readLock
init|=
name|rwLock
operator|.
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|CacheEntry
argument_list|>
name|candidates
init|=
name|queryMap
operator|.
name|get
argument_list|(
name|request
operator|.
name|queryText
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidates
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CacheEntry
name|candidate
range|:
name|candidates
control|)
block|{
if|if
condition|(
name|entryMatches
argument_list|(
name|request
argument_list|,
name|candidate
argument_list|)
condition|)
block|{
name|result
operator|=
name|candidate
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|lru
operator|.
name|get
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Update LRU
if|if
condition|(
operator|!
name|result
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// Entry is in the cache, but not valid.
comment|// This can happen when the entry is first added, before the data has been moved
comment|// to the results cache directory. We cannot use this entry yet.
name|result
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|addReader
condition|)
block|{
comment|// Caller will need to be responsible for releasing the reader count.
name|result
operator|.
name|addReader
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"QueryResultsCache lookup result: {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Add an entry to the query results cache.    * Important: Adding the entry to the cache will increment the reader count for the cache entry.    * CacheEntry.releaseReader() should be called when the caller is done with the cache entry.    *    * @param queryInfo    * @param fetchWork    * @return The entry if added to the cache. null if the entry is not added.    */
specifier|public
name|CacheEntry
name|addToCache
parameter_list|(
name|QueryInfo
name|queryInfo
parameter_list|,
name|FetchWork
name|fetchWork
parameter_list|)
block|{
name|CacheEntry
name|addedEntry
init|=
literal|null
decl_stmt|;
name|boolean
name|dataDirMoved
init|=
literal|false
decl_stmt|;
name|Path
name|queryResultsPath
init|=
literal|null
decl_stmt|;
name|Path
name|cachedResultsPath
init|=
literal|null
decl_stmt|;
name|String
name|queryText
init|=
name|queryInfo
operator|.
name|getLookupInfo
argument_list|()
operator|.
name|getQueryText
argument_list|()
decl_stmt|;
comment|// Should we remove other candidate entries if they are equivalent to these query results?
try|try
block|{
name|CacheEntry
name|potentialEntry
init|=
operator|new
name|CacheEntry
argument_list|()
decl_stmt|;
name|potentialEntry
operator|.
name|queryInfo
operator|=
name|queryInfo
expr_stmt|;
name|queryResultsPath
operator|=
name|fetchWork
operator|.
name|getTblDir
argument_list|()
expr_stmt|;
name|FileSystem
name|resultsFs
init|=
name|queryResultsPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ContentSummary
name|cs
init|=
name|resultsFs
operator|.
name|getContentSummary
argument_list|(
name|queryResultsPath
argument_list|)
decl_stmt|;
name|potentialEntry
operator|.
name|size
operator|=
name|cs
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|Lock
name|writeLock
init|=
name|rwLock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|shouldEntryBeAdded
argument_list|(
name|potentialEntry
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|clearSpaceForCacheEntry
argument_list|(
name|potentialEntry
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding cache entry for query '{}'"
argument_list|,
name|queryText
argument_list|)
expr_stmt|;
comment|// Add the entry to the cache structures while under write lock. Do not mark the entry
comment|// as valid yet, since the query results have not yet been moved to the cache directory.
comment|// Do the data move after unlocking since it might take time.
comment|// Mark the entry as valid once the data has been moved to the cache directory.
name|Set
argument_list|<
name|CacheEntry
argument_list|>
name|entriesForQuery
init|=
name|queryMap
operator|.
name|get
argument_list|(
name|queryText
argument_list|)
decl_stmt|;
if|if
condition|(
name|entriesForQuery
operator|==
literal|null
condition|)
block|{
name|entriesForQuery
operator|=
operator|new
name|HashSet
argument_list|<
name|CacheEntry
argument_list|>
argument_list|()
expr_stmt|;
name|queryMap
operator|.
name|put
argument_list|(
name|queryText
argument_list|,
name|entriesForQuery
argument_list|)
expr_stmt|;
block|}
name|entriesForQuery
operator|.
name|add
argument_list|(
name|potentialEntry
argument_list|)
expr_stmt|;
name|lru
operator|.
name|put
argument_list|(
name|potentialEntry
argument_list|,
name|potentialEntry
argument_list|)
expr_stmt|;
name|cacheSize
operator|+=
name|potentialEntry
operator|.
name|size
expr_stmt|;
name|addedEntry
operator|=
name|potentialEntry
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Move the query results to the query cache directory.
name|cachedResultsPath
operator|=
name|moveResultsToCacheDirectory
argument_list|(
name|queryResultsPath
argument_list|)
expr_stmt|;
name|dataDirMoved
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moved query results from {} to {} (size {}) for query '{}'"
argument_list|,
name|queryResultsPath
argument_list|,
name|cachedResultsPath
argument_list|,
name|cs
operator|.
name|getLength
argument_list|()
argument_list|,
name|queryText
argument_list|)
expr_stmt|;
comment|// Create a new FetchWork to reference the new cache location.
name|FetchWork
name|fetchWorkForCache
init|=
operator|new
name|FetchWork
argument_list|(
name|cachedResultsPath
argument_list|,
name|fetchWork
operator|.
name|getTblDesc
argument_list|()
argument_list|,
name|fetchWork
operator|.
name|getLimit
argument_list|()
argument_list|)
decl_stmt|;
name|fetchWorkForCache
operator|.
name|setCachedResult
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addedEntry
operator|.
name|fetchWork
operator|=
name|fetchWorkForCache
expr_stmt|;
name|addedEntry
operator|.
name|cachedResultsPath
operator|=
name|cachedResultsPath
expr_stmt|;
name|addedEntry
operator|.
name|createTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|addedEntry
operator|.
name|setValidity
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Mark this entry as being in use. Caller will need to release later.
name|addedEntry
operator|.
name|addReader
argument_list|()
expr_stmt|;
name|scheduleEntryInvalidation
argument_list|(
name|addedEntry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create cache entry for query results for query: "
operator|+
name|queryText
argument_list|,
name|err
argument_list|)
expr_stmt|;
if|if
condition|(
name|addedEntry
operator|!=
literal|null
condition|)
block|{
comment|// If the entry was already added to the cache when we hit error, clean up properly.
if|if
condition|(
name|dataDirMoved
condition|)
block|{
comment|// If data was moved from original location to cache directory, we need to move it back!
name|LOG
operator|.
name|info
argument_list|(
literal|"Restoring query results from {} back to {}"
argument_list|,
name|cachedResultsPath
argument_list|,
name|queryResultsPath
argument_list|)
expr_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|cachedResultsPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|cachedResultsPath
argument_list|,
name|queryResultsPath
argument_list|)
expr_stmt|;
name|addedEntry
operator|.
name|cachedResultsPath
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err2
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Failed cleanup during failed attempt to cache query: "
operator|+
name|queryText
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
block|}
name|addedEntry
operator|.
name|invalidate
argument_list|()
expr_stmt|;
if|if
condition|(
name|addedEntry
operator|.
name|numReaders
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addedEntry
operator|.
name|releaseReader
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
return|return
name|addedEntry
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|Lock
name|writeLock
init|=
name|rwLock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Clearing the results cache"
argument_list|)
expr_stmt|;
for|for
control|(
name|CacheEntry
name|entry
range|:
name|lru
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
name|EMPTY_CACHEENTRY_ARRAY
argument_list|)
control|)
block|{
try|try
block|{
name|removeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error removing cache entry "
operator|+
name|entry
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getSize
parameter_list|()
block|{
name|Lock
name|readLock
init|=
name|rwLock
operator|.
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|cacheSize
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|int
name|INITIAL_LRU_SIZE
init|=
literal|16
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|LRU_LOAD_FACTOR
init|=
literal|0.75f
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CacheEntry
index|[]
name|EMPTY_CACHEENTRY_ARRAY
init|=
block|{}
decl_stmt|;
specifier|private
name|boolean
name|entryMatches
parameter_list|(
name|LookupInfo
name|lookupInfo
parameter_list|,
name|CacheEntry
name|entry
parameter_list|)
block|{
name|QueryInfo
name|queryInfo
init|=
name|entry
operator|.
name|getQueryInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|ReadEntity
name|readEntity
range|:
name|queryInfo
operator|.
name|getInputs
argument_list|()
control|)
block|{
comment|// Check that the tables used do not resolve to temp tables.
if|if
condition|(
name|readEntity
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|TABLE
condition|)
block|{
name|Table
name|tableUsed
init|=
name|readEntity
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tempTables
init|=
name|SessionHiveMetaStoreClient
operator|.
name|getTempTablesForDatabase
argument_list|(
name|tableUsed
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tempTables
operator|!=
literal|null
operator|&&
name|tempTables
operator|.
name|containsKey
argument_list|(
name|tableUsed
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{} resolves to a temporary table in the current session. This query cannot use the cache."
argument_list|,
name|tableUsed
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|removeEntry
parameter_list|(
name|CacheEntry
name|entry
parameter_list|)
block|{
name|entry
operator|.
name|invalidate
argument_list|()
expr_stmt|;
name|removeFromLookup
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|lru
operator|.
name|remove
argument_list|(
name|entry
argument_list|)
expr_stmt|;
comment|// Should the cache size be updated here, or after the result data has actually been deleted?
name|cacheSize
operator|-=
name|entry
operator|.
name|size
expr_stmt|;
block|}
specifier|private
name|void
name|removeFromLookup
parameter_list|(
name|CacheEntry
name|entry
parameter_list|)
block|{
name|String
name|queryString
init|=
name|entry
operator|.
name|getQueryText
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|CacheEntry
argument_list|>
name|entries
init|=
name|queryMap
operator|.
name|get
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|entries
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|boolean
name|deleted
init|=
name|entries
operator|.
name|remove
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|deleted
argument_list|)
expr_stmt|;
if|if
condition|(
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|queryMap
operator|.
name|remove
argument_list|(
name|queryString
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|calculateEntrySize
parameter_list|(
name|CacheEntry
name|entry
parameter_list|,
name|FetchWork
name|fetchWork
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|queryResultsPath
init|=
name|fetchWork
operator|.
name|getTblDir
argument_list|()
decl_stmt|;
name|FileSystem
name|resultsFs
init|=
name|queryResultsPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ContentSummary
name|cs
init|=
name|resultsFs
operator|.
name|getContentSummary
argument_list|(
name|queryResultsPath
argument_list|)
decl_stmt|;
name|entry
operator|.
name|size
operator|=
name|cs
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|/**    * Determines if the cache entry should be added to the results cache.    */
specifier|private
name|boolean
name|shouldEntryBeAdded
parameter_list|(
name|CacheEntry
name|entry
parameter_list|)
block|{
comment|// Assumes the cache lock has already been taken.
if|if
condition|(
name|maxEntrySize
operator|>=
literal|0
operator|&&
name|entry
operator|.
name|size
operator|>
name|maxEntrySize
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cache entry size {} larger than max entry size ({})"
argument_list|,
name|entry
operator|.
name|size
argument_list|,
name|maxEntrySize
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|Path
name|moveResultsToCacheDirectory
parameter_list|(
name|Path
name|queryResultsPath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dirName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|cachedResultsPath
init|=
operator|new
name|Path
argument_list|(
name|cacheDirPath
argument_list|,
name|dirName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cachedResultsPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|queryResultsPath
argument_list|,
name|cachedResultsPath
argument_list|)
expr_stmt|;
return|return
name|cachedResultsPath
return|;
block|}
specifier|private
name|boolean
name|hasSpaceForCacheEntry
parameter_list|(
name|CacheEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|maxCacheSize
operator|>=
literal|0
condition|)
block|{
return|return
operator|(
name|cacheSize
operator|+
name|entry
operator|.
name|size
operator|)
operator|<=
name|maxCacheSize
return|;
block|}
comment|// Negative max cache size means unbounded.
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|clearSpaceForCacheEntry
parameter_list|(
name|CacheEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|hasSpaceForCacheEntry
argument_list|(
name|entry
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Clearing space for cache entry for query: [{}] with size {}"
argument_list|,
name|entry
operator|.
name|getQueryText
argument_list|()
argument_list|,
name|entry
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// Entries should be in LRU order in the keyset iterator.
name|CacheEntry
index|[]
name|entries
init|=
name|lru
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
name|EMPTY_CACHEENTRY_ARRAY
argument_list|)
decl_stmt|;
for|for
control|(
name|CacheEntry
name|removalCandidate
range|:
name|entries
control|)
block|{
if|if
condition|(
operator|!
name|removalCandidate
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// Likely an entry which is still getting its results moved to the cache directory.
continue|continue;
block|}
comment|// Only delete the entry if it has no readers.
if|if
condition|(
operator|!
operator|(
name|removalCandidate
operator|.
name|numReaders
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing entry: {}"
argument_list|,
name|removalCandidate
argument_list|)
expr_stmt|;
name|removeEntry
argument_list|(
name|removalCandidate
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSpaceForCacheEntry
argument_list|(
name|entry
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not free enough space for cache entry for query: [{}] withe size {}"
argument_list|,
name|entry
operator|.
name|getQueryText
argument_list|()
argument_list|,
name|entry
operator|.
name|size
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|void
name|cleanupInstance
parameter_list|()
block|{
comment|// This should only ever be called in testing scenarios.
comment|// There should not be any other users of the cache or its entries or this may mess up cleanup.
if|if
condition|(
name|inited
operator|.
name|get
argument_list|()
condition|)
block|{
name|getInstance
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|instance
operator|=
literal|null
expr_stmt|;
name|inited
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|ScheduledExecutorService
name|invalidationExecutor
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|ExecutorService
name|deletionExecutor
init|=
literal|null
decl_stmt|;
static|static
block|{
name|ThreadFactory
name|threadFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"QueryResultsCache %d"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|invalidationExecutor
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
name|threadFactory
argument_list|)
expr_stmt|;
name|deletionExecutor
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
name|threadFactory
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scheduleEntryInvalidation
parameter_list|(
specifier|final
name|CacheEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|maxEntryLifetime
operator|>=
literal|0
condition|)
block|{
comment|// Schedule task to invalidate cache entry.
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
name|invalidationExecutor
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|entry
operator|.
name|invalidate
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|maxEntryLifetime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|entry
operator|.
name|invalidationFuture
operator|=
name|future
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|cleanupEntry
parameter_list|(
specifier|final
name|CacheEntry
name|entry
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|entry
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|cachedResultsPath
operator|!=
literal|null
condition|)
block|{
name|deletionExecutor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Path
name|path
init|=
name|entry
operator|.
name|cachedResultsPath
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cache directory cleanup: deleting {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|entry
operator|.
name|cachedResultsPath
operator|.
name|getFileSystem
argument_list|(
name|getInstance
argument_list|()
operator|.
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|entry
operator|.
name|cachedResultsPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while trying to delete "
operator|+
name|path
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

