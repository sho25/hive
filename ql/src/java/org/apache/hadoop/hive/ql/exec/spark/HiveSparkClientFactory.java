begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|utils
operator|.
name|CharsetNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
operator|.
name|rpc
operator|.
name|RpcConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|SparkConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|SparkException
import|;
end_import

begin_class
specifier|public
class|class
name|HiveSparkClientFactory
block|{
specifier|protected
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HiveSparkClientFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SPARK_DEFAULT_CONF_FILE
init|=
literal|"spark-defaults.conf"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SPARK_DEFAULT_MASTER
init|=
literal|"local"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SPARK_DEFAULT_APP_NAME
init|=
literal|"Hive on Spark"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SPARK_DEFAULT_SERIALIZER
init|=
literal|"org.apache.spark.serializer.KryoSerializer"
decl_stmt|;
specifier|public
specifier|static
name|HiveSparkClient
name|createHiveSparkClient
parameter_list|(
name|HiveConf
name|hiveconf
parameter_list|)
throws|throws
name|IOException
throws|,
name|SparkException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sparkConf
init|=
name|initiateSparkConf
argument_list|(
name|hiveconf
argument_list|)
decl_stmt|;
comment|// Submit spark job through local spark context while spark master is local mode, otherwise submit
comment|// spark job through remote spark context.
name|String
name|master
init|=
name|sparkConf
operator|.
name|get
argument_list|(
literal|"spark.master"
argument_list|)
decl_stmt|;
if|if
condition|(
name|master
operator|.
name|equals
argument_list|(
literal|"local"
argument_list|)
operator|||
name|master
operator|.
name|startsWith
argument_list|(
literal|"local["
argument_list|)
condition|)
block|{
comment|// With local spark context, all user sessions share the same spark context.
return|return
name|LocalHiveSparkClient
operator|.
name|getInstance
argument_list|(
name|generateSparkConf
argument_list|(
name|sparkConf
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|RemoteHiveSparkClient
argument_list|(
name|hiveconf
argument_list|,
name|sparkConf
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|initiateSparkConf
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sparkConf
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// set default spark configurations.
name|sparkConf
operator|.
name|put
argument_list|(
literal|"spark.master"
argument_list|,
name|SPARK_DEFAULT_MASTER
argument_list|)
expr_stmt|;
name|sparkConf
operator|.
name|put
argument_list|(
literal|"spark.app.name"
argument_list|,
name|SPARK_DEFAULT_APP_NAME
argument_list|)
expr_stmt|;
name|sparkConf
operator|.
name|put
argument_list|(
literal|"spark.serializer"
argument_list|,
name|SPARK_DEFAULT_SERIALIZER
argument_list|)
expr_stmt|;
comment|// load properties from spark-defaults.conf.
name|InputStream
name|inputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|inputStream
operator|=
name|HiveSparkClientFactory
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|SPARK_DEFAULT_CONF_FILE
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"loading spark properties from:"
operator|+
name|SPARK_DEFAULT_CONF_FILE
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|,
name|CharsetNames
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|propertyName
range|:
name|properties
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
if|if
condition|(
name|propertyName
operator|.
name|startsWith
argument_list|(
literal|"spark"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
name|sparkConf
operator|.
name|put
argument_list|(
name|propertyName
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"load spark property from %s (%s -> %s)."
argument_list|,
name|SPARK_DEFAULT_CONF_FILE
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to open spark configuration file:"
operator|+
name|SPARK_DEFAULT_CONF_FILE
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to close inputstream."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// load properties from hive configurations, including both spark.* properties,
comment|// properties for remote driver RPC, and yarn properties for Spark on YARN mode.
name|String
name|sparkMaster
init|=
name|hiveConf
operator|.
name|get
argument_list|(
literal|"spark.master"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sparkMaster
operator|==
literal|null
condition|)
block|{
name|sparkMaster
operator|=
name|sparkConf
operator|.
name|get
argument_list|(
literal|"spark.master"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|hiveConf
control|)
block|{
name|String
name|propertyName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyName
operator|.
name|startsWith
argument_list|(
literal|"spark"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|hiveConf
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
name|sparkConf
operator|.
name|put
argument_list|(
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"load spark property from hive configuration (%s -> %s)."
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyName
operator|.
name|startsWith
argument_list|(
literal|"yarn"
argument_list|)
operator|&&
operator|(
name|sparkMaster
operator|.
name|equals
argument_list|(
literal|"yarn-client"
argument_list|)
operator|||
name|sparkMaster
operator|.
name|equals
argument_list|(
literal|"yarn-cluster"
argument_list|)
operator|)
condition|)
block|{
name|String
name|value
init|=
name|hiveConf
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
comment|// Add spark.hadoop prefix for yarn properties as SparkConf only accept properties
comment|// started with spark prefix, Spark would remove spark.hadoop prefix lately and add
comment|// it to its hadoop configuration.
name|sparkConf
operator|.
name|put
argument_list|(
literal|"spark.hadoop."
operator|+
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"load yarn property from hive configuration in %s mode (%s -> %s)."
argument_list|,
name|sparkMaster
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|RpcConfiguration
operator|.
name|HIVE_SPARK_RSC_CONFIGS
operator|.
name|contains
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|RpcConfiguration
operator|.
name|getValue
argument_list|(
name|hiveConf
argument_list|,
name|propertyName
argument_list|)
decl_stmt|;
name|sparkConf
operator|.
name|put
argument_list|(
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"load RPC property from hive configuration (%s -> %s)."
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sparkConf
return|;
block|}
specifier|static
name|SparkConf
name|generateSparkConf
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conf
parameter_list|)
block|{
name|SparkConf
name|sparkConf
init|=
operator|new
name|SparkConf
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|conf
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sparkConf
operator|.
name|set
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sparkConf
return|;
block|}
block|}
end_class

end_unit

