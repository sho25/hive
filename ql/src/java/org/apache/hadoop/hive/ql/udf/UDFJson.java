begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_class
annotation|@
name|description
argument_list|(
name|name
operator|=
literal|"get_json_object"
argument_list|,
name|value
operator|=
literal|"_FUNC_(json_txt, path) - Extract a json object from path "
argument_list|,
name|extended
operator|=
literal|"Extract json object from a json string based on json path "
operator|+
literal|"specified, and return json string of the extracted json object. It "
operator|+
literal|"will return null if the input json string is invalid.\n"
operator|+
literal|"A limited version of JSONPath supported:\n"
operator|+
literal|"  $   : Root object\n"
operator|+
literal|"  .   : Child operator\n"
operator|+
literal|"  []  : Subscript operator for array\n"
operator|+
literal|"  *   : Wildcard for []\n"
operator|+
literal|"Syntax not supported that's worth noticing:\n"
operator|+
literal|"  ''  : Zero length string as key\n"
operator|+
literal|"  ..  : Recursive descent\n"
operator|+
literal|"&amp;#064;   : Current object/element\n"
operator|+
literal|"  ()  : Script expression\n"
operator|+
literal|"  ?() : Filter (script) expression.\n"
operator|+
literal|"  [,] : Union operator\n"
operator|+
literal|"  [start:end:step] : array slice operator\n"
argument_list|)
specifier|public
class|class
name|UDFJson
extends|extends
name|UDF
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UDFJson
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Pattern
name|pattern_key
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^([a-zA-Z0-9_\\-]+).*"
argument_list|)
decl_stmt|;
specifier|private
name|Pattern
name|pattern_index
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\[([0-9]+|\\*)\\]"
argument_list|)
decl_stmt|;
name|Text
name|result
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|public
name|UDFJson
parameter_list|()
block|{   }
comment|/**    * Extract json object from a json string based on json path specified,    * and return json string of the extracted json object. It will return null    * if the input json string is invalid.    *    * A limited version of JSONPath supported:    *    $   : Root object    *    .   : Child operator    *    []  : Subscript operator for array    *    *   : Wildcard for []    *    * Syntax not supported that's worth noticing:    *    ''  : Zero length string as key    *    ..  : Recursive descent    *&amp;#064;   : Current object/element    *    ()  : Script expression    *    ?() : Filter (script) expression.    *    [,] : Union operator    *    [start:end:step] : array slice operator    *    * @param jsonText the json string.    * @param pathText the json path expression.    * @return json string or null when error happens.    */
specifier|public
name|Text
name|evaluate
parameter_list|(
name|Text
name|jsonText
parameter_list|,
name|Text
name|pathText
parameter_list|)
block|{
if|if
condition|(
name|jsonText
operator|==
literal|null
operator|||
name|pathText
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|jsonString
init|=
name|jsonText
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|pathString
init|=
name|pathText
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|String
index|[]
name|pathExpr
init|=
name|pathString
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pathExpr
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|extractObject
init|=
operator|new
name|JSONObject
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pathExpr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|extractObject
operator|=
name|extract
argument_list|(
name|extractObject
argument_list|,
name|pathExpr
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|extractObject
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|Object
name|extract
parameter_list|(
name|Object
name|json
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|JSONException
block|{
name|Matcher
name|m_key
init|=
name|pattern_key
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_key
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|json
operator|=
name|extract_json_withkey
argument_list|(
name|json
argument_list|,
name|m_key
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Matcher
name|m_index
init|=
name|pattern_index
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|index_list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|m_index
operator|.
name|find
argument_list|()
condition|)
block|{
name|index_list
operator|.
name|add
argument_list|(
name|m_index
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|index_list
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|json
operator|=
name|extract_json_withindex
argument_list|(
name|json
argument_list|,
name|index_list
argument_list|)
expr_stmt|;
block|}
return|return
name|json
return|;
block|}
specifier|private
name|Object
name|extract_json_withindex
parameter_list|(
name|Object
name|json
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|indexList
parameter_list|)
throws|throws
name|JSONException
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|jsonList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|jsonList
operator|.
name|add
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|indexList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|index
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|tmp_jsonList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|jsonList
operator|)
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|JSONArray
name|array
init|=
call|(
name|JSONArray
call|)
argument_list|(
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|jsonList
argument_list|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|array
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|tmp_jsonList
operator|.
name|add
argument_list|(
name|array
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
name|jsonList
operator|=
name|tmp_jsonList
expr_stmt|;
block|}
else|else
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|tmp_jsonList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|jsonList
operator|)
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|tmp_jsonList
operator|.
name|add
argument_list|(
operator|(
call|(
name|JSONArray
call|)
argument_list|(
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|jsonList
argument_list|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
continue|continue;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|jsonList
operator|=
name|tmp_jsonList
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|jsonList
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
condition|?
operator|new
name|JSONArray
argument_list|(
operator|(
name|Collection
operator|)
name|jsonList
argument_list|)
else|:
name|jsonList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
name|Object
name|extract_json_withkey
parameter_list|(
name|Object
name|json
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|JSONException
block|{
if|if
condition|(
name|json
operator|.
name|getClass
argument_list|()
operator|==
name|org
operator|.
name|json
operator|.
name|JSONArray
operator|.
name|class
condition|)
block|{
name|JSONArray
name|jsonArray
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
operator|(
name|JSONArray
operator|)
name|json
operator|)
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|josn_elem
init|=
operator|(
operator|(
name|JSONArray
operator|)
name|json
operator|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
block|{
name|Object
name|json_obj
init|=
operator|(
operator|(
name|JSONObject
operator|)
name|josn_elem
operator|)
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|json_obj
operator|.
name|getClass
argument_list|()
operator|==
name|org
operator|.
name|json
operator|.
name|JSONArray
operator|.
name|class
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
operator|(
operator|(
name|JSONArray
operator|)
name|json_obj
operator|)
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|jsonArray
operator|.
name|put
argument_list|(
operator|(
operator|(
name|JSONArray
operator|)
name|json_obj
operator|)
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|jsonArray
operator|.
name|put
argument_list|(
name|json_obj
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
return|return
operator|(
name|jsonArray
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|null
else|:
name|jsonArray
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|JSONObject
operator|)
name|json
operator|)
operator|.
name|get
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

