begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|MinMaxPriorityQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_comment
comment|/**  * Stores binary key/value in sorted manner to get top-n key/value  */
end_comment

begin_class
specifier|abstract
class|class
name|TopNHash
block|{
comment|/**    * For interaction between operator and top-n hash.    * Currently only used to forward key/values stored in hash.    */
specifier|public
specifier|static
interface|interface
name|BinaryCollector
extends|extends
name|OutputCollector
argument_list|<
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|>
block|{   }
specifier|protected
specifier|static
specifier|final
name|int
name|FORWARD
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|EXCLUDED
init|=
operator|-
literal|2
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|FLUSH
init|=
operator|-
literal|3
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|DISABLE
init|=
operator|-
literal|4
decl_stmt|;
specifier|protected
specifier|final
name|int
name|topN
decl_stmt|;
specifier|protected
specifier|final
name|BinaryCollector
name|collector
decl_stmt|;
specifier|protected
specifier|final
name|long
name|threshold
decl_stmt|;
comment|// max heap size
specifier|protected
name|long
name|usage
decl_stmt|;
comment|// heap usage (not exact)
comment|// binary keys, binary values and hashcodes of keys, lined up by index
specifier|protected
specifier|final
name|byte
index|[]
index|[]
name|keys
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
index|[]
name|values
decl_stmt|;
specifier|protected
specifier|final
name|int
index|[]
name|hashes
decl_stmt|;
specifier|protected
name|int
name|evicted
decl_stmt|;
comment|// recetly evicted index (the biggest one. used for next key/value)
specifier|protected
name|int
name|excluded
decl_stmt|;
comment|// count of excluded rows from previous flush
specifier|protected
specifier|final
name|Comparator
argument_list|<
name|Integer
argument_list|>
name|C
init|=
operator|new
name|Comparator
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Integer
name|o1
parameter_list|,
name|Integer
name|o2
parameter_list|)
block|{
name|byte
index|[]
name|key1
init|=
name|keys
index|[
name|o1
index|]
decl_stmt|;
name|byte
index|[]
name|key2
init|=
name|keys
index|[
name|o2
index|]
decl_stmt|;
return|return
name|WritableComparator
operator|.
name|compareBytes
argument_list|(
name|key1
argument_list|,
literal|0
argument_list|,
name|key1
operator|.
name|length
argument_list|,
name|key2
argument_list|,
literal|0
argument_list|,
name|key2
operator|.
name|length
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|TopNHash
name|create0
parameter_list|()
block|{
return|return
operator|new
name|HashForLimit0
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|TopNHash
name|create
parameter_list|(
name|boolean
name|grouped
parameter_list|,
name|int
name|topN
parameter_list|,
name|long
name|threshold
parameter_list|,
name|BinaryCollector
name|collector
parameter_list|)
block|{
if|if
condition|(
name|topN
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|HashForLimit0
argument_list|()
return|;
block|}
if|if
condition|(
name|grouped
condition|)
block|{
return|return
operator|new
name|HashForGroup
argument_list|(
name|topN
argument_list|,
name|threshold
argument_list|,
name|collector
argument_list|)
return|;
block|}
return|return
operator|new
name|HashForRow
argument_list|(
name|topN
argument_list|,
name|threshold
argument_list|,
name|collector
argument_list|)
return|;
block|}
name|TopNHash
parameter_list|(
name|int
name|topN
parameter_list|,
name|long
name|threshold
parameter_list|,
name|BinaryCollector
name|collector
parameter_list|)
block|{
name|this
operator|.
name|topN
operator|=
name|topN
expr_stmt|;
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
name|this
operator|.
name|collector
operator|=
name|collector
expr_stmt|;
name|this
operator|.
name|keys
operator|=
operator|new
name|byte
index|[
name|topN
operator|+
literal|1
index|]
index|[]
expr_stmt|;
name|this
operator|.
name|values
operator|=
operator|new
name|byte
index|[
name|topN
operator|+
literal|1
index|]
index|[]
expr_stmt|;
name|this
operator|.
name|hashes
operator|=
operator|new
name|int
index|[
name|topN
operator|+
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|evicted
operator|=
name|topN
expr_stmt|;
block|}
comment|/**    * returns index for key/value/hashcode if it's acceptable.    * -1, -2, -3, -4 can be returned for other actions.    *<p/>    * -1 for FORWARD   : should be forwarded to output collector (for GBY)    * -2 for EXCLUDED  : not in top-k. ignore it    * -3 for FLUSH     : memory is not enough. flush values (keep keys only)    * -4 for DISABLE   : hash is not effective. flush and disable it    */
specifier|public
name|int
name|indexOf
parameter_list|(
name|HiveKey
name|key
parameter_list|)
block|{
name|int
name|size
init|=
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|usage
operator|>
name|threshold
condition|)
block|{
return|return
name|excluded
operator|==
literal|0
condition|?
name|DISABLE
else|:
name|FLUSH
return|;
block|}
name|int
name|index
init|=
name|size
operator|<
name|topN
condition|?
name|size
else|:
name|evicted
decl_stmt|;
name|keys
index|[
name|index
index|]
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|hashes
index|[
name|index
index|]
operator|=
name|key
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|store
argument_list|(
name|index
argument_list|)
condition|)
block|{
comment|// it's only for GBY which should forward all values associated with the key in the range
comment|// of limit. new value should be attatched with the key but in current implementation,
comment|// only one values is allowed. with map-aggreagtion which is true by default,
comment|// this is not common case, so just forward new key/value and forget that (todo)
return|return
name|FORWARD
return|;
block|}
if|if
condition|(
name|size
operator|==
name|topN
condition|)
block|{
name|evicted
operator|=
name|removeBiggest
argument_list|()
expr_stmt|;
comment|// remove the biggest key
if|if
condition|(
name|index
operator|==
name|evicted
condition|)
block|{
name|excluded
operator|++
expr_stmt|;
return|return
name|EXCLUDED
return|;
comment|// input key is bigger than any of keys in hash
block|}
name|removed
argument_list|(
name|evicted
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
specifier|protected
specifier|abstract
name|int
name|size
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|store
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|int
name|removeBiggest
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|indexes
parameter_list|()
function_decl|;
comment|// key/value of the index is removed. retrieve memory usage
specifier|public
name|void
name|removed
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|usage
operator|-=
name|keys
index|[
name|index
index|]
operator|.
name|length
expr_stmt|;
name|keys
index|[
name|index
index|]
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|values
index|[
name|index
index|]
operator|!=
literal|null
condition|)
block|{
comment|// value can be null if hash is flushed, which only keeps keys for limiting rows
name|usage
operator|-=
name|values
index|[
name|index
index|]
operator|.
name|length
expr_stmt|;
name|values
index|[
name|index
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|hashes
index|[
name|index
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|BytesWritable
name|value
parameter_list|)
block|{
name|values
index|[
name|index
index|]
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|usage
operator|+=
name|keys
index|[
name|index
index|]
operator|.
name|length
operator|+
name|values
index|[
name|index
index|]
operator|.
name|length
expr_stmt|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|index
range|:
name|indexes
argument_list|()
control|)
block|{
name|flush
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|excluded
operator|=
literal|0
expr_stmt|;
block|}
specifier|protected
name|void
name|flush
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|!=
name|evicted
operator|&&
name|values
index|[
name|index
index|]
operator|!=
literal|null
condition|)
block|{
comment|// BytesWritable copies array for set method. So just creats new one
name|HiveKey
name|keyWritable
init|=
operator|new
name|HiveKey
argument_list|(
name|keys
index|[
name|index
index|]
argument_list|,
name|hashes
index|[
name|index
index|]
argument_list|)
decl_stmt|;
name|BytesWritable
name|valueWritable
init|=
operator|new
name|BytesWritable
argument_list|(
name|values
index|[
name|index
index|]
argument_list|)
decl_stmt|;
name|collector
operator|.
name|collect
argument_list|(
name|keyWritable
argument_list|,
name|valueWritable
argument_list|)
expr_stmt|;
name|usage
operator|-=
name|values
index|[
name|index
index|]
operator|.
name|length
expr_stmt|;
name|values
index|[
name|index
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**  * for order by, same keys are counted (For 1-2-2-3-4, limit 3 is 1-2-2)  * MinMaxPriorityQueue is used because it alows duplication and fast access to biggest one  */
end_comment

begin_class
class|class
name|HashForRow
extends|extends
name|TopNHash
block|{
specifier|private
specifier|final
name|MinMaxPriorityQueue
argument_list|<
name|Integer
argument_list|>
name|indexes
decl_stmt|;
name|HashForRow
parameter_list|(
name|int
name|topN
parameter_list|,
name|long
name|threshold
parameter_list|,
name|BinaryCollector
name|collector
parameter_list|)
block|{
name|super
argument_list|(
name|topN
argument_list|,
name|threshold
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexes
operator|=
name|MinMaxPriorityQueue
operator|.
name|orderedBy
argument_list|(
name|C
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|int
name|size
parameter_list|()
block|{
return|return
name|indexes
operator|.
name|size
argument_list|()
return|;
block|}
comment|// returns true always
specifier|protected
name|boolean
name|store
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|indexes
operator|.
name|add
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|protected
name|int
name|removeBiggest
parameter_list|()
block|{
return|return
name|indexes
operator|.
name|removeLast
argument_list|()
return|;
block|}
specifier|protected
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|indexes
parameter_list|()
block|{
name|Integer
index|[]
name|array
init|=
name|indexes
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|indexes
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|,
name|C
argument_list|)
expr_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|array
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|/**  * for group by, same keys are not counted (For 1-2-2-3-4, limit 3 is 1-2-(2)-3)  * simple TreeMap is used because group by does not need keep duplicated keys  */
end_comment

begin_class
class|class
name|HashForGroup
extends|extends
name|TopNHash
block|{
specifier|private
specifier|final
name|SortedSet
argument_list|<
name|Integer
argument_list|>
name|indexes
decl_stmt|;
name|HashForGroup
parameter_list|(
name|int
name|topN
parameter_list|,
name|long
name|threshold
parameter_list|,
name|BinaryCollector
name|collector
parameter_list|)
block|{
name|super
argument_list|(
name|topN
argument_list|,
name|threshold
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexes
operator|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|C
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|int
name|size
parameter_list|()
block|{
return|return
name|indexes
operator|.
name|size
argument_list|()
return|;
block|}
comment|// returns false if index already exists in map
specifier|protected
name|boolean
name|store
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|indexes
operator|.
name|add
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|protected
name|int
name|removeBiggest
parameter_list|()
block|{
name|Integer
name|last
init|=
name|indexes
operator|.
name|last
argument_list|()
decl_stmt|;
name|indexes
operator|.
name|remove
argument_list|(
name|last
argument_list|)
expr_stmt|;
return|return
name|last
return|;
block|}
specifier|protected
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|indexes
parameter_list|()
block|{
return|return
name|indexes
return|;
block|}
block|}
end_class

begin_class
class|class
name|HashForLimit0
extends|extends
name|TopNHash
block|{
name|HashForLimit0
parameter_list|()
block|{
name|super
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|indexOf
parameter_list|(
name|HiveKey
name|key
parameter_list|)
block|{
return|return
name|EXCLUDED
return|;
block|}
specifier|protected
name|int
name|size
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|protected
name|boolean
name|store
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|protected
name|int
name|removeBiggest
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|protected
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|indexes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
end_class

end_unit

