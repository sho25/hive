begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|optiq
operator|.
name|reloperators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|optiq
operator|.
name|RelOptHiveTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|optiq
operator|.
name|TraitsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|optiq
operator|.
name|cost
operator|.
name|HiveCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ColStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|TableAccessRelBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptCost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelTraitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|reltype
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * Relational expression representing a scan of a HiveDB collection.  *  *<p>  * Additional operations might be applied, using the "find" or "aggregate"  * methods.  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|HiveTableScanRel
extends|extends
name|TableAccessRelBase
implements|implements
name|HiveRel
block|{
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|ColStatistics
argument_list|>
name|m_hiveColStat
decl_stmt|;
comment|/**    * Creates a HiveTableScan.    *    * @param cluster    *          Cluster    * @param traitSet    *          Traits    * @param table    *          Table    * @param table    *          HiveDB table    */
specifier|public
name|HiveTableScanRel
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelOptHiveTable
name|table
parameter_list|,
name|RelDataType
name|rowtype
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|TraitsUtil
operator|.
name|getTableScanTraitSet
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|table
argument_list|,
name|rowtype
argument_list|)
argument_list|,
name|table
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|HiveRel
operator|.
name|CONVENTION
assert|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|ColStatistics
argument_list|>
name|b
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|ColStatistics
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fN
range|:
name|rowtype
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
name|ColStatistics
name|cStat
init|=
name|table
operator|.
name|getHiveStats
argument_list|()
operator|.
name|getColumnStatisticsForColumn
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|fN
argument_list|)
decl_stmt|;
name|b
operator|.
name|add
argument_list|(
name|cStat
argument_list|)
expr_stmt|;
block|}
name|m_hiveColStat
operator|=
name|b
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RelNode
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|List
argument_list|<
name|RelNode
argument_list|>
name|inputs
parameter_list|)
block|{
assert|assert
name|inputs
operator|.
name|isEmpty
argument_list|()
assert|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{
return|return
name|HiveCost
operator|.
name|FACTORY
operator|.
name|makeZeroCost
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|register
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|)
block|{    }
specifier|public
name|void
name|implement
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{    }
annotation|@
name|Override
specifier|public
name|double
name|getRows
parameter_list|()
block|{
return|return
operator|(
operator|(
name|RelOptHiveTable
operator|)
name|table
operator|)
operator|.
name|getRowCount
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|getColStat
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|projIndxLst
parameter_list|)
block|{
if|if
condition|(
name|projIndxLst
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ColStatistics
argument_list|>
name|hiveColStatLst
init|=
operator|new
name|LinkedList
argument_list|<
name|ColStatistics
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|i
range|:
name|projIndxLst
control|)
block|{
name|hiveColStatLst
operator|.
name|add
argument_list|(
name|m_hiveColStat
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|hiveColStatLst
return|;
block|}
else|else
block|{
return|return
name|m_hiveColStat
return|;
block|}
block|}
block|}
end_class

end_unit

