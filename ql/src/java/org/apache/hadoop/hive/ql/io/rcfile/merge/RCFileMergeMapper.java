begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|rcfile
operator|.
name|merge
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|merge
operator|.
name|MergeMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|CombineHiveKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|RCFileMergeMapper
extends|extends
name|MergeMapper
implements|implements
name|Mapper
argument_list|<
name|Object
argument_list|,
name|RCFileValueBufferWrapper
argument_list|,
name|Object
argument_list|,
name|Object
argument_list|>
block|{
name|RCFile
operator|.
name|Writer
name|outWriter
decl_stmt|;
name|CompressionCodec
name|codec
init|=
literal|null
decl_stmt|;
name|int
name|columnNumber
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"RCFileMergeMapper"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|map
parameter_list|(
name|Object
name|k
parameter_list|,
name|RCFileValueBufferWrapper
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|RCFileKeyBufferWrapper
name|key
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|k
operator|instanceof
name|CombineHiveKey
condition|)
block|{
name|key
operator|=
call|(
name|RCFileKeyBufferWrapper
call|)
argument_list|(
operator|(
name|CombineHiveKey
operator|)
name|k
argument_list|)
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|key
operator|=
operator|(
name|RCFileKeyBufferWrapper
operator|)
name|k
expr_stmt|;
block|}
name|fixTmpPathAlterTable
argument_list|(
name|key
operator|.
name|inputPath
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|outWriter
operator|==
literal|null
condition|)
block|{
name|codec
operator|=
name|key
operator|.
name|codec
expr_stmt|;
name|columnNumber
operator|=
name|key
operator|.
name|keyBuffer
operator|.
name|getColumnNumber
argument_list|()
expr_stmt|;
name|RCFileOutputFormat
operator|.
name|setColumnNumber
argument_list|(
name|jc
argument_list|,
name|columnNumber
argument_list|)
expr_stmt|;
name|outWriter
operator|=
operator|new
name|RCFile
operator|.
name|Writer
argument_list|(
name|fs
argument_list|,
name|jc
argument_list|,
name|outPath
argument_list|,
literal|null
argument_list|,
name|codec
argument_list|)
expr_stmt|;
block|}
name|boolean
name|sameCodec
init|=
operator|(
operator|(
name|codec
operator|==
name|key
operator|.
name|codec
operator|)
operator|||
name|codec
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|key
operator|.
name|codec
operator|.
name|getClass
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|key
operator|.
name|keyBuffer
operator|.
name|getColumnNumber
argument_list|()
operator|!=
name|columnNumber
operator|)
operator|||
operator|(
operator|!
name|sameCodec
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"RCFileMerge failed because the input files use different CompressionCodec or have different column number setting."
argument_list|)
throw|;
block|}
name|outWriter
operator|.
name|flushBlock
argument_list|(
name|key
operator|.
name|keyBuffer
argument_list|,
name|value
operator|.
name|valueBuffer
argument_list|,
name|key
operator|.
name|recordLength
argument_list|,
name|key
operator|.
name|keyLength
argument_list|,
name|key
operator|.
name|compressedKeyLength
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
literal|true
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// close writer
if|if
condition|(
name|outWriter
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|outWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|outWriter
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

