begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|history
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
import|;
end_import

begin_comment
comment|/**  * HiveHistory. Logs information such as query, query plan, runtime statistics  * into a file.  * Each session uses a new object, which creates a new file.  */
end_comment

begin_interface
specifier|public
interface|interface
name|HiveHistory
block|{
comment|/**    * RecordTypes.    *    */
specifier|public
specifier|static
enum|enum
name|RecordTypes
block|{
name|QueryStart
block|,
name|QueryEnd
block|,
name|TaskStart
block|,
name|TaskEnd
block|,
name|TaskProgress
block|,
name|SessionStart
block|,
name|SessionEnd
block|,
name|Counters
block|}
empty_stmt|;
comment|/**    * Keys.    *    */
specifier|public
specifier|static
enum|enum
name|Keys
block|{
name|SESSION_ID
block|,
name|QUERY_ID
block|,
name|TASK_ID
block|,
name|QUERY_RET_CODE
block|,
name|QUERY_NUM_TASKS
block|,
name|QUERY_STRING
block|,
name|TIME
block|,
name|TASK_RET_CODE
block|,
name|TASK_NAME
block|,
name|TASK_HADOOP_ID
block|,
name|TASK_HADOOP_PROGRESS
block|,
name|TASK_COUNTERS
block|,
name|TASK_NUM_MAPPERS
block|,
name|TASK_NUM_REDUCERS
block|,
name|ROWS_INSERTED
block|,
name|SPARK_JOB_HANDLE_ID
block|,
name|SPARK_JOB_ID
block|}
empty_stmt|;
comment|/**    * Listener interface.    * Parser will call handle function for each history record row, specifying    * the record type and its values    *    */
specifier|public
specifier|static
interface|interface
name|Listener
block|{
name|void
name|handle
parameter_list|(
name|RecordTypes
name|recType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Info.    *    */
specifier|public
specifier|static
class|class
name|Info
block|{    }
comment|/**    * SessionInfo.    *    */
specifier|public
specifier|static
class|class
name|SessionInfo
extends|extends
name|Info
block|{
specifier|public
name|String
name|sessionId
decl_stmt|;
block|}
empty_stmt|;
comment|/**    * QueryInfo.    *    */
specifier|public
specifier|static
class|class
name|QueryInfo
extends|extends
name|Info
block|{
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hm
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|rowCountMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
block|}
empty_stmt|;
comment|/**    * TaskDisplay.    *    */
specifier|public
specifier|static
class|class
name|TaskInfo
extends|extends
name|Info
block|{
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hm
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
block|}
empty_stmt|;
comment|/**    * @return historyFileName    */
specifier|public
name|String
name|getHistFileName
parameter_list|()
function_decl|;
comment|/**    * Called at the start of query execution in Driver.execute().    */
specifier|public
name|void
name|startQuery
parameter_list|(
name|String
name|cmd
parameter_list|,
name|String
name|id
parameter_list|)
function_decl|;
comment|/**    * Used to set query status and other attributes of a query    *    * @param queryId    * @param propName    * @param propValue    */
specifier|public
name|void
name|setQueryProperty
parameter_list|(
name|String
name|queryId
parameter_list|,
name|Keys
name|propName
parameter_list|,
name|String
name|propValue
parameter_list|)
function_decl|;
comment|/**    * Used to set task properties.    *    * @param taskId    * @param propName    * @param propValue    */
specifier|public
name|void
name|setTaskProperty
parameter_list|(
name|String
name|queryId
parameter_list|,
name|String
name|taskId
parameter_list|,
name|Keys
name|propName
parameter_list|,
name|String
name|propValue
parameter_list|)
function_decl|;
comment|/**    * Serialize the task counters and set as a task property.    *    * @param queryId    * @param taskId    * @param ctrs    */
specifier|public
name|void
name|setTaskCounters
parameter_list|(
name|String
name|queryId
parameter_list|,
name|String
name|taskId
parameter_list|,
name|Counters
name|ctrs
parameter_list|)
function_decl|;
specifier|public
name|void
name|printRowCount
parameter_list|(
name|String
name|queryId
parameter_list|)
function_decl|;
comment|/**    * Called at the end of a query    *    * @param queryId    */
specifier|public
name|void
name|endQuery
parameter_list|(
name|String
name|queryId
parameter_list|)
function_decl|;
comment|/**    * Called at the start of a task. Called by Driver.run() A query can have    * multiple tasks. Tasks will have multiple operator.    *    * @param task    */
specifier|public
name|void
name|startTask
parameter_list|(
name|String
name|queryId
parameter_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
parameter_list|,
name|String
name|taskName
parameter_list|)
function_decl|;
comment|/**    * Called at the end of a task.    *    * @param task    */
specifier|public
name|void
name|endTask
parameter_list|(
name|String
name|queryId
parameter_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
parameter_list|)
function_decl|;
comment|/**    * Logs progress of a task if ConfVars.HIVE_LOG_INCREMENTAL_PLAN_PROGRESS is    * set to true    *    * @param task    */
specifier|public
name|void
name|progressTask
parameter_list|(
name|String
name|queryId
parameter_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
parameter_list|)
function_decl|;
comment|/**    * Logs the current plan state    * @param plan    * @throws IOException    */
specifier|public
name|void
name|logPlanProgress
parameter_list|(
name|QueryPlan
name|plan
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Set the id to table name map    *    * @param map    */
specifier|public
name|void
name|setIdToTableMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
function_decl|;
comment|/**    * Close the log file stream    */
specifier|public
name|void
name|closeStream
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

