begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TopNKeyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TopNKeyOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|wrapper
operator|.
name|VectorHashKeyWrapperBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|wrapper
operator|.
name|VectorHashKeyWrapperBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TopNKeyDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorTopNKeyDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_comment
comment|/**  * VectorTopNKeyOperator passes rows that contains top N keys only.  */
end_comment

begin_class
specifier|public
class|class
name|VectorTopNKeyOperator
extends|extends
name|Operator
argument_list|<
name|TopNKeyDesc
argument_list|>
implements|implements
name|VectorizationOperator
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|VectorTopNKeyDesc
name|vectorDesc
decl_stmt|;
specifier|private
name|VectorizationContext
name|vContext
decl_stmt|;
comment|// Batch processing
specifier|private
specifier|transient
name|int
index|[]
name|temporarySelected
decl_stmt|;
specifier|private
specifier|transient
name|VectorHashKeyWrapperBatch
name|keyWrappersBatch
decl_stmt|;
specifier|private
specifier|transient
name|TopNKeyFilter
name|topNKeyFilter
decl_stmt|;
specifier|public
name|VectorTopNKeyOperator
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|,
name|OperatorDesc
name|conf
parameter_list|,
name|VectorizationContext
name|vContext
parameter_list|,
name|VectorDesc
name|vectorDesc
parameter_list|)
block|{
name|this
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
operator|(
name|TopNKeyDesc
operator|)
name|conf
expr_stmt|;
name|this
operator|.
name|vContext
operator|=
name|vContext
expr_stmt|;
name|this
operator|.
name|vectorDesc
operator|=
operator|(
name|VectorTopNKeyDesc
operator|)
name|vectorDesc
expr_stmt|;
block|}
comment|/** Kryo ctor. */
annotation|@
name|VisibleForTesting
specifier|public
name|VectorTopNKeyOperator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|VectorTopNKeyOperator
parameter_list|(
name|CompilationOpContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|initializeOp
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|VectorExpression
index|[]
name|keyExpressions
init|=
name|vectorDesc
operator|.
name|getKeyExpressions
argument_list|()
decl_stmt|;
name|VectorExpression
operator|.
name|doTransientInit
argument_list|(
name|keyExpressions
argument_list|,
name|hconf
argument_list|)
expr_stmt|;
for|for
control|(
name|VectorExpression
name|keyExpression
range|:
name|keyExpressions
control|)
block|{
name|keyExpression
operator|.
name|init
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
name|temporarySelected
operator|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|keyWrappersBatch
operator|=
name|VectorHashKeyWrapperBatch
operator|.
name|compileKeyWrapperBatch
argument_list|(
name|keyExpressions
argument_list|)
expr_stmt|;
name|this
operator|.
name|topNKeyFilter
operator|=
operator|new
name|TopNKeyFilter
argument_list|(
name|conf
operator|.
name|getTopN
argument_list|()
argument_list|,
name|keyWrappersBatch
operator|.
name|getComparator
argument_list|(
name|conf
operator|.
name|getColumnSortOrder
argument_list|()
argument_list|,
name|conf
operator|.
name|getNullOrder
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Object
name|data
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
name|VectorizedRowBatch
name|batch
init|=
operator|(
name|VectorizedRowBatch
operator|)
name|data
decl_stmt|;
comment|// The selected vector represents selected rows.
comment|// Clone the selected vector
name|System
operator|.
name|arraycopy
argument_list|(
name|batch
operator|.
name|selected
argument_list|,
literal|0
argument_list|,
name|temporarySelected
argument_list|,
literal|0
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
name|int
index|[]
name|selectedBackup
init|=
name|batch
operator|.
name|selected
decl_stmt|;
name|batch
operator|.
name|selected
operator|=
name|temporarySelected
expr_stmt|;
name|int
name|sizeBackup
init|=
name|batch
operator|.
name|size
decl_stmt|;
name|boolean
name|selectedInUseBackup
init|=
name|batch
operator|.
name|selectedInUse
decl_stmt|;
for|for
control|(
name|VectorExpression
name|keyExpression
range|:
name|vectorDesc
operator|.
name|getKeyExpressions
argument_list|()
control|)
block|{
name|keyExpression
operator|.
name|evaluate
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|keyWrappersBatch
operator|.
name|evaluateBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|VectorHashKeyWrapperBase
index|[]
name|keyWrappers
init|=
name|keyWrappersBatch
operator|.
name|getVectorHashKeyWrappers
argument_list|()
decl_stmt|;
comment|// Filter rows with top n keys
name|int
name|size
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|selected
init|=
operator|new
name|int
index|[
name|batch
operator|.
name|selected
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batch
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
decl_stmt|;
if|if
condition|(
name|batch
operator|.
name|selectedInUse
condition|)
block|{
name|j
operator|=
name|batch
operator|.
name|selected
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|j
operator|=
name|i
expr_stmt|;
block|}
comment|// Select a row in the priority queue
if|if
condition|(
name|topNKeyFilter
operator|.
name|canForward
argument_list|(
name|keyWrappers
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|selected
index|[
name|size
operator|++
index|]
operator|=
name|j
expr_stmt|;
block|}
block|}
comment|// Apply selection to batch
if|if
condition|(
name|batch
operator|.
name|size
operator|!=
name|size
condition|)
block|{
name|batch
operator|.
name|selectedInUse
operator|=
literal|true
expr_stmt|;
name|batch
operator|.
name|selected
operator|=
name|selected
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
comment|// Forward the result
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|vectorForward
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
comment|// Restore the original selected vector
name|batch
operator|.
name|selected
operator|=
name|selectedBackup
expr_stmt|;
name|batch
operator|.
name|size
operator|=
name|sizeBackup
expr_stmt|;
name|batch
operator|.
name|selectedInUse
operator|=
name|selectedInUseBackup
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|VectorizationContext
name|getInputVectorizationContext
parameter_list|()
block|{
return|return
name|vContext
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorDesc
name|getVectorDesc
parameter_list|()
block|{
return|return
name|vectorDesc
return|;
block|}
comment|// Must send on to VectorPTFOperator...
annotation|@
name|Override
specifier|public
name|void
name|setNextVectorBatchGroupStatus
parameter_list|(
name|boolean
name|isLastGroupBatch
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|childOperators
control|)
block|{
name|op
operator|.
name|setNextVectorBatchGroupStatus
argument_list|(
name|isLastGroupBatch
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|TopNKeyOperator
operator|.
name|getOperatorName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|TOPNKEY
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|closeOp
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing TopNKeyFilter: {}."
argument_list|,
name|topNKeyFilter
argument_list|)
expr_stmt|;
name|topNKeyFilter
operator|.
name|clear
argument_list|()
expr_stmt|;
name|super
operator|.
name|closeOp
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
comment|// Because a TopNKeyOperator works like a FilterOperator with top n key condition, its properties
comment|// for optimizers has same values. Following methods are same with FilterOperator;
comment|// supportSkewJoinOptimization, columnNamesRowResolvedCanBeObtained,
comment|// supportAutomaticSortMergeJoin, and supportUnionRemoveOptimization.
annotation|@
name|Override
specifier|public
name|boolean
name|supportSkewJoinOptimization
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|columnNamesRowResolvedCanBeObtained
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportAutomaticSortMergeJoin
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportUnionRemoveOptimization
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

