begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|ForwardWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|PreOrderOnceWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|TypeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFIn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_comment
comment|/**  * This optimization will take a Filter expression, and if its predicate contains  * an IN operator whose children are constant structs or structs containing constant fields,  * it will try to generate predicate with IN clauses containing only partition columns.  * This predicate is in turn used by the partition pruner to prune the columns that are not  * part of the original IN(STRUCT(..)..) predicate.  */
end_comment

begin_class
specifier|public
class|class
name|PartitionColumnsSeparator
extends|extends
name|Transform
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PartitionColumnsSeparator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|IN_UDF
init|=
name|GenericUDFIn
operator|.
name|class
operator|.
name|getAnnotation
argument_list|(
name|Description
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|STRUCT_UDF
init|=
name|GenericUDFStruct
operator|.
name|class
operator|.
name|getAnnotation
argument_list|(
name|Description
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|AND_UDF
init|=
name|GenericUDFOPAnd
operator|.
name|class
operator|.
name|getAnnotation
argument_list|(
name|Description
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ParseContext
name|transform
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// 1. Trigger transformation
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
literal|"R1"
argument_list|,
name|FilterOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
operator|new
name|StructInTransformer
argument_list|()
argument_list|)
expr_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
literal|null
argument_list|,
name|opRules
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|ForwardWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pctx
operator|.
name|getTopOps
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|pctx
return|;
block|}
specifier|private
class|class
name|StructInTransformer
implements|implements
name|NodeProcessor
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|FilterOperator
name|filterOp
init|=
operator|(
name|FilterOperator
operator|)
name|nd
decl_stmt|;
name|ExprNodeDesc
name|predicate
init|=
name|filterOp
operator|.
name|getConf
argument_list|()
operator|.
name|getPredicate
argument_list|()
decl_stmt|;
comment|// Generate the list bucketing pruning predicate as 2 separate IN clauses
comment|// containing the partitioning and non-partitioning columns.
name|ExprNodeDesc
name|newPredicate
init|=
name|generateInClauses
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
if|if
condition|(
name|newPredicate
operator|!=
literal|null
condition|)
block|{
comment|// Replace filter in current FIL with new FIL
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated new predicate with IN clause: "
operator|+
name|newPredicate
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|subExpr
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|subExpr
operator|.
name|add
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
name|subExpr
operator|.
name|add
argument_list|(
name|newPredicate
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|newFilterPredicate
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|AND_UDF
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|subExpr
argument_list|)
decl_stmt|;
name|filterOp
operator|.
name|getConf
argument_list|()
operator|.
name|setPredicate
argument_list|(
name|newFilterPredicate
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|ExprNodeDesc
name|generateInClauses
parameter_list|(
name|ExprNodeDesc
name|predicate
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|exprRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|exprRules
operator|.
name|put
argument_list|(
operator|new
name|TypeRule
argument_list|(
name|ExprNodeGenericFuncDesc
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|StructInExprProcessor
argument_list|()
argument_list|)
expr_stmt|;
comment|// The dispatcher fires the processor corresponding to the closest matching
comment|// rule and passes the context along
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
literal|null
argument_list|,
name|exprRules
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|egw
init|=
operator|new
name|PreOrderOnceWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Node
argument_list|>
name|startNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|startNodes
operator|.
name|add
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|outputMap
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|egw
operator|.
name|startWalking
argument_list|(
name|startNodes
argument_list|,
name|outputMap
argument_list|)
expr_stmt|;
return|return
operator|(
name|ExprNodeDesc
operator|)
name|outputMap
operator|.
name|get
argument_list|(
name|predicate
argument_list|)
return|;
block|}
block|}
comment|/**    * The StructInExprProcessor processes the IN clauses of the following format :    * STRUCT(T1.a, T1.b, T2.b, T2.c) IN (STRUCT(1, 2, 3, 4) , STRUCT(2, 3, 4, 5))    * where T1.a, T1.b, T2.c are all partition columns and T2.b is a non-partition    * column. The resulting additional predicate generated after    * StructInExprProcessor.process() looks like :    *    STRUCT(T1.a, T1.b) IN (STRUCT(1, 2), STRUCT(2, 3))    *    AND    *    STRUCT(T2.b) IN (STRUCT(4), STRUCT(5))    * The additional predicate generated is used to prune the partitions that are    * part of the given query. Once the partitions are pruned, the partition condition    * remover is expected to remove the redundant predicates from the plan.    */
specifier|private
class|class
name|StructInExprProcessor
implements|implements
name|NodeProcessor
block|{
comment|/** TableInfo is populated in PASS 1 of process(). It contains the information required      * to generate an IN clause of the following format:      * STRUCT(T1.a, T1.b) IN (const STRUCT(1, 2), const STRUCT(2, 3))      * In the above e.g. please note that all elements of the struct come from the same table.      * The populated TableStructInfo is used to generate the IN clause in PASS 2 of process().      * The table struct information class has the following fields:      * 1. Expression Node Descriptor for the Left Hand Side of the IN clause for the table      * 2. 2-D List of expression node descriptors which corresponds to the elements of IN clause      */
class|class
name|TableInfo
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|exprNodeLHSDescriptor
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|exprNodeRHSStructs
decl_stmt|;
specifier|public
name|TableInfo
parameter_list|()
block|{
name|exprNodeLHSDescriptor
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
expr_stmt|;
name|exprNodeRHSStructs
operator|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Mapping from expression node to is an expression containing only
comment|// partition or virtual column or constants
specifier|private
name|Map
argument_list|<
name|ExprNodeDesc
argument_list|,
name|Boolean
argument_list|>
name|exprNodeToPartOrVirtualColOrConstExpr
init|=
operator|new
name|IdentityHashMap
argument_list|<
name|ExprNodeDesc
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * This function iterates through the entire subtree under a given expression node      * and makes sure that the expression contain only constant nodes or      * partition/virtual columns as leaf nodes.      * @param en Expression Node Descriptor for the root node.      * @return true if the subtree rooted under en has only partition/virtual columns or      * constant values as the leaf nodes. Else, return false.      */
specifier|private
name|boolean
name|exprContainsOnlyPartitionColOrVirtualColOrConstants
parameter_list|(
name|ExprNodeDesc
name|en
parameter_list|)
block|{
if|if
condition|(
name|en
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|exprNodeToPartOrVirtualColOrConstExpr
operator|.
name|containsKey
argument_list|(
name|en
argument_list|)
condition|)
block|{
return|return
name|exprNodeToPartOrVirtualColOrConstExpr
operator|.
name|get
argument_list|(
name|en
argument_list|)
return|;
block|}
if|if
condition|(
name|en
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|boolean
name|ret
init|=
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|en
operator|)
operator|.
name|getIsPartitionColOrVirtualCol
argument_list|()
decl_stmt|;
name|exprNodeToPartOrVirtualColOrConstExpr
operator|.
name|put
argument_list|(
name|en
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
if|if
condition|(
name|en
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|cn
range|:
name|en
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|exprContainsOnlyPartitionColOrVirtualColOrConstants
argument_list|(
name|cn
argument_list|)
condition|)
block|{
name|exprNodeToPartOrVirtualColOrConstExpr
operator|.
name|put
argument_list|(
name|en
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
name|exprNodeToPartOrVirtualColOrConstExpr
operator|.
name|put
argument_list|(
name|en
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Check if the expression node satisfies the following :      * Has atleast one subexpression containing a partition/virtualcolumn and has      * exactly refer to a single table alias.      * @param en Expression Node Descriptor      * @return true if there is atleast one subexpression with partition/virtual column      * and has exactly refer to a single table alias. If not, return false.      */
specifier|private
name|boolean
name|hasAtleastOneSubExprWithPartColOrVirtualColWithOneTableAlias
parameter_list|(
name|ExprNodeDesc
name|en
parameter_list|)
block|{
if|if
condition|(
name|en
operator|==
literal|null
operator|||
name|en
operator|.
name|getChildren
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|ExprNodeDesc
name|cn
range|:
name|en
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|exprContainsOnlyPartitionColOrVirtualColOrConstants
argument_list|(
name|cn
argument_list|)
operator|&&
name|getTableAlias
argument_list|(
name|cn
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Check if the expression node satisfies the following :      * Has all subexpressions containing constants or a partition/virtual column/coming from the      * same table      * @param en Expression Node Descriptor      * @return true/false based on the condition specified in the above description.      */
specifier|private
name|boolean
name|hasAllSubExprWithConstOrPartColOrVirtualColWithOneTableAlias
parameter_list|(
name|ExprNodeDesc
name|en
parameter_list|)
block|{
if|if
condition|(
operator|!
name|exprContainsOnlyPartitionColOrVirtualColOrConstants
argument_list|(
name|en
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|s
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ExprNodeDesc
argument_list|>
name|visited
init|=
operator|new
name|HashSet
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
return|return
name|getTableAliasHelper
argument_list|(
name|en
argument_list|,
name|s
argument_list|,
name|visited
argument_list|)
return|;
block|}
comment|/**      * Return the expression node descriptor if the input expression node is a GenericUDFIn.      * Else, return null.      * @param en Expression Node Descriptor      * @return The expression node descriptor if the input expression node represents an IN clause.      * Else, return null.      */
specifier|private
name|ExprNodeGenericFuncDesc
name|getInExprNode
parameter_list|(
name|ExprNodeDesc
name|en
parameter_list|)
block|{
if|if
condition|(
name|en
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|en
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|&&
operator|(
call|(
name|ExprNodeGenericFuncDesc
call|)
argument_list|(
name|en
argument_list|)
operator|)
operator|.
name|getGenericUDF
argument_list|()
operator|instanceof
name|GenericUDFIn
condition|)
block|{
return|return
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|en
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Helper used by getTableAlias      * @param en Expression Node Descriptor      * @param s Set of the table Aliases associated with the current Expression node.      * @param visited Visited ExpressionNode set.      * @return true if en has at most one table associated with it, else return false.      */
specifier|private
name|boolean
name|getTableAliasHelper
parameter_list|(
name|ExprNodeDesc
name|en
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|s
parameter_list|,
name|Set
argument_list|<
name|ExprNodeDesc
argument_list|>
name|visited
parameter_list|)
block|{
name|visited
operator|.
name|add
argument_list|(
name|en
argument_list|)
expr_stmt|;
comment|// The current expression node is a column, see if the column alias is already a part of
comment|// the return set, s. If not and we already have an entry in set s, this is an invalid expression
comment|// and return false.
if|if
condition|(
name|en
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|s
operator|.
name|contains
argument_list|(
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|en
operator|)
operator|.
name|getTabAlias
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|s
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|s
operator|.
name|add
argument_list|(
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|en
operator|)
operator|.
name|getTabAlias
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|en
operator|.
name|getChildren
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Iterative through the children in a DFS manner to see if there is more than 1 table alias
comment|// referenced by the current expression node.
for|for
control|(
name|ExprNodeDesc
name|cn
range|:
name|en
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|visited
operator|.
name|contains
argument_list|(
name|cn
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|cn
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|s
operator|.
name|add
argument_list|(
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|cn
operator|)
operator|.
name|getTabAlias
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|cn
operator|instanceof
name|ExprNodeConstantDesc
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|getTableAliasHelper
argument_list|(
name|cn
argument_list|,
name|s
argument_list|,
name|visited
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * If the given expression has just a single table associated with it,      * return the table alias associated with it. Else, return null.      * @param en      * @return The table alias associated with the expression if there is a single table      * reference. Else, return null.      */
specifier|private
name|String
name|getTableAlias
parameter_list|(
name|ExprNodeDesc
name|en
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|s
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ExprNodeDesc
argument_list|>
name|visited
init|=
operator|new
name|HashSet
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|singleTableAlias
init|=
name|getTableAliasHelper
argument_list|(
name|en
argument_list|,
name|s
argument_list|,
name|visited
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|singleTableAlias
operator|||
name|s
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|ans
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|st
range|:
name|s
control|)
block|{
name|ans
operator|.
name|append
argument_list|(
name|st
argument_list|)
expr_stmt|;
block|}
return|return
name|ans
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * The main process method for StructInExprProcessor to generate additional predicates      * containing only partition columns.      */
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ExprNodeGenericFuncDesc
name|fd
init|=
name|getInExprNode
argument_list|(
operator|(
name|ExprNodeDesc
operator|)
name|nd
argument_list|)
decl_stmt|;
comment|/***************************************************************************************\        BEGIN : Early terminations for Partition Column Separator       /***************************************************************************************/
comment|// 1. If the input node is not an IN operator, we bail out.
if|if
condition|(
name|fd
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Partition columns not separated for "
operator|+
name|fd
operator|+
literal|", is not IN operator : "
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|// 2. Check if the input is an IN operator with struct children
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|fd
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
operator|||
operator|(
operator|!
operator|(
operator|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getGenericUDF
argument_list|()
operator|instanceof
name|GenericUDFStruct
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Partition columns not separated for "
operator|+
name|fd
operator|+
literal|", children size "
operator|+
name|children
operator|.
name|size
argument_list|()
operator|+
literal|", child expression : "
operator|+
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getExprString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|// 3. See if the IN (STRUCT(EXP1, EXP2,..) has atleast one expression with partition
comment|// column with single table alias. If not bail out.
comment|// We might have expressions containing only partitioning columns, say, T1.A + T2.B
comment|// where T1.A and T2.B are both partitioning columns.
comment|// However, these expressions should not be considered as valid expressions for separation.
if|if
condition|(
operator|!
name|hasAtleastOneSubExprWithPartColOrVirtualColWithOneTableAlias
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Partition columns not separated for "
operator|+
name|fd
operator|+
literal|", there are no expression containing partition columns in struct fields"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|// 4. See if all the field expressions of the left hand side of IN are expressions
comment|// containing constants or only partition columns coming from same table.
comment|// If so, we need not perform this optimization and we should bail out.
if|if
condition|(
name|hasAllSubExprWithConstOrPartColOrVirtualColWithOneTableAlias
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Partition columns not separated for "
operator|+
name|fd
operator|+
literal|", all fields are expressions containing constants or only partition columns"
operator|+
literal|"coming from same table"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/***************************************************************************************\        END : Early terminations for Partition Column Separator       /***************************************************************************************/
comment|/***************************************************************************************\        BEGIN : Actual processing of the IN (STRUCT(..)) expression.       /***************************************************************************************/
name|Map
argument_list|<
name|String
argument_list|,
name|TableInfo
argument_list|>
name|tableAliasToInfo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|originalStructDesc
init|=
operator|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|originalDescChildren
init|=
name|originalStructDesc
operator|.
name|getChildren
argument_list|()
decl_stmt|;
comment|/**        * PASS 1 : Iterate through the original IN(STRUCT(..)) and populate the tableAlias to        * predicate information inside tableAliasToInfo.        */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalDescChildren
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeDesc
name|en
init|=
name|originalDescChildren
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|tabAlias
init|=
literal|null
decl_stmt|;
comment|// If the current expression node does not have a virtual/partition column or
comment|// single table alias reference, ignore it and move to the next expression node.
if|if
condition|(
operator|!
name|exprContainsOnlyPartitionColOrVirtualColOrConstants
argument_list|(
name|en
argument_list|)
operator|||
operator|(
name|tabAlias
operator|=
name|getTableAlias
argument_list|(
name|en
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|TableInfo
name|currTableInfo
init|=
literal|null
decl_stmt|;
comment|// If the table alias to information map already contains the current table,
comment|// use the existing TableInfo object. Else, create a new one.
if|if
condition|(
name|tableAliasToInfo
operator|.
name|containsKey
argument_list|(
name|tabAlias
argument_list|)
condition|)
block|{
name|currTableInfo
operator|=
name|tableAliasToInfo
operator|.
name|get
argument_list|(
name|tabAlias
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currTableInfo
operator|=
operator|new
name|TableInfo
argument_list|()
expr_stmt|;
block|}
name|currTableInfo
operator|.
name|exprNodeLHSDescriptor
operator|.
name|add
argument_list|(
name|en
argument_list|)
expr_stmt|;
comment|// Iterate through the children nodes of the IN clauses starting from index 1,
comment|// which corresponds to the right hand side of the IN list.
comment|// Insert the value corresponding to the current expression in currExprNodeInfo.exprNodeValues.
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|ExprNodeDesc
name|currChildStructExpr
init|=
name|children
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|newConstStructElement
init|=
literal|null
decl_stmt|;
comment|// 1. Get the constant value associated with the current element in the struct.
comment|// If the current child struct expression is a constant struct.
if|if
condition|(
name|currChildStructExpr
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|cnCols
init|=
call|(
name|List
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
operator|(
call|(
name|ExprNodeConstantDesc
call|)
argument_list|(
name|children
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|newConstStructElement
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|cnCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This better be a generic struct with constant values as the children.
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|cnChildren
init|=
operator|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|children
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|)
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|newConstStructElement
operator|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
operator|(
operator|(
call|(
name|ExprNodeConstantDesc
call|)
argument_list|(
name|cnChildren
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// 2. Insert the current constant value into exprNodeStructs list.
comment|// If there is no struct corresponding to the current element, create a new one, insert
comment|// the constant value into it and add the struct as part of exprNodeStructs.
if|if
condition|(
name|currTableInfo
operator|.
name|exprNodeRHSStructs
operator|.
name|size
argument_list|()
operator|<
name|j
condition|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|newConstStructList
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|newConstStructList
operator|.
name|add
argument_list|(
name|newConstStructElement
argument_list|)
expr_stmt|;
name|currTableInfo
operator|.
name|exprNodeRHSStructs
operator|.
name|add
argument_list|(
name|newConstStructList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We already have a struct node for the current index. Insert the constant value
comment|// into the corresponding struct node.
name|currTableInfo
operator|.
name|exprNodeRHSStructs
operator|.
name|get
argument_list|(
name|j
operator|-
literal|1
argument_list|)
operator|.
name|add
argument_list|(
name|newConstStructElement
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Insert the current table alias entry into the map if not already present in tableAliasToInfo.
if|if
condition|(
operator|!
name|tableAliasToInfo
operator|.
name|containsKey
argument_list|(
name|tabAlias
argument_list|)
condition|)
block|{
name|tableAliasToInfo
operator|.
name|put
argument_list|(
name|tabAlias
argument_list|,
name|currTableInfo
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * PASS 2 : Iterate through the tableAliasToInfo populated via PASS 1        * to generate the new expression.        */
comment|// subExpr is the list containing generated IN clauses as a result of this optimization.
specifier|final
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|subExpr
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|(
name|originalDescChildren
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|TableInfo
argument_list|>
name|entry
range|:
name|tableAliasToInfo
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TableInfo
name|currTableInfo
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|>
name|currConstStructList
init|=
name|currTableInfo
operator|.
name|exprNodeRHSStructs
decl_stmt|;
comment|// IN(STRUCT(..)..) ExprNodeDesc list for the current table alias.
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|currInStructExprList
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
comment|// Add the left hand side of the IN clause which contains the struct definition.
name|currInStructExprList
operator|.
name|add
argument_list|(
name|ExprNodeGenericFuncDesc
operator|.
name|newInstance
argument_list|(
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|STRUCT_UDF
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|STRUCT_UDF
argument_list|,
name|currTableInfo
operator|.
name|exprNodeLHSDescriptor
argument_list|)
argument_list|)
expr_stmt|;
comment|// Generate the right hand side of the IN clause
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currConstStructList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|currConstStruct
init|=
name|currConstStructList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Add the current constant struct to the right hand side of the IN clause.
name|currInStructExprList
operator|.
name|add
argument_list|(
name|ExprNodeGenericFuncDesc
operator|.
name|newInstance
argument_list|(
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|STRUCT_UDF
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|STRUCT_UDF
argument_list|,
name|currConstStruct
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add the newly generated IN clause to subExpr.
name|subExpr
operator|.
name|add
argument_list|(
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|IN_UDF
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|currInStructExprList
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/***************************************************************************************\        END : Actual processing of the IN (STRUCT(..)) expression.       /***************************************************************************************/
comment|// If there is only 1 table ALIAS, return it
if|if
condition|(
name|subExpr
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Return the new expression containing only partition columns
return|return
name|subExpr
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|// Return the new expression containing only partition columns
comment|// after concatenating them with AND operator
return|return
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|AND_UDF
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|subExpr
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

