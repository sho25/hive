begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|database
operator|.
name|showcreate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveStringUtils
import|;
end_import

begin_comment
comment|/**  * Operation process showing the creation of a database.  */
end_comment

begin_class
specifier|public
class|class
name|ShowCreateDatabaseOperation
extends|extends
name|DDLOperation
argument_list|<
name|ShowCreateDatabaseDesc
argument_list|>
block|{
specifier|public
name|ShowCreateDatabaseOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|ShowCreateDatabaseDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
name|DataOutputStream
name|outStream
init|=
name|DDLUtils
operator|.
name|getOutputStream
argument_list|(
name|desc
operator|.
name|getResFile
argument_list|()
argument_list|,
name|context
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|showCreateDatabase
argument_list|(
name|outStream
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|showCreateDatabase
parameter_list|(
name|DataOutputStream
name|outStream
parameter_list|)
throws|throws
name|Exception
block|{
name|Database
name|database
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|desc
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|createDbCommand
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|createDbCommand
operator|.
name|append
argument_list|(
literal|"CREATE DATABASE `"
argument_list|)
operator|.
name|append
argument_list|(
name|database
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"`\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|database
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|createDbCommand
operator|.
name|append
argument_list|(
literal|"COMMENT\n  '"
argument_list|)
expr_stmt|;
name|createDbCommand
operator|.
name|append
argument_list|(
name|HiveStringUtils
operator|.
name|escapeHiveCommand
argument_list|(
name|database
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"'\n"
argument_list|)
expr_stmt|;
block|}
name|createDbCommand
operator|.
name|append
argument_list|(
literal|"LOCATION\n  '"
argument_list|)
expr_stmt|;
name|createDbCommand
operator|.
name|append
argument_list|(
name|database
operator|.
name|getLocationUri
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"'\n"
argument_list|)
expr_stmt|;
name|String
name|propertiesToString
init|=
name|DDLUtils
operator|.
name|propertiesToString
argument_list|(
name|database
operator|.
name|getParameters
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propertiesToString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|createDbCommand
operator|.
name|append
argument_list|(
literal|"WITH DBPROPERTIES (\n"
argument_list|)
expr_stmt|;
name|createDbCommand
operator|.
name|append
argument_list|(
name|propertiesToString
argument_list|)
operator|.
name|append
argument_list|(
literal|")\n"
argument_list|)
expr_stmt|;
block|}
name|outStream
operator|.
name|write
argument_list|(
name|createDbCommand
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

