begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|BucketCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_comment
comment|/**  * GenericUDFValidateAcidSortOrder.  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"validate_acid_sort_order(ROW__ID.writeId, ROW__ID.bucketId, ROW__ID.rowId)"
argument_list|,
name|value
operator|=
literal|"_FUNC_(writeId, bucketId, rowId) - returns 0 if the current row is in the right acid sort order "
operator|+
literal|"compared to the previous row"
argument_list|)
specifier|public
class|class
name|GenericUDFValidateAcidSortOrder
extends|extends
name|GenericUDF
block|{
specifier|public
specifier|static
specifier|final
name|String
name|UDF_NAME
init|=
literal|"validate_acid_sort_order"
decl_stmt|;
specifier|private
specifier|transient
name|PrimitiveCategory
index|[]
name|inputTypes
init|=
operator|new
name|PrimitiveCategory
index|[
literal|3
index|]
decl_stmt|;
specifier|private
specifier|transient
name|Converter
index|[]
name|converters
init|=
operator|new
name|Converter
index|[
literal|3
index|]
decl_stmt|;
specifier|private
specifier|final
name|LongWritable
name|output
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
comment|// See {@link org.apache.hadoop.hive.ql.exec.tez.SplitGrouper#getCompactorGroups}
comment|// Each writer is handling only one logical bucket (i.e. all files with same bucket number end up in one writer)
specifier|private
name|int
name|bucketNumForWriter
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|WriteIdRowId
name|previousWriteIdRowId
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|checkArgsSize
argument_list|(
name|arguments
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkArgPrimitive
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkArgPrimitive
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkArgPrimitive
argument_list|(
name|arguments
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|obtainLongConverter
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|inputTypes
argument_list|,
name|converters
argument_list|)
expr_stmt|;
name|obtainIntConverter
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
name|inputTypes
argument_list|,
name|converters
argument_list|)
expr_stmt|;
name|obtainLongConverter
argument_list|(
name|arguments
argument_list|,
literal|2
argument_list|,
name|inputTypes
argument_list|,
name|converters
argument_list|)
expr_stmt|;
name|ObjectInspector
name|outputOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
decl_stmt|;
return|return
name|outputOI
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|long
name|writeId
init|=
name|getLongValue
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|,
name|converters
argument_list|)
decl_stmt|;
name|int
name|bucketProperty
init|=
name|getIntValue
argument_list|(
name|arguments
argument_list|,
literal|1
argument_list|,
name|converters
argument_list|)
decl_stmt|;
name|int
name|bucketNum
init|=
name|BucketCodec
operator|.
name|determineVersion
argument_list|(
name|bucketProperty
argument_list|)
operator|.
name|decodeWriterId
argument_list|(
name|bucketProperty
argument_list|)
decl_stmt|;
name|long
name|rowId
init|=
name|getLongValue
argument_list|(
name|arguments
argument_list|,
literal|2
argument_list|,
name|converters
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucketNumForWriter
operator|<
literal|0
condition|)
block|{
name|bucketNumForWriter
operator|=
name|bucketNum
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|bucketNumForWriter
operator|!=
name|bucketNum
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"One writer is supposed to handle only one bucket. We saw these 2 different buckets: "
operator|+
name|bucketNumForWriter
operator|+
literal|" and "
operator|+
name|bucketNum
argument_list|)
throw|;
block|}
block|}
name|WriteIdRowId
name|current
init|=
operator|new
name|WriteIdRowId
argument_list|(
name|bucketProperty
argument_list|,
name|writeId
argument_list|,
name|rowId
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousWriteIdRowId
operator|!=
literal|null
condition|)
block|{
comment|// Verify sort order for this new row
if|if
condition|(
name|current
operator|.
name|compareTo
argument_list|(
name|previousWriteIdRowId
argument_list|)
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Wrong sort order of Acid rows detected for the rows: "
operator|+
name|previousWriteIdRowId
operator|+
literal|" and "
operator|+
name|current
argument_list|)
throw|;
block|}
block|}
name|previousWriteIdRowId
operator|=
name|current
expr_stmt|;
name|output
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
return|return
name|getStandardDisplayString
argument_list|(
literal|"validate_acid_sort_order"
argument_list|,
name|children
argument_list|)
return|;
block|}
specifier|final
specifier|static
class|class
name|WriteIdRowId
implements|implements
name|Comparable
argument_list|<
name|WriteIdRowId
argument_list|>
block|{
specifier|final
name|int
name|bucketProperty
decl_stmt|;
specifier|final
name|long
name|writeId
decl_stmt|;
specifier|final
name|long
name|rowId
decl_stmt|;
name|WriteIdRowId
parameter_list|(
name|int
name|bucketProperty
parameter_list|,
name|long
name|writeId
parameter_list|,
name|long
name|rowId
parameter_list|)
block|{
name|this
operator|.
name|bucketProperty
operator|=
name|bucketProperty
expr_stmt|;
name|this
operator|.
name|writeId
operator|=
name|writeId
expr_stmt|;
name|this
operator|.
name|rowId
operator|=
name|rowId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|WriteIdRowId
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|bucketProperty
operator|!=
name|other
operator|.
name|bucketProperty
condition|)
block|{
return|return
name|this
operator|.
name|bucketProperty
operator|<
name|other
operator|.
name|bucketProperty
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
if|if
condition|(
name|this
operator|.
name|writeId
operator|!=
name|other
operator|.
name|writeId
condition|)
block|{
return|return
name|this
operator|.
name|writeId
operator|<
name|other
operator|.
name|writeId
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
if|if
condition|(
name|this
operator|.
name|rowId
operator|!=
name|other
operator|.
name|rowId
condition|)
block|{
return|return
name|this
operator|.
name|rowId
operator|<
name|other
operator|.
name|rowId
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

