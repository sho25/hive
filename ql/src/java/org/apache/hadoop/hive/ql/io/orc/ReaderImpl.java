begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|DiskRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|FileFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcFile
operator|.
name|WriterVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcProto
operator|.
name|Footer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcProto
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcProto
operator|.
name|UserMetadataItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|RecordReaderImpl
operator|.
name|BufferChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|JavaDataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_class
specifier|public
class|class
name|ReaderImpl
implements|implements
name|Reader
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReaderImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DIRECTORY_SIZE_GUESS
init|=
literal|16
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_PROTOBUF_MESSAGE_LIMIT
init|=
literal|64
operator|<<
literal|20
decl_stmt|;
comment|// 64MB
specifier|private
specifier|static
specifier|final
name|int
name|PROTOBUF_MESSAGE_MAX_LIMIT
init|=
literal|1024
operator|<<
literal|20
decl_stmt|;
comment|// 1GB
specifier|protected
specifier|final
name|FileSystem
name|fileSystem
decl_stmt|;
specifier|protected
specifier|final
name|Path
name|path
decl_stmt|;
specifier|protected
specifier|final
name|CompressionKind
name|compressionKind
decl_stmt|;
specifier|protected
specifier|final
name|CompressionCodec
name|codec
decl_stmt|;
specifier|protected
specifier|final
name|int
name|bufferSize
decl_stmt|;
specifier|private
name|OrcProto
operator|.
name|Metadata
name|metadata
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|int
name|metadataSize
decl_stmt|;
specifier|protected
specifier|final
name|OrcProto
operator|.
name|Footer
name|footer
decl_stmt|;
specifier|private
specifier|final
name|ObjectInspector
name|inspector
decl_stmt|;
specifier|private
name|long
name|deserializedSize
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|versionList
decl_stmt|;
specifier|private
specifier|final
name|OrcFile
operator|.
name|WriterVersion
name|writerVersion
decl_stmt|;
comment|//serialized footer - Keeping this around for use by getFileMetaInfo()
comment|// will help avoid cpu cycles spend in deserializing at cost of increased
comment|// memory footprint.
specifier|private
specifier|final
name|ByteBuffer
name|footerByteBuffer
decl_stmt|;
comment|// Same for metastore cache - maintains the same background buffer, but includes postscript.
comment|// This will only be set if the file footer/metadata was read from disk.
specifier|private
specifier|final
name|ByteBuffer
name|footerMetaAndPsBuffer
decl_stmt|;
specifier|static
class|class
name|StripeInformationImpl
implements|implements
name|StripeInformation
block|{
specifier|private
specifier|final
name|OrcProto
operator|.
name|StripeInformation
name|stripe
decl_stmt|;
name|StripeInformationImpl
parameter_list|(
name|OrcProto
operator|.
name|StripeInformation
name|stripe
parameter_list|)
block|{
name|this
operator|.
name|stripe
operator|=
name|stripe
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getOffset
parameter_list|()
block|{
return|return
name|stripe
operator|.
name|getOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|stripe
operator|.
name|getDataLength
argument_list|()
operator|+
name|getIndexLength
argument_list|()
operator|+
name|getFooterLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDataLength
parameter_list|()
block|{
return|return
name|stripe
operator|.
name|getDataLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getFooterLength
parameter_list|()
block|{
return|return
name|stripe
operator|.
name|getFooterLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getIndexLength
parameter_list|()
block|{
return|return
name|stripe
operator|.
name|getIndexLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getNumberOfRows
parameter_list|()
block|{
return|return
name|stripe
operator|.
name|getNumberOfRows
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"offset: "
operator|+
name|getOffset
argument_list|()
operator|+
literal|" data: "
operator|+
name|getDataLength
argument_list|()
operator|+
literal|" rows: "
operator|+
name|getNumberOfRows
argument_list|()
operator|+
literal|" tail: "
operator|+
name|getFooterLength
argument_list|()
operator|+
literal|" index: "
operator|+
name|getIndexLength
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getNumberOfRows
parameter_list|()
block|{
return|return
name|footer
operator|.
name|getNumberOfRows
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMetadataKeys
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OrcProto
operator|.
name|UserMetadataItem
name|item
range|:
name|footer
operator|.
name|getMetadataList
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|item
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getMetadataValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
for|for
control|(
name|OrcProto
operator|.
name|UserMetadataItem
name|item
range|:
name|footer
operator|.
name|getMetadataList
argument_list|()
control|)
block|{
if|if
condition|(
name|item
operator|.
name|hasName
argument_list|()
operator|&&
name|item
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|item
operator|.
name|getValue
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't find user metadata "
operator|+
name|key
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|hasMetadataValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
for|for
control|(
name|OrcProto
operator|.
name|UserMetadataItem
name|item
range|:
name|footer
operator|.
name|getMetadataList
argument_list|()
control|)
block|{
if|if
condition|(
name|item
operator|.
name|hasName
argument_list|()
operator|&&
name|item
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompressionKind
name|getCompression
parameter_list|()
block|{
return|return
name|compressionKind
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCompressionSize
parameter_list|()
block|{
return|return
name|bufferSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|getStripes
parameter_list|()
block|{
return|return
name|convertProtoStripesToStripes
argument_list|(
name|footer
operator|.
name|getStripesList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
block|{
return|return
name|inspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
return|return
name|footer
operator|.
name|getContentLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|getTypes
parameter_list|()
block|{
return|return
name|footer
operator|.
name|getTypesList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|OrcFile
operator|.
name|Version
name|getFileVersion
parameter_list|()
block|{
for|for
control|(
name|OrcFile
operator|.
name|Version
name|version
range|:
name|OrcFile
operator|.
name|Version
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|version
operator|.
name|getMajor
argument_list|()
operator|==
name|versionList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|&&
name|version
operator|.
name|getMinor
argument_list|()
operator|==
name|versionList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
return|return
name|version
return|;
block|}
block|}
return|return
name|OrcFile
operator|.
name|Version
operator|.
name|V_0_11
return|;
block|}
annotation|@
name|Override
specifier|public
name|OrcFile
operator|.
name|WriterVersion
name|getWriterVersion
parameter_list|()
block|{
return|return
name|writerVersion
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowIndexStride
parameter_list|()
block|{
return|return
name|footer
operator|.
name|getRowIndexStride
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ColumnStatistics
index|[]
name|getStatistics
parameter_list|()
block|{
name|ColumnStatistics
index|[]
name|result
init|=
operator|new
name|ColumnStatistics
index|[
name|footer
operator|.
name|getTypesCount
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|ColumnStatisticsImpl
operator|.
name|deserialize
argument_list|(
name|footer
operator|.
name|getStatistics
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Ensure this is an ORC file to prevent users from trying to read text    * files or RC files as ORC files.    * @param in the file being read    * @param path the filename for error messages    * @param psLen the postscript length    * @param buffer the tail of the file    * @throws IOException    */
specifier|static
name|void
name|ensureOrcFooter
parameter_list|(
name|FSDataInputStream
name|in
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|psLen
parameter_list|,
name|ByteBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|OrcFile
operator|.
name|MAGIC
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|psLen
operator|<
name|len
operator|+
literal|1
condition|)
block|{
throw|throw
operator|new
name|FileFormatException
argument_list|(
literal|"Malformed ORC file "
operator|+
name|path
operator|+
literal|". Invalid postscript length "
operator|+
name|psLen
argument_list|)
throw|;
block|}
name|int
name|offset
init|=
name|buffer
operator|.
name|arrayOffset
argument_list|()
operator|+
name|buffer
operator|.
name|position
argument_list|()
operator|+
name|buffer
operator|.
name|limit
argument_list|()
operator|-
literal|1
operator|-
name|len
decl_stmt|;
name|byte
index|[]
name|array
init|=
name|buffer
operator|.
name|array
argument_list|()
decl_stmt|;
comment|// now look for the magic string at the end of the postscript.
if|if
condition|(
operator|!
name|Text
operator|.
name|decode
argument_list|(
name|array
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
operator|.
name|equals
argument_list|(
name|OrcFile
operator|.
name|MAGIC
argument_list|)
condition|)
block|{
comment|// If it isn't there, this may be the 0.11.0 version of ORC.
comment|// Read the first 3 bytes of the file to check for the header
name|in
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|byte
index|[]
name|header
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|header
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|// if it isn't there, this isn't an ORC file
if|if
condition|(
operator|!
name|Text
operator|.
name|decode
argument_list|(
name|header
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
operator|.
name|equals
argument_list|(
name|OrcFile
operator|.
name|MAGIC
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileFormatException
argument_list|(
literal|"Malformed ORC file "
operator|+
name|path
operator|+
literal|". Invalid postscript."
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Build a version string out of an array.    * @param version the version number as a list    * @return the human readable form of the version string    */
specifier|private
specifier|static
name|String
name|versionString
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|version
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|version
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|version
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Check to see if this ORC file is from a future version and if so,    * warn the user that we may not be able to read all of the column encodings.    * @param log the logger to write any error message to    * @param path the data source path for error messages    * @param version the version of hive that wrote the file.    */
specifier|static
name|void
name|checkOrcVersion
parameter_list|(
name|Log
name|log
parameter_list|,
name|Path
name|path
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|version
parameter_list|)
block|{
if|if
condition|(
name|version
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|int
name|major
init|=
name|version
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|minor
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|minor
operator|=
name|version
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|major
operator|>
name|OrcFile
operator|.
name|Version
operator|.
name|CURRENT
operator|.
name|getMajor
argument_list|()
operator|||
operator|(
name|major
operator|==
name|OrcFile
operator|.
name|Version
operator|.
name|CURRENT
operator|.
name|getMajor
argument_list|()
operator|&&
name|minor
operator|>
name|OrcFile
operator|.
name|Version
operator|.
name|CURRENT
operator|.
name|getMinor
argument_list|()
operator|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|path
operator|+
literal|" was written by a future Hive version "
operator|+
name|versionString
argument_list|(
name|version
argument_list|)
operator|+
literal|". This file may not be readable by this version of Hive."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**   * Constructor that let's the user specify additional options.    * @param path pathname for file    * @param options options for reading    * @throws IOException    */
specifier|public
name|ReaderImpl
parameter_list|(
name|Path
name|path
parameter_list|,
name|OrcFile
operator|.
name|ReaderOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|options
operator|.
name|getFilesystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
block|{
name|fs
operator|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|options
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fileSystem
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|options
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|FileMetaInfo
name|footerMetaData
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|getFileMetaInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|footerMetaData
operator|=
name|options
operator|.
name|getFileMetaInfo
argument_list|()
expr_stmt|;
name|this
operator|.
name|footerMetaAndPsBuffer
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|footerMetaData
operator|=
name|extractMetaInfoFromFooter
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|options
operator|.
name|getMaxLength
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|footerMetaAndPsBuffer
operator|=
name|footerMetaData
operator|.
name|footerMetaAndPsBuffer
expr_stmt|;
block|}
name|MetaInfoObjExtractor
name|rInfo
init|=
operator|new
name|MetaInfoObjExtractor
argument_list|(
name|footerMetaData
operator|.
name|compressionType
argument_list|,
name|footerMetaData
operator|.
name|bufferSize
argument_list|,
name|footerMetaData
operator|.
name|metadataSize
argument_list|,
name|footerMetaData
operator|.
name|footerBuffer
argument_list|)
decl_stmt|;
name|this
operator|.
name|footerByteBuffer
operator|=
name|footerMetaData
operator|.
name|footerBuffer
expr_stmt|;
name|this
operator|.
name|compressionKind
operator|=
name|rInfo
operator|.
name|compressionKind
expr_stmt|;
name|this
operator|.
name|codec
operator|=
name|rInfo
operator|.
name|codec
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|rInfo
operator|.
name|bufferSize
expr_stmt|;
name|this
operator|.
name|metadataSize
operator|=
name|rInfo
operator|.
name|metadataSize
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|rInfo
operator|.
name|metadata
expr_stmt|;
name|this
operator|.
name|footer
operator|=
name|rInfo
operator|.
name|footer
expr_stmt|;
name|this
operator|.
name|inspector
operator|=
name|rInfo
operator|.
name|inspector
expr_stmt|;
name|this
operator|.
name|versionList
operator|=
name|footerMetaData
operator|.
name|versionList
expr_stmt|;
name|this
operator|.
name|writerVersion
operator|=
name|footerMetaData
operator|.
name|writerVersion
expr_stmt|;
block|}
comment|/**    * Get the WriterVersion based on the ORC file postscript.    * @param writerVersion the integer writer version    * @return    */
specifier|static
name|OrcFile
operator|.
name|WriterVersion
name|getWriterVersion
parameter_list|(
name|int
name|writerVersion
parameter_list|)
block|{
for|for
control|(
name|OrcFile
operator|.
name|WriterVersion
name|version
range|:
name|OrcFile
operator|.
name|WriterVersion
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|version
operator|.
name|getId
argument_list|()
operator|==
name|writerVersion
condition|)
block|{
return|return
name|version
return|;
block|}
block|}
return|return
name|OrcFile
operator|.
name|WriterVersion
operator|.
name|ORIGINAL
return|;
block|}
comment|/** Extracts the necessary metadata from an externally store buffer (fullFooterBuffer). */
specifier|public
specifier|static
name|FooterInfo
name|extractMetaInfoFromFooter
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|,
name|Path
name|srcPath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Read the PostScript. Be very careful as some parts of this historically use bb position
comment|// and some use absolute offsets that have to take position into account.
name|int
name|baseOffset
init|=
name|bb
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|lastByteAbsPos
init|=
name|baseOffset
operator|+
name|bb
operator|.
name|remaining
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|psLen
init|=
name|bb
operator|.
name|get
argument_list|(
name|lastByteAbsPos
argument_list|)
operator|&
literal|0xff
decl_stmt|;
name|int
name|psAbsPos
init|=
name|lastByteAbsPos
operator|-
name|psLen
decl_stmt|;
name|OrcProto
operator|.
name|PostScript
name|ps
init|=
name|extractPostScript
argument_list|(
name|bb
argument_list|,
name|srcPath
argument_list|,
name|psLen
argument_list|,
name|psAbsPos
argument_list|)
decl_stmt|;
assert|assert
name|baseOffset
operator|==
name|bb
operator|.
name|position
argument_list|()
assert|;
comment|// Extract PS information.
name|int
name|footerSize
init|=
operator|(
name|int
operator|)
name|ps
operator|.
name|getFooterLength
argument_list|()
decl_stmt|,
name|metadataSize
init|=
operator|(
name|int
operator|)
name|ps
operator|.
name|getMetadataLength
argument_list|()
decl_stmt|,
name|footerAbsPos
init|=
name|psAbsPos
operator|-
name|footerSize
decl_stmt|,
name|metadataAbsPos
init|=
name|footerAbsPos
operator|-
name|metadataSize
decl_stmt|;
name|String
name|compressionType
init|=
name|ps
operator|.
name|getCompression
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|CompressionCodec
name|codec
init|=
name|WriterImpl
operator|.
name|createCodec
argument_list|(
name|CompressionKind
operator|.
name|valueOf
argument_list|(
name|compressionType
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|bufferSize
init|=
operator|(
name|int
operator|)
name|ps
operator|.
name|getCompressionBlockSize
argument_list|()
decl_stmt|;
name|bb
operator|.
name|position
argument_list|(
name|metadataAbsPos
argument_list|)
expr_stmt|;
name|bb
operator|.
name|mark
argument_list|()
expr_stmt|;
comment|// Extract metadata and footer.
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|(
name|extractMetadata
argument_list|(
name|bb
argument_list|,
name|metadataAbsPos
argument_list|,
name|metadataSize
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
decl_stmt|;
name|OrcProto
operator|.
name|Footer
name|footer
init|=
name|extractFooter
argument_list|(
name|bb
argument_list|,
name|footerAbsPos
argument_list|,
name|footerSize
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
name|bb
operator|.
name|position
argument_list|(
name|metadataAbsPos
argument_list|)
expr_stmt|;
name|bb
operator|.
name|limit
argument_list|(
name|psAbsPos
argument_list|)
expr_stmt|;
comment|// TODO: do we need footer buffer here? FileInfo/FileMetaInfo is a mess...
name|FileMetaInfo
name|fmi
init|=
operator|new
name|FileMetaInfo
argument_list|(
name|compressionType
argument_list|,
name|bufferSize
argument_list|,
name|metadataSize
argument_list|,
name|bb
argument_list|,
name|extractWriterVersion
argument_list|(
name|ps
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|FooterInfo
argument_list|(
name|metadata
argument_list|,
name|footer
argument_list|,
name|fmi
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|OrcProto
operator|.
name|Footer
name|extractFooter
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|,
name|int
name|footerAbsPos
parameter_list|,
name|int
name|footerSize
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|bb
operator|.
name|position
argument_list|(
name|footerAbsPos
argument_list|)
expr_stmt|;
name|bb
operator|.
name|limit
argument_list|(
name|footerAbsPos
operator|+
name|footerSize
argument_list|)
expr_stmt|;
name|InputStream
name|instream
init|=
name|InStream
operator|.
name|create
argument_list|(
literal|"footer"
argument_list|,
name|Lists
operator|.
expr|<
name|DiskRange
operator|>
name|newArrayList
argument_list|(
operator|new
name|BufferChunk
argument_list|(
name|bb
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|footerSize
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
return|return
name|OrcProto
operator|.
name|Footer
operator|.
name|parseFrom
argument_list|(
name|instream
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|OrcProto
operator|.
name|Metadata
name|extractMetadata
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|,
name|int
name|metadataAbsPos
parameter_list|,
name|int
name|metadataSize
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|bb
operator|.
name|position
argument_list|(
name|metadataAbsPos
argument_list|)
expr_stmt|;
name|bb
operator|.
name|limit
argument_list|(
name|metadataAbsPos
operator|+
name|metadataSize
argument_list|)
expr_stmt|;
name|InputStream
name|instream
init|=
name|InStream
operator|.
name|create
argument_list|(
literal|"metadata"
argument_list|,
name|Lists
operator|.
expr|<
name|DiskRange
operator|>
name|newArrayList
argument_list|(
operator|new
name|BufferChunk
argument_list|(
name|bb
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|metadataSize
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
name|CodedInputStream
name|in
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|instream
argument_list|)
decl_stmt|;
name|int
name|msgLimit
init|=
name|DEFAULT_PROTOBUF_MESSAGE_LIMIT
decl_stmt|;
name|OrcProto
operator|.
name|Metadata
name|meta
init|=
literal|null
decl_stmt|;
do|do
block|{
try|try
block|{
name|in
operator|.
name|setSizeLimit
argument_list|(
name|msgLimit
argument_list|)
expr_stmt|;
name|meta
operator|=
name|OrcProto
operator|.
name|Metadata
operator|.
name|parseFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Protocol message was too large"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Metadata section is larger than "
operator|+
name|msgLimit
operator|+
literal|" bytes. Increasing the max"
operator|+
literal|" size of the coded input stream."
argument_list|)
expr_stmt|;
name|msgLimit
operator|=
name|msgLimit
operator|<<
literal|1
expr_stmt|;
if|if
condition|(
name|msgLimit
operator|>
name|PROTOBUF_MESSAGE_MAX_LIMIT
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Metadata section exceeds max protobuf message size of "
operator|+
name|PROTOBUF_MESSAGE_MAX_LIMIT
operator|+
literal|" bytes."
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
comment|// we must have failed in the middle of reading instream and instream doesn't support
comment|// resetting the stream
name|instream
operator|=
name|InStream
operator|.
name|create
argument_list|(
literal|"metadata"
argument_list|,
name|Lists
operator|.
expr|<
name|DiskRange
operator|>
name|newArrayList
argument_list|(
operator|new
name|BufferChunk
argument_list|(
name|bb
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|metadataSize
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|in
operator|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|instream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
do|while
condition|(
name|meta
operator|==
literal|null
condition|)
do|;
return|return
name|meta
return|;
block|}
specifier|private
specifier|static
name|OrcProto
operator|.
name|PostScript
name|extractPostScript
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|psLen
parameter_list|,
name|int
name|psAbsOffset
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: when PB is upgraded to 2.6, newInstance(ByteBuffer) method should be used here.
assert|assert
name|bb
operator|.
name|hasArray
argument_list|()
assert|;
name|CodedInputStream
name|in
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|bb
operator|.
name|array
argument_list|()
argument_list|,
name|bb
operator|.
name|arrayOffset
argument_list|()
operator|+
name|psAbsOffset
argument_list|,
name|psLen
argument_list|)
decl_stmt|;
name|OrcProto
operator|.
name|PostScript
name|ps
init|=
name|OrcProto
operator|.
name|PostScript
operator|.
name|parseFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|checkOrcVersion
argument_list|(
name|LOG
argument_list|,
name|path
argument_list|,
name|ps
operator|.
name|getVersionList
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check compression codec.
switch|switch
condition|(
name|ps
operator|.
name|getCompression
argument_list|()
condition|)
block|{
case|case
name|NONE
case|:
break|break;
case|case
name|ZLIB
case|:
break|break;
case|case
name|SNAPPY
case|:
break|break;
case|case
name|LZO
case|:
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown compression"
argument_list|)
throw|;
block|}
return|return
name|ps
return|;
block|}
specifier|private
specifier|static
name|FileMetaInfo
name|extractMetaInfoFromFooter
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|long
name|maxFileLength
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataInputStream
name|file
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// figure out the size of the file using the option or filesystem
name|long
name|size
decl_stmt|;
if|if
condition|(
name|maxFileLength
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
name|size
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|size
operator|=
name|maxFileLength
expr_stmt|;
block|}
comment|//read last bytes into buffer to get PostScript
name|int
name|readSize
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|size
argument_list|,
name|DIRECTORY_SIZE_GUESS
argument_list|)
decl_stmt|;
name|file
operator|.
name|seek
argument_list|(
name|size
operator|-
name|readSize
argument_list|)
expr_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|readSize
argument_list|)
decl_stmt|;
assert|assert
name|buffer
operator|.
name|position
argument_list|()
operator|==
literal|0
assert|;
name|file
operator|.
name|readFully
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
name|buffer
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|readSize
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//read the PostScript
comment|//get length of PostScript
name|int
name|psLen
init|=
name|buffer
operator|.
name|get
argument_list|(
name|readSize
operator|-
literal|1
argument_list|)
operator|&
literal|0xff
decl_stmt|;
name|ensureOrcFooter
argument_list|(
name|file
argument_list|,
name|path
argument_list|,
name|psLen
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|int
name|psOffset
init|=
name|readSize
operator|-
literal|1
operator|-
name|psLen
decl_stmt|;
name|OrcProto
operator|.
name|PostScript
name|ps
init|=
name|extractPostScript
argument_list|(
name|buffer
argument_list|,
name|path
argument_list|,
name|psLen
argument_list|,
name|psOffset
argument_list|)
decl_stmt|;
name|int
name|footerSize
init|=
operator|(
name|int
operator|)
name|ps
operator|.
name|getFooterLength
argument_list|()
decl_stmt|;
name|int
name|metadataSize
init|=
operator|(
name|int
operator|)
name|ps
operator|.
name|getMetadataLength
argument_list|()
decl_stmt|;
name|OrcFile
operator|.
name|WriterVersion
name|writerVersion
init|=
name|extractWriterVersion
argument_list|(
name|ps
argument_list|)
decl_stmt|;
comment|//check if extra bytes need to be read
name|ByteBuffer
name|fullFooterBuffer
init|=
literal|null
decl_stmt|;
name|int
name|extra
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|psLen
operator|+
literal|1
operator|+
name|footerSize
operator|+
name|metadataSize
operator|-
name|readSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|extra
operator|>
literal|0
condition|)
block|{
comment|//more bytes need to be read, seek back to the right place and read extra bytes
name|file
operator|.
name|seek
argument_list|(
name|size
operator|-
name|readSize
operator|-
name|extra
argument_list|)
expr_stmt|;
name|ByteBuffer
name|extraBuf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|extra
operator|+
name|readSize
argument_list|)
decl_stmt|;
name|file
operator|.
name|readFully
argument_list|(
name|extraBuf
operator|.
name|array
argument_list|()
argument_list|,
name|extraBuf
operator|.
name|arrayOffset
argument_list|()
operator|+
name|extraBuf
operator|.
name|position
argument_list|()
argument_list|,
name|extra
argument_list|)
expr_stmt|;
name|extraBuf
operator|.
name|position
argument_list|(
name|extra
argument_list|)
expr_stmt|;
comment|//append with already read bytes
name|extraBuf
operator|.
name|put
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|extraBuf
expr_stmt|;
name|buffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fullFooterBuffer
operator|=
name|buffer
operator|.
name|slice
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|limit
argument_list|(
name|footerSize
operator|+
name|metadataSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//footer is already in the bytes in buffer, just adjust position, length
name|buffer
operator|.
name|position
argument_list|(
name|psOffset
operator|-
name|footerSize
operator|-
name|metadataSize
argument_list|)
expr_stmt|;
name|fullFooterBuffer
operator|=
name|buffer
operator|.
name|slice
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|limit
argument_list|(
name|psOffset
argument_list|)
expr_stmt|;
block|}
comment|// remember position for later
name|buffer
operator|.
name|mark
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|FileMetaInfo
argument_list|(
name|ps
operator|.
name|getCompression
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|ps
operator|.
name|getCompressionBlockSize
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|ps
operator|.
name|getMetadataLength
argument_list|()
argument_list|,
name|buffer
argument_list|,
name|ps
operator|.
name|getVersionList
argument_list|()
argument_list|,
name|writerVersion
argument_list|,
name|fullFooterBuffer
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|OrcFile
operator|.
name|WriterVersion
name|extractWriterVersion
parameter_list|(
name|OrcProto
operator|.
name|PostScript
name|ps
parameter_list|)
block|{
return|return
operator|(
name|ps
operator|.
name|hasWriterVersion
argument_list|()
condition|?
name|getWriterVersion
argument_list|(
name|ps
operator|.
name|getWriterVersion
argument_list|()
argument_list|)
else|:
name|OrcFile
operator|.
name|WriterVersion
operator|.
name|ORIGINAL
operator|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|convertProtoStripesToStripes
parameter_list|(
name|List
argument_list|<
name|OrcProto
operator|.
name|StripeInformation
argument_list|>
name|stripes
parameter_list|)
block|{
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|StripeInformation
argument_list|>
argument_list|(
name|stripes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|OrcProto
operator|.
name|StripeInformation
name|info
range|:
name|stripes
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|StripeInformationImpl
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * MetaInfoObjExtractor - has logic to create the values for the fields in ReaderImpl    *  from serialized fields.    * As the fields are final, the fields need to be initialized in the constructor and    *  can't be done in some helper function. So this helper class is used instead.    *    */
specifier|private
specifier|static
class|class
name|MetaInfoObjExtractor
block|{
specifier|final
name|CompressionKind
name|compressionKind
decl_stmt|;
specifier|final
name|CompressionCodec
name|codec
decl_stmt|;
specifier|final
name|int
name|bufferSize
decl_stmt|;
specifier|final
name|int
name|metadataSize
decl_stmt|;
specifier|final
name|OrcProto
operator|.
name|Metadata
name|metadata
decl_stmt|;
specifier|final
name|OrcProto
operator|.
name|Footer
name|footer
decl_stmt|;
specifier|final
name|ObjectInspector
name|inspector
decl_stmt|;
name|MetaInfoObjExtractor
parameter_list|(
name|String
name|codecStr
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|int
name|metadataSize
parameter_list|,
name|ByteBuffer
name|footerBuffer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|compressionKind
operator|=
name|CompressionKind
operator|.
name|valueOf
argument_list|(
name|codecStr
argument_list|)
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
name|this
operator|.
name|codec
operator|=
name|WriterImpl
operator|.
name|createCodec
argument_list|(
name|compressionKind
argument_list|)
expr_stmt|;
name|this
operator|.
name|metadataSize
operator|=
name|metadataSize
expr_stmt|;
name|int
name|position
init|=
name|footerBuffer
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|footerBufferSize
init|=
name|footerBuffer
operator|.
name|limit
argument_list|()
operator|-
name|footerBuffer
operator|.
name|position
argument_list|()
operator|-
name|metadataSize
decl_stmt|;
name|this
operator|.
name|metadata
operator|=
name|extractMetadata
argument_list|(
name|footerBuffer
argument_list|,
name|position
argument_list|,
name|metadataSize
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|footer
operator|=
name|extractFooter
argument_list|(
name|footerBuffer
argument_list|,
name|position
operator|+
name|metadataSize
argument_list|,
name|footerBufferSize
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|footerBuffer
operator|.
name|position
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|this
operator|.
name|inspector
operator|=
name|OrcStruct
operator|.
name|createObjectInspector
argument_list|(
literal|0
argument_list|,
name|footer
operator|.
name|getTypesList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * FileMetaInfo - represents file metadata stored in footer and postscript sections of the file    * that is useful for Reader implementation    *    */
specifier|static
class|class
name|FileMetaInfo
block|{
specifier|private
name|ByteBuffer
name|footerMetaAndPsBuffer
decl_stmt|;
specifier|final
name|String
name|compressionType
decl_stmt|;
specifier|final
name|int
name|bufferSize
decl_stmt|;
specifier|final
name|int
name|metadataSize
decl_stmt|;
specifier|final
name|ByteBuffer
name|footerBuffer
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|versionList
decl_stmt|;
specifier|final
name|OrcFile
operator|.
name|WriterVersion
name|writerVersion
decl_stmt|;
comment|/** Ctor used when reading splits - no version list or full footer buffer. */
name|FileMetaInfo
parameter_list|(
name|String
name|compressionType
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|int
name|metadataSize
parameter_list|,
name|ByteBuffer
name|footerBuffer
parameter_list|,
name|OrcFile
operator|.
name|WriterVersion
name|writerVersion
parameter_list|)
block|{
name|this
argument_list|(
name|compressionType
argument_list|,
name|bufferSize
argument_list|,
name|metadataSize
argument_list|,
name|footerBuffer
argument_list|,
literal|null
argument_list|,
name|writerVersion
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Ctor used when creating file info during init and when getting a new one. */
specifier|public
name|FileMetaInfo
parameter_list|(
name|String
name|compressionType
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|int
name|metadataSize
parameter_list|,
name|ByteBuffer
name|footerBuffer
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|versionList
parameter_list|,
name|WriterVersion
name|writerVersion
parameter_list|,
name|ByteBuffer
name|fullFooterBuffer
parameter_list|)
block|{
name|this
operator|.
name|compressionType
operator|=
name|compressionType
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
name|this
operator|.
name|metadataSize
operator|=
name|metadataSize
expr_stmt|;
name|this
operator|.
name|footerBuffer
operator|=
name|footerBuffer
expr_stmt|;
name|this
operator|.
name|versionList
operator|=
name|versionList
expr_stmt|;
name|this
operator|.
name|writerVersion
operator|=
name|writerVersion
expr_stmt|;
name|this
operator|.
name|footerMetaAndPsBuffer
operator|=
name|fullFooterBuffer
expr_stmt|;
block|}
block|}
specifier|public
name|FileMetaInfo
name|getFileMetaInfo
parameter_list|()
block|{
return|return
operator|new
name|FileMetaInfo
argument_list|(
name|compressionKind
operator|.
name|toString
argument_list|()
argument_list|,
name|bufferSize
argument_list|,
name|metadataSize
argument_list|,
name|footerByteBuffer
argument_list|,
name|versionList
argument_list|,
name|writerVersion
argument_list|,
name|footerMetaAndPsBuffer
argument_list|)
return|;
block|}
comment|/** Same as FileMetaInfo, but with extra fields. FileMetaInfo is serialized for splits    * and so we don't just add fields to it, it's already messy and confusing. */
specifier|public
specifier|static
specifier|final
class|class
name|FooterInfo
block|{
specifier|private
specifier|final
name|OrcProto
operator|.
name|Footer
name|footer
decl_stmt|;
specifier|private
specifier|final
name|Metadata
name|metadata
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|stripes
decl_stmt|;
specifier|private
specifier|final
name|FileMetaInfo
name|fileMetaInfo
decl_stmt|;
specifier|private
name|FooterInfo
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|OrcProto
operator|.
name|Footer
name|footer
parameter_list|,
name|FileMetaInfo
name|fileMetaInfo
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|footer
operator|=
name|footer
expr_stmt|;
name|this
operator|.
name|fileMetaInfo
operator|=
name|fileMetaInfo
expr_stmt|;
name|this
operator|.
name|stripes
operator|=
name|convertProtoStripesToStripes
argument_list|(
name|footer
operator|.
name|getStripesList
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OrcProto
operator|.
name|Footer
name|getFooter
parameter_list|()
block|{
return|return
name|footer
return|;
block|}
specifier|public
name|Metadata
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
specifier|public
name|FileMetaInfo
name|getFileMetaInfo
parameter_list|()
block|{
return|return
name|fileMetaInfo
return|;
block|}
specifier|public
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|getStripes
parameter_list|()
block|{
return|return
name|stripes
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getSerializedFileFooter
parameter_list|()
block|{
return|return
name|footerMetaAndPsBuffer
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
name|rows
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|rowsOptions
argument_list|(
operator|new
name|Options
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
name|rowsOptions
parameter_list|(
name|Options
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading ORC rows from "
operator|+
name|path
operator|+
literal|" with "
operator|+
name|options
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|include
init|=
name|options
operator|.
name|getInclude
argument_list|()
decl_stmt|;
comment|// if included columns is null, then include all columns
if|if
condition|(
name|include
operator|==
literal|null
condition|)
block|{
name|include
operator|=
operator|new
name|boolean
index|[
name|footer
operator|.
name|getTypesCount
argument_list|()
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|include
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|options
operator|.
name|include
argument_list|(
name|include
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RecordReaderImpl
argument_list|(
name|this
operator|.
name|getStripes
argument_list|()
argument_list|,
name|fileSystem
argument_list|,
name|path
argument_list|,
name|options
argument_list|,
name|footer
operator|.
name|getTypesList
argument_list|()
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|,
name|footer
operator|.
name|getRowIndexStride
argument_list|()
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
name|rows
parameter_list|(
name|boolean
index|[]
name|include
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rowsOptions
argument_list|(
operator|new
name|Options
argument_list|()
operator|.
name|include
argument_list|(
name|include
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
name|rows
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|boolean
index|[]
name|include
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rowsOptions
argument_list|(
operator|new
name|Options
argument_list|()
operator|.
name|include
argument_list|(
name|include
argument_list|)
operator|.
name|range
argument_list|(
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
name|rows
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|boolean
index|[]
name|include
parameter_list|,
name|SearchArgument
name|sarg
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rowsOptions
argument_list|(
operator|new
name|Options
argument_list|()
operator|.
name|include
argument_list|(
name|include
argument_list|)
operator|.
name|range
argument_list|(
name|offset
argument_list|,
name|length
argument_list|)
operator|.
name|searchArgument
argument_list|(
name|sarg
argument_list|,
name|columnNames
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRawDataSize
parameter_list|()
block|{
comment|// if the deserializedSize is not computed, then compute it, else
comment|// return the already computed size. since we are reading from the footer
comment|// we don't have to compute deserialized size repeatedly
if|if
condition|(
name|deserializedSize
operator|==
operator|-
literal|1
condition|)
block|{
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnStatistics
argument_list|>
name|stats
init|=
name|footer
operator|.
name|getStatisticsList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|indices
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|indices
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|deserializedSize
operator|=
name|getRawDataSizeFromColIndices
argument_list|(
name|indices
argument_list|)
expr_stmt|;
block|}
return|return
name|deserializedSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRawDataSizeFromColIndices
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|colIndices
parameter_list|)
block|{
return|return
name|getRawDataSizeFromColIndices
argument_list|(
name|colIndices
argument_list|,
name|footer
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|long
name|getRawDataSizeFromColIndices
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|colIndices
parameter_list|,
name|OrcProto
operator|.
name|Footer
name|footer
parameter_list|)
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|colIdx
range|:
name|colIndices
control|)
block|{
name|result
operator|+=
name|getRawDataSizeOfColumn
argument_list|(
name|colIdx
argument_list|,
name|footer
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|long
name|getRawDataSizeOfColumn
parameter_list|(
name|int
name|colIdx
parameter_list|,
name|OrcProto
operator|.
name|Footer
name|footer
parameter_list|)
block|{
name|OrcProto
operator|.
name|ColumnStatistics
name|colStat
init|=
name|footer
operator|.
name|getStatistics
argument_list|(
name|colIdx
argument_list|)
decl_stmt|;
name|long
name|numVals
init|=
name|colStat
operator|.
name|getNumberOfValues
argument_list|()
decl_stmt|;
name|Type
name|type
init|=
name|footer
operator|.
name|getTypes
argument_list|(
name|colIdx
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|BINARY
case|:
comment|// old orc format doesn't support binary statistics. checking for binary
comment|// statistics is not required as protocol buffers takes care of it.
return|return
name|colStat
operator|.
name|getBinaryStatistics
argument_list|()
operator|.
name|getSum
argument_list|()
return|;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
comment|// old orc format doesn't support sum for string statistics. checking for
comment|// existence is not required as protocol buffers takes care of it.
comment|// ORC strings are deserialized to java strings. so use java data model's
comment|// string size
name|numVals
operator|=
name|numVals
operator|==
literal|0
condition|?
literal|1
else|:
name|numVals
expr_stmt|;
name|int
name|avgStrLen
init|=
call|(
name|int
call|)
argument_list|(
name|colStat
operator|.
name|getStringStatistics
argument_list|()
operator|.
name|getSum
argument_list|()
operator|/
name|numVals
argument_list|)
decl_stmt|;
return|return
name|numVals
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthForStringOfLength
argument_list|(
name|avgStrLen
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|numVals
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthOfTimestamp
argument_list|()
return|;
case|case
name|DATE
case|:
return|return
name|numVals
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthOfDate
argument_list|()
return|;
case|case
name|DECIMAL
case|:
return|return
name|numVals
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthOfDecimal
argument_list|()
return|;
case|case
name|DOUBLE
case|:
case|case
name|LONG
case|:
return|return
name|numVals
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive2
argument_list|()
return|;
case|case
name|FLOAT
case|:
case|case
name|INT
case|:
case|case
name|SHORT
case|:
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
return|return
name|numVals
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive1
argument_list|()
return|;
default|default:
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unknown primitive category: "
operator|+
name|type
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRawDataSizeOfColumns
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|colIndices
init|=
name|getColumnIndicesFromNames
argument_list|(
name|colNames
argument_list|)
decl_stmt|;
return|return
name|getRawDataSizeFromColIndices
argument_list|(
name|colIndices
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|getColumnIndicesFromNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
block|{
comment|// top level struct
name|Type
name|type
init|=
name|footer
operator|.
name|getTypesList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|colIndices
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|type
operator|.
name|getFieldNamesList
argument_list|()
decl_stmt|;
name|int
name|fieldIdx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|colName
range|:
name|colNames
control|)
block|{
if|if
condition|(
name|fieldNames
operator|.
name|contains
argument_list|(
name|colName
argument_list|)
condition|)
block|{
name|fieldIdx
operator|=
name|fieldNames
operator|.
name|indexOf
argument_list|(
name|colName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|s
init|=
literal|"Cannot find field for: "
operator|+
name|colName
operator|+
literal|" in "
decl_stmt|;
for|for
control|(
name|String
name|fn
range|:
name|fieldNames
control|)
block|{
name|s
operator|+=
name|fn
operator|+
literal|", "
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
name|s
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// a single field may span multiple columns. find start and end column
comment|// index for the requested field
name|int
name|idxStart
init|=
name|type
operator|.
name|getSubtypes
argument_list|(
name|fieldIdx
argument_list|)
decl_stmt|;
name|int
name|idxEnd
decl_stmt|;
comment|// if the specified is the last field and then end index will be last
comment|// column index
if|if
condition|(
name|fieldIdx
operator|+
literal|1
operator|>
name|fieldNames
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|idxEnd
operator|=
name|getLastIdx
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|idxEnd
operator|=
name|type
operator|.
name|getSubtypes
argument_list|(
name|fieldIdx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// if start index and end index are same then the field is a primitive
comment|// field else complex field (like map, list, struct, union)
if|if
condition|(
name|idxStart
operator|==
name|idxEnd
condition|)
block|{
comment|// simple field
name|colIndices
operator|.
name|add
argument_list|(
name|idxStart
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// complex fields spans multiple columns
for|for
control|(
name|int
name|i
init|=
name|idxStart
init|;
name|i
operator|<
name|idxEnd
condition|;
name|i
operator|++
control|)
block|{
name|colIndices
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|colIndices
return|;
block|}
specifier|private
name|int
name|getLastIdx
parameter_list|()
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|indices
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Type
name|type
range|:
name|footer
operator|.
name|getTypesList
argument_list|()
control|)
block|{
name|indices
operator|.
name|addAll
argument_list|(
name|type
operator|.
name|getSubtypesList
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|max
argument_list|(
name|indices
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Metadata
name|getMetadata
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Metadata
argument_list|(
name|metadata
argument_list|)
return|;
block|}
name|List
argument_list|<
name|OrcProto
operator|.
name|StripeStatistics
argument_list|>
name|getOrcProtoStripeStatistics
parameter_list|()
block|{
return|return
name|metadata
operator|.
name|getStripeStatsList
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|UserMetadataItem
argument_list|>
name|getOrcProtoUserMetadata
parameter_list|()
block|{
return|return
name|footer
operator|.
name|getMetadataList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetadataReader
name|metadata
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|MetadataReader
argument_list|(
name|fileSystem
argument_list|,
name|path
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|,
name|footer
operator|.
name|getTypesCount
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Footer
name|getFooter
parameter_list|()
block|{
return|return
name|footer
return|;
block|}
block|}
end_class

end_unit

