begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ReaderImpl
extends|extends
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|ReaderImpl
implements|implements
name|Reader
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReaderImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ObjectInspector
name|inspector
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
block|{
return|return
name|inspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|CompressionKind
name|getCompression
parameter_list|()
block|{
for|for
control|(
name|CompressionKind
name|value
range|:
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|CompressionKind
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|value
operator|.
name|getUnderlying
argument_list|()
operator|==
name|compressionKind
condition|)
block|{
return|return
name|value
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown compression kind "
operator|+
name|compressionKind
argument_list|)
throw|;
block|}
comment|/**   * Constructor that let's the user specify additional options.    * @param path pathname for file    * @param options options for reading    * @throws IOException    */
specifier|public
name|ReaderImpl
parameter_list|(
name|Path
name|path
parameter_list|,
name|OrcFile
operator|.
name|ReaderOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|path
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|this
operator|.
name|inspector
operator|=
name|OrcStruct
operator|.
name|createObjectInspector
argument_list|(
literal|0
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getSerializedFileFooter
parameter_list|()
block|{
return|return
name|tail
operator|.
name|getSerializedTail
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
name|rows
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|rowsOptions
argument_list|(
operator|new
name|Options
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
name|rowsOptions
parameter_list|(
name|Options
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading ORC rows from "
operator|+
name|path
operator|+
literal|" with "
operator|+
name|options
argument_list|)
expr_stmt|;
return|return
operator|new
name|RecordReaderImpl
argument_list|(
name|this
argument_list|,
name|options
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
name|rows
parameter_list|(
name|boolean
index|[]
name|include
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rowsOptions
argument_list|(
operator|new
name|Options
argument_list|()
operator|.
name|include
argument_list|(
name|include
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
name|rows
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|boolean
index|[]
name|include
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rowsOptions
argument_list|(
operator|new
name|Options
argument_list|()
operator|.
name|include
argument_list|(
name|include
argument_list|)
operator|.
name|range
argument_list|(
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
name|rows
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|boolean
index|[]
name|include
parameter_list|,
name|SearchArgument
name|sarg
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rowsOptions
argument_list|(
operator|new
name|Options
argument_list|()
operator|.
name|include
argument_list|(
name|include
argument_list|)
operator|.
name|range
argument_list|(
name|offset
argument_list|,
name|length
argument_list|)
operator|.
name|searchArgument
argument_list|(
name|sarg
argument_list|,
name|columnNames
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Hive "
operator|+
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

