begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|BufferChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|FileMetaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|FileMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|InStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|StripeInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|StripeStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
import|;
end_import

begin_class
specifier|public
class|class
name|ReaderImpl
extends|extends
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|ReaderImpl
implements|implements
name|Reader
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReaderImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DIRECTORY_SIZE_GUESS
init|=
literal|16
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|final
name|ObjectInspector
name|inspector
decl_stmt|;
comment|//serialized footer - Keeping this around for use by getFileMetaInfo()
comment|// will help avoid cpu cycles spend in deserializing at cost of increased
comment|// memory footprint.
specifier|private
name|ByteBuffer
name|footerByteBuffer
decl_stmt|;
comment|// Same for metastore cache - maintains the same background buffer, but includes postscript.
comment|// This will only be set if the file footer/metadata was read from disk.
specifier|private
name|ByteBuffer
name|footerMetaAndPsBuffer
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
block|{
return|return
name|inspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|CompressionKind
name|getCompression
parameter_list|()
block|{
for|for
control|(
name|CompressionKind
name|value
range|:
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|CompressionKind
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|value
operator|.
name|getUnderlying
argument_list|()
operator|==
name|compressionKind
condition|)
block|{
return|return
name|value
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown compression kind "
operator|+
name|compressionKind
argument_list|)
throw|;
block|}
comment|/**   * Constructor that let's the user specify additional options.    * @param path pathname for file    * @param options options for reading    * @throws IOException    */
specifier|public
name|ReaderImpl
parameter_list|(
name|Path
name|path
parameter_list|,
name|OrcFile
operator|.
name|ReaderOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|path
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|FileMetadata
name|fileMetadata
init|=
name|options
operator|.
name|getFileMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileMetadata
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|inspector
operator|=
name|OrcStruct
operator|.
name|createObjectInspector
argument_list|(
literal|0
argument_list|,
name|fileMetadata
operator|.
name|getTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileMetaInfo
name|footerMetaData
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|getFileMetaInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|footerMetaData
operator|=
name|options
operator|.
name|getFileMetaInfo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|footerMetaData
operator|=
name|extractMetaInfoFromFooter
argument_list|(
name|fileSystem
argument_list|,
name|path
argument_list|,
name|options
operator|.
name|getMaxLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|footerMetaAndPsBuffer
operator|=
name|footerMetaData
operator|.
name|footerMetaAndPsBuffer
expr_stmt|;
name|MetaInfoObjExtractor
name|rInfo
init|=
operator|new
name|MetaInfoObjExtractor
argument_list|(
name|footerMetaData
operator|.
name|compressionType
argument_list|,
name|footerMetaData
operator|.
name|bufferSize
argument_list|,
name|footerMetaData
operator|.
name|metadataSize
argument_list|,
name|footerMetaData
operator|.
name|footerBuffer
argument_list|)
decl_stmt|;
name|this
operator|.
name|footerByteBuffer
operator|=
name|footerMetaData
operator|.
name|footerBuffer
expr_stmt|;
name|this
operator|.
name|inspector
operator|=
name|rInfo
operator|.
name|inspector
expr_stmt|;
block|}
block|}
comment|/** Extracts the necessary metadata from an externally store buffer (fullFooterBuffer). */
specifier|public
specifier|static
name|FooterInfo
name|extractMetaInfoFromFooter
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|,
name|Path
name|srcPath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Read the PostScript. Be very careful as some parts of this historically use bb position
comment|// and some use absolute offsets that have to take position into account.
name|int
name|baseOffset
init|=
name|bb
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|lastByteAbsPos
init|=
name|baseOffset
operator|+
name|bb
operator|.
name|remaining
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|psLen
init|=
name|bb
operator|.
name|get
argument_list|(
name|lastByteAbsPos
argument_list|)
operator|&
literal|0xff
decl_stmt|;
name|int
name|psAbsPos
init|=
name|lastByteAbsPos
operator|-
name|psLen
decl_stmt|;
name|OrcProto
operator|.
name|PostScript
name|ps
init|=
name|extractPostScript
argument_list|(
name|bb
argument_list|,
name|srcPath
argument_list|,
name|psLen
argument_list|,
name|psAbsPos
argument_list|)
decl_stmt|;
assert|assert
name|baseOffset
operator|==
name|bb
operator|.
name|position
argument_list|()
assert|;
comment|// Extract PS information.
name|int
name|footerSize
init|=
operator|(
name|int
operator|)
name|ps
operator|.
name|getFooterLength
argument_list|()
decl_stmt|,
name|metadataSize
init|=
operator|(
name|int
operator|)
name|ps
operator|.
name|getMetadataLength
argument_list|()
decl_stmt|,
name|footerAbsPos
init|=
name|psAbsPos
operator|-
name|footerSize
decl_stmt|,
name|metadataAbsPos
init|=
name|footerAbsPos
operator|-
name|metadataSize
decl_stmt|;
name|String
name|compressionType
init|=
name|ps
operator|.
name|getCompression
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|CompressionCodec
name|codec
init|=
name|WriterImpl
operator|.
name|createCodec
argument_list|(
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|CompressionKind
operator|.
name|valueOf
argument_list|(
name|compressionType
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|bufferSize
init|=
operator|(
name|int
operator|)
name|ps
operator|.
name|getCompressionBlockSize
argument_list|()
decl_stmt|;
name|bb
operator|.
name|position
argument_list|(
name|metadataAbsPos
argument_list|)
expr_stmt|;
name|bb
operator|.
name|mark
argument_list|()
expr_stmt|;
comment|// Extract metadata and footer.
name|OrcProto
operator|.
name|Metadata
name|metadata
init|=
name|extractMetadata
argument_list|(
name|bb
argument_list|,
name|metadataAbsPos
argument_list|,
name|metadataSize
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StripeStatistics
argument_list|>
name|stats
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|metadata
operator|.
name|getStripeStatsCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|OrcProto
operator|.
name|StripeStatistics
name|ss
range|:
name|metadata
operator|.
name|getStripeStatsList
argument_list|()
control|)
block|{
name|stats
operator|.
name|add
argument_list|(
operator|new
name|StripeStatistics
argument_list|(
name|ss
operator|.
name|getColStatsList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|OrcProto
operator|.
name|Footer
name|footer
init|=
name|extractFooter
argument_list|(
name|bb
argument_list|,
name|footerAbsPos
argument_list|,
name|footerSize
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
name|bb
operator|.
name|position
argument_list|(
name|metadataAbsPos
argument_list|)
expr_stmt|;
name|bb
operator|.
name|limit
argument_list|(
name|psAbsPos
argument_list|)
expr_stmt|;
comment|// TODO: do we need footer buffer here? FileInfo/FileMetaInfo is a mess...
name|FileMetaInfo
name|fmi
init|=
operator|new
name|FileMetaInfo
argument_list|(
name|compressionType
argument_list|,
name|bufferSize
argument_list|,
name|metadataSize
argument_list|,
name|bb
argument_list|,
name|extractWriterVersion
argument_list|(
name|ps
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|FooterInfo
argument_list|(
name|stats
argument_list|,
name|footer
argument_list|,
name|fmi
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|OrcProto
operator|.
name|Footer
name|extractFooter
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|,
name|int
name|footerAbsPos
parameter_list|,
name|int
name|footerSize
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|bb
operator|.
name|position
argument_list|(
name|footerAbsPos
argument_list|)
expr_stmt|;
name|bb
operator|.
name|limit
argument_list|(
name|footerAbsPos
operator|+
name|footerSize
argument_list|)
expr_stmt|;
return|return
name|OrcProto
operator|.
name|Footer
operator|.
name|parseFrom
argument_list|(
name|InStream
operator|.
name|createCodedInputStream
argument_list|(
literal|"footer"
argument_list|,
name|Lists
operator|.
expr|<
name|DiskRange
operator|>
name|newArrayList
argument_list|(
operator|new
name|BufferChunk
argument_list|(
name|bb
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|footerSize
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|OrcProto
operator|.
name|Metadata
name|extractMetadata
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|,
name|int
name|metadataAbsPos
parameter_list|,
name|int
name|metadataSize
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|bb
operator|.
name|position
argument_list|(
name|metadataAbsPos
argument_list|)
expr_stmt|;
name|bb
operator|.
name|limit
argument_list|(
name|metadataAbsPos
operator|+
name|metadataSize
argument_list|)
expr_stmt|;
return|return
name|OrcProto
operator|.
name|Metadata
operator|.
name|parseFrom
argument_list|(
name|InStream
operator|.
name|createCodedInputStream
argument_list|(
literal|"metadata"
argument_list|,
name|Lists
operator|.
expr|<
name|DiskRange
operator|>
name|newArrayList
argument_list|(
operator|new
name|BufferChunk
argument_list|(
name|bb
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|metadataSize
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|OrcProto
operator|.
name|PostScript
name|extractPostScript
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|psLen
parameter_list|,
name|int
name|psAbsOffset
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: when PB is upgraded to 2.6, newInstance(ByteBuffer) method should be used here.
assert|assert
name|bb
operator|.
name|hasArray
argument_list|()
assert|;
name|CodedInputStream
name|in
init|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|bb
operator|.
name|array
argument_list|()
argument_list|,
name|bb
operator|.
name|arrayOffset
argument_list|()
operator|+
name|psAbsOffset
argument_list|,
name|psLen
argument_list|)
decl_stmt|;
name|OrcProto
operator|.
name|PostScript
name|ps
init|=
name|OrcProto
operator|.
name|PostScript
operator|.
name|parseFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|checkOrcVersion
argument_list|(
name|LOG
argument_list|,
name|path
argument_list|,
name|ps
operator|.
name|getVersionList
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check compression codec.
switch|switch
condition|(
name|ps
operator|.
name|getCompression
argument_list|()
condition|)
block|{
case|case
name|NONE
case|:
break|break;
case|case
name|ZLIB
case|:
break|break;
case|case
name|SNAPPY
case|:
break|break;
case|case
name|LZO
case|:
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown compression"
argument_list|)
throw|;
block|}
return|return
name|ps
return|;
block|}
specifier|private
specifier|static
name|FileMetaInfo
name|extractMetaInfoFromFooter
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|long
name|maxFileLength
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataInputStream
name|file
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
literal|null
decl_stmt|,
name|fullFooterBuffer
init|=
literal|null
decl_stmt|;
name|OrcProto
operator|.
name|PostScript
name|ps
init|=
literal|null
decl_stmt|;
name|OrcFile
operator|.
name|WriterVersion
name|writerVersion
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// figure out the size of the file using the option or filesystem
name|long
name|size
decl_stmt|;
if|if
condition|(
name|maxFileLength
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
name|size
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|size
operator|=
name|maxFileLength
expr_stmt|;
block|}
comment|//read last bytes into buffer to get PostScript
name|int
name|readSize
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|size
argument_list|,
name|DIRECTORY_SIZE_GUESS
argument_list|)
decl_stmt|;
name|buffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|readSize
argument_list|)
expr_stmt|;
assert|assert
name|buffer
operator|.
name|position
argument_list|()
operator|==
literal|0
assert|;
name|file
operator|.
name|readFully
argument_list|(
operator|(
name|size
operator|-
name|readSize
operator|)
argument_list|,
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
name|buffer
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|readSize
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//read the PostScript
comment|//get length of PostScript
name|int
name|psLen
init|=
name|buffer
operator|.
name|get
argument_list|(
name|readSize
operator|-
literal|1
argument_list|)
operator|&
literal|0xff
decl_stmt|;
name|ensureOrcFooter
argument_list|(
name|file
argument_list|,
name|path
argument_list|,
name|psLen
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|int
name|psOffset
init|=
name|readSize
operator|-
literal|1
operator|-
name|psLen
decl_stmt|;
name|ps
operator|=
name|extractPostScript
argument_list|(
name|buffer
argument_list|,
name|path
argument_list|,
name|psLen
argument_list|,
name|psOffset
argument_list|)
expr_stmt|;
name|int
name|footerSize
init|=
operator|(
name|int
operator|)
name|ps
operator|.
name|getFooterLength
argument_list|()
decl_stmt|;
name|int
name|metadataSize
init|=
operator|(
name|int
operator|)
name|ps
operator|.
name|getMetadataLength
argument_list|()
decl_stmt|;
name|writerVersion
operator|=
name|extractWriterVersion
argument_list|(
name|ps
argument_list|)
expr_stmt|;
comment|//check if extra bytes need to be read
name|int
name|extra
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|psLen
operator|+
literal|1
operator|+
name|footerSize
operator|+
name|metadataSize
operator|-
name|readSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|extra
operator|>
literal|0
condition|)
block|{
comment|//more bytes need to be read, seek back to the right place and read extra bytes
name|ByteBuffer
name|extraBuf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|extra
operator|+
name|readSize
argument_list|)
decl_stmt|;
name|file
operator|.
name|readFully
argument_list|(
operator|(
name|size
operator|-
name|readSize
operator|-
name|extra
operator|)
argument_list|,
name|extraBuf
operator|.
name|array
argument_list|()
argument_list|,
name|extraBuf
operator|.
name|arrayOffset
argument_list|()
operator|+
name|extraBuf
operator|.
name|position
argument_list|()
argument_list|,
name|extra
argument_list|)
expr_stmt|;
name|extraBuf
operator|.
name|position
argument_list|(
name|extra
argument_list|)
expr_stmt|;
comment|//append with already read bytes
name|extraBuf
operator|.
name|put
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|extraBuf
expr_stmt|;
name|buffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fullFooterBuffer
operator|=
name|buffer
operator|.
name|slice
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|limit
argument_list|(
name|footerSize
operator|+
name|metadataSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//footer is already in the bytes in buffer, just adjust position, length
name|buffer
operator|.
name|position
argument_list|(
name|psOffset
operator|-
name|footerSize
operator|-
name|metadataSize
argument_list|)
expr_stmt|;
name|fullFooterBuffer
operator|=
name|buffer
operator|.
name|slice
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|limit
argument_list|(
name|psOffset
argument_list|)
expr_stmt|;
block|}
comment|// remember position for later TODO: what later? this comment is useless
name|buffer
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close the file after another error"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|FileMetaInfo
argument_list|(
name|ps
operator|.
name|getCompression
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|ps
operator|.
name|getCompressionBlockSize
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|ps
operator|.
name|getMetadataLength
argument_list|()
argument_list|,
name|buffer
argument_list|,
name|ps
operator|.
name|getVersionList
argument_list|()
argument_list|,
name|writerVersion
argument_list|,
name|fullFooterBuffer
argument_list|)
return|;
block|}
comment|/**    * MetaInfoObjExtractor - has logic to create the values for the fields in ReaderImpl    *  from serialized fields.    * As the fields are final, the fields need to be initialized in the constructor and    *  can't be done in some helper function. So this helper class is used instead.    *    */
specifier|private
specifier|static
class|class
name|MetaInfoObjExtractor
block|{
specifier|final
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|CompressionKind
name|compressionKind
decl_stmt|;
specifier|final
name|CompressionCodec
name|codec
decl_stmt|;
specifier|final
name|int
name|bufferSize
decl_stmt|;
specifier|final
name|int
name|metadataSize
decl_stmt|;
specifier|final
name|OrcProto
operator|.
name|Metadata
name|metadata
decl_stmt|;
specifier|final
name|OrcProto
operator|.
name|Footer
name|footer
decl_stmt|;
specifier|final
name|ObjectInspector
name|inspector
decl_stmt|;
name|MetaInfoObjExtractor
parameter_list|(
name|String
name|codecStr
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|int
name|metadataSize
parameter_list|,
name|ByteBuffer
name|footerBuffer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|compressionKind
operator|=
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|CompressionKind
operator|.
name|valueOf
argument_list|(
name|codecStr
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
name|this
operator|.
name|codec
operator|=
name|WriterImpl
operator|.
name|createCodec
argument_list|(
name|compressionKind
argument_list|)
expr_stmt|;
name|this
operator|.
name|metadataSize
operator|=
name|metadataSize
expr_stmt|;
name|int
name|position
init|=
name|footerBuffer
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|footerBufferSize
init|=
name|footerBuffer
operator|.
name|limit
argument_list|()
operator|-
name|footerBuffer
operator|.
name|position
argument_list|()
operator|-
name|metadataSize
decl_stmt|;
name|this
operator|.
name|metadata
operator|=
name|extractMetadata
argument_list|(
name|footerBuffer
argument_list|,
name|position
argument_list|,
name|metadataSize
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|footer
operator|=
name|extractFooter
argument_list|(
name|footerBuffer
argument_list|,
name|position
operator|+
name|metadataSize
argument_list|,
name|footerBufferSize
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|footerBuffer
operator|.
name|position
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|this
operator|.
name|inspector
operator|=
name|OrcStruct
operator|.
name|createObjectInspector
argument_list|(
literal|0
argument_list|,
name|footer
operator|.
name|getTypesList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|FileMetaInfo
name|getFileMetaInfo
parameter_list|()
block|{
return|return
operator|new
name|FileMetaInfo
argument_list|(
name|compressionKind
operator|.
name|toString
argument_list|()
argument_list|,
name|bufferSize
argument_list|,
name|getMetadataSize
argument_list|()
argument_list|,
name|footerByteBuffer
argument_list|,
name|getVersionList
argument_list|()
argument_list|,
name|getWriterVersion
argument_list|()
argument_list|,
name|footerMetaAndPsBuffer
argument_list|)
return|;
block|}
comment|/** Same as FileMetaInfo, but with extra fields. FileMetaInfo is serialized for splits    * and so we don't just add fields to it, it's already messy and confusing. */
specifier|public
specifier|static
specifier|final
class|class
name|FooterInfo
block|{
specifier|private
specifier|final
name|OrcProto
operator|.
name|Footer
name|footer
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|StripeStatistics
argument_list|>
name|metadata
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|stripes
decl_stmt|;
specifier|private
specifier|final
name|FileMetaInfo
name|fileMetaInfo
decl_stmt|;
specifier|private
name|FooterInfo
parameter_list|(
name|List
argument_list|<
name|StripeStatistics
argument_list|>
name|metadata
parameter_list|,
name|OrcProto
operator|.
name|Footer
name|footer
parameter_list|,
name|FileMetaInfo
name|fileMetaInfo
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|footer
operator|=
name|footer
expr_stmt|;
name|this
operator|.
name|fileMetaInfo
operator|=
name|fileMetaInfo
expr_stmt|;
name|this
operator|.
name|stripes
operator|=
name|convertProtoStripesToStripes
argument_list|(
name|footer
operator|.
name|getStripesList
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OrcProto
operator|.
name|Footer
name|getFooter
parameter_list|()
block|{
return|return
name|footer
return|;
block|}
specifier|public
name|List
argument_list|<
name|StripeStatistics
argument_list|>
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
specifier|public
name|FileMetaInfo
name|getFileMetaInfo
parameter_list|()
block|{
return|return
name|fileMetaInfo
return|;
block|}
specifier|public
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|getStripes
parameter_list|()
block|{
return|return
name|stripes
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getSerializedFileFooter
parameter_list|()
block|{
return|return
name|footerMetaAndPsBuffer
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
name|rows
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|rowsOptions
argument_list|(
operator|new
name|Options
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
name|rowsOptions
parameter_list|(
name|Options
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading ORC rows from "
operator|+
name|path
operator|+
literal|" with "
operator|+
name|options
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|include
init|=
name|options
operator|.
name|getInclude
argument_list|()
decl_stmt|;
comment|// if included columns is null, then include all columns
if|if
condition|(
name|include
operator|==
literal|null
condition|)
block|{
name|include
operator|=
operator|new
name|boolean
index|[
name|types
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|include
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|options
operator|.
name|include
argument_list|(
name|include
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RecordReaderImpl
argument_list|(
name|this
argument_list|,
name|options
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
name|rows
parameter_list|(
name|boolean
index|[]
name|include
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rowsOptions
argument_list|(
operator|new
name|Options
argument_list|()
operator|.
name|include
argument_list|(
name|include
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
name|rows
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|boolean
index|[]
name|include
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rowsOptions
argument_list|(
operator|new
name|Options
argument_list|()
operator|.
name|include
argument_list|(
name|include
argument_list|)
operator|.
name|range
argument_list|(
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
name|rows
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|boolean
index|[]
name|include
parameter_list|,
name|SearchArgument
name|sarg
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rowsOptions
argument_list|(
operator|new
name|Options
argument_list|()
operator|.
name|include
argument_list|(
name|include
argument_list|)
operator|.
name|range
argument_list|(
name|offset
argument_list|,
name|length
argument_list|)
operator|.
name|searchArgument
argument_list|(
name|sarg
argument_list|,
name|columnNames
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Hive "
operator|+
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

