begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|dump
operator|.
name|events
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|AddPartitionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|EventMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|PartitionFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|EximUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|DumpType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|dump
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_class
class|class
name|AddPartitionHandler
extends|extends
name|AbstractEventHandler
block|{
specifier|protected
name|AddPartitionHandler
parameter_list|(
name|NotificationEvent
name|notificationEvent
parameter_list|)
block|{
name|super
argument_list|(
name|notificationEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|EventMessage
name|eventMessage
parameter_list|(
name|String
name|stringRepresentation
parameter_list|)
block|{
return|return
name|deserializer
operator|.
name|getAddPartitionMessage
argument_list|(
name|stringRepresentation
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Context
name|withinContext
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing#{} ADD_PARTITION message : {}"
argument_list|,
name|fromEventId
argument_list|()
argument_list|,
name|eventMessageAsJSON
argument_list|)
expr_stmt|;
comment|// We do not dump partitions during metadata only bootstrap dump (See TableExport
comment|// .getPartitions(), for bootstrap dump we pass tableSpec with TABLE_ONLY set.). So don't
comment|// dump partition related events for metadata-only dump.
if|if
condition|(
name|withinContext
operator|.
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_DUMP_METADATA_ONLY
argument_list|)
condition|)
block|{
return|return;
block|}
name|AddPartitionMessage
name|apm
init|=
operator|(
name|AddPartitionMessage
operator|)
name|eventMessage
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|tobj
init|=
name|apm
operator|.
name|getTableObj
argument_list|()
decl_stmt|;
if|if
condition|(
name|tobj
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Event#{} was a ADD_PTN_EVENT with no table listed"
argument_list|,
name|fromEventId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Table
name|qlMdTable
init|=
operator|new
name|Table
argument_list|(
name|tobj
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Utils
operator|.
name|shouldReplicate
argument_list|(
name|withinContext
operator|.
name|replicationSpec
argument_list|,
name|qlMdTable
argument_list|,
literal|true
argument_list|,
name|withinContext
operator|.
name|getTablesForBootstrap
argument_list|()
argument_list|,
name|withinContext
operator|.
name|oldReplScope
argument_list|,
name|withinContext
operator|.
name|hiveConf
argument_list|)
condition|)
block|{
return|return;
block|}
name|Iterable
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
argument_list|>
name|ptns
init|=
name|apm
operator|.
name|getPartitionObjs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ptns
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
name|ptns
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
operator|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Event#{} was an ADD_PTN_EVENT with no partitions"
argument_list|,
name|fromEventId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Iterable
argument_list|<
name|Partition
argument_list|>
name|qlPtns
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
name|ptns
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|map
argument_list|(
name|input
lambda|->
block|{
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
operator|new
name|Partition
argument_list|(
name|qlMdTable
argument_list|,
name|input
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|metaDataPath
init|=
operator|new
name|Path
argument_list|(
name|withinContext
operator|.
name|eventRoot
argument_list|,
name|EximUtil
operator|.
name|METADATA_NAME
argument_list|)
decl_stmt|;
name|EximUtil
operator|.
name|createExportDump
argument_list|(
name|metaDataPath
operator|.
name|getFileSystem
argument_list|(
name|withinContext
operator|.
name|hiveConf
argument_list|)
argument_list|,
name|metaDataPath
argument_list|,
name|qlMdTable
argument_list|,
name|qlPtns
argument_list|,
name|withinContext
operator|.
name|replicationSpec
argument_list|,
name|withinContext
operator|.
name|hiveConf
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|PartitionFiles
argument_list|>
name|partitionFilesIter
init|=
name|apm
operator|.
name|getPartitionFilesIter
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// We expect one to one mapping between partitions and file iterators. For external table, this
comment|// list would be empty. So, it is enough to check hasNext outside the loop.
if|if
condition|(
name|partitionFilesIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
for|for
control|(
name|Partition
name|qlPtn
range|:
name|qlPtns
control|)
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|files
init|=
name|partitionFilesIter
operator|.
name|next
argument_list|()
operator|.
name|getFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
comment|// encoded filename/checksum of files, write into _files
try|try
init|(
name|BufferedWriter
name|fileListWriter
init|=
name|writer
argument_list|(
name|withinContext
argument_list|,
name|qlPtn
argument_list|)
init|)
block|{
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|fileListWriter
operator|.
name|write
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fileListWriter
operator|.
name|newLine
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|withinContext
operator|.
name|createDmd
argument_list|(
name|this
argument_list|)
operator|.
name|write
argument_list|()
expr_stmt|;
block|}
specifier|private
name|BufferedWriter
name|writer
parameter_list|(
name|Context
name|withinContext
parameter_list|,
name|Partition
name|qlPtn
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|ptnDataPath
init|=
operator|new
name|Path
argument_list|(
name|withinContext
operator|.
name|eventRoot
argument_list|,
name|qlPtn
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|ptnDataPath
operator|.
name|getFileSystem
argument_list|(
name|withinContext
operator|.
name|hiveConf
argument_list|)
decl_stmt|;
name|Path
name|filesPath
init|=
operator|new
name|Path
argument_list|(
name|ptnDataPath
argument_list|,
name|EximUtil
operator|.
name|FILES_NAME
argument_list|)
decl_stmt|;
return|return
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|fs
operator|.
name|create
argument_list|(
name|filesPath
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DumpType
name|dumpType
parameter_list|()
block|{
return|return
name|DumpType
operator|.
name|EVENT_ADD_PARTITION
return|;
block|}
block|}
end_class

end_unit

