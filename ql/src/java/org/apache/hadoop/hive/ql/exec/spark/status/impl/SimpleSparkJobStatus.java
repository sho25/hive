begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|status
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|Statistic
operator|.
name|SparkStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|Statistic
operator|.
name|SparkStatisticsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|counter
operator|.
name|SparkCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|status
operator|.
name|SparkJobState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|status
operator|.
name|SparkJobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
operator|.
name|status
operator|.
name|SparkStageProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|executor
operator|.
name|InputMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|executor
operator|.
name|ShuffleReadMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|executor
operator|.
name|ShuffleWriteMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|executor
operator|.
name|TaskMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|scheduler
operator|.
name|StageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|ui
operator|.
name|jobs
operator|.
name|JobProgressListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|ui
operator|.
name|jobs
operator|.
name|UIData
import|;
end_import

begin_import
import|import
name|scala
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|scala
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import static
name|scala
operator|.
name|collection
operator|.
name|JavaConversions
operator|.
name|bufferAsJavaList
import|;
end_import

begin_import
import|import static
name|scala
operator|.
name|collection
operator|.
name|JavaConversions
operator|.
name|mutableMapAsJavaMap
import|;
end_import

begin_class
specifier|public
class|class
name|SimpleSparkJobStatus
implements|implements
name|SparkJobStatus
block|{
specifier|private
name|int
name|jobId
decl_stmt|;
specifier|private
name|JobStateListener
name|jobStateListener
decl_stmt|;
specifier|private
name|JobProgressListener
name|jobProgressListener
decl_stmt|;
specifier|private
name|SparkCounters
name|sparkCounters
decl_stmt|;
specifier|public
name|SimpleSparkJobStatus
parameter_list|(
name|int
name|jobId
parameter_list|,
name|JobStateListener
name|stateListener
parameter_list|,
name|JobProgressListener
name|progressListener
parameter_list|,
name|SparkCounters
name|sparkCounters
parameter_list|)
block|{
name|this
operator|.
name|jobId
operator|=
name|jobId
expr_stmt|;
name|this
operator|.
name|jobStateListener
operator|=
name|stateListener
expr_stmt|;
name|this
operator|.
name|jobProgressListener
operator|=
name|progressListener
expr_stmt|;
name|this
operator|.
name|sparkCounters
operator|=
name|sparkCounters
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getJobId
parameter_list|()
block|{
return|return
name|jobId
return|;
block|}
annotation|@
name|Override
specifier|public
name|SparkJobState
name|getState
parameter_list|()
block|{
return|return
name|jobStateListener
operator|.
name|getJobState
argument_list|(
name|jobId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
index|[]
name|getStageIds
parameter_list|()
block|{
return|return
name|jobStateListener
operator|.
name|getStageIds
argument_list|(
name|jobId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SparkStageProgress
argument_list|>
name|getSparkStageProgress
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SparkStageProgress
argument_list|>
name|stageProgresses
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SparkStageProgress
argument_list|>
argument_list|()
decl_stmt|;
name|int
index|[]
name|stageIds
init|=
name|jobStateListener
operator|.
name|getStageIds
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|stageIds
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|stageId
range|:
name|stageIds
control|)
block|{
name|List
argument_list|<
name|StageInfo
argument_list|>
name|stageInfos
init|=
name|getStageInfo
argument_list|(
name|stageId
argument_list|)
decl_stmt|;
for|for
control|(
name|StageInfo
name|stageInfo
range|:
name|stageInfos
control|)
block|{
name|Tuple2
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|tuple2
init|=
operator|new
name|Tuple2
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|(
name|stageInfo
operator|.
name|stageId
argument_list|()
argument_list|,
name|stageInfo
operator|.
name|attemptId
argument_list|()
argument_list|)
decl_stmt|;
name|UIData
operator|.
name|StageUIData
name|uiData
init|=
name|jobProgressListener
operator|.
name|stageIdToData
argument_list|()
operator|.
name|get
argument_list|(
name|tuple2
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|uiData
operator|!=
literal|null
condition|)
block|{
name|int
name|runningTaskCount
init|=
name|uiData
operator|.
name|numActiveTasks
argument_list|()
decl_stmt|;
name|int
name|completedTaskCount
init|=
name|uiData
operator|.
name|numCompleteTasks
argument_list|()
decl_stmt|;
name|int
name|failedTaskCount
init|=
name|uiData
operator|.
name|numFailedTasks
argument_list|()
decl_stmt|;
name|int
name|totalTaskCount
init|=
name|stageInfo
operator|.
name|numTasks
argument_list|()
decl_stmt|;
name|int
name|killedTaskCount
init|=
literal|0
decl_stmt|;
name|long
name|costTime
decl_stmt|;
name|Option
argument_list|<
name|Object
argument_list|>
name|startOption
init|=
name|stageInfo
operator|.
name|submissionTime
argument_list|()
decl_stmt|;
name|Option
argument_list|<
name|Object
argument_list|>
name|completeOption
init|=
name|stageInfo
operator|.
name|completionTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|startOption
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|costTime
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|completeOption
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|long
name|startTime
init|=
operator|(
name|Long
operator|)
name|startOption
operator|.
name|get
argument_list|()
decl_stmt|;
name|costTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
expr_stmt|;
block|}
else|else
block|{
name|long
name|startTime
init|=
operator|(
name|Long
operator|)
name|startOption
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|completeTime
init|=
operator|(
name|Long
operator|)
name|completeOption
operator|.
name|get
argument_list|()
decl_stmt|;
name|costTime
operator|=
name|completeTime
operator|-
name|startTime
expr_stmt|;
block|}
name|SparkStageProgress
name|stageProgress
init|=
operator|new
name|SparkStageProgress
argument_list|(
name|totalTaskCount
argument_list|,
name|completedTaskCount
argument_list|,
name|runningTaskCount
argument_list|,
name|failedTaskCount
argument_list|,
name|killedTaskCount
argument_list|,
name|costTime
argument_list|)
decl_stmt|;
name|stageProgresses
operator|.
name|put
argument_list|(
name|stageInfo
operator|.
name|stageId
argument_list|()
operator|+
literal|"_"
operator|+
name|stageInfo
operator|.
name|attemptId
argument_list|()
argument_list|,
name|stageProgress
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|stageProgresses
return|;
block|}
annotation|@
name|Override
specifier|public
name|SparkCounters
name|getCounter
parameter_list|()
block|{
return|return
name|sparkCounters
return|;
block|}
annotation|@
name|Override
specifier|public
name|SparkStatistics
name|getSparkStatistics
parameter_list|()
block|{
name|SparkStatisticsBuilder
name|sparkStatisticsBuilder
init|=
operator|new
name|SparkStatisticsBuilder
argument_list|()
decl_stmt|;
comment|// add Hive operator level statistics.
name|sparkStatisticsBuilder
operator|.
name|add
argument_list|(
name|sparkCounters
argument_list|)
expr_stmt|;
comment|// add spark job metrics.
name|String
name|jobIdentifier
init|=
literal|"Spark Job["
operator|+
name|jobId
operator|+
literal|"] Metrics"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TaskMetrics
argument_list|>
argument_list|>
name|jobMetric
init|=
name|jobStateListener
operator|.
name|getJobMetric
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|flatJobMetric
init|=
name|combineJobLevelMetrics
argument_list|(
name|jobMetric
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|flatJobMetric
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sparkStatisticsBuilder
operator|.
name|add
argument_list|(
name|jobIdentifier
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sparkStatisticsBuilder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|jobStateListener
operator|.
name|cleanup
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|combineJobLevelMetrics
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|TaskMetrics
argument_list|>
argument_list|>
name|jobMetric
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|results
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
name|long
name|executorDeserializeTime
init|=
literal|0
decl_stmt|;
name|long
name|executorRunTime
init|=
literal|0
decl_stmt|;
name|long
name|resultSize
init|=
literal|0
decl_stmt|;
name|long
name|jvmGCTime
init|=
literal|0
decl_stmt|;
name|long
name|resultSerializationTime
init|=
literal|0
decl_stmt|;
name|long
name|memoryBytesSpilled
init|=
literal|0
decl_stmt|;
name|long
name|diskBytesSpilled
init|=
literal|0
decl_stmt|;
name|long
name|bytesRead
init|=
literal|0
decl_stmt|;
name|long
name|remoteBlocksFetched
init|=
literal|0
decl_stmt|;
name|long
name|localBlocksFetched
init|=
literal|0
decl_stmt|;
name|long
name|fetchWaitTime
init|=
literal|0
decl_stmt|;
name|long
name|remoteBytesRead
init|=
literal|0
decl_stmt|;
name|long
name|shuffleBytesWritten
init|=
literal|0
decl_stmt|;
name|long
name|shuffleWriteTime
init|=
literal|0
decl_stmt|;
name|boolean
name|inputMetricExist
init|=
literal|false
decl_stmt|;
name|boolean
name|shuffleReadMetricExist
init|=
literal|false
decl_stmt|;
name|boolean
name|shuffleWriteMetricExist
init|=
literal|false
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|TaskMetrics
argument_list|>
name|stageMetric
range|:
name|jobMetric
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|TaskMetrics
name|taskMetrics
range|:
name|stageMetric
control|)
block|{
name|executorDeserializeTime
operator|+=
name|taskMetrics
operator|.
name|executorDeserializeTime
argument_list|()
expr_stmt|;
name|executorRunTime
operator|+=
name|taskMetrics
operator|.
name|executorRunTime
argument_list|()
expr_stmt|;
name|resultSize
operator|+=
name|taskMetrics
operator|.
name|resultSize
argument_list|()
expr_stmt|;
name|jvmGCTime
operator|+=
name|taskMetrics
operator|.
name|jvmGCTime
argument_list|()
expr_stmt|;
name|resultSerializationTime
operator|+=
name|taskMetrics
operator|.
name|resultSerializationTime
argument_list|()
expr_stmt|;
name|memoryBytesSpilled
operator|+=
name|taskMetrics
operator|.
name|memoryBytesSpilled
argument_list|()
expr_stmt|;
name|diskBytesSpilled
operator|+=
name|taskMetrics
operator|.
name|diskBytesSpilled
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|taskMetrics
operator|.
name|inputMetrics
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|inputMetricExist
operator|=
literal|true
expr_stmt|;
name|bytesRead
operator|+=
name|taskMetrics
operator|.
name|inputMetrics
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|bytesRead
argument_list|()
expr_stmt|;
block|}
name|Option
argument_list|<
name|ShuffleReadMetrics
argument_list|>
name|shuffleReadMetricsOption
init|=
name|taskMetrics
operator|.
name|shuffleReadMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|shuffleReadMetricsOption
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|shuffleReadMetricExist
operator|=
literal|true
expr_stmt|;
name|remoteBlocksFetched
operator|+=
name|shuffleReadMetricsOption
operator|.
name|get
argument_list|()
operator|.
name|remoteBlocksFetched
argument_list|()
expr_stmt|;
name|localBlocksFetched
operator|+=
name|shuffleReadMetricsOption
operator|.
name|get
argument_list|()
operator|.
name|localBlocksFetched
argument_list|()
expr_stmt|;
name|fetchWaitTime
operator|+=
name|shuffleReadMetricsOption
operator|.
name|get
argument_list|()
operator|.
name|fetchWaitTime
argument_list|()
expr_stmt|;
name|remoteBytesRead
operator|+=
name|shuffleReadMetricsOption
operator|.
name|get
argument_list|()
operator|.
name|remoteBytesRead
argument_list|()
expr_stmt|;
block|}
name|Option
argument_list|<
name|ShuffleWriteMetrics
argument_list|>
name|shuffleWriteMetricsOption
init|=
name|taskMetrics
operator|.
name|shuffleWriteMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|shuffleWriteMetricsOption
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|shuffleWriteMetricExist
operator|=
literal|true
expr_stmt|;
name|shuffleBytesWritten
operator|+=
name|shuffleWriteMetricsOption
operator|.
name|get
argument_list|()
operator|.
name|shuffleBytesWritten
argument_list|()
expr_stmt|;
name|shuffleWriteTime
operator|+=
name|shuffleWriteMetricsOption
operator|.
name|get
argument_list|()
operator|.
name|shuffleWriteTime
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|results
operator|.
name|put
argument_list|(
literal|"EexcutorDeserializeTime"
argument_list|,
name|executorDeserializeTime
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
literal|"ExecutorRunTime"
argument_list|,
name|executorRunTime
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
literal|"ResultSize"
argument_list|,
name|resultSize
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
literal|"JvmGCTime"
argument_list|,
name|jvmGCTime
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
literal|"ResultSerializationTime"
argument_list|,
name|resultSerializationTime
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
literal|"MemoryBytesSpilled"
argument_list|,
name|memoryBytesSpilled
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
literal|"DiskBytesSpilled"
argument_list|,
name|diskBytesSpilled
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputMetricExist
condition|)
block|{
name|results
operator|.
name|put
argument_list|(
literal|"BytesRead"
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shuffleReadMetricExist
condition|)
block|{
name|results
operator|.
name|put
argument_list|(
literal|"RemoteBlocksFetched"
argument_list|,
name|remoteBlocksFetched
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
literal|"LocalBlocksFetched"
argument_list|,
name|localBlocksFetched
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
literal|"TotalBlocksFetched"
argument_list|,
name|localBlocksFetched
operator|+
name|remoteBlocksFetched
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
literal|"FetchWaitTime"
argument_list|,
name|fetchWaitTime
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
literal|"RemoteBytesRead"
argument_list|,
name|remoteBytesRead
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shuffleWriteMetricExist
condition|)
block|{
name|results
operator|.
name|put
argument_list|(
literal|"ShuffleBytesWritten"
argument_list|,
name|shuffleBytesWritten
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
literal|"ShuffleWriteTime"
argument_list|,
name|shuffleWriteTime
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
specifier|private
name|List
argument_list|<
name|StageInfo
argument_list|>
name|getStageInfo
parameter_list|(
name|int
name|stageId
parameter_list|)
block|{
name|List
argument_list|<
name|StageInfo
argument_list|>
name|stageInfos
init|=
operator|new
name|LinkedList
argument_list|<
name|StageInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|StageInfo
argument_list|>
name|activeStages
init|=
name|mutableMapAsJavaMap
argument_list|(
name|jobProgressListener
operator|.
name|activeStages
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StageInfo
argument_list|>
name|completedStages
init|=
name|bufferAsJavaList
argument_list|(
name|jobProgressListener
operator|.
name|completedStages
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StageInfo
argument_list|>
name|failedStages
init|=
name|bufferAsJavaList
argument_list|(
name|jobProgressListener
operator|.
name|failedStages
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|activeStages
operator|.
name|containsKey
argument_list|(
name|stageId
argument_list|)
condition|)
block|{
name|stageInfos
operator|.
name|add
argument_list|(
name|activeStages
operator|.
name|get
argument_list|(
name|stageId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|StageInfo
name|stageInfo
range|:
name|completedStages
control|)
block|{
if|if
condition|(
name|stageInfo
operator|.
name|stageId
argument_list|()
operator|==
name|stageId
condition|)
block|{
name|stageInfos
operator|.
name|add
argument_list|(
name|stageInfo
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|StageInfo
name|stageInfo
range|:
name|failedStages
control|)
block|{
if|if
condition|(
name|stageInfo
operator|.
name|stageId
argument_list|()
operator|==
name|stageId
condition|)
block|{
name|stageInfos
operator|.
name|add
argument_list|(
name|stageInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|stageInfos
return|;
block|}
block|}
end_class

end_unit

