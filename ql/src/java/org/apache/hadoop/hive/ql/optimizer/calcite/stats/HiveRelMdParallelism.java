begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|ReflectiveRelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMdParallelism
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|BuiltInMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|RelOptHiveTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
operator|.
name|JoinAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
operator|.
name|MapJoinStreamingRelation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveTableScan
import|;
end_import

begin_class
specifier|public
class|class
name|HiveRelMdParallelism
extends|extends
name|RelMdParallelism
block|{
specifier|private
specifier|final
name|Double
name|maxSplitSize
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
specifier|public
name|HiveRelMdParallelism
parameter_list|(
name|Double
name|maxSplitSize
parameter_list|)
block|{
name|this
operator|.
name|maxSplitSize
operator|=
name|maxSplitSize
expr_stmt|;
block|}
specifier|public
name|RelMetadataProvider
name|getMetadataProvider
parameter_list|()
block|{
return|return
name|ReflectiveRelMetadataProvider
operator|.
name|reflectiveSource
argument_list|(
name|this
argument_list|,
name|BuiltInMethod
operator|.
name|IS_PHASE_TRANSITION
operator|.
name|method
argument_list|,
name|BuiltInMethod
operator|.
name|SPLIT_COUNT
operator|.
name|method
argument_list|)
return|;
block|}
comment|//~ Methods ----------------------------------------------------------------
specifier|public
name|Boolean
name|isPhaseTransition
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
comment|// As Exchange operator is introduced later on, we make a
comment|// common join operator create a new stage for the moment
if|if
condition|(
name|join
operator|.
name|getJoinAlgorithm
argument_list|()
operator|==
name|JoinAlgorithm
operator|.
name|COMMON_JOIN
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|Boolean
name|isPhaseTransition
parameter_list|(
name|HiveSort
name|sort
parameter_list|)
block|{
comment|// As Exchange operator is introduced later on, we make a
comment|// sort operator create a new stage for the moment
return|return
literal|true
return|;
block|}
specifier|public
name|Integer
name|splitCount
parameter_list|(
name|HiveJoin
name|join
parameter_list|)
block|{
if|if
condition|(
name|join
operator|.
name|getJoinAlgorithm
argument_list|()
operator|==
name|JoinAlgorithm
operator|.
name|COMMON_JOIN
condition|)
block|{
return|return
name|splitCountRepartition
argument_list|(
name|join
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|join
operator|.
name|getJoinAlgorithm
argument_list|()
operator|==
name|JoinAlgorithm
operator|.
name|MAP_JOIN
operator|||
name|join
operator|.
name|getJoinAlgorithm
argument_list|()
operator|==
name|JoinAlgorithm
operator|.
name|BUCKET_JOIN
operator|||
name|join
operator|.
name|getJoinAlgorithm
argument_list|()
operator|==
name|JoinAlgorithm
operator|.
name|SMB_JOIN
condition|)
block|{
name|RelNode
name|largeInput
decl_stmt|;
if|if
condition|(
name|join
operator|.
name|getMapJoinStreamingSide
argument_list|()
operator|==
name|MapJoinStreamingRelation
operator|.
name|LEFT_RELATION
condition|)
block|{
name|largeInput
operator|=
name|join
operator|.
name|getLeft
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|join
operator|.
name|getMapJoinStreamingSide
argument_list|()
operator|==
name|MapJoinStreamingRelation
operator|.
name|RIGHT_RELATION
condition|)
block|{
name|largeInput
operator|=
name|join
operator|.
name|getRight
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
return|return
name|splitCount
argument_list|(
name|largeInput
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Integer
name|splitCount
parameter_list|(
name|HiveTableScan
name|scan
parameter_list|)
block|{
name|RelOptHiveTable
name|table
init|=
operator|(
name|RelOptHiveTable
operator|)
name|scan
operator|.
name|getTable
argument_list|()
decl_stmt|;
return|return
name|table
operator|.
name|getHiveTableMD
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
return|;
block|}
specifier|public
name|Integer
name|splitCount
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
name|Boolean
name|newPhase
init|=
name|RelMetadataQuery
operator|.
name|isPhaseTransition
argument_list|(
name|rel
argument_list|)
decl_stmt|;
if|if
condition|(
name|newPhase
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|newPhase
condition|)
block|{
comment|// We repartition: new number of splits
return|return
name|splitCountRepartition
argument_list|(
name|rel
argument_list|)
return|;
block|}
comment|// We do not repartition: take number of splits from children
name|Integer
name|splitCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RelNode
name|input
range|:
name|rel
operator|.
name|getInputs
argument_list|()
control|)
block|{
name|splitCount
operator|+=
name|RelMetadataQuery
operator|.
name|splitCount
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
return|return
name|splitCount
return|;
block|}
specifier|public
name|Integer
name|splitCountRepartition
parameter_list|(
name|RelNode
name|rel
parameter_list|)
block|{
comment|// We repartition: new number of splits
specifier|final
name|Double
name|averageRowSize
init|=
name|RelMetadataQuery
operator|.
name|getAverageRowSize
argument_list|(
name|rel
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|rowCount
init|=
name|RelMetadataQuery
operator|.
name|getRowCount
argument_list|(
name|rel
argument_list|)
decl_stmt|;
if|if
condition|(
name|averageRowSize
operator|==
literal|null
operator|||
name|rowCount
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Double
name|totalSize
init|=
name|averageRowSize
operator|*
name|rowCount
decl_stmt|;
specifier|final
name|Double
name|splitCount
init|=
name|totalSize
operator|/
name|maxSplitSize
decl_stmt|;
return|return
name|splitCount
operator|.
name|intValue
argument_list|()
return|;
block|}
block|}
end_class

begin_comment
comment|// End RelMdParallelism.java
end_comment

end_unit

