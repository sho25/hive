begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IgnoreKeyTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveStorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|TypeCheckProcFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|DelimitedJSONSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|MetadataTypedColumnsetSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|BinarySortableSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
operator|.
name|ColumnarSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinarySerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_comment
comment|/**  * PlanUtils.  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PlanUtils
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hive.ql.plan.PlanUtils"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|long
name|countForMapJoinDumpFilePrefix
init|=
literal|0
decl_stmt|;
comment|/**    * ExpressionTypes.    *    */
specifier|public
specifier|static
enum|enum
name|ExpressionTypes
block|{
name|FIELD
block|,
name|JEXL
block|}
empty_stmt|;
specifier|public
specifier|static
specifier|synchronized
name|long
name|getCountForMapJoinDumpFilePrefix
parameter_list|()
block|{
return|return
name|countForMapJoinDumpFilePrefix
operator|++
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|public
specifier|static
name|MapredWork
name|getMapRedWork
parameter_list|()
block|{
return|return
operator|new
name|MapredWork
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|TableDesc
name|getDefaultTableDesc
parameter_list|(
name|CreateTableDesc
name|directoryDesc
parameter_list|,
name|String
name|cols
parameter_list|,
name|String
name|colTypes
parameter_list|)
block|{
name|TableDesc
name|ret
init|=
name|getDefaultTableDesc
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|Utilities
operator|.
name|ctrlaCode
argument_list|)
argument_list|,
name|cols
argument_list|,
name|colTypes
argument_list|,
literal|false
argument_list|)
decl_stmt|;
empty_stmt|;
if|if
condition|(
name|directoryDesc
operator|==
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
try|try
block|{
name|Properties
name|properties
init|=
name|ret
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|directoryDesc
operator|.
name|getFieldDelim
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|,
name|directoryDesc
operator|.
name|getFieldDelim
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
name|directoryDesc
operator|.
name|getFieldDelim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directoryDesc
operator|.
name|getLineDelim
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LINE_DELIM
argument_list|,
name|directoryDesc
operator|.
name|getLineDelim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directoryDesc
operator|.
name|getCollItemDelim
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|COLLECTION_DELIM
argument_list|,
name|directoryDesc
operator|.
name|getCollItemDelim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directoryDesc
operator|.
name|getMapKeyDelim
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|MAPKEY_DELIM
argument_list|,
name|directoryDesc
operator|.
name|getMapKeyDelim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directoryDesc
operator|.
name|getFieldEscape
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|ESCAPE_CHAR
argument_list|,
name|directoryDesc
operator|.
name|getFieldEscape
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directoryDesc
operator|.
name|getSerName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_LIB
argument_list|,
name|directoryDesc
operator|.
name|getSerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directoryDesc
operator|.
name|getSerdeProps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|putAll
argument_list|(
name|directoryDesc
operator|.
name|getSerdeProps
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directoryDesc
operator|.
name|getOutputFormat
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|setOutputFileFormatClass
argument_list|(
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|directoryDesc
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directoryDesc
operator|.
name|getNullFormat
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|,
name|directoryDesc
operator|.
name|getNullFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directoryDesc
operator|.
name|getTblProps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|putAll
argument_list|(
name|directoryDesc
operator|.
name|getTblProps
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// mimicking behaviour in CreateTableDesc tableDesc creation
comment|// returning null table description for output.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to find class in getDefaultTableDesc: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Generate the table descriptor of MetadataTypedColumnsetSerDe with the    * separatorCode and column names (comma separated string).    */
specifier|public
specifier|static
name|TableDesc
name|getDefaultTableDesc
parameter_list|(
name|String
name|separatorCode
parameter_list|,
name|String
name|columns
parameter_list|)
block|{
return|return
name|getDefaultTableDesc
argument_list|(
name|separatorCode
argument_list|,
name|columns
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Generate the table descriptor of given serde with the separatorCode and    * column names (comma separated string).    */
specifier|public
specifier|static
name|TableDesc
name|getTableDesc
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Deserializer
argument_list|>
name|serdeClass
parameter_list|,
name|String
name|separatorCode
parameter_list|,
name|String
name|columns
parameter_list|)
block|{
return|return
name|getTableDesc
argument_list|(
name|serdeClass
argument_list|,
name|separatorCode
argument_list|,
name|columns
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Generate the table descriptor of MetadataTypedColumnsetSerDe with the    * separatorCode and column names (comma separated string), and whether the    * last column should take the rest of the line.    */
specifier|public
specifier|static
name|TableDesc
name|getDefaultTableDesc
parameter_list|(
name|String
name|separatorCode
parameter_list|,
name|String
name|columns
parameter_list|,
name|boolean
name|lastColumnTakesRestOfTheLine
parameter_list|)
block|{
return|return
name|getDefaultTableDesc
argument_list|(
name|separatorCode
argument_list|,
name|columns
argument_list|,
literal|null
argument_list|,
name|lastColumnTakesRestOfTheLine
argument_list|)
return|;
block|}
comment|/**    * Generate the table descriptor of the serde specified with the separatorCode    * and column names (comma separated string), and whether the last column    * should take the rest of the line.    */
specifier|public
specifier|static
name|TableDesc
name|getTableDesc
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Deserializer
argument_list|>
name|serdeClass
parameter_list|,
name|String
name|separatorCode
parameter_list|,
name|String
name|columns
parameter_list|,
name|boolean
name|lastColumnTakesRestOfTheLine
parameter_list|)
block|{
return|return
name|getTableDesc
argument_list|(
name|serdeClass
argument_list|,
name|separatorCode
argument_list|,
name|columns
argument_list|,
literal|null
argument_list|,
name|lastColumnTakesRestOfTheLine
argument_list|)
return|;
block|}
comment|/**    * Generate the table descriptor of MetadataTypedColumnsetSerDe with the    * separatorCode and column names (comma separated string), and whether the    * last column should take the rest of the line.    */
specifier|public
specifier|static
name|TableDesc
name|getDefaultTableDesc
parameter_list|(
name|String
name|separatorCode
parameter_list|,
name|String
name|columns
parameter_list|,
name|String
name|columnTypes
parameter_list|,
name|boolean
name|lastColumnTakesRestOfTheLine
parameter_list|)
block|{
return|return
name|getTableDesc
argument_list|(
name|LazySimpleSerDe
operator|.
name|class
argument_list|,
name|separatorCode
argument_list|,
name|columns
argument_list|,
name|columnTypes
argument_list|,
name|lastColumnTakesRestOfTheLine
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TableDesc
name|getTableDesc
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Deserializer
argument_list|>
name|serdeClass
parameter_list|,
name|String
name|separatorCode
parameter_list|,
name|String
name|columns
parameter_list|,
name|String
name|columnTypes
parameter_list|,
name|boolean
name|lastColumnTakesRestOfTheLine
parameter_list|)
block|{
return|return
name|getTableDesc
argument_list|(
name|serdeClass
argument_list|,
name|separatorCode
argument_list|,
name|columns
argument_list|,
name|columnTypes
argument_list|,
name|lastColumnTakesRestOfTheLine
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TableDesc
name|getTableDesc
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Deserializer
argument_list|>
name|serdeClass
parameter_list|,
name|String
name|separatorCode
parameter_list|,
name|String
name|columns
parameter_list|,
name|String
name|columnTypes
parameter_list|,
name|boolean
name|lastColumnTakesRestOfTheLine
parameter_list|,
name|boolean
name|useDelimitedJSON
parameter_list|)
block|{
return|return
name|getTableDesc
argument_list|(
name|serdeClass
argument_list|,
name|separatorCode
argument_list|,
name|columns
argument_list|,
name|columnTypes
argument_list|,
name|lastColumnTakesRestOfTheLine
argument_list|,
name|useDelimitedJSON
argument_list|,
literal|"TextFile"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TableDesc
name|getTableDesc
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Deserializer
argument_list|>
name|serdeClass
parameter_list|,
name|String
name|separatorCode
parameter_list|,
name|String
name|columns
parameter_list|,
name|String
name|columnTypes
parameter_list|,
name|boolean
name|lastColumnTakesRestOfTheLine
parameter_list|,
name|boolean
name|useDelimitedJSON
parameter_list|,
name|String
name|fileFormat
parameter_list|)
block|{
name|Properties
name|properties
init|=
name|Utilities
operator|.
name|makeProperties
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
name|separatorCode
argument_list|,
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|columns
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|separatorCode
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|Utilities
operator|.
name|ctrlaCode
argument_list|)
argument_list|)
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|,
name|separatorCode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|columnTypes
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|columnTypes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastColumnTakesRestOfTheLine
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_LAST_COLUMN_TAKES_REST
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
comment|// It is not a very clean way, and should be modified later - due to
comment|// compatibility reasons,
comment|// user sees the results as json for custom scripts and has no way for
comment|// specifying that.
comment|// Right now, it is hard-coded in the code
if|if
condition|(
name|useDelimitedJSON
condition|)
block|{
name|serdeClass
operator|=
name|DelimitedJSONSerDe
operator|.
name|class
expr_stmt|;
block|}
name|Class
name|inputFormat
decl_stmt|,
name|outputFormat
decl_stmt|;
comment|// get the input& output file formats
if|if
condition|(
literal|"SequenceFile"
operator|.
name|equalsIgnoreCase
argument_list|(
name|fileFormat
argument_list|)
condition|)
block|{
name|inputFormat
operator|=
name|SequenceFileInputFormat
operator|.
name|class
expr_stmt|;
name|outputFormat
operator|=
name|SequenceFileOutputFormat
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"RCFile"
operator|.
name|equalsIgnoreCase
argument_list|(
name|fileFormat
argument_list|)
condition|)
block|{
name|inputFormat
operator|=
name|RCFileInputFormat
operator|.
name|class
expr_stmt|;
name|outputFormat
operator|=
name|RCFileOutputFormat
operator|.
name|class
expr_stmt|;
assert|assert
name|serdeClass
operator|==
name|ColumnarSerDe
operator|.
name|class
assert|;
block|}
else|else
block|{
comment|// use TextFile by default
name|inputFormat
operator|=
name|TextInputFormat
operator|.
name|class
expr_stmt|;
name|outputFormat
operator|=
name|IgnoreKeyTextOutputFormat
operator|.
name|class
expr_stmt|;
block|}
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_LIB
argument_list|,
name|serdeClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|TableDesc
argument_list|(
name|inputFormat
argument_list|,
name|outputFormat
argument_list|,
name|properties
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TableDesc
name|getDefaultQueryOutputTableDesc
parameter_list|(
name|String
name|cols
parameter_list|,
name|String
name|colTypes
parameter_list|,
name|String
name|fileFormat
parameter_list|)
block|{
name|TableDesc
name|tblDesc
init|=
name|getTableDesc
argument_list|(
name|LazySimpleSerDe
operator|.
name|class
argument_list|,
literal|""
operator|+
name|Utilities
operator|.
name|ctrlaCode
argument_list|,
name|cols
argument_list|,
name|colTypes
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|fileFormat
argument_list|)
decl_stmt|;
comment|//enable escaping
name|tblDesc
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|ESCAPE_CHAR
argument_list|,
literal|"\\"
argument_list|)
expr_stmt|;
name|tblDesc
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_ESCAPE_CRLF
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|//enable extended nesting levels
name|tblDesc
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|LazySerDeParameters
operator|.
name|SERIALIZATION_EXTEND_ADDITIONAL_NESTING_LEVELS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|tblDesc
return|;
block|}
comment|/**    * Generate a table descriptor from a createTableDesc.    */
specifier|public
specifier|static
name|TableDesc
name|getTableDesc
parameter_list|(
name|CreateTableDesc
name|crtTblDesc
parameter_list|,
name|String
name|cols
parameter_list|,
name|String
name|colTypes
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Deserializer
argument_list|>
name|serdeClass
init|=
name|LazySimpleSerDe
operator|.
name|class
decl_stmt|;
name|String
name|separatorCode
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|Utilities
operator|.
name|ctrlaCode
argument_list|)
decl_stmt|;
name|String
name|columns
init|=
name|cols
decl_stmt|;
name|String
name|columnTypes
init|=
name|colTypes
decl_stmt|;
name|boolean
name|lastColumnTakesRestOfTheLine
init|=
literal|false
decl_stmt|;
name|TableDesc
name|ret
decl_stmt|;
try|try
block|{
if|if
condition|(
name|crtTblDesc
operator|.
name|getSerName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Class
name|c
init|=
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|crtTblDesc
operator|.
name|getSerName
argument_list|()
argument_list|)
decl_stmt|;
name|serdeClass
operator|=
name|c
expr_stmt|;
block|}
if|if
condition|(
name|crtTblDesc
operator|.
name|getFieldDelim
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|separatorCode
operator|=
name|crtTblDesc
operator|.
name|getFieldDelim
argument_list|()
expr_stmt|;
block|}
name|ret
operator|=
name|getTableDesc
argument_list|(
name|serdeClass
argument_list|,
name|separatorCode
argument_list|,
name|columns
argument_list|,
name|columnTypes
argument_list|,
name|lastColumnTakesRestOfTheLine
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// set other table properties
name|Properties
name|properties
init|=
name|ret
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|crtTblDesc
operator|.
name|getCollItemDelim
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|COLLECTION_DELIM
argument_list|,
name|crtTblDesc
operator|.
name|getCollItemDelim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTblDesc
operator|.
name|getMapKeyDelim
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|MAPKEY_DELIM
argument_list|,
name|crtTblDesc
operator|.
name|getMapKeyDelim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTblDesc
operator|.
name|getFieldEscape
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|ESCAPE_CHAR
argument_list|,
name|crtTblDesc
operator|.
name|getFieldEscape
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTblDesc
operator|.
name|getLineDelim
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LINE_DELIM
argument_list|,
name|crtTblDesc
operator|.
name|getLineDelim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTblDesc
operator|.
name|getNullFormat
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|,
name|crtTblDesc
operator|.
name|getNullFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTblDesc
operator|.
name|getTableName
argument_list|()
operator|!=
literal|null
operator|&&
name|crtTblDesc
operator|.
name|getDatabaseName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|META_TABLE_NAME
argument_list|,
name|crtTblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTblDesc
operator|.
name|getTblProps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|putAll
argument_list|(
name|crtTblDesc
operator|.
name|getTblProps
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|crtTblDesc
operator|.
name|getSerdeProps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|putAll
argument_list|(
name|crtTblDesc
operator|.
name|getSerdeProps
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// replace the default input& output file format with those found in
comment|// crtTblDesc
name|Class
name|c1
init|=
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|crtTblDesc
operator|.
name|getInputFormat
argument_list|()
argument_list|)
decl_stmt|;
name|Class
name|c2
init|=
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|crtTblDesc
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|in_class
init|=
name|c1
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|HiveOutputFormat
argument_list|>
name|out_class
init|=
name|c2
decl_stmt|;
name|ret
operator|.
name|setInputFileFormatClass
argument_list|(
name|in_class
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setOutputFileFormatClass
argument_list|(
name|out_class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to find class in getTableDesc: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Generate the table descriptor of MetadataTypedColumnsetSerDe with the    * separatorCode. MetaDataTypedColumnsetSerDe is used because LazySimpleSerDe    * does not support a table with a single column "col" with type    * "array<string>".    */
specifier|public
specifier|static
name|TableDesc
name|getDefaultTableDesc
parameter_list|(
name|String
name|separatorCode
parameter_list|)
block|{
return|return
operator|new
name|TableDesc
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|,
name|IgnoreKeyTextOutputFormat
operator|.
name|class
argument_list|,
name|Utilities
operator|.
name|makeProperties
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
name|separatorCode
argument_list|,
name|serdeConstants
operator|.
name|SERIALIZATION_LIB
argument_list|,
name|MetadataTypedColumnsetSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Generate the table descriptor for reduce key.    */
specifier|public
specifier|static
name|TableDesc
name|getReduceKeyTableDesc
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemas
parameter_list|,
name|String
name|order
parameter_list|)
block|{
return|return
operator|new
name|TableDesc
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|,
name|Utilities
operator|.
name|makeProperties
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnNamesFromFieldSchema
argument_list|(
name|fieldSchemas
argument_list|)
argument_list|,
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnTypesFromFieldSchema
argument_list|(
name|fieldSchemas
argument_list|)
argument_list|,
name|serdeConstants
operator|.
name|SERIALIZATION_SORT_ORDER
argument_list|,
name|order
argument_list|,
name|serdeConstants
operator|.
name|SERIALIZATION_LIB
argument_list|,
name|BinarySortableSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Generate the table descriptor for Map-side join key.    */
specifier|public
specifier|static
name|TableDesc
name|getMapJoinKeyTableDesc
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemas
parameter_list|)
block|{
if|if
condition|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|)
operator|.
name|equals
argument_list|(
literal|"tez"
argument_list|)
condition|)
block|{
comment|// In tez we use a different way of transmitting the hash table.
comment|// We basically use ReduceSinkOperators and set the transfer to
comment|// be broadcast (instead of partitioned). As a consequence we use
comment|// a different SerDe than in the MR mapjoin case.
name|StringBuilder
name|order
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|f
range|:
name|fieldSchemas
control|)
block|{
name|order
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TableDesc
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|,
name|Utilities
operator|.
name|makeProperties
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnNamesFromFieldSchema
argument_list|(
name|fieldSchemas
argument_list|)
argument_list|,
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnTypesFromFieldSchema
argument_list|(
name|fieldSchemas
argument_list|)
argument_list|,
name|serdeConstants
operator|.
name|SERIALIZATION_SORT_ORDER
argument_list|,
name|order
operator|.
name|toString
argument_list|()
argument_list|,
name|serdeConstants
operator|.
name|SERIALIZATION_LIB
argument_list|,
name|BinarySortableSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TableDesc
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|,
name|Utilities
operator|.
name|makeProperties
argument_list|(
literal|"columns"
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnNamesFromFieldSchema
argument_list|(
name|fieldSchemas
argument_list|)
argument_list|,
literal|"columns.types"
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnTypesFromFieldSchema
argument_list|(
name|fieldSchemas
argument_list|)
argument_list|,
name|serdeConstants
operator|.
name|ESCAPE_CHAR
argument_list|,
literal|"\\"
argument_list|,
name|serdeConstants
operator|.
name|SERIALIZATION_LIB
argument_list|,
name|LazyBinarySerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Generate the table descriptor for Map-side join value.    */
specifier|public
specifier|static
name|TableDesc
name|getMapJoinValueTableDesc
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemas
parameter_list|)
block|{
return|return
operator|new
name|TableDesc
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|,
name|Utilities
operator|.
name|makeProperties
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnNamesFromFieldSchema
argument_list|(
name|fieldSchemas
argument_list|)
argument_list|,
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnTypesFromFieldSchema
argument_list|(
name|fieldSchemas
argument_list|)
argument_list|,
name|serdeConstants
operator|.
name|ESCAPE_CHAR
argument_list|,
literal|"\\"
argument_list|,
name|serdeConstants
operator|.
name|SERIALIZATION_LIB
argument_list|,
name|LazyBinarySerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Generate the table descriptor for intermediate files.    */
specifier|public
specifier|static
name|TableDesc
name|getIntermediateFileTableDesc
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemas
parameter_list|)
block|{
return|return
operator|new
name|TableDesc
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|,
name|Utilities
operator|.
name|makeProperties
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnNamesFromFieldSchema
argument_list|(
name|fieldSchemas
argument_list|)
argument_list|,
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnTypesFromFieldSchema
argument_list|(
name|fieldSchemas
argument_list|)
argument_list|,
name|serdeConstants
operator|.
name|ESCAPE_CHAR
argument_list|,
literal|"\\"
argument_list|,
name|serdeConstants
operator|.
name|SERIALIZATION_LIB
argument_list|,
name|LazyBinarySerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Generate the table descriptor for intermediate files.    */
specifier|public
specifier|static
name|TableDesc
name|getReduceValueTableDesc
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemas
parameter_list|)
block|{
return|return
operator|new
name|TableDesc
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|,
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|,
name|Utilities
operator|.
name|makeProperties
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnNamesFromFieldSchema
argument_list|(
name|fieldSchemas
argument_list|)
argument_list|,
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnTypesFromFieldSchema
argument_list|(
name|fieldSchemas
argument_list|)
argument_list|,
name|serdeConstants
operator|.
name|ESCAPE_CHAR
argument_list|,
literal|"\\"
argument_list|,
name|serdeConstants
operator|.
name|SERIALIZATION_LIB
argument_list|,
name|LazyBinarySerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convert the ColumnList to FieldSchema list.    *    * Adds union type for distinctColIndices.    */
specifier|public
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getFieldSchemasFromColumnListWithLength
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|cols
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|distinctColIndices
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|outputColumnNames
parameter_list|,
name|int
name|length
parameter_list|,
name|String
name|fieldPrefix
parameter_list|)
block|{
comment|// last one for union column.
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|schemas
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|schemas
operator|.
name|add
argument_list|(
name|MetaStoreUtils
operator|.
name|getFieldSchemaFromTypeInfo
argument_list|(
name|fieldPrefix
operator|+
name|outputColumnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|cols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|unionTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Integer
argument_list|>
name|distinctCols
range|:
name|distinctColIndices
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numExprs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|distinctCols
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|HiveConf
operator|.
name|getColumnInternalName
argument_list|(
name|numExprs
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|cols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|numExprs
operator|++
expr_stmt|;
block|}
name|unionTypes
operator|.
name|add
argument_list|(
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|names
argument_list|,
name|types
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outputColumnNames
operator|.
name|size
argument_list|()
operator|-
name|length
operator|>
literal|0
condition|)
block|{
name|schemas
operator|.
name|add
argument_list|(
name|MetaStoreUtils
operator|.
name|getFieldSchemaFromTypeInfo
argument_list|(
name|fieldPrefix
operator|+
name|outputColumnNames
operator|.
name|get
argument_list|(
name|length
argument_list|)
argument_list|,
name|TypeInfoFactory
operator|.
name|getUnionTypeInfo
argument_list|(
name|unionTypes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|schemas
return|;
block|}
comment|/**    * Convert the ColumnList to FieldSchema list.    */
specifier|public
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getFieldSchemasFromColumnList
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|cols
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|outputColumnNames
parameter_list|,
name|int
name|start
parameter_list|,
name|String
name|fieldPrefix
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|schemas
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|cols
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|schemas
operator|.
name|add
argument_list|(
name|MetaStoreUtils
operator|.
name|getFieldSchemaFromTypeInfo
argument_list|(
name|fieldPrefix
operator|+
name|outputColumnNames
operator|.
name|get
argument_list|(
name|i
operator|+
name|start
argument_list|)
argument_list|,
name|cols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|schemas
return|;
block|}
comment|/**    * Convert the ColumnList to FieldSchema list.    */
specifier|public
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getFieldSchemasFromColumnList
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|cols
parameter_list|,
name|String
name|fieldPrefix
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|schemas
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|cols
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|schemas
operator|.
name|add
argument_list|(
name|MetaStoreUtils
operator|.
name|getFieldSchemaFromTypeInfo
argument_list|(
name|fieldPrefix
operator|+
name|i
argument_list|,
name|cols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|schemas
return|;
block|}
comment|/**    * Convert the RowSchema to FieldSchema list.    */
specifier|public
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getFieldSchemasFromRowSchema
parameter_list|(
name|RowSchema
name|row
parameter_list|,
name|String
name|fieldPrefix
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|c
init|=
name|row
operator|.
name|getSignature
argument_list|()
decl_stmt|;
return|return
name|getFieldSchemasFromColumnInfo
argument_list|(
name|c
argument_list|,
name|fieldPrefix
argument_list|)
return|;
block|}
comment|/**    * Convert the ColumnInfo to FieldSchema.    */
specifier|public
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getFieldSchemasFromColumnInfo
parameter_list|(
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|cols
parameter_list|,
name|String
name|fieldPrefix
parameter_list|)
block|{
if|if
condition|(
operator|(
name|cols
operator|==
literal|null
operator|)
operator|||
operator|(
name|cols
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
return|;
block|}
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|schemas
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|cols
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|cols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getInternalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|name
operator|=
name|fieldPrefix
operator|+
name|name
expr_stmt|;
block|}
name|schemas
operator|.
name|add
argument_list|(
name|MetaStoreUtils
operator|.
name|getFieldSchemaFromTypeInfo
argument_list|(
name|name
argument_list|,
name|cols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|schemas
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|sortFieldSchemas
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|schema
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|schema
argument_list|,
operator|new
name|Comparator
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|FieldSchema
name|o1
parameter_list|,
name|FieldSchema
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|schema
return|;
block|}
comment|/**    * Create the reduce sink descriptor.    *    * @param keyCols    *          The columns to be stored in the key    * @param valueCols    *          The columns to be stored in the value    * @param outputColumnNames    *          The output columns names    * @param tag    *          The tag for this reducesink    * @param partitionCols    *          The columns for partitioning.    * @param numReducers    *          The number of reducers, set to -1 for automatic inference based on    *          input data size.    * @param writeType Whether this is an Acid write, and if so whether it is insert, update,    *                  or delete.    * @return The reduceSinkDesc object.    */
specifier|public
specifier|static
name|ReduceSinkDesc
name|getReduceSinkDesc
parameter_list|(
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyCols
parameter_list|,
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valueCols
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|outputColumnNames
parameter_list|,
name|boolean
name|includeKeyCols
parameter_list|,
name|int
name|tag
parameter_list|,
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|partitionCols
parameter_list|,
name|String
name|order
parameter_list|,
name|int
name|numReducers
parameter_list|,
name|AcidUtils
operator|.
name|Operation
name|writeType
parameter_list|)
block|{
return|return
name|getReduceSinkDesc
argument_list|(
name|keyCols
argument_list|,
name|keyCols
operator|.
name|size
argument_list|()
argument_list|,
name|valueCols
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
argument_list|,
name|includeKeyCols
condition|?
name|outputColumnNames
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|keyCols
operator|.
name|size
argument_list|()
argument_list|)
else|:
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
name|includeKeyCols
condition|?
name|outputColumnNames
operator|.
name|subList
argument_list|(
name|keyCols
operator|.
name|size
argument_list|()
argument_list|,
name|outputColumnNames
operator|.
name|size
argument_list|()
argument_list|)
else|:
name|outputColumnNames
argument_list|,
name|includeKeyCols
argument_list|,
name|tag
argument_list|,
name|partitionCols
argument_list|,
name|order
argument_list|,
name|numReducers
argument_list|,
name|writeType
argument_list|)
return|;
block|}
comment|/**    * Create the reduce sink descriptor.    *    * @param keyCols    *          The columns to be stored in the key    * @param numKeys    *          number of distribution key numbers. Equals to group-by-key    *          numbers usually.    * @param valueCols    *          The columns to be stored in the value    * @param distinctColIndices    *          column indices for distinct aggregate parameters    * @param outputKeyColumnNames    *          The output key columns names    * @param outputValueColumnNames    *          The output value columns names    * @param tag    *          The tag for this reducesink    * @param partitionCols    *          The columns for partitioning.    * @param numReducers    *          The number of reducers, set to -1 for automatic inference based on    *          input data size.    * @param writeType Whether this is an Acid write, and if so whether it is insert, update,    *                  or delete.    * @return The reduceSinkDesc object.    */
specifier|public
specifier|static
name|ReduceSinkDesc
name|getReduceSinkDesc
parameter_list|(
specifier|final
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyCols
parameter_list|,
name|int
name|numKeys
parameter_list|,
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valueCols
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|distinctColIndices
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|outputKeyColumnNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|outputValueColumnNames
parameter_list|,
name|boolean
name|includeKeyCols
parameter_list|,
name|int
name|tag
parameter_list|,
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|partitionCols
parameter_list|,
name|String
name|order
parameter_list|,
name|int
name|numReducers
parameter_list|,
name|AcidUtils
operator|.
name|Operation
name|writeType
parameter_list|)
block|{
name|TableDesc
name|keyTable
init|=
literal|null
decl_stmt|;
name|TableDesc
name|valueTable
init|=
literal|null
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputKeyCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputValCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeKeyCols
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|keySchema
init|=
name|getFieldSchemasFromColumnListWithLength
argument_list|(
name|keyCols
argument_list|,
name|distinctColIndices
argument_list|,
name|outputKeyColumnNames
argument_list|,
name|numKeys
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|order
operator|.
name|length
argument_list|()
operator|<
name|outputKeyColumnNames
operator|.
name|size
argument_list|()
condition|)
block|{
name|order
operator|=
name|order
operator|+
literal|"+"
expr_stmt|;
block|}
name|keyTable
operator|=
name|getReduceKeyTableDesc
argument_list|(
name|keySchema
argument_list|,
name|order
argument_list|)
expr_stmt|;
name|outputKeyCols
operator|.
name|addAll
argument_list|(
name|outputKeyColumnNames
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyTable
operator|=
name|getReduceKeyTableDesc
argument_list|(
name|getFieldSchemasFromColumnList
argument_list|(
name|keyCols
argument_list|,
literal|"reducesinkkey"
argument_list|)
argument_list|,
name|order
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|outputKeyCols
operator|.
name|add
argument_list|(
literal|"reducesinkkey"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|valueTable
operator|=
name|getReduceValueTableDesc
argument_list|(
name|getFieldSchemasFromColumnList
argument_list|(
name|valueCols
argument_list|,
name|outputValueColumnNames
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|outputValCols
operator|.
name|addAll
argument_list|(
name|outputValueColumnNames
argument_list|)
expr_stmt|;
return|return
operator|new
name|ReduceSinkDesc
argument_list|(
name|keyCols
argument_list|,
name|numKeys
argument_list|,
name|valueCols
argument_list|,
name|outputKeyCols
argument_list|,
name|distinctColIndices
argument_list|,
name|outputValCols
argument_list|,
name|tag
argument_list|,
name|partitionCols
argument_list|,
name|numReducers
argument_list|,
name|keyTable
argument_list|,
name|valueTable
argument_list|,
name|writeType
argument_list|)
return|;
block|}
comment|/**    * Create the reduce sink descriptor.    *    * @param keyCols    *          The columns to be stored in the key    * @param valueCols    *          The columns to be stored in the value    * @param outputColumnNames    *          The output columns names    * @param tag    *          The tag for this reducesink    * @param numPartitionFields    *          The first numPartitionFields of keyCols will be partition columns.    *          If numPartitionFields=-1, then partition randomly.    * @param numReducers    *          The number of reducers, set to -1 for automatic inference based on    *          input data size.    * @param writeType Whether this is an Acid write, and if so whether it is insert, update,    *                  or delete.    * @return The reduceSinkDesc object.    */
specifier|public
specifier|static
name|ReduceSinkDesc
name|getReduceSinkDesc
parameter_list|(
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyCols
parameter_list|,
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valueCols
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|outputColumnNames
parameter_list|,
name|boolean
name|includeKey
parameter_list|,
name|int
name|tag
parameter_list|,
name|int
name|numPartitionFields
parameter_list|,
name|int
name|numReducers
parameter_list|,
name|AcidUtils
operator|.
name|Operation
name|writeType
parameter_list|)
throws|throws
name|SemanticException
block|{
return|return
name|getReduceSinkDesc
argument_list|(
name|keyCols
argument_list|,
name|keyCols
operator|.
name|size
argument_list|()
argument_list|,
name|valueCols
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
argument_list|,
name|includeKey
condition|?
name|outputColumnNames
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|keyCols
operator|.
name|size
argument_list|()
argument_list|)
else|:
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
name|includeKey
condition|?
name|outputColumnNames
operator|.
name|subList
argument_list|(
name|keyCols
operator|.
name|size
argument_list|()
argument_list|,
name|outputColumnNames
operator|.
name|size
argument_list|()
argument_list|)
else|:
name|outputColumnNames
argument_list|,
name|includeKey
argument_list|,
name|tag
argument_list|,
name|numPartitionFields
argument_list|,
name|numReducers
argument_list|,
name|writeType
argument_list|)
return|;
block|}
comment|/**    * Create the reduce sink descriptor.    *    * @param keyCols    *          The columns to be stored in the key    * @param numKeys  number of distribution keys. Equals to group-by-key    *        numbers usually.    * @param valueCols    *          The columns to be stored in the value    * @param distinctColIndices    *          column indices for distinct aggregates    * @param outputKeyColumnNames    *          The output key columns names    * @param outputValueColumnNames    *          The output value columns names    * @param tag    *          The tag for this reducesink    * @param numPartitionFields    *          The first numPartitionFields of keyCols will be partition columns.    *          If numPartitionFields=-1, then partition randomly.    * @param numReducers    *          The number of reducers, set to -1 for automatic inference based on    *          input data size.    * @param writeType Whether this is an Acid write, and if so whether it is insert, update,    *                  or delete.    * @return The reduceSinkDesc object.    */
specifier|public
specifier|static
name|ReduceSinkDesc
name|getReduceSinkDesc
parameter_list|(
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|keyCols
parameter_list|,
name|int
name|numKeys
parameter_list|,
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|valueCols
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|distinctColIndices
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|outputKeyColumnNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|outputValueColumnNames
parameter_list|,
name|boolean
name|includeKey
parameter_list|,
name|int
name|tag
parameter_list|,
name|int
name|numPartitionFields
parameter_list|,
name|int
name|numReducers
parameter_list|,
name|AcidUtils
operator|.
name|Operation
name|writeType
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|partitionCols
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|numPartitionFields
operator|>=
name|keyCols
operator|.
name|size
argument_list|()
condition|)
block|{
name|partitionCols
operator|.
name|addAll
argument_list|(
name|keyCols
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numPartitionFields
operator|>=
literal|0
condition|)
block|{
name|partitionCols
operator|.
name|addAll
argument_list|(
name|keyCols
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|numPartitionFields
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// numPartitionFields = -1 means random partitioning
name|partitionCols
operator|.
name|add
argument_list|(
name|TypeCheckProcFactory
operator|.
name|DefaultExprProcessor
operator|.
name|getFuncExprNodeDesc
argument_list|(
literal|"rand"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|order
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|order
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
block|}
return|return
name|getReduceSinkDesc
argument_list|(
name|keyCols
argument_list|,
name|numKeys
argument_list|,
name|valueCols
argument_list|,
name|distinctColIndices
argument_list|,
name|outputKeyColumnNames
argument_list|,
name|outputValueColumnNames
argument_list|,
name|includeKey
argument_list|,
name|tag
argument_list|,
name|partitionCols
argument_list|,
name|order
operator|.
name|toString
argument_list|()
argument_list|,
name|numReducers
argument_list|,
name|writeType
argument_list|)
return|;
block|}
comment|/**    * Loads the storage handler (if one exists) for the given table    * and invokes {@link HiveStorageHandler#configureInputJobProperties(TableDesc, java.util.Map)}.    *    * @param tableDesc table descriptor    */
specifier|public
specifier|static
name|void
name|configureInputJobPropertiesForStorageHandler
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|)
block|{
name|configureJobPropertiesForStorageHandler
argument_list|(
literal|true
argument_list|,
name|tableDesc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Loads the storage handler (if one exists) for the given table    * and invokes {@link HiveStorageHandler#configureOutputJobProperties(TableDesc, java.util.Map)}.    *    * @param tableDesc table descriptor    */
specifier|public
specifier|static
name|void
name|configureOutputJobPropertiesForStorageHandler
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|)
block|{
name|configureJobPropertiesForStorageHandler
argument_list|(
literal|false
argument_list|,
name|tableDesc
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|configureJobPropertiesForStorageHandler
parameter_list|(
name|boolean
name|input
parameter_list|,
name|TableDesc
name|tableDesc
parameter_list|)
block|{
if|if
condition|(
name|tableDesc
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|HiveStorageHandler
name|storageHandler
init|=
name|HiveUtils
operator|.
name|getStorageHandler
argument_list|(
name|Hive
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|,
name|tableDesc
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|META_TABLE_STORAGE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|storageHandler
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|input
condition|)
block|{
try|try
block|{
name|storageHandler
operator|.
name|configureInputJobProperties
argument_list|(
name|tableDesc
argument_list|,
name|jobProperties
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AbstractMethodError
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"configureInputJobProperties not found "
operator|+
literal|"using configureTableJobProperties"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|configureTableJobProperties
argument_list|(
name|tableDesc
argument_list|,
name|jobProperties
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|storageHandler
operator|.
name|configureOutputJobProperties
argument_list|(
name|tableDesc
argument_list|,
name|jobProperties
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AbstractMethodError
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"configureOutputJobProperties not found"
operator|+
literal|"using configureTableJobProperties"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|configureTableJobProperties
argument_list|(
name|tableDesc
argument_list|,
name|jobProperties
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Job properties are only relevant for non-native tables, so
comment|// for native tables, leave it null to avoid cluttering up
comment|// plans.
if|if
condition|(
operator|!
name|jobProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tableDesc
operator|.
name|setJobProperties
argument_list|(
name|jobProperties
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|configureJobConf
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
block|{
name|String
name|handlerClass
init|=
name|tableDesc
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|META_TABLE_STORAGE
argument_list|)
decl_stmt|;
try|try
block|{
name|HiveStorageHandler
name|storageHandler
init|=
name|HiveUtils
operator|.
name|getStorageHandler
argument_list|(
name|jobConf
argument_list|,
name|handlerClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|storageHandler
operator|!=
literal|null
condition|)
block|{
name|storageHandler
operator|.
name|configureJobConf
argument_list|(
name|tableDesc
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|stripQuotes
parameter_list|(
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
operator|(
name|val
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\''
operator|&&
name|val
operator|.
name|charAt
argument_list|(
name|val
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'\''
operator|)
operator|||
operator|(
name|val
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\"'
operator|&&
name|val
operator|.
name|charAt
argument_list|(
name|val
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'\"'
operator|)
condition|)
block|{
name|val
operator|=
name|val
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|val
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
comment|/**    * Remove prefix from "Path -> Alias"    * This is required for testing.    * In order to verify that path is right, we need to display it in expected test result.    * But, mask pattern masks path with some patterns.    * So, we need to remove prefix from path which triggers mask pattern.    * @param origiKey    * @return    */
specifier|public
specifier|static
name|String
name|removePrefixFromWarehouseConfig
parameter_list|(
name|String
name|origiKey
parameter_list|)
block|{
name|String
name|prefix
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|prefix
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|prefix
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
comment|//Local file system is using pfile:/// {@link ProxyLocalFileSystem}
name|prefix
operator|=
name|prefix
operator|.
name|replace
argument_list|(
literal|"pfile:///"
argument_list|,
literal|"pfile:/"
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|origiKey
operator|.
name|indexOf
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
operator|-
literal|1
condition|)
block|{
name|origiKey
operator|=
name|origiKey
operator|.
name|substring
argument_list|(
name|index
operator|+
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|origiKey
return|;
block|}
specifier|private
name|PlanUtils
parameter_list|()
block|{
comment|// prevent instantiation
block|}
comment|// Add the input 'newInput' to the set of inputs for the query.
comment|// The input may or may not be already present.
comment|// The ReadEntity also contains the parents from it is derived (only populated
comment|// in case of views). The equals method for ReadEntity does not compare the parents
comment|// so that the same input with different parents cannot be added twice. If the input
comment|// is already present, make sure the parents are added.
comment|// Consider the query:
comment|// select * from (select * from V2 union all select * from V3) subq;
comment|// where both V2 and V3 depend on V1 (eg V2 : select * from V1, V3: select * from V1),
comment|// addInput would be called twice for V1 (one with parent V2 and the other with parent V3).
comment|// When addInput is called for the first time for V1, V1 (parent V2) is added to inputs.
comment|// When addInput is called for the second time for V1, the input V1 from inputs is picked up,
comment|// and it's parents are enhanced to include V2 and V3
comment|// The inputs will contain: (V2, no parent), (V3, no parent), (V1, parents(V2, v3))
comment|//
comment|// If the ReadEntity is already present and another ReadEntity with same name is
comment|// added, then the isDirect flag is updated to be the OR of values of both.
specifier|public
specifier|static
name|ReadEntity
name|addInput
parameter_list|(
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|ReadEntity
name|newInput
parameter_list|)
block|{
comment|// If the input is already present, make sure the new parent is added to the input.
if|if
condition|(
name|inputs
operator|.
name|contains
argument_list|(
name|newInput
argument_list|)
condition|)
block|{
for|for
control|(
name|ReadEntity
name|input
range|:
name|inputs
control|)
block|{
if|if
condition|(
name|input
operator|.
name|equals
argument_list|(
name|newInput
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|newInput
operator|.
name|getParents
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|newInput
operator|.
name|getParents
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|input
operator|.
name|getParents
argument_list|()
operator|.
name|addAll
argument_list|(
name|newInput
operator|.
name|getParents
argument_list|()
argument_list|)
expr_stmt|;
name|input
operator|.
name|setDirect
argument_list|(
name|input
operator|.
name|isDirect
argument_list|()
operator|||
name|newInput
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|input
return|;
block|}
block|}
assert|assert
literal|false
assert|;
block|}
else|else
block|{
name|inputs
operator|.
name|add
argument_list|(
name|newInput
argument_list|)
expr_stmt|;
return|return
name|newInput
return|;
block|}
comment|// make compile happy
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|String
name|getExprListString
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|ExprNodeDesc
argument_list|>
name|exprs
parameter_list|)
block|{
return|return
name|getExprListString
argument_list|(
name|exprs
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getExprListString
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|ExprNodeDesc
argument_list|>
name|exprs
parameter_list|,
name|boolean
name|userLevelExplain
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|exprs
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|addExprToStringBuffer
argument_list|(
name|expr
argument_list|,
name|sb
argument_list|,
name|userLevelExplain
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|addExprToStringBuffer
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|,
name|Appendable
name|sb
parameter_list|,
name|boolean
name|userLevelExplain
parameter_list|)
block|{
try|try
block|{
name|sb
operator|.
name|append
argument_list|(
name|expr
operator|.
name|getExprString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|userLevelExplain
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" (type: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|expr
operator|.
name|getTypeString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|addPartitionInputs
parameter_list|(
name|Collection
argument_list|<
name|Partition
argument_list|>
name|parts
parameter_list|,
name|Collection
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|ReadEntity
name|parentViewInfo
parameter_list|,
name|boolean
name|isDirectRead
parameter_list|)
block|{
comment|// Store the inputs in a HashMap since we can't get a ReadEntity from inputs since it is
comment|// implemented as a set.ReadEntity is used as the key so that the HashMap has the same behavior
comment|// of equals and hashCode
name|Map
argument_list|<
name|ReadEntity
argument_list|,
name|ReadEntity
argument_list|>
name|readEntityMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|ReadEntity
argument_list|,
name|ReadEntity
argument_list|>
argument_list|(
name|inputs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ReadEntity
name|input
range|:
name|inputs
control|)
block|{
name|readEntityMap
operator|.
name|put
argument_list|(
name|input
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|ReadEntity
name|newInput
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|newInput
operator|=
operator|new
name|ReadEntity
argument_list|(
name|part
argument_list|,
name|parentViewInfo
argument_list|,
name|isDirectRead
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newInput
operator|=
operator|new
name|ReadEntity
argument_list|(
name|part
operator|.
name|getTable
argument_list|()
argument_list|,
name|parentViewInfo
argument_list|,
name|isDirectRead
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|readEntityMap
operator|.
name|containsKey
argument_list|(
name|newInput
argument_list|)
condition|)
block|{
name|ReadEntity
name|input
init|=
name|readEntityMap
operator|.
name|get
argument_list|(
name|newInput
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|newInput
operator|.
name|getParents
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|newInput
operator|.
name|getParents
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|input
operator|.
name|getParents
argument_list|()
operator|.
name|addAll
argument_list|(
name|newInput
operator|.
name|getParents
argument_list|()
argument_list|)
expr_stmt|;
name|input
operator|.
name|setDirect
argument_list|(
name|input
operator|.
name|isDirect
argument_list|()
operator|||
name|newInput
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|readEntityMap
operator|.
name|put
argument_list|(
name|newInput
argument_list|,
name|newInput
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add the new ReadEntity that were added to readEntityMap in PlanUtils.addInput
if|if
condition|(
name|inputs
operator|.
name|size
argument_list|()
operator|!=
name|readEntityMap
operator|.
name|size
argument_list|()
condition|)
block|{
name|inputs
operator|.
name|addAll
argument_list|(
name|readEntityMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|addInputsForView
parameter_list|(
name|ParseContext
name|parseCtx
parameter_list|)
throws|throws
name|HiveException
block|{
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
name|parseCtx
operator|.
name|getSemanticInputs
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TableScanOperator
argument_list|>
name|entry
range|:
name|parseCtx
operator|.
name|getTopOps
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|alias
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|TableScanOperator
name|topOp
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ReadEntity
name|parentViewInfo
init|=
name|getParentViewInfo
argument_list|(
name|alias
argument_list|,
name|parseCtx
operator|.
name|getViewAliasToInput
argument_list|()
argument_list|)
decl_stmt|;
comment|// Adds tables only for create view (PPD filter can be appended by outer query)
name|Table
name|table
init|=
name|topOp
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
decl_stmt|;
name|PlanUtils
operator|.
name|addInput
argument_list|(
name|inputs
argument_list|,
operator|new
name|ReadEntity
argument_list|(
name|table
argument_list|,
name|parentViewInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|ReadEntity
name|getParentViewInfo
parameter_list|(
name|String
name|alias_id
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ReadEntity
argument_list|>
name|viewAliasToInput
parameter_list|)
block|{
name|String
index|[]
name|aliases
init|=
name|alias_id
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|currentAlias
init|=
literal|null
decl_stmt|;
name|ReadEntity
name|currentInput
init|=
literal|null
decl_stmt|;
comment|// Find the immediate parent possible.
comment|// For eg: for a query like 'select * from V3', where V3 -> V2, V2 -> V1, V1 -> T
comment|// -> implies depends on.
comment|// T's parent would be V1
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|aliases
operator|.
name|length
condition|;
name|pos
operator|++
control|)
block|{
name|currentAlias
operator|=
name|currentAlias
operator|==
literal|null
condition|?
name|aliases
index|[
name|pos
index|]
else|:
name|currentAlias
operator|+
literal|":"
operator|+
name|aliases
index|[
name|pos
index|]
expr_stmt|;
name|currentAlias
operator|=
name|currentAlias
operator|.
name|replace
argument_list|(
name|SemanticAnalyzer
operator|.
name|SUBQUERY_TAG_1
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
name|SemanticAnalyzer
operator|.
name|SUBQUERY_TAG_2
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|ReadEntity
name|input
init|=
name|viewAliasToInput
operator|.
name|get
argument_list|(
name|currentAlias
argument_list|)
decl_stmt|;
if|if
condition|(
name|input
operator|==
literal|null
operator|&&
name|currentInput
operator|!=
literal|null
condition|)
block|{
comment|// To handle the case of - select * from (select * from V1) A;
comment|// the currentInput != null check above is needed.
comment|// the alias list that case would be A:V1:T. Lookup on A would return null,
comment|// we need to go further to find the view inside it.
return|return
name|currentInput
return|;
block|}
name|currentInput
operator|=
name|input
expr_stmt|;
block|}
return|return
name|currentInput
return|;
block|}
block|}
end_class

end_unit

