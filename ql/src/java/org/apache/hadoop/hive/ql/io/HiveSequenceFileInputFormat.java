begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
operator|.
name|BytesRefArrayWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_comment
comment|/**  * HiveSequenceFileInputFormat.  *  This input format is used by Fetch Operator. This input format does list status  *    on list of files (kept in listsToFetch) instead of doing list on whole directory  *    as done by previously used SequenceFileFormat.  *    To use this FileFormat make sure to provide the list of files  * @param<K>  * @param<V>  */
end_comment

begin_class
specifier|public
class|class
name|HiveSequenceFileInputFormat
parameter_list|<
name|K
extends|extends
name|LongWritable
parameter_list|,
name|V
extends|extends
name|BytesRefArrayWritable
parameter_list|>
extends|extends
name|SequenceFileInputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|public
name|HiveSequenceFileInputFormat
parameter_list|()
block|{
name|setMinSplitSize
argument_list|(
name|SequenceFile
operator|.
name|SYNC_INTERVAL
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|FileStatus
argument_list|>
name|fileStatuses
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|setFiles
parameter_list|(
name|Set
argument_list|<
name|FileStatus
argument_list|>
name|fileStatuses
parameter_list|)
block|{
name|this
operator|.
name|fileStatuses
operator|=
name|fileStatuses
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileStatuses
operator|==
literal|null
operator|||
name|fileStatuses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// In cases where list of files to fetch is not provided we will use SequenceFileInputFormat
comment|// e.g. SELECT without a job
return|return
name|super
operator|.
name|listStatus
argument_list|(
name|job
argument_list|)
return|;
block|}
name|FileStatus
index|[]
name|fsStatusArray
init|=
operator|new
name|FileStatus
index|[
name|fileStatuses
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|fileStatuses
operator|.
name|toArray
argument_list|(
name|fsStatusArray
argument_list|)
return|;
block|}
block|}
end_class

end_unit

