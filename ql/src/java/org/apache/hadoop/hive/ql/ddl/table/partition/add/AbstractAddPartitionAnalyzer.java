begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|partition
operator|.
name|add
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AbstractAlterTableAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AlterTableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|partition
operator|.
name|PartitionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
operator|.
name|WriteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_comment
comment|/**  * Analyzer for add partition commands.  */
end_comment

begin_class
specifier|abstract
class|class
name|AbstractAddPartitionAnalyzer
extends|extends
name|AbstractAlterTableAnalyzer
block|{
name|AbstractAddPartitionAnalyzer
parameter_list|(
name|QueryState
name|queryState
parameter_list|)
throws|throws
name|SemanticException
block|{
name|super
argument_list|(
name|queryState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|analyzeCommand
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|,
name|ASTNode
name|command
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Table
name|table
init|=
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|validateAlterTableType
argument_list|(
name|table
argument_list|,
name|AlterTableType
operator|.
name|ADDPARTITION
argument_list|,
name|expectView
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|ifNotExists
init|=
name|command
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|HiveParser
operator|.
name|TOK_IFNOTEXISTS
decl_stmt|;
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|table
argument_list|,
comment|/* use DDL_EXCLUSIVE to cause X lock to prevent races between concurrent add partition calls with IF NOT EXISTS.          * w/o this 2 concurrent calls to add the same partition may both add data since for transactional tables          * creating partition metadata and moving data there are 2 separate actions. */
name|ifNotExists
operator|&&
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|table
argument_list|)
condition|?
name|WriteType
operator|.
name|DDL_EXCLUSIVE
else|:
name|WriteEntity
operator|.
name|WriteType
operator|.
name|DDL_SHARED
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AlterTableAddPartitionDesc
operator|.
name|PartitionDesc
argument_list|>
name|partitions
init|=
name|createPartitions
argument_list|(
name|command
argument_list|,
name|table
argument_list|,
name|ifNotExists
argument_list|)
decl_stmt|;
if|if
condition|(
name|partitions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// nothing to do
return|return;
block|}
name|AlterTableAddPartitionDesc
name|desc
init|=
operator|new
name|AlterTableAddPartitionDesc
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|ifNotExists
argument_list|,
name|partitions
argument_list|)
decl_stmt|;
name|Task
argument_list|<
name|DDLWork
argument_list|>
name|ddlTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|getInputs
argument_list|()
argument_list|,
name|getOutputs
argument_list|()
argument_list|,
name|desc
argument_list|)
argument_list|)
decl_stmt|;
name|rootTasks
operator|.
name|add
argument_list|(
name|ddlTask
argument_list|)
expr_stmt|;
name|postProcess
argument_list|(
name|tableName
argument_list|,
name|table
argument_list|,
name|desc
argument_list|,
name|ddlTask
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|boolean
name|expectView
parameter_list|()
function_decl|;
specifier|private
name|List
argument_list|<
name|AlterTableAddPartitionDesc
operator|.
name|PartitionDesc
argument_list|>
name|createPartitions
parameter_list|(
name|ASTNode
name|command
parameter_list|,
name|Table
name|table
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|)
throws|throws
name|SemanticException
block|{
name|String
name|currentLocation
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|currentPart
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|AlterTableAddPartitionDesc
operator|.
name|PartitionDesc
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|num
init|=
name|ifNotExists
condition|?
literal|1
else|:
literal|0
init|;
name|num
operator|<
name|command
operator|.
name|getChildCount
argument_list|()
condition|;
name|num
operator|++
control|)
block|{
name|ASTNode
name|child
init|=
operator|(
name|ASTNode
operator|)
name|command
operator|.
name|getChild
argument_list|(
name|num
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|child
operator|.
name|getToken
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|HiveParser
operator|.
name|TOK_PARTSPEC
case|:
if|if
condition|(
name|currentPart
operator|!=
literal|null
condition|)
block|{
name|partitions
operator|.
name|add
argument_list|(
name|createPartitionDesc
argument_list|(
name|table
argument_list|,
name|currentLocation
argument_list|,
name|currentPart
argument_list|)
argument_list|)
expr_stmt|;
name|currentLocation
operator|=
literal|null
expr_stmt|;
block|}
name|currentPart
operator|=
name|getValidatedPartSpec
argument_list|(
name|table
argument_list|,
name|child
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PartitionUtils
operator|.
name|validatePartitions
argument_list|(
name|conf
argument_list|,
name|currentPart
argument_list|)
expr_stmt|;
comment|// validate reserved values
break|break;
case|case
name|HiveParser
operator|.
name|TOK_PARTITIONLOCATION
case|:
comment|// if location specified, set in partition
if|if
condition|(
operator|!
name|allowLocation
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"LOCATION clause illegal for view partition"
argument_list|)
throw|;
block|}
name|currentLocation
operator|=
name|unescapeSQLString
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|inputs
operator|.
name|add
argument_list|(
name|toReadEntity
argument_list|(
name|currentLocation
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Unknown child: "
operator|+
name|child
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|currentPart
operator|!=
literal|null
condition|)
block|{
comment|// add the last one
name|partitions
operator|.
name|add
argument_list|(
name|createPartitionDesc
argument_list|(
name|table
argument_list|,
name|currentLocation
argument_list|,
name|currentPart
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|partitions
return|;
block|}
specifier|private
name|AlterTableAddPartitionDesc
operator|.
name|PartitionDesc
name|createPartitionDesc
parameter_list|(
name|Table
name|table
parameter_list|,
name|String
name|location
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpec
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|)
operator|&&
name|location
operator|==
literal|null
condition|)
block|{
name|params
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|StatsSetupConst
operator|.
name|setStatsStateForCreateTable
argument_list|(
name|params
argument_list|,
name|MetaStoreUtils
operator|.
name|getColumnNames
argument_list|(
name|table
operator|.
name|getCols
argument_list|()
argument_list|)
argument_list|,
name|StatsSetupConst
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AlterTableAddPartitionDesc
operator|.
name|PartitionDesc
argument_list|(
name|partitionSpec
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|boolean
name|allowLocation
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|void
name|postProcess
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Table
name|table
parameter_list|,
name|AlterTableAddPartitionDesc
name|desc
parameter_list|,
name|Task
argument_list|<
name|DDLWork
argument_list|>
name|ddlTask
parameter_list|)
throws|throws
name|SemanticException
function_decl|;
block|}
end_class

end_unit

