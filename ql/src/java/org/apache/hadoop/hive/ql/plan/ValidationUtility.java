begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_comment
comment|/**  * Common utilities for validation.  *  * ValidationUtility.  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ValidationUtility
block|{
comment|/**    * Utility class. No instance needs.    */
specifier|private
name|ValidationUtility
parameter_list|()
block|{    }
comment|/**    * Validate skewed table information.    * @param colNames column names    * @param skewedColNames skewed column names    * @param skewedColValues skewed column values    * @throws SemanticException    */
specifier|public
specifier|static
name|void
name|validateSkewedInformation
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|skewedColNames
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|skewedColValues
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|skewedColNames
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|/**        * all columns in skewed column name are valid columns        */
name|validateSkewedColNames
argument_list|(
name|colNames
argument_list|,
name|skewedColNames
argument_list|)
expr_stmt|;
comment|/**        * find out duplicate skewed column name        */
name|validateSkewedColumnNameUniqueness
argument_list|(
name|skewedColNames
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|skewedColValues
operator|==
literal|null
operator|)
operator|||
operator|(
name|skewedColValues
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
comment|/**          * skewed column value is empty but skewed col name is not empty. something is wrong          */
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|SKEWED_TABLE_SKEWED_COL_NAME_VALUE_MISMATCH_2
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
comment|/**          * each skewed col value should have the same number as number of skewed column names          */
name|validateSkewedColNameValueNumberMatch
argument_list|(
name|skewedColNames
argument_list|,
name|skewedColValues
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|skewedColValues
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|/**        * skewed column name is empty but skewed col value is not empty. something is wrong        */
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|SKEWED_TABLE_SKEWED_COL_NAME_VALUE_MISMATCH_1
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Skewed column name and value should match.    *    * @param skewedColNames    * @param skewedColValues    * @throws SemanticException    */
specifier|public
specifier|static
name|void
name|validateSkewedColNameValueNumberMatch
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|skewedColNames
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|skewedColValues
parameter_list|)
throws|throws
name|SemanticException
block|{
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|colValue
range|:
name|skewedColValues
control|)
block|{
if|if
condition|(
name|colValue
operator|.
name|size
argument_list|()
operator|!=
name|skewedColNames
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|SKEWED_TABLE_SKEWED_COL_NAME_VALUE_MISMATCH_3
operator|.
name|getMsg
argument_list|()
operator|+
name|skewedColNames
operator|.
name|size
argument_list|()
operator|+
literal|" : "
operator|+
name|colValue
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Skewed column name should be a valid column defined.    *    * @param colNames    * @param skewedColNames    * @throws SemanticException    */
specifier|public
specifier|static
name|void
name|validateSkewedColNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|skewedColNames
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// make a copy
name|List
argument_list|<
name|String
argument_list|>
name|copySkewedColNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|skewedColNames
argument_list|)
decl_stmt|;
comment|// remove valid columns
name|copySkewedColNames
operator|.
name|removeAll
argument_list|(
name|colNames
argument_list|)
expr_stmt|;
if|if
condition|(
name|copySkewedColNames
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|invalidColNames
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|copySkewedColNames
control|)
block|{
name|invalidColNames
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|invalidColNames
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|SKEWED_TABLE_INVALID_COLUMN
operator|.
name|getMsg
argument_list|(
name|invalidColNames
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Find out duplicate name.    *    * @param names    * @throws SemanticException    */
specifier|public
specifier|static
name|void
name|validateSkewedColumnNameUniqueness
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|lookup
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
if|if
condition|(
name|lookup
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|SKEWED_TABLE_DUPLICATE_COLUMN_NAMES
operator|.
name|getMsg
argument_list|(
name|name
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|lookup
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

