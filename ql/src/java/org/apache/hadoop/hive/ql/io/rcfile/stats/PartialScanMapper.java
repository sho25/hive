begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|rcfile
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RCFile
operator|.
name|KeyBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|rcfile
operator|.
name|merge
operator|.
name|RCFileKeyBufferWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|rcfile
operator|.
name|merge
operator|.
name|RCFileValueBufferWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|CombineHiveKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapReduceBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_comment
comment|/**  *  * PartialScanMapper.  *  * It reads through block header and aggregates statistics at the end.  *  * https://issues.apache.org/jira/browse/HIVE-3958  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|PartialScanMapper
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|Object
argument_list|,
name|RCFileValueBufferWrapper
argument_list|,
name|Object
argument_list|,
name|Object
argument_list|>
block|{
specifier|private
name|JobConf
name|jc
decl_stmt|;
specifier|private
name|String
name|statsAggKeyPrefix
decl_stmt|;
specifier|private
name|long
name|uncompressedFileSize
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|rowNo
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|exception
init|=
literal|false
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"PartialScanMapper"
argument_list|)
decl_stmt|;
specifier|public
name|PartialScanMapper
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|jc
operator|=
name|job
expr_stmt|;
name|statsAggKeyPrefix
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|job
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_KEY_PREFIX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|map
parameter_list|(
name|Object
name|k
parameter_list|,
name|RCFileValueBufferWrapper
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|//CombineHiveInputFormat is set in PartialScanTask.
name|RCFileKeyBufferWrapper
name|key
init|=
call|(
name|RCFileKeyBufferWrapper
call|)
argument_list|(
operator|(
name|CombineHiveKey
operator|)
name|k
argument_list|)
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// calculate rawdatasize
name|KeyBuffer
name|keyBuffer
init|=
name|key
operator|.
name|getKeyBuffer
argument_list|()
decl_stmt|;
name|long
index|[]
name|uncompressedColumnSizes
init|=
operator|new
name|long
index|[
name|keyBuffer
operator|.
name|getColumnNumber
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyBuffer
operator|.
name|getColumnNumber
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|uncompressedColumnSizes
index|[
name|i
index|]
operator|+=
name|keyBuffer
operator|.
name|getEachColumnUncompressedValueLen
argument_list|()
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|uncompressedColumnSizes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uncompressedColumnSizes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|uncompressedFileSize
operator|+=
name|uncompressedColumnSizes
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
comment|// calculate no. of rows
name|rowNo
operator|+=
name|keyBuffer
operator|.
name|getNumberRows
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
literal|true
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
comment|// Only publish stats if this operator's flag was set to gather stats
if|if
condition|(
operator|!
name|exception
condition|)
block|{
name|publishStats
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Publish statistics.    * similar to FileSinkOperator.java publishStats()    *    * @throws HiveException    */
specifier|private
name|void
name|publishStats
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// Initializing a stats publisher
name|StatsPublisher
name|statsPublisher
init|=
name|Utilities
operator|.
name|getStatsPublisher
argument_list|(
name|jc
argument_list|)
decl_stmt|;
if|if
condition|(
name|statsPublisher
operator|==
literal|null
condition|)
block|{
comment|// just return, stats gathering should not block the main query
name|LOG
operator|.
name|error
argument_list|(
literal|"StatsPublishing error: StatsPublisher is not initialized."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|STATSPUBLISHER_NOT_OBTAINED
operator|.
name|getErrorCodedMsg
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|statsPublisher
operator|.
name|connect
argument_list|(
name|jc
argument_list|)
condition|)
block|{
comment|// should fail since stats gathering is main purpose of the job
name|LOG
operator|.
name|error
argument_list|(
literal|"StatsPublishing error: cannot connect to database"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|STATSPUBLISHER_CONNECTION_ERROR
operator|.
name|getErrorCodedMsg
argument_list|()
argument_list|)
throw|;
block|}
comment|// construct key used to store stats in intermediate db
name|String
name|taskID
init|=
name|Utilities
operator|.
name|getTaskIdFromFilename
argument_list|(
name|Utilities
operator|.
name|getTaskId
argument_list|(
name|jc
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|keyPrefix
init|=
name|Utilities
operator|.
name|getHashedStatsPrefix
argument_list|(
name|statsAggKeyPrefix
argument_list|,
name|StatsFactory
operator|.
name|getMaxPrefixLength
argument_list|(
name|jc
argument_list|)
argument_list|,
name|taskID
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|keyPrefix
operator|+
name|taskID
decl_stmt|;
comment|// construct statistics to be stored
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|statsToPublish
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|statsToPublish
operator|.
name|put
argument_list|(
name|StatsSetupConst
operator|.
name|RAW_DATA_SIZE
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|uncompressedFileSize
argument_list|)
argument_list|)
expr_stmt|;
name|statsToPublish
operator|.
name|put
argument_list|(
name|StatsSetupConst
operator|.
name|ROW_COUNT
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|rowNo
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|statsPublisher
operator|.
name|publishStat
argument_list|(
name|key
argument_list|,
name|statsToPublish
argument_list|)
condition|)
block|{
comment|// The original exception is lost.
comment|// Not changing the interface to maintain backward compatibility
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|STATSPUBLISHER_PUBLISHING_ERROR
operator|.
name|getErrorCodedMsg
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|statsPublisher
operator|.
name|closeConnection
argument_list|()
condition|)
block|{
comment|// The original exception is lost.
comment|// Not changing the interface to maintain backward compatibility
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|STATSPUBLISHER_CLOSING_ERROR
operator|.
name|getErrorCodedMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

