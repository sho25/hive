begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|DebugUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|Decimal64ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ListColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|MapColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|StructColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|UnionColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatchCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|VirtualColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_comment
comment|/**  * A record reader wrapper that converts VRB reader into an OI-based reader.  * Due to the fact that changing table OIs in the plan after compilation is nearly impossible,  * this is made an abstract class where type-specific implementations can plug in certain details,  * so that the data produced after wrapping a vectorized reader would conform to the original OIs.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BatchToRowReader
parameter_list|<
name|StructType
parameter_list|,
name|UnionType
parameter_list|>
implements|implements
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|Object
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BatchToRowReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NullWritable
name|key
decl_stmt|;
specifier|private
specifier|final
name|VectorizedRowBatch
name|batch
decl_stmt|;
specifier|private
specifier|final
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|VectorizedRowBatch
argument_list|>
name|vrbReader
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|schema
decl_stmt|;
specifier|private
specifier|final
name|boolean
index|[]
name|included
decl_stmt|;
specifier|private
name|int
name|rowInBatch
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|int
name|rowIdIdx
decl_stmt|;
specifier|public
name|BatchToRowReader
parameter_list|(
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|VectorizedRowBatch
argument_list|>
name|vrbReader
parameter_list|,
name|VectorizedRowBatchCtx
name|vrbCtx
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|includedCols
parameter_list|)
block|{
name|this
operator|.
name|vrbReader
operator|=
name|vrbReader
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|vrbReader
operator|.
name|createKey
argument_list|()
expr_stmt|;
name|this
operator|.
name|batch
operator|=
name|vrbReader
operator|.
name|createValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|Lists
operator|.
expr|<
name|TypeInfo
operator|>
name|newArrayList
argument_list|(
name|vrbCtx
operator|.
name|getRowColumnTypeInfos
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: does this include partition columns?
name|boolean
index|[]
name|included
init|=
operator|new
name|boolean
index|[
name|schema
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|includedCols
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|colIx
range|:
name|includedCols
control|)
block|{
name|included
index|[
name|colIx
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|included
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Create struct for ROW__ID virtual column and extract index
name|this
operator|.
name|rowIdIdx
operator|=
name|vrbCtx
operator|.
name|findVirtualColumnNum
argument_list|(
name|VirtualColumn
operator|.
name|ROWID
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rowIdIdx
operator|>=
literal|0
condition|)
block|{
name|included
index|[
name|rowIdIdx
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Including the columns "
operator|+
name|DebugUtils
operator|.
name|toString
argument_list|(
name|included
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|included
operator|=
name|included
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|StructType
name|createStructObject
parameter_list|(
name|Object
name|previous
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|childrenTypes
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|void
name|setStructCol
parameter_list|(
name|StructType
name|structObj
parameter_list|,
name|int
name|i
parameter_list|,
name|Object
name|value
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|Object
name|getStructCol
parameter_list|(
name|StructType
name|structObj
parameter_list|,
name|int
name|i
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|int
name|getStructLength
parameter_list|(
name|StructType
name|structObj
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|UnionType
name|createUnionObject
parameter_list|(
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|childrenTypes
parameter_list|,
name|Object
name|previous
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|void
name|setUnion
parameter_list|(
name|UnionType
name|unionObj
parameter_list|,
name|byte
name|tag
parameter_list|,
name|Object
name|object
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|Object
name|getUnionField
parameter_list|(
name|UnionType
name|unionObj
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|void
name|populateRecordIdentifier
parameter_list|(
name|StructType
name|o
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|NullWritable
name|createKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|createValue
parameter_list|()
block|{
return|return
name|createStructObject
argument_list|(
literal|null
argument_list|,
name|schema
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|boolean
name|next
parameter_list|(
name|NullWritable
name|key
parameter_list|,
name|Object
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|ensureBatch
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|rowIdIdx
operator|>=
literal|0
condition|)
block|{
name|populateRecordIdentifier
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|StructType
name|value
init|=
operator|(
name|StructType
operator|)
name|previous
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|schema
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|included
index|[
name|i
index|]
operator|||
name|i
operator|>=
name|getStructLength
argument_list|(
name|value
argument_list|)
condition|)
continue|continue;
try|try
block|{
name|setStructCol
argument_list|(
name|value
argument_list|,
name|i
argument_list|,
name|nextValue
argument_list|(
name|batch
operator|.
name|cols
index|[
name|i
index|]
argument_list|,
name|rowInBatch
argument_list|,
name|schema
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|getStructCol
argument_list|(
name|value
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|rowIdIdx
condition|)
block|{
comment|// Populate key
name|populateRecordIdentifier
argument_list|(
operator|(
name|StructType
operator|)
name|getStructCol
argument_list|(
name|value
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error at row "
operator|+
name|rowInBatch
operator|+
literal|"/"
operator|+
name|batch
operator|.
name|size
operator|+
literal|", column "
operator|+
name|i
operator|+
literal|"/"
operator|+
name|schema
operator|.
name|size
argument_list|()
operator|+
literal|" "
operator|+
name|batch
operator|.
name|cols
index|[
name|i
index|]
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|t
operator|instanceof
name|IOException
operator|)
condition|?
operator|(
name|IOException
operator|)
name|t
else|:
operator|new
name|IOException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
operator|++
name|rowInBatch
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * If the current batch is empty, get a new one.    * @return true if we have rows available.    */
specifier|private
name|boolean
name|ensureBatch
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|rowInBatch
operator|>=
name|batch
operator|.
name|size
condition|)
block|{
name|rowInBatch
operator|=
literal|0
expr_stmt|;
return|return
name|vrbReader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|batch
argument_list|)
operator|&&
name|batch
operator|.
name|size
operator|>
literal|0
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|vrbReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
operator|=
literal|null
expr_stmt|;
block|}
comment|/* Routines for stubbing into Writables */
specifier|public
specifier|static
name|BooleanWritable
name|nextBoolean
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|BooleanWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|BooleanWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|BooleanWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|BooleanWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|vector
operator|)
operator|.
name|vector
index|[
name|row
index|]
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|ByteWritable
name|nextByte
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|ByteWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|ByteWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|ByteWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|ByteWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|vector
argument_list|)
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|ShortWritable
name|nextShort
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|ShortWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|ShortWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|ShortWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|ShortWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
call|(
name|short
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|vector
argument_list|)
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|IntWritable
name|nextInt
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|IntWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|IntWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|IntWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|IntWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
call|(
name|int
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|vector
argument_list|)
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|LongWritable
name|nextLong
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|LongWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|LongWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LongWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
operator|(
operator|(
name|LongColumnVector
operator|)
name|vector
operator|)
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|FloatWritable
name|nextFloat
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|FloatWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|FloatWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|FloatWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|FloatWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
call|(
name|float
call|)
argument_list|(
operator|(
name|DoubleColumnVector
operator|)
name|vector
argument_list|)
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|DoubleWritable
name|nextDouble
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|DoubleWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|DoubleWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|DoubleWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|DoubleWritable
operator|)
name|previous
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|vector
operator|)
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|Text
name|nextString
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|Text
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|Text
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|Text
operator|)
name|previous
expr_stmt|;
block|}
name|BytesColumnVector
name|bytes
init|=
operator|(
name|BytesColumnVector
operator|)
name|vector
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|bytes
operator|.
name|vector
index|[
name|row
index|]
argument_list|,
name|bytes
operator|.
name|start
index|[
name|row
index|]
argument_list|,
name|bytes
operator|.
name|length
index|[
name|row
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|HiveCharWritable
name|nextChar
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|size
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|HiveCharWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|HiveCharWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|HiveCharWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|HiveCharWritable
operator|)
name|previous
expr_stmt|;
block|}
name|BytesColumnVector
name|bytes
init|=
operator|(
name|BytesColumnVector
operator|)
name|vector
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|HiveVarcharWritable
name|nextVarchar
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|size
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|HiveVarcharWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|HiveVarcharWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|HiveVarcharWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|HiveVarcharWritable
operator|)
name|previous
expr_stmt|;
block|}
name|BytesColumnVector
name|bytes
init|=
operator|(
name|BytesColumnVector
operator|)
name|vector
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|BytesWritable
name|nextBinary
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|BytesWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|BytesWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|BytesWritable
operator|)
name|previous
expr_stmt|;
block|}
name|BytesColumnVector
name|bytes
init|=
operator|(
name|BytesColumnVector
operator|)
name|vector
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|bytes
operator|.
name|vector
index|[
name|row
index|]
argument_list|,
name|bytes
operator|.
name|start
index|[
name|row
index|]
argument_list|,
name|bytes
operator|.
name|length
index|[
name|row
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|HiveDecimalWritable
name|nextDecimal
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|HiveDecimalWritable
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|HiveDecimalWritable
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|HiveDecimalWritable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|HiveDecimalWritable
operator|)
name|previous
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|instanceof
name|Decimal64ColumnVector
condition|)
block|{
name|long
name|value
init|=
operator|(
operator|(
name|Decimal64ColumnVector
operator|)
name|vector
operator|)
operator|.
name|vector
index|[
name|row
index|]
decl_stmt|;
name|result
operator|.
name|deserialize64
argument_list|(
name|value
argument_list|,
operator|(
operator|(
name|Decimal64ColumnVector
operator|)
name|vector
operator|)
operator|.
name|scale
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|set
argument_list|(
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|vector
operator|)
operator|.
name|vector
index|[
name|row
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|DateWritableV2
name|nextDate
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|DateWritableV2
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|DateWritableV2
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|DateWritableV2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|DateWritableV2
operator|)
name|previous
expr_stmt|;
block|}
name|int
name|date
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|LongColumnVector
operator|)
name|vector
argument_list|)
operator|.
name|vector
index|[
name|row
index|]
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|date
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|TimestampWritableV2
name|nextTimestamp
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|TimestampWritableV2
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|TimestampWritableV2
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|TimestampWritableV2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|TimestampWritableV2
operator|)
name|previous
expr_stmt|;
block|}
name|TimestampColumnVector
name|tcv
init|=
operator|(
name|TimestampColumnVector
operator|)
name|vector
decl_stmt|;
name|result
operator|.
name|setInternal
argument_list|(
name|tcv
operator|.
name|time
index|[
name|row
index|]
argument_list|,
name|tcv
operator|.
name|nanos
index|[
name|row
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|StructType
name|nextStruct
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|StructTypeInfo
name|schema
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|childrenTypes
init|=
name|schema
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
name|StructType
name|result
init|=
name|createStructObject
argument_list|(
name|previous
argument_list|,
name|childrenTypes
argument_list|)
decl_stmt|;
name|StructColumnVector
name|struct
init|=
operator|(
name|StructColumnVector
operator|)
name|vector
decl_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|childrenTypes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|f
control|)
block|{
name|setStructCol
argument_list|(
name|result
argument_list|,
name|f
argument_list|,
name|nextValue
argument_list|(
name|struct
operator|.
name|fields
index|[
name|f
index|]
argument_list|,
name|row
argument_list|,
name|childrenTypes
operator|.
name|get
argument_list|(
name|f
argument_list|)
argument_list|,
name|getStructCol
argument_list|(
name|result
argument_list|,
name|f
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|UnionType
name|nextUnion
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|UnionTypeInfo
name|schema
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|childrenTypes
init|=
name|schema
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
decl_stmt|;
name|UnionType
name|result
init|=
name|createUnionObject
argument_list|(
name|childrenTypes
argument_list|,
name|previous
argument_list|)
decl_stmt|;
name|UnionColumnVector
name|union
init|=
operator|(
name|UnionColumnVector
operator|)
name|vector
decl_stmt|;
name|byte
name|tag
init|=
operator|(
name|byte
operator|)
name|union
operator|.
name|tags
index|[
name|row
index|]
decl_stmt|;
name|setUnion
argument_list|(
name|result
argument_list|,
name|tag
argument_list|,
name|nextValue
argument_list|(
name|union
operator|.
name|fields
index|[
name|tag
index|]
argument_list|,
name|row
argument_list|,
name|childrenTypes
operator|.
name|get
argument_list|(
name|tag
argument_list|)
argument_list|,
name|getUnionField
argument_list|(
name|result
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|nextList
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|ListTypeInfo
name|schema
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|ArrayList
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|previous
expr_stmt|;
block|}
name|ListColumnVector
name|list
init|=
operator|(
name|ListColumnVector
operator|)
name|vector
decl_stmt|;
name|int
name|length
init|=
operator|(
name|int
operator|)
name|list
operator|.
name|lengths
index|[
name|row
index|]
decl_stmt|;
name|int
name|offset
init|=
operator|(
name|int
operator|)
name|list
operator|.
name|offsets
index|[
name|row
index|]
decl_stmt|;
name|result
operator|.
name|ensureCapacity
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|int
name|oldLength
init|=
name|result
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|TypeInfo
name|childType
init|=
name|schema
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|length
operator|&&
name|idx
operator|<
name|oldLength
condition|)
block|{
name|result
operator|.
name|set
argument_list|(
name|idx
argument_list|,
name|nextValue
argument_list|(
name|list
operator|.
name|child
argument_list|,
name|offset
operator|+
name|idx
argument_list|,
name|childType
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|+=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|length
operator|<
name|oldLength
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|oldLength
operator|-
literal|1
init|;
name|i
operator|>=
name|length
condition|;
operator|--
name|i
control|)
block|{
name|result
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|oldLength
operator|<
name|length
condition|)
block|{
while|while
condition|(
name|idx
operator|<
name|length
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|nextValue
argument_list|(
name|list
operator|.
name|child
argument_list|,
name|offset
operator|+
name|idx
argument_list|,
name|childType
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|+=
literal|1
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|nextMap
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|MapTypeInfo
name|schema
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|MapColumnVector
name|map
init|=
operator|(
name|MapColumnVector
operator|)
name|vector
decl_stmt|;
name|int
name|length
init|=
operator|(
name|int
operator|)
name|map
operator|.
name|lengths
index|[
name|row
index|]
decl_stmt|;
name|int
name|offset
init|=
operator|(
name|int
operator|)
name|map
operator|.
name|offsets
index|[
name|row
index|]
decl_stmt|;
name|TypeInfo
name|keyType
init|=
name|schema
operator|.
name|getMapKeyTypeInfo
argument_list|()
decl_stmt|;
name|TypeInfo
name|valueType
init|=
name|schema
operator|.
name|getMapValueTypeInfo
argument_list|()
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|result
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|getClass
argument_list|()
operator|!=
name|LinkedHashMap
operator|.
name|class
condition|)
block|{
name|result
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|previous
expr_stmt|;
comment|// I couldn't think of a good way to reuse the keys and value objects
comment|// without even more allocations, so take the easy and safe approach.
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|e
init|=
literal|0
init|;
name|e
operator|<
name|length
condition|;
operator|++
name|e
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|nextValue
argument_list|(
name|map
operator|.
name|keys
argument_list|,
name|e
operator|+
name|offset
argument_list|,
name|keyType
argument_list|,
literal|null
argument_list|)
argument_list|,
name|nextValue
argument_list|(
name|map
operator|.
name|values
argument_list|,
name|e
operator|+
name|offset
argument_list|,
name|valueType
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|Object
name|nextValue
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|row
parameter_list|,
name|TypeInfo
name|schema
parameter_list|,
name|Object
name|previous
parameter_list|)
block|{
switch|switch
condition|(
name|schema
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|STRUCT
case|:
return|return
name|nextStruct
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
operator|(
name|StructTypeInfo
operator|)
name|schema
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|UNION
case|:
return|return
name|nextUnion
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
operator|(
name|UnionTypeInfo
operator|)
name|schema
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|LIST
case|:
return|return
name|nextList
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
operator|(
name|ListTypeInfo
operator|)
name|schema
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
name|nextMap
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
operator|(
name|MapTypeInfo
operator|)
name|schema
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|PRIMITIVE
case|:
block|{
name|PrimitiveTypeInfo
name|pschema
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|schema
decl_stmt|;
switch|switch
condition|(
name|pschema
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
name|nextBoolean
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
name|nextByte
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
name|nextShort
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|INT
case|:
return|return
name|nextInt
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|nextLong
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|nextFloat
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|nextDouble
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
name|nextString
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
name|nextChar
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
operator|(
operator|(
name|CharTypeInfo
operator|)
name|pschema
operator|)
operator|.
name|getLength
argument_list|()
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
name|nextVarchar
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
operator|(
operator|(
name|VarcharTypeInfo
operator|)
name|pschema
operator|)
operator|.
name|getLength
argument_list|()
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
name|nextBinary
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
name|nextDecimal
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
name|nextDate
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|nextTimestamp
argument_list|(
name|vector
argument_list|,
name|row
argument_list|,
name|previous
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown type "
operator|+
name|schema
argument_list|)
throw|;
block|}
block|}
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown type "
operator|+
name|schema
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

