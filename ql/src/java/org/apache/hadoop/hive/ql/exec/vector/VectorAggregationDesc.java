begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|DataTypePhysicalVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|aggregates
operator|.
name|VectorAggregateExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFVariance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|AnnotationUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * VectorAggregationDesc.  *  * Mode is GenericUDAFEvaluator.Mode.  *  * It is the different modes for an aggregate UDAF (User Defined Aggregation Function).  *  *    (Notice the these names are a subset of GroupByDesc.Mode...)  *  *        PARTIAL1       Original data            --> Partial aggregation data  *  *        PARTIAL2       Partial aggregation data --> Partial aggregation data  *  *        FINAL          Partial aggregation data --> Full aggregation data  *  *        COMPLETE       Original data            --> Full aggregation data  *  *  * SIMPLEST CASE --> The data type/semantics of original data, partial aggregation  *     data, and full aggregation data ARE THE SAME.  E.g. MIN, MAX, SUM.  The different  *     modes can be handled by one aggregation class.  *  *     This case has a null for the Mode.  *  * FOR OTHERS --> The data type/semantics of partial aggregation data and full aggregation data  *    ARE THE SAME but different than original data.  This results in 2 aggregation classes:  *  *       1) A class that takes original rows and outputs partial/full aggregation  *          (PARTIAL1/COMPLETE)  *  *         and  *  *       2) A class that takes partial aggregation and produces full aggregation  *          (PARTIAL2/FINAL).  *  *    E.g. COUNT(*) and COUNT(column)  *  * OTHERWISE FULL --> The data type/semantics of partial aggregation data is different than  *    original data and full aggregation data.  *  *    E.g. AVG uses a STRUCT with count and sum for partial aggregation data.  It divides  *    sum by count to produce the average for final aggregation.  *  */
end_comment

begin_class
specifier|public
class|class
name|VectorAggregationDesc
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|final
name|AggregationDesc
name|aggrDesc
decl_stmt|;
specifier|private
specifier|final
name|TypeInfo
name|inputTypeInfo
decl_stmt|;
specifier|private
specifier|final
name|ColumnVector
operator|.
name|Type
name|inputColVectorType
decl_stmt|;
specifier|private
specifier|final
name|VectorExpression
name|inputExpression
decl_stmt|;
specifier|private
specifier|final
name|TypeInfo
name|outputTypeInfo
decl_stmt|;
specifier|private
specifier|final
name|ColumnVector
operator|.
name|Type
name|outputColVectorType
decl_stmt|;
specifier|private
specifier|final
name|DataTypePhysicalVariation
name|outputDataTypePhysicalVariation
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|VectorAggregateExpression
argument_list|>
name|vecAggrClass
decl_stmt|;
specifier|private
name|GenericUDAFEvaluator
name|evaluator
decl_stmt|;
specifier|public
name|VectorAggregationDesc
parameter_list|(
name|AggregationDesc
name|aggrDesc
parameter_list|,
name|GenericUDAFEvaluator
name|evaluator
parameter_list|,
name|TypeInfo
name|inputTypeInfo
parameter_list|,
name|ColumnVector
operator|.
name|Type
name|inputColVectorType
parameter_list|,
name|VectorExpression
name|inputExpression
parameter_list|,
name|TypeInfo
name|outputTypeInfo
parameter_list|,
name|ColumnVector
operator|.
name|Type
name|outputColVectorType
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|VectorAggregateExpression
argument_list|>
name|vecAggrClass
parameter_list|)
block|{
name|this
operator|.
name|aggrDesc
operator|=
name|aggrDesc
expr_stmt|;
name|this
operator|.
name|evaluator
operator|=
name|evaluator
expr_stmt|;
name|this
operator|.
name|inputTypeInfo
operator|=
name|inputTypeInfo
expr_stmt|;
name|this
operator|.
name|inputColVectorType
operator|=
name|inputColVectorType
expr_stmt|;
name|this
operator|.
name|inputExpression
operator|=
name|inputExpression
expr_stmt|;
name|this
operator|.
name|outputTypeInfo
operator|=
name|outputTypeInfo
expr_stmt|;
name|this
operator|.
name|outputColVectorType
operator|=
name|outputColVectorType
expr_stmt|;
name|outputDataTypePhysicalVariation
operator|=
operator|(
name|outputColVectorType
operator|==
name|ColumnVector
operator|.
name|Type
operator|.
name|DECIMAL_64
condition|?
name|DataTypePhysicalVariation
operator|.
name|DECIMAL_64
else|:
name|DataTypePhysicalVariation
operator|.
name|NONE
operator|)
expr_stmt|;
name|this
operator|.
name|vecAggrClass
operator|=
name|vecAggrClass
expr_stmt|;
block|}
specifier|public
name|AggregationDesc
name|getAggrDesc
parameter_list|()
block|{
return|return
name|aggrDesc
return|;
block|}
specifier|public
name|TypeInfo
name|getInputTypeInfo
parameter_list|()
block|{
return|return
name|inputTypeInfo
return|;
block|}
specifier|public
name|ColumnVector
operator|.
name|Type
name|getInputColVectorType
parameter_list|()
block|{
return|return
name|inputColVectorType
return|;
block|}
specifier|public
name|VectorExpression
name|getInputExpression
parameter_list|()
block|{
return|return
name|inputExpression
return|;
block|}
specifier|public
name|TypeInfo
name|getOutputTypeInfo
parameter_list|()
block|{
return|return
name|outputTypeInfo
return|;
block|}
specifier|public
name|ColumnVector
operator|.
name|Type
name|getOutputColVectorType
parameter_list|()
block|{
return|return
name|outputColVectorType
return|;
block|}
specifier|public
name|DataTypePhysicalVariation
name|getOutputDataTypePhysicalVariation
parameter_list|()
block|{
return|return
name|outputDataTypePhysicalVariation
return|;
block|}
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|()
block|{
return|return
name|evaluator
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|VectorAggregateExpression
argument_list|>
name|getVecAggrClass
parameter_list|()
block|{
return|return
name|vecAggrClass
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|vecAggrClass
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputExpression
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|inputExpression
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|") -> "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"(*) -> "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|outputTypeInfo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputDataTypePhysicalVariation
operator|!=
literal|null
operator|&&
name|outputDataTypePhysicalVariation
operator|!=
name|DataTypePhysicalVariation
operator|.
name|NONE
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|outputDataTypePhysicalVariation
argument_list|)
expr_stmt|;
block|}
name|String
name|aggregationName
init|=
name|aggrDesc
operator|.
name|getGenericUDAFName
argument_list|()
decl_stmt|;
if|if
condition|(
name|GenericUDAFVariance
operator|.
name|isVarianceFamilyName
argument_list|(
name|aggregationName
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" aggregation: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|aggregationName
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

