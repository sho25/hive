begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Simple wrapper for persistent Hashmap implementing only the put/get/remove/clear interface. The  * main memory hash table acts as a cache and all put/get will operate on it first. If the size of  * the main memory hash table exceeds a certain threshold, new elements will go into the persistent  * hash table.  */
end_comment

begin_class
specifier|public
class|class
name|HashMapWrapper
extends|extends
name|AbstractMapJoinTableContainer
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HashMapWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// default threshold for using main memory based HashMap
specifier|private
specifier|static
specifier|final
name|String
name|THESHOLD_NAME
init|=
literal|"threshold"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOAD_NAME
init|=
literal|"load"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|THRESHOLD
init|=
literal|1000000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|LOADFACTOR
init|=
literal|0.75f
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|MapJoinKey
argument_list|,
name|MapJoinRowContainer
argument_list|>
name|mHash
decl_stmt|;
comment|// main memory HashMap
comment|/**    * Constructor.    *    * @param threshold    *          User specified threshold to store new values into persistent storage.    */
specifier|public
name|HashMapWrapper
parameter_list|(
name|int
name|threshold
parameter_list|,
name|float
name|loadFactor
parameter_list|)
block|{
name|super
argument_list|(
name|createConstructorMetaData
argument_list|(
name|threshold
argument_list|,
name|loadFactor
argument_list|)
argument_list|)
expr_stmt|;
name|mHash
operator|=
operator|new
name|HashMap
argument_list|<
name|MapJoinKey
argument_list|,
name|MapJoinRowContainer
argument_list|>
argument_list|(
name|threshold
argument_list|,
name|loadFactor
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HashMapWrapper
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metaData
parameter_list|)
block|{
name|super
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
name|int
name|threshold
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|metaData
operator|.
name|get
argument_list|(
name|THESHOLD_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|loadFactor
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|metaData
operator|.
name|get
argument_list|(
name|LOAD_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|mHash
operator|=
operator|new
name|HashMap
argument_list|<
name|MapJoinKey
argument_list|,
name|MapJoinRowContainer
argument_list|>
argument_list|(
name|threshold
argument_list|,
name|loadFactor
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HashMapWrapper
parameter_list|(
name|int
name|threshold
parameter_list|)
block|{
name|this
argument_list|(
name|threshold
argument_list|,
name|LOADFACTOR
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HashMapWrapper
parameter_list|()
block|{
name|this
argument_list|(
name|THRESHOLD
argument_list|,
name|LOADFACTOR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MapJoinRowContainer
name|get
parameter_list|(
name|MapJoinKey
name|key
parameter_list|)
block|{
return|return
name|mHash
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|MapJoinKey
name|key
parameter_list|,
name|MapJoinRowContainer
name|value
parameter_list|)
block|{
name|mHash
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|mHash
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|MapJoinKey
argument_list|,
name|MapJoinRowContainer
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
name|mHash
operator|.
name|entrySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|mHash
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createConstructorMetaData
parameter_list|(
name|int
name|threshold
parameter_list|,
name|float
name|loadFactor
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metaData
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|metaData
operator|.
name|put
argument_list|(
name|THESHOLD_NAME
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|threshold
argument_list|)
argument_list|)
expr_stmt|;
name|metaData
operator|.
name|put
argument_list|(
name|LOAD_NAME
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|loadFactor
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|metaData
return|;
block|}
block|}
end_class

end_unit

