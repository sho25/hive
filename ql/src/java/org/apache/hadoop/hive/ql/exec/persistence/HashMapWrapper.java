begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_comment
comment|/**  * Simple wrapper for persistent Hashmap implementing only the put/get/remove/clear interface. The  * main memory hash table acts as a cache and all put/get will operate on it first. If the size of  * the main memory hash table exceeds a certain threshold, new elements will go into the persistent  * hash table.  */
end_comment

begin_class
specifier|public
class|class
name|HashMapWrapper
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// default threshold for using main memory based HashMap
specifier|private
specifier|static
specifier|final
name|int
name|THRESHOLD
init|=
literal|1000000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|LOADFACTOR
init|=
literal|0.75f
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|MEMORYUSAGE
init|=
literal|1
decl_stmt|;
specifier|private
name|float
name|maxMemoryUsage
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|mHash
decl_stmt|;
comment|// main memory HashMap
specifier|protected
specifier|transient
name|LogHelper
name|console
decl_stmt|;
specifier|private
name|File
name|dumpFile
decl_stmt|;
specifier|public
specifier|static
name|MemoryMXBean
name|memoryMXBean
decl_stmt|;
specifier|private
name|long
name|maxMemory
decl_stmt|;
specifier|private
name|long
name|currentMemory
decl_stmt|;
specifier|private
name|NumberFormat
name|num
decl_stmt|;
comment|/**    * Constructor.    *    * @param threshold    *          User specified threshold to store new values into persistent storage.    */
specifier|public
name|HashMapWrapper
parameter_list|(
name|int
name|threshold
parameter_list|,
name|float
name|loadFactor
parameter_list|,
name|float
name|memoryUsage
parameter_list|)
block|{
name|maxMemoryUsage
operator|=
name|memoryUsage
expr_stmt|;
name|mHash
operator|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|threshold
argument_list|,
name|loadFactor
argument_list|)
expr_stmt|;
name|memoryMXBean
operator|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
expr_stmt|;
name|maxMemory
operator|=
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"maximum memory: "
operator|+
name|maxMemory
argument_list|)
expr_stmt|;
name|num
operator|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|num
operator|.
name|setMinimumFractionDigits
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HashMapWrapper
parameter_list|(
name|int
name|threshold
parameter_list|)
block|{
name|this
argument_list|(
name|threshold
argument_list|,
name|LOADFACTOR
argument_list|,
name|MEMORYUSAGE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HashMapWrapper
parameter_list|()
block|{
name|this
argument_list|(
name|THRESHOLD
argument_list|,
name|LOADFACTOR
argument_list|,
name|MEMORYUSAGE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|V
name|get
parameter_list|(
name|K
name|key
parameter_list|)
block|{
return|return
name|mHash
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// isAbort();
name|mHash
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|mHash
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**    * Flush the main memory hash table into the persistent cache file    *    * @return persistent cache file    */
specifier|public
name|long
name|flushMemoryCacheToPersistent
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectOutputStream
name|outputStream
init|=
literal|null
decl_stmt|;
name|outputStream
operator|=
operator|new
name|ObjectOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|writeObject
argument_list|(
name|mHash
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|file
operator|.
name|length
argument_list|()
return|;
block|}
specifier|public
name|void
name|initilizePersistentHash
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|ObjectInputStream
name|inputStream
init|=
literal|null
decl_stmt|;
name|inputStream
operator|=
operator|new
name|ObjectInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|hashtable
init|=
operator|(
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|inputStream
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|this
operator|.
name|setMHash
argument_list|(
name|hashtable
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|mHash
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
name|mHash
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**    * Close the persistent hash table and clean it up.    *    * @throws HiveException    */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|HiveException
block|{
name|mHash
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
throws|throws
name|HiveException
block|{
name|mHash
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getKeySize
parameter_list|()
block|{
return|return
name|mHash
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isAbort
parameter_list|(
name|long
name|numRows
parameter_list|,
name|LogHelper
name|console
parameter_list|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|mHash
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|usedMemory
init|=
name|memoryMXBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
decl_stmt|;
name|double
name|rate
init|=
operator|(
name|double
operator|)
name|usedMemory
operator|/
operator|(
name|double
operator|)
name|maxMemory
decl_stmt|;
name|long
name|mem1
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
operator|-
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|freeMemory
argument_list|()
decl_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
name|Utilities
operator|.
name|now
argument_list|()
operator|+
literal|"\tProcessing rows:\t"
operator|+
name|numRows
operator|+
literal|"\tHashtable size:\t"
operator|+
name|size
operator|+
literal|"\tMemory usage:\t"
operator|+
name|usedMemory
operator|+
literal|"\trate:\t"
operator|+
name|num
operator|.
name|format
argument_list|(
name|rate
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rate
operator|>
operator|(
name|double
operator|)
name|maxMemoryUsage
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setLOG
parameter_list|(
name|Log
name|log
parameter_list|)
block|{
name|LOG
operator|=
name|log
expr_stmt|;
block|}
specifier|public
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getMHash
parameter_list|()
block|{
return|return
name|mHash
return|;
block|}
specifier|public
name|void
name|setMHash
parameter_list|(
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|hash
parameter_list|)
block|{
name|mHash
operator|=
name|hash
expr_stmt|;
block|}
specifier|public
name|LogHelper
name|getConsole
parameter_list|()
block|{
return|return
name|console
return|;
block|}
specifier|public
name|void
name|setConsole
parameter_list|(
name|LogHelper
name|console
parameter_list|)
block|{
name|this
operator|.
name|console
operator|=
name|console
expr_stmt|;
block|}
specifier|public
name|File
name|getDumpFile
parameter_list|()
block|{
return|return
name|dumpFile
return|;
block|}
specifier|public
name|void
name|setDumpFile
parameter_list|(
name|File
name|dumpFile
parameter_list|)
block|{
name|this
operator|.
name|dumpFile
operator|=
name|dumpFile
expr_stmt|;
block|}
specifier|public
specifier|static
name|MemoryMXBean
name|getMemoryMXBean
parameter_list|()
block|{
return|return
name|memoryMXBean
return|;
block|}
specifier|public
specifier|static
name|void
name|setMemoryMXBean
parameter_list|(
name|MemoryMXBean
name|memoryMXBean
parameter_list|)
block|{
name|HashMapWrapper
operator|.
name|memoryMXBean
operator|=
name|memoryMXBean
expr_stmt|;
block|}
specifier|public
name|long
name|getMaxMemory
parameter_list|()
block|{
return|return
name|maxMemory
return|;
block|}
specifier|public
name|void
name|setMaxMemory
parameter_list|(
name|long
name|maxMemory
parameter_list|)
block|{
name|this
operator|.
name|maxMemory
operator|=
name|maxMemory
expr_stmt|;
block|}
specifier|public
name|long
name|getCurrentMemory
parameter_list|()
block|{
return|return
name|currentMemory
return|;
block|}
specifier|public
name|void
name|setCurrentMemory
parameter_list|(
name|long
name|currentMemory
parameter_list|)
block|{
name|this
operator|.
name|currentMemory
operator|=
name|currentMemory
expr_stmt|;
block|}
specifier|public
name|NumberFormat
name|getNum
parameter_list|()
block|{
return|return
name|num
return|;
block|}
specifier|public
name|void
name|setNum
parameter_list|(
name|NumberFormat
name|num
parameter_list|)
block|{
name|this
operator|.
name|num
operator|=
name|num
expr_stmt|;
block|}
specifier|public
specifier|static
name|int
name|getTHRESHOLD
parameter_list|()
block|{
return|return
name|THRESHOLD
return|;
block|}
block|}
end_class

end_unit

