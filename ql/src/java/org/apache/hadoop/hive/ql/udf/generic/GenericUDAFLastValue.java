begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|WindowFunctionDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|BoundarySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|BoundaryDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ptf
operator|.
name|WindowFrameDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
operator|.
name|AggregationBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_class
annotation|@
name|WindowFunctionDescription
argument_list|(
name|description
operator|=
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"last_value"
argument_list|,
name|value
operator|=
literal|"_FUNC_(x)"
argument_list|)
argument_list|,
name|supportsWindow
operator|=
literal|true
argument_list|,
name|pivotResult
operator|=
literal|false
argument_list|,
name|impliesOrder
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|GenericUDAFLastValue
extends|extends
name|AbstractGenericUDAFResolver
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GenericUDAFLastValue
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|parameters
operator|.
name|length
operator|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|2
argument_list|,
literal|"At most 2 arguments expected"
argument_list|)
throw|;
block|}
if|if
condition|(
name|parameters
operator|.
name|length
operator|>
literal|1
operator|&&
operator|!
name|parameters
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
literal|1
argument_list|,
literal|"second argument must be a boolean expression"
argument_list|)
throw|;
block|}
return|return
name|createEvaluator
argument_list|()
return|;
block|}
specifier|protected
name|GenericUDAFLastValueEvaluator
name|createEvaluator
parameter_list|()
block|{
return|return
operator|new
name|GenericUDAFLastValueEvaluator
argument_list|()
return|;
block|}
specifier|static
class|class
name|LastValueBuffer
implements|implements
name|AggregationBuffer
block|{
name|Object
name|val
decl_stmt|;
name|boolean
name|firstRow
decl_stmt|;
name|boolean
name|skipNulls
decl_stmt|;
name|LastValueBuffer
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
block|}
name|void
name|init
parameter_list|()
block|{
name|val
operator|=
literal|null
expr_stmt|;
name|firstRow
operator|=
literal|true
expr_stmt|;
name|skipNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|GenericUDAFLastValueEvaluator
extends|extends
name|GenericUDAFEvaluator
block|{
name|ObjectInspector
name|inputOI
decl_stmt|;
name|ObjectInspector
name|outputOI
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|!=
name|Mode
operator|.
name|COMPLETE
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Only COMPLETE mode supported for Rank function"
argument_list|)
throw|;
block|}
name|inputOI
operator|=
name|parameters
index|[
literal|0
index|]
expr_stmt|;
name|outputOI
operator|=
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|inputOI
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
expr_stmt|;
return|return
name|outputOI
return|;
block|}
annotation|@
name|Override
specifier|public
name|AggregationBuffer
name|getNewAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
operator|new
name|LastValueBuffer
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
operator|(
operator|(
name|LastValueBuffer
operator|)
name|agg
operator|)
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|LastValueBuffer
name|lb
init|=
operator|(
name|LastValueBuffer
operator|)
name|agg
decl_stmt|;
if|if
condition|(
name|lb
operator|.
name|firstRow
condition|)
block|{
name|lb
operator|.
name|firstRow
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|parameters
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|lb
operator|.
name|skipNulls
operator|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getBoolean
argument_list|(
name|parameters
index|[
literal|1
index|]
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBooleanObjectInspector
argument_list|)
expr_stmt|;
block|}
block|}
name|Object
name|o
init|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|parameters
index|[
literal|0
index|]
argument_list|,
name|inputOI
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lb
operator|.
name|skipNulls
operator|||
name|o
operator|!=
literal|null
condition|)
block|{
name|lb
operator|.
name|val
operator|=
name|o
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminatePartial
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"terminatePartial not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|merge
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
name|partial
parameter_list|)
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"merge not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|LastValueBuffer
name|lb
init|=
operator|(
name|LastValueBuffer
operator|)
name|agg
decl_stmt|;
return|return
name|lb
operator|.
name|val
return|;
block|}
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getWindowingEvaluator
parameter_list|(
name|WindowFrameDef
name|wFrmDef
parameter_list|)
block|{
name|BoundaryDef
name|start
init|=
name|wFrmDef
operator|.
name|getStart
argument_list|()
decl_stmt|;
name|BoundaryDef
name|end
init|=
name|wFrmDef
operator|.
name|getEnd
argument_list|()
decl_stmt|;
return|return
operator|new
name|LastValStreamingFixedWindow
argument_list|(
name|this
argument_list|,
name|start
operator|.
name|getAmt
argument_list|()
argument_list|,
name|end
operator|.
name|getAmt
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|LastValStreamingFixedWindow
extends|extends
name|GenericUDAFStreamingEvaluator
argument_list|<
name|Object
argument_list|>
block|{
class|class
name|State
extends|extends
name|GenericUDAFStreamingEvaluator
argument_list|<
name|Object
argument_list|>
operator|.
name|StreamingState
block|{
specifier|private
name|Object
name|lastValue
decl_stmt|;
specifier|private
name|int
name|lastIdx
decl_stmt|;
specifier|public
name|State
parameter_list|(
name|AggregationBuffer
name|buf
parameter_list|)
block|{
name|super
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|lastValue
operator|=
literal|null
expr_stmt|;
name|lastIdx
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|estimate
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|wrappedBuf
operator|instanceof
name|AbstractAggregationBuffer
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|underlying
init|=
operator|(
operator|(
name|AbstractAggregationBuffer
operator|)
name|wrappedBuf
operator|)
operator|.
name|estimate
argument_list|()
decl_stmt|;
if|if
condition|(
name|underlying
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|2
operator|*
name|underlying
return|;
block|}
specifier|protected
name|void
name|reset
parameter_list|()
block|{
name|lastValue
operator|=
literal|null
expr_stmt|;
name|lastIdx
operator|=
operator|-
literal|1
expr_stmt|;
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|LastValStreamingFixedWindow
parameter_list|(
name|GenericUDAFEvaluator
name|wrappedEval
parameter_list|,
name|int
name|numPreceding
parameter_list|,
name|int
name|numFollowing
parameter_list|)
block|{
name|super
argument_list|(
name|wrappedEval
argument_list|,
name|numPreceding
argument_list|,
name|numFollowing
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowsRemainingAfterTerminate
parameter_list|()
throws|throws
name|HiveException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|AggregationBuffer
name|getNewAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
name|AggregationBuffer
name|underlying
init|=
name|wrappedEval
operator|.
name|getNewAggregationBuffer
argument_list|()
decl_stmt|;
return|return
operator|new
name|State
argument_list|(
name|underlying
argument_list|)
return|;
block|}
specifier|protected
name|ObjectInspector
name|inputOI
parameter_list|()
block|{
return|return
operator|(
operator|(
name|GenericUDAFLastValueEvaluator
operator|)
name|wrappedEval
operator|)
operator|.
name|inputOI
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|State
name|s
init|=
operator|(
name|State
operator|)
name|agg
decl_stmt|;
name|LastValueBuffer
name|lb
init|=
operator|(
name|LastValueBuffer
operator|)
name|s
operator|.
name|wrappedBuf
decl_stmt|;
comment|/*        * on firstRow invoke underlying evaluator to initialize skipNulls flag.        */
if|if
condition|(
name|lb
operator|.
name|firstRow
condition|)
block|{
name|wrappedEval
operator|.
name|iterate
argument_list|(
name|lb
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
name|Object
name|o
init|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|parameters
index|[
literal|0
index|]
argument_list|,
name|inputOI
argument_list|()
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lb
operator|.
name|skipNulls
operator|||
name|o
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|lastValue
operator|=
name|o
expr_stmt|;
name|s
operator|.
name|lastIdx
operator|=
name|s
operator|.
name|numRows
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lb
operator|.
name|skipNulls
operator|&&
name|s
operator|.
name|lastIdx
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|numPreceding
operator|!=
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
operator|&&
name|s
operator|.
name|numRows
operator|>
name|s
operator|.
name|lastIdx
operator|+
name|numPreceding
operator|+
name|numFollowing
condition|)
block|{
name|s
operator|.
name|lastValue
operator|=
literal|null
expr_stmt|;
name|s
operator|.
name|lastIdx
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|s
operator|.
name|numRows
operator|>=
operator|(
name|numFollowing
operator|)
condition|)
block|{
name|s
operator|.
name|results
operator|.
name|add
argument_list|(
name|s
operator|.
name|lastValue
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|numRows
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
name|State
name|s
init|=
operator|(
name|State
operator|)
name|agg
decl_stmt|;
name|LastValueBuffer
name|lb
init|=
operator|(
name|LastValueBuffer
operator|)
name|s
operator|.
name|wrappedBuf
decl_stmt|;
if|if
condition|(
name|lb
operator|.
name|skipNulls
operator|&&
name|s
operator|.
name|lastIdx
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|numPreceding
operator|!=
name|BoundarySpec
operator|.
name|UNBOUNDED_AMOUNT
operator|&&
name|s
operator|.
name|numRows
operator|>
name|s
operator|.
name|lastIdx
operator|+
name|numPreceding
operator|+
name|numFollowing
condition|)
block|{
name|s
operator|.
name|lastValue
operator|=
literal|null
expr_stmt|;
name|s
operator|.
name|lastIdx
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFollowing
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|.
name|results
operator|.
name|add
argument_list|(
name|s
operator|.
name|lastValue
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

