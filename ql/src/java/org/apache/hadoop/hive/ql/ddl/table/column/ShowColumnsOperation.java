begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|column
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|formatting
operator|.
name|MetaDataFormatUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|formatting
operator|.
name|TextMetaDataTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * Operation process of showing the columns.  */
end_comment

begin_class
specifier|public
class|class
name|ShowColumnsOperation
extends|extends
name|DDLOperation
block|{
specifier|private
specifier|final
name|ShowColumnsDesc
name|desc
decl_stmt|;
specifier|public
name|ShowColumnsOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|ShowColumnsDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|desc
operator|=
name|desc
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|()
throws|throws
name|HiveException
block|{
comment|// write the results in the file
try|try
init|(
name|DataOutputStream
name|outStream
init|=
name|DDLUtils
operator|.
name|getOutputStream
argument_list|(
operator|new
name|Path
argument_list|(
name|desc
operator|.
name|getResFile
argument_list|()
argument_list|)
argument_list|,
name|context
argument_list|)
init|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|columns
init|=
name|getColumnsByPattern
argument_list|()
decl_stmt|;
name|writeColumns
argument_list|(
name|outStream
argument_list|,
name|columns
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|,
name|ErrorMsg
operator|.
name|GENERIC_ERROR
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getColumnsByPattern
parameter_list|()
throws|throws
name|HiveException
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|columns
init|=
name|getCols
argument_list|()
decl_stmt|;
name|Matcher
name|matcher
init|=
name|getMatcher
argument_list|()
decl_stmt|;
return|return
name|filterColumns
argument_list|(
name|columns
argument_list|,
name|matcher
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getCols
parameter_list|()
throws|throws
name|HiveException
block|{
name|Table
name|table
init|=
name|context
operator|.
name|getDb
argument_list|()
operator|.
name|getTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|allColumns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|allColumns
operator|.
name|addAll
argument_list|(
name|table
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|allColumns
operator|.
name|addAll
argument_list|(
name|table
operator|.
name|getPartCols
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|allColumns
return|;
block|}
specifier|private
name|Matcher
name|getMatcher
parameter_list|()
block|{
name|String
name|columnPattern
init|=
name|desc
operator|.
name|getPattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnPattern
operator|==
literal|null
condition|)
block|{
name|columnPattern
operator|=
literal|"*"
expr_stmt|;
block|}
name|columnPattern
operator|=
name|columnPattern
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|columnPattern
operator|=
name|columnPattern
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|".*"
argument_list|)
expr_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|columnPattern
argument_list|)
decl_stmt|;
return|return
name|pattern
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|filterColumns
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|columns
parameter_list|,
name|Matcher
name|matcher
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|column
range|:
name|columns
control|)
block|{
name|matcher
operator|.
name|reset
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|FieldSchema
name|f1
parameter_list|,
name|FieldSchema
name|f2
parameter_list|)
block|{
return|return
name|f1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|f2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|void
name|writeColumns
parameter_list|(
name|DataOutputStream
name|outStream
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|columns
parameter_list|)
throws|throws
name|IOException
block|{
name|TextMetaDataTable
name|tmd
init|=
operator|new
name|TextMetaDataTable
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fieldSchema
range|:
name|columns
control|)
block|{
name|tmd
operator|.
name|addRow
argument_list|(
name|MetaDataFormatUtils
operator|.
name|extractColumnValues
argument_list|(
name|fieldSchema
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// In case the query is served by HiveServer2, don't pad it with spaces,
comment|// as HiveServer2 output is consumed by JDBC/ODBC clients.
name|boolean
name|isOutputPadded
init|=
operator|!
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|isHiveServerQuery
argument_list|()
decl_stmt|;
name|outStream
operator|.
name|writeBytes
argument_list|(
name|tmd
operator|.
name|renderTable
argument_list|(
name|isOutputPadded
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

