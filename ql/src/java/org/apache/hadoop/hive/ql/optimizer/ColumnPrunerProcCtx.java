begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|CommonJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UnionOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeFieldDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|FieldNode
operator|.
name|mergeFieldNodes
import|;
end_import

begin_comment
comment|/**  * This class implements the processor context for Column Pruner.  */
end_comment

begin_class
specifier|public
class|class
name|ColumnPrunerProcCtx
implements|implements
name|NodeProcessorCtx
block|{
specifier|private
specifier|final
name|ParseContext
name|pctx
decl_stmt|;
comment|/**    * A mapping from operators to nested column paths being used in them.    * Note: paths are of format "s.a.b" which represents field "b" of    *   struct "a" is being used, while "a" itself is a field of struct "s".    */
specifier|private
specifier|final
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|List
argument_list|<
name|FieldNode
argument_list|>
argument_list|>
name|prunedColLists
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|CommonJoinOperator
argument_list|,
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|FieldNode
argument_list|>
argument_list|>
argument_list|>
name|joinPrunedColLists
decl_stmt|;
specifier|public
name|ColumnPrunerProcCtx
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
block|{
name|this
operator|.
name|pctx
operator|=
name|pctx
expr_stmt|;
name|prunedColLists
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|joinPrunedColLists
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ParseContext
name|getParseContext
parameter_list|()
block|{
return|return
name|pctx
return|;
block|}
specifier|public
name|Map
argument_list|<
name|CommonJoinOperator
argument_list|,
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|FieldNode
argument_list|>
argument_list|>
argument_list|>
name|getJoinPrunedColLists
parameter_list|()
block|{
return|return
name|joinPrunedColLists
return|;
block|}
specifier|public
name|List
argument_list|<
name|FieldNode
argument_list|>
name|getPrunedColList
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
block|{
return|return
name|prunedColLists
operator|.
name|get
argument_list|(
name|op
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|List
argument_list|<
name|FieldNode
argument_list|>
argument_list|>
name|getPrunedColLists
parameter_list|()
block|{
return|return
name|prunedColLists
return|;
block|}
comment|/**    * Creates the list of internal column names(represented by field nodes,    * these names are used in the RowResolver and are different from the    * external column names) that are needed in the subtree. These columns    * eventually have to be selected from the table scan.    *    * @param curOp The root of the operator subtree.    * @return a list of field nodes representing the internal column names.    */
specifier|public
name|List
argument_list|<
name|FieldNode
argument_list|>
name|genColLists
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|curOp
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|curOp
operator|.
name|getChildOperators
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|FieldNode
argument_list|>
name|colList
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
range|:
name|curOp
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|List
argument_list|<
name|FieldNode
argument_list|>
name|prunList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|CommonJoinOperator
condition|)
block|{
name|int
name|tag
init|=
name|child
operator|.
name|getParentOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|curOp
argument_list|)
decl_stmt|;
name|prunList
operator|=
name|joinPrunedColLists
operator|.
name|get
argument_list|(
name|child
argument_list|)
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|tag
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child
operator|instanceof
name|FileSinkOperator
condition|)
block|{
name|prunList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|RowSchema
name|oldRS
init|=
name|curOp
operator|.
name|getSchema
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|colInfo
range|:
name|oldRS
operator|.
name|getSignature
argument_list|()
control|)
block|{
name|prunList
operator|.
name|add
argument_list|(
operator|new
name|FieldNode
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|prunList
operator|=
name|prunedColLists
operator|.
name|get
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prunList
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|colList
operator|==
literal|null
condition|)
block|{
name|colList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|prunList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|colList
operator|=
name|mergeFieldNodes
argument_list|(
name|colList
argument_list|,
name|prunList
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|colList
return|;
block|}
comment|/**    * Creates the list of internal column names (represented by field nodes,    * these names are used in the RowResolver and are different from the    * external column names) that are needed in the subtree. These columns    * eventually have to be selected from the table scan.    *    * @param curOp The root of the operator subtree.    * @param child The consumer.    * @return a list of field nodes representing the internal column names.    */
specifier|public
name|List
argument_list|<
name|FieldNode
argument_list|>
name|genColLists
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|curOp
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|curOp
operator|.
name|getChildOperators
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|child
operator|instanceof
name|CommonJoinOperator
condition|)
block|{
name|int
name|tag
init|=
name|child
operator|.
name|getParentOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|curOp
argument_list|)
decl_stmt|;
return|return
name|joinPrunedColLists
operator|.
name|get
argument_list|(
name|child
argument_list|)
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|tag
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|prunedColLists
operator|.
name|get
argument_list|(
name|child
argument_list|)
return|;
block|}
block|}
comment|/**    * Creates the list of internal column names (represented by field nodes)    * from select expressions in a select operator. This function is used for the    * select operator instead of the genColLists function (which is used by    * the rest of the operators).    *    * @param op The select operator.    * @return a list of field nodes representing the internal column names.    */
specifier|public
name|List
argument_list|<
name|FieldNode
argument_list|>
name|getColsFromSelectExpr
parameter_list|(
name|SelectOperator
name|op
parameter_list|)
block|{
name|List
argument_list|<
name|FieldNode
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|SelectDesc
name|conf
init|=
name|op
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|isSelStarNoCompute
argument_list|()
condition|)
block|{
for|for
control|(
name|ColumnInfo
name|colInfo
range|:
name|op
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
control|)
block|{
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldNode
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|exprList
init|=
name|conf
operator|.
name|getColList
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|exprList
control|)
block|{
name|cols
operator|=
name|mergeFieldNodesWithDesc
argument_list|(
name|cols
argument_list|,
name|expr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cols
return|;
block|}
comment|/**    * Creates the list of internal column names for select * expressions.    *    * @param op The select operator.    * @param colList The list of internal column names (represented by field nodes)    *                returned by the children of the select operator.    * @return a list of field nodes representing the internal column names.    */
specifier|public
name|List
argument_list|<
name|FieldNode
argument_list|>
name|getSelectColsFromChildren
parameter_list|(
name|SelectOperator
name|op
parameter_list|,
name|List
argument_list|<
name|FieldNode
argument_list|>
name|colList
parameter_list|)
block|{
name|List
argument_list|<
name|FieldNode
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|SelectDesc
name|conf
init|=
name|op
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|colList
operator|!=
literal|null
operator|&&
name|conf
operator|.
name|isSelStarNoCompute
argument_list|()
condition|)
block|{
name|cols
operator|.
name|addAll
argument_list|(
name|colList
argument_list|)
expr_stmt|;
return|return
name|cols
return|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|selectExprs
init|=
name|conf
operator|.
name|getColList
argument_list|()
decl_stmt|;
comment|// The colList is the output columns used by child operators, they are
comment|// different
comment|// from input columns of the current operator. we need to find out which
comment|// input columns are used.
name|List
argument_list|<
name|String
argument_list|>
name|outputColumnNames
init|=
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputColumnNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|colList
operator|==
literal|null
condition|)
block|{
name|cols
operator|=
name|mergeFieldNodesWithDesc
argument_list|(
name|cols
argument_list|,
name|selectExprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FieldNode
name|childFn
init|=
name|lookupColumn
argument_list|(
name|colList
argument_list|,
name|outputColumnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|childFn
operator|!=
literal|null
condition|)
block|{
comment|// In SemanticAnalyzer we inject SEL op before aggregation. The columns
comment|// in this SEL are derived from the table schema, and do not reflect the
comment|// actual columns being selected in the current query.
comment|// In this case, we skip the merge and just use the path from the child ops.
name|ExprNodeDesc
name|desc
init|=
name|selectExprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|instanceof
name|ExprNodeColumnDesc
operator|&&
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|desc
operator|)
operator|.
name|getIsGenerated
argument_list|()
condition|)
block|{
name|FieldNode
name|fn
init|=
operator|new
name|FieldNode
argument_list|(
operator|(
operator|(
name|ExprNodeColumnDesc
operator|)
name|desc
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|fn
operator|.
name|setNodes
argument_list|(
name|childFn
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|cols
operator|=
name|mergeFieldNodes
argument_list|(
name|cols
argument_list|,
name|fn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cols
operator|=
name|mergeFieldNodesWithDesc
argument_list|(
name|cols
argument_list|,
name|selectExprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|cols
return|;
block|}
comment|/**    * Given the 'desc', construct a list of field nodes representing the    * nested columns paths referenced by this 'desc'.    * @param desc the node descriptor    * @return a list of nested column paths referenced in the 'desc'    */
specifier|private
specifier|static
name|List
argument_list|<
name|FieldNode
argument_list|>
name|getNestedColPathByDesc
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
name|List
argument_list|<
name|FieldNode
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|getNestedColsFromExprNodeDesc
argument_list|(
name|desc
argument_list|,
literal|null
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return
name|mergeFieldNodes
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldNode
argument_list|>
argument_list|()
argument_list|,
name|res
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|getNestedColsFromExprNodeDesc
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|,
name|FieldNode
name|pathToRoot
parameter_list|,
name|List
argument_list|<
name|FieldNode
argument_list|>
name|paths
parameter_list|)
block|{
if|if
condition|(
name|desc
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
name|ExprNodeColumnDesc
name|columnDesc
init|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|desc
decl_stmt|;
name|FieldNode
name|p
init|=
operator|new
name|FieldNode
argument_list|(
name|columnDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|checkListAndMap
argument_list|(
name|columnDesc
argument_list|,
name|pathToRoot
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|desc
operator|instanceof
name|ExprNodeFieldDesc
condition|)
block|{
name|ExprNodeFieldDesc
name|fieldDesc
init|=
operator|(
name|ExprNodeFieldDesc
operator|)
name|desc
decl_stmt|;
name|ExprNodeDesc
name|childDesc
init|=
name|fieldDesc
operator|.
name|getDesc
argument_list|()
decl_stmt|;
name|FieldNode
name|p
init|=
operator|new
name|FieldNode
argument_list|(
name|fieldDesc
operator|.
name|getFieldName
argument_list|()
argument_list|)
decl_stmt|;
name|checkListAndMap
argument_list|(
name|fieldDesc
argument_list|,
name|pathToRoot
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|getNestedColsFromExprNodeDesc
argument_list|(
name|childDesc
argument_list|,
name|p
argument_list|,
name|paths
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|desc
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExprNodeDesc
name|c
range|:
name|children
control|)
block|{
name|getNestedColsFromExprNodeDesc
argument_list|(
name|c
argument_list|,
name|pathToRoot
argument_list|,
name|paths
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|checkListAndMap
parameter_list|(
name|ExprNodeDesc
name|desc
parameter_list|,
name|FieldNode
name|pathToRoot
parameter_list|,
name|FieldNode
name|fn
parameter_list|)
block|{
name|TypeInfo
name|ti
init|=
name|desc
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
comment|// Check cases for arr[i].f and map[key].v
comment|// For these we should not generate paths like arr.f or map.v
comment|// Otherwise we would have a mismatch between type info and path
if|if
condition|(
name|ti
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|LIST
operator|&&
name|ti
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|MAP
condition|)
block|{
name|fn
operator|.
name|addFieldNodes
argument_list|(
name|pathToRoot
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create the list of internal columns for select tag of LV    */
specifier|public
name|List
argument_list|<
name|FieldNode
argument_list|>
name|getSelectColsFromLVJoin
parameter_list|(
name|RowSchema
name|rs
parameter_list|,
name|List
argument_list|<
name|FieldNode
argument_list|>
name|colList
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|FieldNode
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldNode
name|col
range|:
name|colList
control|)
block|{
if|if
condition|(
name|rs
operator|.
name|getColumnInfo
argument_list|(
name|col
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|columns
return|;
block|}
comment|/**    * If the input filter operator has direct child(ren) which are union operator,    * and the filter's column is not the same as union's    * create select operator between them. The select operator has same number of columns as    * pruned child operator.    *    * @param curOp    *          The filter operator which need to handle children.    * @throws SemanticException    */
specifier|public
name|void
name|handleFilterUnionChildren
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|curOp
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|curOp
operator|.
name|getChildOperators
argument_list|()
operator|==
literal|null
operator|||
operator|!
operator|(
name|curOp
operator|instanceof
name|FilterOperator
operator|)
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|FieldNode
argument_list|>
name|parentPrunList
init|=
name|prunedColLists
operator|.
name|get
argument_list|(
name|curOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentPrunList
operator|==
literal|null
operator|||
name|parentPrunList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|FieldNode
argument_list|>
name|prunList
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
range|:
name|curOp
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|UnionOperator
condition|)
block|{
name|prunList
operator|=
name|genColLists
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|prunList
operator|==
literal|null
operator|||
name|prunList
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|parentPrunList
operator|.
name|size
argument_list|()
operator|==
name|prunList
operator|.
name|size
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|exprs
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|outputRS
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|colInfo
range|:
name|child
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
control|)
block|{
if|if
condition|(
name|lookupColumn
argument_list|(
name|prunList
argument_list|,
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|ExprNodeDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|colInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
name|exprs
operator|.
name|add
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|outputColNames
operator|.
name|add
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnInfo
name|newCol
init|=
operator|new
name|ColumnInfo
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|,
name|colInfo
operator|.
name|isHiddenVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
name|newCol
operator|.
name|setAlias
argument_list|(
name|colInfo
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|outputRS
operator|.
name|add
argument_list|(
name|newCol
argument_list|)
expr_stmt|;
name|colExprMap
operator|.
name|put
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|colDesc
argument_list|)
expr_stmt|;
block|}
name|SelectDesc
name|select
init|=
operator|new
name|SelectDesc
argument_list|(
name|exprs
argument_list|,
name|outputColNames
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|curOp
operator|.
name|removeChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|SelectOperator
name|sel
init|=
operator|(
name|SelectOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|select
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|outputRS
argument_list|)
argument_list|,
name|curOp
argument_list|)
decl_stmt|;
name|OperatorFactory
operator|.
name|makeChild
argument_list|(
name|sel
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|sel
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|toColumnNames
parameter_list|(
name|List
argument_list|<
name|FieldNode
argument_list|>
name|columns
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldNode
name|fn
range|:
name|columns
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|fn
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
specifier|static
name|List
argument_list|<
name|FieldNode
argument_list|>
name|fromColumnNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
parameter_list|)
block|{
name|List
argument_list|<
name|FieldNode
argument_list|>
name|fieldNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cn
range|:
name|columnNames
control|)
block|{
name|fieldNodes
operator|.
name|add
argument_list|(
operator|new
name|FieldNode
argument_list|(
name|cn
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|fieldNodes
return|;
block|}
specifier|static
name|FieldNode
name|lookupColumn
parameter_list|(
name|Collection
argument_list|<
name|FieldNode
argument_list|>
name|columns
parameter_list|,
name|String
name|colName
parameter_list|)
block|{
for|for
control|(
name|FieldNode
name|fn
range|:
name|columns
control|)
block|{
if|if
condition|(
name|fn
operator|.
name|getFieldName
argument_list|()
operator|!=
literal|null
operator|&&
name|fn
operator|.
name|getFieldName
argument_list|()
operator|.
name|equals
argument_list|(
name|colName
argument_list|)
condition|)
block|{
return|return
name|fn
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|static
name|List
argument_list|<
name|FieldNode
argument_list|>
name|mergeFieldNodesWithDesc
parameter_list|(
name|List
argument_list|<
name|FieldNode
argument_list|>
name|left
parameter_list|,
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
return|return
name|FieldNode
operator|.
name|mergeFieldNodes
argument_list|(
name|left
argument_list|,
name|getNestedColPathByDesc
argument_list|(
name|desc
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

