begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|CommonJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|RowSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UnionOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_comment
comment|/**  * This class implements the processor context for Column Pruner.  */
end_comment

begin_class
specifier|public
class|class
name|ColumnPrunerProcCtx
implements|implements
name|NodeProcessorCtx
block|{
specifier|private
specifier|final
name|ParseContext
name|pctx
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|prunedColLists
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|CommonJoinOperator
argument_list|,
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|joinPrunedColLists
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|UnionOperator
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|unionPrunedColLists
decl_stmt|;
specifier|public
name|ColumnPrunerProcCtx
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
block|{
name|this
operator|.
name|pctx
operator|=
name|pctx
expr_stmt|;
name|prunedColLists
operator|=
operator|new
name|HashMap
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|joinPrunedColLists
operator|=
operator|new
name|HashMap
argument_list|<
name|CommonJoinOperator
argument_list|,
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|unionPrunedColLists
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ParseContext
name|getParseContext
parameter_list|()
block|{
return|return
name|pctx
return|;
block|}
specifier|public
name|Map
argument_list|<
name|CommonJoinOperator
argument_list|,
name|Map
argument_list|<
name|Byte
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|getJoinPrunedColLists
parameter_list|()
block|{
return|return
name|joinPrunedColLists
return|;
block|}
specifier|public
name|Map
argument_list|<
name|UnionOperator
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|getUnionPrunedColLists
parameter_list|()
block|{
return|return
name|unionPrunedColLists
return|;
block|}
comment|/**    * @return the prunedColLists    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPrunedColList
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
block|{
return|return
name|prunedColLists
operator|.
name|get
argument_list|(
name|op
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getPrunedColLists
parameter_list|()
block|{
return|return
name|prunedColLists
return|;
block|}
comment|/**    * Creates the list of internal column names(these names are used in the    * RowResolver and are different from the external column names) that are    * needed in the subtree. These columns eventually have to be selected from    * the table scan.    *    * @param curOp    *          The root of the operator subtree.    * @return List<String> of the internal column names.    * @throws SemanticException    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|genColLists
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|curOp
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|curOp
operator|.
name|getChildOperators
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|colList
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
range|:
name|curOp
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|prunList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|CommonJoinOperator
condition|)
block|{
name|int
name|tag
init|=
name|child
operator|.
name|getParentOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|curOp
argument_list|)
decl_stmt|;
name|prunList
operator|=
name|joinPrunedColLists
operator|.
name|get
argument_list|(
name|child
argument_list|)
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|tag
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child
operator|instanceof
name|UnionOperator
condition|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|positions
init|=
name|unionPrunedColLists
operator|.
name|get
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|positions
operator|!=
literal|null
operator|&&
name|positions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|prunList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|RowSchema
name|oldRS
init|=
name|curOp
operator|.
name|getSchema
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|pos
range|:
name|positions
control|)
block|{
name|ColumnInfo
name|colInfo
init|=
name|oldRS
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|prunList
operator|.
name|add
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|prunList
operator|=
name|prunedColLists
operator|.
name|get
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prunList
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|colList
operator|==
literal|null
condition|)
block|{
name|colList
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|prunList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|colList
operator|=
name|Utilities
operator|.
name|mergeUniqElems
argument_list|(
name|colList
argument_list|,
name|prunList
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|colList
return|;
block|}
comment|/**    * Creates the list of internal column names(these names are used in the    * RowResolver and are different from the external column names) that are    * needed in the subtree. These columns eventually have to be selected from    * the table scan.    *    * @param curOp    *          The root of the operator subtree.    * @param child    *          The consumer.    * @return List<String> of the internal column names.    * @throws SemanticException    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|genColLists
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|curOp
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|curOp
operator|.
name|getChildOperators
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|child
operator|instanceof
name|CommonJoinOperator
condition|)
block|{
name|int
name|tag
init|=
name|child
operator|.
name|getParentOperators
argument_list|()
operator|.
name|indexOf
argument_list|(
name|curOp
argument_list|)
decl_stmt|;
return|return
name|joinPrunedColLists
operator|.
name|get
argument_list|(
name|child
argument_list|)
operator|.
name|get
argument_list|(
operator|(
name|byte
operator|)
name|tag
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|child
operator|instanceof
name|UnionOperator
condition|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|positions
init|=
name|unionPrunedColLists
operator|.
name|get
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|prunList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|positions
operator|!=
literal|null
operator|&&
name|positions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|RowSchema
name|oldRS
init|=
name|curOp
operator|.
name|getSchema
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|pos
range|:
name|positions
control|)
block|{
name|ColumnInfo
name|colInfo
init|=
name|oldRS
operator|.
name|getSignature
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|prunList
operator|.
name|add
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|prunList
return|;
block|}
else|else
block|{
return|return
name|prunedColLists
operator|.
name|get
argument_list|(
name|child
argument_list|)
return|;
block|}
block|}
comment|/**    * Creates the list of internal column names from select expressions in a    * select operator. This function is used for the select operator instead of    * the genColLists function (which is used by the rest of the operators).    *    * @param op    *          The select operator.    * @return List<String> of the internal column names.    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getColsFromSelectExpr
parameter_list|(
name|SelectOperator
name|op
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|SelectDesc
name|conf
init|=
name|op
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|isSelStarNoCompute
argument_list|()
condition|)
block|{
for|for
control|(
name|ColumnInfo
name|colInfo
range|:
name|op
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
control|)
block|{
name|cols
operator|.
name|add
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|exprList
init|=
name|conf
operator|.
name|getColList
argument_list|()
decl_stmt|;
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|exprList
control|)
block|{
name|cols
operator|=
name|Utilities
operator|.
name|mergeUniqElems
argument_list|(
name|cols
argument_list|,
name|expr
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cols
return|;
block|}
comment|/**    * Creates the list of internal column names for select * expressions.    *    * @param op    *          The select operator.    * @param colList    *          The list of internal column names returned by the children of the    *          select operator.    * @return List<String> of the internal column names.    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSelectColsFromChildren
parameter_list|(
name|SelectOperator
name|op
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colList
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|SelectDesc
name|conf
init|=
name|op
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|colList
operator|!=
literal|null
operator|&&
name|conf
operator|.
name|isSelStarNoCompute
argument_list|()
condition|)
block|{
name|cols
operator|.
name|addAll
argument_list|(
name|colList
argument_list|)
expr_stmt|;
return|return
name|cols
return|;
block|}
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|selectExprs
init|=
name|conf
operator|.
name|getColList
argument_list|()
decl_stmt|;
comment|// The colList is the output columns used by child operators, they are
comment|// different
comment|// from input columns of the current operator. we need to find out which
comment|// input columns are used.
name|List
argument_list|<
name|String
argument_list|>
name|outputColumnNames
init|=
name|conf
operator|.
name|getOutputColumnNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputColumnNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|colList
operator|==
literal|null
operator|||
name|colList
operator|.
name|contains
argument_list|(
name|outputColumnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|ExprNodeDesc
name|expr
init|=
name|selectExprs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|cols
operator|=
name|Utilities
operator|.
name|mergeUniqElems
argument_list|(
name|cols
argument_list|,
name|expr
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cols
return|;
block|}
comment|/**    * Create the list of internal columns for select tag of LV    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSelectColsFromLVJoin
parameter_list|(
name|RowSchema
name|rs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colList
parameter_list|)
throws|throws
name|SemanticException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|col
range|:
name|colList
control|)
block|{
if|if
condition|(
name|rs
operator|.
name|getColumnInfo
argument_list|(
name|col
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|columns
return|;
block|}
comment|/**    * If the input filter operator has direct child(ren) which are union operator,    * and the filter's column is not the same as union's    * create select operator between them. The select operator has same number of columns as    * pruned child operator.    *    * @param curOp    *          The filter operator which need to handle children.    * @throws SemanticException    */
specifier|public
name|void
name|handleFilterUnionChildren
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|curOp
parameter_list|)
throws|throws
name|SemanticException
block|{
if|if
condition|(
name|curOp
operator|.
name|getChildOperators
argument_list|()
operator|==
literal|null
operator|||
operator|!
operator|(
name|curOp
operator|instanceof
name|FilterOperator
operator|)
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|parentPrunList
init|=
name|prunedColLists
operator|.
name|get
argument_list|(
name|curOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentPrunList
operator|==
literal|null
operator|||
name|parentPrunList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|FilterOperator
name|filOp
init|=
operator|(
name|FilterOperator
operator|)
name|curOp
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|prunList
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
index|[]
name|childToParentIndex
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
range|:
name|curOp
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|UnionOperator
condition|)
block|{
name|prunList
operator|=
name|genColLists
argument_list|(
name|curOp
argument_list|,
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|prunList
operator|==
literal|null
operator|||
name|prunList
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|parentPrunList
operator|.
name|size
argument_list|()
operator|==
name|prunList
operator|.
name|size
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|exprs
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
name|colExprMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
name|outputRS
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnInfo
name|colInfo
range|:
name|child
operator|.
name|getSchema
argument_list|()
operator|.
name|getSignature
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|prunList
operator|.
name|contains
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ExprNodeDesc
name|colDesc
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|colInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
name|exprs
operator|.
name|add
argument_list|(
name|colDesc
argument_list|)
expr_stmt|;
name|outputColNames
operator|.
name|add
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnInfo
name|newCol
init|=
operator|new
name|ColumnInfo
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getTabAlias
argument_list|()
argument_list|,
name|colInfo
operator|.
name|getIsVirtualCol
argument_list|()
argument_list|,
name|colInfo
operator|.
name|isHiddenVirtualCol
argument_list|()
argument_list|)
decl_stmt|;
name|newCol
operator|.
name|setAlias
argument_list|(
name|colInfo
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|outputRS
operator|.
name|add
argument_list|(
name|newCol
argument_list|)
expr_stmt|;
name|colExprMap
operator|.
name|put
argument_list|(
name|colInfo
operator|.
name|getInternalName
argument_list|()
argument_list|,
name|colDesc
argument_list|)
expr_stmt|;
block|}
name|SelectDesc
name|select
init|=
operator|new
name|SelectDesc
argument_list|(
name|exprs
argument_list|,
name|outputColNames
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|curOp
operator|.
name|removeChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|SelectOperator
name|sel
init|=
operator|(
name|SelectOperator
operator|)
name|OperatorFactory
operator|.
name|getAndMakeChild
argument_list|(
name|select
argument_list|,
operator|new
name|RowSchema
argument_list|(
name|outputRS
argument_list|)
argument_list|,
name|curOp
argument_list|)
decl_stmt|;
name|OperatorFactory
operator|.
name|makeChild
argument_list|(
name|sel
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|sel
operator|.
name|setColumnExprMap
argument_list|(
name|colExprMap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

