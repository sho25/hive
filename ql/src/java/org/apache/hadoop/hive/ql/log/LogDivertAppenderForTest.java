begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LogEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|RandomAccessFileAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|routing
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|routing
operator|.
name|Routes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|routing
operator|.
name|RoutingAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|LoggerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|plugins
operator|.
name|PluginFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|plugins
operator|.
name|processor
operator|.
name|PluginEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|plugins
operator|.
name|util
operator|.
name|PluginType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|filter
operator|.
name|AbstractFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|layout
operator|.
name|PatternLayout
import|;
end_import

begin_comment
comment|/**  * Divert appender to redirect and filter test operation logs to match the output of the original  * CLI qtest results.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|LogDivertAppenderForTest
block|{
specifier|private
name|LogDivertAppenderForTest
parameter_list|()
block|{
comment|// Prevent instantiation
block|}
comment|/**    * A log filter that filters test messages coming from the logger.    */
annotation|@
name|Plugin
argument_list|(
name|name
operator|=
literal|"TestFilter"
argument_list|,
name|category
operator|=
literal|"Core"
argument_list|,
name|elementType
operator|=
literal|"filter"
argument_list|,
name|printObject
operator|=
literal|true
argument_list|)
specifier|private
specifier|static
class|class
name|TestFilter
extends|extends
name|AbstractFilter
block|{
annotation|@
name|Override
specifier|public
name|Result
name|filter
parameter_list|(
name|LogEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
operator|&&
literal|"SessionState"
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getLoggerName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|getMessage
argument_list|()
operator|.
name|getFormattedMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"PREHOOK:"
argument_list|)
operator|||
name|event
operator|.
name|getMessage
argument_list|()
operator|.
name|getFormattedMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"POSTHOOK:"
argument_list|)
operator|||
name|event
operator|.
name|getMessage
argument_list|()
operator|.
name|getFormattedMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"unix_timestamp(void)"
argument_list|)
operator|||
name|event
operator|.
name|getMessage
argument_list|()
operator|.
name|getFormattedMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Warning: "
argument_list|)
condition|)
block|{
return|return
name|Result
operator|.
name|ACCEPT
return|;
block|}
block|}
return|return
name|Result
operator|.
name|DENY
return|;
block|}
annotation|@
name|PluginFactory
specifier|public
specifier|static
name|TestFilter
name|createFilter
parameter_list|()
block|{
return|return
operator|new
name|TestFilter
argument_list|()
return|;
block|}
block|}
comment|/**    * If the HIVE_IN_TEST is set, then programmatically register a routing appender to Log4J    * configuration, which automatically writes the test log of each query to an individual file.    * The equivalent property configuration is as follows:    *  # queryId based routing file appender       appender.test-query-routing.type = Routing       appender.test-query-routing.name = test-query-routing       appender.test-query-routing.routes.type = Routes       appender.test-query-routing.routes.pattern = $${ctx:queryId}       # default route       appender.test-query-routing.routes.test-route-default.type = Route       appender.test-query-routing.routes.test-route-default.key = $${ctx:queryId}       appender.test-query-routing.routes.test-route-default.app.type = NullAppender       appender.test-query-routing.routes.test-route-default.app.name = test-null-appender       # queryId based route       appender.test-query-routing.routes.test-route-mdc.type = Route       appender.test-query-routing.routes.test-route-mdc.name = test-query-routing       appender.test-query-routing.routes.test-route-mdc.app.type = RandomAccessFile       appender.test-query-routing.routes.test-route-mdc.app.name = test-query-file-appender       appender.test-query-routing.routes.test-route-mdc.app.fileName = ${sys:hive.log.dir}/${ctx:sessionId}/${ctx:queryId}.test       appender.test-query-routing.routes.test-route-mdc.app.layout.type = PatternLayout       appender.test-query-routing.routes.test-route-mdc.app.layout.pattern = %d{ISO8601} %5p %c{2}: %m%n       appender.test-query-routing.routes.test-route-mdc.app.filter.type = TestFilter    * @param conf the configuration for HiveServer2 instance    */
specifier|public
specifier|static
name|void
name|registerRoutingAppenderIfInTest
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
operator|.
name|varname
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
operator|.
name|defaultBoolVal
argument_list|)
condition|)
block|{
comment|// If not in test mode, then do no create the appender
return|return;
block|}
name|String
name|logLocation
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_LOGGING_OPERATION_LOG_LOCATION
argument_list|)
decl_stmt|;
comment|// Create test-null-appender to drop events without queryId
name|PluginEntry
name|nullAppenderEntry
init|=
operator|new
name|PluginEntry
argument_list|()
decl_stmt|;
name|nullAppenderEntry
operator|.
name|setClassName
argument_list|(
name|NullAppender
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|PluginType
argument_list|<
name|NullAppender
argument_list|>
name|nullAppenderType
init|=
operator|new
name|PluginType
argument_list|<
name|NullAppender
argument_list|>
argument_list|(
name|nullAppenderEntry
argument_list|,
name|NullAppender
operator|.
name|class
argument_list|,
literal|"appender"
argument_list|)
decl_stmt|;
name|Node
name|nullAppenderChildNode
init|=
operator|new
name|Node
argument_list|(
literal|null
argument_list|,
literal|"test-null-appender"
argument_list|,
name|nullAppenderType
argument_list|)
decl_stmt|;
comment|// Create default route where events go without queryId
name|PluginEntry
name|defaultRouteEntry
init|=
operator|new
name|PluginEntry
argument_list|()
decl_stmt|;
name|defaultRouteEntry
operator|.
name|setClassName
argument_list|(
name|Route
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|PluginType
argument_list|<
name|Route
argument_list|>
name|defaultRouteType
init|=
operator|new
name|PluginType
argument_list|<
name|Route
argument_list|>
argument_list|(
name|defaultRouteEntry
argument_list|,
name|Route
operator|.
name|class
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Node
name|defaultRouteNode
init|=
operator|new
name|Node
argument_list|(
literal|null
argument_list|,
literal|"test-route-default"
argument_list|,
name|defaultRouteType
argument_list|)
decl_stmt|;
comment|// Add the test-null-appender to the default route
name|defaultRouteNode
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|nullAppenderChildNode
argument_list|)
expr_stmt|;
comment|// Create queryId based route
name|PluginEntry
name|queryIdRouteEntry
init|=
operator|new
name|PluginEntry
argument_list|()
decl_stmt|;
name|queryIdRouteEntry
operator|.
name|setClassName
argument_list|(
name|Route
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|PluginType
argument_list|<
name|Route
argument_list|>
name|queryIdRouteType
init|=
operator|new
name|PluginType
argument_list|<
name|Route
argument_list|>
argument_list|(
name|queryIdRouteEntry
argument_list|,
name|Route
operator|.
name|class
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Node
name|queryIdRouteNode
init|=
operator|new
name|Node
argument_list|(
literal|null
argument_list|,
literal|"test-route-mdc"
argument_list|,
name|queryIdRouteType
argument_list|)
decl_stmt|;
comment|// Create the queryId appender for the queryId route
name|PluginEntry
name|queryIdAppenderEntry
init|=
operator|new
name|PluginEntry
argument_list|()
decl_stmt|;
name|queryIdAppenderEntry
operator|.
name|setClassName
argument_list|(
name|RandomAccessFileAppender
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|PluginType
argument_list|<
name|RandomAccessFileAppender
argument_list|>
name|queryIdAppenderType
init|=
operator|new
name|PluginType
argument_list|<
name|RandomAccessFileAppender
argument_list|>
argument_list|(
name|queryIdAppenderEntry
argument_list|,
name|RandomAccessFileAppender
operator|.
name|class
argument_list|,
literal|"appender"
argument_list|)
decl_stmt|;
name|Node
name|queryIdAppenderNode
init|=
operator|new
name|Node
argument_list|(
name|queryIdRouteNode
argument_list|,
literal|"test-query-file-appender"
argument_list|,
name|queryIdAppenderType
argument_list|)
decl_stmt|;
name|queryIdAppenderNode
operator|.
name|getAttributes
argument_list|()
operator|.
name|put
argument_list|(
literal|"fileName"
argument_list|,
name|logLocation
operator|+
literal|"/${ctx:sessionId}/${ctx:queryId}.test"
argument_list|)
expr_stmt|;
name|queryIdAppenderNode
operator|.
name|getAttributes
argument_list|()
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"test-query-file-appender"
argument_list|)
expr_stmt|;
comment|// Add the queryId appender to the queryId based route
name|queryIdRouteNode
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|queryIdAppenderNode
argument_list|)
expr_stmt|;
comment|// Create the filter for the queryId appender
name|PluginEntry
name|filterEntry
init|=
operator|new
name|PluginEntry
argument_list|()
decl_stmt|;
name|filterEntry
operator|.
name|setClassName
argument_list|(
name|TestFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|PluginType
argument_list|<
name|TestFilter
argument_list|>
name|filterType
init|=
operator|new
name|PluginType
argument_list|<
name|TestFilter
argument_list|>
argument_list|(
name|filterEntry
argument_list|,
name|TestFilter
operator|.
name|class
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Node
name|filterNode
init|=
operator|new
name|Node
argument_list|(
name|queryIdAppenderNode
argument_list|,
literal|"test-filter"
argument_list|,
name|filterType
argument_list|)
decl_stmt|;
comment|// Add the filter to the queryId appender
name|queryIdAppenderNode
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|filterNode
argument_list|)
expr_stmt|;
comment|// Create the layout for the queryId appender
name|PluginEntry
name|layoutEntry
init|=
operator|new
name|PluginEntry
argument_list|()
decl_stmt|;
name|layoutEntry
operator|.
name|setClassName
argument_list|(
name|PatternLayout
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|PluginType
argument_list|<
name|PatternLayout
argument_list|>
name|layoutType
init|=
operator|new
name|PluginType
argument_list|<
name|PatternLayout
argument_list|>
argument_list|(
name|layoutEntry
argument_list|,
name|PatternLayout
operator|.
name|class
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Node
name|layoutNode
init|=
operator|new
name|Node
argument_list|(
name|queryIdAppenderNode
argument_list|,
literal|"PatternLayout"
argument_list|,
name|layoutType
argument_list|)
decl_stmt|;
name|layoutNode
operator|.
name|getAttributes
argument_list|()
operator|.
name|put
argument_list|(
literal|"pattern"
argument_list|,
name|LogDivertAppender
operator|.
name|nonVerboseLayout
argument_list|)
expr_stmt|;
comment|// Add the layout to the queryId appender
name|queryIdAppenderNode
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|layoutNode
argument_list|)
expr_stmt|;
comment|// Create the route objects based on the Nodes
name|Route
name|defaultRoute
init|=
name|Route
operator|.
name|createRoute
argument_list|(
literal|null
argument_list|,
literal|"${ctx:queryId}"
argument_list|,
name|defaultRouteNode
argument_list|)
decl_stmt|;
name|Route
name|mdcRoute
init|=
name|Route
operator|.
name|createRoute
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|queryIdRouteNode
argument_list|)
decl_stmt|;
comment|// Create the routes group
name|Routes
name|routes
init|=
name|Routes
operator|.
name|createRoutes
argument_list|(
literal|"${ctx:queryId}"
argument_list|,
name|defaultRoute
argument_list|,
name|mdcRoute
argument_list|)
decl_stmt|;
name|LoggerContext
name|context
init|=
operator|(
name|LoggerContext
operator|)
name|LogManager
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Create the appender
name|RoutingAppender
name|routingAppender
init|=
name|RoutingAppender
operator|.
name|createAppender
argument_list|(
literal|"test-query-routing"
argument_list|,
literal|"true"
argument_list|,
name|routes
argument_list|,
name|configuration
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LoggerConfig
name|loggerConfig
init|=
name|configuration
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|loggerConfig
operator|.
name|addAppender
argument_list|(
name|routingAppender
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|updateLoggers
argument_list|()
expr_stmt|;
name|routingAppender
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

