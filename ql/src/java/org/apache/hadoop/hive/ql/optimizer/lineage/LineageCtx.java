begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|lineage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|LineageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|LineageInfo
operator|.
name|BaseColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|LineageInfo
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|LineageInfo
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_comment
comment|/**  * This class contains the lineage context that is passed  * while walking the operator tree in Lineage. The context  * contains the LineageInfo structure that is passed to the  * pre-execution hooks.  */
end_comment

begin_class
specifier|public
class|class
name|LineageCtx
implements|implements
name|NodeProcessorCtx
block|{
specifier|public
specifier|static
class|class
name|Index
implements|implements
name|Serializable
block|{
comment|/**      * The map contains an index from the (operator, columnInfo) to the      * dependency vector for that tuple. This is used to generate the      * dependency vectors during the walk of the operator tree.      */
specifier|private
specifier|final
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|Map
argument_list|<
name|ColumnInfo
argument_list|,
name|Dependency
argument_list|>
argument_list|>
name|depMap
decl_stmt|;
comment|/**      * A map from operator to the conditions strings.      */
specifier|private
specifier|final
name|Map
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|Set
argument_list|<
name|Predicate
argument_list|>
argument_list|>
name|condMap
decl_stmt|;
comment|/**      * A map from a final select operator id to the select operator      * and the corresponding target table in case an insert into query.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|SelectOperator
argument_list|,
name|Table
argument_list|>
argument_list|>
name|finalSelectOps
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|Index
parameter_list|()
block|{
name|depMap
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|Map
argument_list|<
name|ColumnInfo
argument_list|,
name|Dependency
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|condMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|Set
argument_list|<
name|Predicate
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|finalSelectOps
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|SelectOperator
argument_list|,
name|Table
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Gets the dependency for an operator, columninfo tuple.      * @param op The operator whose dependency is being inspected.      * @param col The column info whose dependency is being inspected.      * @return Dependency for that particular operator, columninfo tuple.      *         null if no dependency is found.      */
specifier|public
name|Dependency
name|getDependency
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|,
name|ColumnInfo
name|col
parameter_list|)
block|{
name|Map
argument_list|<
name|ColumnInfo
argument_list|,
name|Dependency
argument_list|>
name|colMap
init|=
name|depMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|colMap
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|colMap
operator|.
name|get
argument_list|(
name|col
argument_list|)
return|;
block|}
comment|/**      * Gets the dependency for a tuple of an operator,      * and a ColumnInfo with specified internal name.      *      * @param op The operator whose dependency is being inspected.      * @param internalName The internal name of the column info      * @return Dependency for that particular operator, ColumnInfo tuple.      *         null if no dependency is found.      */
specifier|public
name|Dependency
name|getDependency
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|,
name|String
name|internalName
parameter_list|)
block|{
name|Map
argument_list|<
name|ColumnInfo
argument_list|,
name|Dependency
argument_list|>
name|colMap
init|=
name|depMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|colMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ColumnInfo
argument_list|,
name|Dependency
argument_list|>
name|e
range|:
name|colMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getInternalName
argument_list|()
operator|.
name|equals
argument_list|(
name|internalName
argument_list|)
condition|)
block|{
return|return
name|e
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Puts the dependency for an operator, columninfo tuple.      * @param op The operator whose dependency is being inserted.      * @param col The column info whose dependency is being inserted.      * @param dep The dependency.      */
specifier|public
name|void
name|putDependency
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|,
name|ColumnInfo
name|col
parameter_list|,
name|Dependency
name|dep
parameter_list|)
block|{
name|Map
argument_list|<
name|ColumnInfo
argument_list|,
name|Dependency
argument_list|>
name|colMap
init|=
name|depMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|colMap
operator|==
literal|null
condition|)
block|{
name|colMap
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|ColumnInfo
argument_list|,
name|Dependency
argument_list|>
argument_list|()
expr_stmt|;
name|depMap
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|colMap
argument_list|)
expr_stmt|;
block|}
name|colMap
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|dep
argument_list|)
expr_stmt|;
block|}
comment|/**      * Merges the new dependencies in dep to the existing dependencies      * of (op, ci).      *      * @param op The operator of the column whose dependency is being modified.      * @param ci The column info of the associated column.      * @param dep The new dependency.      */
specifier|public
name|void
name|mergeDependency
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|,
name|ColumnInfo
name|ci
parameter_list|,
name|Dependency
name|dep
parameter_list|)
block|{
name|Dependency
name|old_dep
init|=
name|getDependency
argument_list|(
name|op
argument_list|,
name|ci
argument_list|)
decl_stmt|;
if|if
condition|(
name|old_dep
operator|==
literal|null
condition|)
block|{
name|putDependency
argument_list|(
name|op
argument_list|,
name|ci
argument_list|,
name|dep
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LineageInfo
operator|.
name|DependencyType
name|new_type
init|=
name|LineageCtx
operator|.
name|getNewDependencyType
argument_list|(
name|old_dep
operator|.
name|getType
argument_list|()
argument_list|,
name|LineageInfo
operator|.
name|DependencyType
operator|.
name|EXPRESSION
argument_list|)
decl_stmt|;
name|old_dep
operator|.
name|setType
argument_list|(
name|new_type
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|BaseColumnInfo
argument_list|>
name|bci_set
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|BaseColumnInfo
argument_list|>
argument_list|(
name|old_dep
operator|.
name|getBaseCols
argument_list|()
argument_list|)
decl_stmt|;
name|bci_set
operator|.
name|addAll
argument_list|(
name|dep
operator|.
name|getBaseCols
argument_list|()
argument_list|)
expr_stmt|;
name|old_dep
operator|.
name|setBaseCols
argument_list|(
name|bci_set
argument_list|)
expr_stmt|;
comment|// TODO: Fix the expressions later.
name|old_dep
operator|.
name|setExpr
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|ColumnInfo
argument_list|,
name|Dependency
argument_list|>
name|getDependencies
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
block|{
return|return
name|depMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
return|;
block|}
specifier|public
name|void
name|addPredicate
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|,
name|Predicate
name|cond
parameter_list|)
block|{
name|Set
argument_list|<
name|Predicate
argument_list|>
name|conds
init|=
name|condMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|conds
operator|==
literal|null
condition|)
block|{
name|conds
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|Predicate
argument_list|>
argument_list|()
expr_stmt|;
name|condMap
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|conds
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Predicate
name|p
range|:
name|conds
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|equals
argument_list|(
name|cond
operator|.
name|getExpr
argument_list|()
argument_list|,
name|p
operator|.
name|getExpr
argument_list|()
argument_list|)
condition|)
block|{
name|p
operator|.
name|getBaseCols
argument_list|()
operator|.
name|addAll
argument_list|(
name|cond
operator|.
name|getBaseCols
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|conds
operator|.
name|add
argument_list|(
name|cond
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|copyPredicates
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|srcOp
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|tgtOp
parameter_list|)
block|{
name|Set
argument_list|<
name|Predicate
argument_list|>
name|conds
init|=
name|getPredicates
argument_list|(
name|srcOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|conds
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Predicate
name|cond
range|:
name|conds
control|)
block|{
name|addPredicate
argument_list|(
name|tgtOp
argument_list|,
name|cond
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Set
argument_list|<
name|Predicate
argument_list|>
name|getPredicates
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
block|{
return|return
name|condMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
return|;
block|}
specifier|public
name|void
name|addFinalSelectOp
parameter_list|(
name|SelectOperator
name|sop
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|sinkOp
parameter_list|)
block|{
name|String
name|operatorId
init|=
name|sop
operator|.
name|getOperatorId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|finalSelectOps
operator|.
name|containsKey
argument_list|(
name|operatorId
argument_list|)
condition|)
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sinkOp
operator|instanceof
name|FileSinkOperator
condition|)
block|{
name|FileSinkOperator
name|fso
init|=
operator|(
name|FileSinkOperator
operator|)
name|sinkOp
decl_stmt|;
name|table
operator|=
name|fso
operator|.
name|getConf
argument_list|()
operator|.
name|getTable
argument_list|()
expr_stmt|;
block|}
name|finalSelectOps
operator|.
name|put
argument_list|(
name|operatorId
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|sop
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|SelectOperator
argument_list|,
name|Table
argument_list|>
argument_list|>
name|getFinalSelectOps
parameter_list|()
block|{
return|return
name|finalSelectOps
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|finalSelectOps
operator|.
name|clear
argument_list|()
expr_stmt|;
name|depMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|condMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * The map contains an index from the (operator, columnInfo) to the    * dependency vector for that tuple. This is used to generate the    * dependency vectors during the walk of the operator tree.    */
specifier|private
specifier|final
name|Index
name|index
decl_stmt|;
comment|/**    * Parse context to get to the table metadata information.    */
specifier|private
specifier|final
name|ParseContext
name|pctx
decl_stmt|;
comment|/**    * Constructor.    *    * @param pctx The parse context that is used to get table metadata information.    * @param index The dependency map.    */
specifier|public
name|LineageCtx
parameter_list|(
name|ParseContext
name|pctx
parameter_list|,
name|Index
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|pctx
operator|=
name|pctx
expr_stmt|;
block|}
comment|/**    * Gets the parse context.    *    * @return ParseContext    */
specifier|public
name|ParseContext
name|getParseCtx
parameter_list|()
block|{
return|return
name|pctx
return|;
block|}
comment|/**    * Gets the dependency index.    *    * @return Index    */
specifier|public
name|Index
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
comment|/**    * Gets the new dependency type by comparing the old dependency type and the    * current dependency type. The current dependency type is the dependency imposed    * by the current expression. Typically the dependency type is computed using    * the following rules:    *    SCRIPT - In case anywhere in the lineage tree there was a script operator, otherwise    *    EXPRESSION - In case anywhere in the lineage tree a union,    *                 udf, udaf or udtf was done, otherwise    *    SIMPLE - This captures direct column copies.    *    * @param old_type The old dependency type.    * @param curr_type The current operators dependency type.    * @return the dependency type    */
specifier|public
specifier|static
name|LineageInfo
operator|.
name|DependencyType
name|getNewDependencyType
parameter_list|(
name|LineageInfo
operator|.
name|DependencyType
name|old_type
parameter_list|,
name|LineageInfo
operator|.
name|DependencyType
name|curr_type
parameter_list|)
block|{
if|if
condition|(
name|old_type
operator|==
name|LineageInfo
operator|.
name|DependencyType
operator|.
name|SCRIPT
operator|||
name|curr_type
operator|==
name|LineageInfo
operator|.
name|DependencyType
operator|.
name|SCRIPT
condition|)
block|{
return|return
name|LineageInfo
operator|.
name|DependencyType
operator|.
name|SCRIPT
return|;
block|}
if|if
condition|(
name|old_type
operator|==
name|LineageInfo
operator|.
name|DependencyType
operator|.
name|EXPRESSION
operator|||
name|curr_type
operator|==
name|LineageInfo
operator|.
name|DependencyType
operator|.
name|EXPRESSION
condition|)
block|{
return|return
name|LineageInfo
operator|.
name|DependencyType
operator|.
name|EXPRESSION
return|;
block|}
return|return
name|LineageInfo
operator|.
name|DependencyType
operator|.
name|SIMPLE
return|;
block|}
block|}
end_class

end_unit

