begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|io
operator|.
name|HiveIOExceptionHandlerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_comment
comment|/**  * BucketizedHiveRecordReader is a wrapper on a list of RecordReader. It behaves  * similar as HiveRecordReader while it wraps a list of RecordReader from one  * file.  */
end_comment

begin_class
specifier|public
class|class
name|BucketizedHiveRecordReader
parameter_list|<
name|K
extends|extends
name|WritableComparable
parameter_list|,
name|V
extends|extends
name|Writable
parameter_list|>
extends|extends
name|HiveContextAwareRecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|protected
specifier|final
name|BucketizedHiveInputSplit
name|split
decl_stmt|;
specifier|protected
specifier|final
name|InputFormat
name|inputFormat
decl_stmt|;
specifier|protected
specifier|final
name|Reporter
name|reporter
decl_stmt|;
specifier|protected
name|long
name|progress
decl_stmt|;
specifier|protected
name|int
name|idx
decl_stmt|;
specifier|public
name|BucketizedHiveRecordReader
parameter_list|(
name|InputFormat
name|inputFormat
parameter_list|,
name|BucketizedHiveInputSplit
name|bucketizedSplit
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|this
operator|.
name|split
operator|=
name|bucketizedSplit
expr_stmt|;
name|this
operator|.
name|inputFormat
operator|=
name|inputFormat
expr_stmt|;
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
name|initNextRecordReader
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|recordReader
operator|!=
literal|null
condition|)
block|{
name|recordReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|recordReader
operator|=
literal|null
expr_stmt|;
block|}
name|idx
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|K
name|createKey
parameter_list|()
block|{
return|return
operator|(
name|K
operator|)
name|recordReader
operator|.
name|createKey
argument_list|()
return|;
block|}
specifier|public
name|V
name|createValue
parameter_list|()
block|{
return|return
operator|(
name|V
operator|)
name|recordReader
operator|.
name|createValue
argument_list|()
return|;
block|}
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|recordReader
operator|!=
literal|null
condition|)
block|{
return|return
name|recordReader
operator|.
name|getPos
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
comment|// The calculation is strongly dependent on the assumption that all splits
comment|// came from the same file
return|return
name|Math
operator|.
name|min
argument_list|(
literal|1.0f
argument_list|,
operator|(
operator|(
name|recordReader
operator|==
literal|null
operator|||
name|this
operator|.
name|getIOContext
argument_list|()
operator|.
name|isBinarySearching
argument_list|()
operator|)
condition|?
name|progress
else|:
name|recordReader
operator|.
name|getPos
argument_list|()
operator|)
operator|/
call|(
name|float
call|)
argument_list|(
name|split
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|doNext
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|(
name|recordReader
operator|==
literal|null
operator|)
operator|||
operator|!
name|doNextWithExceptionHandler
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|initNextRecordReader
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|doNextWithExceptionHandler
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|doNext
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**    * Get the record reader for the next chunk in this    * BucketizedHiveRecordReader.    */
specifier|protected
name|boolean
name|initNextRecordReader
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|recordReader
operator|!=
literal|null
condition|)
block|{
name|recordReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|recordReader
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|progress
operator|+=
name|split
operator|.
name|getLength
argument_list|(
name|idx
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// done processing so far
block|}
block|}
comment|// if all chunks have been processed, nothing more to do.
if|if
condition|(
name|idx
operator|==
name|split
operator|.
name|getNumSplits
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// get a record reader for the idx-th chunk
try|try
block|{
name|recordReader
operator|=
name|inputFormat
operator|.
name|getRecordReader
argument_list|(
name|split
operator|.
name|getSplit
argument_list|(
name|idx
argument_list|)
argument_list|,
name|jobConf
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|recordReader
operator|=
name|HiveIOExceptionHandlerUtil
operator|.
name|handleRecordReaderCreationException
argument_list|(
name|e
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
block|}
comment|// if we're performing a binary search, we need to restart it
if|if
condition|(
name|isSorted
condition|)
block|{
name|initIOContextSortedProps
argument_list|(
operator|(
name|FileSplit
operator|)
name|split
operator|.
name|getSplit
argument_list|(
name|idx
argument_list|)
argument_list|,
name|recordReader
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

