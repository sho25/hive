begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|correlation
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEOPTREDUCEDEDUPLICATIONMINREDUCER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESCRIPTOPERATORTRUST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPSIDEAGGREGATE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FileSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|abstract
class|class
name|AbstractCorrelationProcCtx
implements|implements
name|NodeProcessorCtx
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractCorrelationProcCtx
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ParseContext
name|pctx
decl_stmt|;
comment|// For queries using script, the optimization cannot be applied without user's confirmation
comment|// If script preserves alias and value for columns related to keys, user can set this true
specifier|private
specifier|final
name|boolean
name|trustScript
decl_stmt|;
comment|// This is min number of reducer for deduped RS to avoid query executed on
comment|// too small number of reducers. For example, queries GroupBy+OrderBy can be executed by
comment|// only one reducer if this configuration does not prevents
specifier|private
specifier|final
name|int
name|minReducer
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|removedOps
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isMapAggr
decl_stmt|;
specifier|public
name|AbstractCorrelationProcCtx
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
block|{
name|removedOps
operator|=
operator|new
name|HashSet
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|trustScript
operator|=
name|pctx
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HIVESCRIPTOPERATORTRUST
argument_list|)
expr_stmt|;
if|if
condition|(
name|pctx
operator|.
name|hasAcidWrite
argument_list|()
condition|)
block|{
name|StringBuilder
name|tblNames
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|FileSinkDesc
name|fsd
range|:
name|pctx
operator|.
name|getAcidSinks
argument_list|()
control|)
block|{
if|if
condition|(
name|fsd
operator|.
name|getTable
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tblNames
operator|.
name|append
argument_list|(
name|fsd
operator|.
name|getTable
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|fsd
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tblNames
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tblNames
operator|.
name|setLength
argument_list|(
name|tblNames
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//traling ','
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Overriding "
operator|+
name|HIVEOPTREDUCEDEDUPLICATIONMINREDUCER
operator|+
literal|" to 1 due to a write to transactional table(s) "
operator|+
name|tblNames
argument_list|)
expr_stmt|;
name|minReducer
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|minReducer
operator|=
name|pctx
operator|.
name|getConf
argument_list|()
operator|.
name|getIntVar
argument_list|(
name|HIVEOPTREDUCEDEDUPLICATIONMINREDUCER
argument_list|)
expr_stmt|;
block|}
name|isMapAggr
operator|=
name|pctx
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolVar
argument_list|(
name|HIVEMAPSIDEAGGREGATE
argument_list|)
expr_stmt|;
name|this
operator|.
name|pctx
operator|=
name|pctx
expr_stmt|;
block|}
specifier|public
name|ParseContext
name|getPctx
parameter_list|()
block|{
return|return
name|pctx
return|;
block|}
specifier|public
name|void
name|setPctx
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
block|{
name|this
operator|.
name|pctx
operator|=
name|pctx
expr_stmt|;
block|}
specifier|public
name|boolean
name|trustScript
parameter_list|()
block|{
return|return
name|trustScript
return|;
block|}
specifier|public
name|int
name|minReducer
parameter_list|()
block|{
return|return
name|minReducer
return|;
block|}
specifier|public
name|boolean
name|hasBeenRemoved
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|rsOp
parameter_list|)
block|{
return|return
name|removedOps
operator|.
name|contains
argument_list|(
name|rsOp
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|addRemovedOperator
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|rsOp
parameter_list|)
block|{
return|return
name|removedOps
operator|.
name|add
argument_list|(
name|rsOp
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isMapAggr
parameter_list|()
block|{
return|return
name|isMapAggr
return|;
block|}
block|}
end_class

end_unit

