begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|CallSite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|LambdaMetafactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ReflectUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ReflectUtil
operator|.
name|MethodDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ReflectiveVisitor
import|;
end_import

begin_comment
comment|/**  * Static utilities for Java reflection. This is based on Calcite  * {@link ReflectUtil}. It contains methods to wrap a Calcite dispatcher  * (based on reflection) into a Hive dispatcher as well as a Hive  * dispatcher implementation based on {@link LambdaMetafactory}.  */
end_comment

begin_class
specifier|public
class|class
name|HiveReflectUtil
block|{
comment|/**    * Creates a Hive dispatcher that wraps a Calcite one.    */
specifier|protected
specifier|static
parameter_list|<
name|T
parameter_list|,
name|E
parameter_list|>
name|MethodDispatcherWrapper
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
name|createCalciteMethodDispatcherWrapper
parameter_list|(
specifier|final
name|MethodDispatcher
argument_list|<
name|T
argument_list|>
name|methodDispatcher
parameter_list|)
block|{
return|return
operator|new
name|MethodDispatcherWrapper
argument_list|<>
argument_list|(
name|methodDispatcher
argument_list|)
return|;
block|}
comment|/**    * Creates a dispatcher for calls to a single multi-method on a particular    * object.    *    *<p>Calls to that multi-method are resolved by looking for a method on    * the runtime type of that object, with the required name, and with    * the correct type or a subclass for the first argument, and precisely the    * same types for other arguments.    *    *<p>For instance, a dispatcher created for the method    *    *<blockquote>String foo(Vehicle, int, List)</blockquote>    *    *<p>could be used to call the methods    *    *<blockquote>String foo(Car, int, List)<br>    * String foo(Bus, int, List)</blockquote>    *    *<p>(because Car and Bus are subclasses of Vehicle, and they occur in the    * polymorphic first argument) but not the method    *    *<blockquote>String foo(Car, int, ArrayList)</blockquote>    *    *<p>(only the first argument is polymorphic).    *    *<p>You must create an implementation of the method for the base class.    * Otherwise throws {@link IllegalArgumentException}.    *    * @param returnClazz     Return type of method    * @param visitor         Object on which to invoke the method    * @param methodName      Name of method    * @param arg0Clazz       Base type of argument zero    * @param otherArgClasses Types of remaining arguments    */
specifier|protected
specifier|static
parameter_list|<
name|E
parameter_list|,
name|T
parameter_list|>
name|HiveMethodDispatcher
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
name|createMethodDispatcher
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|returnClazz
parameter_list|,
specifier|final
name|ReflectiveVisitor
name|visitor
parameter_list|,
specifier|final
name|String
name|methodName
parameter_list|,
specifier|final
name|Class
argument_list|<
name|E
argument_list|>
name|arg0Clazz
parameter_list|,
specifier|final
name|Class
modifier|...
name|otherArgClasses
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Class
argument_list|>
name|otherArgClassList
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|otherArgClasses
argument_list|)
decl_stmt|;
specifier|final
name|VisitDispatcher
argument_list|<
name|ReflectiveVisitor
argument_list|,
name|E
argument_list|>
name|dispatcher
init|=
name|createDispatcher
argument_list|(
operator|(
name|Class
argument_list|<
name|ReflectiveVisitor
argument_list|>
operator|)
name|visitor
operator|.
name|getClass
argument_list|()
argument_list|,
name|arg0Clazz
argument_list|)
decl_stmt|;
return|return
operator|new
name|HiveMethodDispatcher
argument_list|<>
argument_list|(
name|dispatcher
argument_list|,
name|returnClazz
argument_list|,
name|visitor
argument_list|,
name|methodName
argument_list|,
name|arg0Clazz
argument_list|,
name|otherArgClassList
argument_list|)
return|;
block|}
comment|/**    * Creates a dispatcher for calls to {@link VisitDispatcher#lookupVisitFunc}. The    * dispatcher caches methods between invocations and it is thread-safe.    *    * @param visitorBaseClazz Visitor base class    * @param visiteeBaseClazz Visitee base class    * @return cache of methods    */
specifier|private
specifier|static
parameter_list|<
name|R
extends|extends
name|ReflectiveVisitor
parameter_list|,
name|E
parameter_list|>
name|VisitDispatcher
argument_list|<
name|R
argument_list|,
name|E
argument_list|>
name|createDispatcher
parameter_list|(
specifier|final
name|Class
argument_list|<
name|R
argument_list|>
name|visitorBaseClazz
parameter_list|,
specifier|final
name|Class
argument_list|<
name|E
argument_list|>
name|visiteeBaseClazz
parameter_list|)
block|{
assert|assert
name|ReflectiveVisitor
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|visitorBaseClazz
argument_list|)
assert|;
assert|assert
name|Object
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|visiteeBaseClazz
argument_list|)
assert|;
return|return
operator|new
name|VisitDispatcher
argument_list|<>
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|VarArgsFunc
argument_list|>
name|getVarArgsFuncClass
parameter_list|(
name|int
name|length
parameter_list|)
block|{
switch|switch
condition|(
name|length
condition|)
block|{
case|case
literal|1
case|:
return|return
name|VarArgsFunc1
operator|.
name|class
return|;
case|case
literal|2
case|:
return|return
name|VarArgsFunc2
operator|.
name|class
return|;
case|case
literal|3
case|:
return|return
name|VarArgsFunc3
operator|.
name|class
return|;
case|case
literal|4
case|:
return|return
name|VarArgsFunc4
operator|.
name|class
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported function with length "
operator|+
name|length
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|VarArgsFunc
name|getVarArgsFunc
parameter_list|(
name|int
name|length
parameter_list|,
name|CallSite
name|site
parameter_list|)
throws|throws
name|Throwable
block|{
switch|switch
condition|(
name|length
condition|)
block|{
case|case
literal|1
case|:
return|return
operator|(
name|VarArgsFunc1
operator|)
name|site
operator|.
name|getTarget
argument_list|()
operator|.
name|invokeExact
argument_list|()
return|;
case|case
literal|2
case|:
return|return
operator|(
name|VarArgsFunc2
operator|)
name|site
operator|.
name|getTarget
argument_list|()
operator|.
name|invokeExact
argument_list|()
return|;
case|case
literal|3
case|:
return|return
operator|(
name|VarArgsFunc3
operator|)
name|site
operator|.
name|getTarget
argument_list|()
operator|.
name|invokeExact
argument_list|()
return|;
case|case
literal|4
case|:
return|return
operator|(
name|VarArgsFunc4
operator|)
name|site
operator|.
name|getTarget
argument_list|()
operator|.
name|invokeExact
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported function with length "
operator|+
name|length
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|VisitDispatcher
parameter_list|<
name|R
extends|extends
name|ReflectiveVisitor
parameter_list|,
name|E
parameter_list|>
block|{
specifier|final
name|Map
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|,
name|VarArgsFunc
argument_list|>
name|map
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|VarArgsFunc
name|lookupVisitFunc
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|R
argument_list|>
name|visitorClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|visiteeClass
parameter_list|,
name|String
name|visitMethodName
parameter_list|,
name|List
argument_list|<
name|Class
argument_list|>
name|additionalParameterTypes
parameter_list|)
throws|throws
name|Throwable
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|key
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|visitorClass
argument_list|,
name|visiteeClass
argument_list|,
name|visitMethodName
argument_list|,
name|additionalParameterTypes
argument_list|)
decl_stmt|;
name|VarArgsFunc
name|method
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// We already looked for the method and found nothing.
block|}
else|else
block|{
name|Method
name|method1
init|=
name|ReflectUtil
operator|.
name|lookupVisitMethod
argument_list|(
name|visitorClass
argument_list|,
name|visiteeClass
argument_list|,
name|visitMethodName
argument_list|,
name|additionalParameterTypes
argument_list|)
decl_stmt|;
name|MethodHandles
operator|.
name|Lookup
name|lookup
init|=
name|MethodHandles
operator|.
name|lookup
argument_list|()
decl_stmt|;
name|MethodHandle
name|methodHandle
init|=
name|lookup
operator|.
name|unreflect
argument_list|(
name|method1
argument_list|)
decl_stmt|;
name|int
name|argsLength
init|=
literal|1
operator|+
name|method1
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
decl_stmt|;
name|MethodType
name|invokedType
init|=
name|MethodType
operator|.
name|methodType
argument_list|(
name|getVarArgsFuncClass
argument_list|(
name|argsLength
argument_list|)
argument_list|)
decl_stmt|;
name|MethodType
name|functionMethodType
init|=
name|MethodType
operator|.
name|methodType
argument_list|(
name|method1
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|visitorClass
argument_list|,
name|method1
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
decl_stmt|;
name|CallSite
name|site
init|=
name|LambdaMetafactory
operator|.
name|metafactory
argument_list|(
name|lookup
argument_list|,
literal|"apply"
argument_list|,
name|invokedType
argument_list|,
name|functionMethodType
operator|.
name|generic
argument_list|()
argument_list|,
name|methodHandle
argument_list|,
name|methodHandle
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
name|method
operator|=
name|getVarArgsFunc
argument_list|(
name|argsLength
argument_list|,
name|site
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|method
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|HiveMethodDispatcher
parameter_list|<
name|T
parameter_list|,
name|E
parameter_list|>
implements|implements
name|ClassMethodDispatcher
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
block|{
specifier|private
specifier|final
name|VisitDispatcher
argument_list|<
name|ReflectiveVisitor
argument_list|,
name|E
argument_list|>
name|dispatcher
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|returnClazz
decl_stmt|;
specifier|private
specifier|final
name|ReflectiveVisitor
name|visitor
decl_stmt|;
specifier|private
specifier|final
name|String
name|methodName
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|E
argument_list|>
name|arg0Clazz
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Class
argument_list|>
name|otherArgClassList
decl_stmt|;
specifier|public
name|HiveMethodDispatcher
parameter_list|(
specifier|final
name|VisitDispatcher
argument_list|<
name|ReflectiveVisitor
argument_list|,
name|E
argument_list|>
name|dispatcher
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|returnClazz
parameter_list|,
specifier|final
name|ReflectiveVisitor
name|visitor
parameter_list|,
specifier|final
name|String
name|methodName
parameter_list|,
specifier|final
name|Class
argument_list|<
name|E
argument_list|>
name|arg0Clazz
parameter_list|,
specifier|final
name|List
argument_list|<
name|Class
argument_list|>
name|otherArgClassList
parameter_list|)
block|{
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
name|this
operator|.
name|returnClazz
operator|=
name|returnClazz
expr_stmt|;
name|this
operator|.
name|visitor
operator|=
name|visitor
expr_stmt|;
name|this
operator|.
name|methodName
operator|=
name|methodName
expr_stmt|;
name|this
operator|.
name|arg0Clazz
operator|=
name|arg0Clazz
expr_stmt|;
name|this
operator|.
name|otherArgClassList
operator|=
name|otherArgClassList
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|invoke
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|VarArgsFunc
name|method
init|=
literal|null
decl_stmt|;
try|try
block|{
name|method
operator|=
name|lookupVisitFunc
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|o
init|=
name|method
operator|.
name|apply
argument_list|(
name|visitor
argument_list|,
name|args
index|[
literal|0
index|]
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
return|return
name|returnClazz
operator|.
name|cast
argument_list|(
name|o
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"While invoking method "
operator|+
operator|(
name|method
operator|!=
literal|null
condition|?
literal|"'"
operator|+
name|method
operator|+
literal|"'"
else|:
literal|""
operator|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|VarArgsFunc
name|lookupVisitFunc
parameter_list|(
specifier|final
name|Object
name|arg0
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
operator|!
name|arg0Clazz
operator|.
name|isInstance
argument_list|(
name|arg0
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|VarArgsFunc
name|method
init|=
name|dispatcher
operator|.
name|lookupVisitFunc
argument_list|(
name|visitor
operator|.
name|getClass
argument_list|()
argument_list|,
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|E
argument_list|>
operator|)
name|arg0
operator|.
name|getClass
argument_list|()
argument_list|,
name|methodName
argument_list|,
name|otherArgClassList
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|Class
argument_list|>
name|classList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|classList
operator|.
name|add
argument_list|(
name|arg0Clazz
argument_list|)
expr_stmt|;
name|classList
operator|.
name|addAll
argument_list|(
name|otherArgClassList
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Method not found: "
operator|+
name|methodName
operator|+
literal|"("
operator|+
name|classList
operator|+
literal|")"
argument_list|)
throw|;
block|}
return|return
name|method
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|register
parameter_list|(
name|Iterable
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|E
argument_list|>
argument_list|>
name|classes
parameter_list|)
throws|throws
name|Throwable
block|{
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|c
range|:
name|classes
control|)
block|{
name|VarArgsFunc
name|method
init|=
name|dispatcher
operator|.
name|lookupVisitFunc
argument_list|(
name|visitor
operator|.
name|getClass
argument_list|()
argument_list|,
name|c
argument_list|,
name|methodName
argument_list|,
name|otherArgClassList
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|Class
argument_list|>
name|classList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|classList
operator|.
name|add
argument_list|(
name|arg0Clazz
argument_list|)
expr_stmt|;
name|classList
operator|.
name|addAll
argument_list|(
name|otherArgClassList
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Method not found: "
operator|+
name|methodName
operator|+
literal|"("
operator|+
name|classList
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|MethodDispatcherWrapper
parameter_list|<
name|T
parameter_list|,
name|E
parameter_list|>
implements|implements
name|ClassMethodDispatcher
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
block|{
specifier|private
specifier|final
name|MethodDispatcher
argument_list|<
name|T
argument_list|>
name|methodDispatcher
decl_stmt|;
specifier|public
name|MethodDispatcherWrapper
parameter_list|(
specifier|final
name|MethodDispatcher
argument_list|<
name|T
argument_list|>
name|methodDispatcher
parameter_list|)
block|{
name|this
operator|.
name|methodDispatcher
operator|=
name|methodDispatcher
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|invoke
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|this
operator|.
name|methodDispatcher
operator|.
name|invoke
argument_list|(
name|args
argument_list|)
return|;
block|}
block|}
specifier|public
interface|interface
name|ClassMethodDispatcher
parameter_list|<
name|T
parameter_list|,
name|E
parameter_list|>
extends|extends
name|MethodDispatcher
argument_list|<
name|T
argument_list|>
block|{
specifier|default
name|void
name|register
parameter_list|(
name|Iterable
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|E
argument_list|>
argument_list|>
name|classes
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Do nothing by default
block|}
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|VarArgsFunc1
parameter_list|<
name|T
parameter_list|,
name|R
parameter_list|>
extends|extends
name|VarArgsFunc
argument_list|<
name|R
argument_list|>
block|{
specifier|default
name|R
name|apply
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|apply
argument_list|(
operator|(
name|T
operator|)
name|args
index|[
literal|0
index|]
argument_list|)
return|;
block|}
name|R
name|apply
parameter_list|(
name|T
name|t
parameter_list|)
function_decl|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|VarArgsFunc2
parameter_list|<
name|T
parameter_list|,
name|U
parameter_list|,
name|R
parameter_list|>
extends|extends
name|VarArgsFunc
argument_list|<
name|R
argument_list|>
block|{
specifier|default
name|R
name|apply
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|apply
argument_list|(
operator|(
name|T
operator|)
name|args
index|[
literal|0
index|]
argument_list|,
operator|(
name|U
operator|)
name|args
index|[
literal|1
index|]
argument_list|)
return|;
block|}
name|R
name|apply
parameter_list|(
name|T
name|t
parameter_list|,
name|U
name|u
parameter_list|)
function_decl|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|VarArgsFunc3
parameter_list|<
name|T
parameter_list|,
name|U
parameter_list|,
name|V
parameter_list|,
name|R
parameter_list|>
extends|extends
name|VarArgsFunc
argument_list|<
name|R
argument_list|>
block|{
specifier|default
name|R
name|apply
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|apply
argument_list|(
operator|(
name|T
operator|)
name|args
index|[
literal|0
index|]
argument_list|,
operator|(
name|U
operator|)
name|args
index|[
literal|1
index|]
argument_list|,
operator|(
name|V
operator|)
name|args
index|[
literal|2
index|]
argument_list|)
return|;
block|}
name|R
name|apply
parameter_list|(
name|T
name|t
parameter_list|,
name|U
name|u
parameter_list|,
name|V
name|v
parameter_list|)
function_decl|;
block|}
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|VarArgsFunc4
parameter_list|<
name|T
parameter_list|,
name|U
parameter_list|,
name|V
parameter_list|,
name|W
parameter_list|,
name|R
parameter_list|>
extends|extends
name|VarArgsFunc
argument_list|<
name|R
argument_list|>
block|{
specifier|default
name|R
name|apply
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|apply
argument_list|(
operator|(
name|T
operator|)
name|args
index|[
literal|0
index|]
argument_list|,
operator|(
name|U
operator|)
name|args
index|[
literal|1
index|]
argument_list|,
operator|(
name|V
operator|)
name|args
index|[
literal|2
index|]
argument_list|,
operator|(
name|W
operator|)
name|args
index|[
literal|3
index|]
argument_list|)
return|;
block|}
name|R
name|apply
parameter_list|(
name|T
name|t
parameter_list|,
name|U
name|u
parameter_list|,
name|V
name|v
parameter_list|,
name|W
name|w
parameter_list|)
function_decl|;
block|}
specifier|private
interface|interface
name|VarArgsFunc
parameter_list|<
name|R
parameter_list|>
block|{
specifier|default
name|R
name|apply
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

