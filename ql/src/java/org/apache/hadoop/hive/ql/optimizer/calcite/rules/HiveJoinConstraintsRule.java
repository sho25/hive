begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelReferentialConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Aggregate
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|TableScan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexOver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexPermuteInputsShuttle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexTableInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexTableInputRef
operator|.
name|RelTableRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|tools
operator|.
name|RelBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|ImmutableBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|MappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|mapping
operator|.
name|Mappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelOptUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The rule can perform two different optimizations.  * 1) Removes a join if is does not alter the cardinality of the one of its inputs.  * In particular, this rule is triggered if:  * - it is a join on PK-FK/UK-FK,  * - project on top only references columns from the FK side, and  * - PK/UK side is not filtered  * It optionally adds an IS NOT NULL filter if any FK column can be nullable  * 2) Transforms a left/right outer join into an inner join if:  * - it is a join on PK-FK/UK-FK,  * - FK is not nullable  * - PK/UK side is not filtered  */
end_comment

begin_class
specifier|public
class|class
name|HiveJoinConstraintsRule
extends|extends
name|RelOptRule
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveJoinConstraintsRule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|HiveJoinConstraintsRule
name|INSTANCE
init|=
operator|new
name|HiveJoinConstraintsRule
argument_list|(
name|HiveRelFactories
operator|.
name|HIVE_BUILDER
argument_list|)
decl_stmt|;
specifier|protected
name|HiveJoinConstraintsRule
parameter_list|(
name|RelBuilderFactory
name|relBuilder
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Project
operator|.
name|class
argument_list|,
name|some
argument_list|(
name|operand
argument_list|(
name|Join
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|relBuilder
argument_list|,
literal|"HiveJoinConstraintsRule"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Project
name|project
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|project
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|topProjExprs
init|=
name|project
operator|.
name|getChildExps
argument_list|()
decl_stmt|;
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|JoinRelType
name|joinType
init|=
name|join
operator|.
name|getJoinType
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|leftInput
init|=
name|join
operator|.
name|getLeft
argument_list|()
decl_stmt|;
specifier|final
name|RelNode
name|rightInput
init|=
name|join
operator|.
name|getRight
argument_list|()
decl_stmt|;
specifier|final
name|RexNode
name|cond
init|=
name|join
operator|.
name|getCondition
argument_list|()
decl_stmt|;
comment|// 1) If it is an inner, check whether project only uses columns from one side.
comment|// That side will need to be the FK side.
comment|// If it is a left outer, left will be the FK side.
comment|// If it is a right outer, right will be the FK side.
specifier|final
name|RelNode
name|fkInput
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|topRefs
init|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|topProjExprs
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|leftBits
init|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|leftInput
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableBitSet
name|rightBits
init|=
name|ImmutableBitSet
operator|.
name|range
argument_list|(
name|leftInput
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|join
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
decl_stmt|;
comment|// These boolean values represent corresponding left, right input which is potential FK
name|boolean
name|leftInputPotentialFK
init|=
name|topRefs
operator|.
name|intersects
argument_list|(
name|leftBits
argument_list|)
decl_stmt|;
name|boolean
name|rightInputPotentialFK
init|=
name|topRefs
operator|.
name|intersects
argument_list|(
name|rightBits
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftInputPotentialFK
operator|&&
name|rightInputPotentialFK
operator|&&
name|joinType
operator|==
name|JoinRelType
operator|.
name|INNER
condition|)
block|{
comment|// Both inputs are referenced. Before making a decision, try to swap
comment|// references in join condition if it is an inner join, i.e. if a join
comment|// condition column is referenced above the join, then we can just
comment|// reference the column from the other side.
comment|// For example, given two relations R(a1,a2), S(b1) :
comment|// SELECT a2, b1 FROM R, S ON R.a1=R.b1 =>
comment|// SELECT a2, a1 FROM R, S ON R.a1=R.b1
name|int
name|joinFieldCount
init|=
name|join
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
name|Mapping
name|mappingLR
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|PARTIAL_FUNCTION
argument_list|,
name|joinFieldCount
argument_list|,
name|joinFieldCount
argument_list|)
decl_stmt|;
name|Mapping
name|mappingRL
init|=
name|Mappings
operator|.
name|create
argument_list|(
name|MappingType
operator|.
name|PARTIAL_FUNCTION
argument_list|,
name|joinFieldCount
argument_list|,
name|joinFieldCount
argument_list|)
decl_stmt|;
for|for
control|(
name|RexNode
name|conj
range|:
name|RelOptUtil
operator|.
name|conjunctions
argument_list|(
name|cond
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|conj
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|EQUALS
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|RexCall
name|eq
init|=
operator|(
name|RexCall
operator|)
name|conj
decl_stmt|;
name|RexNode
name|op1
init|=
name|eq
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RexNode
name|op2
init|=
name|eq
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|op1
operator|instanceof
name|RexInputRef
operator|&&
name|op2
operator|instanceof
name|RexInputRef
condition|)
block|{
comment|// Check references
name|int
name|ref1
init|=
operator|(
operator|(
name|RexInputRef
operator|)
name|op1
operator|)
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|int
name|ref2
init|=
operator|(
operator|(
name|RexInputRef
operator|)
name|op2
operator|)
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|int
name|leftRef
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|rightRef
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|leftBits
operator|.
name|get
argument_list|(
name|ref1
argument_list|)
operator|&&
name|rightBits
operator|.
name|get
argument_list|(
name|ref2
argument_list|)
condition|)
block|{
name|leftRef
operator|=
name|ref1
expr_stmt|;
name|rightRef
operator|=
name|ref2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rightBits
operator|.
name|get
argument_list|(
name|ref1
argument_list|)
operator|&&
name|leftBits
operator|.
name|get
argument_list|(
name|ref2
argument_list|)
condition|)
block|{
name|leftRef
operator|=
name|ref2
expr_stmt|;
name|rightRef
operator|=
name|ref1
expr_stmt|;
block|}
if|if
condition|(
name|leftRef
operator|!=
operator|-
literal|1
operator|&&
name|rightRef
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// We do not add more than one mapping per source
comment|// as it is useless
if|if
condition|(
name|mappingLR
operator|.
name|getTargetOpt
argument_list|(
name|leftRef
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|mappingLR
operator|.
name|set
argument_list|(
name|leftRef
argument_list|,
name|rightRef
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mappingRL
operator|.
name|getTargetOpt
argument_list|(
name|rightRef
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|mappingRL
operator|.
name|set
argument_list|(
name|rightRef
argument_list|,
name|leftRef
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|mappingLR
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// First insert missing elements into the mapping as identity mappings
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|joinFieldCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|mappingLR
operator|.
name|getTargetOpt
argument_list|(
name|i
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|mappingLR
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mappingRL
operator|.
name|getTargetOpt
argument_list|(
name|i
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|mappingRL
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Then, we start by trying to reference only left side in top projections
name|List
argument_list|<
name|RexNode
argument_list|>
name|swappedTopProjExprs
init|=
name|topProjExprs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|projExpr
lambda|->
name|projExpr
operator|.
name|accept
argument_list|(
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|mappingRL
argument_list|,
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|rightInputPotentialFK
operator|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|swappedTopProjExprs
argument_list|,
literal|null
argument_list|)
operator|.
name|intersects
argument_list|(
name|rightBits
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rightInputPotentialFK
condition|)
block|{
name|topProjExprs
operator|=
name|swappedTopProjExprs
expr_stmt|;
block|}
else|else
block|{
comment|// If it did not work, we try to reference only right side in top projections
name|swappedTopProjExprs
operator|=
name|topProjExprs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|projExpr
lambda|->
name|projExpr
operator|.
name|accept
argument_list|(
operator|new
name|RexPermuteInputsShuttle
argument_list|(
name|mappingLR
argument_list|,
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|leftInputPotentialFK
operator|=
name|RelOptUtil
operator|.
name|InputFinder
operator|.
name|bits
argument_list|(
name|swappedTopProjExprs
argument_list|,
literal|null
argument_list|)
operator|.
name|intersects
argument_list|(
name|leftBits
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|leftInputPotentialFK
condition|)
block|{
name|topProjExprs
operator|=
name|swappedTopProjExprs
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|leftInputPotentialFK
operator|&&
operator|!
name|rightInputPotentialFK
condition|)
block|{
comment|// TODO: There are no references in the project operator above.
comment|// In this case, we should probably do two passes, one for
comment|// left as FK and one for right as FK, although it may be expensive.
comment|// Currently we only assume left as FK
name|leftInputPotentialFK
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|Mode
name|mode
decl_stmt|;
switch|switch
condition|(
name|joinType
condition|)
block|{
case|case
name|INNER
case|:
if|if
condition|(
name|leftInputPotentialFK
operator|&&
name|rightInputPotentialFK
condition|)
block|{
comment|// Bails out as it references columns from both sides (or no columns)
comment|// and there is nothing to transform
return|return;
block|}
name|fkInput
operator|=
name|leftInputPotentialFK
condition|?
name|leftInput
else|:
name|rightInput
expr_stmt|;
name|mode
operator|=
name|Mode
operator|.
name|REMOVE
expr_stmt|;
break|break;
case|case
name|LEFT
case|:
name|fkInput
operator|=
name|leftInput
expr_stmt|;
name|mode
operator|=
name|leftInputPotentialFK
operator|&&
operator|!
name|rightInputPotentialFK
condition|?
name|Mode
operator|.
name|REMOVE
else|:
name|Mode
operator|.
name|TRANSFORM
expr_stmt|;
break|break;
case|case
name|RIGHT
case|:
name|fkInput
operator|=
name|rightInput
expr_stmt|;
name|mode
operator|=
operator|!
name|leftInputPotentialFK
operator|&&
name|rightInputPotentialFK
condition|?
name|Mode
operator|.
name|REMOVE
else|:
name|Mode
operator|.
name|TRANSFORM
expr_stmt|;
break|break;
default|default:
comment|// Other type, bail out
return|return;
block|}
comment|// 2) Check whether this join can be rewritten or removed
name|Pair
argument_list|<
name|Boolean
argument_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
argument_list|>
name|r
init|=
name|HiveRelOptUtil
operator|.
name|isRewritablePKFKJoin
argument_list|(
name|call
operator|.
name|builder
argument_list|()
argument_list|,
name|join
argument_list|,
name|leftInput
operator|==
name|fkInput
argument_list|,
name|call
operator|.
name|getMetadataQuery
argument_list|()
argument_list|)
decl_stmt|;
comment|// 3) If it is the only condition, we can trigger the rewriting
if|if
condition|(
name|r
operator|.
name|left
condition|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|nullableNodes
init|=
name|r
operator|.
name|right
decl_stmt|;
comment|// If we reach here, we trigger the transform
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|REMOVE
condition|)
block|{
if|if
condition|(
name|rightInputPotentialFK
condition|)
block|{
comment|// First, if FK is the right input, we need to shift
name|nullableNodes
operator|=
name|nullableNodes
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|node
lambda|->
name|RexUtil
operator|.
name|shift
argument_list|(
name|node
argument_list|,
literal|0
argument_list|,
operator|-
name|leftInput
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|topProjExprs
operator|=
name|topProjExprs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|node
lambda|->
name|RexUtil
operator|.
name|shift
argument_list|(
name|node
argument_list|,
literal|0
argument_list|,
operator|-
name|leftInput
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Fix nullability in references to the input node
name|topProjExprs
operator|=
name|RexUtil
operator|.
name|fixUp
argument_list|(
name|rexBuilder
argument_list|,
name|topProjExprs
argument_list|,
name|RelOptUtil
operator|.
name|getFieldTypeList
argument_list|(
name|fkInput
operator|.
name|getRowType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Trigger transformation
if|if
condition|(
name|nullableNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|call
operator|.
name|transformTo
argument_list|(
name|call
operator|.
name|builder
argument_list|()
operator|.
name|push
argument_list|(
name|fkInput
argument_list|)
operator|.
name|project
argument_list|(
name|topProjExprs
argument_list|)
operator|.
name|convert
argument_list|(
name|project
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RexNode
name|newFilterCond
decl_stmt|;
if|if
condition|(
name|nullableNodes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|newFilterCond
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|nullableNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|isNotNullConds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|nullableNode
range|:
name|nullableNodes
control|)
block|{
name|isNotNullConds
operator|.
name|add
argument_list|(
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|nullableNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newFilterCond
operator|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|AND
argument_list|,
name|isNotNullConds
argument_list|)
expr_stmt|;
block|}
name|call
operator|.
name|transformTo
argument_list|(
name|call
operator|.
name|builder
argument_list|()
operator|.
name|push
argument_list|(
name|fkInput
argument_list|)
operator|.
name|filter
argument_list|(
name|newFilterCond
argument_list|)
operator|.
name|project
argument_list|(
name|topProjExprs
argument_list|)
operator|.
name|convert
argument_list|(
name|project
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Mode.TRANSFORM
comment|// Trigger transformation
name|call
operator|.
name|transformTo
argument_list|(
name|call
operator|.
name|builder
argument_list|()
operator|.
name|push
argument_list|(
name|leftInput
argument_list|)
operator|.
name|push
argument_list|(
name|rightInput
argument_list|)
operator|.
name|join
argument_list|(
name|JoinRelType
operator|.
name|INNER
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|)
operator|.
name|convert
argument_list|(
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
operator|.
name|getRowType
argument_list|()
argument_list|,
literal|false
argument_list|)
comment|// Preserve nullability
operator|.
name|project
argument_list|(
name|project
operator|.
name|getChildExps
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
enum|enum
name|Mode
block|{
comment|// Removes join operator from the plan
name|REMOVE
block|,
comment|// Transforms LEFT/RIGHT outer join into INNER join
name|TRANSFORM
block|}
block|}
end_class

end_unit

