begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|column
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|DDLOperationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AlterTableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ddl
operator|.
name|table
operator|.
name|AbstractAlterTableOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcSerde
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|parquet
operator|.
name|serde
operator|.
name|ParquetHiveSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|MetadataTypedColumnsetSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
operator|.
name|ColumnarSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|dynamic_type
operator|.
name|DynamicSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_comment
comment|/**  * Operation process of replacing two columns.  */
end_comment

begin_class
specifier|public
class|class
name|AlterTableReplaceColumnsOperation
extends|extends
name|AbstractAlterTableOperation
argument_list|<
name|AlterTableReplaceColumnsDesc
argument_list|>
block|{
specifier|public
name|AlterTableReplaceColumnsOperation
parameter_list|(
name|DDLOperationContext
name|context
parameter_list|,
name|AlterTableReplaceColumnsDesc
name|desc
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|VALID_SERIALIZATION_LIBS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|MetadataTypedColumnsetSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ColumnarSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|DynamicSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ParquetHiveSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|OrcSerde
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|doAlteration
parameter_list|(
name|Table
name|table
parameter_list|,
name|Partition
name|partition
parameter_list|)
throws|throws
name|HiveException
block|{
name|StorageDescriptor
name|sd
init|=
name|getStorageDescriptor
argument_list|(
name|table
argument_list|,
name|partition
argument_list|)
decl_stmt|;
comment|// change SerDe to LazySimpleSerDe if it is columnsetSerDe
name|String
name|serializationLib
init|=
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"org.apache.hadoop.hive.serde.thrift.columnsetSerDe"
operator|.
name|equals
argument_list|(
name|serializationLib
argument_list|)
condition|)
block|{
name|context
operator|.
name|getConsole
argument_list|()
operator|.
name|printInfo
argument_list|(
literal|"Replacing columns for columnsetSerDe and changing to LazySimpleSerDe"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|VALID_SERIALIZATION_LIBS
operator|.
name|contains
argument_list|(
name|serializationLib
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|CANNOT_REPLACE_COLUMNS
argument_list|,
name|desc
operator|.
name|getDbTableName
argument_list|()
argument_list|)
throw|;
block|}
comment|// adding columns and limited integer type promotion is not supported for ORC schema evolution
name|boolean
name|isOrcSchemaEvolution
init|=
name|serializationLib
operator|.
name|equals
argument_list|(
name|OrcSerde
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|AlterTableUtils
operator|.
name|isSchemaEvolutionEnabled
argument_list|(
name|table
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isOrcSchemaEvolution
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|existingCols
init|=
name|sd
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|replaceCols
init|=
name|desc
operator|.
name|getNewColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|replaceCols
operator|.
name|size
argument_list|()
operator|<
name|existingCols
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|REPLACE_CANNOT_DROP_COLUMNS
argument_list|,
name|desc
operator|.
name|getDbTableName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|boolean
name|droppingColumns
init|=
name|desc
operator|.
name|getNewColumns
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|sd
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|ParquetHiveSerDe
operator|.
name|isParquetTable
argument_list|(
name|table
argument_list|)
operator|&&
name|AlterTableUtils
operator|.
name|isSchemaEvolutionEnabled
argument_list|(
name|table
argument_list|,
name|context
operator|.
name|getConf
argument_list|()
argument_list|)
operator|&&
operator|!
name|desc
operator|.
name|isCascade
argument_list|()
operator|&&
name|droppingColumns
operator|&&
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot drop columns from a partitioned parquet table without the CASCADE option"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|ErrorMsg
operator|.
name|REPLACE_CANNOT_DROP_COLUMNS
argument_list|,
name|desc
operator|.
name|getDbTableName
argument_list|()
argument_list|)
throw|;
block|}
name|sd
operator|.
name|setCols
argument_list|(
name|desc
operator|.
name|getNewColumns
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

