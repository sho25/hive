begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ListSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|OperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|DelimitedJSONSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * For fetch task with operator tree, row read from FetchOperator is processed via operator tree  * and finally arrives to this operator.  */
end_comment

begin_class
specifier|public
class|class
name|ListSinkOperator
extends|extends
name|Operator
argument_list|<
name|ListSinkDesc
argument_list|>
block|{
specifier|private
specifier|transient
name|SerDe
name|mSerde
decl_stmt|;
specifier|private
specifier|transient
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
decl_stmt|;
specifier|private
specifier|transient
name|int
name|numRows
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|mSerde
operator|=
name|initializeSerde
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|initializeChildren
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|SerDe
name|initializeSerde
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|serdeName
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEFETCHOUTPUTSERDE
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|SerDe
argument_list|>
name|serdeClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|serdeName
argument_list|,
literal|true
argument_list|,
name|JavaUtils
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|SerDe
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// cast only needed for Hadoop 0.17 compatibility
name|SerDe
name|serde
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|serdeClass
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Properties
name|serdeProp
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// this is the default serialization format
if|if
condition|(
name|serde
operator|instanceof
name|DelimitedJSONSerDe
condition|)
block|{
name|serdeProp
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|""
operator|+
name|Utilities
operator|.
name|tabCode
argument_list|)
expr_stmt|;
name|serdeProp
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|,
name|getConf
argument_list|()
operator|.
name|getSerializationNullFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|serdeProp
argument_list|)
expr_stmt|;
return|return
name|serde
return|;
block|}
specifier|public
name|ListSinkOperator
name|initialize
parameter_list|(
name|SerDe
name|mSerde
parameter_list|)
block|{
name|this
operator|.
name|mSerde
operator|=
name|mSerde
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
parameter_list|)
block|{
name|this
operator|.
name|res
operator|=
name|res
expr_stmt|;
name|this
operator|.
name|numRows
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|int
name|getNumRows
parameter_list|()
block|{
return|return
name|numRows
return|;
block|}
specifier|public
name|void
name|processOp
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
name|res
operator|.
name|add
argument_list|(
name|mSerde
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|outputObjInspector
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|numRows
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|OperatorType
name|getType
parameter_list|()
block|{
return|return
name|OperatorType
operator|.
name|FORWARD
return|;
block|}
block|}
end_class

end_unit

