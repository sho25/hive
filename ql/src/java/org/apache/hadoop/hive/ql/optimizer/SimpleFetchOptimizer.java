begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|CommonJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FetchTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FilterOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|LimitOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ListSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ScriptOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|ContentSummaryInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveStorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|InputEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|ppr
operator|.
name|PartitionPruner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PrunedPartitionList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SplitSample
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FetchWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ListSinkDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToUnixTimeStamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToUtcTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFToVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_comment
comment|/**  * Tries to convert simple fetch query to single fetch task, which fetches rows directly  * from location of table/partition.  */
end_comment

begin_class
specifier|public
class|class
name|SimpleFetchOptimizer
extends|extends
name|Transform
block|{
specifier|private
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SimpleFetchOptimizer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ParseContext
name|transform
parameter_list|(
name|ParseContext
name|pctx
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|TableScanOperator
argument_list|>
name|topOps
init|=
name|pctx
operator|.
name|getTopOps
argument_list|()
decl_stmt|;
if|if
condition|(
name|pctx
operator|.
name|getQueryProperties
argument_list|()
operator|.
name|isQuery
argument_list|()
operator|&&
operator|!
name|pctx
operator|.
name|getQueryProperties
argument_list|()
operator|.
name|isAnalyzeCommand
argument_list|()
operator|&&
name|topOps
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// no join, no groupby, no distinct, no lateral view, no subq,
comment|// no CTAS or insert, not analyze command, and single sourced.
name|String
name|alias
init|=
operator|(
name|String
operator|)
name|pctx
operator|.
name|getTopOps
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|TableScanOperator
name|topOp
init|=
name|pctx
operator|.
name|getTopOps
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|FetchTask
name|fetchTask
init|=
name|optimize
argument_list|(
name|pctx
argument_list|,
name|alias
argument_list|,
name|topOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|fetchTask
operator|!=
literal|null
condition|)
block|{
name|pctx
operator|.
name|setFetchTask
argument_list|(
name|fetchTask
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Has to use full name to make sure it does not conflict with
comment|// org.apache.commons.lang.StringUtils
name|LOG
operator|.
name|error
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SemanticException
condition|)
block|{
throw|throw
operator|(
name|SemanticException
operator|)
name|e
throw|;
block|}
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|pctx
return|;
block|}
comment|// returns non-null FetchTask instance when succeeded
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|FetchTask
name|optimize
parameter_list|(
name|ParseContext
name|pctx
parameter_list|,
name|String
name|alias
parameter_list|,
name|TableScanOperator
name|source
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|mode
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|pctx
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEFETCHTASKCONVERSION
argument_list|)
decl_stmt|;
name|boolean
name|aggressive
init|=
literal|"more"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
decl_stmt|;
specifier|final
name|int
name|limit
init|=
name|pctx
operator|.
name|getQueryProperties
argument_list|()
operator|.
name|getOuterQueryLimit
argument_list|()
decl_stmt|;
name|FetchData
name|fetch
init|=
name|checkTree
argument_list|(
name|aggressive
argument_list|,
name|pctx
argument_list|,
name|alias
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|fetch
operator|!=
literal|null
operator|&&
name|checkThreshold
argument_list|(
name|fetch
argument_list|,
name|limit
argument_list|,
name|pctx
argument_list|)
condition|)
block|{
name|FetchWork
name|fetchWork
init|=
name|fetch
operator|.
name|convertToWork
argument_list|()
decl_stmt|;
name|FetchTask
name|fetchTask
init|=
operator|(
name|FetchTask
operator|)
name|TaskFactory
operator|.
name|get
argument_list|(
name|fetchWork
argument_list|,
name|pctx
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|fetchWork
operator|.
name|setSink
argument_list|(
name|fetch
operator|.
name|completed
argument_list|(
name|pctx
argument_list|,
name|fetchWork
argument_list|)
argument_list|)
expr_stmt|;
name|fetchWork
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|fetchWork
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
return|return
name|fetchTask
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|checkThreshold
parameter_list|(
name|FetchData
name|data
parameter_list|,
name|int
name|limit
parameter_list|,
name|ParseContext
name|pctx
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|limit
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|hasOnlyPruningFilter
argument_list|()
condition|)
block|{
comment|/* partitioned table + query has only pruning filters */
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|isPartitioned
argument_list|()
operator|==
literal|false
operator|&&
name|data
operator|.
name|isFiltered
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|/* unpartitioned table + no filters */
return|return
literal|true
return|;
block|}
comment|/* fall through */
block|}
name|long
name|threshold
init|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|pctx
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEFETCHTASKCONVERSIONTHRESHOLD
argument_list|)
decl_stmt|;
if|if
condition|(
name|threshold
operator|<
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Operator
name|child
init|=
name|data
operator|.
name|scanOp
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|SelectOperator
condition|)
block|{
comment|// select *, constant and casts can be allowed without a threshold check
if|if
condition|(
name|checkExpressions
argument_list|(
operator|(
name|SelectOperator
operator|)
name|child
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
name|data
operator|.
name|isDataLengthWithInThreshold
argument_list|(
name|pctx
argument_list|,
name|threshold
argument_list|)
return|;
block|}
comment|// all we can handle is LimitOperator, FilterOperator SelectOperator and final FS
comment|//
comment|// for non-aggressive mode (minimal)
comment|// 1. sampling is not allowed
comment|// 2. for partitioned table, all filters should be targeted to partition column
comment|// 3. SelectOperator should use only simple cast/column access
specifier|private
name|FetchData
name|checkTree
parameter_list|(
name|boolean
name|aggressive
parameter_list|,
name|ParseContext
name|pctx
parameter_list|,
name|String
name|alias
parameter_list|,
name|TableScanOperator
name|ts
parameter_list|)
throws|throws
name|HiveException
block|{
name|SplitSample
name|splitSample
init|=
name|pctx
operator|.
name|getNameToSplitSample
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|aggressive
operator|&&
name|splitSample
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|aggressive
operator|&&
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|getTableSample
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Table
name|table
init|=
name|ts
operator|.
name|getConf
argument_list|()
operator|.
name|getTableMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ReadEntity
name|parent
init|=
name|PlanUtils
operator|.
name|getParentViewInfo
argument_list|(
name|alias
argument_list|,
name|pctx
operator|.
name|getViewAliasToInput
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|FetchData
name|fetch
init|=
operator|new
name|FetchData
argument_list|(
name|ts
argument_list|,
name|parent
argument_list|,
name|table
argument_list|,
name|splitSample
argument_list|)
decl_stmt|;
return|return
name|checkOperators
argument_list|(
name|fetch
argument_list|,
name|aggressive
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|boolean
name|bypassFilter
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|pctx
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEOPTPPD
argument_list|)
condition|)
block|{
name|ExprNodeDesc
name|pruner
init|=
name|pctx
operator|.
name|getOpToPartPruner
argument_list|()
operator|.
name|get
argument_list|(
name|ts
argument_list|)
decl_stmt|;
if|if
condition|(
name|PartitionPruner
operator|.
name|onlyContainsPartnCols
argument_list|(
name|table
argument_list|,
name|pruner
argument_list|)
condition|)
block|{
name|bypassFilter
operator|=
operator|!
name|pctx
operator|.
name|getPrunedPartitions
argument_list|(
name|alias
argument_list|,
name|ts
argument_list|)
operator|.
name|hasUnknownPartitions
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|aggressive
operator|&&
operator|!
name|bypassFilter
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PrunedPartitionList
name|partitions
init|=
name|pctx
operator|.
name|getPrunedPartitions
argument_list|(
name|alias
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|FetchData
name|fetch
init|=
operator|new
name|FetchData
argument_list|(
name|ts
argument_list|,
name|parent
argument_list|,
name|table
argument_list|,
name|partitions
argument_list|,
name|splitSample
argument_list|,
name|bypassFilter
argument_list|)
decl_stmt|;
return|return
name|checkOperators
argument_list|(
name|fetch
argument_list|,
name|aggressive
argument_list|,
name|bypassFilter
argument_list|)
return|;
block|}
specifier|private
name|FetchData
name|checkOperators
parameter_list|(
name|FetchData
name|fetch
parameter_list|,
name|boolean
name|aggressive
parameter_list|,
name|boolean
name|bypassFilter
parameter_list|)
block|{
if|if
condition|(
name|aggressive
condition|)
block|{
return|return
name|isConvertible
argument_list|(
name|fetch
argument_list|)
condition|?
name|fetch
else|:
literal|null
return|;
block|}
return|return
name|checkOperators
argument_list|(
name|fetch
argument_list|,
name|fetch
operator|.
name|scanOp
argument_list|,
name|bypassFilter
argument_list|)
return|;
block|}
specifier|private
name|FetchData
name|checkOperators
parameter_list|(
name|FetchData
name|fetch
parameter_list|,
name|TableScanOperator
name|ts
parameter_list|,
name|boolean
name|bypassFilter
parameter_list|)
block|{
if|if
condition|(
name|ts
operator|.
name|getChildOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Operator
argument_list|<
name|?
argument_list|>
name|op
init|=
name|ts
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
name|op
operator|=
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
control|)
block|{
if|if
condition|(
name|op
operator|instanceof
name|SelectOperator
condition|)
block|{
if|if
condition|(
operator|!
name|checkExpressions
argument_list|(
operator|(
name|SelectOperator
operator|)
name|op
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
continue|continue;
block|}
if|if
condition|(
operator|!
operator|(
name|op
operator|instanceof
name|LimitOperator
operator|||
operator|(
name|op
operator|instanceof
name|FilterOperator
operator|&&
name|bypassFilter
operator|)
operator|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|==
literal|null
operator|||
name|op
operator|.
name|getChildOperators
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|op
operator|instanceof
name|FilterOperator
condition|)
block|{
name|fetch
operator|.
name|setFiltered
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|op
operator|instanceof
name|FileSinkOperator
condition|)
block|{
name|fetch
operator|.
name|fileSink
operator|=
name|op
expr_stmt|;
return|return
name|fetch
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|checkExpressions
parameter_list|(
name|SelectOperator
name|op
parameter_list|)
block|{
name|SelectDesc
name|desc
init|=
name|op
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|isSelectStar
argument_list|()
operator|||
name|desc
operator|.
name|isSelStarNoCompute
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|ExprNodeDesc
name|expr
range|:
name|desc
operator|.
name|getColList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|checkExpression
argument_list|(
name|expr
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|checkExpression
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeConstantDesc
operator|||
name|expr
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|expr
operator|instanceof
name|ExprNodeGenericFuncDesc
condition|)
block|{
name|GenericUDF
name|udf
init|=
operator|(
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|expr
operator|)
operator|.
name|getGenericUDF
argument_list|()
decl_stmt|;
if|if
condition|(
name|udf
operator|instanceof
name|GenericUDFToBinary
operator|||
name|udf
operator|instanceof
name|GenericUDFToChar
operator|||
name|udf
operator|instanceof
name|GenericUDFToDate
operator|||
name|udf
operator|instanceof
name|GenericUDFToDecimal
operator|||
name|udf
operator|instanceof
name|GenericUDFToUnixTimeStamp
operator|||
name|udf
operator|instanceof
name|GenericUDFToUtcTimestamp
operator|||
name|udf
operator|instanceof
name|GenericUDFToVarchar
condition|)
block|{
return|return
name|expr
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|checkExpression
argument_list|(
name|expr
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isConvertible
parameter_list|(
name|FetchData
name|fetch
parameter_list|)
block|{
return|return
name|isConvertible
argument_list|(
name|fetch
argument_list|,
name|fetch
operator|.
name|scanOp
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isConvertible
parameter_list|(
name|FetchData
name|fetch
parameter_list|,
name|Operator
argument_list|<
name|?
argument_list|>
name|operator
parameter_list|,
name|Set
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|traversed
parameter_list|)
block|{
if|if
condition|(
name|operator
operator|instanceof
name|ReduceSinkOperator
operator|||
name|operator
operator|instanceof
name|CommonJoinOperator
operator|||
name|operator
operator|instanceof
name|ScriptOperator
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|operator
operator|instanceof
name|FilterOperator
condition|)
block|{
name|fetch
operator|.
name|setFiltered
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|traversed
operator|.
name|add
argument_list|(
name|operator
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|operator
operator|.
name|getNumChild
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|operator
operator|instanceof
name|FileSinkOperator
condition|)
block|{
name|fetch
operator|.
name|fileSink
operator|=
name|operator
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
argument_list|>
name|child
range|:
name|operator
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|traversed
operator|.
name|containsAll
argument_list|(
name|child
operator|.
name|getParentOperators
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|isConvertible
argument_list|(
name|fetch
argument_list|,
name|child
argument_list|,
name|traversed
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
enum|enum
name|Status
block|{
name|PASS
block|,
name|FAIL
block|,
name|UNAVAILABLE
block|}
specifier|private
class|class
name|FetchData
block|{
comment|// source table scan
specifier|private
specifier|final
name|TableScanOperator
name|scanOp
decl_stmt|;
specifier|private
specifier|final
name|ReadEntity
name|parent
decl_stmt|;
specifier|private
specifier|final
name|Table
name|table
decl_stmt|;
specifier|private
specifier|final
name|SplitSample
name|splitSample
decl_stmt|;
specifier|private
specifier|final
name|PrunedPartitionList
name|partsList
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|ReadEntity
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|onlyPruningFilter
decl_stmt|;
comment|// this is always non-null when conversion is completed
specifier|private
name|Operator
argument_list|<
name|?
argument_list|>
name|fileSink
decl_stmt|;
specifier|private
name|boolean
name|filtered
decl_stmt|;
specifier|private
name|FetchData
parameter_list|(
name|TableScanOperator
name|scanOp
parameter_list|,
name|ReadEntity
name|parent
parameter_list|,
name|Table
name|table
parameter_list|,
name|SplitSample
name|splitSample
parameter_list|)
block|{
name|this
operator|.
name|scanOp
operator|=
name|scanOp
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|partsList
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|splitSample
operator|=
name|splitSample
expr_stmt|;
name|this
operator|.
name|onlyPruningFilter
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
name|FetchData
parameter_list|(
name|TableScanOperator
name|scanOp
parameter_list|,
name|ReadEntity
name|parent
parameter_list|,
name|Table
name|table
parameter_list|,
name|PrunedPartitionList
name|partsList
parameter_list|,
name|SplitSample
name|splitSample
parameter_list|,
name|boolean
name|bypassFilter
parameter_list|)
block|{
name|this
operator|.
name|scanOp
operator|=
name|scanOp
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|partsList
operator|=
name|partsList
expr_stmt|;
name|this
operator|.
name|splitSample
operator|=
name|splitSample
expr_stmt|;
name|this
operator|.
name|onlyPruningFilter
operator|=
name|bypassFilter
expr_stmt|;
block|}
comment|/*      * all filters were executed during partition pruning      */
specifier|public
specifier|final
name|boolean
name|hasOnlyPruningFilter
parameter_list|()
block|{
return|return
name|this
operator|.
name|onlyPruningFilter
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isPartitioned
parameter_list|()
block|{
return|return
name|this
operator|.
name|table
operator|.
name|isPartitioned
argument_list|()
return|;
block|}
comment|/* there are filter operators in the pipeline */
specifier|public
specifier|final
name|boolean
name|isFiltered
parameter_list|()
block|{
return|return
name|this
operator|.
name|filtered
return|;
block|}
specifier|public
specifier|final
name|void
name|setFiltered
parameter_list|(
name|boolean
name|filtered
parameter_list|)
block|{
name|this
operator|.
name|filtered
operator|=
name|filtered
expr_stmt|;
block|}
specifier|private
name|FetchWork
name|convertToWork
parameter_list|()
throws|throws
name|HiveException
block|{
name|inputs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Utilities
operator|.
name|addSchemaEvolutionToTableScanOperator
argument_list|(
name|table
argument_list|,
name|scanOp
argument_list|)
expr_stmt|;
name|TableDesc
name|tableDesc
init|=
name|Utilities
operator|.
name|getTableDesc
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|inputs
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|table
argument_list|,
name|parent
argument_list|,
operator|!
name|table
operator|.
name|isView
argument_list|()
operator|&&
name|parent
operator|==
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|FetchWork
name|work
init|=
operator|new
name|FetchWork
argument_list|(
name|table
operator|.
name|getPath
argument_list|()
argument_list|,
name|tableDesc
argument_list|)
decl_stmt|;
name|PlanUtils
operator|.
name|configureInputJobPropertiesForStorageHandler
argument_list|(
name|work
operator|.
name|getTblDesc
argument_list|()
argument_list|)
expr_stmt|;
name|work
operator|.
name|setSplitSample
argument_list|(
name|splitSample
argument_list|)
expr_stmt|;
return|return
name|work
return|;
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|listP
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PartitionDesc
argument_list|>
name|partP
init|=
operator|new
name|ArrayList
argument_list|<
name|PartitionDesc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partsList
operator|.
name|getNotDeniedPartns
argument_list|()
control|)
block|{
name|inputs
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|partition
argument_list|,
name|parent
argument_list|,
name|parent
operator|==
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|listP
operator|.
name|add
argument_list|(
name|partition
operator|.
name|getDataLocation
argument_list|()
argument_list|)
expr_stmt|;
name|partP
operator|.
name|add
argument_list|(
name|Utilities
operator|.
name|getPartitionDescFromTableDesc
argument_list|(
name|tableDesc
argument_list|,
name|partition
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Table
name|sourceTable
init|=
name|partsList
operator|.
name|getSourceTable
argument_list|()
decl_stmt|;
name|inputs
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|sourceTable
argument_list|,
name|parent
argument_list|,
name|parent
operator|==
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|TableDesc
name|table
init|=
name|Utilities
operator|.
name|getTableDesc
argument_list|(
name|sourceTable
argument_list|)
decl_stmt|;
name|FetchWork
name|work
init|=
operator|new
name|FetchWork
argument_list|(
name|listP
argument_list|,
name|partP
argument_list|,
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|work
operator|.
name|getPartDesc
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PartitionDesc
name|part0
init|=
name|work
operator|.
name|getPartDesc
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PlanUtils
operator|.
name|configureInputJobPropertiesForStorageHandler
argument_list|(
name|part0
operator|.
name|getTableDesc
argument_list|()
argument_list|)
expr_stmt|;
name|work
operator|.
name|setSplitSample
argument_list|(
name|splitSample
argument_list|)
expr_stmt|;
block|}
return|return
name|work
return|;
block|}
comment|// this optimizer is for replacing FS to temp+fetching from temp with
comment|// single direct fetching, which means FS is not needed any more when conversion completed.
comment|// rows forwarded will be received by ListSinkOperator, which is replacing FS
specifier|private
name|ListSinkOperator
name|completed
parameter_list|(
name|ParseContext
name|pctx
parameter_list|,
name|FetchWork
name|work
parameter_list|)
block|{
for|for
control|(
name|ReadEntity
name|input
range|:
name|inputs
control|)
block|{
name|PlanUtils
operator|.
name|addInput
argument_list|(
name|pctx
operator|.
name|getSemanticInputs
argument_list|()
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
return|return
name|replaceFSwithLS
argument_list|(
name|fileSink
argument_list|,
name|work
operator|.
name|getSerializationNullFormat
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isDataLengthWithInThreshold
parameter_list|(
name|ParseContext
name|pctx
parameter_list|,
specifier|final
name|long
name|threshold
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|splitSample
operator|!=
literal|null
operator|&&
name|splitSample
operator|.
name|getTotalLength
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Threshold "
operator|+
name|splitSample
operator|.
name|getTotalLength
argument_list|()
operator|+
literal|" exceeded for pseudoMR mode"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|threshold
operator|-
name|splitSample
operator|.
name|getTotalLength
argument_list|()
operator|)
operator|>
literal|0
return|;
block|}
name|Status
name|status
init|=
name|checkThresholdWithMetastoreStats
argument_list|(
name|table
argument_list|,
name|partsList
argument_list|,
name|threshold
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|equals
argument_list|(
name|Status
operator|.
name|PASS
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|equals
argument_list|(
name|Status
operator|.
name|FAIL
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cannot fetch stats from metastore for table: {}. Falling back to filesystem scan.."
argument_list|,
name|table
operator|.
name|getCompleteName
argument_list|()
argument_list|)
expr_stmt|;
comment|// metastore stats is unavailable, fallback to old way
specifier|final
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|pctx
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Utilities
operator|.
name|setColumnNameList
argument_list|(
name|jobConf
argument_list|,
name|scanOp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|setColumnTypeList
argument_list|(
name|jobConf
argument_list|,
name|scanOp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HiveStorageHandler
name|handler
init|=
name|table
operator|.
name|getStorageHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|handler
operator|instanceof
name|InputEstimator
condition|)
block|{
name|InputEstimator
name|estimator
init|=
operator|(
name|InputEstimator
operator|)
name|handler
decl_stmt|;
name|TableDesc
name|tableDesc
init|=
name|Utilities
operator|.
name|getTableDesc
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|PlanUtils
operator|.
name|configureInputJobPropertiesForStorageHandler
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
name|Utilities
operator|.
name|copyTableJobPropertiesToConf
argument_list|(
name|tableDesc
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|long
name|len
init|=
name|estimator
operator|.
name|estimate
argument_list|(
name|jobConf
argument_list|,
name|scanOp
argument_list|,
name|threshold
argument_list|)
operator|.
name|getTotalLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Threshold "
operator|+
name|len
operator|+
literal|" exceeded for pseudoMR mode"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|threshold
operator|-
name|len
operator|)
operator|>
literal|0
return|;
block|}
if|if
condition|(
name|table
operator|.
name|isNonNative
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
comment|// nothing can be done
block|}
if|if
condition|(
operator|!
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|long
name|len
init|=
name|getPathLength
argument_list|(
name|jobConf
argument_list|,
name|table
operator|.
name|getPath
argument_list|()
argument_list|,
name|table
operator|.
name|getInputFormatClass
argument_list|()
argument_list|,
name|threshold
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Threshold "
operator|+
name|len
operator|+
literal|" exceeded for pseudoMR mode"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|threshold
operator|-
name|len
operator|)
operator|>
literal|0
return|;
block|}
specifier|final
name|AtomicLong
name|total
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//TODO: use common thread pool later?
name|int
name|threadCount
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|pctx
operator|.
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_GATHER_NUM_THREADS
argument_list|)
decl_stmt|;
specifier|final
name|ExecutorService
name|pool
init|=
operator|(
name|threadCount
operator|>
literal|0
operator|)
condition|?
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|threadCount
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"SimpleFetchOptimizer-FileLength-%d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Future
argument_list|>
name|futures
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Partition
name|partition
range|:
name|partsList
operator|.
name|getNotDeniedPartns
argument_list|()
control|)
block|{
specifier|final
name|Path
name|path
init|=
name|partition
operator|.
name|getDataLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|pool
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|len
init|=
name|getPathLength
argument_list|(
name|jobConf
argument_list|,
name|path
argument_list|,
name|partition
operator|.
name|getInputFormatClass
argument_list|()
argument_list|,
name|threshold
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
name|path
operator|+
literal|", length="
operator|+
name|len
argument_list|)
expr_stmt|;
return|return
name|total
operator|.
name|addAndGet
argument_list|(
name|len
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|total
operator|.
name|addAndGet
argument_list|(
name|getPathLength
argument_list|(
name|jobConf
argument_list|,
name|path
argument_list|,
name|partition
operator|.
name|getInputFormatClass
argument_list|()
argument_list|,
name|threshold
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Long
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|long
name|totalLen
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|threshold
operator|-
name|totalLen
operator|)
operator|<=
literal|0
condition|)
block|{
comment|// early exit, as getting file lengths can be expensive in object stores.
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
operator|(
name|threshold
operator|-
name|total
operator|.
name|get
argument_list|()
operator|)
operator|>=
literal|0
return|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Data set size="
operator|+
name|total
operator|.
name|get
argument_list|()
operator|+
literal|", threshold="
operator|+
name|threshold
argument_list|)
expr_stmt|;
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// This method gets the basic stats from metastore for table/partitions. This will make use of the statistics from
comment|// AnnotateWithStatistics optimizer when available. If execution engine is tez or spark, AnnotateWithStatistics
comment|// optimization is applied only during physical compilation because of DPP changing the stats. In such case, we
comment|// we will get the basic stats from metastore. When statistics is absent in metastore we will use the fallback of
comment|// scanning the filesystem to get file lengths.
specifier|private
name|Status
name|checkThresholdWithMetastoreStats
parameter_list|(
specifier|final
name|Table
name|table
parameter_list|,
specifier|final
name|PrunedPartitionList
name|partsList
parameter_list|,
specifier|final
name|long
name|threshold
parameter_list|)
block|{
if|if
condition|(
name|table
operator|!=
literal|null
operator|&&
operator|!
name|table
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|long
name|dataSize
init|=
name|StatsUtils
operator|.
name|getTotalSize
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataSize
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot determine basic stats for table: {} from metastore. Falling back."
argument_list|,
name|table
operator|.
name|getCompleteName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Status
operator|.
name|UNAVAILABLE
return|;
block|}
return|return
operator|(
name|threshold
operator|-
name|dataSize
operator|)
operator|>=
literal|0
condition|?
name|Status
operator|.
name|PASS
else|:
name|Status
operator|.
name|FAIL
return|;
block|}
elseif|else
if|if
condition|(
name|table
operator|!=
literal|null
operator|&&
name|table
operator|.
name|isPartitioned
argument_list|()
operator|&&
name|partsList
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|dataSizes
init|=
name|StatsUtils
operator|.
name|getBasicStatForPartitions
argument_list|(
name|table
argument_list|,
name|partsList
operator|.
name|getNotDeniedPartns
argument_list|()
argument_list|,
name|StatsSetupConst
operator|.
name|TOTAL_SIZE
argument_list|)
decl_stmt|;
name|long
name|totalDataSize
init|=
name|StatsUtils
operator|.
name|getSumIgnoreNegatives
argument_list|(
name|dataSizes
argument_list|)
decl_stmt|;
if|if
condition|(
name|totalDataSize
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot determine basic stats for partitioned table: {} from metastore. Falling back."
argument_list|,
name|table
operator|.
name|getCompleteName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Status
operator|.
name|UNAVAILABLE
return|;
block|}
return|return
operator|(
name|threshold
operator|-
name|totalDataSize
operator|)
operator|>=
literal|0
condition|?
name|Status
operator|.
name|PASS
else|:
name|Status
operator|.
name|FAIL
return|;
block|}
return|return
name|Status
operator|.
name|UNAVAILABLE
return|;
block|}
specifier|private
name|long
name|getPathLength
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Path
name|path
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|clazz
parameter_list|,
name|long
name|threshold
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ContentSummaryInputFormat
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|InputFormat
name|input
init|=
name|HiveInputFormat
operator|.
name|getInputFormatFromCache
argument_list|(
name|clazz
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|ContentSummaryInputFormat
operator|)
name|input
operator|)
operator|.
name|getContentSummary
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
operator|.
name|getLength
argument_list|()
return|;
block|}
else|else
block|{
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|length
init|=
literal|0
decl_stmt|;
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|results
init|=
name|fs
operator|.
name|listFiles
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// No need to iterate more, when threshold is reached
comment|// (beneficial especially for object stores)
while|while
condition|(
name|length
operator|<=
name|threshold
operator|&&
name|results
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|length
operator|+=
name|results
operator|.
name|next
argument_list|()
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"length="
operator|+
name|length
operator|+
literal|", threshold="
operator|+
name|threshold
argument_list|)
expr_stmt|;
return|return
name|length
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|ListSinkOperator
name|replaceFSwithLS
parameter_list|(
name|Operator
argument_list|<
name|?
argument_list|>
name|fileSink
parameter_list|,
name|String
name|nullFormat
parameter_list|)
block|{
name|ListSinkDesc
name|desc
init|=
operator|new
name|ListSinkDesc
argument_list|(
name|nullFormat
argument_list|)
decl_stmt|;
name|ListSinkOperator
name|sink
init|=
operator|(
name|ListSinkOperator
operator|)
name|OperatorFactory
operator|.
name|get
argument_list|(
name|fileSink
operator|.
name|getCompilationOpContext
argument_list|()
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|sink
operator|.
name|setParentOperators
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|parent
init|=
name|fileSink
operator|.
name|getParentOperators
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|sink
operator|.
name|getParentOperators
argument_list|()
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|parent
operator|.
name|replaceChild
argument_list|(
name|fileSink
argument_list|,
name|sink
argument_list|)
expr_stmt|;
name|fileSink
operator|.
name|setParentOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|sink
return|;
block|}
block|}
end_class

end_unit

