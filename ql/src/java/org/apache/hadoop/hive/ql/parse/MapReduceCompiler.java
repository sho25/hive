begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ColumnStatsTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ConditionalTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FetchTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ReduceSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|StatsTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TableScanOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UnionOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|ExecDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|mr
operator|.
name|MapRedTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|RuleRegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|GenMRFileSink1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|GenMROperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|GenMRProcContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|GenMRProcContext
operator|.
name|GenMapRedCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|GenMRRedSink1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|GenMRRedSink2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|GenMRRedSink3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|GenMRTableScan1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|GenMRUnion1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|GenMapRedUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|MapJoinFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
operator|.
name|PhysicalContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
operator|.
name|PhysicalOptimizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ColumnStatsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ColumnStatsWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CreateTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FetchWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadFileDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|LoadTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MoveWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
operator|.
name|LogHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_class
specifier|public
class|class
name|MapReduceCompiler
block|{
specifier|protected
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MapReduceCompiler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Hive
name|db
decl_stmt|;
specifier|protected
name|LogHelper
name|console
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|public
name|MapReduceCompiler
parameter_list|()
block|{   }
specifier|public
name|void
name|init
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|LogHelper
name|console
parameter_list|,
name|Hive
name|db
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|console
operator|=
name|console
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"nls"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|public
name|void
name|compile
parameter_list|(
specifier|final
name|ParseContext
name|pCtx
parameter_list|,
specifier|final
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|,
specifier|final
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
specifier|final
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Context
name|ctx
init|=
name|pCtx
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|GlobalLimitCtx
name|globalLimitCtx
init|=
name|pCtx
operator|.
name|getGlobalLimitCtx
argument_list|()
decl_stmt|;
name|QB
name|qb
init|=
name|pCtx
operator|.
name|getQB
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|MoveWork
argument_list|>
argument_list|>
name|mvTask
init|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|MoveWork
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LoadTableDesc
argument_list|>
name|loadTableWork
init|=
name|pCtx
operator|.
name|getLoadTableWork
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LoadFileDesc
argument_list|>
name|loadFileWork
init|=
name|pCtx
operator|.
name|getLoadFileWork
argument_list|()
decl_stmt|;
name|boolean
name|isCStats
init|=
name|qb
operator|.
name|isAnalyzeRewrite
argument_list|()
decl_stmt|;
if|if
condition|(
name|pCtx
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
comment|/*      * In case of a select, use a fetch task instead of a move task.      * If the select is from analyze table column rewrite, don't create a fetch task. Instead create      * a column stats task later.      */
if|if
condition|(
name|pCtx
operator|.
name|getQB
argument_list|()
operator|.
name|getIsQuery
argument_list|()
operator|&&
operator|!
name|isCStats
condition|)
block|{
if|if
condition|(
operator|(
operator|!
name|loadTableWork
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|loadFileWork
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|ErrorMsg
operator|.
name|GENERIC_ERROR
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|cols
init|=
name|loadFileWork
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumns
argument_list|()
decl_stmt|;
name|String
name|colTypes
init|=
name|loadFileWork
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumnTypes
argument_list|()
decl_stmt|;
name|String
name|resFileFormat
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYRESULTFILEFORMAT
argument_list|)
decl_stmt|;
name|TableDesc
name|resultTab
init|=
name|PlanUtils
operator|.
name|getDefaultQueryOutputTableDesc
argument_list|(
name|cols
argument_list|,
name|colTypes
argument_list|,
name|resFileFormat
argument_list|)
decl_stmt|;
name|FetchWork
name|fetch
init|=
operator|new
name|FetchWork
argument_list|(
operator|new
name|Path
argument_list|(
name|loadFileWork
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSourceDir
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|resultTab
argument_list|,
name|qb
operator|.
name|getParseInfo
argument_list|()
operator|.
name|getOuterQueryLimit
argument_list|()
argument_list|)
decl_stmt|;
name|pCtx
operator|.
name|setFetchTask
argument_list|(
operator|(
name|FetchTask
operator|)
name|TaskFactory
operator|.
name|get
argument_list|(
name|fetch
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// For the FetchTask, the limit optimization requires we fetch all the rows
comment|// in memory and count how many rows we get. It's not practical if the
comment|// limit factor is too big
name|int
name|fetchLimit
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVELIMITOPTMAXFETCH
argument_list|)
decl_stmt|;
if|if
condition|(
name|globalLimitCtx
operator|.
name|isEnable
argument_list|()
operator|&&
name|globalLimitCtx
operator|.
name|getGlobalLimit
argument_list|()
operator|>
name|fetchLimit
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"For FetchTask, LIMIT "
operator|+
name|globalLimitCtx
operator|.
name|getGlobalLimit
argument_list|()
operator|+
literal|"> "
operator|+
name|fetchLimit
operator|+
literal|". Doesn't qualify limit optimiztion."
argument_list|)
expr_stmt|;
name|globalLimitCtx
operator|.
name|disableOpt
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|isCStats
condition|)
block|{
for|for
control|(
name|LoadTableDesc
name|ltd
range|:
name|loadTableWork
control|)
block|{
name|Task
argument_list|<
name|MoveWork
argument_list|>
name|tsk
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|MoveWork
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|ltd
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|mvTask
operator|.
name|add
argument_list|(
name|tsk
argument_list|)
expr_stmt|;
comment|// Check to see if we are stale'ing any indexes and auto-update them if we want
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEINDEXAUTOUPDATE
argument_list|)
condition|)
block|{
name|IndexUpdater
name|indexUpdater
init|=
operator|new
name|IndexUpdater
argument_list|(
name|loadTableWork
argument_list|,
name|inputs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|indexUpdateTasks
init|=
name|indexUpdater
operator|.
name|generateUpdateTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|updateTask
range|:
name|indexUpdateTasks
control|)
block|{
name|tsk
operator|.
name|addDependentTask
argument_list|(
name|updateTask
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|"WARNING: could not auto-update stale indexes, which are not in sync"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|oneLoadFile
init|=
literal|true
decl_stmt|;
for|for
control|(
name|LoadFileDesc
name|lfd
range|:
name|loadFileWork
control|)
block|{
if|if
condition|(
name|qb
operator|.
name|isCTAS
argument_list|()
condition|)
block|{
assert|assert
operator|(
name|oneLoadFile
operator|)
assert|;
comment|// should not have more than 1 load file for
comment|// CTAS
comment|// make the movetask's destination directory the table's destination.
name|String
name|location
init|=
name|qb
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
comment|// get the table's default location
name|Table
name|dumpTable
decl_stmt|;
name|Path
name|targetPath
decl_stmt|;
try|try
block|{
name|dumpTable
operator|=
name|db
operator|.
name|newTable
argument_list|(
name|qb
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|databaseExists
argument_list|(
name|dumpTable
operator|.
name|getDbName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"ERROR: The database "
operator|+
name|dumpTable
operator|.
name|getDbName
argument_list|()
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|Warehouse
name|wh
init|=
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|targetPath
operator|=
name|wh
operator|.
name|getTablePath
argument_list|(
name|db
operator|.
name|getDatabase
argument_list|(
name|dumpTable
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|dumpTable
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|location
operator|=
name|targetPath
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|lfd
operator|.
name|setTargetDir
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|oneLoadFile
operator|=
literal|false
expr_stmt|;
block|}
name|mvTask
operator|.
name|add
argument_list|(
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|MoveWork
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|lfd
argument_list|,
literal|false
argument_list|)
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// generate map reduce plans
name|ParseContext
name|tempParseContext
init|=
name|getParseContext
argument_list|(
name|pCtx
argument_list|,
name|rootTasks
argument_list|)
decl_stmt|;
name|GenMRProcContext
name|procCtx
init|=
operator|new
name|GenMRProcContext
argument_list|(
name|conf
argument_list|,
operator|new
name|HashMap
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
condition|,
name|tempParseContext
condition|,
name|mvTask
condition|,
name|rootTasks
condition|,
operator|new
name|LinkedHashMap
argument_list|<
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|,
name|GenMapRedCtx
argument_list|>
argument_list|()
condition|,
name|inputs
condition|,
name|outputs
argument_list|)
decl_stmt|;
comment|// create a walker which walks the tree in a DFS manner while maintaining
comment|// the operator stack.
comment|// The dispatcher generates the plan from the operator tree
name|Map
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
name|opRules
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Rule
argument_list|,
name|NodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
operator|new
name|String
argument_list|(
literal|"R1"
argument_list|)
argument_list|,
name|TableScanOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
operator|new
name|GenMRTableScan1
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
operator|new
name|String
argument_list|(
literal|"R2"
argument_list|)
argument_list|,
name|TableScanOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%.*"
operator|+
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
operator|new
name|GenMRRedSink1
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
operator|new
name|String
argument_list|(
literal|"R3"
argument_list|)
argument_list|,
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%.*"
operator|+
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
operator|new
name|GenMRRedSink2
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
operator|new
name|String
argument_list|(
literal|"R4"
argument_list|)
argument_list|,
name|FileSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
operator|new
name|GenMRFileSink1
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
operator|new
name|String
argument_list|(
literal|"R5"
argument_list|)
argument_list|,
name|UnionOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
operator|new
name|GenMRUnion1
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
operator|new
name|String
argument_list|(
literal|"R6"
argument_list|)
argument_list|,
name|UnionOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%.*"
operator|+
name|ReduceSinkOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
operator|new
name|GenMRRedSink3
argument_list|()
argument_list|)
expr_stmt|;
name|opRules
operator|.
name|put
argument_list|(
operator|new
name|RuleRegExp
argument_list|(
operator|new
name|String
argument_list|(
literal|"R7"
argument_list|)
argument_list|,
name|MapJoinOperator
operator|.
name|getOperatorName
argument_list|()
operator|+
literal|"%"
argument_list|)
argument_list|,
name|MapJoinFactory
operator|.
name|getTableScanMapJoin
argument_list|()
argument_list|)
expr_stmt|;
comment|// The dispatcher fires the processor corresponding to the closest matching
comment|// rule and passes the context along
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
operator|new
name|GenMROperator
argument_list|()
argument_list|,
name|opRules
argument_list|,
name|procCtx
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|GenMapRedWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|addAll
argument_list|(
name|pCtx
operator|.
name|getTopOps
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|/*      * If the query was the result of analyze table column compute statistics rewrite, create      * a column stats task instead of a fetch task to persist stats to the metastore.      */
if|if
condition|(
name|isCStats
condition|)
block|{
name|genColumnStatsTask
argument_list|(
name|qb
argument_list|,
name|loadTableWork
argument_list|,
name|loadFileWork
argument_list|,
name|rootTasks
argument_list|)
expr_stmt|;
block|}
comment|// reduce sink does not have any kids - since the plan by now has been
comment|// broken up into multiple
comment|// tasks, iterate over all tasks.
comment|// For each task, go over all operators recursively
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|rootTask
range|:
name|rootTasks
control|)
block|{
name|breakTaskTree
argument_list|(
name|rootTask
argument_list|)
expr_stmt|;
block|}
comment|// For each task, set the key descriptor for the reducer
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|rootTask
range|:
name|rootTasks
control|)
block|{
name|GenMapRedUtils
operator|.
name|setKeyAndValueDescForTaskTree
argument_list|(
name|rootTask
argument_list|)
expr_stmt|;
block|}
comment|// If a task contains an operator which instructs bucketizedhiveinputformat
comment|// to be used, please do so
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|rootTask
range|:
name|rootTasks
control|)
block|{
name|setInputFormat
argument_list|(
name|rootTask
argument_list|)
expr_stmt|;
block|}
name|PhysicalContext
name|physicalContext
init|=
operator|new
name|PhysicalContext
argument_list|(
name|conf
argument_list|,
name|getParseContext
argument_list|(
name|pCtx
argument_list|,
name|rootTasks
argument_list|)
argument_list|,
name|ctx
argument_list|,
name|rootTasks
argument_list|,
name|pCtx
operator|.
name|getFetchTask
argument_list|()
argument_list|)
decl_stmt|;
name|PhysicalOptimizer
name|physicalOptimizer
init|=
operator|new
name|PhysicalOptimizer
argument_list|(
name|physicalContext
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|physicalOptimizer
operator|.
name|optimize
argument_list|()
expr_stmt|;
comment|// For each operator, generate the counters if needed
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEJOBPROGRESS
argument_list|)
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|rootTask
range|:
name|rootTasks
control|)
block|{
name|generateCountersTask
argument_list|(
name|rootTask
argument_list|)
expr_stmt|;
block|}
block|}
name|decideExecMode
argument_list|(
name|rootTasks
argument_list|,
name|ctx
argument_list|,
name|globalLimitCtx
argument_list|)
expr_stmt|;
if|if
condition|(
name|qb
operator|.
name|isCTAS
argument_list|()
condition|)
block|{
comment|// generate a DDL task and make it a dependent task of the leaf
name|CreateTableDesc
name|crtTblDesc
init|=
name|qb
operator|.
name|getTableDesc
argument_list|()
decl_stmt|;
name|crtTblDesc
operator|.
name|validate
argument_list|()
expr_stmt|;
comment|// Clear the output for CTAS since we don't need the output from the
comment|// mapredWork, the
comment|// DDLWork at the tail of the chain will have the output
name|outputs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|crtTblTask
init|=
name|TaskFactory
operator|.
name|get
argument_list|(
operator|new
name|DDLWork
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
name|crtTblDesc
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// find all leaf tasks and make the DDLTask as a dependent task of all of
comment|// them
name|HashSet
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|leaves
init|=
operator|new
name|HashSet
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|getLeafTasks
argument_list|(
name|rootTasks
argument_list|,
name|leaves
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|leaves
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
assert|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
range|:
name|leaves
control|)
block|{
if|if
condition|(
name|task
operator|instanceof
name|StatsTask
condition|)
block|{
comment|// StatsTask require table to already exist
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|parentOfStatsTask
range|:
name|task
operator|.
name|getParentTasks
argument_list|()
control|)
block|{
name|parentOfStatsTask
operator|.
name|addDependentTask
argument_list|(
name|crtTblTask
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|parentOfCrtTblTask
range|:
name|crtTblTask
operator|.
name|getParentTasks
argument_list|()
control|)
block|{
name|parentOfCrtTblTask
operator|.
name|removeDependentTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
name|crtTblTask
operator|.
name|addDependentTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|task
operator|.
name|addDependentTask
argument_list|(
name|crtTblTask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|globalLimitCtx
operator|.
name|isEnable
argument_list|()
operator|&&
name|pCtx
operator|.
name|getFetchTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"set least row check for FetchTask: "
operator|+
name|globalLimitCtx
operator|.
name|getGlobalLimit
argument_list|()
argument_list|)
expr_stmt|;
name|pCtx
operator|.
name|getFetchTask
argument_list|()
operator|.
name|getWork
argument_list|()
operator|.
name|setLeastNumRows
argument_list|(
name|globalLimitCtx
operator|.
name|getGlobalLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|globalLimitCtx
operator|.
name|isEnable
argument_list|()
operator|&&
name|globalLimitCtx
operator|.
name|getLastReduceLimitDesc
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"set least row check for LimitDesc: "
operator|+
name|globalLimitCtx
operator|.
name|getGlobalLimit
argument_list|()
argument_list|)
expr_stmt|;
name|globalLimitCtx
operator|.
name|getLastReduceLimitDesc
argument_list|()
operator|.
name|setLeastRows
argument_list|(
name|globalLimitCtx
operator|.
name|getGlobalLimit
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExecDriver
argument_list|>
name|mrTasks
init|=
name|Utilities
operator|.
name|getMRTasks
argument_list|(
name|rootTasks
argument_list|)
decl_stmt|;
for|for
control|(
name|ExecDriver
name|tsk
range|:
name|mrTasks
control|)
block|{
name|tsk
operator|.
name|setRetryCmdWhenFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setInputFormat
parameter_list|(
name|MapWork
name|work
parameter_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
block|{
if|if
condition|(
name|op
operator|.
name|isUseBucketizedHiveInputFormat
argument_list|()
condition|)
block|{
name|work
operator|.
name|setUseBucketizedHiveInputFormat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|childOp
range|:
name|op
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|setInputFormat
argument_list|(
name|work
argument_list|,
name|childOp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// loop over all the tasks recursively
specifier|private
name|void
name|setInputFormat
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
parameter_list|)
block|{
if|if
condition|(
name|task
operator|instanceof
name|ExecDriver
condition|)
block|{
name|MapWork
name|work
init|=
operator|(
operator|(
name|MapredWork
operator|)
name|task
operator|.
name|getWork
argument_list|()
operator|)
operator|.
name|getMapWork
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|opMap
init|=
name|work
operator|.
name|getAliasToWork
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|opMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|opMap
operator|.
name|values
argument_list|()
control|)
block|{
name|setInputFormat
argument_list|(
name|work
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|task
operator|instanceof
name|ConditionalTask
condition|)
block|{
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|listTasks
init|=
operator|(
operator|(
name|ConditionalTask
operator|)
name|task
operator|)
operator|.
name|getListTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|listTasks
control|)
block|{
name|setInputFormat
argument_list|(
name|tsk
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|task
operator|.
name|getChildTasks
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|childTask
range|:
name|task
operator|.
name|getChildTasks
argument_list|()
control|)
block|{
name|setInputFormat
argument_list|(
name|childTask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// loop over all the tasks recursively
specifier|private
name|void
name|generateCountersTask
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
parameter_list|)
block|{
if|if
condition|(
name|task
operator|instanceof
name|ExecDriver
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|opMap
init|=
operator|(
operator|(
name|MapredWork
operator|)
name|task
operator|.
name|getWork
argument_list|()
operator|)
operator|.
name|getMapWork
argument_list|()
operator|.
name|getAliasToWork
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|opMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|opMap
operator|.
name|values
argument_list|()
control|)
block|{
name|generateCountersOperator
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
operator|(
name|MapredWork
operator|)
name|task
operator|.
name|getWork
argument_list|()
operator|)
operator|.
name|getReduceWork
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|reducer
init|=
operator|(
operator|(
name|MapredWork
operator|)
name|task
operator|.
name|getWork
argument_list|()
operator|)
operator|.
name|getReduceWork
argument_list|()
operator|.
name|getReducer
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Generating counters for operator "
operator|+
name|reducer
argument_list|)
expr_stmt|;
name|generateCountersOperator
argument_list|(
name|reducer
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|task
operator|instanceof
name|ConditionalTask
condition|)
block|{
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|listTasks
init|=
operator|(
operator|(
name|ConditionalTask
operator|)
name|task
operator|)
operator|.
name|getListTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|listTasks
control|)
block|{
name|generateCountersTask
argument_list|(
name|tsk
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Start the counters from scratch - a hack for hadoop 17.
name|Operator
operator|.
name|resetLastEnumUsed
argument_list|()
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|getChildTasks
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|childTask
range|:
name|task
operator|.
name|getChildTasks
argument_list|()
control|)
block|{
name|generateCountersTask
argument_list|(
name|childTask
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|generateCountersOperator
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
parameter_list|)
block|{
name|op
operator|.
name|assignCounterNameToEnum
argument_list|()
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|getChildOperators
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|child
range|:
name|op
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|generateCountersOperator
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ParseContext
name|getParseContext
parameter_list|(
name|ParseContext
name|pCtx
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|)
block|{
return|return
operator|new
name|ParseContext
argument_list|(
name|conf
argument_list|,
name|pCtx
operator|.
name|getQB
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getParseTree
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getOpToPartPruner
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getOpToPartList
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getTopOps
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getTopSelOps
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getOpParseCtx
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getJoinContext
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getSmbMapJoinContext
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getTopToTable
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getTopToProps
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getFsopToTable
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getLoadTableWork
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getLoadFileWork
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getContext
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getIdToTableNameMap
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getDestTableId
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getUCtx
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getListMapJoinOpsNoReducer
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getGroupOpToInputTables
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getPrunedPartitions
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getOpToSamplePruner
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getGlobalLimitCtx
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getNameToSplitSample
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getSemanticInputs
argument_list|()
argument_list|,
name|rootTasks
argument_list|,
name|pCtx
operator|.
name|getOpToPartToSkewedPruner
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getViewAliasToInput
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getReduceSinkOperatorsAddedByEnforceBucketingSorting
argument_list|()
argument_list|,
name|pCtx
operator|.
name|getQueryProperties
argument_list|()
argument_list|)
return|;
block|}
comment|// loop over all the tasks recursively
specifier|private
name|void
name|breakTaskTree
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
parameter_list|)
block|{
if|if
condition|(
name|task
operator|instanceof
name|ExecDriver
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
argument_list|>
name|opMap
init|=
operator|(
operator|(
name|MapredWork
operator|)
name|task
operator|.
name|getWork
argument_list|()
operator|)
operator|.
name|getMapWork
argument_list|()
operator|.
name|getAliasToWork
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|opMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|opMap
operator|.
name|values
argument_list|()
control|)
block|{
name|breakOperatorTree
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|task
operator|instanceof
name|ConditionalTask
condition|)
block|{
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|listTasks
init|=
operator|(
operator|(
name|ConditionalTask
operator|)
name|task
operator|)
operator|.
name|getListTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
range|:
name|listTasks
control|)
block|{
name|breakTaskTree
argument_list|(
name|tsk
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|task
operator|.
name|getChildTasks
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|childTask
range|:
name|task
operator|.
name|getChildTasks
argument_list|()
control|)
block|{
name|breakTaskTree
argument_list|(
name|childTask
argument_list|)
expr_stmt|;
block|}
block|}
comment|// loop over all the operators recursively
specifier|private
name|void
name|breakOperatorTree
parameter_list|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|topOp
parameter_list|)
block|{
if|if
condition|(
name|topOp
operator|instanceof
name|ReduceSinkOperator
condition|)
block|{
name|topOp
operator|.
name|setChildOperators
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|topOp
operator|.
name|getChildOperators
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|op
range|:
name|topOp
operator|.
name|getChildOperators
argument_list|()
control|)
block|{
name|breakOperatorTree
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A helper function to generate a column stats task on top of map-red task. The column stats    * task fetches from the output of the map-red task, constructs the column stats object and    * persists it to the metastore.    *    * This method generates a plan with a column stats task on top of map-red task and sets up the    * appropriate metadata to be used during execution.    *    * @param qb    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|genColumnStatsTask
parameter_list|(
name|QB
name|qb
parameter_list|,
name|List
argument_list|<
name|LoadTableDesc
argument_list|>
name|loadTableWork
parameter_list|,
name|List
argument_list|<
name|LoadFileDesc
argument_list|>
name|loadFileWork
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|)
block|{
name|QBParseInfo
name|qbParseInfo
init|=
name|qb
operator|.
name|getParseInfo
argument_list|()
decl_stmt|;
name|ColumnStatsTask
name|cStatsTask
init|=
literal|null
decl_stmt|;
name|ColumnStatsWork
name|cStatsWork
init|=
literal|null
decl_stmt|;
name|FetchWork
name|fetch
init|=
literal|null
decl_stmt|;
name|String
name|tableName
init|=
name|qbParseInfo
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|partName
init|=
name|qbParseInfo
operator|.
name|getPartName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colName
init|=
name|qbParseInfo
operator|.
name|getColName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colType
init|=
name|qbParseInfo
operator|.
name|getColType
argument_list|()
decl_stmt|;
name|boolean
name|isTblLevel
init|=
name|qbParseInfo
operator|.
name|isTblLvl
argument_list|()
decl_stmt|;
name|String
name|cols
init|=
name|loadFileWork
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumns
argument_list|()
decl_stmt|;
name|String
name|colTypes
init|=
name|loadFileWork
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColumnTypes
argument_list|()
decl_stmt|;
name|String
name|resFileFormat
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYRESULTFILEFORMAT
argument_list|)
decl_stmt|;
name|TableDesc
name|resultTab
init|=
name|PlanUtils
operator|.
name|getDefaultQueryOutputTableDesc
argument_list|(
name|cols
argument_list|,
name|colTypes
argument_list|,
name|resFileFormat
argument_list|)
decl_stmt|;
name|fetch
operator|=
operator|new
name|FetchWork
argument_list|(
operator|new
name|Path
argument_list|(
name|loadFileWork
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSourceDir
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|resultTab
argument_list|,
name|qb
operator|.
name|getParseInfo
argument_list|()
operator|.
name|getOuterQueryLimit
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatsDesc
name|cStatsDesc
init|=
operator|new
name|ColumnStatsDesc
argument_list|(
name|tableName
argument_list|,
name|partName
argument_list|,
name|colName
argument_list|,
name|colType
argument_list|,
name|isTblLevel
argument_list|)
decl_stmt|;
name|cStatsWork
operator|=
operator|new
name|ColumnStatsWork
argument_list|(
name|fetch
argument_list|,
name|cStatsDesc
argument_list|)
expr_stmt|;
name|cStatsTask
operator|=
operator|(
name|ColumnStatsTask
operator|)
name|TaskFactory
operator|.
name|get
argument_list|(
name|cStatsWork
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|rootTasks
operator|.
name|add
argument_list|(
name|cStatsTask
argument_list|)
expr_stmt|;
block|}
comment|/**    * Find all leaf tasks of the list of root tasks.    */
specifier|private
name|void
name|getLeafTasks
parameter_list|(
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|,
name|HashSet
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|leaves
parameter_list|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|root
range|:
name|rootTasks
control|)
block|{
name|getLeafTasks
argument_list|(
name|root
argument_list|,
name|leaves
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|getLeafTasks
parameter_list|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
parameter_list|,
name|HashSet
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|leaves
parameter_list|)
block|{
if|if
condition|(
name|task
operator|.
name|getDependentTasks
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|leaves
operator|.
name|contains
argument_list|(
name|task
argument_list|)
condition|)
block|{
name|leaves
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getLeafTasks
argument_list|(
name|task
operator|.
name|getDependentTasks
argument_list|()
argument_list|,
name|leaves
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Make a best guess at trying to find the number of reducers    */
specifier|private
specifier|static
name|int
name|getNumberOfReducers
parameter_list|(
name|MapredWork
name|mrwork
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
block|{
if|if
condition|(
name|mrwork
operator|.
name|getReduceWork
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|mrwork
operator|.
name|getReduceWork
argument_list|()
operator|.
name|getNumReduceTasks
argument_list|()
operator|>=
literal|0
condition|)
block|{
return|return
name|mrwork
operator|.
name|getReduceWork
argument_list|()
operator|.
name|getNumReduceTasks
argument_list|()
return|;
block|}
return|return
name|conf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPNUMREDUCERS
argument_list|)
return|;
block|}
specifier|private
name|void
name|decideExecMode
parameter_list|(
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|,
name|Context
name|ctx
parameter_list|,
name|GlobalLimitCtx
name|globalLimitCtx
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// bypass for explain queries for now
if|if
condition|(
name|ctx
operator|.
name|getExplain
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// user has told us to run in local mode or doesn't want auto-local mode
if|if
condition|(
name|ctx
operator|.
name|isLocalOnlyExecutionMode
argument_list|()
operator|||
operator|!
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LOCALMODEAUTO
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|Context
name|lCtx
init|=
name|ctx
decl_stmt|;
name|PathFilter
name|p
init|=
operator|new
name|PathFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
return|return
operator|!
name|lCtx
operator|.
name|isMRTmpFileURI
argument_list|(
name|file
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|ExecDriver
argument_list|>
name|mrtasks
init|=
name|Utilities
operator|.
name|getMRTasks
argument_list|(
name|rootTasks
argument_list|)
decl_stmt|;
comment|// map-reduce jobs will be run locally based on data size
comment|// first find out if any of the jobs needs to run non-locally
name|boolean
name|hasNonLocalJob
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ExecDriver
name|mrtask
range|:
name|mrtasks
control|)
block|{
try|try
block|{
name|ContentSummary
name|inputSummary
init|=
name|Utilities
operator|.
name|getInputSummary
argument_list|(
name|ctx
argument_list|,
operator|(
operator|(
name|MapredWork
operator|)
name|mrtask
operator|.
name|getWork
argument_list|()
operator|)
operator|.
name|getMapWork
argument_list|()
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|int
name|numReducers
init|=
name|getNumberOfReducers
argument_list|(
name|mrtask
operator|.
name|getWork
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|long
name|estimatedInput
decl_stmt|;
if|if
condition|(
name|globalLimitCtx
operator|!=
literal|null
operator|&&
name|globalLimitCtx
operator|.
name|isEnable
argument_list|()
condition|)
block|{
comment|// If the global limit optimization is triggered, we will
comment|// estimate input data actually needed based on limit rows.
comment|// estimated Input = (num_limit * max_size_per_row) * (estimated_map + 2)
comment|//
name|long
name|sizePerRow
init|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVELIMITMAXROWSIZE
argument_list|)
decl_stmt|;
name|estimatedInput
operator|=
name|globalLimitCtx
operator|.
name|getGlobalLimit
argument_list|()
operator|*
name|sizePerRow
expr_stmt|;
name|long
name|minSplitSize
init|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMINSPLITSIZE
argument_list|)
decl_stmt|;
name|long
name|estimatedNumMap
init|=
name|inputSummary
operator|.
name|getLength
argument_list|()
operator|/
name|minSplitSize
operator|+
literal|1
decl_stmt|;
name|estimatedInput
operator|=
name|estimatedInput
operator|*
operator|(
name|estimatedNumMap
operator|+
literal|1
operator|)
expr_stmt|;
block|}
else|else
block|{
name|estimatedInput
operator|=
name|inputSummary
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Task: "
operator|+
name|mrtask
operator|.
name|getId
argument_list|()
operator|+
literal|", Summary: "
operator|+
name|inputSummary
operator|.
name|getLength
argument_list|()
operator|+
literal|","
operator|+
name|inputSummary
operator|.
name|getFileCount
argument_list|()
operator|+
literal|","
operator|+
name|numReducers
operator|+
literal|", estimated Input: "
operator|+
name|estimatedInput
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|MapRedTask
operator|.
name|isEligibleForLocalMode
argument_list|(
name|conf
argument_list|,
name|numReducers
argument_list|,
name|estimatedInput
argument_list|,
name|inputSummary
operator|.
name|getFileCount
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|hasNonLocalJob
operator|=
literal|true
expr_stmt|;
break|break;
block|}
else|else
block|{
name|mrtask
operator|.
name|setLocalMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|hasNonLocalJob
condition|)
block|{
comment|// Entire query can be run locally.
comment|// Save the current tracker value and restore it when done.
name|ctx
operator|.
name|setOriginalTracker
argument_list|(
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getJobLauncherRpcAddress
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|setJobLauncherRpcAddress
argument_list|(
name|conf
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"Automatically selecting local only mode for query"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

