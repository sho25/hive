begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ConstantObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"mask"
argument_list|,
name|value
operator|=
literal|"masks the given value"
argument_list|,
name|extended
operator|=
literal|"Examples:\n "
operator|+
literal|"  mask(ccn)\n "
operator|+
literal|"  mask(ccn, 'X', 'x', '0')\n "
operator|+
literal|"  mask(ccn, 'x', 'x', 'x')\n "
operator|+
literal|"Arguments:\n "
operator|+
literal|"  mask(value, upperChar, lowerChar, digitChar, otherChar, numberChar, dayValue, monthValue, yearValue)\n "
operator|+
literal|"    value      - value to mask. Supported types: TINYINT, SMALLINT, INT, BIGINT, STRING, VARCHAR, CHAR, DATE\n "
operator|+
literal|"    upperChar  - character to replace upper-case characters with. Specify -1 to retain original character. Default value: 'X'\n "
operator|+
literal|"    lowerChar  - character to replace lower-case characters with. Specify -1 to retain original character. Default value: 'x'\n "
operator|+
literal|"    digitChar  - character to replace digit characters with. Specify -1 to retain original character. Default value: 'n'\n "
operator|+
literal|"    otherChar  - character to replace all other characters with. Specify -1 to retain original character. Default value: -1\n "
operator|+
literal|"    numberChar - character to replace digits in a number with. Valid values: 0-9. Default value: '1'\n "
operator|+
literal|"    dayValue   - value to replace day field in a date with.  Specify -1 to retain original value. Valid values: 1-31. Default value: 1\n "
operator|+
literal|"    monthValue - value to replace month field in a date with. Specify -1 to retain original value. Valid values: 0-11. Default value: 0\n "
operator|+
literal|"    yearValue  - value to replace year field in a date with. Specify -1 to retain original value. Default value: 0\n "
argument_list|)
specifier|public
class|class
name|GenericUDFMask
extends|extends
name|BaseMaskUDF
block|{
specifier|public
specifier|static
specifier|final
name|String
name|UDF_NAME
init|=
literal|"mask"
decl_stmt|;
specifier|public
name|GenericUDFMask
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|MaskTransformer
argument_list|()
argument_list|,
name|UDF_NAME
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_class
class|class
name|MaskTransformer
extends|extends
name|AbstractTransformer
block|{
specifier|final
specifier|static
name|int
name|MASKED_UPPERCASE
init|=
literal|'X'
decl_stmt|;
specifier|final
specifier|static
name|int
name|MASKED_LOWERCASE
init|=
literal|'x'
decl_stmt|;
specifier|final
specifier|static
name|int
name|MASKED_DIGIT
init|=
literal|'n'
decl_stmt|;
specifier|final
specifier|static
name|int
name|MASKED_OTHER_CHAR
init|=
operator|-
literal|1
decl_stmt|;
specifier|final
specifier|static
name|int
name|MASKED_NUMBER
init|=
literal|1
decl_stmt|;
specifier|final
specifier|static
name|int
name|MASKED_DAY_COMPONENT_VAL
init|=
literal|1
decl_stmt|;
specifier|final
specifier|static
name|int
name|MASKED_MONTH_COMPONENT_VAL
init|=
literal|0
decl_stmt|;
specifier|final
specifier|static
name|int
name|MASKED_YEAR_COMPONENT_VAL
init|=
literal|0
decl_stmt|;
specifier|final
specifier|static
name|int
name|UNMASKED_VAL
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|maskedUpperChar
init|=
name|MASKED_UPPERCASE
decl_stmt|;
name|int
name|maskedLowerChar
init|=
name|MASKED_LOWERCASE
decl_stmt|;
name|int
name|maskedDigitChar
init|=
name|MASKED_DIGIT
decl_stmt|;
name|int
name|maskedOtherChar
init|=
name|MASKED_OTHER_CHAR
decl_stmt|;
name|int
name|maskedNumber
init|=
name|MASKED_NUMBER
decl_stmt|;
name|int
name|maskedDayValue
init|=
name|MASKED_DAY_COMPONENT_VAL
decl_stmt|;
name|int
name|maskedMonthValue
init|=
name|MASKED_MONTH_COMPONENT_VAL
decl_stmt|;
name|int
name|maskedYearValue
init|=
name|MASKED_YEAR_COMPONENT_VAL
decl_stmt|;
specifier|public
name|MaskTransformer
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|,
name|int
name|startIdx
parameter_list|)
block|{
name|int
name|idx
init|=
name|startIdx
decl_stmt|;
name|maskedUpperChar
operator|=
name|getCharArg
argument_list|(
name|arguments
argument_list|,
name|idx
operator|++
argument_list|,
name|MASKED_UPPERCASE
argument_list|)
expr_stmt|;
name|maskedLowerChar
operator|=
name|getCharArg
argument_list|(
name|arguments
argument_list|,
name|idx
operator|++
argument_list|,
name|MASKED_LOWERCASE
argument_list|)
expr_stmt|;
name|maskedDigitChar
operator|=
name|getCharArg
argument_list|(
name|arguments
argument_list|,
name|idx
operator|++
argument_list|,
name|MASKED_DIGIT
argument_list|)
expr_stmt|;
name|maskedOtherChar
operator|=
name|getCharArg
argument_list|(
name|arguments
argument_list|,
name|idx
operator|++
argument_list|,
name|MASKED_OTHER_CHAR
argument_list|)
expr_stmt|;
name|maskedNumber
operator|=
name|getIntArg
argument_list|(
name|arguments
argument_list|,
name|idx
operator|++
argument_list|,
name|MASKED_NUMBER
argument_list|)
expr_stmt|;
name|maskedDayValue
operator|=
name|getIntArg
argument_list|(
name|arguments
argument_list|,
name|idx
operator|++
argument_list|,
name|MASKED_DAY_COMPONENT_VAL
argument_list|)
expr_stmt|;
name|maskedMonthValue
operator|=
name|getIntArg
argument_list|(
name|arguments
argument_list|,
name|idx
operator|++
argument_list|,
name|MASKED_MONTH_COMPONENT_VAL
argument_list|)
expr_stmt|;
name|maskedYearValue
operator|=
name|getIntArg
argument_list|(
name|arguments
argument_list|,
name|idx
operator|++
argument_list|,
name|MASKED_YEAR_COMPONENT_VAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|maskedNumber
argument_list|<
literal|0
operator|||
name|maskedNumber
argument_list|>
literal|9
condition|)
block|{
name|maskedNumber
operator|=
name|MASKED_NUMBER
expr_stmt|;
block|}
if|if
condition|(
name|maskedDayValue
operator|!=
name|UNMASKED_VAL
condition|)
block|{
if|if
condition|(
name|maskedDayValue
argument_list|<
literal|1
operator|||
name|maskedDayValue
argument_list|>
literal|31
condition|)
block|{
name|maskedDayValue
operator|=
name|MASKED_DAY_COMPONENT_VAL
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maskedMonthValue
operator|!=
name|UNMASKED_VAL
condition|)
block|{
if|if
condition|(
name|maskedMonthValue
argument_list|<
literal|0
operator|||
name|maskedMonthValue
argument_list|>
literal|11
condition|)
block|{
name|maskedMonthValue
operator|=
name|MASKED_MONTH_COMPONENT_VAL
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|String
name|transform
parameter_list|(
specifier|final
name|String
name|val
parameter_list|)
block|{
name|StringBuilder
name|ret
init|=
operator|new
name|StringBuilder
argument_list|(
name|val
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|val
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|.
name|appendCodePoint
argument_list|(
name|transformChar
argument_list|(
name|val
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
name|Byte
name|transform
parameter_list|(
specifier|final
name|Byte
name|value
parameter_list|)
block|{
name|byte
name|val
init|=
name|value
decl_stmt|;
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
name|val
operator|*=
operator|-
literal|1
expr_stmt|;
block|}
name|byte
name|ret
init|=
literal|0
decl_stmt|;
name|int
name|pos
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|val
operator|!=
literal|0
condition|)
block|{
name|ret
operator|+=
name|maskedNumber
operator|*
name|pos
expr_stmt|;
name|val
operator|/=
literal|10
expr_stmt|;
name|pos
operator|*=
literal|10
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
name|ret
operator|*=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
name|Short
name|transform
parameter_list|(
specifier|final
name|Short
name|value
parameter_list|)
block|{
name|short
name|val
init|=
name|value
decl_stmt|;
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
name|val
operator|*=
operator|-
literal|1
expr_stmt|;
block|}
name|short
name|ret
init|=
literal|0
decl_stmt|;
name|int
name|pos
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|val
operator|!=
literal|0
condition|)
block|{
name|ret
operator|+=
name|maskedNumber
operator|*
name|pos
expr_stmt|;
name|val
operator|/=
literal|10
expr_stmt|;
name|pos
operator|*=
literal|10
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
name|ret
operator|*=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
name|Integer
name|transform
parameter_list|(
specifier|final
name|Integer
name|value
parameter_list|)
block|{
name|int
name|val
init|=
name|value
decl_stmt|;
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
name|val
operator|*=
operator|-
literal|1
expr_stmt|;
block|}
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|int
name|pos
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|val
operator|!=
literal|0
condition|)
block|{
name|ret
operator|+=
name|maskedNumber
operator|*
name|pos
expr_stmt|;
name|val
operator|/=
literal|10
expr_stmt|;
name|pos
operator|*=
literal|10
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
name|ret
operator|*=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
name|Long
name|transform
parameter_list|(
specifier|final
name|Long
name|value
parameter_list|)
block|{
name|long
name|val
init|=
name|value
decl_stmt|;
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
name|val
operator|*=
operator|-
literal|1
expr_stmt|;
block|}
name|long
name|ret
init|=
literal|0
decl_stmt|;
name|long
name|pos
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|val
operator|!=
literal|0
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|+=
name|maskedNumber
operator|*
name|pos
expr_stmt|;
name|val
operator|/=
literal|10
expr_stmt|;
name|pos
operator|*=
literal|10
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
name|ret
operator|*=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
name|Date
name|transform
parameter_list|(
specifier|final
name|Date
name|value
parameter_list|)
block|{
name|int
name|year
init|=
name|maskedYearValue
operator|==
name|UNMASKED_VAL
condition|?
name|value
operator|.
name|getYear
argument_list|()
else|:
name|maskedYearValue
decl_stmt|;
name|int
name|month
init|=
name|maskedMonthValue
operator|==
name|UNMASKED_VAL
condition|?
name|value
operator|.
name|getMonth
argument_list|()
else|:
name|maskedMonthValue
decl_stmt|;
name|int
name|day
init|=
name|maskedDayValue
operator|==
name|UNMASKED_VAL
condition|?
name|value
operator|.
name|getDate
argument_list|()
else|:
name|maskedDayValue
decl_stmt|;
return|return
operator|new
name|Date
argument_list|(
name|year
argument_list|,
name|month
argument_list|,
name|day
argument_list|)
return|;
block|}
specifier|protected
name|int
name|transformChar
parameter_list|(
specifier|final
name|int
name|c
parameter_list|)
block|{
switch|switch
condition|(
name|Character
operator|.
name|getType
argument_list|(
name|c
argument_list|)
condition|)
block|{
case|case
name|Character
operator|.
name|UPPERCASE_LETTER
case|:
if|if
condition|(
name|maskedUpperChar
operator|!=
name|UNMASKED_VAL
condition|)
block|{
return|return
name|maskedUpperChar
return|;
block|}
break|break;
case|case
name|Character
operator|.
name|LOWERCASE_LETTER
case|:
if|if
condition|(
name|maskedLowerChar
operator|!=
name|UNMASKED_VAL
condition|)
block|{
return|return
name|maskedLowerChar
return|;
block|}
break|break;
case|case
name|Character
operator|.
name|DECIMAL_DIGIT_NUMBER
case|:
if|if
condition|(
name|maskedDigitChar
operator|!=
name|UNMASKED_VAL
condition|)
block|{
return|return
name|maskedDigitChar
return|;
block|}
break|break;
default|default:
if|if
condition|(
name|maskedOtherChar
operator|!=
name|UNMASKED_VAL
condition|)
block|{
return|return
name|maskedOtherChar
return|;
block|}
break|break;
block|}
return|return
name|c
return|;
block|}
name|int
name|getCharArg
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|int
name|ret
init|=
name|defaultValue
decl_stmt|;
name|ObjectInspector
name|arg
init|=
operator|(
name|arguments
operator|!=
literal|null
operator|&&
name|arguments
operator|.
name|length
operator|>
name|index
operator|)
condition|?
name|arguments
index|[
name|index
index|]
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|arg
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|arg
operator|instanceof
name|WritableConstantIntObjectInspector
condition|)
block|{
name|IntWritable
name|value
init|=
operator|(
operator|(
name|WritableConstantIntObjectInspector
operator|)
name|arg
operator|)
operator|.
name|getWritableConstantValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|value
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|arg
operator|instanceof
name|WritableConstantLongObjectInspector
condition|)
block|{
name|LongWritable
name|value
init|=
operator|(
operator|(
name|WritableConstantLongObjectInspector
operator|)
name|arg
operator|)
operator|.
name|getWritableConstantValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
operator|(
name|int
operator|)
name|value
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|arg
operator|instanceof
name|WritableConstantShortObjectInspector
condition|)
block|{
name|ShortWritable
name|value
init|=
operator|(
operator|(
name|WritableConstantShortObjectInspector
operator|)
name|arg
operator|)
operator|.
name|getWritableConstantValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|value
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|arg
operator|instanceof
name|ConstantObjectInspector
condition|)
block|{
name|Object
name|value
init|=
operator|(
operator|(
name|ConstantObjectInspector
operator|)
name|arg
operator|)
operator|.
name|getWritableConstantValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|String
name|strValue
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|strValue
operator|!=
literal|null
operator|&&
name|strValue
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ret
operator|=
name|strValue
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
name|int
name|getIntArg
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|int
name|ret
init|=
name|defaultValue
decl_stmt|;
name|ObjectInspector
name|arg
init|=
operator|(
name|arguments
operator|!=
literal|null
operator|&&
name|arguments
operator|.
name|length
operator|>
name|index
operator|)
condition|?
name|arguments
index|[
name|index
index|]
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|arg
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|arg
operator|instanceof
name|WritableConstantIntObjectInspector
condition|)
block|{
name|IntWritable
name|value
init|=
operator|(
operator|(
name|WritableConstantIntObjectInspector
operator|)
name|arg
operator|)
operator|.
name|getWritableConstantValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|value
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|arg
operator|instanceof
name|WritableConstantLongObjectInspector
condition|)
block|{
name|LongWritable
name|value
init|=
operator|(
operator|(
name|WritableConstantLongObjectInspector
operator|)
name|arg
operator|)
operator|.
name|getWritableConstantValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
operator|(
name|int
operator|)
name|value
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|arg
operator|instanceof
name|WritableConstantShortObjectInspector
condition|)
block|{
name|ShortWritable
name|value
init|=
operator|(
operator|(
name|WritableConstantShortObjectInspector
operator|)
name|arg
operator|)
operator|.
name|getWritableConstantValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|value
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|arg
operator|instanceof
name|ConstantObjectInspector
condition|)
block|{
name|Object
name|value
init|=
operator|(
operator|(
name|ConstantObjectInspector
operator|)
name|arg
operator|)
operator|.
name|getWritableConstantValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|String
name|strValue
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|strValue
operator|!=
literal|null
operator|&&
name|strValue
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ret
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

