begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Helper class to create UDFClassLoader when running under a security manager. To create a class loader:  *> AddToClassPathAction addAction = new AddToClassPathAction(parentLoader, newPaths, true);  *> UDFClassLoader childClassLoader = AccessController.doPrivileged(addAction);  * To try to add to the class path of the existing class loader; call the above without forceNewClassLoader=true.  * Note that a class loader might be still created as fallback method.  *<p>  * This is slightly inconvenient, but forces the caller code to make the doPriviliged call, rather than us making the  * call on the caller's behalf, in accordance with the security guidelines at:  * https://docs.oracle.com/javase/8/docs/technotes/guides/security/doprivileged.html  */
end_comment

begin_class
specifier|public
class|class
name|AddToClassPathAction
implements|implements
name|PrivilegedAction
argument_list|<
name|UDFClassLoader
argument_list|>
block|{
specifier|private
specifier|final
name|ClassLoader
name|parentLoader
decl_stmt|;
specifier|private
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|newPaths
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|forceNewClassLoader
decl_stmt|;
specifier|public
name|AddToClassPathAction
parameter_list|(
name|ClassLoader
name|parentLoader
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|newPaths
parameter_list|,
name|boolean
name|forceNewClassLoader
parameter_list|)
block|{
name|this
operator|.
name|parentLoader
operator|=
name|parentLoader
expr_stmt|;
name|this
operator|.
name|newPaths
operator|=
name|newPaths
operator|!=
literal|null
condition|?
name|newPaths
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|this
operator|.
name|forceNewClassLoader
operator|=
name|forceNewClassLoader
expr_stmt|;
if|if
condition|(
name|parentLoader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"UDFClassLoader is not designed to be a bootstrap class loader!"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AddToClassPathAction
parameter_list|(
name|ClassLoader
name|parentLoader
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|newPaths
parameter_list|)
block|{
name|this
argument_list|(
name|parentLoader
argument_list|,
name|newPaths
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|UDFClassLoader
name|run
parameter_list|()
block|{
if|if
condition|(
name|useExistingClassLoader
argument_list|()
condition|)
block|{
specifier|final
name|UDFClassLoader
name|udfClassLoader
init|=
operator|(
name|UDFClassLoader
operator|)
name|parentLoader
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|newPaths
control|)
block|{
name|udfClassLoader
operator|.
name|addURL
argument_list|(
name|Utilities
operator|.
name|urlFromPathString
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|udfClassLoader
return|;
block|}
else|else
block|{
return|return
name|createUDFClassLoader
argument_list|()
return|;
block|}
block|}
specifier|private
name|boolean
name|useExistingClassLoader
parameter_list|()
block|{
if|if
condition|(
operator|!
name|forceNewClassLoader
operator|&&
name|parentLoader
operator|instanceof
name|UDFClassLoader
condition|)
block|{
specifier|final
name|UDFClassLoader
name|udfClassLoader
init|=
operator|(
name|UDFClassLoader
operator|)
name|parentLoader
decl_stmt|;
comment|// The classloader may have been closed, Cannot add to the same instance
return|return
operator|!
name|udfClassLoader
operator|.
name|isClosed
argument_list|()
return|;
block|}
comment|// Cannot use the same classloader if it is not an instance of {@code UDFClassLoader}, or new loader was explicily
comment|// requested
return|return
literal|false
return|;
block|}
specifier|private
name|UDFClassLoader
name|createUDFClassLoader
parameter_list|()
block|{
return|return
operator|new
name|UDFClassLoader
argument_list|(
name|newPaths
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Utilities
operator|::
name|urlFromPathString
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|toArray
argument_list|(
name|URL
index|[]
operator|::
operator|new
argument_list|)
argument_list|,
name|parentLoader
argument_list|)
return|;
block|}
block|}
end_class

end_unit

