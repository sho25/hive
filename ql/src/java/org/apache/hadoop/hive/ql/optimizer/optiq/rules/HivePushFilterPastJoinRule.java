begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|optiq
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|optiq
operator|.
name|reloperators
operator|.
name|HiveFilterRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|optiq
operator|.
name|reloperators
operator|.
name|HiveProjectRel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|FilterRelBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|JoinRelBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rel
operator|.
name|rules
operator|.
name|PushFilterPastJoinRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptRuleOperand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|relopt
operator|.
name|RelOptUtil
operator|.
name|InputFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eigenbase
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|HivePushFilterPastJoinRule
extends|extends
name|PushFilterPastJoinRule
block|{
specifier|public
specifier|static
specifier|final
name|HivePushFilterPastJoinRule
name|FILTER_ON_JOIN
init|=
operator|new
name|HivePushFilterIntoJoinRule
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|HivePushFilterPastJoinRule
name|JOIN
init|=
operator|new
name|HivePushDownJoinConditionRule
argument_list|()
decl_stmt|;
comment|/** 	 * Creates a PushFilterPastJoinRule with an explicit root operand. 	 */
specifier|protected
name|HivePushFilterPastJoinRule
parameter_list|(
name|RelOptRuleOperand
name|operand
parameter_list|,
name|String
name|id
parameter_list|,
name|boolean
name|smart
parameter_list|,
name|RelFactories
operator|.
name|FilterFactory
name|filterFactory
parameter_list|,
name|RelFactories
operator|.
name|ProjectFactory
name|projectFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|,
name|id
argument_list|,
name|smart
argument_list|,
name|filterFactory
argument_list|,
name|projectFactory
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Rule that tries to push filter expressions into a join condition and into 	 * the inputs of the join. 	 */
specifier|public
specifier|static
class|class
name|HivePushFilterIntoJoinRule
extends|extends
name|HivePushFilterPastJoinRule
block|{
specifier|public
name|HivePushFilterIntoJoinRule
parameter_list|()
block|{
name|super
argument_list|(
name|RelOptRule
operator|.
name|operand
argument_list|(
name|FilterRelBase
operator|.
name|class
argument_list|,
name|RelOptRule
operator|.
name|operand
argument_list|(
name|JoinRelBase
operator|.
name|class
argument_list|,
name|RelOptRule
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|"HivePushFilterPastJoinRule:filter"
argument_list|,
literal|true
argument_list|,
name|HiveFilterRel
operator|.
name|DEFAULT_FILTER_FACTORY
argument_list|,
name|HiveProjectRel
operator|.
name|DEFAULT_PROJECT_FACTORY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|FilterRelBase
name|filter
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|JoinRelBase
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|super
operator|.
name|perform
argument_list|(
name|call
argument_list|,
name|filter
argument_list|,
name|join
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|HivePushDownJoinConditionRule
extends|extends
name|HivePushFilterPastJoinRule
block|{
specifier|public
name|HivePushDownJoinConditionRule
parameter_list|()
block|{
name|super
argument_list|(
name|RelOptRule
operator|.
name|operand
argument_list|(
name|JoinRelBase
operator|.
name|class
argument_list|,
name|RelOptRule
operator|.
name|any
argument_list|()
argument_list|)
argument_list|,
literal|"HivePushFilterPastJoinRule:no-filter"
argument_list|,
literal|true
argument_list|,
name|HiveFilterRel
operator|.
name|DEFAULT_FILTER_FACTORY
argument_list|,
name|HiveProjectRel
operator|.
name|DEFAULT_PROJECT_FACTORY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|JoinRelBase
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|super
operator|.
name|perform
argument_list|(
name|call
argument_list|,
literal|null
argument_list|,
name|join
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* 	 * Any predicates pushed down to joinFilters that aren't equality 	 * conditions: put them back as aboveFilters because Hive doesn't support 	 * not equi join conditions. 	 */
annotation|@
name|Override
specifier|protected
name|void
name|validateJoinFilters
parameter_list|(
name|List
argument_list|<
name|RexNode
argument_list|>
name|aboveFilters
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|joinFilters
parameter_list|,
name|JoinRelBase
name|join
parameter_list|)
block|{
name|ListIterator
argument_list|<
name|RexNode
argument_list|>
name|filterIter
init|=
name|joinFilters
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|filterIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RexNode
name|exp
init|=
name|filterIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|exp
operator|instanceof
name|RexCall
condition|)
block|{
name|RexCall
name|c
init|=
operator|(
name|RexCall
operator|)
name|exp
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getOperator
argument_list|()
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|EQUALS
condition|)
block|{
name|boolean
name|validHiveJoinFilter
init|=
literal|true
decl_stmt|;
for|for
control|(
name|RexNode
name|rn
range|:
name|c
operator|.
name|getOperands
argument_list|()
control|)
block|{
comment|// NOTE: Hive dis-allows projections from both left&
comment|// right side
comment|// of join condition. Example: Hive disallows
comment|// (r1.x=r2.x)=(r1.y=r2.y) on join condition.
if|if
condition|(
name|filterRefersToBothSidesOfJoin
argument_list|(
name|rn
argument_list|,
name|join
argument_list|)
condition|)
block|{
name|validHiveJoinFilter
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|validHiveJoinFilter
condition|)
continue|continue;
block|}
block|}
name|aboveFilters
operator|.
name|add
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|filterIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|filterRefersToBothSidesOfJoin
parameter_list|(
name|RexNode
name|filter
parameter_list|,
name|JoinRelBase
name|j
parameter_list|)
block|{
name|boolean
name|refersToBothSides
init|=
literal|false
decl_stmt|;
name|int
name|joinNoOfProjects
init|=
name|j
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
name|BitSet
name|filterProjs
init|=
operator|new
name|BitSet
argument_list|(
name|joinNoOfProjects
argument_list|)
decl_stmt|;
name|BitSet
name|allLeftProjs
init|=
operator|new
name|BitSet
argument_list|(
name|joinNoOfProjects
argument_list|)
decl_stmt|;
name|BitSet
name|allRightProjs
init|=
operator|new
name|BitSet
argument_list|(
name|joinNoOfProjects
argument_list|)
decl_stmt|;
name|allLeftProjs
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|j
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|allRightProjs
operator|.
name|set
argument_list|(
name|j
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldCount
argument_list|()
argument_list|,
name|joinNoOfProjects
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|InputFinder
name|inputFinder
init|=
operator|new
name|InputFinder
argument_list|(
name|filterProjs
argument_list|)
decl_stmt|;
name|filter
operator|.
name|accept
argument_list|(
name|inputFinder
argument_list|)
expr_stmt|;
if|if
condition|(
name|allLeftProjs
operator|.
name|intersects
argument_list|(
name|filterProjs
argument_list|)
operator|&&
name|allRightProjs
operator|.
name|intersects
argument_list|(
name|filterProjs
argument_list|)
condition|)
name|refersToBothSides
operator|=
literal|true
expr_stmt|;
return|return
name|refersToBothSides
return|;
block|}
block|}
end_class

begin_comment
comment|// End PushFilterPastJoinRule.java
end_comment

end_unit

