begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|cache
operator|.
name|results
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|cache
operator|.
name|results
operator|.
name|QueryResultsCache
operator|.
name|CacheEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|cache
operator|.
name|results
operator|.
name|QueryResultsCache
operator|.
name|QueryInfo
import|;
end_import

begin_comment
comment|/**  * Helper class during semantic analysis that indicates if the query can use the cache,  * or if the results from the query can be added to the results cache.  */
end_comment

begin_class
specifier|public
class|class
name|CacheUsage
block|{
specifier|public
enum|enum
name|CacheStatus
block|{
name|CACHE_NOT_USED
block|,
name|QUERY_USING_CACHE
block|,
name|CAN_CACHE_QUERY_RESULTS
block|,   }
empty_stmt|;
specifier|private
name|CacheUsage
operator|.
name|CacheStatus
name|status
decl_stmt|;
specifier|private
name|CacheEntry
name|cacheEntry
decl_stmt|;
specifier|private
name|QueryInfo
name|queryInfo
decl_stmt|;
specifier|public
name|CacheUsage
parameter_list|(
name|CacheStatus
name|status
parameter_list|,
name|CacheEntry
name|cacheEntry
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|cacheEntry
operator|=
name|cacheEntry
expr_stmt|;
block|}
specifier|public
name|CacheUsage
parameter_list|(
name|CacheStatus
name|status
parameter_list|,
name|QueryInfo
name|queryInfo
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|queryInfo
operator|=
name|queryInfo
expr_stmt|;
block|}
specifier|public
name|CacheUsage
operator|.
name|CacheStatus
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
specifier|public
name|void
name|setStatus
parameter_list|(
name|CacheUsage
operator|.
name|CacheStatus
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
specifier|public
name|CacheEntry
name|getCacheEntry
parameter_list|()
block|{
return|return
name|cacheEntry
return|;
block|}
specifier|public
name|void
name|setCacheEntry
parameter_list|(
name|CacheEntry
name|cacheEntry
parameter_list|)
block|{
name|this
operator|.
name|cacheEntry
operator|=
name|cacheEntry
expr_stmt|;
block|}
specifier|public
name|QueryInfo
name|getQueryInfo
parameter_list|()
block|{
return|return
name|queryInfo
return|;
block|}
specifier|public
name|void
name|setQueryInfo
parameter_list|(
name|QueryInfo
name|queryInfo
parameter_list|)
block|{
name|this
operator|.
name|queryInfo
operator|=
name|queryInfo
expr_stmt|;
block|}
block|}
end_class

end_unit

