begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|dump
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ReplicationSpec
import|;
end_import

begin_comment
comment|/**  * The idea for this class is that since we need to make sure that  * we query the replication id from the db before we do any queries  * to get the object from metastore like tables/functions/partitions etc  * we are devising this wrapper to wrap all such ordering of statements here.  */
end_comment

begin_class
specifier|public
class|class
name|HiveWrapper
block|{
specifier|private
specifier|final
name|Hive
name|db
decl_stmt|;
specifier|private
specifier|final
name|String
name|dbName
decl_stmt|;
specifier|private
specifier|final
name|Tuple
operator|.
name|Function
argument_list|<
name|ReplicationSpec
argument_list|>
name|functionForSpec
decl_stmt|;
specifier|public
name|HiveWrapper
parameter_list|(
name|Hive
name|db
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|functionForSpec
operator|=
operator|new
name|BootStrapReplicationSpecFunction
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Tuple
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
argument_list|>
name|function
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|functionForSpec
argument_list|,
parameter_list|()
lambda|->
name|db
operator|.
name|getFunction
argument_list|(
name|dbName
argument_list|,
name|name
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Tuple
argument_list|<
name|Database
argument_list|>
name|database
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|functionForSpec
argument_list|,
parameter_list|()
lambda|->
name|db
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Tuple
argument_list|<
name|Table
argument_list|>
name|table
parameter_list|(
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|functionForSpec
argument_list|,
parameter_list|()
lambda|->
name|db
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|Tuple
parameter_list|<
name|T
parameter_list|>
block|{
interface|interface
name|Function
parameter_list|<
name|T
parameter_list|>
block|{
name|T
name|fromMetaStore
parameter_list|()
throws|throws
name|HiveException
function_decl|;
block|}
specifier|public
specifier|final
name|ReplicationSpec
name|replicationSpec
decl_stmt|;
specifier|public
specifier|final
name|T
name|object
decl_stmt|;
comment|/**      * we have to get the replicationspec before we query for the function object      * from the hive metastore as the spec creation captures the latest event id for replication      * and we dont want to miss any events hence we are ok replaying some events as part of      * incremental load to achieve a consistent state of the warehouse.      */
name|Tuple
parameter_list|(
name|Function
argument_list|<
name|ReplicationSpec
argument_list|>
name|replicationSpecFunction
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|>
name|functionForObject
parameter_list|)
throws|throws
name|HiveException
block|{
name|this
operator|.
name|replicationSpec
operator|=
name|replicationSpecFunction
operator|.
name|fromMetaStore
argument_list|()
expr_stmt|;
name|this
operator|.
name|object
operator|=
name|functionForObject
operator|.
name|fromMetaStore
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

