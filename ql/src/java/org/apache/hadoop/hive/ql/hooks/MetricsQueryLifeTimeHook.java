begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsConstant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsScope
import|;
end_import

begin_comment
comment|/**  * LifeTimeHook gathering metrics for the query lifecycle if the  * metrics are enabled  */
end_comment

begin_class
specifier|public
class|class
name|MetricsQueryLifeTimeHook
implements|implements
name|QueryLifeTimeHook
block|{
specifier|private
name|Metrics
name|metrics
init|=
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
name|MetricsScope
name|compilingQryScp
decl_stmt|;
specifier|private
name|MetricsScope
name|executingQryScp
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|beforeCompile
parameter_list|(
name|QueryLifeTimeHookContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|compilingQryScp
operator|=
name|metrics
operator|.
name|createScope
argument_list|(
name|MetricsConstant
operator|.
name|HS2_COMPILING_QUERIES
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCompile
parameter_list|(
name|QueryLifeTimeHookContext
name|ctx
parameter_list|,
name|boolean
name|hasError
parameter_list|)
block|{
if|if
condition|(
name|metrics
operator|!=
literal|null
operator|&&
name|compilingQryScp
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|endScope
argument_list|(
name|compilingQryScp
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeExecution
parameter_list|(
name|QueryLifeTimeHookContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|executingQryScp
operator|=
name|metrics
operator|.
name|createScope
argument_list|(
name|MetricsConstant
operator|.
name|HS2_EXECUTING_QUERIES
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterExecution
parameter_list|(
name|QueryLifeTimeHookContext
name|ctx
parameter_list|,
name|boolean
name|hasError
parameter_list|)
block|{
if|if
condition|(
name|metrics
operator|!=
literal|null
operator|&&
name|executingQryScp
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|endScope
argument_list|(
name|executingQryScp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

