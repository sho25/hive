begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ReplChangeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|CopyUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CopyUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxCopyFileSize
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxNumberOfFiles
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|hiveInTest
decl_stmt|;
specifier|private
specifier|final
name|String
name|copyAsUser
decl_stmt|;
specifier|private
specifier|final
name|int
name|MAX_COPY_RETRY
init|=
literal|3
decl_stmt|;
specifier|public
name|CopyUtils
parameter_list|(
name|String
name|distCpDoAsUser
parameter_list|,
name|HiveConf
name|hiveConf
parameter_list|)
block|{
name|this
operator|.
name|hiveConf
operator|=
name|hiveConf
expr_stmt|;
name|maxNumberOfFiles
operator|=
name|hiveConf
operator|.
name|getLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_COPYFILE_MAXNUMFILES
argument_list|)
expr_stmt|;
name|maxCopyFileSize
operator|=
name|hiveConf
operator|.
name|getLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_COPYFILE_MAXSIZE
argument_list|)
expr_stmt|;
name|hiveInTest
operator|=
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
expr_stmt|;
name|this
operator|.
name|copyAsUser
operator|=
name|distCpDoAsUser
expr_stmt|;
block|}
comment|// Used by replication, copy files from source to destination. It is possible source file is
comment|// changed/removed during copy, so double check the checksum after copy,
comment|// if not match, copy again from cm
specifier|public
name|void
name|copyAndVerify
parameter_list|(
name|Path
name|destination
parameter_list|,
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
name|srcFiles
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|Map
argument_list|<
name|FileSystem
argument_list|,
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
argument_list|>
name|map
init|=
name|fsToFileMap
argument_list|(
name|srcFiles
argument_list|)
decl_stmt|;
name|FileSystem
name|destinationFs
init|=
name|destination
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|FileSystem
argument_list|,
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|FileSystem
name|sourceFs
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
name|fileInfoList
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|boolean
name|useRegularCopy
init|=
name|regularCopy
argument_list|(
name|destinationFs
argument_list|,
name|sourceFs
argument_list|,
name|fileInfoList
argument_list|)
decl_stmt|;
name|doCopyRetry
argument_list|(
name|sourceFs
argument_list|,
name|fileInfoList
argument_list|,
name|destinationFs
argument_list|,
name|destination
argument_list|,
name|useRegularCopy
argument_list|)
expr_stmt|;
comment|// Verify checksum, retry if checksum changed
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
name|retryFileInfoList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReplChangeManager
operator|.
name|FileInfo
name|srcFile
range|:
name|srcFiles
control|)
block|{
if|if
condition|(
operator|!
name|srcFile
operator|.
name|isUseSourcePath
argument_list|()
condition|)
block|{
comment|// If already use cmpath, nothing we can do here, skip this file
continue|continue;
block|}
name|String
name|sourceChecksumString
init|=
name|srcFile
operator|.
name|getCheckSum
argument_list|()
decl_stmt|;
if|if
condition|(
name|sourceChecksumString
operator|!=
literal|null
condition|)
block|{
name|String
name|verifySourceChecksumString
decl_stmt|;
try|try
block|{
name|verifySourceChecksumString
operator|=
name|ReplChangeManager
operator|.
name|checksumFor
argument_list|(
name|srcFile
operator|.
name|getSourcePath
argument_list|()
argument_list|,
name|sourceFs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Retry with CM path
name|verifySourceChecksumString
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|verifySourceChecksumString
operator|==
literal|null
operator|)
operator|||
operator|!
name|sourceChecksumString
operator|.
name|equals
argument_list|(
name|verifySourceChecksumString
argument_list|)
condition|)
block|{
comment|// If checksum does not match, likely the file is changed/removed, copy again from cm
name|srcFile
operator|.
name|setIsUseSourcePath
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|retryFileInfoList
operator|.
name|add
argument_list|(
name|srcFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|retryFileInfoList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|doCopyRetry
argument_list|(
name|sourceFs
argument_list|,
name|retryFileInfoList
argument_list|,
name|destinationFs
argument_list|,
name|destination
argument_list|,
name|useRegularCopy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doCopyRetry
parameter_list|(
name|FileSystem
name|sourceFs
parameter_list|,
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
name|fileList
parameter_list|,
name|FileSystem
name|destinationFs
parameter_list|,
name|Path
name|destination
parameter_list|,
name|boolean
name|useRegularCopy
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|int
name|repeat
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|pathList
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|fileList
argument_list|,
name|fileInfo
lambda|->
block|{
return|return
name|fileInfo
operator|.
name|getEffectivePath
argument_list|()
return|;
block|}
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|pathList
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|repeat
operator|<
name|MAX_COPY_RETRY
operator|)
condition|)
block|{
try|try
block|{
name|doCopyOnce
argument_list|(
name|sourceFs
argument_list|,
name|pathList
argument_list|,
name|destinationFs
argument_list|,
name|destination
argument_list|,
name|useRegularCopy
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|pathList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
comment|// Going through file list, retry with CM if applicable
for|for
control|(
name|ReplChangeManager
operator|.
name|FileInfo
name|file
range|:
name|fileList
control|)
block|{
name|Path
name|copyPath
init|=
name|file
operator|.
name|getEffectivePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|destinationFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|destination
argument_list|,
name|copyPath
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|sourceFs
operator|.
name|exists
argument_list|(
name|copyPath
argument_list|)
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|isUseSourcePath
argument_list|()
condition|)
block|{
comment|// Source file missing, then try with CM path
name|file
operator|.
name|setIsUseSourcePath
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// CM path itself is missing, so, cannot recover from this error
throw|throw
name|e
throw|;
block|}
block|}
name|pathList
operator|.
name|add
argument_list|(
name|file
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|repeat
operator|++
expr_stmt|;
block|}
block|}
comment|// Copy without retry
specifier|private
name|void
name|doCopyOnce
parameter_list|(
name|FileSystem
name|sourceFs
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|srcList
parameter_list|,
name|FileSystem
name|destinationFs
parameter_list|,
name|Path
name|destination
parameter_list|,
name|boolean
name|useRegularCopy
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|UserGroupInformation
name|ugi
init|=
name|Utils
operator|.
name|getUGI
argument_list|()
decl_stmt|;
name|String
name|currentUser
init|=
name|ugi
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|boolean
name|usePrivilegedDistCp
init|=
name|copyAsUser
operator|!=
literal|null
operator|&&
operator|!
name|currentUser
operator|.
name|equals
argument_list|(
name|copyAsUser
argument_list|)
decl_stmt|;
if|if
condition|(
name|useRegularCopy
condition|)
block|{
name|Path
index|[]
name|paths
init|=
name|srcList
operator|.
name|toArray
argument_list|(
operator|new
name|Path
index|[]
block|{}
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|sourceFs
argument_list|,
name|paths
argument_list|,
name|destinationFs
argument_list|,
name|destination
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|hiveConf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileUtils
operator|.
name|distCp
argument_list|(
name|sourceFs
argument_list|,
comment|// source file system
name|srcList
argument_list|,
comment|// list of source paths
name|destination
argument_list|,
literal|false
argument_list|,
name|usePrivilegedDistCp
condition|?
name|copyAsUser
else|:
literal|null
argument_list|,
name|hiveConf
argument_list|,
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|doCopy
parameter_list|(
name|Path
name|destination
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|srcPaths
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|Map
argument_list|<
name|FileSystem
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|map
init|=
name|fsToPathMap
argument_list|(
name|srcPaths
argument_list|)
decl_stmt|;
name|FileSystem
name|destinationFs
init|=
name|destination
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|FileSystem
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|FileSystem
name|sourceFs
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
name|fileList
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|path
lambda|->
block|{
return|return
operator|new
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|(
name|sourceFs
argument_list|,
name|path
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
name|doCopyOnce
argument_list|(
name|sourceFs
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|destinationFs
argument_list|,
name|destination
argument_list|,
name|regularCopy
argument_list|(
name|destinationFs
argument_list|,
name|sourceFs
argument_list|,
name|fileList
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*       Check for conditions that will lead to local copy, checks are:       1. we are testing hive.       2. either source or destination is a "local" FileSystem("file")       3. aggregate fileSize of all source Paths(can be directory /  file) is less than configured size.       4. number of files of all source Paths(can be directory /  file) is less than configured size.   */
specifier|private
name|boolean
name|regularCopy
parameter_list|(
name|FileSystem
name|destinationFs
parameter_list|,
name|FileSystem
name|sourceFs
parameter_list|,
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
name|fileList
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hiveInTest
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|isLocal
argument_list|(
name|sourceFs
argument_list|)
operator|||
name|isLocal
argument_list|(
name|destinationFs
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|/*        we have reached the point where we are transferring files across fileSystems.     */
name|long
name|size
init|=
literal|0
decl_stmt|;
name|long
name|numberOfFiles
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ReplChangeManager
operator|.
name|FileInfo
name|fileInfo
range|:
name|fileList
control|)
block|{
name|ContentSummary
name|contentSummary
init|=
literal|null
decl_stmt|;
try|try
block|{
name|contentSummary
operator|=
name|sourceFs
operator|.
name|getContentSummary
argument_list|(
name|fileInfo
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// in replication, if source file does not exist, try cmroot
if|if
condition|(
name|fileInfo
operator|.
name|isUseSourcePath
argument_list|()
operator|&&
name|fileInfo
operator|.
name|getCmPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|contentSummary
operator|=
name|sourceFs
operator|.
name|getContentSummary
argument_list|(
name|fileInfo
operator|.
name|getCmPath
argument_list|()
argument_list|)
expr_stmt|;
name|fileInfo
operator|.
name|setIsUseSourcePath
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|size
operator|+=
name|contentSummary
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|numberOfFiles
operator|+=
name|contentSummary
operator|.
name|getFileCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|limitReachedForLocalCopy
argument_list|(
name|size
argument_list|,
name|numberOfFiles
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
name|boolean
name|limitReachedForLocalCopy
parameter_list|(
name|long
name|size
parameter_list|,
name|long
name|numberOfFiles
parameter_list|)
block|{
name|boolean
name|result
init|=
name|size
operator|>
name|maxCopyFileSize
operator|&&
name|numberOfFiles
operator|>
name|maxNumberOfFiles
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Source is {} bytes. (MAX: {})"
argument_list|,
name|size
argument_list|,
name|maxCopyFileSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Source is {} files. (MAX: {})"
argument_list|,
name|numberOfFiles
argument_list|,
name|maxNumberOfFiles
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"going to launch distributed copy (distcp) job."
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|boolean
name|isLocal
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
return|return
name|fs
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"file"
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|FileSystem
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|fsToPathMap
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|srcPaths
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|FileSystem
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|srcPaths
control|)
block|{
name|FileSystem
name|fileSystem
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|containsKey
argument_list|(
name|fileSystem
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|fileSystem
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|get
argument_list|(
name|fileSystem
argument_list|)
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Map
argument_list|<
name|FileSystem
argument_list|,
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
argument_list|>
name|fsToFileMap
parameter_list|(
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
name|srcFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|FileSystem
argument_list|,
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReplChangeManager
operator|.
name|FileInfo
name|file
range|:
name|srcFiles
control|)
block|{
name|FileSystem
name|fileSystem
init|=
name|file
operator|.
name|getSrcFs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|containsKey
argument_list|(
name|fileSystem
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|fileSystem
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|get
argument_list|(
name|fileSystem
argument_list|)
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

