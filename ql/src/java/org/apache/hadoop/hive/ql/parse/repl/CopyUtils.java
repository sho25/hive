begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ReplChangeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveFatalException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_class
specifier|public
class|class
name|CopyUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CopyUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/TransparentEncryption.html#Running_as_the_superuser
specifier|public
specifier|static
specifier|final
name|String
name|RAW_RESERVED_VIRTUAL_PATH
init|=
literal|"/.reserved/raw/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_IO_RETRY
init|=
literal|5
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxCopyFileSize
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxNumberOfFiles
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|hiveInTest
decl_stmt|;
specifier|private
specifier|final
name|String
name|copyAsUser
decl_stmt|;
specifier|private
name|FileSystem
name|destinationFs
decl_stmt|;
specifier|public
name|CopyUtils
parameter_list|(
name|String
name|distCpDoAsUser
parameter_list|,
name|HiveConf
name|hiveConf
parameter_list|,
name|FileSystem
name|destinationFs
parameter_list|)
block|{
name|this
operator|.
name|hiveConf
operator|=
name|hiveConf
expr_stmt|;
name|maxNumberOfFiles
operator|=
name|hiveConf
operator|.
name|getLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_COPYFILE_MAXNUMFILES
argument_list|)
expr_stmt|;
name|maxCopyFileSize
operator|=
name|hiveConf
operator|.
name|getLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_COPYFILE_MAXSIZE
argument_list|)
expr_stmt|;
name|hiveInTest
operator|=
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
expr_stmt|;
name|this
operator|.
name|copyAsUser
operator|=
name|distCpDoAsUser
expr_stmt|;
name|this
operator|.
name|destinationFs
operator|=
name|destinationFs
expr_stmt|;
block|}
comment|// Used by replication, copy files from source to destination. It is possible source file is
comment|// changed/removed during copy, so double check the checksum after copy,
comment|// if not match, copy again from cm
specifier|public
name|void
name|copyAndVerify
parameter_list|(
name|Path
name|destRoot
parameter_list|,
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
name|srcFiles
parameter_list|,
name|Path
name|origSrcPtah
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|HiveFatalException
block|{
name|UserGroupInformation
name|proxyUser
init|=
name|getProxyUser
argument_list|()
decl_stmt|;
name|FileSystem
name|sourceFs
init|=
name|origSrcPtah
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|boolean
name|useRegularCopy
init|=
name|regularCopy
argument_list|(
name|sourceFs
argument_list|,
name|srcFiles
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|useRegularCopy
condition|)
block|{
name|srcFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|srcFiles
operator|.
name|add
argument_list|(
operator|new
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|(
name|sourceFs
argument_list|,
name|origSrcPtah
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|doCopyRetry
argument_list|(
name|sourceFs
argument_list|,
name|srcFiles
argument_list|,
name|destRoot
argument_list|,
name|proxyUser
argument_list|,
name|useRegularCopy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|FileSystem
argument_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
argument_list|>
argument_list|>
name|map
init|=
name|fsToFileMap
argument_list|(
name|srcFiles
argument_list|,
name|destRoot
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|FileSystem
argument_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
argument_list|>
name|destMap
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
argument_list|>
name|destMapEntry
range|:
name|destMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Path
name|destination
init|=
name|destMapEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
name|fileInfoList
init|=
name|destMapEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Get the file system again from cache. There is a chance that the file system stored in the map is closed.
comment|// For instance, doCopyRetry closes the file system in case of i/o exceptions.
name|sourceFs
operator|=
name|fileInfoList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSourcePath
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|destinationFs
operator|.
name|exists
argument_list|(
name|destination
argument_list|)
operator|&&
operator|!
name|FileUtils
operator|.
name|mkdir
argument_list|(
name|destinationFs
argument_list|,
name|destination
argument_list|,
name|hiveConf
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create destination directory: "
operator|+
name|destination
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Destination directory creation failed"
argument_list|)
throw|;
block|}
comment|// Copy files with retry logic on failure or source file is dropped or changed.
name|doCopyRetry
argument_list|(
name|sourceFs
argument_list|,
name|fileInfoList
argument_list|,
name|destination
argument_list|,
name|proxyUser
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|proxyUser
operator|!=
literal|null
condition|)
block|{
name|FileSystem
operator|.
name|closeAllForUGI
argument_list|(
name|proxyUser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doCopyRetry
parameter_list|(
name|FileSystem
name|sourceFs
parameter_list|,
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
name|srcFileList
parameter_list|,
name|Path
name|destination
parameter_list|,
name|UserGroupInformation
name|proxyUser
parameter_list|,
name|boolean
name|useRegularCopy
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
throws|,
name|HiveFatalException
block|{
name|int
name|repeat
init|=
literal|0
decl_stmt|;
name|boolean
name|isCopyError
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|pathList
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|srcFileList
argument_list|,
name|ReplChangeManager
operator|.
name|FileInfo
operator|::
name|getEffectivePath
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|pathList
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|repeat
operator|<
name|MAX_IO_RETRY
operator|)
condition|)
block|{
try|try
block|{
comment|// if its retrying, first regenerate the path list.
if|if
condition|(
name|repeat
operator|>
literal|0
condition|)
block|{
name|pathList
operator|=
name|getFilesToRetry
argument_list|(
name|sourceFs
argument_list|,
name|srcFileList
argument_list|,
name|destination
argument_list|,
name|isCopyError
argument_list|)
expr_stmt|;
if|if
condition|(
name|pathList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// all files were copied successfully in last try. So can break from here.
break|break;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempt: "
operator|+
operator|(
name|repeat
operator|+
literal|1
operator|)
operator|+
literal|". Copying files: "
operator|+
name|pathList
argument_list|)
expr_stmt|;
comment|// if exception happens during doCopyOnce, then need to call getFilesToRetry with copy error as true in retry.
name|isCopyError
operator|=
literal|true
expr_stmt|;
name|doCopyOnce
argument_list|(
name|sourceFs
argument_list|,
name|pathList
argument_list|,
name|destination
argument_list|,
name|useRegularCopy
argument_list|,
name|proxyUser
argument_list|)
expr_stmt|;
comment|// if exception happens after doCopyOnce, then need to call getFilesToRetry with copy error as false in retry.
name|isCopyError
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// If copy fails, fall through the retry logic
name|LOG
operator|.
name|info
argument_list|(
literal|"file operation failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|repeat
operator|>=
operator|(
name|MAX_IO_RETRY
operator|-
literal|1
operator|)
condition|)
block|{
comment|//no need to wait in the last iteration
break|break;
block|}
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|FileNotFoundException
operator|)
condition|)
block|{
name|int
name|sleepTime
init|=
name|FileUtils
operator|.
name|getSleepTime
argument_list|(
name|repeat
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleep for "
operator|+
name|sleepTime
operator|+
literal|" milliseconds before retry "
operator|+
operator|(
name|repeat
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|timerEx
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"sleep interrupted"
argument_list|,
name|timerEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// looks like some network outrage, reset the file system object and retry.
if|if
condition|(
name|proxyUser
operator|==
literal|null
condition|)
block|{
name|FileSystem
operator|.
name|closeAllForUGI
argument_list|(
name|Utils
operator|.
name|getUGI
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileSystem
operator|.
name|closeAllForUGI
argument_list|(
name|proxyUser
argument_list|)
expr_stmt|;
block|}
name|sourceFs
operator|=
name|pathList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|destinationFs
operator|=
name|destination
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
block|}
name|repeat
operator|++
expr_stmt|;
block|}
comment|// If still files remains to be copied due to failure/checksum mismatch after several attempts, then throw error
if|if
condition|(
operator|!
name|pathList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"File copy failed even after several attempts. Files list: "
operator|+
name|pathList
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|ErrorMsg
operator|.
name|REPL_FILE_SYSTEM_OPERATION_RETRY
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Traverse through all the source files and see if any file is not copied or partially copied.
comment|// If yes, then add to the retry list. If source file missing, then retry with CM path. if CM path
comment|// itself is missing, then throw error.
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|getFilesToRetry
parameter_list|(
name|FileSystem
name|sourceFs
parameter_list|,
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
name|srcFileList
parameter_list|,
name|Path
name|destination
parameter_list|,
name|boolean
name|isCopyError
parameter_list|)
throws|throws
name|IOException
throws|,
name|HiveFatalException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|pathList
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
comment|// Going through file list and make the retry list
for|for
control|(
name|ReplChangeManager
operator|.
name|FileInfo
name|srcFile
range|:
name|srcFileList
control|)
block|{
if|if
condition|(
name|srcFile
operator|.
name|isCopyDone
argument_list|()
condition|)
block|{
comment|// If already copied successfully, ignore it.
continue|continue;
block|}
name|Path
name|srcPath
init|=
name|srcFile
operator|.
name|getEffectivePath
argument_list|()
decl_stmt|;
comment|//Path destPath = new Path(destination, srcPath.getName());
if|if
condition|(
name|destinationFs
operator|.
name|exists
argument_list|(
name|destination
argument_list|)
condition|)
block|{
comment|// If destination file is present and checksum of source mismatch, then retry copy.
if|if
condition|(
name|isSourceFileMismatch
argument_list|(
name|sourceFs
argument_list|,
name|srcFile
argument_list|)
condition|)
block|{
comment|// Delete the incorrectly copied file and retry with CM path
name|destinationFs
operator|.
name|delete
argument_list|(
name|destination
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|srcFile
operator|.
name|setIsUseSourcePath
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the retry logic is reached after copy error, then include the copied file as well.
comment|// This is needed as we cannot figure out which file is incorrectly copied.
comment|// Expecting distcp to skip the properly copied file based on CRC check or copy it if CRC mismatch.
if|if
condition|(
operator|!
name|isCopyError
condition|)
block|{
comment|// File is successfully copied, just skip this file from retry.
name|srcFile
operator|.
name|setCopyDone
argument_list|(
literal|true
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|isSourceFileMismatch
argument_list|(
name|sourceFs
argument_list|,
name|srcFile
argument_list|)
condition|)
block|{
comment|// If checksum does not match, likely the file is changed/removed, retry from CM path
name|srcFile
operator|.
name|setIsUseSourcePath
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|srcPath
operator|=
name|srcFile
operator|.
name|getEffectivePath
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|srcPath
condition|)
block|{
comment|// This case possible if CM path is not enabled.
name|LOG
operator|.
name|error
argument_list|(
literal|"File copy failed and likely source file is deleted or modified."
operator|+
literal|"Source File: "
operator|+
name|srcFile
operator|.
name|getSourcePath
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveFatalException
argument_list|(
name|ErrorMsg
operator|.
name|REPL_FILE_MISSING_FROM_SRC_AND_CM_PATH
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|srcFile
operator|.
name|isUseSourcePath
argument_list|()
operator|&&
operator|!
name|sourceFs
operator|.
name|exists
argument_list|(
name|srcFile
operator|.
name|getCmPath
argument_list|()
argument_list|)
condition|)
block|{
comment|// CM path itself is missing, cannot recover from this error
name|LOG
operator|.
name|error
argument_list|(
literal|"File Copy Failed. Both source and CM files are missing from source. "
operator|+
literal|"Missing Source File: "
operator|+
name|srcFile
operator|.
name|getSourcePath
argument_list|()
operator|+
literal|", CM File: "
operator|+
name|srcFile
operator|.
name|getCmPath
argument_list|()
operator|+
literal|". "
operator|+
literal|"Try setting higher value for hive.repl.cm.retain in source warehouse. "
operator|+
literal|"Also, bootstrap the system again to get back the consistent replicated state."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|HiveFatalException
argument_list|(
name|ErrorMsg
operator|.
name|REPL_FILE_MISSING_FROM_SRC_AND_CM_PATH
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|pathList
operator|.
name|add
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
block|}
return|return
name|pathList
return|;
block|}
comment|// Check if the source file unmodified even after copy to see if we copied the right file
specifier|private
name|boolean
name|isSourceFileMismatch
parameter_list|(
name|FileSystem
name|sourceFs
parameter_list|,
name|ReplChangeManager
operator|.
name|FileInfo
name|srcFile
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If source is already CM path, the checksum will be always matching
if|if
condition|(
name|srcFile
operator|.
name|isUseSourcePath
argument_list|()
condition|)
block|{
name|String
name|sourceChecksumString
init|=
name|srcFile
operator|.
name|getCheckSum
argument_list|()
decl_stmt|;
if|if
condition|(
name|sourceChecksumString
operator|!=
literal|null
condition|)
block|{
name|String
name|verifySourceChecksumString
decl_stmt|;
try|try
block|{
name|verifySourceChecksumString
operator|=
name|ReplChangeManager
operator|.
name|checksumFor
argument_list|(
name|srcFile
operator|.
name|getSourcePath
argument_list|()
argument_list|,
name|sourceFs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to calculate checksum for source file: "
operator|+
name|srcFile
operator|.
name|getSourcePath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sourceFs
operator|.
name|exists
argument_list|(
name|srcFile
operator|.
name|getSourcePath
argument_list|()
argument_list|)
condition|)
block|{
comment|// if source file is missing, then return true, so that cm path will be used for copy.
return|return
literal|true
return|;
block|}
throw|throw
name|e
throw|;
block|}
if|if
condition|(
operator|!
name|sourceChecksumString
operator|.
name|equals
argument_list|(
name|verifySourceChecksumString
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|UserGroupInformation
name|getProxyUser
parameter_list|()
throws|throws
name|LoginException
throws|,
name|IOException
block|{
if|if
condition|(
name|copyAsUser
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|UserGroupInformation
name|proxyUser
init|=
literal|null
decl_stmt|;
name|int
name|currentRetry
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|currentRetry
operator|<=
name|MAX_IO_RETRY
condition|)
block|{
try|try
block|{
name|UserGroupInformation
name|ugi
init|=
name|Utils
operator|.
name|getUGI
argument_list|()
decl_stmt|;
name|String
name|currentUser
init|=
name|ugi
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|currentUser
operator|.
name|equals
argument_list|(
name|copyAsUser
argument_list|)
condition|)
block|{
name|proxyUser
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|copyAsUser
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|proxyUser
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|currentRetry
operator|++
expr_stmt|;
if|if
condition|(
name|currentRetry
operator|<=
name|MAX_IO_RETRY
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to get UGI info"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get UGI info"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|ErrorMsg
operator|.
name|REPL_FILE_SYSTEM_OPERATION_RETRY
operator|.
name|getMsg
argument_list|()
argument_list|)
throw|;
block|}
name|int
name|sleepTime
init|=
name|FileUtils
operator|.
name|getSleepTime
argument_list|(
name|currentRetry
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleep for "
operator|+
name|sleepTime
operator|+
literal|" milliseconds before retry "
operator|+
operator|(
name|currentRetry
operator|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|timerEx
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleep interrupted"
argument_list|,
name|timerEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|// Copy without retry
specifier|private
name|void
name|doCopyOnce
parameter_list|(
name|FileSystem
name|sourceFs
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|srcList
parameter_list|,
name|Path
name|destination
parameter_list|,
name|boolean
name|useRegularCopy
parameter_list|,
name|UserGroupInformation
name|proxyUser
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|useRegularCopy
condition|)
block|{
name|doRegularCopyOnce
argument_list|(
name|sourceFs
argument_list|,
name|srcList
argument_list|,
name|destination
argument_list|,
name|proxyUser
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doDistCpCopyOnce
argument_list|(
name|sourceFs
argument_list|,
name|srcList
argument_list|,
name|destination
argument_list|,
name|proxyUser
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doDistCpCopyOnce
parameter_list|(
name|FileSystem
name|sourceFs
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|srcList
parameter_list|,
name|Path
name|destination
parameter_list|,
name|UserGroupInformation
name|proxyUser
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_ADD_RAW_RESERVED_NAMESPACE
argument_list|)
condition|)
block|{
name|srcList
operator|=
name|srcList
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|path
lambda|->
block|{
name|URI
name|uri
init|=
name|path
operator|.
name|toUri
argument_list|()
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|RAW_RESERVED_VIRTUAL_PATH
operator|+
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|URI
name|destinationUri
init|=
name|destination
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|destination
operator|=
operator|new
name|Path
argument_list|(
name|destinationUri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|destinationUri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|RAW_RESERVED_VIRTUAL_PATH
operator|+
name|destinationUri
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|FileUtils
operator|.
name|distCp
argument_list|(
name|sourceFs
argument_list|,
comment|// source file system
name|srcList
argument_list|,
comment|// list of source paths
name|destination
argument_list|,
literal|false
argument_list|,
name|proxyUser
argument_list|,
name|hiveConf
argument_list|,
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Distcp failed to copy files: "
operator|+
name|srcList
operator|+
literal|" to destination: "
operator|+
name|destination
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Distcp operation failed."
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|doRegularCopyOnce
parameter_list|(
name|FileSystem
name|sourceFs
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|srcList
parameter_list|,
name|Path
name|destination
parameter_list|,
name|UserGroupInformation
name|proxyUser
parameter_list|)
throws|throws
name|IOException
block|{
comment|/*     even for regular copy we have to use the same user permissions that distCp will use since     hive-server user might be different that the super user required to copy relevant files.    */
specifier|final
name|Path
index|[]
name|paths
init|=
name|srcList
operator|.
name|toArray
argument_list|(
operator|new
name|Path
index|[]
block|{}
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyUser
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Path
name|finalDestination
init|=
name|destination
decl_stmt|;
try|try
block|{
name|proxyUser
operator|.
name|doAs
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|Boolean
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|FileUtil
operator|.
name|copy
argument_list|(
name|sourceFs
argument_list|,
name|paths
argument_list|,
name|destinationFs
argument_list|,
name|finalDestination
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|hiveConf
argument_list|)
block|;
return|return
literal|true
return|;
block|}
block|)
empty_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_class

begin_else
else|else
block|{
name|FileUtil
operator|.
name|copy
argument_list|(
name|sourceFs
argument_list|,
name|paths
argument_list|,
name|destinationFs
argument_list|,
name|destination
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|hiveConf
argument_list|)
expr_stmt|;
block|}
end_else

begin_function
unit|}    public
name|void
name|doCopy
parameter_list|(
name|Path
name|destination
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|srcPaths
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|Map
argument_list|<
name|FileSystem
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|map
init|=
name|fsToPathMap
argument_list|(
name|srcPaths
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|proxyUser
init|=
name|getProxyUser
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|FileSystem
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|FileSystem
name|sourceFs
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
name|fileList
init|=
name|Lists
operator|.
name|transform
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|path
lambda|->
operator|new
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|(
name|sourceFs
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|doCopyOnce
argument_list|(
name|sourceFs
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|destination
argument_list|,
name|regularCopy
argument_list|(
name|sourceFs
argument_list|,
name|fileList
argument_list|)
argument_list|,
name|proxyUser
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|proxyUser
operator|!=
literal|null
condition|)
block|{
name|FileSystem
operator|.
name|closeAllForUGI
argument_list|(
name|proxyUser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/*       Check for conditions that will lead to local copy, checks are:       1. we are testing hive.       2. either source or destination is a "local" FileSystem("file")       3. aggregate fileSize of all source Paths(can be directory /  file) is less than configured size.       4. number of files of all source Paths(can be directory /  file) is less than configured size.   */
end_comment

begin_function
name|boolean
name|regularCopy
parameter_list|(
name|FileSystem
name|sourceFs
parameter_list|,
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
name|fileList
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hiveInTest
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|isLocal
argument_list|(
name|sourceFs
argument_list|)
operator|||
name|isLocal
argument_list|(
name|destinationFs
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|/*        we have reached the point where we are transferring files across fileSystems.     */
name|long
name|size
init|=
literal|0
decl_stmt|;
name|long
name|numberOfFiles
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ReplChangeManager
operator|.
name|FileInfo
name|fileInfo
range|:
name|fileList
control|)
block|{
name|ContentSummary
name|contentSummary
init|=
literal|null
decl_stmt|;
try|try
block|{
name|contentSummary
operator|=
name|sourceFs
operator|.
name|getContentSummary
argument_list|(
name|fileInfo
operator|.
name|getEffectivePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// In replication, if source file does not exist, try cmroot
if|if
condition|(
name|fileInfo
operator|.
name|isUseSourcePath
argument_list|()
operator|&&
name|fileInfo
operator|.
name|getCmPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|contentSummary
operator|=
name|sourceFs
operator|.
name|getContentSummary
argument_list|(
name|fileInfo
operator|.
name|getCmPath
argument_list|()
argument_list|)
expr_stmt|;
name|fileInfo
operator|.
name|setIsUseSourcePath
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|contentSummary
operator|!=
literal|null
condition|)
block|{
name|size
operator|+=
name|contentSummary
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|numberOfFiles
operator|+=
name|contentSummary
operator|.
name|getFileCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|limitReachedForLocalCopy
argument_list|(
name|size
argument_list|,
name|numberOfFiles
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
end_function

begin_function
name|boolean
name|limitReachedForLocalCopy
parameter_list|(
name|long
name|size
parameter_list|,
name|long
name|numberOfFiles
parameter_list|)
block|{
name|boolean
name|result
init|=
name|size
operator|>
name|maxCopyFileSize
operator|&&
name|numberOfFiles
operator|>
name|maxNumberOfFiles
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Source is {} bytes. (MAX: {})"
argument_list|,
name|size
argument_list|,
name|maxCopyFileSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Source is {} files. (MAX: {})"
argument_list|,
name|numberOfFiles
argument_list|,
name|maxNumberOfFiles
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"going to launch distributed copy (distcp) job."
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function

begin_function
specifier|private
name|boolean
name|isLocal
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
return|return
name|fs
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"file"
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|Map
argument_list|<
name|FileSystem
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|fsToPathMap
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|srcPaths
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|FileSystem
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|srcPaths
control|)
block|{
name|FileSystem
name|fileSystem
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|containsKey
argument_list|(
name|fileSystem
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|fileSystem
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|get
argument_list|(
name|fileSystem
argument_list|)
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function

begin_comment
comment|// Create map of source file system to destination path to list of files to copy
end_comment

begin_function
specifier|private
name|Map
argument_list|<
name|FileSystem
argument_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
argument_list|>
argument_list|>
name|fsToFileMap
parameter_list|(
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
name|srcFiles
parameter_list|,
name|Path
name|destRoot
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|FileSystem
argument_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|List
argument_list|<
name|ReplChangeManager
operator|.
name|FileInfo
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReplChangeManager
operator|.
name|FileInfo
name|file
range|:
name|srcFiles
control|)
block|{
name|FileSystem
name|fileSystem
init|=
name|file
operator|.
name|getSrcFs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|containsKey
argument_list|(
name|fileSystem
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|fileSystem
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|destination
init|=
name|getCopyDestination
argument_list|(
name|file
argument_list|,
name|destRoot
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|get
argument_list|(
name|fileSystem
argument_list|)
operator|.
name|containsKey
argument_list|(
name|destination
argument_list|)
condition|)
block|{
name|result
operator|.
name|get
argument_list|(
name|fileSystem
argument_list|)
operator|.
name|put
argument_list|(
name|destination
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|get
argument_list|(
name|fileSystem
argument_list|)
operator|.
name|get
argument_list|(
name|destination
argument_list|)
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Path
name|getCopyDestination
parameter_list|(
name|ReplChangeManager
operator|.
name|FileInfo
name|fileInfo
parameter_list|,
name|Path
name|destRoot
parameter_list|)
block|{
if|if
condition|(
name|fileInfo
operator|.
name|getSubDir
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|destRoot
return|;
block|}
name|String
index|[]
name|subDirs
init|=
name|fileInfo
operator|.
name|getSubDir
argument_list|()
operator|.
name|split
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
decl_stmt|;
name|Path
name|destination
init|=
name|destRoot
decl_stmt|;
for|for
control|(
name|String
name|subDir
range|:
name|subDirs
control|)
block|{
name|destination
operator|=
operator|new
name|Path
argument_list|(
name|destination
argument_list|,
name|subDir
argument_list|)
expr_stmt|;
block|}
return|return
name|destination
return|;
block|}
end_function

unit|}
end_unit

