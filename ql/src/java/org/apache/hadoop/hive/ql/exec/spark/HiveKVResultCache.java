begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|RowContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PlanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|scala
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Wrapper around {@link org.apache.hadoop.hive.ql.exec.persistence.RowContainer}  */
end_comment

begin_class
specifier|public
class|class
name|HiveKVResultCache
block|{
specifier|public
specifier|static
specifier|final
name|int
name|IN_MEMORY_CACHE_SIZE
init|=
literal|512
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COL_NAMES
init|=
literal|"key,value"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COL_TYPES
init|=
name|serdeConstants
operator|.
name|BINARY_TYPE_NAME
operator|+
literal|":"
operator|+
name|serdeConstants
operator|.
name|BINARY_TYPE_NAME
decl_stmt|;
specifier|private
name|RowContainer
name|container
decl_stmt|;
specifier|private
name|int
name|cursor
init|=
literal|0
decl_stmt|;
specifier|public
name|HiveKVResultCache
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|initRowContainer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initRowContainer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
name|container
operator|=
operator|new
name|RowContainer
argument_list|(
name|IN_MEMORY_CACHE_SIZE
argument_list|,
name|conf
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|String
name|fileFormat
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYRESULTFILEFORMAT
argument_list|)
decl_stmt|;
name|TableDesc
name|tableDesc
init|=
name|PlanUtils
operator|.
name|getDefaultQueryOutputTableDesc
argument_list|(
name|COL_NAMES
argument_list|,
name|COL_TYPES
argument_list|,
name|fileFormat
argument_list|)
decl_stmt|;
name|SerDe
name|serDe
init|=
operator|(
name|SerDe
operator|)
name|tableDesc
operator|.
name|getDeserializer
argument_list|()
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|serDe
operator|.
name|getObjectInspector
argument_list|()
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
decl_stmt|;
name|container
operator|.
name|setSerDe
argument_list|(
name|serDe
argument_list|,
name|oi
argument_list|)
expr_stmt|;
name|container
operator|.
name|setTableDesc
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to create RowContainer"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|add
parameter_list|(
name|HiveKey
name|key
parameter_list|,
name|BytesWritable
name|value
parameter_list|)
block|{
name|byte
index|[]
name|hiveKeyBytes
init|=
name|KryoSerializer
operator|.
name|serialize
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|BytesWritable
name|wrappedHiveKey
init|=
operator|new
name|BytesWritable
argument_list|(
name|hiveKeyBytes
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BytesWritable
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|BytesWritable
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
name|wrappedHiveKey
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
try|try
block|{
name|container
operator|.
name|addRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to add KV pair to RowContainer"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
try|try
block|{
name|container
operator|.
name|clearRows
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to clear rows in RowContainer"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|cursor
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|container
operator|.
name|rowCount
argument_list|()
operator|>
literal|0
operator|&&
name|cursor
operator|<
name|container
operator|.
name|rowCount
argument_list|()
return|;
block|}
specifier|public
name|Tuple2
argument_list|<
name|HiveKey
argument_list|,
name|BytesWritable
argument_list|>
name|next
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|BytesWritable
argument_list|>
name|row
decl_stmt|;
if|if
condition|(
name|cursor
operator|==
literal|0
condition|)
block|{
name|row
operator|=
name|container
operator|.
name|first
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|row
operator|=
name|container
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|cursor
operator|++
expr_stmt|;
name|HiveKey
name|key
init|=
name|KryoSerializer
operator|.
name|deserialize
argument_list|(
name|row
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|HiveKey
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|Tuple2
argument_list|<
name|HiveKey
argument_list|,
name|BytesWritable
argument_list|>
argument_list|(
name|key
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to get row from RowContainer"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

