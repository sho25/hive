begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|ppr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeEvaluatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|VirtualColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_class
specifier|public
class|class
name|PartExprEvalUtils
block|{
comment|/**    * Evaluate expression with partition columns    *    * @param expr    * @param partSpec    * @param rowObjectInspector    * @return value returned by the expression    * @throws HiveException    */
specifier|static
specifier|synchronized
specifier|public
name|Object
name|evalExprWithPart
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|,
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
parameter_list|,
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|vcs
parameter_list|,
name|StructObjectInspector
name|rowObjectInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|boolean
name|hasVC
init|=
name|vcs
operator|!=
literal|null
operator|&&
operator|!
name|vcs
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|Object
index|[]
name|rowWithPart
init|=
operator|new
name|Object
index|[
name|hasVC
condition|?
literal|3
else|:
literal|2
index|]
decl_stmt|;
comment|// Create the row object
name|ArrayList
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|partValues
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|partObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|partSpec
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|partNames
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|partValues
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|partObjectInspectors
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|)
expr_stmt|;
block|}
name|StructObjectInspector
name|partObjectInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|partNames
argument_list|,
name|partObjectInspectors
argument_list|)
decl_stmt|;
name|rowWithPart
index|[
literal|1
index|]
operator|=
name|partValues
expr_stmt|;
name|ArrayList
argument_list|<
name|StructObjectInspector
argument_list|>
name|ois
init|=
operator|new
name|ArrayList
argument_list|<
name|StructObjectInspector
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ois
operator|.
name|add
argument_list|(
name|rowObjectInspector
argument_list|)
expr_stmt|;
name|ois
operator|.
name|add
argument_list|(
name|partObjectInspector
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasVC
condition|)
block|{
name|ois
operator|.
name|add
argument_list|(
name|VirtualColumn
operator|.
name|getVCSObjectInspector
argument_list|(
name|vcs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StructObjectInspector
name|rowWithPartObjectInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getUnionStructObjectInspector
argument_list|(
name|ois
argument_list|)
decl_stmt|;
name|ExprNodeEvaluator
name|evaluator
init|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|expr
argument_list|)
decl_stmt|;
name|ObjectInspector
name|evaluateResultOI
init|=
name|evaluator
operator|.
name|initialize
argument_list|(
name|rowWithPartObjectInspector
argument_list|)
decl_stmt|;
name|Object
name|evaluateResultO
init|=
name|evaluator
operator|.
name|evaluate
argument_list|(
name|rowWithPart
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|evaluateResultOI
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|evaluateResultO
argument_list|)
return|;
block|}
specifier|static
specifier|synchronized
specifier|public
name|Map
argument_list|<
name|PrimitiveObjectInspector
argument_list|,
name|ExprNodeEvaluator
argument_list|>
name|prepareExpr
parameter_list|(
name|ExprNodeDesc
name|expr
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|VirtualColumn
argument_list|>
name|vcs
parameter_list|,
name|StructObjectInspector
name|rowObjectInspector
parameter_list|)
throws|throws
name|HiveException
block|{
name|boolean
name|hasVC
init|=
name|vcs
operator|!=
literal|null
operator|&&
operator|!
name|vcs
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
comment|// Create the row object
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|partObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|partObjectInspectors
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|)
expr_stmt|;
block|}
name|StructObjectInspector
name|partObjectInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|partNames
argument_list|,
name|partObjectInspectors
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StructObjectInspector
argument_list|>
name|ois
init|=
operator|new
name|ArrayList
argument_list|<
name|StructObjectInspector
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|ois
operator|.
name|add
argument_list|(
name|rowObjectInspector
argument_list|)
expr_stmt|;
name|ois
operator|.
name|add
argument_list|(
name|partObjectInspector
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasVC
condition|)
block|{
name|ois
operator|.
name|add
argument_list|(
name|VirtualColumn
operator|.
name|getVCSObjectInspector
argument_list|(
name|vcs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StructObjectInspector
name|rowWithPartObjectInspector
init|=
name|ObjectInspectorFactory
operator|.
name|getUnionStructObjectInspector
argument_list|(
name|ois
argument_list|)
decl_stmt|;
name|ExprNodeEvaluator
name|evaluator
init|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|expr
argument_list|)
decl_stmt|;
name|ObjectInspector
name|evaluateResultOI
init|=
name|evaluator
operator|.
name|initialize
argument_list|(
name|rowWithPartObjectInspector
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|PrimitiveObjectInspector
argument_list|,
name|ExprNodeEvaluator
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|PrimitiveObjectInspector
argument_list|,
name|ExprNodeEvaluator
argument_list|>
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|evaluateResultOI
argument_list|,
name|evaluator
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|static
specifier|synchronized
specifier|public
name|Object
name|evaluateExprOnPart
parameter_list|(
name|Map
argument_list|<
name|PrimitiveObjectInspector
argument_list|,
name|ExprNodeEvaluator
argument_list|>
name|pair
parameter_list|,
name|Object
index|[]
name|rowWithPart
parameter_list|)
throws|throws
name|HiveException
block|{
assert|assert
operator|(
name|pair
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
assert|;
comment|// only get the 1st entry from the map
name|Map
operator|.
name|Entry
argument_list|<
name|PrimitiveObjectInspector
argument_list|,
name|ExprNodeEvaluator
argument_list|>
name|entry
init|=
name|pair
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|PrimitiveObjectInspector
name|evaluateResultOI
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ExprNodeEvaluator
name|evaluator
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Object
name|evaluateResultO
init|=
name|evaluator
operator|.
name|evaluate
argument_list|(
name|rowWithPart
argument_list|)
decl_stmt|;
return|return
name|evaluateResultOI
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|evaluateResultO
argument_list|)
return|;
block|}
block|}
end_class

end_unit

