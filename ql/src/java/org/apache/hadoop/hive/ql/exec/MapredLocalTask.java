begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|FetchWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredLocalWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapredLocalWork
operator|.
name|BucketMapJoinContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|api
operator|.
name|StageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|InspectableObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_class
specifier|public
class|class
name|MapredLocalTask
extends|extends
name|Task
argument_list|<
name|MapredLocalWork
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
name|fetchOperators
decl_stmt|;
specifier|private
name|File
name|jdbmFile
decl_stmt|;
specifier|private
name|JobConf
name|job
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Log
name|l4j
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"MapredLocalTask"
argument_list|)
decl_stmt|;
specifier|private
name|MapOperator
name|mo
decl_stmt|;
comment|// not sure we need this exec context; but all the operators in the work
comment|// will pass this context throught
specifier|private
specifier|final
name|ExecMapperContext
name|execContext
init|=
operator|new
name|ExecMapperContext
argument_list|()
decl_stmt|;
specifier|public
name|MapredLocalTask
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|QueryPlan
name|queryPlan
parameter_list|,
name|DriverContext
name|driverContext
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|queryPlan
argument_list|,
name|driverContext
argument_list|)
expr_stmt|;
name|job
operator|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|ExecDriver
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|execute
parameter_list|(
name|DriverContext
name|driverContext
parameter_list|)
block|{
comment|// check the local work
if|if
condition|(
name|work
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|fetchOperators
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|FetchOperator
argument_list|,
name|JobConf
argument_list|>
name|fetchOpJobConfMap
init|=
operator|new
name|HashMap
argument_list|<
name|FetchOperator
argument_list|,
name|JobConf
argument_list|>
argument_list|()
decl_stmt|;
name|execContext
operator|.
name|setJc
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|//set the local work, so all the operator can get this context
name|execContext
operator|.
name|setLocalWork
argument_list|(
name|work
argument_list|)
expr_stmt|;
name|boolean
name|inputFileChangeSenstive
init|=
name|work
operator|.
name|getInputFileChangeSensitive
argument_list|()
decl_stmt|;
try|try
block|{
name|initializeOperators
argument_list|(
name|fetchOpJobConfMap
argument_list|)
expr_stmt|;
comment|//for each big table's bucket, call the start forward
if|if
condition|(
name|inputFileChangeSenstive
condition|)
block|{
for|for
control|(
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|bigTableBucketFiles
range|:
name|work
operator|.
name|getBucketMapjoinContext
argument_list|()
operator|.
name|getAliasBucketFileNameMapping
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|bigTableBucket
range|:
name|bigTableBucketFiles
operator|.
name|keySet
argument_list|()
control|)
block|{
name|startForward
argument_list|(
name|inputFileChangeSenstive
argument_list|,
name|bigTableBucket
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|startForward
argument_list|(
name|inputFileChangeSenstive
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|OutOfMemoryError
condition|)
block|{
comment|// Don't create a new object if we are already out of memory
name|l4j
operator|.
name|error
argument_list|(
literal|"Out of Merror Error"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|l4j
operator|.
name|error
argument_list|(
literal|"Hive Runtime Error: Map local work failed"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|void
name|startForward
parameter_list|(
name|boolean
name|inputFileChangeSenstive
parameter_list|,
name|String
name|bigTableBucket
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
name|entry
range|:
name|fetchOperators
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|fetchOpRows
init|=
literal|0
decl_stmt|;
name|String
name|alias
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|FetchOperator
name|fetchOp
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputFileChangeSenstive
condition|)
block|{
name|fetchOp
operator|.
name|clearFetchContext
argument_list|()
expr_stmt|;
name|setUpFetchOpContext
argument_list|(
name|fetchOp
argument_list|,
name|alias
argument_list|,
name|bigTableBucket
argument_list|)
expr_stmt|;
block|}
comment|//get the root operator
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|forwardOp
init|=
name|work
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
comment|//walk through the operator tree
while|while
condition|(
literal|true
condition|)
block|{
name|InspectableObject
name|row
init|=
name|fetchOp
operator|.
name|getNextRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|inputFileChangeSenstive
condition|)
block|{
name|String
name|fileName
init|=
name|this
operator|.
name|getFileName
argument_list|(
name|bigTableBucket
argument_list|)
decl_stmt|;
name|execContext
operator|.
name|setCurrentBigBucketFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|forwardOp
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|forwardOp
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
name|fetchOpRows
operator|++
expr_stmt|;
name|forwardOp
operator|.
name|process
argument_list|(
name|row
operator|.
name|o
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// check if any operator had a fatal error or early exit during
comment|// execution
if|if
condition|(
name|forwardOp
operator|.
name|getDone
argument_list|()
condition|)
block|{
comment|//ExecMapper.setDone(true);
break|break;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|initializeOperators
parameter_list|(
name|Map
argument_list|<
name|FetchOperator
argument_list|,
name|JobConf
argument_list|>
name|fetchOpJobConfMap
parameter_list|)
throws|throws
name|HiveException
block|{
comment|// this mapper operator is used to initialize all the operators
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FetchWork
argument_list|>
name|entry
range|:
name|work
operator|.
name|getAliasToFetchWork
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|JobConf
name|jobClone
init|=
operator|new
name|JobConf
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tableScan
init|=
name|work
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|setColumnsNeeded
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|tableScan
operator|instanceof
name|TableScanOperator
condition|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|(
operator|(
name|TableScanOperator
operator|)
name|tableScan
operator|)
operator|.
name|getNeededColumnIDs
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|ColumnProjectionUtils
operator|.
name|appendReadColumnIDs
argument_list|(
name|jobClone
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|setColumnsNeeded
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|setColumnsNeeded
condition|)
block|{
name|ColumnProjectionUtils
operator|.
name|setFullyReadColumns
argument_list|(
name|jobClone
argument_list|)
expr_stmt|;
block|}
comment|//create a fetch operator
name|FetchOperator
name|fetchOp
init|=
operator|new
name|FetchOperator
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|jobClone
argument_list|)
decl_stmt|;
name|fetchOpJobConfMap
operator|.
name|put
argument_list|(
name|fetchOp
argument_list|,
name|jobClone
argument_list|)
expr_stmt|;
name|fetchOperators
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|fetchOp
argument_list|)
expr_stmt|;
name|l4j
operator|.
name|info
argument_list|(
literal|"fetchoperator for "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" created"
argument_list|)
expr_stmt|;
block|}
comment|//initilize all forward operator
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FetchOperator
argument_list|>
name|entry
range|:
name|fetchOperators
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|//get the forward op
name|Operator
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|forwardOp
init|=
name|work
operator|.
name|getAliasToWork
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
comment|//put the exe context into all the operators
name|forwardOp
operator|.
name|setExecContext
argument_list|(
name|execContext
argument_list|)
expr_stmt|;
comment|// All the operators need to be initialized before process
name|FetchOperator
name|fetchOp
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|JobConf
name|jobConf
init|=
name|fetchOpJobConfMap
operator|.
name|get
argument_list|(
name|fetchOp
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobConf
operator|==
literal|null
condition|)
block|{
name|jobConf
operator|=
name|job
expr_stmt|;
block|}
comment|//initialize the forward operator
name|forwardOp
operator|.
name|initialize
argument_list|(
name|jobConf
argument_list|,
operator|new
name|ObjectInspector
index|[]
block|{
name|fetchOp
operator|.
name|getOutputObjectInspector
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|l4j
operator|.
name|info
argument_list|(
literal|"fetchoperator for "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" initialized"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setUpFetchOpContext
parameter_list|(
name|FetchOperator
name|fetchOp
parameter_list|,
name|String
name|alias
parameter_list|,
name|String
name|currentInputFile
parameter_list|)
throws|throws
name|Exception
block|{
name|BucketMapJoinContext
name|bucketMatcherCxt
init|=
name|this
operator|.
name|work
operator|.
name|getBucketMapjoinContext
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|BucketMatcher
argument_list|>
name|bucketMatcherCls
init|=
name|bucketMatcherCxt
operator|.
name|getBucketMatcherClass
argument_list|()
decl_stmt|;
name|BucketMatcher
name|bucketMatcher
init|=
operator|(
name|BucketMatcher
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|bucketMatcherCls
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|bucketMatcher
operator|.
name|setAliasBucketFileNameMapping
argument_list|(
name|bucketMatcherCxt
operator|.
name|getAliasBucketFileNameMapping
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|aliasFiles
init|=
name|bucketMatcher
operator|.
name|getAliasBucketFiles
argument_list|(
name|currentInputFile
argument_list|,
name|bucketMatcherCxt
operator|.
name|getMapJoinBigTableAlias
argument_list|()
argument_list|,
name|alias
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Path
argument_list|>
name|iter
init|=
name|aliasFiles
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|fetchOp
operator|.
name|setupContext
argument_list|(
name|iter
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getFileName
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|last_separator
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|+
literal|1
decl_stmt|;
name|String
name|fileName
init|=
name|path
operator|.
name|substring
argument_list|(
name|last_separator
argument_list|)
decl_stmt|;
return|return
name|fileName
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|localizeMRTmpFilesImpl
parameter_list|(
name|Context
name|ctx
parameter_list|)
block|{    }
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"MAPREDLOCAL"
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getType
parameter_list|()
block|{
comment|//assert false;
return|return
name|StageType
operator|.
name|MAPREDLOCAL
return|;
block|}
block|}
end_class

end_unit

