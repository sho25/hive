begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|format
operator|.
name|datetime
operator|.
name|HiveSqlDateTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser_IdentifiersParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|DateObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|HiveCharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|HiveVarcharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableDateObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableHiveCharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableHiveVarcharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableTimestampObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|TimestampObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * CAST(<value> AS<type> FORMAT<STRING>).  *  * Vector expressions: CastDateToCharWithFormat, CastDateToStringWithFormat,  *     CastDateToVarCharWithFormat, CastTimestampToCharWithFormat,  *     CastTimestampToStringWithFormat, CastTimestampToVarCharWithFormat.  * Could not use @VectorizedExpressions annotation because e.g. CastXToCharWithFormat,  * CastXToStringWithFormat, CastXToVarCharWithFormat would have same description.  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"cast_format"
argument_list|,
name|value
operator|=
literal|"CAST(<value> AS<type> FORMAT<STRING>) - Converts a datetime value to string or"
operator|+
literal|" string-type value to datetime based on the format pattern specified."
argument_list|,
name|extended
operator|=
literal|"If format is specified with FORMAT argument then SQL:2016 datetime formats will "
operator|+
literal|"be used.\n"
operator|+
literal|"Example:\n "
operator|+
literal|"> SELECT CAST(\"2018-01-01 4 PM\" AS timestamp FORMAT \"yyyy-mm-dd hh12 AM\");\n"
operator|+
literal|"  2018-01-01 16:00:00"
argument_list|)
specifier|public
class|class
name|GenericUDFCastFormat
extends|extends
name|GenericUDF
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GenericUDFCastFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|OUTPUT_TYPES
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
name|HiveParser_IdentifiersParser
operator|.
name|TOK_STRING
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
decl|.
name|put
argument_list|(
name|HiveParser_IdentifiersParser
operator|.
name|TOK_VARCHAR
argument_list|,
name|serdeConstants
operator|.
name|VARCHAR_TYPE_NAME
argument_list|)
decl|.
name|put
argument_list|(
name|HiveParser_IdentifiersParser
operator|.
name|TOK_CHAR
argument_list|,
name|serdeConstants
operator|.
name|CHAR_TYPE_NAME
argument_list|)
decl|.
name|put
argument_list|(
name|HiveParser_IdentifiersParser
operator|.
name|TOK_TIMESTAMP
argument_list|,
name|serdeConstants
operator|.
name|TIMESTAMP_TYPE_NAME
argument_list|)
decl|.
name|put
argument_list|(
name|HiveParser_IdentifiersParser
operator|.
name|TOK_DATE
argument_list|,
name|serdeConstants
operator|.
name|DATE_TYPE_NAME
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|transient
name|HiveSqlDateTimeFormatter
name|formatter
decl_stmt|;
specifier|private
specifier|transient
name|PrimitiveObjectInspector
name|outputOI
decl_stmt|;
specifier|private
specifier|transient
name|PrimitiveObjectInspector
name|inputOI
decl_stmt|;
specifier|public
name|GenericUDFCastFormat
parameter_list|()
block|{   }
comment|/**    * @param arguments    *  0. const int, value of a HiveParser_IdentifiersParser constant which represents a TOK_[TYPE]    *  1. expression to convert    *  2. constant string, format pattern    *  3. (optional) constant int, output char/varchar length    */
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|!=
literal|3
operator|&&
name|arguments
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"Function cast_format requires 3 or 4 arguments (int, expression, StringLiteral"
operator|+
literal|"[, var/char length]), got "
operator|+
name|arguments
operator|.
name|length
argument_list|)
throw|;
block|}
name|outputOI
operator|=
name|getOutputOI
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
try|try
block|{
name|inputOI
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"Function CAST...as ... FORMAT ...takes only primitive types"
argument_list|)
throw|;
block|}
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
name|inputPG
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|inputOI
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
decl_stmt|;
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
name|outputPG
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
name|outputOI
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputOI
operator|.
name|getPrimitiveCategory
argument_list|()
operator|==
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
operator|.
name|TIMESTAMPLOCALTZ
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"Timestamp with local time zone not yet supported for cast ... format function"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|inputPG
operator|==
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
operator|&&
name|outputPG
operator|==
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|DATE_GROUP
operator|||
name|inputPG
operator|==
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|DATE_GROUP
operator|&&
name|outputPG
operator|==
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
operator|||
name|inputPG
operator|==
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|VOID_GROUP
operator|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"Function CAST...as ... FORMAT ... only converts datetime objects to string types"
operator|+
literal|" and string or void objects to datetime types. Type of object provided: "
operator|+
name|outputOI
operator|.
name|getPrimitiveCategory
argument_list|()
operator|+
literal|" in primitive grouping "
operator|+
name|inputPG
operator|+
literal|", type provided: "
operator|+
name|inputOI
operator|.
name|getPrimitiveCategory
argument_list|()
operator|+
literal|" in primitive grouping "
operator|+
name|outputPG
argument_list|)
throw|;
block|}
name|boolean
name|forParsing
init|=
operator|(
name|outputPG
operator|==
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
operator|.
name|DATE_GROUP
operator|)
decl_stmt|;
name|formatter
operator|=
operator|new
name|HiveSqlDateTimeFormatter
argument_list|(
name|getConstantStringValue
argument_list|(
name|arguments
argument_list|,
literal|2
argument_list|)
argument_list|,
name|forParsing
argument_list|)
expr_stmt|;
return|return
name|outputOI
return|;
block|}
specifier|private
name|PrimitiveObjectInspector
name|getOutputOI
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|int
name|key
init|=
name|getConstantIntValue
argument_list|(
name|arguments
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|OUTPUT_TYPES
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
literal|"Cast...format can only convert to DATE, TIMESTAMP, STRING,"
operator|+
literal|"VARCHAR, CHAR. Can't convert to HiveParser_IdentifiersParser constant with value "
operator|+
name|key
argument_list|)
throw|;
block|}
name|String
name|typeString
init|=
name|OUTPUT_TYPES
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|serdeConstants
operator|.
name|VARCHAR_TYPE_NAME
operator|.
name|equals
argument_list|(
name|typeString
argument_list|)
operator|||
name|serdeConstants
operator|.
name|CHAR_TYPE_NAME
operator|.
name|equals
argument_list|(
name|typeString
argument_list|)
condition|)
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|<
literal|4
operator|||
name|arguments
index|[
literal|3
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
name|typeString
operator|+
literal|" missing length argument"
argument_list|)
throw|;
block|}
name|typeString
operator|+=
literal|"("
operator|+
name|getConstantIntValue
argument_list|(
name|arguments
argument_list|,
literal|3
argument_list|)
operator|+
literal|")"
expr_stmt|;
block|}
name|PrimitiveTypeInfo
name|typeInfo
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|typeString
argument_list|)
decl_stmt|;
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|typeInfo
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|o0
init|=
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|o0
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|convert
argument_list|(
name|o0
argument_list|)
return|;
block|}
specifier|private
name|Object
name|convert
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|input
decl_stmt|;
switch|switch
condition|(
name|inputOI
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|STRING
case|:
name|input
operator|=
operator|(
operator|(
name|StringObjectInspector
operator|)
name|inputOI
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
name|input
operator|=
operator|(
operator|(
name|HiveCharObjectInspector
operator|)
name|inputOI
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
operator|.
name|getStrippedValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|VARCHAR
case|:
name|input
operator|=
operator|(
operator|(
name|HiveVarcharObjectInspector
operator|)
name|inputOI
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|input
operator|=
operator|(
operator|(
name|TimestampObjectInspector
operator|)
name|inputOI
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|input
operator|=
operator|(
operator|(
name|DateObjectInspector
operator|)
name|inputOI
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Input type "
operator|+
name|inputOI
operator|.
name|getPrimitiveCategory
argument_list|()
operator|+
literal|" not valid"
argument_list|)
throw|;
block|}
comment|// format here
name|Object
name|formattedOutput
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inputOI
operator|.
name|getPrimitiveCategory
argument_list|()
operator|==
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
operator|.
name|DATE
condition|)
block|{
name|formattedOutput
operator|=
name|formatter
operator|.
name|format
argument_list|(
operator|(
name|Date
operator|)
name|input
argument_list|)
expr_stmt|;
if|if
condition|(
name|formattedOutput
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|inputOI
operator|.
name|getPrimitiveCategory
argument_list|()
operator|==
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
operator|.
name|TIMESTAMP
condition|)
block|{
name|formattedOutput
operator|=
name|formatter
operator|.
name|format
argument_list|(
operator|(
name|Timestamp
operator|)
name|input
argument_list|)
expr_stmt|;
if|if
condition|(
name|formattedOutput
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// parse and create Writables
switch|switch
condition|(
name|outputOI
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|STRING
case|:
return|return
operator|new
name|Text
argument_list|(
operator|(
name|String
operator|)
name|formattedOutput
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
operator|(
operator|(
name|SettableHiveCharObjectInspector
operator|)
name|outputOI
operator|)
operator|.
name|create
argument_list|(
operator|new
name|HiveChar
argument_list|(
operator|(
name|String
operator|)
name|formattedOutput
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
operator|(
operator|(
name|SettableHiveVarcharObjectInspector
operator|)
name|outputOI
operator|)
operator|.
name|create
argument_list|(
operator|new
name|HiveVarchar
argument_list|(
operator|(
name|String
operator|)
name|formattedOutput
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
name|Timestamp
name|t
init|=
name|formatter
operator|.
name|parseTimestamp
argument_list|(
operator|(
name|String
operator|)
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
operator|(
name|SettableTimestampObjectInspector
operator|)
name|outputOI
operator|)
operator|.
name|create
argument_list|(
name|t
argument_list|)
return|;
case|case
name|DATE
case|:
name|Date
name|d
init|=
name|formatter
operator|.
name|parseDate
argument_list|(
operator|(
name|String
operator|)
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
operator|(
name|SettableDateObjectInspector
operator|)
name|outputOI
operator|)
operator|.
name|create
argument_list|(
name|d
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Output type "
operator|+
name|outputOI
operator|.
name|getPrimitiveCategory
argument_list|()
operator|+
literal|" not valid"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
assert|assert
name|children
operator|.
name|length
operator|==
literal|3
operator|||
name|children
operator|.
name|length
operator|==
literal|4
assert|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"CAST( "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|children
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" AS "
argument_list|)
expr_stmt|;
name|int
name|typeKey
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|children
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|OUTPUT_TYPES
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|typeKey
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"HiveParsers_IdentifiersParser index "
argument_list|)
operator|.
name|append
argument_list|(
name|typeKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|OUTPUT_TYPES
operator|.
name|get
argument_list|(
name|typeKey
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|children
operator|.
name|length
operator|==
literal|4
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|children
index|[
literal|3
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" FORMAT "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|children
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" )"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

