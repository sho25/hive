begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
operator|.
name|FilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|type
operator|.
name|SqlTypeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|CalciteSemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
operator|.
name|JoinLeafPredicateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|translator
operator|.
name|SqlFunctionConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|HiveJoinAddNotNullRule
extends|extends
name|RelOptRule
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NOT_NULL_FUNC_NAME
init|=
literal|"isnotnull"
decl_stmt|;
comment|/** The singleton. */
specifier|public
specifier|static
specifier|final
name|HiveJoinAddNotNullRule
name|INSTANCE
init|=
operator|new
name|HiveJoinAddNotNullRule
argument_list|(
name|HiveFilter
operator|.
name|DEFAULT_FILTER_FACTORY
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|FilterFactory
name|filterFactory
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates an HiveJoinAddNotNullRule.    */
specifier|public
name|HiveJoinAddNotNullRule
parameter_list|(
name|FilterFactory
name|filterFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|Join
operator|.
name|class
argument_list|,
name|operand
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|,
name|operand
argument_list|(
name|RelNode
operator|.
name|class
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|filterFactory
operator|=
name|filterFactory
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
specifier|final
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RelNode
name|leftInput
init|=
name|call
operator|.
name|rel
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RelNode
name|rightInput
init|=
name|call
operator|.
name|rel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|!=
name|JoinRelType
operator|.
name|INNER
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|join
operator|.
name|getCondition
argument_list|()
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
return|return;
block|}
name|JoinPredicateInfo
name|joinPredInfo
decl_stmt|;
try|try
block|{
name|joinPredInfo
operator|=
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
operator|.
name|constructJoinPredicateInfo
argument_list|(
name|join
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteSemanticException
name|e
parameter_list|)
block|{
return|return;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|joinLeftKeyPositions
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|joinRightKeyPositions
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|joinPredInfo
operator|.
name|getEquiJoinPredicateElements
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JoinLeafPredicateInfo
name|joinLeafPredInfo
init|=
name|joinPredInfo
operator|.
name|getEquiJoinPredicateElements
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|joinLeftKeyPositions
operator|.
name|addAll
argument_list|(
name|joinLeafPredInfo
operator|.
name|getProjsFromLeftPartOfJoinKeysInChildSchema
argument_list|()
argument_list|)
expr_stmt|;
name|joinRightKeyPositions
operator|.
name|addAll
argument_list|(
name|joinLeafPredInfo
operator|.
name|getProjsFromRightPartOfJoinKeysInChildSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Build not null conditions
specifier|final
name|RelOptCluster
name|cluster
init|=
name|join
operator|.
name|getCluster
argument_list|()
decl_stmt|;
specifier|final
name|RexBuilder
name|rexBuilder
init|=
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|newLeftConditions
init|=
name|getNotNullConditions
argument_list|(
name|cluster
argument_list|,
name|rexBuilder
argument_list|,
name|leftInput
argument_list|,
name|joinLeftKeyPositions
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|newRightConditions
init|=
name|getNotNullConditions
argument_list|(
name|cluster
argument_list|,
name|rexBuilder
argument_list|,
name|rightInput
argument_list|,
name|joinRightKeyPositions
argument_list|)
decl_stmt|;
comment|// Nothing will be added to the expression
if|if
condition|(
name|newLeftConditions
operator|==
literal|null
operator|&&
name|newRightConditions
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|newLeftConditions
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|leftInput
operator|instanceof
name|HiveFilter
condition|)
block|{
name|leftInput
operator|=
name|leftInput
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|leftInput
operator|=
name|createHiveFilterConjunctiveCondition
argument_list|(
name|filterFactory
argument_list|,
name|rexBuilder
argument_list|,
name|leftInput
argument_list|,
name|newLeftConditions
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newRightConditions
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rightInput
operator|instanceof
name|HiveFilter
condition|)
block|{
name|rightInput
operator|=
name|rightInput
operator|.
name|getInput
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|rightInput
operator|=
name|createHiveFilterConjunctiveCondition
argument_list|(
name|filterFactory
argument_list|,
name|rexBuilder
argument_list|,
name|rightInput
argument_list|,
name|newRightConditions
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Join
name|newJoin
init|=
name|join
operator|.
name|copy
argument_list|(
name|join
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|leftInput
argument_list|,
name|rightInput
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|join
operator|.
name|isSemiJoinDone
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|getPlanner
argument_list|()
operator|.
name|onCopy
argument_list|(
name|join
argument_list|,
name|newJoin
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newJoin
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|getNotNullConditions
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|inputKeyPositions
parameter_list|)
block|{
name|boolean
name|added
init|=
literal|false
decl_stmt|;
specifier|final
name|RelDataType
name|returnType
init|=
name|cluster
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|createSqlType
argument_list|(
name|SqlTypeName
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|newConditions
decl_stmt|;
if|if
condition|(
name|input
operator|instanceof
name|HiveFilter
condition|)
block|{
name|newConditions
operator|=
name|splitCondition
argument_list|(
operator|(
operator|(
name|HiveFilter
operator|)
name|input
operator|)
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newConditions
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|pos
range|:
name|inputKeyPositions
control|)
block|{
try|try
block|{
name|RelDataType
name|keyType
init|=
name|input
operator|.
name|getRowType
argument_list|()
operator|.
name|getFieldList
argument_list|()
operator|.
name|get
argument_list|(
name|pos
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// Nothing to do if key cannot be null
if|if
condition|(
operator|!
name|keyType
operator|.
name|isNullable
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|SqlOperator
name|funcCall
init|=
name|SqlFunctionConverter
operator|.
name|getCalciteOperator
argument_list|(
name|NOT_NULL_FUNC_NAME
argument_list|,
name|FunctionRegistry
operator|.
name|getFunctionInfo
argument_list|(
name|NOT_NULL_FUNC_NAME
argument_list|)
operator|.
name|getGenericUDF
argument_list|()
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|keyType
argument_list|)
argument_list|,
name|returnType
argument_list|)
decl_stmt|;
name|RexNode
name|cond
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|funcCall
argument_list|,
name|rexBuilder
operator|.
name|makeInputRef
argument_list|(
name|input
argument_list|,
name|pos
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|digest
init|=
name|cond
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newConditions
operator|.
name|containsKey
argument_list|(
name|digest
argument_list|)
condition|)
block|{
name|newConditions
operator|.
name|put
argument_list|(
name|digest
argument_list|,
name|cond
argument_list|)
expr_stmt|;
name|added
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SemanticException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Nothing will be added to the expression
if|if
condition|(
operator|!
name|added
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|newConditions
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|splitCondition
parameter_list|(
name|RexNode
name|condition
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
name|newConditions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RexNode
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|condition
operator|.
name|getKind
argument_list|()
operator|==
name|SqlKind
operator|.
name|AND
condition|)
block|{
for|for
control|(
name|RexNode
name|node
range|:
operator|(
operator|(
name|RexCall
operator|)
name|condition
operator|)
operator|.
name|getOperands
argument_list|()
control|)
block|{
name|newConditions
operator|.
name|put
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|newConditions
operator|.
name|put
argument_list|(
name|condition
operator|.
name|toString
argument_list|()
argument_list|,
name|condition
argument_list|)
expr_stmt|;
block|}
return|return
name|newConditions
return|;
block|}
specifier|private
specifier|static
name|RelNode
name|createHiveFilterConjunctiveCondition
parameter_list|(
name|FilterFactory
name|filterFactory
parameter_list|,
name|RexBuilder
name|rexBuilder
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|Collection
argument_list|<
name|RexNode
argument_list|>
name|conditions
parameter_list|)
block|{
specifier|final
name|RexNode
name|newCondition
init|=
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|conditions
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|filterFactory
operator|.
name|createFilter
argument_list|(
name|input
argument_list|,
name|newCondition
argument_list|)
return|;
block|}
block|}
end_class

end_unit

