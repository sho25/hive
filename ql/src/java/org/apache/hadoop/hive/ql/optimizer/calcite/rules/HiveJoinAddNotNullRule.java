begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|rules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptRuleCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Join
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|JoinRelType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|RelFactories
operator|.
name|FilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|fun
operator|.
name|SqlStdOperatorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|CalciteSemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
operator|.
name|JoinLeafPredicateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|HiveRelFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|calcite
operator|.
name|reloperators
operator|.
name|HiveSemiJoin
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Responsible for adding not null rules to joins, when the declaration of a join implies that some coulmns  * may not be null.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|HiveJoinAddNotNullRule
extends|extends
name|RelOptRule
block|{
specifier|public
specifier|static
specifier|final
name|HiveJoinAddNotNullRule
name|INSTANCE_JOIN
init|=
operator|new
name|HiveJoinAddNotNullRule
argument_list|(
name|HiveJoin
operator|.
name|class
argument_list|,
name|HiveRelFactories
operator|.
name|HIVE_FILTER_FACTORY
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|HiveJoinAddNotNullRule
name|INSTANCE_SEMIJOIN
init|=
operator|new
name|HiveJoinAddNotNullRule
argument_list|(
name|HiveSemiJoin
operator|.
name|class
argument_list|,
name|HiveRelFactories
operator|.
name|HIVE_FILTER_FACTORY
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|FilterFactory
name|filterFactory
decl_stmt|;
comment|//~ Constructors -----------------------------------------------------------
comment|/**    * Creates an HiveJoinAddNotNullRule.    */
specifier|public
name|HiveJoinAddNotNullRule
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Join
argument_list|>
name|clazz
parameter_list|,
name|RelFactories
operator|.
name|FilterFactory
name|filterFactory
parameter_list|)
block|{
name|super
argument_list|(
name|operand
argument_list|(
name|clazz
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|filterFactory
operator|=
name|filterFactory
expr_stmt|;
block|}
comment|//~ Methods ----------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|void
name|onMatch
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|)
block|{
name|Join
name|join
init|=
name|call
operator|.
name|rel
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|FULL
operator|||
name|join
operator|.
name|getCondition
argument_list|()
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
return|return;
block|}
name|JoinPredicateInfo
name|joinPredInfo
decl_stmt|;
try|try
block|{
name|joinPredInfo
operator|=
name|HiveCalciteUtil
operator|.
name|JoinPredicateInfo
operator|.
name|constructJoinPredicateInfo
argument_list|(
name|join
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CalciteSemanticException
name|e
parameter_list|)
block|{
return|return;
block|}
name|HiveRulesRegistry
name|registry
init|=
name|call
operator|.
name|getPlanner
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|unwrap
argument_list|(
name|HiveRulesRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
assert|assert
name|registry
operator|!=
literal|null
assert|;
name|Set
argument_list|<
name|String
argument_list|>
name|leftPushedPredicates
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|registry
operator|.
name|getPushedPredicates
argument_list|(
name|join
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|rightPushedPredicates
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|registry
operator|.
name|getPushedPredicates
argument_list|(
name|join
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|genPredOnLeft
init|=
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|RIGHT
operator|||
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|INNER
decl_stmt|;
name|boolean
name|genPredOnRight
init|=
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|LEFT
operator|||
name|join
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinRelType
operator|.
name|INNER
decl_stmt|;
name|RexNode
name|newLeftPredicate
init|=
name|getNewPredicate
argument_list|(
name|join
argument_list|,
name|registry
argument_list|,
name|joinPredInfo
argument_list|,
name|leftPushedPredicates
argument_list|,
name|genPredOnLeft
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|RexNode
name|newRightPredicate
init|=
name|getNewPredicate
argument_list|(
name|join
argument_list|,
name|registry
argument_list|,
name|joinPredInfo
argument_list|,
name|rightPushedPredicates
argument_list|,
name|genPredOnRight
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|newLeftPredicate
operator|.
name|isAlwaysTrue
argument_list|()
operator|&&
name|newRightPredicate
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
return|return;
block|}
name|RelNode
name|lChild
init|=
name|getNewChild
argument_list|(
name|call
argument_list|,
name|join
argument_list|,
name|join
operator|.
name|getLeft
argument_list|()
argument_list|,
name|newLeftPredicate
argument_list|)
decl_stmt|;
name|RelNode
name|rChild
init|=
name|getNewChild
argument_list|(
name|call
argument_list|,
name|join
argument_list|,
name|join
operator|.
name|getRight
argument_list|()
argument_list|,
name|newRightPredicate
argument_list|)
decl_stmt|;
name|Join
name|newJoin
init|=
name|join
operator|.
name|copy
argument_list|(
name|join
operator|.
name|getTraitSet
argument_list|()
argument_list|,
name|join
operator|.
name|getCondition
argument_list|()
argument_list|,
name|lChild
argument_list|,
name|rChild
argument_list|,
name|join
operator|.
name|getJoinType
argument_list|()
argument_list|,
name|join
operator|.
name|isSemiJoinDone
argument_list|()
argument_list|)
decl_stmt|;
name|call
operator|.
name|getPlanner
argument_list|()
operator|.
name|onCopy
argument_list|(
name|join
argument_list|,
name|newJoin
argument_list|)
expr_stmt|;
comment|// Register information about created predicates
name|registry
operator|.
name|getPushedPredicates
argument_list|(
name|newJoin
argument_list|,
literal|0
argument_list|)
operator|.
name|addAll
argument_list|(
name|leftPushedPredicates
argument_list|)
expr_stmt|;
name|registry
operator|.
name|getPushedPredicates
argument_list|(
name|newJoin
argument_list|,
literal|1
argument_list|)
operator|.
name|addAll
argument_list|(
name|rightPushedPredicates
argument_list|)
expr_stmt|;
name|call
operator|.
name|transformTo
argument_list|(
name|newJoin
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RexNode
name|getNewPredicate
parameter_list|(
name|Join
name|join
parameter_list|,
name|HiveRulesRegistry
name|registry
parameter_list|,
name|JoinPredicateInfo
name|joinPredInfo
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|pushedPredicates
parameter_list|,
name|boolean
name|genPred
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|RexBuilder
name|rexBuilder
init|=
name|join
operator|.
name|getCluster
argument_list|()
operator|.
name|getRexBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|genPred
condition|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|joinExprsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|JoinLeafPredicateInfo
name|joinLeafPredicateInfo
range|:
name|joinPredInfo
operator|.
name|getEquiJoinPredicateElements
argument_list|()
control|)
block|{
name|joinExprsList
operator|.
name|addAll
argument_list|(
name|joinLeafPredicateInfo
operator|.
name|getJoinExprs
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|JoinLeafPredicateInfo
name|joinLeafPredicateInfo
range|:
name|joinPredInfo
operator|.
name|getNonEquiJoinPredicateElements
argument_list|()
control|)
block|{
if|if
condition|(
name|SqlKind
operator|.
name|COMPARISON
operator|.
name|contains
argument_list|(
name|joinLeafPredicateInfo
operator|.
name|getComparisonType
argument_list|()
argument_list|)
condition|)
block|{
name|joinExprsList
operator|.
name|addAll
argument_list|(
name|joinLeafPredicateInfo
operator|.
name|getJoinExprs
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|RexNode
argument_list|>
name|newConditions
init|=
name|getNotNullConditions
argument_list|(
name|rexBuilder
argument_list|,
name|joinExprsList
argument_list|,
name|pushedPredicates
argument_list|)
decl_stmt|;
return|return
name|RexUtil
operator|.
name|composeConjunction
argument_list|(
name|rexBuilder
argument_list|,
name|newConditions
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rexBuilder
operator|.
name|makeLiteral
argument_list|(
literal|true
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|RexNode
argument_list|>
name|getNotNullConditions
parameter_list|(
name|RexBuilder
name|rexBuilder
parameter_list|,
name|List
argument_list|<
name|RexNode
argument_list|>
name|inputJoinExprs
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|pushedPredicates
parameter_list|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|newConditions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|rexNode
range|:
name|inputJoinExprs
control|)
block|{
name|RexNode
name|cond
init|=
name|rexBuilder
operator|.
name|makeCall
argument_list|(
name|SqlStdOperatorTable
operator|.
name|IS_NOT_NULL
argument_list|,
name|rexNode
argument_list|)
decl_stmt|;
name|String
name|digest
init|=
name|cond
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|pushedPredicates
operator|.
name|add
argument_list|(
name|digest
argument_list|)
condition|)
block|{
name|newConditions
operator|.
name|add
argument_list|(
name|cond
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newConditions
return|;
block|}
specifier|private
name|RelNode
name|getNewChild
parameter_list|(
name|RelOptRuleCall
name|call
parameter_list|,
name|Join
name|join
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RexNode
name|newPredicate
parameter_list|)
block|{
if|if
condition|(
operator|!
name|newPredicate
operator|.
name|isAlwaysTrue
argument_list|()
condition|)
block|{
name|RelNode
name|newChild
init|=
name|filterFactory
operator|.
name|createFilter
argument_list|(
name|child
argument_list|,
name|newPredicate
argument_list|)
decl_stmt|;
name|call
operator|.
name|getPlanner
argument_list|()
operator|.
name|onCopy
argument_list|(
name|child
argument_list|,
name|newChild
argument_list|)
expr_stmt|;
return|return
name|newChild
return|;
block|}
return|return
name|child
return|;
block|}
block|}
end_class

end_unit

