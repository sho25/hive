begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|exprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|exprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|joinCond
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|joinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|SerDeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * Join operator implementation.  */
end_comment

begin_class
specifier|public
class|class
name|JoinOperator
extends|extends
name|Operator
argument_list|<
name|joinDesc
argument_list|>
implements|implements
name|Serializable
block|{
comment|// a list of value expressions for each alias are maintained
specifier|public
specifier|static
class|class
name|JoinExprMap
block|{
name|ExprNodeEvaluator
index|[]
name|valueFields
decl_stmt|;
name|List
argument_list|<
name|SerDeField
argument_list|>
name|listFields
decl_stmt|;
specifier|public
name|JoinExprMap
parameter_list|(
name|ExprNodeEvaluator
index|[]
name|valueFields
parameter_list|,
name|List
argument_list|<
name|SerDeField
argument_list|>
name|listFields
parameter_list|)
block|{
name|this
operator|.
name|valueFields
operator|=
name|valueFields
expr_stmt|;
name|this
operator|.
name|listFields
operator|=
name|listFields
expr_stmt|;
block|}
specifier|public
name|ExprNodeEvaluator
index|[]
name|getValueFields
parameter_list|()
block|{
return|return
name|valueFields
return|;
block|}
specifier|public
name|List
argument_list|<
name|SerDeField
argument_list|>
name|getListFields
parameter_list|()
block|{
return|return
name|listFields
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|IntermediateObject
block|{
name|CompositeHiveObject
index|[]
name|objs
decl_stmt|;
name|int
name|curSize
decl_stmt|;
specifier|public
name|IntermediateObject
parameter_list|(
name|CompositeHiveObject
index|[]
name|objs
parameter_list|,
name|int
name|curSize
parameter_list|)
block|{
name|this
operator|.
name|objs
operator|=
name|objs
expr_stmt|;
name|this
operator|.
name|curSize
operator|=
name|curSize
expr_stmt|;
block|}
specifier|public
name|CompositeHiveObject
index|[]
name|getObjs
parameter_list|()
block|{
return|return
name|objs
return|;
block|}
specifier|public
name|int
name|getCurSize
parameter_list|()
block|{
return|return
name|curSize
return|;
block|}
specifier|public
name|void
name|pushObj
parameter_list|(
name|CompositeHiveObject
name|obj
parameter_list|)
block|{
name|objs
index|[
name|curSize
operator|++
index|]
operator|=
name|obj
expr_stmt|;
block|}
specifier|public
name|void
name|popObj
parameter_list|()
block|{
name|curSize
operator|--
expr_stmt|;
block|}
block|}
specifier|transient
specifier|protected
name|int
name|numValues
decl_stmt|;
comment|// number of aliases
specifier|transient
specifier|static
specifier|protected
name|ExprNodeEvaluator
name|aliasField
decl_stmt|;
specifier|transient
specifier|protected
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|JoinExprMap
argument_list|>
name|joinExprs
decl_stmt|;
specifier|transient
specifier|static
specifier|protected
name|Byte
index|[]
name|order
decl_stmt|;
comment|// order in which the results should be outputted
specifier|transient
specifier|protected
name|joinCond
index|[]
name|condn
decl_stmt|;
specifier|transient
specifier|protected
name|boolean
name|noOuterJoin
decl_stmt|;
specifier|transient
specifier|private
name|HiveObject
index|[]
name|dummyObj
decl_stmt|;
comment|// for outer joins, contains the potential nulls for the concerned aliases
specifier|transient
specifier|private
name|Vector
argument_list|<
name|CompositeHiveObject
argument_list|>
index|[]
name|dummyObjVectors
decl_stmt|;
specifier|transient
specifier|private
name|Stack
argument_list|<
name|Iterator
argument_list|<
name|CompositeHiveObject
argument_list|>
argument_list|>
name|iterators
decl_stmt|;
specifier|transient
specifier|private
name|int
name|totalSz
decl_stmt|;
comment|// total size of the composite object
static|static
block|{
name|aliasField
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
operator|new
name|exprNodeColumnDesc
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Utilities
operator|.
name|ReduceField
operator|.
name|ALIAS
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|Vector
argument_list|<
name|CompositeHiveObject
argument_list|>
argument_list|>
name|storage
decl_stmt|;
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|totalSz
operator|=
literal|0
expr_stmt|;
comment|// Map that contains the rows for each alias
name|storage
operator|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|Vector
argument_list|<
name|CompositeHiveObject
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|numValues
operator|=
name|conf
operator|.
name|getExprs
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|joinExprs
operator|=
operator|new
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|JoinExprMap
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|order
operator|==
literal|null
condition|)
block|{
name|order
operator|=
operator|new
name|Byte
index|[
name|numValues
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
name|order
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
name|condn
operator|=
name|conf
operator|.
name|getConds
argument_list|()
expr_stmt|;
name|noOuterJoin
operator|=
name|conf
operator|.
name|getNoOuterJoin
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Byte
argument_list|,
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
argument_list|>
name|map
init|=
name|conf
operator|.
name|getExprs
argument_list|()
decl_stmt|;
name|Iterator
name|entryIter
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entryIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|entryIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Byte
name|key
init|=
operator|(
name|Byte
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
name|expr
init|=
operator|(
name|ArrayList
argument_list|<
name|exprNodeDesc
argument_list|>
operator|)
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|sz
init|=
name|expr
operator|.
name|size
argument_list|()
decl_stmt|;
name|totalSz
operator|+=
name|sz
expr_stmt|;
name|ExprNodeEvaluator
index|[]
name|valueFields
init|=
operator|new
name|ExprNodeEvaluator
index|[
name|sz
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sz
condition|;
name|j
operator|++
control|)
name|valueFields
index|[
name|j
index|]
operator|=
name|ExprNodeEvaluatorFactory
operator|.
name|get
argument_list|(
name|expr
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|joinExprs
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|JoinExprMap
argument_list|(
name|valueFields
argument_list|,
name|CompositeHiveObject
operator|.
name|getFields
argument_list|(
name|sz
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dummyObj
operator|=
operator|new
name|HiveObject
index|[
name|numValues
index|]
expr_stmt|;
name|dummyObjVectors
operator|=
operator|new
name|Vector
index|[
name|numValues
index|]
expr_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Byte
name|alias
range|:
name|order
control|)
block|{
name|int
name|sz
init|=
name|map
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|CompositeHiveObject
name|nr
init|=
operator|new
name|CompositeHiveObject
argument_list|(
name|sz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sz
condition|;
name|j
operator|++
control|)
name|nr
operator|.
name|addHiveObject
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|dummyObj
index|[
name|pos
index|]
operator|=
name|nr
expr_stmt|;
name|Vector
argument_list|<
name|CompositeHiveObject
argument_list|>
name|values
init|=
operator|new
name|Vector
argument_list|<
name|CompositeHiveObject
argument_list|>
argument_list|()
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|(
name|CompositeHiveObject
operator|)
name|dummyObj
index|[
name|pos
index|]
argument_list|)
expr_stmt|;
name|dummyObjVectors
index|[
name|pos
index|]
operator|=
name|values
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
name|iterators
operator|=
operator|new
name|Stack
argument_list|<
name|Iterator
argument_list|<
name|CompositeHiveObject
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|startGroup
parameter_list|()
throws|throws
name|HiveException
block|{
name|l4j
operator|.
name|trace
argument_list|(
literal|"Join: Starting new group"
argument_list|)
expr_stmt|;
name|storage
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Byte
name|alias
range|:
name|order
control|)
name|storage
operator|.
name|put
argument_list|(
name|alias
argument_list|,
operator|new
name|Vector
argument_list|<
name|CompositeHiveObject
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|process
parameter_list|(
name|HiveObject
name|row
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
comment|// get alias
name|Byte
name|alias
init|=
call|(
name|Byte
call|)
argument_list|(
name|aliasField
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
operator|.
name|getJavaObject
argument_list|()
argument_list|)
decl_stmt|;
comment|// get the expressions for that alias
name|JoinExprMap
name|exmap
init|=
name|joinExprs
operator|.
name|get
argument_list|(
name|alias
argument_list|)
decl_stmt|;
name|ExprNodeEvaluator
index|[]
name|valueFields
init|=
name|exmap
operator|.
name|getValueFields
argument_list|()
decl_stmt|;
comment|// Compute the values
name|CompositeHiveObject
name|nr
init|=
operator|new
name|CompositeHiveObject
argument_list|(
name|valueFields
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|ExprNodeEvaluator
name|vField
range|:
name|valueFields
control|)
name|nr
operator|.
name|addHiveObject
argument_list|(
name|vField
operator|.
name|evaluate
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add the value to the vector
name|storage
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|add
argument_list|(
name|nr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|createForwardJoinObject
parameter_list|(
name|IntermediateObject
name|intObj
parameter_list|,
name|boolean
index|[]
name|nullsArr
parameter_list|)
throws|throws
name|HiveException
block|{
name|CompositeHiveObject
name|nr
init|=
operator|new
name|CompositeHiveObject
argument_list|(
name|totalSz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|Byte
name|alias
init|=
name|order
index|[
name|i
index|]
decl_stmt|;
name|int
name|sz
init|=
name|joinExprs
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|getValueFields
argument_list|()
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|nullsArr
index|[
name|i
index|]
condition|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sz
condition|;
name|j
operator|++
control|)
name|nr
operator|.
name|addHiveObject
argument_list|(
literal|null
argument_list|)
expr_stmt|;
else|else
block|{
name|List
argument_list|<
name|SerDeField
argument_list|>
name|fields
init|=
name|joinExprs
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|getListFields
argument_list|()
decl_stmt|;
name|CompositeHiveObject
name|obj
init|=
name|intObj
operator|.
name|getObjs
argument_list|()
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sz
condition|;
name|j
operator|++
control|)
name|nr
operator|.
name|addHiveObject
argument_list|(
name|obj
operator|.
name|get
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|forward
argument_list|(
name|nr
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copyOldArray
parameter_list|(
name|boolean
index|[]
name|src
parameter_list|,
name|boolean
index|[]
name|dest
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|dest
index|[
name|i
index|]
operator|=
name|src
index|[
name|i
index|]
expr_stmt|;
block|}
specifier|private
name|Vector
argument_list|<
name|boolean
index|[]
argument_list|>
name|joinObjectsInnerJoin
parameter_list|(
name|Vector
argument_list|<
name|boolean
index|[]
argument_list|>
name|resNulls
parameter_list|,
name|Vector
argument_list|<
name|boolean
index|[]
argument_list|>
name|inputNulls
parameter_list|,
name|CompositeHiveObject
name|newObj
parameter_list|,
name|IntermediateObject
name|intObj
parameter_list|,
name|int
name|left
parameter_list|,
name|boolean
name|newObjNull
parameter_list|)
block|{
if|if
condition|(
name|newObjNull
condition|)
return|return
name|resNulls
return|;
name|Iterator
argument_list|<
name|boolean
index|[]
argument_list|>
name|nullsIter
init|=
name|inputNulls
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nullsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
index|[]
name|oldNulls
init|=
name|nullsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|oldObjNull
init|=
name|oldNulls
index|[
name|left
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|oldObjNull
condition|)
block|{
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
name|copyOldArray
argument_list|(
name|oldNulls
argument_list|,
name|newNulls
argument_list|)
expr_stmt|;
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
literal|false
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resNulls
return|;
block|}
specifier|private
name|Vector
argument_list|<
name|boolean
index|[]
argument_list|>
name|joinObjectsLeftOuterJoin
parameter_list|(
name|Vector
argument_list|<
name|boolean
index|[]
argument_list|>
name|resNulls
parameter_list|,
name|Vector
argument_list|<
name|boolean
index|[]
argument_list|>
name|inputNulls
parameter_list|,
name|CompositeHiveObject
name|newObj
parameter_list|,
name|IntermediateObject
name|intObj
parameter_list|,
name|int
name|left
parameter_list|,
name|boolean
name|newObjNull
parameter_list|)
block|{
name|Iterator
argument_list|<
name|boolean
index|[]
argument_list|>
name|nullsIter
init|=
name|inputNulls
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nullsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
index|[]
name|oldNulls
init|=
name|nullsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|oldObjNull
init|=
name|oldNulls
index|[
name|left
index|]
decl_stmt|;
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
name|copyOldArray
argument_list|(
name|oldNulls
argument_list|,
name|newNulls
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldObjNull
condition|)
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
literal|true
expr_stmt|;
else|else
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
name|newObjNull
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
block|}
return|return
name|resNulls
return|;
block|}
specifier|private
name|Vector
argument_list|<
name|boolean
index|[]
argument_list|>
name|joinObjectsRightOuterJoin
parameter_list|(
name|Vector
argument_list|<
name|boolean
index|[]
argument_list|>
name|resNulls
parameter_list|,
name|Vector
argument_list|<
name|boolean
index|[]
argument_list|>
name|inputNulls
parameter_list|,
name|CompositeHiveObject
name|newObj
parameter_list|,
name|IntermediateObject
name|intObj
parameter_list|,
name|int
name|left
parameter_list|,
name|boolean
name|newObjNull
parameter_list|)
block|{
if|if
condition|(
name|newObjNull
condition|)
return|return
name|resNulls
return|;
name|boolean
name|allOldObjsNull
init|=
literal|true
decl_stmt|;
name|Iterator
argument_list|<
name|boolean
index|[]
argument_list|>
name|nullsIter
init|=
name|inputNulls
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nullsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
index|[]
name|oldNulls
init|=
name|nullsIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oldNulls
index|[
name|left
index|]
condition|)
block|{
name|allOldObjsNull
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
name|nullsIter
operator|=
name|inputNulls
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|nullsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
index|[]
name|oldNulls
init|=
name|nullsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|oldObjNull
init|=
name|oldNulls
index|[
name|left
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|oldObjNull
condition|)
block|{
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
name|copyOldArray
argument_list|(
name|oldNulls
argument_list|,
name|newNulls
argument_list|)
expr_stmt|;
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
name|newObjNull
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allOldObjsNull
condition|)
block|{
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|intObj
operator|.
name|getCurSize
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
name|newNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
name|newObjNull
expr_stmt|;
return|return
name|resNulls
return|;
block|}
block|}
return|return
name|resNulls
return|;
block|}
specifier|private
name|Vector
argument_list|<
name|boolean
index|[]
argument_list|>
name|joinObjectsFullOuterJoin
parameter_list|(
name|Vector
argument_list|<
name|boolean
index|[]
argument_list|>
name|resNulls
parameter_list|,
name|Vector
argument_list|<
name|boolean
index|[]
argument_list|>
name|inputNulls
parameter_list|,
name|CompositeHiveObject
name|newObj
parameter_list|,
name|IntermediateObject
name|intObj
parameter_list|,
name|int
name|left
parameter_list|,
name|boolean
name|newObjNull
parameter_list|)
block|{
if|if
condition|(
name|newObjNull
condition|)
block|{
name|Iterator
argument_list|<
name|boolean
index|[]
argument_list|>
name|nullsIter
init|=
name|inputNulls
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nullsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
index|[]
name|oldNulls
init|=
name|nullsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
name|copyOldArray
argument_list|(
name|oldNulls
argument_list|,
name|newNulls
argument_list|)
expr_stmt|;
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
name|newObjNull
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
block|}
return|return
name|resNulls
return|;
block|}
name|boolean
name|allOldObjsNull
init|=
literal|true
decl_stmt|;
name|Iterator
argument_list|<
name|boolean
index|[]
argument_list|>
name|nullsIter
init|=
name|inputNulls
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nullsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
index|[]
name|oldNulls
init|=
name|nullsIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oldNulls
index|[
name|left
index|]
condition|)
block|{
name|allOldObjsNull
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
name|boolean
name|rhsPreserved
init|=
literal|false
decl_stmt|;
name|nullsIter
operator|=
name|inputNulls
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|nullsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
index|[]
name|oldNulls
init|=
name|nullsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|oldObjNull
init|=
name|oldNulls
index|[
name|left
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|oldObjNull
condition|)
block|{
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
name|copyOldArray
argument_list|(
name|oldNulls
argument_list|,
name|newNulls
argument_list|)
expr_stmt|;
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
name|newObjNull
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oldObjNull
condition|)
block|{
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
name|copyOldArray
argument_list|(
name|oldNulls
argument_list|,
name|newNulls
argument_list|)
expr_stmt|;
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
literal|true
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
if|if
condition|(
name|allOldObjsNull
operator|&&
operator|!
name|rhsPreserved
condition|)
block|{
name|newNulls
operator|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldNulls
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|newNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|newNulls
index|[
name|oldNulls
operator|.
name|length
index|]
operator|=
literal|false
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
name|rhsPreserved
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|resNulls
return|;
block|}
comment|/*    * The new input is added to the list of existing inputs. Each entry in the     * array of inputNulls denotes the entries in the intermediate object to    * be used. The intermediate object is augmented with the new object, and     * list of nulls is changed appropriately. The list will contain all non-nulls    * for a inner join. The outer joins are processed appropriately.    */
specifier|private
name|Vector
argument_list|<
name|boolean
index|[]
argument_list|>
name|joinObjects
parameter_list|(
name|Vector
argument_list|<
name|boolean
index|[]
argument_list|>
name|inputNulls
parameter_list|,
name|CompositeHiveObject
name|newObj
parameter_list|,
name|IntermediateObject
name|intObj
parameter_list|,
name|int
name|joinPos
parameter_list|)
block|{
name|Vector
argument_list|<
name|boolean
index|[]
argument_list|>
name|resNulls
init|=
operator|new
name|Vector
argument_list|<
name|boolean
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|newObjNull
init|=
name|newObj
operator|==
name|dummyObj
index|[
name|joinPos
index|]
condition|?
literal|true
else|:
literal|false
decl_stmt|;
if|if
condition|(
name|joinPos
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|newObjNull
condition|)
return|return
literal|null
return|;
name|boolean
index|[]
name|nulls
init|=
operator|new
name|boolean
index|[
literal|1
index|]
decl_stmt|;
name|nulls
index|[
literal|0
index|]
operator|=
name|newObjNull
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|nulls
argument_list|)
expr_stmt|;
return|return
name|resNulls
return|;
block|}
name|int
name|left
init|=
name|condn
index|[
name|joinPos
operator|-
literal|1
index|]
operator|.
name|getLeft
argument_list|()
decl_stmt|;
name|int
name|type
init|=
name|condn
index|[
name|joinPos
operator|-
literal|1
index|]
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// process all nulls for RIGHT and FULL OUTER JOINS
if|if
condition|(
operator|(
operator|(
name|type
operator|==
name|joinDesc
operator|.
name|RIGHT_OUTER_JOIN
operator|)
operator|||
operator|(
name|type
operator|==
name|joinDesc
operator|.
name|FULL_OUTER_JOIN
operator|)
operator|)
operator|&&
operator|!
name|newObjNull
operator|&&
operator|(
name|inputNulls
operator|==
literal|null
operator|)
condition|)
block|{
name|boolean
index|[]
name|newNulls
init|=
operator|new
name|boolean
index|[
name|intObj
operator|.
name|getCurSize
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newNulls
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
name|newNulls
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|newNulls
index|[
name|newNulls
operator|.
name|length
operator|-
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|resNulls
operator|.
name|add
argument_list|(
name|newNulls
argument_list|)
expr_stmt|;
return|return
name|resNulls
return|;
block|}
if|if
condition|(
name|inputNulls
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|type
operator|==
name|joinDesc
operator|.
name|INNER_JOIN
condition|)
return|return
name|joinObjectsInnerJoin
argument_list|(
name|resNulls
argument_list|,
name|inputNulls
argument_list|,
name|newObj
argument_list|,
name|intObj
argument_list|,
name|left
argument_list|,
name|newObjNull
argument_list|)
return|;
elseif|else
if|if
condition|(
name|type
operator|==
name|joinDesc
operator|.
name|LEFT_OUTER_JOIN
condition|)
return|return
name|joinObjectsLeftOuterJoin
argument_list|(
name|resNulls
argument_list|,
name|inputNulls
argument_list|,
name|newObj
argument_list|,
name|intObj
argument_list|,
name|left
argument_list|,
name|newObjNull
argument_list|)
return|;
elseif|else
if|if
condition|(
name|type
operator|==
name|joinDesc
operator|.
name|RIGHT_OUTER_JOIN
condition|)
return|return
name|joinObjectsRightOuterJoin
argument_list|(
name|resNulls
argument_list|,
name|inputNulls
argument_list|,
name|newObj
argument_list|,
name|intObj
argument_list|,
name|left
argument_list|,
name|newObjNull
argument_list|)
return|;
assert|assert
operator|(
name|type
operator|==
name|joinDesc
operator|.
name|FULL_OUTER_JOIN
operator|)
assert|;
return|return
name|joinObjectsFullOuterJoin
argument_list|(
name|resNulls
argument_list|,
name|inputNulls
argument_list|,
name|newObj
argument_list|,
name|intObj
argument_list|,
name|left
argument_list|,
name|newObjNull
argument_list|)
return|;
block|}
comment|/*     * genObject is a recursive function. For the inputs, a array of    * bitvectors is maintained (inputNulls) where each entry denotes whether    * the element is to be used or not (whether it is null or not). The size of    * the bitvector is same as the number of inputs under consideration     * currently. When all inputs are accounted for, the output is forwared    * appropriately.    */
specifier|private
name|void
name|genObject
parameter_list|(
name|Vector
argument_list|<
name|boolean
index|[]
argument_list|>
name|inputNulls
parameter_list|,
name|int
name|aliasNum
parameter_list|,
name|IntermediateObject
name|intObj
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|aliasNum
operator|<
name|numValues
condition|)
block|{
name|Iterator
argument_list|<
name|CompositeHiveObject
argument_list|>
name|aliasRes
init|=
name|storage
operator|.
name|get
argument_list|(
name|order
index|[
name|aliasNum
index|]
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iterators
operator|.
name|push
argument_list|(
name|aliasRes
argument_list|)
expr_stmt|;
while|while
condition|(
name|aliasRes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CompositeHiveObject
name|newObj
init|=
name|aliasRes
operator|.
name|next
argument_list|()
decl_stmt|;
name|intObj
operator|.
name|pushObj
argument_list|(
name|newObj
argument_list|)
expr_stmt|;
name|Vector
argument_list|<
name|boolean
index|[]
argument_list|>
name|newNulls
init|=
name|joinObjects
argument_list|(
name|inputNulls
argument_list|,
name|newObj
argument_list|,
name|intObj
argument_list|,
name|aliasNum
argument_list|)
decl_stmt|;
name|genObject
argument_list|(
name|newNulls
argument_list|,
name|aliasNum
operator|+
literal|1
argument_list|,
name|intObj
argument_list|)
expr_stmt|;
name|intObj
operator|.
name|popObj
argument_list|()
expr_stmt|;
block|}
name|iterators
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|inputNulls
operator|==
literal|null
condition|)
return|return;
name|Iterator
argument_list|<
name|boolean
index|[]
argument_list|>
name|nullsIter
init|=
name|inputNulls
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nullsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|boolean
index|[]
name|nullsVec
init|=
name|nullsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|createForwardJoinObject
argument_list|(
name|intObj
argument_list|,
name|nullsVec
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Forward a record of join results.    *     * @throws HiveException    */
specifier|public
name|void
name|endGroup
parameter_list|()
throws|throws
name|HiveException
block|{
try|try
block|{
name|l4j
operator|.
name|trace
argument_list|(
literal|"Join Op: endGroup called"
argument_list|)
expr_stmt|;
comment|// does any result need to be emitted
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|Byte
name|alias
init|=
name|order
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|storage
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|noOuterJoin
condition|)
return|return;
else|else
name|storage
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|dummyObjVectors
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|genObject
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
operator|new
name|IntermediateObject
argument_list|(
operator|new
name|CompositeHiveObject
index|[
name|numValues
index|]
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * All done    *     */
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|HiveException
block|{
name|l4j
operator|.
name|trace
argument_list|(
literal|"Join Op close"
argument_list|)
expr_stmt|;
name|super
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

