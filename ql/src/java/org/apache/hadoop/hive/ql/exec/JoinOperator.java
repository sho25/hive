begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|joinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_comment
comment|/**  * Join operator implementation.  */
end_comment

begin_class
specifier|public
class|class
name|JoinOperator
extends|extends
name|CommonJoinOperator
argument_list|<
name|joinDesc
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|initializeOp
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|initializeOp
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|initializeChildren
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|process
parameter_list|(
name|Object
name|row
parameter_list|,
name|int
name|tag
parameter_list|)
throws|throws
name|HiveException
block|{
try|try
block|{
comment|// get alias
name|alias
operator|=
operator|(
name|byte
operator|)
name|tag
expr_stmt|;
if|if
condition|(
operator|(
name|lastAlias
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
name|lastAlias
operator|.
name|equals
argument_list|(
name|alias
argument_list|)
operator|)
condition|)
name|nextSz
operator|=
name|joinEmitInterval
expr_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|nr
init|=
name|computeValues
argument_list|(
name|row
argument_list|,
name|joinValues
operator|.
name|get
argument_list|(
name|alias
argument_list|)
argument_list|,
name|joinValuesObjectInspectors
operator|.
name|get
argument_list|(
name|alias
argument_list|)
argument_list|)
decl_stmt|;
comment|// number of rows for the key in the given table
name|int
name|sz
init|=
name|storage
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Are we consuming too much memory
if|if
condition|(
name|alias
operator|==
name|numAliases
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|sz
operator|==
name|joinEmitInterval
condition|)
block|{
comment|// The input is sorted by alias, so if we are already in the last join operand,
comment|// we can emit some results now.
comment|// Note this has to be done before adding the current row to the storage,
comment|// to preserve the correctness for outer joins.
name|checkAndGenObject
argument_list|()
expr_stmt|;
name|storage
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|sz
operator|==
name|nextSz
condition|)
block|{
comment|// Output a warning if we reached at least 1000 rows for a join operand
comment|// We won't output a warning for the last join operand since the size
comment|// will never goes to joinEmitInterval.
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|inputObjInspectors
index|[
name|tag
index|]
decl_stmt|;
name|StructField
name|sf
init|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
name|Utilities
operator|.
name|ReduceField
operator|.
name|KEY
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|keyObject
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|sf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"table "
operator|+
name|alias
operator|+
literal|" has "
operator|+
name|sz
operator|+
literal|" rows for join key "
operator|+
name|keyObject
argument_list|)
expr_stmt|;
name|nextSz
operator|=
name|getNextSize
argument_list|(
name|nextSz
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add the value to the vector
name|storage
operator|.
name|get
argument_list|(
name|alias
argument_list|)
operator|.
name|add
argument_list|(
name|nr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|HiveException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

