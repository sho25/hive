begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|PTFUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFInvocationSpec
operator|.
name|PTFQueryInputType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|PTFTranslator
operator|.
name|LeadLagInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|RowResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|TypeCheckCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WindowingSpec
operator|.
name|Direction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|ptf
operator|.
name|TableFunctionEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_class
annotation|@
name|Explain
argument_list|(
name|displayName
operator|=
literal|"PTF Operator"
argument_list|)
specifier|public
class|class
name|PTFDesc
extends|extends
name|AbstractOperatorDesc
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PTFDesc
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|PartitionedTableFunctionDef
name|funcDef
decl_stmt|;
name|LeadLagInfo
name|llInfo
decl_stmt|;
static|static
block|{
name|PTFUtils
operator|.
name|makeTransient
argument_list|(
name|PTFDesc
operator|.
name|class
argument_list|,
literal|"llInfo"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PartitionedTableFunctionDef
name|getFuncDef
parameter_list|()
block|{
return|return
name|funcDef
return|;
block|}
specifier|public
name|void
name|setFuncDef
parameter_list|(
name|PartitionedTableFunctionDef
name|funcDef
parameter_list|)
block|{
name|this
operator|.
name|funcDef
operator|=
name|funcDef
expr_stmt|;
block|}
specifier|public
name|PartitionedTableFunctionDef
name|getStartOfChain
parameter_list|()
block|{
return|return
name|funcDef
operator|==
literal|null
condition|?
literal|null
else|:
name|funcDef
operator|.
name|getStartOfChain
argument_list|()
return|;
block|}
specifier|public
name|LeadLagInfo
name|getLlInfo
parameter_list|()
block|{
return|return
name|llInfo
return|;
block|}
specifier|public
name|void
name|setLlInfo
parameter_list|(
name|LeadLagInfo
name|llInfo
parameter_list|)
block|{
name|this
operator|.
name|llInfo
operator|=
name|llInfo
expr_stmt|;
block|}
specifier|public
name|boolean
name|forWindowing
parameter_list|()
block|{
return|return
name|funcDef
operator|!=
literal|null
operator|&&
operator|(
name|funcDef
operator|instanceof
name|WindowTableFunctionDef
operator|)
return|;
block|}
specifier|public
specifier|abstract
specifier|static
class|class
name|PTFInputDef
block|{
name|String
name|expressionTreeString
decl_stmt|;
name|ShapeDetails
name|outputShape
decl_stmt|;
name|String
name|alias
decl_stmt|;
specifier|public
name|String
name|getExpressionTreeString
parameter_list|()
block|{
return|return
name|expressionTreeString
return|;
block|}
specifier|public
name|void
name|setExpressionTreeString
parameter_list|(
name|String
name|expressionTreeString
parameter_list|)
block|{
name|this
operator|.
name|expressionTreeString
operator|=
name|expressionTreeString
expr_stmt|;
block|}
specifier|public
name|ShapeDetails
name|getOutputShape
parameter_list|()
block|{
return|return
name|outputShape
return|;
block|}
specifier|public
name|void
name|setOutputShape
parameter_list|(
name|ShapeDetails
name|outputShape
parameter_list|)
block|{
name|this
operator|.
name|outputShape
operator|=
name|outputShape
expr_stmt|;
block|}
specifier|public
name|String
name|getAlias
parameter_list|()
block|{
return|return
name|alias
return|;
block|}
specifier|public
name|void
name|setAlias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|PTFInputDef
name|getInput
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|PTFQueryInputDef
extends|extends
name|PTFInputDef
block|{
name|String
name|destination
decl_stmt|;
name|PTFQueryInputType
name|type
decl_stmt|;
specifier|public
name|String
name|getDestination
parameter_list|()
block|{
return|return
name|destination
return|;
block|}
specifier|public
name|void
name|setDestination
parameter_list|(
name|String
name|destination
parameter_list|)
block|{
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
block|}
specifier|public
name|PTFQueryInputType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|PTFQueryInputType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PTFInputDef
name|getInput
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PartitionedTableFunctionDef
extends|extends
name|PTFInputDef
block|{
name|String
name|name
decl_stmt|;
name|String
name|resolverClassName
decl_stmt|;
name|ShapeDetails
name|rawInputShape
decl_stmt|;
name|boolean
name|carryForwardNames
decl_stmt|;
name|PTFInputDef
name|input
decl_stmt|;
name|ArrayList
argument_list|<
name|PTFExpressionDef
argument_list|>
name|args
decl_stmt|;
name|PartitionDef
name|partition
decl_stmt|;
name|OrderDef
name|order
decl_stmt|;
name|TableFunctionEvaluator
name|tFunction
decl_stmt|;
name|boolean
name|transformsRawInput
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|ShapeDetails
name|getRawInputShape
parameter_list|()
block|{
return|return
name|rawInputShape
return|;
block|}
specifier|public
name|void
name|setRawInputShape
parameter_list|(
name|ShapeDetails
name|rawInputShape
parameter_list|)
block|{
name|this
operator|.
name|rawInputShape
operator|=
name|rawInputShape
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCarryForwardNames
parameter_list|()
block|{
return|return
name|carryForwardNames
return|;
block|}
specifier|public
name|void
name|setCarryForwardNames
parameter_list|(
name|boolean
name|carryForwardNames
parameter_list|)
block|{
name|this
operator|.
name|carryForwardNames
operator|=
name|carryForwardNames
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PTFInputDef
name|getInput
parameter_list|()
block|{
return|return
name|input
return|;
block|}
specifier|public
name|void
name|setInput
parameter_list|(
name|PTFInputDef
name|input
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
block|}
specifier|public
name|PartitionDef
name|getPartition
parameter_list|()
block|{
return|return
name|partition
return|;
block|}
specifier|public
name|void
name|setPartition
parameter_list|(
name|PartitionDef
name|partition
parameter_list|)
block|{
name|this
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
block|}
specifier|public
name|OrderDef
name|getOrder
parameter_list|()
block|{
return|return
name|order
return|;
block|}
specifier|public
name|void
name|setOrder
parameter_list|(
name|OrderDef
name|order
parameter_list|)
block|{
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
block|}
specifier|public
name|TableFunctionEvaluator
name|getTFunction
parameter_list|()
block|{
return|return
name|tFunction
return|;
block|}
specifier|public
name|void
name|setTFunction
parameter_list|(
name|TableFunctionEvaluator
name|tFunction
parameter_list|)
block|{
name|this
operator|.
name|tFunction
operator|=
name|tFunction
expr_stmt|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|PTFExpressionDef
argument_list|>
name|getArgs
parameter_list|()
block|{
return|return
name|args
return|;
block|}
specifier|public
name|void
name|setArgs
parameter_list|(
name|ArrayList
argument_list|<
name|PTFExpressionDef
argument_list|>
name|args
parameter_list|)
block|{
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
specifier|public
name|void
name|addArg
parameter_list|(
name|PTFExpressionDef
name|arg
parameter_list|)
block|{
name|args
operator|=
name|args
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|PTFExpressionDef
argument_list|>
argument_list|()
else|:
name|args
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PartitionedTableFunctionDef
name|getStartOfChain
parameter_list|()
block|{
if|if
condition|(
name|input
operator|instanceof
name|PartitionedTableFunctionDef
condition|)
block|{
return|return
operator|(
operator|(
name|PartitionedTableFunctionDef
operator|)
name|input
operator|)
operator|.
name|getStartOfChain
argument_list|()
return|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|isTransformsRawInput
parameter_list|()
block|{
return|return
name|transformsRawInput
return|;
block|}
specifier|public
name|void
name|setTransformsRawInput
parameter_list|(
name|boolean
name|transformsRawInput
parameter_list|)
block|{
name|this
operator|.
name|transformsRawInput
operator|=
name|transformsRawInput
expr_stmt|;
block|}
specifier|public
name|String
name|getResolverClassName
parameter_list|()
block|{
return|return
name|resolverClassName
return|;
block|}
specifier|public
name|void
name|setResolverClassName
parameter_list|(
name|String
name|resolverClassName
parameter_list|)
block|{
name|this
operator|.
name|resolverClassName
operator|=
name|resolverClassName
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|WindowTableFunctionDef
extends|extends
name|PartitionedTableFunctionDef
block|{
name|ArrayList
argument_list|<
name|WindowExpressionDef
argument_list|>
name|windowExpressions
decl_stmt|;
name|ArrayList
argument_list|<
name|WindowFunctionDef
argument_list|>
name|windowFunctions
decl_stmt|;
comment|/*      * this shape omits the non WdwFunction Expressions. Expr Evaluators for the Window Expressions is based on this      * shape, so they can refer to the Wdw Function values.      * @note: this will eventually be removed, as plan is to push Wdw expression processing to separate Select Op after      * PTF Op.      */
name|ShapeDetails
name|outputFromWdwFnProcessing
decl_stmt|;
specifier|public
name|ArrayList
argument_list|<
name|WindowExpressionDef
argument_list|>
name|getWindowExpressions
parameter_list|()
block|{
return|return
name|windowExpressions
return|;
block|}
specifier|public
name|void
name|setWindowExpressions
parameter_list|(
name|ArrayList
argument_list|<
name|WindowExpressionDef
argument_list|>
name|windowExpressions
parameter_list|)
block|{
name|this
operator|.
name|windowExpressions
operator|=
name|windowExpressions
expr_stmt|;
block|}
specifier|public
name|ShapeDetails
name|getOutputFromWdwFnProcessing
parameter_list|()
block|{
return|return
name|outputFromWdwFnProcessing
return|;
block|}
specifier|public
name|void
name|setOutputFromWdwFnProcessing
parameter_list|(
name|ShapeDetails
name|outputFromWdwFnProcessing
parameter_list|)
block|{
name|this
operator|.
name|outputFromWdwFnProcessing
operator|=
name|outputFromWdwFnProcessing
expr_stmt|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|WindowFunctionDef
argument_list|>
name|getWindowFunctions
parameter_list|()
block|{
return|return
name|windowFunctions
return|;
block|}
specifier|public
name|void
name|setWindowFunctions
parameter_list|(
name|ArrayList
argument_list|<
name|WindowFunctionDef
argument_list|>
name|windowFunctions
parameter_list|)
block|{
name|this
operator|.
name|windowFunctions
operator|=
name|windowFunctions
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ShapeDetails
block|{
name|String
name|serdeClassName
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeProps
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|columnNames
decl_stmt|;
specifier|transient
name|StructObjectInspector
name|OI
decl_stmt|;
specifier|transient
name|SerDe
name|serde
decl_stmt|;
specifier|transient
name|RowResolver
name|rr
decl_stmt|;
specifier|transient
name|TypeCheckCtx
name|typeCheckCtx
decl_stmt|;
static|static
block|{
name|PTFUtils
operator|.
name|makeTransient
argument_list|(
name|ShapeDetails
operator|.
name|class
argument_list|,
literal|"OI"
argument_list|,
literal|"serde"
argument_list|,
literal|"rr"
argument_list|,
literal|"typeCheckCtx"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getSerdeClassName
parameter_list|()
block|{
return|return
name|serdeClassName
return|;
block|}
specifier|public
name|void
name|setSerdeClassName
parameter_list|(
name|String
name|serdeClassName
parameter_list|)
block|{
name|this
operator|.
name|serdeClassName
operator|=
name|serdeClassName
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSerdeProps
parameter_list|()
block|{
return|return
name|serdeProps
return|;
block|}
specifier|public
name|void
name|setSerdeProps
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeProps
parameter_list|)
block|{
name|this
operator|.
name|serdeProps
operator|=
name|serdeProps
expr_stmt|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|String
argument_list|>
name|getColumnNames
parameter_list|()
block|{
return|return
name|columnNames
return|;
block|}
specifier|public
name|void
name|setColumnNames
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|columnNames
parameter_list|)
block|{
name|this
operator|.
name|columnNames
operator|=
name|columnNames
expr_stmt|;
block|}
specifier|public
name|StructObjectInspector
name|getOI
parameter_list|()
block|{
return|return
name|OI
return|;
block|}
specifier|public
name|void
name|setOI
parameter_list|(
name|StructObjectInspector
name|oI
parameter_list|)
block|{
name|OI
operator|=
name|oI
expr_stmt|;
block|}
specifier|public
name|SerDe
name|getSerde
parameter_list|()
block|{
return|return
name|serde
return|;
block|}
specifier|public
name|void
name|setSerde
parameter_list|(
name|SerDe
name|serde
parameter_list|)
block|{
name|this
operator|.
name|serde
operator|=
name|serde
expr_stmt|;
block|}
specifier|public
name|RowResolver
name|getRr
parameter_list|()
block|{
return|return
name|rr
return|;
block|}
specifier|public
name|void
name|setRr
parameter_list|(
name|RowResolver
name|rr
parameter_list|)
block|{
name|this
operator|.
name|rr
operator|=
name|rr
expr_stmt|;
block|}
specifier|public
name|TypeCheckCtx
name|getTypeCheckCtx
parameter_list|()
block|{
return|return
name|typeCheckCtx
return|;
block|}
specifier|public
name|void
name|setTypeCheckCtx
parameter_list|(
name|TypeCheckCtx
name|typeCheckCtx
parameter_list|)
block|{
name|this
operator|.
name|typeCheckCtx
operator|=
name|typeCheckCtx
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PartitionDef
block|{
name|ArrayList
argument_list|<
name|PTFExpressionDef
argument_list|>
name|expressions
decl_stmt|;
specifier|public
name|ArrayList
argument_list|<
name|PTFExpressionDef
argument_list|>
name|getExpressions
parameter_list|()
block|{
return|return
name|expressions
return|;
block|}
specifier|public
name|void
name|setExpressions
parameter_list|(
name|ArrayList
argument_list|<
name|PTFExpressionDef
argument_list|>
name|expressions
parameter_list|)
block|{
name|this
operator|.
name|expressions
operator|=
name|expressions
expr_stmt|;
block|}
specifier|public
name|void
name|addExpression
parameter_list|(
name|PTFExpressionDef
name|e
parameter_list|)
block|{
name|expressions
operator|=
name|expressions
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|PTFExpressionDef
argument_list|>
argument_list|()
else|:
name|expressions
expr_stmt|;
name|expressions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|OrderDef
block|{
name|ArrayList
argument_list|<
name|OrderExpressionDef
argument_list|>
name|expressions
decl_stmt|;
specifier|public
name|OrderDef
parameter_list|()
block|{}
specifier|public
name|OrderDef
parameter_list|(
name|PartitionDef
name|pDef
parameter_list|)
block|{
for|for
control|(
name|PTFExpressionDef
name|eDef
range|:
name|pDef
operator|.
name|getExpressions
argument_list|()
control|)
block|{
name|addExpression
argument_list|(
operator|new
name|OrderExpressionDef
argument_list|(
name|eDef
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ArrayList
argument_list|<
name|OrderExpressionDef
argument_list|>
name|getExpressions
parameter_list|()
block|{
return|return
name|expressions
return|;
block|}
specifier|public
name|void
name|setExpressions
parameter_list|(
name|ArrayList
argument_list|<
name|OrderExpressionDef
argument_list|>
name|expressions
parameter_list|)
block|{
name|this
operator|.
name|expressions
operator|=
name|expressions
expr_stmt|;
block|}
specifier|public
name|void
name|addExpression
parameter_list|(
name|OrderExpressionDef
name|e
parameter_list|)
block|{
name|expressions
operator|=
name|expressions
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|OrderExpressionDef
argument_list|>
argument_list|()
else|:
name|expressions
expr_stmt|;
name|expressions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|OrderExpressionDef
extends|extends
name|PTFExpressionDef
block|{
name|Order
name|order
decl_stmt|;
specifier|public
name|OrderExpressionDef
parameter_list|()
block|{}
specifier|public
name|OrderExpressionDef
parameter_list|(
name|PTFExpressionDef
name|e
parameter_list|)
block|{
name|super
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|order
operator|=
name|Order
operator|.
name|ASC
expr_stmt|;
block|}
specifier|public
name|Order
name|getOrder
parameter_list|()
block|{
return|return
name|order
return|;
block|}
specifier|public
name|void
name|setOrder
parameter_list|(
name|Order
name|order
parameter_list|)
block|{
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|WindowExpressionDef
extends|extends
name|PTFExpressionDef
block|{
name|String
name|alias
decl_stmt|;
specifier|public
name|WindowExpressionDef
parameter_list|()
block|{}
specifier|public
name|WindowExpressionDef
parameter_list|(
name|PTFExpressionDef
name|eDef
parameter_list|)
block|{
name|super
argument_list|(
name|eDef
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getAlias
parameter_list|()
block|{
return|return
name|alias
return|;
block|}
specifier|public
name|void
name|setAlias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|WindowFunctionDef
extends|extends
name|WindowExpressionDef
block|{
name|String
name|name
decl_stmt|;
name|boolean
name|isStar
decl_stmt|;
name|boolean
name|isDistinct
decl_stmt|;
name|ArrayList
argument_list|<
name|PTFExpressionDef
argument_list|>
name|args
decl_stmt|;
name|WindowFrameDef
name|windowFrame
decl_stmt|;
name|GenericUDAFEvaluator
name|wFnEval
decl_stmt|;
name|boolean
name|pivotResult
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStar
parameter_list|()
block|{
return|return
name|isStar
return|;
block|}
specifier|public
name|void
name|setStar
parameter_list|(
name|boolean
name|isStar
parameter_list|)
block|{
name|this
operator|.
name|isStar
operator|=
name|isStar
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDistinct
parameter_list|()
block|{
return|return
name|isDistinct
return|;
block|}
specifier|public
name|void
name|setDistinct
parameter_list|(
name|boolean
name|isDistinct
parameter_list|)
block|{
name|this
operator|.
name|isDistinct
operator|=
name|isDistinct
expr_stmt|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|PTFExpressionDef
argument_list|>
name|getArgs
parameter_list|()
block|{
return|return
name|args
return|;
block|}
specifier|public
name|void
name|setArgs
parameter_list|(
name|ArrayList
argument_list|<
name|PTFExpressionDef
argument_list|>
name|args
parameter_list|)
block|{
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
specifier|public
name|void
name|addArg
parameter_list|(
name|PTFExpressionDef
name|arg
parameter_list|)
block|{
name|args
operator|=
name|args
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|PTFExpressionDef
argument_list|>
argument_list|()
else|:
name|args
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WindowFrameDef
name|getWindowFrame
parameter_list|()
block|{
return|return
name|windowFrame
return|;
block|}
specifier|public
name|void
name|setWindowFrame
parameter_list|(
name|WindowFrameDef
name|windowFrame
parameter_list|)
block|{
name|this
operator|.
name|windowFrame
operator|=
name|windowFrame
expr_stmt|;
block|}
specifier|public
name|GenericUDAFEvaluator
name|getWFnEval
parameter_list|()
block|{
return|return
name|wFnEval
return|;
block|}
specifier|public
name|void
name|setWFnEval
parameter_list|(
name|GenericUDAFEvaluator
name|wFnEval
parameter_list|)
block|{
name|this
operator|.
name|wFnEval
operator|=
name|wFnEval
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPivotResult
parameter_list|()
block|{
return|return
name|pivotResult
return|;
block|}
specifier|public
name|void
name|setPivotResult
parameter_list|(
name|boolean
name|pivotResult
parameter_list|)
block|{
name|this
operator|.
name|pivotResult
operator|=
name|pivotResult
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|WindowFrameDef
block|{
name|BoundaryDef
name|start
decl_stmt|;
name|BoundaryDef
name|end
decl_stmt|;
specifier|public
name|BoundaryDef
name|getStart
parameter_list|()
block|{
return|return
name|start
return|;
block|}
specifier|public
name|void
name|setStart
parameter_list|(
name|BoundaryDef
name|start
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
block|}
specifier|public
name|BoundaryDef
name|getEnd
parameter_list|()
block|{
return|return
name|end
return|;
block|}
specifier|public
name|void
name|setEnd
parameter_list|(
name|BoundaryDef
name|end
parameter_list|)
block|{
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|abstract
class|class
name|BoundaryDef
block|{
name|Direction
name|direction
decl_stmt|;
specifier|public
name|Direction
name|getDirection
parameter_list|()
block|{
return|return
name|direction
return|;
block|}
specifier|public
name|void
name|setDirection
parameter_list|(
name|Direction
name|direction
parameter_list|)
block|{
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|int
name|getAmt
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|RangeBoundaryDef
extends|extends
name|BoundaryDef
block|{
name|int
name|amt
decl_stmt|;
specifier|public
name|int
name|compareTo
parameter_list|(
name|BoundaryDef
name|other
parameter_list|)
block|{
name|int
name|c
init|=
name|getDirection
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getDirection
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
return|;
block|}
name|RangeBoundaryDef
name|rb
init|=
operator|(
name|RangeBoundaryDef
operator|)
name|other
decl_stmt|;
return|return
name|getAmt
argument_list|()
operator|-
name|rb
operator|.
name|getAmt
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getAmt
parameter_list|()
block|{
return|return
name|amt
return|;
block|}
specifier|public
name|void
name|setAmt
parameter_list|(
name|int
name|amt
parameter_list|)
block|{
name|this
operator|.
name|amt
operator|=
name|amt
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CurrentRowDef
extends|extends
name|BoundaryDef
block|{
specifier|public
name|int
name|compareTo
parameter_list|(
name|BoundaryDef
name|other
parameter_list|)
block|{
return|return
name|getDirection
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getDirection
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Direction
name|getDirection
parameter_list|()
block|{
return|return
name|Direction
operator|.
name|CURRENT
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getAmt
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ValueBoundaryDef
extends|extends
name|BoundaryDef
block|{
name|PTFExpressionDef
name|expressionDef
decl_stmt|;
name|int
name|amt
decl_stmt|;
specifier|public
name|int
name|compareTo
parameter_list|(
name|BoundaryDef
name|other
parameter_list|)
block|{
name|int
name|c
init|=
name|getDirection
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getDirection
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
return|return
name|c
return|;
block|}
name|ValueBoundaryDef
name|vb
init|=
operator|(
name|ValueBoundaryDef
operator|)
name|other
decl_stmt|;
return|return
name|getAmt
argument_list|()
operator|-
name|vb
operator|.
name|getAmt
argument_list|()
return|;
block|}
specifier|public
name|PTFExpressionDef
name|getExpressionDef
parameter_list|()
block|{
return|return
name|expressionDef
return|;
block|}
specifier|public
name|void
name|setExpressionDef
parameter_list|(
name|PTFExpressionDef
name|expressionDef
parameter_list|)
block|{
name|this
operator|.
name|expressionDef
operator|=
name|expressionDef
expr_stmt|;
block|}
specifier|public
name|ExprNodeDesc
name|getExprNode
parameter_list|()
block|{
return|return
name|expressionDef
operator|==
literal|null
condition|?
literal|null
else|:
name|expressionDef
operator|.
name|getExprNode
argument_list|()
return|;
block|}
specifier|public
name|ExprNodeEvaluator
name|getExprEvaluator
parameter_list|()
block|{
return|return
name|expressionDef
operator|==
literal|null
condition|?
literal|null
else|:
name|expressionDef
operator|.
name|getExprEvaluator
argument_list|()
return|;
block|}
specifier|public
name|ObjectInspector
name|getOI
parameter_list|()
block|{
return|return
name|expressionDef
operator|==
literal|null
condition|?
literal|null
else|:
name|expressionDef
operator|.
name|getOI
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getAmt
parameter_list|()
block|{
return|return
name|amt
return|;
block|}
specifier|public
name|void
name|setAmt
parameter_list|(
name|int
name|amt
parameter_list|)
block|{
name|this
operator|.
name|amt
operator|=
name|amt
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PTFExpressionDef
block|{
name|String
name|expressionTreeString
decl_stmt|;
name|ExprNodeDesc
name|exprNode
decl_stmt|;
specifier|transient
name|ExprNodeEvaluator
name|exprEvaluator
decl_stmt|;
specifier|transient
name|ObjectInspector
name|OI
decl_stmt|;
static|static
block|{
name|PTFUtils
operator|.
name|makeTransient
argument_list|(
name|PTFExpressionDef
operator|.
name|class
argument_list|,
literal|"exprEvaluator"
argument_list|,
literal|"OI"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PTFExpressionDef
parameter_list|()
block|{}
specifier|public
name|PTFExpressionDef
parameter_list|(
name|PTFExpressionDef
name|e
parameter_list|)
block|{
name|expressionTreeString
operator|=
name|e
operator|.
name|getExpressionTreeString
argument_list|()
expr_stmt|;
name|exprNode
operator|=
name|e
operator|.
name|getExprNode
argument_list|()
expr_stmt|;
name|exprEvaluator
operator|=
name|e
operator|.
name|getExprEvaluator
argument_list|()
expr_stmt|;
name|OI
operator|=
name|e
operator|.
name|getOI
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getExpressionTreeString
parameter_list|()
block|{
return|return
name|expressionTreeString
return|;
block|}
specifier|public
name|void
name|setExpressionTreeString
parameter_list|(
name|String
name|expressionTreeString
parameter_list|)
block|{
name|this
operator|.
name|expressionTreeString
operator|=
name|expressionTreeString
expr_stmt|;
block|}
specifier|public
name|ExprNodeDesc
name|getExprNode
parameter_list|()
block|{
return|return
name|exprNode
return|;
block|}
specifier|public
name|void
name|setExprNode
parameter_list|(
name|ExprNodeDesc
name|exprNode
parameter_list|)
block|{
name|this
operator|.
name|exprNode
operator|=
name|exprNode
expr_stmt|;
block|}
specifier|public
name|ExprNodeEvaluator
name|getExprEvaluator
parameter_list|()
block|{
return|return
name|exprEvaluator
return|;
block|}
specifier|public
name|void
name|setExprEvaluator
parameter_list|(
name|ExprNodeEvaluator
name|exprEvaluator
parameter_list|)
block|{
name|this
operator|.
name|exprEvaluator
operator|=
name|exprEvaluator
expr_stmt|;
block|}
specifier|public
name|ObjectInspector
name|getOI
parameter_list|()
block|{
return|return
name|OI
return|;
block|}
specifier|public
name|void
name|setOI
parameter_list|(
name|ObjectInspector
name|oI
parameter_list|)
block|{
name|OI
operator|=
name|oI
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

