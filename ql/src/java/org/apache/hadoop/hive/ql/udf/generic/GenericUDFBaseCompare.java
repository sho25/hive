begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDFArgumentTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFUtils
operator|.
name|ReturnObjectInspectorResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|BooleanObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|ByteObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|IntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_comment
comment|/**  * GenericUDF Base Class for operations.  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"op"
argument_list|,
name|value
operator|=
literal|"a op b - Returns the result of operation"
argument_list|)
specifier|public
specifier|abstract
class|class
name|GenericUDFBaseCompare
extends|extends
name|GenericUDF
block|{
specifier|public
enum|enum
name|CompareType
block|{
comment|// Now only string, text, int, long, byte and boolean comparisons are
comment|// treated as special cases.
comment|// For other types, we reuse ObjectInspectorUtils.compare()
name|COMPARE_STRING
block|,
name|COMPARE_TEXT
block|,
name|COMPARE_INT
block|,
name|COMPARE_LONG
block|,
name|COMPARE_BYTE
block|,
name|COMPARE_BOOL
block|,
name|SAME_TYPE
block|,
name|NEED_CONVERT
block|}
specifier|protected
name|String
name|opName
decl_stmt|;
specifier|protected
name|String
name|opDisplayName
decl_stmt|;
specifier|protected
specifier|transient
name|ObjectInspector
index|[]
name|argumentOIs
decl_stmt|;
specifier|protected
specifier|transient
name|ReturnObjectInspectorResolver
name|conversionHelper
init|=
literal|null
decl_stmt|;
specifier|protected
name|ObjectInspector
name|compareOI
decl_stmt|;
specifier|protected
name|CompareType
name|compareType
decl_stmt|;
specifier|protected
specifier|transient
name|Converter
name|converter0
decl_stmt|,
name|converter1
decl_stmt|;
specifier|protected
specifier|transient
name|StringObjectInspector
name|soi0
decl_stmt|,
name|soi1
decl_stmt|;
specifier|protected
specifier|transient
name|IntObjectInspector
name|ioi0
decl_stmt|,
name|ioi1
decl_stmt|;
specifier|protected
specifier|transient
name|LongObjectInspector
name|loi0
decl_stmt|,
name|loi1
decl_stmt|;
specifier|protected
specifier|transient
name|ByteObjectInspector
name|byoi0
decl_stmt|,
name|byoi1
decl_stmt|;
specifier|protected
specifier|transient
name|BooleanObjectInspector
name|boi0
decl_stmt|,
name|boi1
decl_stmt|;
specifier|protected
specifier|final
name|BooleanWritable
name|result
init|=
operator|new
name|BooleanWritable
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|initialize
parameter_list|(
name|ObjectInspector
index|[]
name|arguments
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
if|if
condition|(
name|arguments
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentException
argument_list|(
name|opName
operator|+
literal|" requires two arguments."
argument_list|)
throw|;
block|}
name|argumentOIs
operator|=
name|arguments
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Category
name|category
init|=
name|arguments
index|[
name|i
index|]
operator|.
name|getCategory
argument_list|()
decl_stmt|;
if|if
condition|(
name|category
operator|!=
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|UDFArgumentTypeException
argument_list|(
name|i
argument_list|,
literal|"The "
operator|+
name|GenericUDFUtils
operator|.
name|getOrdinal
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|+
literal|" argument of "
operator|+
name|opName
operator|+
literal|"  is expected to a "
operator|+
name|Category
operator|.
name|PRIMITIVE
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" type, but "
operator|+
name|category
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" is found"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|arguments
index|[
literal|0
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
operator|&&
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|arguments
index|[
literal|1
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
condition|)
block|{
name|soi0
operator|=
operator|(
name|StringObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
expr_stmt|;
name|soi1
operator|=
operator|(
name|StringObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|soi0
operator|.
name|preferWritable
argument_list|()
operator|||
name|soi1
operator|.
name|preferWritable
argument_list|()
condition|)
block|{
name|compareType
operator|=
name|CompareType
operator|.
name|COMPARE_TEXT
expr_stmt|;
block|}
else|else
block|{
name|compareType
operator|=
name|CompareType
operator|.
name|COMPARE_STRING
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|arguments
index|[
literal|0
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
operator|&&
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|arguments
index|[
literal|1
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
condition|)
block|{
name|compareType
operator|=
name|CompareType
operator|.
name|COMPARE_INT
expr_stmt|;
name|ioi0
operator|=
operator|(
name|IntObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
expr_stmt|;
name|ioi1
operator|=
operator|(
name|IntObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|arguments
index|[
literal|0
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
operator|&&
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|arguments
index|[
literal|1
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
condition|)
block|{
name|compareType
operator|=
name|CompareType
operator|.
name|COMPARE_LONG
expr_stmt|;
name|loi0
operator|=
operator|(
name|LongObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
expr_stmt|;
name|loi1
operator|=
operator|(
name|LongObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|arguments
index|[
literal|0
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|byteTypeInfo
argument_list|)
operator|&&
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|arguments
index|[
literal|1
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|byteTypeInfo
argument_list|)
condition|)
block|{
name|compareType
operator|=
name|CompareType
operator|.
name|COMPARE_BYTE
expr_stmt|;
name|byoi0
operator|=
operator|(
name|ByteObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
expr_stmt|;
name|byoi1
operator|=
operator|(
name|ByteObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|arguments
index|[
literal|0
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
operator|&&
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|arguments
index|[
literal|1
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|)
condition|)
block|{
name|compareType
operator|=
name|CompareType
operator|.
name|COMPARE_BOOL
expr_stmt|;
name|boi0
operator|=
operator|(
name|BooleanObjectInspector
operator|)
name|arguments
index|[
literal|0
index|]
expr_stmt|;
name|boi1
operator|=
operator|(
name|BooleanObjectInspector
operator|)
name|arguments
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|TypeInfo
name|oiTypeInfo0
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|arguments
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|TypeInfo
name|oiTypeInfo1
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|arguments
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|oiTypeInfo0
operator|==
name|oiTypeInfo1
operator|||
name|TypeInfoUtils
operator|.
name|doPrimitiveCategoriesMatch
argument_list|(
name|oiTypeInfo0
argument_list|,
name|oiTypeInfo1
argument_list|)
condition|)
block|{
name|compareType
operator|=
name|CompareType
operator|.
name|SAME_TYPE
expr_stmt|;
block|}
else|else
block|{
name|compareType
operator|=
name|CompareType
operator|.
name|NEED_CONVERT
expr_stmt|;
name|TypeInfo
name|compareType
init|=
name|FunctionRegistry
operator|.
name|getCommonClassForComparison
argument_list|(
name|oiTypeInfo0
argument_list|,
name|oiTypeInfo1
argument_list|)
decl_stmt|;
comment|// For now, we always convert to double if we can't find a common type
name|compareOI
operator|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
operator|(
name|compareType
operator|==
literal|null
operator|)
condition|?
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
else|:
name|compareType
argument_list|)
expr_stmt|;
name|converter0
operator|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|arguments
index|[
literal|0
index|]
argument_list|,
name|compareOI
argument_list|)
expr_stmt|;
name|converter1
operator|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|arguments
index|[
literal|1
index|]
argument_list|,
name|compareOI
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBooleanObjectInspector
return|;
block|}
specifier|public
name|Integer
name|compare
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
throws|throws
name|HiveException
block|{
name|Object
name|o0
decl_stmt|,
name|o1
decl_stmt|;
name|o0
operator|=
name|arguments
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|o0
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|o1
operator|=
name|arguments
index|[
literal|1
index|]
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|o1
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|compareType
operator|==
name|CompareType
operator|.
name|NEED_CONVERT
condition|)
block|{
name|Object
name|converted_o0
init|=
name|converter0
operator|.
name|convert
argument_list|(
name|o0
argument_list|)
decl_stmt|;
if|if
condition|(
name|converted_o0
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|converted_o1
init|=
name|converter1
operator|.
name|convert
argument_list|(
name|o1
argument_list|)
decl_stmt|;
if|if
condition|(
name|converted_o1
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|converted_o0
argument_list|,
name|compareOI
argument_list|,
name|converted_o1
argument_list|,
name|compareOI
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o0
argument_list|,
name|argumentOIs
index|[
literal|0
index|]
argument_list|,
name|o1
argument_list|,
name|argumentOIs
index|[
literal|1
index|]
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|String
index|[]
name|children
parameter_list|)
block|{
assert|assert
operator|(
name|children
operator|.
name|length
operator|==
literal|2
operator|)
assert|;
return|return
literal|"("
operator|+
name|children
index|[
literal|0
index|]
operator|+
literal|" "
operator|+
name|opDisplayName
operator|+
literal|" "
operator|+
name|children
index|[
literal|1
index|]
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

