begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
operator|.
name|OpTreeSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|signature
operator|.
name|RuntimeStatsPersister
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|mapper
operator|.
name|PlanMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This hook adds a persistence loop-back ensure that runtime statistics could be used.  */
end_comment

begin_class
specifier|public
class|class
name|RuntimeStatsPersistenceCheckerHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RuntimeStatsPersistenceCheckerHook
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
name|PlanMapper
name|pm
init|=
operator|(
operator|(
name|PrivateHookContext
operator|)
name|hookContext
operator|)
operator|.
name|getContext
argument_list|()
operator|.
name|getPlanMapper
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OpTreeSignature
argument_list|>
name|sigs
init|=
name|pm
operator|.
name|getAll
argument_list|(
name|OpTreeSignature
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|OpTreeSignature
name|sig
range|:
name|sigs
control|)
block|{
try|try
block|{
name|OpTreeSignature
name|sig2
init|=
name|persistenceLoop
argument_list|(
name|sig
argument_list|,
name|OpTreeSignature
operator|.
name|class
argument_list|)
decl_stmt|;
name|sig
operator|.
name|getSig
argument_list|()
operator|.
name|proveEquals
argument_list|(
name|sig2
operator|.
name|getSig
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"while checking the signature of: "
operator|+
name|sig
operator|.
name|getSig
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|OpTreeSignature
name|sig
range|:
name|sigs
control|)
block|{
try|try
block|{
name|OpTreeSignature
name|sig2
init|=
name|persistenceLoop
argument_list|(
name|sig
argument_list|,
name|OpTreeSignature
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sig
operator|.
name|equals
argument_list|(
name|sig2
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"signature mismatch"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"while checking the signature of: "
operator|+
name|sig
operator|.
name|getSig
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"signature checked: "
operator|+
name|sigs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|persistenceLoop
parameter_list|(
name|T
name|sig
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|IOException
block|{
name|RuntimeStatsPersister
name|sp
init|=
name|RuntimeStatsPersister
operator|.
name|INSTANCE
decl_stmt|;
name|String
name|stored
init|=
name|sp
operator|.
name|encode
argument_list|(
name|sig
argument_list|)
decl_stmt|;
return|return
name|sp
operator|.
name|decode
argument_list|(
name|stored
argument_list|,
name|clazz
argument_list|)
return|;
block|}
block|}
end_class

end_unit

