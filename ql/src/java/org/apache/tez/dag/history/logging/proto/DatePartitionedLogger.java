begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|history
operator|.
name|logging
operator|.
name|proto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneOffset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|MessageLite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
import|;
end_import

begin_comment
comment|/**  * Class to create proto reader and writer for a date partitioned directory structure.  *  * @param<T> The proto message type.  */
end_comment

begin_class
specifier|public
class|class
name|DatePartitionedLogger
parameter_list|<
name|T
extends|extends
name|MessageLite
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DatePartitionedLogger
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Everyone has permission to write, but with sticky set so that delete is restricted.
comment|// This is required, since the path is same for all users and everyone writes into it.
specifier|private
specifier|static
specifier|final
name|FsPermission
name|DIR_PERMISSION
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|01777
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Parser
argument_list|<
name|T
argument_list|>
name|parser
decl_stmt|;
specifier|private
specifier|final
name|Path
name|basePath
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
specifier|public
name|DatePartitionedLogger
parameter_list|(
name|Parser
argument_list|<
name|T
argument_list|>
name|parser
parameter_list|,
name|Path
name|baseDir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Clock
name|clock
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
name|createDirIfNotExists
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|this
operator|.
name|basePath
operator|=
name|baseDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|resolvePath
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createDirIfNotExists
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fileSystem
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fileSystem
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|DIR_PERMISSION
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore this exception, if there is a problem it'll fail when trying to read or write.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while trying to set permission: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a writer for the given fileName, with date as today.    */
specifier|public
name|ProtoMessageWriter
argument_list|<
name|T
argument_list|>
name|getWriter
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|filePath
init|=
name|getPathForDate
argument_list|(
name|getNow
argument_list|()
operator|.
name|toLocalDate
argument_list|()
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
return|return
operator|new
name|ProtoMessageWriter
argument_list|<>
argument_list|(
name|conf
argument_list|,
name|filePath
argument_list|,
name|parser
argument_list|)
return|;
block|}
comment|/**    * Creates a reader for the given filePath, no validation is done.    */
specifier|public
name|ProtoMessageReader
argument_list|<
name|T
argument_list|>
name|getReader
parameter_list|(
name|Path
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ProtoMessageReader
argument_list|<>
argument_list|(
name|conf
argument_list|,
name|filePath
argument_list|,
name|parser
argument_list|)
return|;
block|}
comment|/**    * Create a path for the given date and fileName. This can be used to create a reader.    */
specifier|public
name|Path
name|getPathForDate
parameter_list|(
name|LocalDate
name|date
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|basePath
argument_list|,
name|getDirForDate
argument_list|(
name|date
argument_list|)
argument_list|)
decl_stmt|;
name|createDirIfNotExists
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|fileName
argument_list|)
return|;
block|}
comment|/**    * Extract the date from the directory name, this should be a directory created by this class.    */
specifier|public
name|LocalDate
name|getDateFromDir
parameter_list|(
name|String
name|dirName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dirName
operator|.
name|startsWith
argument_list|(
literal|"date="
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid directory: "
operator|+
name|dirName
argument_list|)
throw|;
block|}
return|return
name|LocalDate
operator|.
name|parse
argument_list|(
name|dirName
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
argument_list|,
name|DateTimeFormatter
operator|.
name|ISO_LOCAL_DATE
argument_list|)
return|;
block|}
comment|/**    * Returns the directory name for a given date.    */
specifier|public
name|String
name|getDirForDate
parameter_list|(
name|LocalDate
name|date
parameter_list|)
block|{
return|return
literal|"date="
operator|+
name|DateTimeFormatter
operator|.
name|ISO_LOCAL_DATE
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
comment|/**    * Find next available directory, after the given directory.    */
specifier|public
name|String
name|getNextDirectory
parameter_list|(
name|String
name|currentDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Fast check, if the next day directory exists return it.
name|String
name|nextDate
init|=
name|getDirForDate
argument_list|(
name|getDateFromDir
argument_list|(
name|currentDir
argument_list|)
operator|.
name|plusDays
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSystem
init|=
name|basePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileSystem
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|basePath
argument_list|,
name|nextDate
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|nextDate
return|;
block|}
comment|// Have to scan the directory to find min date greater than currentDir.
name|String
name|dirName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|fileSystem
operator|.
name|listStatus
argument_list|(
name|basePath
argument_list|)
control|)
block|{
name|String
name|name
init|=
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// String comparison is good enough, since its of form date=yyyy-MM-dd
if|if
condition|(
name|name
operator|.
name|compareTo
argument_list|(
name|currentDir
argument_list|)
operator|>
literal|0
operator|&&
operator|(
name|dirName
operator|==
literal|null
operator|||
name|name
operator|.
name|compareTo
argument_list|(
name|dirName
argument_list|)
operator|<
literal|0
operator|)
condition|)
block|{
name|dirName
operator|=
name|name
expr_stmt|;
block|}
block|}
return|return
name|dirName
return|;
block|}
comment|/**    * Returns new or changed files in the given directory. The offsets are used to find    * changed files.    */
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|scanForChangedFiles
parameter_list|(
name|String
name|subDir
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|currentOffsets
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dirPath
init|=
operator|new
name|Path
argument_list|(
name|basePath
argument_list|,
name|subDir
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSystem
init|=
name|basePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|newFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|exists
argument_list|(
name|dirPath
argument_list|)
condition|)
block|{
return|return
name|newFiles
return|;
block|}
for|for
control|(
name|FileStatus
name|status
range|:
name|fileSystem
operator|.
name|listStatus
argument_list|(
name|dirPath
argument_list|)
control|)
block|{
name|String
name|fileName
init|=
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Long
name|offset
init|=
name|currentOffsets
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
comment|// If the offset was never added or offset< fileSize.
if|if
condition|(
name|offset
operator|==
literal|null
operator|||
name|offset
operator|<
name|status
operator|.
name|getLen
argument_list|()
condition|)
block|{
name|newFiles
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|dirPath
argument_list|,
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newFiles
return|;
block|}
comment|/**    * Returns the current time, using the underlying clock in UTC time.    */
specifier|public
name|LocalDateTime
name|getNow
parameter_list|()
block|{
comment|// Use UTC date to ensure reader date is same on all timezones.
return|return
name|LocalDateTime
operator|.
name|ofEpochSecond
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|/
literal|1000
argument_list|,
literal|0
argument_list|,
name|ZoneOffset
operator|.
name|UTC
argument_list|)
return|;
block|}
specifier|public
name|Configuration
name|getConfig
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

