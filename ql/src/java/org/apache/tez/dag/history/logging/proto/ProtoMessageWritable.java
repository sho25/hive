begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|history
operator|.
name|logging
operator|.
name|proto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|MessageLite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
import|;
end_import

begin_class
specifier|public
class|class
name|ProtoMessageWritable
parameter_list|<
name|T
extends|extends
name|MessageLite
parameter_list|>
implements|implements
name|Writable
block|{
specifier|private
name|T
name|message
decl_stmt|;
specifier|private
specifier|final
name|Parser
argument_list|<
name|T
argument_list|>
name|parser
decl_stmt|;
specifier|private
name|DataOutputStream
name|dos
decl_stmt|;
specifier|private
name|CodedOutputStream
name|cos
decl_stmt|;
specifier|private
name|DataInputStream
name|din
decl_stmt|;
specifier|private
name|CodedInputStream
name|cin
decl_stmt|;
name|ProtoMessageWritable
parameter_list|(
name|Parser
argument_list|<
name|T
argument_list|>
name|parser
parameter_list|)
block|{
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
block|}
specifier|public
name|T
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
specifier|public
name|void
name|setMessage
parameter_list|(
name|T
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|DataOutputStream
extends|extends
name|OutputStream
block|{
name|DataOutput
name|out
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dos
operator|==
literal|null
condition|)
block|{
name|dos
operator|=
operator|new
name|DataOutputStream
argument_list|()
expr_stmt|;
name|cos
operator|=
name|CodedOutputStream
operator|.
name|newInstance
argument_list|(
name|dos
argument_list|)
expr_stmt|;
block|}
name|dos
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|cos
operator|.
name|writeMessageNoTag
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|cos
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|DataInputStream
extends|extends
name|InputStream
block|{
name|DataInput
name|in
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|in
operator|.
name|readUnsignedByte
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|din
operator|==
literal|null
condition|)
block|{
name|din
operator|=
operator|new
name|DataInputStream
argument_list|()
expr_stmt|;
name|cin
operator|=
name|CodedInputStream
operator|.
name|newInstance
argument_list|(
name|din
argument_list|)
expr_stmt|;
name|cin
operator|.
name|setSizeLimit
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
name|din
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|message
operator|=
name|cin
operator|.
name|readMessage
argument_list|(
name|parser
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

