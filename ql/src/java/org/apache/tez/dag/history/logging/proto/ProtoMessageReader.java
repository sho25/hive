begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|history
operator|.
name|logging
operator|.
name|proto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|MessageLite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
import|;
end_import

begin_class
specifier|public
class|class
name|ProtoMessageReader
parameter_list|<
name|T
extends|extends
name|MessageLite
parameter_list|>
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|Path
name|filePath
decl_stmt|;
specifier|private
specifier|final
name|SequenceFile
operator|.
name|Reader
name|reader
decl_stmt|;
specifier|private
specifier|final
name|ProtoMessageWritable
argument_list|<
name|T
argument_list|>
name|writable
decl_stmt|;
name|ProtoMessageReader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|filePath
parameter_list|,
name|Parser
argument_list|<
name|T
argument_list|>
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|filePath
operator|=
name|filePath
expr_stmt|;
name|this
operator|.
name|reader
operator|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|conf
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|file
argument_list|(
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|writable
operator|=
operator|new
name|ProtoMessageWritable
argument_list|<>
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Path
name|getFilePath
parameter_list|()
block|{
return|return
name|filePath
return|;
block|}
specifier|public
name|void
name|setOffset
parameter_list|(
name|long
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|getPosition
argument_list|()
return|;
block|}
specifier|public
name|T
name|readEvent
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|writable
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|writable
operator|.
name|getMessage
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

