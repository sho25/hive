begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|retry
operator|.
name|RetryOneTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|KillSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|TestingServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|utils
operator|.
name|DebugUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|utils
operator|.
name|ZKPaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/** See SlotZNode; some tests (and the setup) are c/p-ed or modified from Curator. */
end_comment

begin_class
specifier|public
class|class
name|TestSlotZnode
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DIR
init|=
literal|"/test"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PATH
init|=
name|ZKPaths
operator|.
name|makePath
argument_list|(
name|DIR
argument_list|,
literal|"/foo"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Collection
argument_list|<
name|CuratorFramework
argument_list|>
name|curatorInstances
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Collection
argument_list|<
name|SlotZnode
argument_list|>
name|createdNodes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
name|TestingServer
name|server
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSlotZnode
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|DebugUtils
operator|.
name|PROPERTY_DONT_LOG_CONNECTION_ISSUES
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
while|while
condition|(
name|server
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|server
operator|=
operator|new
name|TestingServer
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BindException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Getting bind exception - retrying to allocate server"
argument_list|)
expr_stmt|;
name|server
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|SlotZnode
name|node
range|:
name|createdNodes
control|)
block|{
name|node
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|CuratorFramework
name|curator
range|:
name|curatorInstances
control|)
block|{
name|curator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
name|server
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeletesNodeWhenClosed
parameter_list|()
throws|throws
name|Exception
block|{
name|CuratorFramework
name|curator
init|=
name|newCurator
argument_list|()
decl_stmt|;
name|SlotZnode
name|node
init|=
name|createZnode
argument_list|(
name|curator
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|start
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|path
init|=
literal|null
decl_stmt|;
try|try
block|{
name|path
operator|=
name|node
operator|.
name|getActualPath
argument_list|()
expr_stmt|;
name|assertNodeExists
argument_list|(
name|curator
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|node
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// After closing the path is set to null...
block|}
name|assertNodeDoesNotExist
argument_list|(
name|curator
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeletedAndRecreatedNodeWhenSessionReconnects
parameter_list|()
throws|throws
name|Exception
block|{
name|CuratorFramework
name|curator
init|=
name|newCurator
argument_list|()
decl_stmt|;
name|CuratorFramework
name|observer
init|=
name|newCurator
argument_list|()
decl_stmt|;
name|SlotZnode
name|node
init|=
name|createZnode
argument_list|(
name|curator
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|start
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|originalPath
init|=
name|node
operator|.
name|getActualPath
argument_list|()
decl_stmt|;
name|assertNodeExists
argument_list|(
name|observer
argument_list|,
name|originalPath
argument_list|)
expr_stmt|;
name|Trigger
name|deletedTrigger
init|=
name|Trigger
operator|.
name|deleted
argument_list|()
decl_stmt|;
name|observer
operator|.
name|checkExists
argument_list|()
operator|.
name|usingWatcher
argument_list|(
name|deletedTrigger
argument_list|)
operator|.
name|forPath
argument_list|(
name|node
operator|.
name|getActualPath
argument_list|()
argument_list|)
expr_stmt|;
name|killSession
argument_list|(
name|curator
argument_list|)
expr_stmt|;
comment|// Make sure the node got deleted.
name|assertTrue
argument_list|(
name|deletedTrigger
operator|.
name|firedWithin
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check for it to be recreated.
name|Trigger
name|createdTrigger
init|=
name|Trigger
operator|.
name|created
argument_list|()
decl_stmt|;
name|Stat
name|stat
init|=
name|observer
operator|.
name|checkExists
argument_list|()
operator|.
name|usingWatcher
argument_list|(
name|createdTrigger
argument_list|)
operator|.
name|forPath
argument_list|(
name|originalPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|stat
operator|!=
literal|null
operator|||
name|createdTrigger
operator|.
name|firedWithin
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecreatesNodeWhenItGetsDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|CuratorFramework
name|curator
init|=
name|newCurator
argument_list|()
decl_stmt|;
name|SlotZnode
name|node
init|=
name|createZnode
argument_list|(
name|curator
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|start
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|originalNode
init|=
name|node
operator|.
name|getActualPath
argument_list|()
decl_stmt|;
name|assertNodeExists
argument_list|(
name|curator
argument_list|,
name|originalNode
argument_list|)
expr_stmt|;
comment|// Delete the original node...
name|curator
operator|.
name|delete
argument_list|()
operator|.
name|forPath
argument_list|(
name|originalNode
argument_list|)
expr_stmt|;
name|Trigger
name|createdWatchTrigger
init|=
name|Trigger
operator|.
name|created
argument_list|()
decl_stmt|;
name|Stat
name|stat
init|=
name|curator
operator|.
name|checkExists
argument_list|()
operator|.
name|usingWatcher
argument_list|(
name|createdWatchTrigger
argument_list|)
operator|.
name|forPath
argument_list|(
name|originalNode
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|stat
operator|!=
literal|null
operator|||
name|createdWatchTrigger
operator|.
name|firedWithin
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathUsage
parameter_list|()
throws|throws
name|Exception
block|{
name|CuratorFramework
name|curator
init|=
name|newCurator
argument_list|()
decl_stmt|;
name|SlotZnode
name|node1
init|=
name|createZnode
argument_list|(
name|curator
argument_list|)
decl_stmt|,
name|node2
init|=
name|createZnode
argument_list|(
name|curator
argument_list|)
decl_stmt|,
name|node3
init|=
name|createZnode
argument_list|(
name|curator
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|node1
operator|.
name|start
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|path1
init|=
name|node1
operator|.
name|getActualPath
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|node2
operator|.
name|start
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|path2
init|=
name|node2
operator|.
name|getActualPath
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|path1
operator|.
name|equals
argument_list|(
name|path2
argument_list|)
argument_list|)
expr_stmt|;
name|node1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Path must be reused.
name|assertTrue
argument_list|(
name|node3
operator|.
name|start
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|path1
operator|.
name|equals
argument_list|(
name|node3
operator|.
name|getActualPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|syncThreadStart
parameter_list|(
specifier|final
name|CountDownLatch
name|cdlIn
parameter_list|,
specifier|final
name|CountDownLatch
name|cdlOut
parameter_list|)
block|{
name|cdlIn
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|cdlOut
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrencyAndFallback
parameter_list|()
throws|throws
name|Exception
block|{
name|concurrencyTest
argument_list|(
literal|100
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrencyNoFallback
parameter_list|()
throws|throws
name|Exception
block|{
name|concurrencyTest
argument_list|(
literal|100
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|concurrencyTest
parameter_list|(
specifier|final
name|int
name|nodeCount
parameter_list|,
name|boolean
name|isFallback
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|CuratorFramework
name|curator
init|=
name|newCurator
argument_list|()
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|nodeCount
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|cdlIn
init|=
operator|new
name|CountDownLatch
argument_list|(
name|nodeCount
argument_list|)
decl_stmt|,
name|cdlOut
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|FutureTask
argument_list|<
name|SlotZnode
argument_list|>
index|[]
name|startTasks
init|=
operator|new
name|FutureTask
index|[
name|nodeCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|isFallback
condition|)
block|{
name|curator
operator|.
name|create
argument_list|()
operator|.
name|creatingParentsIfNeeded
argument_list|()
operator|.
name|forPath
argument_list|(
name|PATH
operator|+
literal|"/worker-"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|ix
init|=
name|i
decl_stmt|;
name|startTasks
index|[
name|i
index|]
operator|=
operator|new
name|FutureTask
argument_list|<
name|SlotZnode
argument_list|>
argument_list|(
operator|new
name|Callable
argument_list|<
name|SlotZnode
argument_list|>
argument_list|()
block|{
name|SlotZnode
name|node
init|=
name|createZnode
argument_list|(
name|curator
argument_list|)
decl_stmt|;
specifier|public
name|SlotZnode
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|syncThreadStart
argument_list|(
name|cdlIn
argument_list|,
name|cdlOut
argument_list|)
expr_stmt|;
name|int
name|id
init|=
name|System
operator|.
name|identityHashCode
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting the node "
operator|+
name|id
operator|+
literal|" from task #"
operator|+
name|ix
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
name|node
operator|.
name|start
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
operator|(
name|result
condition|?
literal|"Started"
else|:
literal|"Failed to start"
operator|)
operator|+
literal|" the node from task #"
operator|+
name|ix
argument_list|)
expr_stmt|;
return|return
name|result
condition|?
name|node
else|:
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startTasks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|startTasks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|cdlIn
operator|.
name|await
argument_list|()
expr_stmt|;
name|cdlOut
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|boolean
index|[]
name|found
init|=
operator|new
name|boolean
index|[
name|nodeCount
index|]
decl_stmt|;
name|int
name|totalFallbackCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startTasks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|SlotZnode
name|node
init|=
name|startTasks
index|[
name|i
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"failed to start the node from task #"
operator|+
name|i
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|totalFallbackCount
operator|+=
name|node
operator|.
name|getFallbackCount
argument_list|()
expr_stmt|;
name|int
name|slot
init|=
name|node
operator|.
name|getCurrentSlot
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|slot
operator|<
name|found
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|found
index|[
name|slot
index|]
argument_list|)
expr_stmt|;
comment|// Given these 2 lines we don't need to double check later.
name|found
index|[
name|slot
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isFallback
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Total fallback count "
operator|+
name|totalFallbackCount
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|totalFallbackCount
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|CuratorFramework
name|newCurator
parameter_list|()
throws|throws
name|IOException
block|{
name|CuratorFramework
name|client
init|=
name|CuratorFrameworkFactory
operator|.
name|newClient
argument_list|(
name|server
operator|.
name|getConnectString
argument_list|()
argument_list|,
literal|10000
argument_list|,
literal|10000
argument_list|,
operator|new
name|RetryOneTime
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|curatorInstances
operator|.
name|add
argument_list|(
name|client
argument_list|)
expr_stmt|;
return|return
name|client
return|;
block|}
specifier|private
name|SlotZnode
name|createZnode
parameter_list|(
name|CuratorFramework
name|curator
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|curator
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
name|PATH
argument_list|)
operator|==
literal|null
condition|)
block|{
name|curator
operator|.
name|create
argument_list|()
operator|.
name|creatingParentsIfNeeded
argument_list|()
operator|.
name|forPath
argument_list|(
name|PATH
argument_list|)
expr_stmt|;
block|}
name|SlotZnode
name|result
init|=
operator|new
name|SlotZnode
argument_list|(
name|curator
argument_list|,
name|PATH
argument_list|,
literal|"slot-"
argument_list|,
literal|"worker-"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|createdNodes
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|void
name|assertNodeExists
parameter_list|(
name|CuratorFramework
name|curator
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|curator
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
name|path
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNodeDoesNotExist
parameter_list|(
name|CuratorFramework
name|curator
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|curator
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
name|path
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|killSession
parameter_list|(
name|CuratorFramework
name|curator
parameter_list|)
throws|throws
name|Exception
block|{
name|KillSession
operator|.
name|kill
argument_list|(
name|curator
operator|.
name|getZookeeperClient
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|curator
operator|.
name|getZookeeperClient
argument_list|()
operator|.
name|getCurrentConnectionString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|Trigger
implements|implements
name|Watcher
block|{
specifier|private
specifier|final
name|Event
operator|.
name|EventType
name|type
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
specifier|public
name|Trigger
parameter_list|(
name|Event
operator|.
name|EventType
name|type
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|firedWithin
parameter_list|(
name|long
name|duration
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
try|try
block|{
return|return
name|latch
operator|.
name|await
argument_list|(
name|duration
argument_list|,
name|unit
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Trigger
name|created
parameter_list|()
block|{
return|return
operator|new
name|Trigger
argument_list|(
name|Event
operator|.
name|EventType
operator|.
name|NodeCreated
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Trigger
name|deleted
parameter_list|()
block|{
return|return
operator|new
name|Trigger
argument_list|(
name|Event
operator|.
name|EventType
operator|.
name|NodeDeleted
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

