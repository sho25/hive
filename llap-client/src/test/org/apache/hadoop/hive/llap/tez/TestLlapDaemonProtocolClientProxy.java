begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tez
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|mutable
operator|.
name|MutableInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestLlapDaemonProtocolClientProxy
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testMultipleNodes
parameter_list|()
block|{
name|RequestManagerForTest
name|requestManager
init|=
operator|new
name|RequestManagerForTest
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|LlapNodeId
name|nodeId1
init|=
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
literal|"host1"
argument_list|,
literal|1025
argument_list|)
decl_stmt|;
name|LlapNodeId
name|nodeId2
init|=
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
literal|"host2"
argument_list|,
literal|1025
argument_list|)
decl_stmt|;
name|Message
name|mockMessage
init|=
name|mock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|LlapProtocolClientProxy
operator|.
name|ExecuteRequestCallback
name|mockExecuteRequestCallback
init|=
name|mock
argument_list|(
name|LlapProtocolClientProxy
operator|.
name|ExecuteRequestCallback
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Request two messages
name|requestManager
operator|.
name|queueRequest
argument_list|(
operator|new
name|CallableRequestForTest
argument_list|(
name|nodeId1
argument_list|,
name|mockMessage
argument_list|,
name|mockExecuteRequestCallback
argument_list|)
argument_list|)
expr_stmt|;
name|requestManager
operator|.
name|queueRequest
argument_list|(
operator|new
name|CallableRequestForTest
argument_list|(
name|nodeId2
argument_list|,
name|mockMessage
argument_list|,
name|mockExecuteRequestCallback
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should go through in a single process call
name|requestManager
operator|.
name|process
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|requestManager
operator|.
name|numSubmissionsCounters
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|requestManager
operator|.
name|numInvocationsPerNode
operator|.
name|get
argument_list|(
name|nodeId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|requestManager
operator|.
name|numInvocationsPerNode
operator|.
name|get
argument_list|(
name|nodeId2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|requestManager
operator|.
name|numInvocationsPerNode
operator|.
name|get
argument_list|(
name|nodeId1
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|requestManager
operator|.
name|numInvocationsPerNode
operator|.
name|get
argument_list|(
name|nodeId2
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|requestManager
operator|.
name|currentLoopSkippedRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|requestManager
operator|.
name|currentLoopSkippedRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|requestManager
operator|.
name|currentLoopDisabledNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testSingleInvocationPerNode
parameter_list|()
block|{
name|RequestManagerForTest
name|requestManager
init|=
operator|new
name|RequestManagerForTest
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|LlapNodeId
name|nodeId1
init|=
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
literal|"host1"
argument_list|,
literal|1025
argument_list|)
decl_stmt|;
name|Message
name|mockMessage
init|=
name|mock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|LlapProtocolClientProxy
operator|.
name|ExecuteRequestCallback
name|mockExecuteRequestCallback
init|=
name|mock
argument_list|(
name|LlapProtocolClientProxy
operator|.
name|ExecuteRequestCallback
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// First request for host.
name|requestManager
operator|.
name|queueRequest
argument_list|(
operator|new
name|CallableRequestForTest
argument_list|(
name|nodeId1
argument_list|,
name|mockMessage
argument_list|,
name|mockExecuteRequestCallback
argument_list|)
argument_list|)
expr_stmt|;
name|requestManager
operator|.
name|process
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|requestManager
operator|.
name|numSubmissionsCounters
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|requestManager
operator|.
name|numInvocationsPerNode
operator|.
name|get
argument_list|(
name|nodeId1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|requestManager
operator|.
name|numInvocationsPerNode
operator|.
name|get
argument_list|(
name|nodeId1
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|requestManager
operator|.
name|currentLoopSkippedRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Second request for host. Single invocation since the last has not completed.
name|requestManager
operator|.
name|queueRequest
argument_list|(
operator|new
name|CallableRequestForTest
argument_list|(
name|nodeId1
argument_list|,
name|mockMessage
argument_list|,
name|mockExecuteRequestCallback
argument_list|)
argument_list|)
expr_stmt|;
name|requestManager
operator|.
name|process
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|requestManager
operator|.
name|numSubmissionsCounters
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|requestManager
operator|.
name|numInvocationsPerNode
operator|.
name|get
argument_list|(
name|nodeId1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|requestManager
operator|.
name|numInvocationsPerNode
operator|.
name|get
argument_list|(
name|nodeId1
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|requestManager
operator|.
name|currentLoopSkippedRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|requestManager
operator|.
name|currentLoopDisabledNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|requestManager
operator|.
name|currentLoopDisabledNodes
operator|.
name|contains
argument_list|(
name|nodeId1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Complete first request. Second pending request should go through.
name|requestManager
operator|.
name|requestFinished
argument_list|(
name|nodeId1
argument_list|)
expr_stmt|;
name|requestManager
operator|.
name|process
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|requestManager
operator|.
name|numSubmissionsCounters
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|requestManager
operator|.
name|numInvocationsPerNode
operator|.
name|get
argument_list|(
name|nodeId1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|requestManager
operator|.
name|numInvocationsPerNode
operator|.
name|get
argument_list|(
name|nodeId1
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|requestManager
operator|.
name|currentLoopSkippedRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|requestManager
operator|.
name|currentLoopDisabledNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|requestManager
operator|.
name|currentLoopDisabledNodes
operator|.
name|contains
argument_list|(
name|nodeId1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|RequestManagerForTest
extends|extends
name|LlapProtocolClientProxy
operator|.
name|RequestManager
block|{
name|int
name|numSubmissionsCounters
init|=
literal|0
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|LlapNodeId
argument_list|,
name|MutableInt
argument_list|>
name|numInvocationsPerNode
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|RequestManagerForTest
parameter_list|(
name|int
name|numThreads
parameter_list|)
block|{
name|super
argument_list|(
name|numThreads
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|submitToExecutor
parameter_list|(
name|LlapProtocolClientProxy
operator|.
name|CallableRequest
name|request
parameter_list|,
name|LlapNodeId
name|nodeId
parameter_list|)
block|{
name|numSubmissionsCounters
operator|++
expr_stmt|;
name|MutableInt
name|nodeCount
init|=
name|numInvocationsPerNode
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeCount
operator|==
literal|null
condition|)
block|{
name|nodeCount
operator|=
operator|new
name|MutableInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|numInvocationsPerNode
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|nodeCount
argument_list|)
expr_stmt|;
block|}
name|nodeCount
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|void
name|reset
parameter_list|()
block|{
name|numSubmissionsCounters
operator|=
literal|0
expr_stmt|;
name|numInvocationsPerNode
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|CallableRequestForTest
extends|extends
name|LlapProtocolClientProxy
operator|.
name|CallableRequest
argument_list|<
name|Message
argument_list|,
name|Message
argument_list|>
block|{
specifier|protected
name|CallableRequestForTest
parameter_list|(
name|LlapNodeId
name|nodeId
parameter_list|,
name|Message
name|message
parameter_list|,
name|LlapProtocolClientProxy
operator|.
name|ExecuteRequestCallback
argument_list|<
name|Message
argument_list|>
name|callback
parameter_list|)
block|{
name|super
argument_list|(
name|nodeId
argument_list|,
name|message
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Message
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

