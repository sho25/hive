begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|cache
operator|.
name|LlapMemoryBuffer
import|;
end_import

begin_class
specifier|public
class|class
name|EncodedColumnBatch
parameter_list|<
name|BatchKey
parameter_list|>
block|{
comment|// TODO: temporary class. Will be filled in when reading (ORC) is implemented. Need to balance
comment|//       generality, and ability to not copy data from underlying low-level cached buffers.
specifier|public
specifier|static
class|class
name|StreamBuffer
block|{
comment|// Decoder knows which stream this belongs to, and each buffer is a compression block,
comment|// so he can figure out the offsets from metadata.
specifier|public
name|List
argument_list|<
name|LlapMemoryBuffer
argument_list|>
name|cacheBuffers
decl_stmt|;
specifier|public
name|int
name|streamKind
decl_stmt|;
comment|// StreamBuffer can be reused for many RGs (e.g. dictionary case). To avoid locking every
comment|// LlapMemoryBuffer 500 times, have a separate refcount on StreamBuffer itself.
specifier|public
name|AtomicInteger
name|refCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|(
name|int
name|kind
parameter_list|)
block|{
name|streamKind
operator|=
name|kind
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|cacheBuffers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|refCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|incRef
parameter_list|()
block|{
name|refCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|decRef
parameter_list|()
block|{
name|int
name|i
init|=
name|refCount
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
assert|assert
name|i
operator|>=
literal|0
assert|;
return|return
name|i
return|;
block|}
block|}
specifier|public
name|BatchKey
name|batchKey
decl_stmt|;
specifier|public
name|StreamBuffer
index|[]
index|[]
name|columnData
decl_stmt|;
specifier|public
name|int
index|[]
name|columnIxs
decl_stmt|;
comment|/** Generation version necessary to sync pooling reuse with the fact that two separate threads    * operate on batches - the one that decodes them, and potential separate thread w/a "stop" call    * that cleans them up. We don't want the decode thread to use the ECB that was thrown out and    * reused, so it remembers the version and checks it after making sure no cleanup thread can ever    * get to this ECB anymore. All this sync is ONLY needed because of high level cache code (sync    * in decode thread is for the map that combines columns coming from cache and from file), so    * if we throw this presently-unused code out, we'd be able to get rid of this. */
specifier|public
name|int
name|version
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
specifier|public
name|void
name|reset
parameter_list|()
block|{
if|if
condition|(
name|columnData
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnData
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|columnData
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|initColumn
parameter_list|(
name|int
name|colIxMod
parameter_list|,
name|int
name|colIx
parameter_list|,
name|int
name|streamCount
parameter_list|)
block|{
name|columnIxs
index|[
name|colIxMod
index|]
operator|=
name|colIx
expr_stmt|;
name|columnData
index|[
name|colIxMod
index|]
operator|=
operator|new
name|StreamBuffer
index|[
name|streamCount
index|]
expr_stmt|;
block|}
specifier|public
name|void
name|setStreamData
parameter_list|(
name|int
name|colIxMod
parameter_list|,
name|int
name|streamIx
parameter_list|,
name|StreamBuffer
name|sb
parameter_list|)
block|{
name|columnData
index|[
name|colIxMod
index|]
index|[
name|streamIx
index|]
operator|=
name|sb
expr_stmt|;
block|}
specifier|public
name|void
name|setAllStreams
parameter_list|(
name|int
name|colIxMod
parameter_list|,
name|int
name|colIx
parameter_list|,
name|StreamBuffer
index|[]
name|sbs
parameter_list|)
block|{
name|columnIxs
index|[
name|colIxMod
index|]
operator|=
name|colIx
expr_stmt|;
name|columnData
index|[
name|colIxMod
index|]
operator|=
name|sbs
expr_stmt|;
block|}
block|}
end_class

end_unit

