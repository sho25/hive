begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|orc
package|;
end_package

begin_class
specifier|public
class|class
name|OrcCacheKey
extends|extends
name|OrcBatchKey
block|{
specifier|public
name|int
name|colIx
decl_stmt|;
specifier|public
name|OrcCacheKey
parameter_list|(
name|long
name|file
parameter_list|,
name|int
name|stripeIx
parameter_list|,
name|int
name|rgIx
parameter_list|,
name|int
name|colIx
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|,
name|stripeIx
argument_list|,
name|rgIx
argument_list|)
expr_stmt|;
name|this
operator|.
name|colIx
operator|=
name|colIx
expr_stmt|;
block|}
specifier|public
name|OrcCacheKey
parameter_list|(
name|OrcBatchKey
name|batchKey
parameter_list|,
name|int
name|colIx
parameter_list|)
block|{
name|super
argument_list|(
name|batchKey
operator|.
name|file
argument_list|,
name|batchKey
operator|.
name|stripeIx
argument_list|,
name|batchKey
operator|.
name|rgIx
argument_list|)
expr_stmt|;
name|this
operator|.
name|colIx
operator|=
name|colIx
expr_stmt|;
block|}
specifier|public
name|OrcBatchKey
name|copyToPureBatchKey
parameter_list|()
block|{
return|return
operator|new
name|OrcBatchKey
argument_list|(
name|file
argument_list|,
name|stripeIx
argument_list|,
name|rgIx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|file
operator|+
literal|", stripe "
operator|+
name|stripeIx
operator|+
literal|", rgIx "
operator|+
name|rgIx
operator|+
literal|", rgIx "
operator|+
name|colIx
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
return|return
name|super
operator|.
name|hashCode
argument_list|()
operator|*
name|prime
operator|+
name|colIx
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|OrcCacheKey
operator|)
condition|)
return|return
literal|false
return|;
name|OrcCacheKey
name|other
init|=
operator|(
name|OrcCacheKey
operator|)
name|obj
decl_stmt|;
comment|// Strings are interned and can thus be compared like this.
return|return
name|stripeIx
operator|==
name|other
operator|.
name|stripeIx
operator|&&
name|rgIx
operator|==
name|other
operator|.
name|rgIx
operator|&&
name|file
operator|==
name|other
operator|.
name|file
operator|&&
name|other
operator|.
name|colIx
operator|==
name|colIx
return|;
block|}
block|}
end_class

end_unit

