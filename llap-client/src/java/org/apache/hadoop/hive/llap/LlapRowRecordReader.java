begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|FieldDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinarySerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Row-based record reader for LLAP.  */
end_comment

begin_class
specifier|public
class|class
name|LlapRowRecordReader
implements|implements
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|Row
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LlapRowRecordReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|protected
specifier|final
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|BytesWritable
argument_list|>
name|reader
decl_stmt|;
specifier|protected
specifier|final
name|Schema
name|schema
decl_stmt|;
specifier|protected
specifier|final
name|AbstractSerDe
name|serde
decl_stmt|;
specifier|protected
specifier|final
name|BytesWritable
name|data
decl_stmt|;
specifier|public
name|LlapRowRecordReader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|BytesWritable
argument_list|>
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|data
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
try|try
block|{
name|serde
operator|=
name|initSerDe
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NullWritable
name|createKey
parameter_list|()
block|{
return|return
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Row
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|Row
argument_list|(
name|schema
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|NullWritable
name|key
parameter_list|,
name|Row
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|value
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|boolean
name|hasNext
init|=
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasNext
condition|)
block|{
comment|// Deserialize data to column values, and populate the row record
name|Object
name|rowObj
decl_stmt|;
try|try
block|{
name|StructObjectInspector
name|rowOI
init|=
operator|(
name|StructObjectInspector
operator|)
name|serde
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|rowObj
operator|=
name|serde
operator|.
name|deserialize
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|setRowFromStruct
argument_list|(
name|value
argument_list|,
name|rowObj
argument_list|,
name|rowOI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|err
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error deserializing row from data: "
operator|+
name|data
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error deserializing row data"
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
return|return
name|hasNext
return|;
block|}
specifier|public
name|Schema
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
specifier|static
name|Object
name|convertPrimitive
parameter_list|(
name|Object
name|val
parameter_list|,
name|PrimitiveObjectInspector
name|poi
parameter_list|)
block|{
switch|switch
condition|(
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
comment|// Save char/varchar as string
case|case
name|CHAR
case|:
return|return
operator|(
operator|(
name|HiveChar
operator|)
name|poi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|val
argument_list|)
operator|)
operator|.
name|getPaddedValue
argument_list|()
return|;
case|case
name|VARCHAR
case|:
return|return
operator|(
operator|(
name|HiveVarchar
operator|)
name|poi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|val
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
return|;
case|case
name|DECIMAL
case|:
return|return
operator|(
operator|(
name|HiveDecimal
operator|)
name|poi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|val
argument_list|)
operator|)
operator|.
name|bigDecimalValue
argument_list|()
return|;
default|default:
return|return
name|poi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|val
argument_list|)
return|;
block|}
block|}
specifier|static
name|Object
name|convertValue
parameter_list|(
name|Object
name|val
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|)
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|convertedVal
init|=
literal|null
decl_stmt|;
name|ObjectInspector
operator|.
name|Category
name|oiCategory
init|=
name|oi
operator|.
name|getCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|oiCategory
condition|)
block|{
case|case
name|PRIMITIVE
case|:
name|convertedVal
operator|=
name|convertPrimitive
argument_list|(
name|val
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
argument_list|)
expr_stmt|;
break|break;
case|case
name|LIST
case|:
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi
decl_stmt|;
name|int
name|listSize
init|=
name|loi
operator|.
name|getListLength
argument_list|(
name|val
argument_list|)
decl_stmt|;
comment|// Per ListObjectInpsector.getListLength(), -1 length means null list.
if|if
condition|(
name|listSize
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|convertedList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|listSize
argument_list|)
decl_stmt|;
name|ObjectInspector
name|listElementOI
init|=
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|listSize
condition|;
operator|++
name|idx
control|)
block|{
name|convertedList
operator|.
name|add
argument_list|(
name|convertValue
argument_list|(
name|loi
operator|.
name|getListElement
argument_list|(
name|val
argument_list|,
name|idx
argument_list|)
argument_list|,
name|listElementOI
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|convertedVal
operator|=
name|convertedList
expr_stmt|;
break|break;
case|case
name|MAP
case|:
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|oi
decl_stmt|;
name|int
name|mapSize
init|=
name|moi
operator|.
name|getMapSize
argument_list|(
name|val
argument_list|)
decl_stmt|;
comment|// Per MapObjectInpsector.getMapSize(), -1 length means null map.
if|if
condition|(
name|mapSize
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|convertedMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|(
name|mapSize
argument_list|)
decl_stmt|;
name|ObjectInspector
name|mapKeyOI
init|=
name|moi
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|mapValOI
init|=
name|moi
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|mapCol
init|=
name|moi
operator|.
name|getMap
argument_list|(
name|val
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|mapKey
range|:
name|mapCol
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Object
name|convertedMapKey
init|=
name|convertValue
argument_list|(
name|mapKey
argument_list|,
name|mapKeyOI
argument_list|)
decl_stmt|;
name|Object
name|convertedMapVal
init|=
name|convertValue
argument_list|(
name|mapCol
operator|.
name|get
argument_list|(
name|mapKey
argument_list|)
argument_list|,
name|mapValOI
argument_list|)
decl_stmt|;
name|convertedMap
operator|.
name|put
argument_list|(
name|convertedMapKey
argument_list|,
name|convertedMapVal
argument_list|)
expr_stmt|;
block|}
name|convertedVal
operator|=
name|convertedMap
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|convertedRow
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StructField
name|structField
range|:
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
control|)
block|{
name|Object
name|convertedFieldValue
init|=
name|convertValue
argument_list|(
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|val
argument_list|,
name|structField
argument_list|)
argument_list|,
name|structField
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|convertedRow
operator|.
name|add
argument_list|(
name|convertedFieldValue
argument_list|)
expr_stmt|;
block|}
name|convertedVal
operator|=
name|convertedRow
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot convert type "
operator|+
name|oiCategory
argument_list|)
throw|;
block|}
return|return
name|convertedVal
return|;
block|}
specifier|static
name|void
name|setRowFromStruct
parameter_list|(
name|Row
name|row
parameter_list|,
name|Object
name|structVal
parameter_list|,
name|StructObjectInspector
name|soi
parameter_list|)
block|{
name|Schema
name|structSchema
init|=
name|row
operator|.
name|getSchema
argument_list|()
decl_stmt|;
comment|// Add struct field data to the Row
name|List
argument_list|<
name|FieldDesc
argument_list|>
name|fieldDescs
init|=
name|structSchema
operator|.
name|getColumns
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|fieldDescs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
name|FieldDesc
name|fieldDesc
init|=
name|fieldDescs
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|StructField
name|structField
init|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
name|fieldDesc
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|convertedFieldValue
init|=
name|convertValue
argument_list|(
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|structVal
argument_list|,
name|structField
argument_list|)
argument_list|,
name|structField
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|row
operator|.
name|setValue
argument_list|(
name|idx
argument_list|,
name|convertedFieldValue
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|AbstractSerDe
name|initSerDe
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|SerDeException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|StringBuffer
name|columnsBuffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|StringBuffer
name|typesBuffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|isFirst
init|=
literal|true
decl_stmt|;
for|for
control|(
name|FieldDesc
name|colDesc
range|:
name|schema
operator|.
name|getColumns
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|columnsBuffer
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|typesBuffer
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|columnsBuffer
operator|.
name|append
argument_list|(
name|colDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesBuffer
operator|.
name|append
argument_list|(
name|colDesc
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|isFirst
operator|=
literal|false
expr_stmt|;
block|}
name|String
name|columns
init|=
name|columnsBuffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|types
init|=
name|typesBuffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|types
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|ESCAPE_CHAR
argument_list|,
literal|"\\"
argument_list|)
expr_stmt|;
name|AbstractSerDe
name|serde
init|=
operator|new
name|LazyBinarySerDe
argument_list|()
decl_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|props
argument_list|)
expr_stmt|;
return|return
name|serde
return|;
block|}
block|}
end_class

end_unit

