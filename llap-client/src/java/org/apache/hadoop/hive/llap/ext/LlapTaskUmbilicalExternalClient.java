begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|ext
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|protocol
operator|.
name|LlapTaskUmbilicalProtocol
operator|.
name|TezAttemptArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ArrayWritable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|ListUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|QueryIdentifierProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SignableVertexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmissionStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|TerminateFragmentRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|TerminateFragmentResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|VertexOrBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|protocol
operator|.
name|LlapTaskUmbilicalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|security
operator|.
name|LlapTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tez
operator|.
name|Converters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tez
operator|.
name|LlapProtocolClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
operator|.
name|helpers
operator|.
name|LlapTaskUmbilicalServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|records
operator|.
name|TezTaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|TezEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|TezHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|TezHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|LlapTaskUmbilicalExternalClient
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LlapTaskUmbilicalExternalClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ScheduledThreadPoolExecutor
name|retryExecutor
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|LlapProtocolClientProxy
name|communicator
decl_stmt|;
specifier|private
specifier|volatile
name|LlapTaskUmbilicalServer
name|llapTaskUmbilicalServer
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|protected
specifier|final
name|String
name|tokenIdentifier
decl_stmt|;
specifier|protected
specifier|final
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|sessionToken
decl_stmt|;
specifier|private
name|LlapTaskUmbilicalExternalResponder
name|responder
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|long
name|connectionTimeout
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|private
name|RequestInfo
name|requestInfo
decl_stmt|;
name|List
argument_list|<
name|TezEvent
argument_list|>
name|tezEvents
decl_stmt|;
comment|// Using a shared instance of the umbilical server.
specifier|private
specifier|static
class|class
name|SharedUmbilicalServer
block|{
name|LlapTaskUmbilicalExternalImpl
name|umbilicalProtocol
decl_stmt|;
name|LlapTaskUmbilicalServer
name|llapTaskUmbilicalServer
decl_stmt|;
specifier|private
specifier|volatile
specifier|static
name|SharedUmbilicalServer
name|instance
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|static
name|SharedUmbilicalServer
name|getInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|SharedUmbilicalServer
name|value
init|=
name|instance
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|SharedUmbilicalServer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|instance
expr_stmt|;
block|}
block|}
return|return
name|value
return|;
block|}
specifier|private
name|SharedUmbilicalServer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
name|umbilicalProtocol
operator|=
operator|new
name|LlapTaskUmbilicalExternalImpl
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|llapTaskUmbilicalServer
operator|=
operator|new
name|LlapTaskUmbilicalServer
argument_list|(
name|conf
argument_list|,
name|umbilicalProtocol
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|ExceptionInInitializerError
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
enum|enum
name|RequestState
block|{
name|PENDING
block|,
name|RUNNING
block|}
empty_stmt|;
specifier|private
specifier|static
class|class
name|RequestInfo
block|{
name|RequestState
name|state
decl_stmt|;
specifier|final
name|SubmitWorkRequestProto
name|request
decl_stmt|;
specifier|final
name|QueryIdentifierProto
name|queryIdentifierProto
decl_stmt|;
specifier|final
name|String
name|taskAttemptId
decl_stmt|;
specifier|final
name|String
name|hostname
decl_stmt|;
name|String
name|uniqueNodeId
decl_stmt|;
specifier|final
name|int
name|port
decl_stmt|;
specifier|final
name|AtomicLong
name|lastHeartbeat
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|public
name|RequestInfo
parameter_list|(
name|SubmitWorkRequestProto
name|request
parameter_list|,
name|QueryIdentifierProto
name|queryIdentifierProto
parameter_list|,
name|String
name|taskAttemptId
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|RequestState
operator|.
name|PENDING
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|queryIdentifierProto
operator|=
name|queryIdentifierProto
expr_stmt|;
name|this
operator|.
name|taskAttemptId
operator|=
name|taskAttemptId
expr_stmt|;
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|lastHeartbeat
operator|.
name|set
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|LlapTaskUmbilicalExternalClient
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|tokenIdentifier
parameter_list|,
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|sessionToken
parameter_list|,
name|LlapTaskUmbilicalExternalResponder
name|responder
parameter_list|,
name|Token
argument_list|<
name|LlapTokenIdentifier
argument_list|>
name|llapToken
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|tokenIdentifier
operator|=
name|tokenIdentifier
expr_stmt|;
name|this
operator|.
name|sessionToken
operator|=
name|sessionToken
expr_stmt|;
name|this
operator|.
name|responder
operator|=
name|responder
expr_stmt|;
name|this
operator|.
name|connectionTimeout
operator|=
literal|3
operator|*
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_AM_LIVENESS_CONNECTION_TIMEOUT_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// Add support for configurable threads, however 1 should always be enough.
name|this
operator|.
name|communicator
operator|=
operator|new
name|LlapProtocolClientProxy
argument_list|(
literal|1
argument_list|,
name|conf
argument_list|,
name|llapToken
argument_list|)
expr_stmt|;
name|this
operator|.
name|communicator
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|terminateRequest
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|||
name|requestInfo
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No current request to terminate"
argument_list|)
expr_stmt|;
return|return;
block|}
name|TerminateFragmentRequestProto
operator|.
name|Builder
name|builder
init|=
name|TerminateFragmentRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setQueryIdentifier
argument_list|(
name|requestInfo
operator|.
name|queryIdentifierProto
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setFragmentIdentifierString
argument_list|(
name|requestInfo
operator|.
name|taskAttemptId
argument_list|)
expr_stmt|;
specifier|final
name|String
name|taskAttemptId
init|=
name|requestInfo
operator|.
name|taskAttemptId
decl_stmt|;
name|communicator
operator|.
name|sendTerminateFragment
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|requestInfo
operator|.
name|hostname
argument_list|,
name|requestInfo
operator|.
name|port
argument_list|,
operator|new
name|LlapProtocolClientProxy
operator|.
name|ExecuteRequestCallback
argument_list|<
name|TerminateFragmentResponseProto
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setResponse
parameter_list|(
name|TerminateFragmentResponseProto
name|response
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received terminate response for "
operator|+
name|taskAttemptId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|indicateError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Failed to terminate "
operator|+
name|taskAttemptId
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// Don't propagate the error - termination was done as part of closing the client.
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|InetSocketAddress
name|getAddress
parameter_list|()
block|{
return|return
name|SharedUmbilicalServer
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
operator|.
name|llapTaskUmbilicalServer
operator|.
name|getAddress
argument_list|()
return|;
block|}
comment|/**    * Submit the work for actual execution.    */
specifier|public
name|void
name|submitWork
parameter_list|(
name|SubmitWorkRequestProto
name|request
parameter_list|,
name|String
name|llapHost
parameter_list|,
name|int
name|llapPort
parameter_list|)
block|{
comment|// Register the pending events to be sent for this spec.
name|VertexOrBinary
name|vob
init|=
name|request
operator|.
name|getWorkSpec
argument_list|()
decl_stmt|;
assert|assert
name|vob
operator|.
name|hasVertexBinary
argument_list|()
operator|!=
name|vob
operator|.
name|hasVertex
argument_list|()
assert|;
name|SignableVertexSpec
name|vertex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|vertex
operator|=
name|vob
operator|.
name|hasVertex
argument_list|()
condition|?
name|vob
operator|.
name|getVertex
argument_list|()
else|:
name|SignableVertexSpec
operator|.
name|parseFrom
argument_list|(
name|vob
operator|.
name|getVertexBinary
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|QueryIdentifierProto
name|queryIdentifierProto
init|=
name|vertex
operator|.
name|getQueryIdentifier
argument_list|()
decl_stmt|;
name|TezTaskAttemptID
name|attemptId
init|=
name|Converters
operator|.
name|createTaskAttemptId
argument_list|(
name|queryIdentifierProto
argument_list|,
name|vertex
operator|.
name|getVertexIndex
argument_list|()
argument_list|,
name|request
operator|.
name|getFragmentNumber
argument_list|()
argument_list|,
name|request
operator|.
name|getAttemptNumber
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fragmentId
init|=
name|attemptId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|this
operator|.
name|requestInfo
operator|=
operator|new
name|RequestInfo
argument_list|(
name|request
argument_list|,
name|queryIdentifierProto
argument_list|,
name|fragmentId
argument_list|,
name|llapHost
argument_list|,
name|llapPort
argument_list|)
expr_stmt|;
name|this
operator|.
name|tezEvents
operator|=
name|Lists
operator|.
expr|<
name|TezEvent
operator|>
name|newArrayList
argument_list|()
expr_stmt|;
name|registerClient
argument_list|()
expr_stmt|;
comment|// Send out the actual SubmitWorkRequest
specifier|final
name|LlapTaskUmbilicalExternalClient
name|client
init|=
name|this
decl_stmt|;
name|communicator
operator|.
name|start
argument_list|()
expr_stmt|;
name|submitWork
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|submitWork
parameter_list|()
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|communicator
operator|.
name|sendSubmitWork
argument_list|(
name|requestInfo
operator|.
name|request
argument_list|,
name|requestInfo
operator|.
name|hostname
argument_list|,
name|requestInfo
operator|.
name|port
argument_list|,
operator|new
name|SubmitWorkCallback
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Helper class to submit fragments to LLAP and retry rejected submissions.
specifier|static
class|class
name|SubmitWorkCallback
implements|implements
name|LlapProtocolClientProxy
operator|.
name|ExecuteRequestCallback
argument_list|<
name|SubmitWorkResponseProto
argument_list|>
block|{
specifier|private
name|LlapTaskUmbilicalExternalClient
name|client
decl_stmt|;
specifier|public
name|SubmitWorkCallback
parameter_list|(
name|LlapTaskUmbilicalExternalClient
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setResponse
parameter_list|(
name|SubmitWorkResponseProto
name|response
parameter_list|)
block|{
if|if
condition|(
name|response
operator|.
name|hasSubmissionState
argument_list|()
condition|)
block|{
if|if
condition|(
name|response
operator|.
name|getSubmissionState
argument_list|()
operator|.
name|equals
argument_list|(
name|SubmissionStateProto
operator|.
name|REJECTED
argument_list|)
condition|)
block|{
name|String
name|fragmentId
init|=
name|this
operator|.
name|client
operator|.
name|requestInfo
operator|.
name|taskAttemptId
decl_stmt|;
name|String
name|msg
init|=
literal|"Fragment: "
operator|+
name|fragmentId
operator|+
literal|" rejected. Server Busy."
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// Retry rejected requests
if|if
condition|(
operator|!
name|client
operator|.
name|closed
condition|)
block|{
comment|// Update lastHeartbeat so we don't timeout during the retry
name|client
operator|.
name|setLastHeartbeat
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|retryDelay
init|=
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|client
operator|.
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_AM_LIVENESS_CONNECTION_SLEEP_BETWEEN_RETRIES_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Queueing fragment for resubmission: "
operator|+
name|fragmentId
argument_list|)
expr_stmt|;
specifier|final
name|SubmitWorkCallback
name|submitter
init|=
name|this
decl_stmt|;
name|retryExecutor
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|client
operator|.
name|submitWork
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|retryDelay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
if|if
condition|(
name|response
operator|.
name|hasUniqueNodeId
argument_list|()
condition|)
block|{
name|client
operator|.
name|requestInfo
operator|.
name|uniqueNodeId
operator|=
name|response
operator|.
name|getUniqueNodeId
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|indicateError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|String
name|fragmentId
init|=
name|this
operator|.
name|client
operator|.
name|requestInfo
operator|.
name|taskAttemptId
decl_stmt|;
name|String
name|msg
init|=
literal|"Failed to submit: "
operator|+
name|fragmentId
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|Throwable
name|err
init|=
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|client
operator|.
name|unregisterClient
argument_list|()
expr_stmt|;
name|client
operator|.
name|responder
operator|.
name|submissionFailed
argument_list|(
name|fragmentId
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|terminateRequest
argument_list|()
expr_stmt|;
name|unregisterClient
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|registerClient
parameter_list|()
block|{
name|SharedUmbilicalServer
name|umbilicalServer
init|=
name|SharedUmbilicalServer
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LlapTaskUmbilicalExternalClient
name|prevVal
init|=
name|umbilicalServer
operator|.
name|umbilicalProtocol
operator|.
name|registeredClients
operator|.
name|putIfAbsent
argument_list|(
name|requestInfo
operator|.
name|taskAttemptId
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevVal
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected - fragment "
operator|+
name|requestInfo
operator|.
name|taskAttemptId
operator|+
literal|" is already registered!"
argument_list|)
expr_stmt|;
block|}
name|umbilicalServer
operator|.
name|llapTaskUmbilicalServer
operator|.
name|addTokenForJob
argument_list|(
name|tokenIdentifier
argument_list|,
name|sessionToken
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|unregisterClient
parameter_list|()
block|{
if|if
condition|(
operator|!
name|closed
operator|&&
name|requestInfo
operator|!=
literal|null
condition|)
block|{
name|communicator
operator|.
name|stop
argument_list|()
expr_stmt|;
name|SharedUmbilicalServer
name|umbilicalServer
init|=
name|SharedUmbilicalServer
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|umbilicalServer
operator|.
name|umbilicalProtocol
operator|.
name|unregisterClient
argument_list|(
name|requestInfo
operator|.
name|taskAttemptId
argument_list|)
expr_stmt|;
name|umbilicalServer
operator|.
name|llapTaskUmbilicalServer
operator|.
name|removeTokenForJob
argument_list|(
name|tokenIdentifier
argument_list|)
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|long
name|getLastHeartbeat
parameter_list|()
block|{
return|return
name|this
operator|.
name|requestInfo
operator|.
name|lastHeartbeat
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|setLastHeartbeat
parameter_list|(
name|long
name|lastHeartbeat
parameter_list|)
block|{
name|this
operator|.
name|requestInfo
operator|.
name|lastHeartbeat
operator|.
name|set
argument_list|(
name|lastHeartbeat
argument_list|)
expr_stmt|;
block|}
comment|// Periodic task to time out submitted tasks that have not been updated with umbilical heartbeat.
specifier|private
specifier|static
class|class
name|HeartbeatCheckTask
implements|implements
name|Runnable
block|{
name|LlapTaskUmbilicalExternalImpl
name|umbilicalImpl
decl_stmt|;
specifier|public
name|HeartbeatCheckTask
parameter_list|(
name|LlapTaskUmbilicalExternalImpl
name|umbilicalImpl
parameter_list|)
block|{
name|this
operator|.
name|umbilicalImpl
operator|=
name|umbilicalImpl
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LlapTaskUmbilicalExternalClient
argument_list|>
name|timedOutTasks
init|=
operator|new
name|ArrayList
argument_list|<
name|LlapTaskUmbilicalExternalClient
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LlapTaskUmbilicalExternalClient
argument_list|>
name|entry
range|:
name|umbilicalImpl
operator|.
name|registeredClients
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LlapTaskUmbilicalExternalClient
name|client
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTime
operator|-
name|client
operator|.
name|getLastHeartbeat
argument_list|()
operator|>=
name|client
operator|.
name|connectionTimeout
condition|)
block|{
name|timedOutTasks
operator|.
name|add
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|LlapTaskUmbilicalExternalClient
name|timedOutTask
range|:
name|timedOutTasks
control|)
block|{
name|String
name|taskAttemptId
init|=
name|timedOutTask
operator|.
name|requestInfo
operator|.
name|taskAttemptId
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running taskAttemptId "
operator|+
name|taskAttemptId
operator|+
literal|" timed out"
argument_list|)
expr_stmt|;
name|timedOutTask
operator|.
name|unregisterClient
argument_list|()
expr_stmt|;
name|timedOutTask
operator|.
name|responder
operator|.
name|heartbeatTimeout
argument_list|(
name|taskAttemptId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
interface|interface
name|LlapTaskUmbilicalExternalResponder
block|{
name|void
name|submissionFailed
parameter_list|(
name|String
name|fragmentId
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
function_decl|;
name|void
name|heartbeat
parameter_list|(
name|TezHeartbeatRequest
name|request
parameter_list|)
function_decl|;
name|void
name|taskKilled
parameter_list|(
name|TezTaskAttemptID
name|taskAttemptId
parameter_list|)
function_decl|;
name|void
name|heartbeatTimeout
parameter_list|(
name|String
name|fragmentId
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|LlapTaskUmbilicalExternalImpl
implements|implements
name|LlapTaskUmbilicalProtocol
block|{
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|LlapTaskUmbilicalExternalClient
argument_list|>
name|registeredClients
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ScheduledThreadPoolExecutor
name|timer
decl_stmt|;
specifier|public
name|LlapTaskUmbilicalExternalImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|taskInterval
init|=
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_AM_LIVENESS_CONNECTION_TIMEOUT_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
comment|// Setup timer task to check for hearbeat timeouts
name|this
operator|.
name|timer
operator|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|timer
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|HeartbeatCheckTask
argument_list|(
name|this
argument_list|)
argument_list|,
name|taskInterval
argument_list|,
name|taskInterval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canCommit
parameter_list|(
name|TezTaskAttemptID
name|taskid
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Expecting only a single instance of a task to be running.
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|TezHeartbeatResponse
name|heartbeat
parameter_list|(
name|TezHeartbeatRequest
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|TezException
block|{
comment|// Keep-alive information. The client should be informed and will have to take care of re-submitting the work.
comment|// Some parts of fault tolerance go here.
comment|// This also provides completion information, and a possible notification when task actually starts running (first heartbeat)
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received heartbeat from container, request="
operator|+
name|request
argument_list|)
expr_stmt|;
block|}
comment|// Incoming events can be ignored until the point when shuffle needs to be handled, instead of just scans.
name|TezHeartbeatResponse
name|response
init|=
operator|new
name|TezHeartbeatResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setLastRequestId
argument_list|(
name|request
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assuming TaskAttemptId and FragmentIdentifierString are the same. Verify this.
name|TezTaskAttemptID
name|taskAttemptId
init|=
name|request
operator|.
name|getCurrentTaskAttemptID
argument_list|()
decl_stmt|;
name|String
name|taskAttemptIdString
init|=
name|taskAttemptId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|updateHeartbeatInfo
argument_list|(
name|taskAttemptIdString
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TezEvent
argument_list|>
name|tezEvents
init|=
literal|null
decl_stmt|;
name|LlapTaskUmbilicalExternalClient
name|client
init|=
name|registeredClients
operator|.
name|get
argument_list|(
name|taskAttemptIdString
argument_list|)
decl_stmt|;
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
comment|// Heartbeat is from a task that we are not currently tracking.
name|LOG
operator|.
name|info
argument_list|(
literal|"Unexpected heartbeat from "
operator|+
name|taskAttemptIdString
argument_list|)
expr_stmt|;
name|response
operator|.
name|setShouldDie
argument_list|()
expr_stmt|;
comment|// Do any of the other fields need to be set?
return|return
name|response
return|;
block|}
if|if
condition|(
name|client
operator|.
name|requestInfo
operator|.
name|state
operator|==
name|RequestState
operator|.
name|PENDING
condition|)
block|{
name|client
operator|.
name|requestInfo
operator|.
name|state
operator|=
name|RequestState
operator|.
name|RUNNING
expr_stmt|;
name|tezEvents
operator|=
name|client
operator|.
name|tezEvents
expr_stmt|;
block|}
else|else
block|{
name|tezEvents
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|boolean
name|shouldUnregisterClient
init|=
literal|false
decl_stmt|;
name|response
operator|.
name|setLastRequestId
argument_list|(
name|request
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Irrelevant from eventIds. This can be tracked in the AM itself, instead of polluting the task.
comment|// Also since we have all the MRInput events here - they'll all be sent in together.
name|response
operator|.
name|setNextFromEventId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Irrelevant. See comment above.
name|response
operator|.
name|setNextPreRoutedEventId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//Irrelevant. See comment above.
name|response
operator|.
name|setEvents
argument_list|(
name|tezEvents
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TezEvent
argument_list|>
name|inEvents
init|=
name|request
operator|.
name|getEvents
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Heartbeat from "
operator|+
name|taskAttemptIdString
operator|+
literal|" events: "
operator|+
operator|(
name|inEvents
operator|!=
literal|null
condition|?
name|inEvents
operator|.
name|size
argument_list|()
else|:
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TezEvent
name|tezEvent
range|:
name|ListUtils
operator|.
name|emptyIfNull
argument_list|(
name|inEvents
argument_list|)
control|)
block|{
name|EventType
name|eventType
init|=
name|tezEvent
operator|.
name|getEventType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|eventType
condition|)
block|{
case|case
name|TASK_ATTEMPT_COMPLETED_EVENT
case|:
name|LOG
operator|.
name|debug
argument_list|(
literal|"Task completed event for "
operator|+
name|taskAttemptIdString
argument_list|)
expr_stmt|;
name|shouldUnregisterClient
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|TASK_ATTEMPT_FAILED_EVENT
case|:
name|LOG
operator|.
name|debug
argument_list|(
literal|"Task failed event for "
operator|+
name|taskAttemptIdString
argument_list|)
expr_stmt|;
name|shouldUnregisterClient
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|TASK_STATUS_UPDATE_EVENT
case|:
comment|// If we want to handle counters
name|LOG
operator|.
name|debug
argument_list|(
literal|"Task update event for "
operator|+
name|taskAttemptIdString
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unhandled event type "
operator|+
name|eventType
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|shouldUnregisterClient
condition|)
block|{
name|client
operator|.
name|unregisterClient
argument_list|()
expr_stmt|;
block|}
comment|// Pass the request on to the responder
try|try
block|{
if|if
condition|(
name|client
operator|.
name|responder
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|responder
operator|.
name|heartbeat
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during responder execution"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeHeartbeat
parameter_list|(
name|Text
name|hostname
parameter_list|,
name|Text
name|uniqueId
parameter_list|,
name|int
name|port
parameter_list|,
name|TezAttemptArray
name|aw
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node heartbeat from "
operator|+
name|hostname
operator|+
literal|":"
operator|+
name|port
operator|+
literal|", "
operator|+
name|uniqueId
argument_list|)
expr_stmt|;
block|}
name|updateHeartbeatInfo
argument_list|(
name|hostname
operator|.
name|toString
argument_list|()
argument_list|,
name|uniqueId
operator|.
name|toString
argument_list|()
argument_list|,
name|port
argument_list|,
name|aw
argument_list|)
expr_stmt|;
comment|// No need to propagate to this to the responder
block|}
annotation|@
name|Override
specifier|public
name|void
name|taskKilled
parameter_list|(
name|TezTaskAttemptID
name|taskAttemptId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|taskAttemptIdString
init|=
name|taskAttemptId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Task killed - "
operator|+
name|taskAttemptIdString
argument_list|)
expr_stmt|;
name|LlapTaskUmbilicalExternalClient
name|client
init|=
name|registeredClients
operator|.
name|get
argument_list|(
name|taskAttemptIdString
argument_list|)
decl_stmt|;
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|client
operator|.
name|unregisterClient
argument_list|()
expr_stmt|;
if|if
condition|(
name|client
operator|.
name|responder
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|responder
operator|.
name|taskKilled
argument_list|(
name|taskAttemptId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|err
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during responder execution"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received task killed notification for task which is not currently being tracked: "
operator|+
name|taskAttemptId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtocolSignature
operator|.
name|getProtocolSignature
argument_list|(
name|this
argument_list|,
name|protocol
argument_list|,
name|clientVersion
argument_list|,
name|clientMethodsHash
argument_list|)
return|;
block|}
specifier|private
name|void
name|unregisterClient
parameter_list|(
name|String
name|taskAttemptId
parameter_list|)
block|{
name|registeredClients
operator|.
name|remove
argument_list|(
name|taskAttemptId
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateHeartbeatInfo
parameter_list|(
name|String
name|taskAttemptId
parameter_list|)
block|{
name|int
name|updateCount
init|=
literal|0
decl_stmt|;
name|LlapTaskUmbilicalExternalClient
name|registeredClient
init|=
name|registeredClients
operator|.
name|get
argument_list|(
name|taskAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|registeredClient
operator|!=
literal|null
condition|)
block|{
name|registeredClient
operator|.
name|setLastHeartbeat
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|updateCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|updateCount
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No tasks found for heartbeat from taskAttemptId "
operator|+
name|taskAttemptId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateHeartbeatInfo
parameter_list|(
name|String
name|hostname
parameter_list|,
name|String
name|uniqueId
parameter_list|,
name|int
name|port
parameter_list|,
name|TezAttemptArray
name|tasks
parameter_list|)
block|{
name|int
name|updateCount
init|=
literal|0
decl_stmt|;
name|HashSet
argument_list|<
name|TezTaskAttemptID
argument_list|>
name|attempts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Writable
name|w
range|:
name|tasks
operator|.
name|get
argument_list|()
control|)
block|{
name|attempts
operator|.
name|add
argument_list|(
operator|(
name|TezTaskAttemptID
operator|)
name|w
argument_list|)
expr_stmt|;
block|}
name|String
name|error
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LlapTaskUmbilicalExternalClient
argument_list|>
name|entry
range|:
name|registeredClients
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LlapTaskUmbilicalExternalClient
name|registeredClient
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|doesClientMatchHeartbeat
argument_list|(
name|registeredClient
argument_list|,
name|hostname
argument_list|,
name|uniqueId
argument_list|,
name|port
argument_list|)
condition|)
block|{
name|TezTaskAttemptID
name|ta
init|=
name|TezTaskAttemptID
operator|.
name|fromString
argument_list|(
name|registeredClient
operator|.
name|requestInfo
operator|.
name|taskAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempts
operator|.
name|contains
argument_list|(
name|ta
argument_list|)
condition|)
block|{
name|registeredClient
operator|.
name|setLastHeartbeat
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|updateCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|error
operator|+=
operator|(
name|registeredClient
operator|.
name|requestInfo
operator|.
name|taskAttemptId
operator|+
literal|", "
operator|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|error
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The tasks we expected to be on the node are not there: "
operator|+
name|error
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateCount
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No tasks found for heartbeat from hostname "
operator|+
name|hostname
operator|+
literal|", port "
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|doesClientMatchHeartbeat
parameter_list|(
name|LlapTaskUmbilicalExternalClient
name|client
parameter_list|,
name|String
name|hostname
parameter_list|,
name|String
name|uniqueId
parameter_list|,
name|int
name|port
parameter_list|)
block|{
return|return
operator|(
name|hostname
operator|.
name|equals
argument_list|(
name|client
operator|.
name|requestInfo
operator|.
name|hostname
argument_list|)
operator|&&
name|port
operator|==
name|client
operator|.
name|requestInfo
operator|.
name|port
operator|&&
name|uniqueId
operator|.
name|equals
argument_list|(
name|client
operator|.
name|requestInfo
operator|.
name|uniqueNodeId
argument_list|)
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

