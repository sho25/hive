begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|protocol
operator|.
name|LlapProtocolBlockingPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|impl
operator|.
name|LlapProtocolClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|QueryCompleteRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|QueryCompleteResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateUpdatedRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateUpdatedResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|TerminateFragmentRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|TerminateFragmentResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|security
operator|.
name|LlapTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|LlapProtocolClientProxy
extends|extends
name|AbstractService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LlapProtocolClientProxy
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|LlapProtocolBlockingPB
argument_list|>
name|hostProxies
decl_stmt|;
specifier|private
specifier|final
name|RequestManager
name|requestManager
decl_stmt|;
specifier|private
specifier|final
name|RetryPolicy
name|retryPolicy
decl_stmt|;
specifier|private
specifier|final
name|SocketFactory
name|socketFactory
decl_stmt|;
specifier|private
specifier|final
name|ListeningExecutorService
name|requestManagerExecutor
decl_stmt|;
specifier|private
specifier|volatile
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|requestManagerFuture
decl_stmt|;
specifier|private
specifier|final
name|Token
argument_list|<
name|LlapTokenIdentifier
argument_list|>
name|llapToken
decl_stmt|;
specifier|public
name|LlapProtocolClientProxy
parameter_list|(
name|int
name|numThreads
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Token
argument_list|<
name|LlapTokenIdentifier
argument_list|>
name|llapToken
parameter_list|)
block|{
name|super
argument_list|(
name|LlapProtocolClientProxy
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|hostProxies
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|socketFactory
operator|=
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|llapToken
operator|=
name|llapToken
expr_stmt|;
name|long
name|connectionTimeout
init|=
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_TASK_COMMUNICATOR_CONNECTION_TIMEOUT_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|long
name|retrySleep
init|=
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_TASK_COMMUNICATOR_CONNECTION_SLEEP_BETWEEN_RETRIES_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|this
operator|.
name|retryPolicy
operator|=
name|RetryPolicies
operator|.
name|retryUpToMaximumTimeWithFixedSleep
argument_list|(
name|connectionTimeout
argument_list|,
name|retrySleep
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|requestManager
operator|=
operator|new
name|RequestManager
argument_list|(
name|numThreads
argument_list|)
expr_stmt|;
name|ExecutorService
name|localExecutor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"RequestManagerExecutor"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|requestManagerExecutor
operator|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|localExecutor
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting up taskCommunicator with"
operator|+
literal|"numThreads="
operator|+
name|numThreads
operator|+
literal|"retryTime(millis)="
operator|+
name|connectionTimeout
operator|+
literal|"retrySleep(millis)="
operator|+
name|retrySleep
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceStart
parameter_list|()
block|{
name|requestManagerFuture
operator|=
name|requestManagerExecutor
operator|.
name|submit
argument_list|(
name|requestManager
argument_list|)
expr_stmt|;
name|Futures
operator|.
name|addCallback
argument_list|(
name|requestManagerFuture
argument_list|,
operator|new
name|FutureCallback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"RequestManager shutdown"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"RequestManager shutdown with error"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceStop
parameter_list|()
block|{
if|if
condition|(
name|requestManagerFuture
operator|!=
literal|null
condition|)
block|{
name|requestManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|requestManagerFuture
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|requestManagerExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|sendSubmitWork
parameter_list|(
name|SubmitWorkRequestProto
name|request
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
specifier|final
name|ExecuteRequestCallback
argument_list|<
name|SubmitWorkResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|LlapNodeId
name|nodeId
init|=
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|requestManager
operator|.
name|queueRequest
argument_list|(
operator|new
name|SubmitWorkCallable
argument_list|(
name|nodeId
argument_list|,
name|request
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sendSourceStateUpdate
parameter_list|(
specifier|final
name|SourceStateUpdatedRequestProto
name|request
parameter_list|,
specifier|final
name|String
name|host
parameter_list|,
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|ExecuteRequestCallback
argument_list|<
name|SourceStateUpdatedResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|LlapNodeId
name|nodeId
init|=
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|requestManager
operator|.
name|queueRequest
argument_list|(
operator|new
name|SendSourceStateUpdateCallable
argument_list|(
name|nodeId
argument_list|,
name|request
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sendQueryComplete
parameter_list|(
specifier|final
name|QueryCompleteRequestProto
name|request
parameter_list|,
specifier|final
name|String
name|host
parameter_list|,
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|ExecuteRequestCallback
argument_list|<
name|QueryCompleteResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|LlapNodeId
name|nodeId
init|=
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|requestManager
operator|.
name|queueRequest
argument_list|(
operator|new
name|SendQueryCompleteCallable
argument_list|(
name|nodeId
argument_list|,
name|request
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sendTerminateFragment
parameter_list|(
specifier|final
name|TerminateFragmentRequestProto
name|request
parameter_list|,
specifier|final
name|String
name|host
parameter_list|,
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|ExecuteRequestCallback
argument_list|<
name|TerminateFragmentResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|LlapNodeId
name|nodeId
init|=
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|requestManager
operator|.
name|queueRequest
argument_list|(
operator|new
name|SendTerminateFragmentCallable
argument_list|(
name|nodeId
argument_list|,
name|request
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
class|class
name|RequestManager
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|isShutdown
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Condition
name|queueCondition
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|shouldRun
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxConcurrentRequestsPerNode
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
name|ListeningExecutorService
name|executor
decl_stmt|;
comment|// Tracks new additions via add, while the loop is processing existing ones.
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|CallableRequest
argument_list|>
name|newRequestList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Tracks existing requests which are cycled through.
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|CallableRequest
argument_list|>
name|pendingRequests
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Tracks requests executing per node
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|LlapNodeId
argument_list|,
name|AtomicInteger
argument_list|>
name|runningRequests
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Tracks completed requests pre node
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|LlapNodeId
argument_list|>
name|completedNodes
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|RequestManager
parameter_list|(
name|int
name|numThreads
parameter_list|)
block|{
name|ExecutorService
name|localExecutor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"TaskCommunicator #%2d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|executor
operator|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|localExecutor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|Set
argument_list|<
name|LlapNodeId
argument_list|>
name|currentLoopDisabledNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|VisibleForTesting
name|List
argument_list|<
name|CallableRequest
argument_list|>
name|currentLoopSkippedRequests
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
block|{
comment|// Caches disabled nodes for quicker lookups and ensures a request on a node which was skipped
comment|// does not go out of order.
while|while
condition|(
operator|!
name|isShutdown
operator|.
name|get
argument_list|()
condition|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|shouldRun
operator|.
name|get
argument_list|()
condition|)
block|{
name|queueCondition
operator|.
name|await
argument_list|()
expr_stmt|;
break|break;
comment|// Break out and try executing.
block|}
name|boolean
name|shouldBreak
init|=
name|process
argument_list|()
decl_stmt|;
if|if
condition|(
name|shouldBreak
condition|)
block|{
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|isShutdown
operator|.
name|get
argument_list|()
condition|)
block|{
break|break;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"RunLoop interrupted without being shutdown first"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"CallScheduler loop exiting"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/* Add a new request to be executed */
specifier|public
name|void
name|queueRequest
parameter_list|(
name|CallableRequest
name|request
parameter_list|)
block|{
synchronized|synchronized
init|(
name|newRequestList
init|)
block|{
name|newRequestList
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|shouldRun
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|notifyRunLoop
argument_list|()
expr_stmt|;
block|}
comment|/* Indicates a request has completed on a node */
specifier|public
name|void
name|requestFinished
parameter_list|(
name|LlapNodeId
name|nodeId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|completedNodes
init|)
block|{
name|completedNodes
operator|.
name|add
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|shouldRun
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|notifyRunLoop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isShutdown
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|notifyRunLoop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
name|void
name|submitToExecutor
parameter_list|(
name|CallableRequest
name|request
parameter_list|,
name|LlapNodeId
name|nodeId
parameter_list|)
block|{
name|ListenableFuture
argument_list|<
name|SourceStateUpdatedResponseProto
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Futures
operator|.
name|addCallback
argument_list|(
name|future
argument_list|,
operator|new
name|ResponseCallback
argument_list|(
name|request
operator|.
name|getCallback
argument_list|()
argument_list|,
name|nodeId
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|boolean
name|process
parameter_list|()
block|{
if|if
condition|(
name|isShutdown
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|currentLoopDisabledNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|currentLoopSkippedRequests
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Set to false to block the next loop. This must be called before draining the lists,
comment|// otherwise an add/completion after draining the lists but before setting it to false,
comment|// will not trigger a run. May cause one unnecessary run if an add comes in before drain.
comment|// drain list. add request (setTrue). setFalse needs to be avoided.
name|shouldRun
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Drain any calls which may have come in during the last execution of the loop.
name|drainNewRequestList
argument_list|()
expr_stmt|;
comment|// Locks newRequestList
name|drainCompletedNodes
argument_list|()
expr_stmt|;
comment|// Locks completedNodes
name|Iterator
argument_list|<
name|CallableRequest
argument_list|>
name|iterator
init|=
name|pendingRequests
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CallableRequest
name|request
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|LlapNodeId
name|nodeId
init|=
name|request
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|canRunForNode
argument_list|(
name|nodeId
argument_list|,
name|currentLoopDisabledNodes
argument_list|)
condition|)
block|{
name|submitToExecutor
argument_list|(
name|request
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentLoopDisabledNodes
operator|.
name|add
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|currentLoopSkippedRequests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Tried scheduling everything that could be scheduled in this loop.
name|pendingRequests
operator|.
name|addAll
argument_list|(
literal|0
argument_list|,
name|currentLoopSkippedRequests
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|drainNewRequestList
parameter_list|()
block|{
synchronized|synchronized
init|(
name|newRequestList
init|)
block|{
if|if
condition|(
operator|!
name|newRequestList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pendingRequests
operator|.
name|addAll
argument_list|(
name|newRequestList
argument_list|)
expr_stmt|;
name|newRequestList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|drainCompletedNodes
parameter_list|()
block|{
synchronized|synchronized
init|(
name|completedNodes
init|)
block|{
if|if
condition|(
operator|!
name|completedNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|LlapNodeId
name|nodeId
range|:
name|completedNodes
control|)
block|{
name|runningRequests
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
name|completedNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|canRunForNode
parameter_list|(
name|LlapNodeId
name|nodeId
parameter_list|,
name|Set
argument_list|<
name|LlapNodeId
argument_list|>
name|currentRunDisabledNodes
parameter_list|)
block|{
if|if
condition|(
name|currentRunDisabledNodes
operator|.
name|contains
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|AtomicInteger
name|count
init|=
name|runningRequests
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|count
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|AtomicInteger
name|old
init|=
name|runningRequests
operator|.
name|putIfAbsent
argument_list|(
name|nodeId
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|count
operator|=
name|old
operator|!=
literal|null
condition|?
name|old
else|:
name|count
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|.
name|incrementAndGet
argument_list|()
operator|<=
name|maxConcurrentRequestsPerNode
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|count
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|private
name|void
name|notifyRunLoop
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|queueCondition
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|ResponseCallback
parameter_list|<
name|TYPE
extends|extends
name|Message
parameter_list|>
implements|implements
name|FutureCallback
argument_list|<
name|TYPE
argument_list|>
block|{
specifier|private
specifier|final
name|ExecuteRequestCallback
argument_list|<
name|TYPE
argument_list|>
name|callback
decl_stmt|;
specifier|private
specifier|final
name|LlapNodeId
name|nodeId
decl_stmt|;
specifier|private
specifier|final
name|RequestManager
name|requestManager
decl_stmt|;
specifier|public
name|ResponseCallback
parameter_list|(
name|ExecuteRequestCallback
argument_list|<
name|TYPE
argument_list|>
name|callback
parameter_list|,
name|LlapNodeId
name|nodeId
parameter_list|,
name|RequestManager
name|requestManager
parameter_list|)
block|{
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|requestManager
operator|=
name|requestManager
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|TYPE
name|result
parameter_list|)
block|{
try|try
block|{
name|callback
operator|.
name|setResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|requestManager
operator|.
name|requestFinished
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
try|try
block|{
name|callback
operator|.
name|indicateError
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|requestManager
operator|.
name|requestFinished
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|static
specifier|abstract
class|class
name|CallableRequest
parameter_list|<
name|REQUEST
extends|extends
name|Message
parameter_list|,
name|RESPONSE
extends|extends
name|Message
parameter_list|>
implements|implements
name|Callable
block|{
specifier|final
name|LlapNodeId
name|nodeId
decl_stmt|;
specifier|final
name|ExecuteRequestCallback
argument_list|<
name|RESPONSE
argument_list|>
name|callback
decl_stmt|;
specifier|final
name|REQUEST
name|request
decl_stmt|;
specifier|protected
name|CallableRequest
parameter_list|(
name|LlapNodeId
name|nodeId
parameter_list|,
name|REQUEST
name|request
parameter_list|,
name|ExecuteRequestCallback
argument_list|<
name|RESPONSE
argument_list|>
name|callback
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
specifier|public
name|LlapNodeId
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
specifier|public
name|ExecuteRequestCallback
argument_list|<
name|RESPONSE
argument_list|>
name|getCallback
parameter_list|()
block|{
return|return
name|callback
return|;
block|}
specifier|public
specifier|abstract
name|RESPONSE
name|call
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
specifier|private
class|class
name|SubmitWorkCallable
extends|extends
name|CallableRequest
argument_list|<
name|SubmitWorkRequestProto
argument_list|,
name|SubmitWorkResponseProto
argument_list|>
block|{
specifier|protected
name|SubmitWorkCallable
parameter_list|(
name|LlapNodeId
name|nodeId
parameter_list|,
name|SubmitWorkRequestProto
name|submitWorkRequestProto
parameter_list|,
name|ExecuteRequestCallback
argument_list|<
name|SubmitWorkResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|super
argument_list|(
name|nodeId
argument_list|,
name|submitWorkRequestProto
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SubmitWorkResponseProto
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxy
argument_list|(
name|nodeId
argument_list|)
operator|.
name|submitWork
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|SendSourceStateUpdateCallable
extends|extends
name|CallableRequest
argument_list|<
name|SourceStateUpdatedRequestProto
argument_list|,
name|SourceStateUpdatedResponseProto
argument_list|>
block|{
specifier|public
name|SendSourceStateUpdateCallable
parameter_list|(
name|LlapNodeId
name|nodeId
parameter_list|,
name|SourceStateUpdatedRequestProto
name|request
parameter_list|,
name|ExecuteRequestCallback
argument_list|<
name|SourceStateUpdatedResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|super
argument_list|(
name|nodeId
argument_list|,
name|request
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SourceStateUpdatedResponseProto
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxy
argument_list|(
name|nodeId
argument_list|)
operator|.
name|sourceStateUpdated
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|SendQueryCompleteCallable
extends|extends
name|CallableRequest
argument_list|<
name|QueryCompleteRequestProto
argument_list|,
name|QueryCompleteResponseProto
argument_list|>
block|{
specifier|protected
name|SendQueryCompleteCallable
parameter_list|(
name|LlapNodeId
name|nodeId
parameter_list|,
name|QueryCompleteRequestProto
name|queryCompleteRequestProto
parameter_list|,
name|ExecuteRequestCallback
argument_list|<
name|QueryCompleteResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|super
argument_list|(
name|nodeId
argument_list|,
name|queryCompleteRequestProto
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|QueryCompleteResponseProto
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxy
argument_list|(
name|nodeId
argument_list|)
operator|.
name|queryComplete
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|SendTerminateFragmentCallable
extends|extends
name|CallableRequest
argument_list|<
name|TerminateFragmentRequestProto
argument_list|,
name|TerminateFragmentResponseProto
argument_list|>
block|{
specifier|protected
name|SendTerminateFragmentCallable
parameter_list|(
name|LlapNodeId
name|nodeId
parameter_list|,
name|TerminateFragmentRequestProto
name|terminateFragmentRequestProto
parameter_list|,
name|ExecuteRequestCallback
argument_list|<
name|TerminateFragmentResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|super
argument_list|(
name|nodeId
argument_list|,
name|terminateFragmentRequestProto
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TerminateFragmentResponseProto
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxy
argument_list|(
name|nodeId
argument_list|)
operator|.
name|terminateFragment
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
specifier|public
interface|interface
name|ExecuteRequestCallback
parameter_list|<
name|T
extends|extends
name|Message
parameter_list|>
block|{
name|void
name|setResponse
parameter_list|(
name|T
name|response
parameter_list|)
function_decl|;
name|void
name|indicateError
parameter_list|(
name|Throwable
name|t
parameter_list|)
function_decl|;
block|}
specifier|private
name|LlapProtocolBlockingPB
name|getProxy
parameter_list|(
specifier|final
name|LlapNodeId
name|nodeId
parameter_list|)
block|{
name|String
name|hostId
init|=
name|getHostIdentifier
argument_list|(
name|nodeId
operator|.
name|getHostname
argument_list|()
argument_list|,
name|nodeId
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|LlapProtocolBlockingPB
name|proxy
init|=
name|hostProxies
operator|.
name|get
argument_list|(
name|hostId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|llapToken
operator|==
literal|null
condition|)
block|{
name|proxy
operator|=
operator|new
name|LlapProtocolClientImpl
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|nodeId
operator|.
name|getHostname
argument_list|()
argument_list|,
name|nodeId
operator|.
name|getPort
argument_list|()
argument_list|,
name|retryPolicy
argument_list|,
name|socketFactory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UserGroupInformation
name|ugi
decl_stmt|;
try|try
block|{
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Token
argument_list|<
name|LlapTokenIdentifier
argument_list|>
name|nodeToken
init|=
operator|new
name|Token
argument_list|<
name|LlapTokenIdentifier
argument_list|>
argument_list|(
name|llapToken
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|nodeToken
argument_list|,
name|NetUtils
operator|.
name|createSocketAddrForHost
argument_list|(
name|nodeId
operator|.
name|getHostname
argument_list|()
argument_list|,
name|nodeId
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|nodeToken
argument_list|)
expr_stmt|;
name|proxy
operator|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|LlapProtocolBlockingPB
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LlapProtocolBlockingPB
name|run
parameter_list|()
block|{
return|return
operator|new
name|LlapProtocolClientImpl
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|nodeId
operator|.
name|getHostname
argument_list|()
argument_list|,
name|nodeId
operator|.
name|getPort
argument_list|()
argument_list|,
name|retryPolicy
argument_list|,
name|socketFactory
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|LlapProtocolBlockingPB
name|proxyOld
init|=
name|hostProxies
operator|.
name|putIfAbsent
argument_list|(
name|hostId
argument_list|,
name|proxy
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyOld
operator|!=
literal|null
condition|)
block|{
comment|// TODO Shutdown the new proxy.
name|proxy
operator|=
name|proxyOld
expr_stmt|;
block|}
block|}
return|return
name|proxy
return|;
block|}
specifier|private
name|String
name|getHostIdentifier
parameter_list|(
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
block|{
return|return
name|hostname
operator|+
literal|":"
operator|+
name|port
return|;
block|}
block|}
end_class

end_unit

