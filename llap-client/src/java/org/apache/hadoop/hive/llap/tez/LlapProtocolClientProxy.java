begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|AsyncPbRpcProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|QueryCompleteRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|QueryCompleteResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateUpdatedRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateUpdatedResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|TerminateFragmentRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|TerminateFragmentResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|UpdateFragmentRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|UpdateFragmentResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|impl
operator|.
name|LlapProtocolClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|protocol
operator|.
name|LlapProtocolBlockingPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|security
operator|.
name|LlapTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_class
specifier|public
class|class
name|LlapProtocolClientProxy
extends|extends
name|AsyncPbRpcProxy
argument_list|<
name|LlapProtocolBlockingPB
argument_list|,
name|LlapTokenIdentifier
argument_list|>
block|{
specifier|public
name|LlapProtocolClientProxy
parameter_list|(
name|int
name|numThreads
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Token
argument_list|<
name|LlapTokenIdentifier
argument_list|>
name|llapToken
parameter_list|)
block|{
comment|// We could pass in the number of nodes that we expect instead of -1.
comment|// Also, a single concurrent request per node is currently hardcoded.
name|super
argument_list|(
name|LlapProtocolClientProxy
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|numThreads
argument_list|,
name|conf
argument_list|,
name|llapToken
argument_list|,
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_TASK_COMMUNICATOR_CONNECTION_TIMEOUT_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_TASK_COMMUNICATOR_CONNECTION_SLEEP_BETWEEN_RETRIES_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sendSubmitWork
parameter_list|(
name|SubmitWorkRequestProto
name|request
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
specifier|final
name|ExecuteRequestCallback
argument_list|<
name|SubmitWorkResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|LlapNodeId
name|nodeId
init|=
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|queueRequest
argument_list|(
operator|new
name|SubmitWorkCallable
argument_list|(
name|nodeId
argument_list|,
name|request
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sendSourceStateUpdate
parameter_list|(
specifier|final
name|SourceStateUpdatedRequestProto
name|request
parameter_list|,
specifier|final
name|LlapNodeId
name|nodeId
parameter_list|,
specifier|final
name|ExecuteRequestCallback
argument_list|<
name|SourceStateUpdatedResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|queueRequest
argument_list|(
operator|new
name|SendSourceStateUpdateCallable
argument_list|(
name|nodeId
argument_list|,
name|request
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sendQueryComplete
parameter_list|(
specifier|final
name|QueryCompleteRequestProto
name|request
parameter_list|,
specifier|final
name|String
name|host
parameter_list|,
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|ExecuteRequestCallback
argument_list|<
name|QueryCompleteResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|LlapNodeId
name|nodeId
init|=
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|queueRequest
argument_list|(
operator|new
name|SendQueryCompleteCallable
argument_list|(
name|nodeId
argument_list|,
name|request
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sendTerminateFragment
parameter_list|(
specifier|final
name|TerminateFragmentRequestProto
name|request
parameter_list|,
specifier|final
name|String
name|host
parameter_list|,
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|ExecuteRequestCallback
argument_list|<
name|TerminateFragmentResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|LlapNodeId
name|nodeId
init|=
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|queueRequest
argument_list|(
operator|new
name|SendTerminateFragmentCallable
argument_list|(
name|nodeId
argument_list|,
name|request
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sendUpdateFragment
parameter_list|(
specifier|final
name|UpdateFragmentRequestProto
name|request
parameter_list|,
specifier|final
name|String
name|host
parameter_list|,
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|ExecuteRequestCallback
argument_list|<
name|UpdateFragmentResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|LlapNodeId
name|nodeId
init|=
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|queueRequest
argument_list|(
operator|new
name|SendUpdateFragmentCallable
argument_list|(
name|nodeId
argument_list|,
name|request
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|SubmitWorkCallable
extends|extends
name|NodeCallableRequest
argument_list|<
name|SubmitWorkRequestProto
argument_list|,
name|SubmitWorkResponseProto
argument_list|>
block|{
specifier|protected
name|SubmitWorkCallable
parameter_list|(
name|LlapNodeId
name|nodeId
parameter_list|,
name|SubmitWorkRequestProto
name|submitWorkRequestProto
parameter_list|,
name|ExecuteRequestCallback
argument_list|<
name|SubmitWorkResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|super
argument_list|(
name|nodeId
argument_list|,
name|submitWorkRequestProto
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SubmitWorkResponseProto
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxy
argument_list|(
name|nodeId
argument_list|,
literal|null
argument_list|)
operator|.
name|submitWork
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|SendSourceStateUpdateCallable
extends|extends
name|NodeCallableRequest
argument_list|<
name|SourceStateUpdatedRequestProto
argument_list|,
name|SourceStateUpdatedResponseProto
argument_list|>
block|{
specifier|public
name|SendSourceStateUpdateCallable
parameter_list|(
name|LlapNodeId
name|nodeId
parameter_list|,
name|SourceStateUpdatedRequestProto
name|request
parameter_list|,
name|ExecuteRequestCallback
argument_list|<
name|SourceStateUpdatedResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|super
argument_list|(
name|nodeId
argument_list|,
name|request
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SourceStateUpdatedResponseProto
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxy
argument_list|(
name|nodeId
argument_list|,
literal|null
argument_list|)
operator|.
name|sourceStateUpdated
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|SendQueryCompleteCallable
extends|extends
name|NodeCallableRequest
argument_list|<
name|QueryCompleteRequestProto
argument_list|,
name|QueryCompleteResponseProto
argument_list|>
block|{
specifier|protected
name|SendQueryCompleteCallable
parameter_list|(
name|LlapNodeId
name|nodeId
parameter_list|,
name|QueryCompleteRequestProto
name|queryCompleteRequestProto
parameter_list|,
name|ExecuteRequestCallback
argument_list|<
name|QueryCompleteResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|super
argument_list|(
name|nodeId
argument_list|,
name|queryCompleteRequestProto
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|QueryCompleteResponseProto
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxy
argument_list|(
name|nodeId
argument_list|,
literal|null
argument_list|)
operator|.
name|queryComplete
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|SendTerminateFragmentCallable
extends|extends
name|NodeCallableRequest
argument_list|<
name|TerminateFragmentRequestProto
argument_list|,
name|TerminateFragmentResponseProto
argument_list|>
block|{
specifier|protected
name|SendTerminateFragmentCallable
parameter_list|(
name|LlapNodeId
name|nodeId
parameter_list|,
name|TerminateFragmentRequestProto
name|terminateFragmentRequestProto
parameter_list|,
name|ExecuteRequestCallback
argument_list|<
name|TerminateFragmentResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|super
argument_list|(
name|nodeId
argument_list|,
name|terminateFragmentRequestProto
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TerminateFragmentResponseProto
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxy
argument_list|(
name|nodeId
argument_list|,
literal|null
argument_list|)
operator|.
name|terminateFragment
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|SendUpdateFragmentCallable
extends|extends
name|NodeCallableRequest
argument_list|<
name|UpdateFragmentRequestProto
argument_list|,
name|UpdateFragmentResponseProto
argument_list|>
block|{
specifier|protected
name|SendUpdateFragmentCallable
parameter_list|(
name|LlapNodeId
name|nodeId
parameter_list|,
name|UpdateFragmentRequestProto
name|terminateFragmentRequestProto
parameter_list|,
name|ExecuteRequestCallback
argument_list|<
name|UpdateFragmentResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|super
argument_list|(
name|nodeId
argument_list|,
name|terminateFragmentRequestProto
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|UpdateFragmentResponseProto
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxy
argument_list|(
name|nodeId
argument_list|,
literal|null
argument_list|)
operator|.
name|updateFragment
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|LlapProtocolBlockingPB
name|createProtocolImpl
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|RetryPolicy
name|retryPolicy
parameter_list|,
name|SocketFactory
name|socketFactory
parameter_list|)
block|{
return|return
operator|new
name|LlapProtocolClientImpl
argument_list|(
name|config
argument_list|,
name|hostname
argument_list|,
name|port
argument_list|,
name|ugi
argument_list|,
name|retryPolicy
argument_list|,
name|socketFactory
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getTokenUser
parameter_list|(
name|Token
argument_list|<
name|LlapTokenIdentifier
argument_list|>
name|token
parameter_list|)
block|{
if|if
condition|(
name|token
operator|==
literal|null
condition|)
return|return
literal|null
return|;
try|try
block|{
return|return
name|token
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getOwner
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot determine the user from token "
operator|+
name|token
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|shutdownProtocolImpl
parameter_list|(
name|LlapProtocolBlockingPB
name|client
parameter_list|)
block|{
comment|// Nothing to do.
block|}
block|}
end_class

end_unit

