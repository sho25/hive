begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|security
operator|.
name|LlapTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplitWithLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SplitLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_class
specifier|public
class|class
name|LlapInputSplit
implements|implements
name|InputSplitWithLocationInfo
block|{
specifier|private
name|int
name|splitNum
decl_stmt|;
specifier|private
name|byte
index|[]
name|planBytes
decl_stmt|;
specifier|private
name|byte
index|[]
name|fragmentBytes
decl_stmt|;
specifier|private
name|SplitLocationInfo
index|[]
name|locations
decl_stmt|;
specifier|private
name|Schema
name|schema
decl_stmt|;
specifier|private
name|String
name|llapUser
decl_stmt|;
specifier|private
name|byte
index|[]
name|fragmentBytesSignature
decl_stmt|;
specifier|private
name|byte
index|[]
name|tokenBytes
decl_stmt|;
specifier|public
name|LlapInputSplit
parameter_list|()
block|{   }
specifier|public
name|LlapInputSplit
parameter_list|(
name|int
name|splitNum
parameter_list|,
name|byte
index|[]
name|planBytes
parameter_list|,
name|byte
index|[]
name|fragmentBytes
parameter_list|,
name|byte
index|[]
name|fragmentBytesSignature
parameter_list|,
name|SplitLocationInfo
index|[]
name|locations
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|String
name|llapUser
parameter_list|,
name|byte
index|[]
name|tokenBytes
parameter_list|)
block|{
name|this
operator|.
name|planBytes
operator|=
name|planBytes
expr_stmt|;
name|this
operator|.
name|fragmentBytes
operator|=
name|fragmentBytes
expr_stmt|;
name|this
operator|.
name|fragmentBytesSignature
operator|=
name|fragmentBytesSignature
expr_stmt|;
name|this
operator|.
name|locations
operator|=
name|locations
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|splitNum
operator|=
name|splitNum
expr_stmt|;
name|this
operator|.
name|llapUser
operator|=
name|llapUser
expr_stmt|;
name|this
operator|.
name|tokenBytes
operator|=
name|tokenBytes
expr_stmt|;
block|}
specifier|public
name|Schema
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|locs
init|=
operator|new
name|String
index|[
name|locations
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|locs
index|[
name|i
index|]
operator|=
name|locations
index|[
name|i
index|]
operator|.
name|getLocation
argument_list|()
expr_stmt|;
block|}
return|return
name|locs
return|;
block|}
specifier|public
name|int
name|getSplitNum
parameter_list|()
block|{
return|return
name|splitNum
return|;
block|}
specifier|public
name|byte
index|[]
name|getPlanBytes
parameter_list|()
block|{
return|return
name|planBytes
return|;
block|}
specifier|public
name|byte
index|[]
name|getFragmentBytes
parameter_list|()
block|{
return|return
name|fragmentBytes
return|;
block|}
specifier|public
name|byte
index|[]
name|getFragmentBytesSignature
parameter_list|()
block|{
return|return
name|fragmentBytesSignature
return|;
block|}
specifier|public
name|byte
index|[]
name|getTokenBytes
parameter_list|()
block|{
return|return
name|tokenBytes
return|;
block|}
specifier|public
name|void
name|setPlanBytes
parameter_list|(
name|byte
index|[]
name|planBytes
parameter_list|)
block|{
name|this
operator|.
name|planBytes
operator|=
name|planBytes
expr_stmt|;
block|}
specifier|public
name|void
name|setSchema
parameter_list|(
name|Schema
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|splitNum
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|planBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|planBytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|fragmentBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|fragmentBytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|fragmentBytesSignature
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|fragmentBytesSignature
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|fragmentBytesSignature
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|locations
index|[
name|i
index|]
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|schema
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|llapUser
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenBytes
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|tokenBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|tokenBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|splitNum
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|int
name|length
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|planBytes
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|planBytes
argument_list|)
expr_stmt|;
name|length
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|fragmentBytes
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|fragmentBytes
argument_list|)
expr_stmt|;
name|length
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|fragmentBytesSignature
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|fragmentBytesSignature
argument_list|)
expr_stmt|;
block|}
name|length
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|locations
operator|=
operator|new
name|SplitLocationInfo
index|[
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|locations
index|[
name|i
index|]
operator|=
operator|new
name|SplitLocationInfo
argument_list|(
name|in
operator|.
name|readUTF
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|schema
operator|=
operator|new
name|Schema
argument_list|()
expr_stmt|;
name|schema
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|llapUser
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|length
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|tokenBytes
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|tokenBytes
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SplitLocationInfo
index|[]
name|getLocationInfo
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|locations
return|;
block|}
specifier|public
name|String
name|getLlapUser
parameter_list|()
block|{
return|return
name|llapUser
return|;
block|}
block|}
end_class

end_unit

