begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|registry
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|registry
operator|.
name|ServiceInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryTypeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|AddressTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ServiceInstanceBase
implements|implements
name|ServiceInstance
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ServiceInstanceBase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|ServiceRecord
name|srv
decl_stmt|;
specifier|protected
specifier|final
name|String
name|host
decl_stmt|;
specifier|protected
specifier|final
name|int
name|rpcPort
decl_stmt|;
specifier|public
name|ServiceInstanceBase
parameter_list|(
name|ServiceRecord
name|srv
parameter_list|,
name|String
name|rpcName
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|srv
operator|=
name|srv
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Working with ServiceRecord: {}"
argument_list|,
name|srv
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Endpoint
name|rpc
init|=
name|srv
operator|.
name|getInternalEndpoint
argument_list|(
name|rpcName
argument_list|)
decl_stmt|;
name|this
operator|.
name|host
operator|=
name|RegistryTypeUtils
operator|.
name|getAddressField
argument_list|(
name|rpc
operator|.
name|addresses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|AddressTypes
operator|.
name|ADDRESS_HOSTNAME_FIELD
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcPort
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|RegistryTypeUtils
operator|.
name|getAddressField
argument_list|(
name|rpc
operator|.
name|addresses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|AddressTypes
operator|.
name|ADDRESS_PORT_FIELD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ServiceInstanceBase
name|other
init|=
operator|(
name|ServiceInstanceBase
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|getWorkerIdentity
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getWorkerIdentity
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getWorkerIdentity
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getWorkerIdentity
parameter_list|()
block|{
return|return
name|srv
operator|.
name|get
argument_list|(
name|ZkRegistryBase
operator|.
name|UNIQUE_IDENTIFIER
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRpcPort
parameter_list|()
block|{
return|return
name|rpcPort
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|srv
operator|.
name|attributes
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DynamicServiceInstance [id="
operator|+
name|getWorkerIdentity
argument_list|()
operator|+
literal|", host="
operator|+
name|host
operator|+
literal|":"
operator|+
name|rpcPort
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

