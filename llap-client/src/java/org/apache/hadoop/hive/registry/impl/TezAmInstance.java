begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|registry
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryTypeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|AddressTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
import|;
end_import

begin_class
specifier|public
class|class
name|TezAmInstance
extends|extends
name|ServiceInstanceBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TezAmInstance
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|pluginPort
decl_stmt|;
specifier|private
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|token
decl_stmt|;
name|TezAmInstance
parameter_list|(
name|ServiceRecord
name|srv
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|srv
argument_list|,
name|TezAmRegistryImpl
operator|.
name|IPC_TEZCLIENT
argument_list|)
expr_stmt|;
specifier|final
name|Endpoint
name|plugin
init|=
name|srv
operator|.
name|getInternalEndpoint
argument_list|(
name|TezAmRegistryImpl
operator|.
name|IPC_PLUGIN
argument_list|)
decl_stmt|;
if|if
condition|(
name|plugin
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|pluginPort
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|RegistryTypeUtils
operator|.
name|getAddressField
argument_list|(
name|plugin
operator|.
name|addresses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|AddressTypes
operator|.
name|ADDRESS_PORT_FIELD
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|pluginPort
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getPluginPort
parameter_list|()
block|{
return|return
name|pluginPort
return|;
block|}
specifier|public
name|String
name|getSessionId
parameter_list|()
block|{
return|return
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|TezAmRegistryImpl
operator|.
name|AM_SESSION_ID
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPluginTokenJobId
parameter_list|()
block|{
return|return
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|TezAmRegistryImpl
operator|.
name|AM_PLUGIN_JOBID
argument_list|)
return|;
block|}
specifier|public
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|getPluginToken
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|token
operator|!=
literal|null
condition|)
return|return
name|token
return|;
name|String
name|tokenString
init|=
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|TezAmRegistryImpl
operator|.
name|AM_PLUGIN_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenString
operator|==
literal|null
operator|||
name|tokenString
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|byte
index|[]
name|tokenBytes
init|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|tokenString
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|token
operator|.
name|readFields
argument_list|(
name|ByteStreams
operator|.
name|newDataInput
argument_list|(
name|tokenBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't read the plugin token from ["
operator|+
name|tokenString
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
return|return
name|token
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TezAmInstance ["
operator|+
name|getSessionId
argument_list|()
operator|+
literal|", host="
operator|+
name|getHost
argument_list|()
operator|+
literal|", rpcPort="
operator|+
name|getRpcPort
argument_list|()
operator|+
literal|", pluginPort="
operator|+
name|pluginPort
operator|+
literal|", token="
operator|+
name|token
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

