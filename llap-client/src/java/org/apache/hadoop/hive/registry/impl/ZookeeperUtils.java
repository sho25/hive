begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|registry
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|client
operator|.
name|ZooKeeperSaslClient
import|;
end_import

begin_class
specifier|public
class|class
name|ZookeeperUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZookeeperUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|setupZookeeperAuth
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|saslLoginContextName
parameter_list|,
name|String
name|zkPrincipal
parameter_list|,
name|String
name|zkKeytab
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If the login context name is not set, we are in the client and don't need auth.
if|if
condition|(
name|isKerberosEnabled
argument_list|(
name|conf
argument_list|)
operator|&&
name|saslLoginContextName
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"UGI security is enabled. Setting up ZK auth."
argument_list|)
expr_stmt|;
if|if
condition|(
name|zkPrincipal
operator|==
literal|null
operator|||
name|zkPrincipal
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Kerberos principal is empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|zkKeytab
operator|==
literal|null
operator|||
name|zkKeytab
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Kerberos keytab is empty"
argument_list|)
throw|;
block|}
comment|// Install the JAAS Configuration for the runtime
return|return
name|setZookeeperClientKerberosJaasConfig
argument_list|(
name|saslLoginContextName
argument_list|,
name|zkPrincipal
argument_list|,
name|zkKeytab
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"UGI security is not enabled, or no SASL context name. "
operator|+
literal|"Skipping setting up ZK auth."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Check if Kerberos authentication is enabled.    */
specifier|public
specifier|static
name|boolean
name|isKerberosEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
return|return
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|isFromKeytab
argument_list|()
operator|&&
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ZOOKEEPER_USE_KERBEROS
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Dynamically sets up the JAAS configuration that uses kerberos.    *    * @param principal    * @param keyTabFile    * @throws IOException    */
specifier|private
specifier|static
name|String
name|setZookeeperClientKerberosJaasConfig
parameter_list|(
name|String
name|saslLoginContextName
parameter_list|,
name|String
name|zkPrincipal
parameter_list|,
name|String
name|zkKeytab
parameter_list|)
throws|throws
name|IOException
block|{
comment|// ZooKeeper property name to pick the correct JAAS conf section
name|System
operator|.
name|setProperty
argument_list|(
name|ZooKeeperSaslClient
operator|.
name|LOGIN_CONTEXT_NAME_KEY
argument_list|,
name|saslLoginContextName
argument_list|)
expr_stmt|;
name|String
name|principal
init|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|zkPrincipal
argument_list|,
literal|"0.0.0.0"
argument_list|)
decl_stmt|;
name|JaasConfiguration
name|jaasConf
init|=
operator|new
name|JaasConfiguration
argument_list|(
name|saslLoginContextName
argument_list|,
name|principal
argument_list|,
name|zkKeytab
argument_list|)
decl_stmt|;
comment|// Install the Configuration in the runtime.
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
operator|.
name|setConfiguration
argument_list|(
name|jaasConf
argument_list|)
expr_stmt|;
return|return
name|principal
return|;
block|}
comment|/**    * A JAAS configuration for ZooKeeper clients intended to use for SASL    * Kerberos.    */
specifier|private
specifier|static
class|class
name|JaasConfiguration
extends|extends
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
block|{
comment|// Current installed Configuration
specifier|private
specifier|final
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
name|baseConfig
init|=
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|loginContextName
decl_stmt|;
specifier|private
specifier|final
name|String
name|principal
decl_stmt|;
specifier|private
specifier|final
name|String
name|keyTabFile
decl_stmt|;
specifier|public
name|JaasConfiguration
parameter_list|(
name|String
name|loginContextName
parameter_list|,
name|String
name|principal
parameter_list|,
name|String
name|keyTabFile
parameter_list|)
block|{
name|this
operator|.
name|loginContextName
operator|=
name|loginContextName
expr_stmt|;
name|this
operator|.
name|principal
operator|=
name|principal
expr_stmt|;
name|this
operator|.
name|keyTabFile
operator|=
name|keyTabFile
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|AppConfigurationEntry
index|[]
name|getAppConfigurationEntry
parameter_list|(
name|String
name|appName
parameter_list|)
block|{
if|if
condition|(
name|loginContextName
operator|.
name|equals
argument_list|(
name|appName
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|krbOptions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|krbOptions
operator|.
name|put
argument_list|(
literal|"doNotPrompt"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|krbOptions
operator|.
name|put
argument_list|(
literal|"storeKey"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|krbOptions
operator|.
name|put
argument_list|(
literal|"useKeyTab"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|krbOptions
operator|.
name|put
argument_list|(
literal|"principal"
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|krbOptions
operator|.
name|put
argument_list|(
literal|"keyTab"
argument_list|,
name|keyTabFile
argument_list|)
expr_stmt|;
name|krbOptions
operator|.
name|put
argument_list|(
literal|"refreshKrb5Config"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|AppConfigurationEntry
name|zooKeeperClientEntry
init|=
operator|new
name|AppConfigurationEntry
argument_list|(
name|KerberosUtil
operator|.
name|getKrb5LoginModuleName
argument_list|()
argument_list|,
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|REQUIRED
argument_list|,
name|krbOptions
argument_list|)
decl_stmt|;
return|return
operator|new
name|AppConfigurationEntry
index|[]
block|{
name|zooKeeperClientEntry
block|}
return|;
block|}
comment|// Try the base config
if|if
condition|(
name|baseConfig
operator|!=
literal|null
condition|)
block|{
return|return
name|baseConfig
operator|.
name|getAppConfigurationEntry
argument_list|(
name|appName
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

