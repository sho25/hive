begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Avro  *  * DO NOT EDIT DIRECTLY  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|message
operator|.
name|BinaryMessageEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|message
operator|.
name|BinaryMessageDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|message
operator|.
name|SchemaStore
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"all"
argument_list|)
annotation|@
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|AvroGenerated
specifier|public
class|class
name|Wikipedia
extends|extends
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificRecordBase
implements|implements
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificRecord
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|960374719287820723L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
name|SCHEMA$
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
operator|.
name|Parser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"{\"type\":\"record\",\"name\":\"Wikipedia\",\"namespace\":\"org.apache.hive.kafka\",\"fields\":[{\"name\":\"isrobot\",\"type\":\"boolean\"},{\"name\":\"channel\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"flags\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"isunpatrolled\",\"type\":\"boolean\"},{\"name\":\"page\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"diffurl\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"added\",\"type\":\"long\"},{\"name\":\"comment\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"commentlength\",\"type\":\"long\"},{\"name\":\"isnew\",\"type\":\"boolean\"},{\"name\":\"isminor\",\"type\":\"boolean\"},{\"name\":\"delta\",\"type\":\"long\"},{\"name\":\"isanonymous\",\"type\":\"boolean\"},{\"name\":\"user\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"deltabucket\",\"type\":\"double\"},{\"name\":\"deleted\",\"type\":\"long\"},{\"name\":\"namespace\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"version\":\"1\"}"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
name|getClassSchema
parameter_list|()
block|{
return|return
name|SCHEMA$
return|;
block|}
specifier|private
specifier|static
name|SpecificData
name|MODEL$
init|=
operator|new
name|SpecificData
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BinaryMessageEncoder
argument_list|<
name|Wikipedia
argument_list|>
name|ENCODER
init|=
operator|new
name|BinaryMessageEncoder
argument_list|<
name|Wikipedia
argument_list|>
argument_list|(
name|MODEL$
argument_list|,
name|SCHEMA$
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BinaryMessageDecoder
argument_list|<
name|Wikipedia
argument_list|>
name|DECODER
init|=
operator|new
name|BinaryMessageDecoder
argument_list|<
name|Wikipedia
argument_list|>
argument_list|(
name|MODEL$
argument_list|,
name|SCHEMA$
argument_list|)
decl_stmt|;
comment|/**    * Return the BinaryMessageDecoder instance used by this class.    */
specifier|public
specifier|static
name|BinaryMessageDecoder
argument_list|<
name|Wikipedia
argument_list|>
name|getDecoder
parameter_list|()
block|{
return|return
name|DECODER
return|;
block|}
comment|/**    * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.    * @param resolver a {@link SchemaStore} used to find schemas by fingerprint    */
specifier|public
specifier|static
name|BinaryMessageDecoder
argument_list|<
name|Wikipedia
argument_list|>
name|createDecoder
parameter_list|(
name|SchemaStore
name|resolver
parameter_list|)
block|{
return|return
operator|new
name|BinaryMessageDecoder
argument_list|<
name|Wikipedia
argument_list|>
argument_list|(
name|MODEL$
argument_list|,
name|SCHEMA$
argument_list|,
name|resolver
argument_list|)
return|;
block|}
comment|/** Serializes this Wikipedia to a ByteBuffer. */
specifier|public
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|toByteBuffer
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|ENCODER
operator|.
name|encode
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/** Deserializes a Wikipedia from a ByteBuffer. */
specifier|public
specifier|static
name|Wikipedia
name|fromByteBuffer
parameter_list|(
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
name|b
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|DECODER
operator|.
name|decode
argument_list|(
name|b
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|boolean
name|isrobot
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|channel
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|timestamp
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|flags
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|boolean
name|isunpatrolled
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|page
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|diffurl
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|long
name|added
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|comment
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|long
name|commentlength
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|boolean
name|isnew
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|boolean
name|isminor
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|long
name|delta
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|boolean
name|isanonymous
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|user
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|double
name|deltabucket
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|long
name|deleted
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|namespace
decl_stmt|;
comment|/**    * Default constructor.  Note that this does not initialize fields    * to their default values from the schema.  If that is desired then    * one should use<code>newBuilder()</code>.    */
specifier|public
name|Wikipedia
parameter_list|()
block|{}
comment|/**    * All-args constructor.    * @param isrobot The new value for isrobot    * @param channel The new value for channel    * @param timestamp The new value for timestamp    * @param flags The new value for flags    * @param isunpatrolled The new value for isunpatrolled    * @param page The new value for page    * @param diffurl The new value for diffurl    * @param added The new value for added    * @param comment The new value for comment    * @param commentlength The new value for commentlength    * @param isnew The new value for isnew    * @param isminor The new value for isminor    * @param delta The new value for delta    * @param isanonymous The new value for isanonymous    * @param user The new value for user    * @param deltabucket The new value for deltabucket    * @param deleted The new value for deleted    * @param namespace The new value for namespace    */
specifier|public
name|Wikipedia
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Boolean
name|isrobot
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|channel
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|timestamp
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|flags
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Boolean
name|isunpatrolled
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|page
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|diffurl
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Long
name|added
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|comment
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Long
name|commentlength
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Boolean
name|isnew
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Boolean
name|isminor
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Long
name|delta
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Boolean
name|isanonymous
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|user
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Double
name|deltabucket
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Long
name|deleted
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|namespace
parameter_list|)
block|{
name|this
operator|.
name|isrobot
operator|=
name|isrobot
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
name|this
operator|.
name|isunpatrolled
operator|=
name|isunpatrolled
expr_stmt|;
name|this
operator|.
name|page
operator|=
name|page
expr_stmt|;
name|this
operator|.
name|diffurl
operator|=
name|diffurl
expr_stmt|;
name|this
operator|.
name|added
operator|=
name|added
expr_stmt|;
name|this
operator|.
name|comment
operator|=
name|comment
expr_stmt|;
name|this
operator|.
name|commentlength
operator|=
name|commentlength
expr_stmt|;
name|this
operator|.
name|isnew
operator|=
name|isnew
expr_stmt|;
name|this
operator|.
name|isminor
operator|=
name|isminor
expr_stmt|;
name|this
operator|.
name|delta
operator|=
name|delta
expr_stmt|;
name|this
operator|.
name|isanonymous
operator|=
name|isanonymous
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|deltabucket
operator|=
name|deltabucket
expr_stmt|;
name|this
operator|.
name|deleted
operator|=
name|deleted
expr_stmt|;
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
name|getSchema
parameter_list|()
block|{
return|return
name|SCHEMA$
return|;
block|}
comment|// Used by DatumWriter.  Applications should not call.
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|get
parameter_list|(
name|int
name|field$
parameter_list|)
block|{
switch|switch
condition|(
name|field$
condition|)
block|{
case|case
literal|0
case|:
return|return
name|isrobot
return|;
case|case
literal|1
case|:
return|return
name|channel
return|;
case|case
literal|2
case|:
return|return
name|timestamp
return|;
case|case
literal|3
case|:
return|return
name|flags
return|;
case|case
literal|4
case|:
return|return
name|isunpatrolled
return|;
case|case
literal|5
case|:
return|return
name|page
return|;
case|case
literal|6
case|:
return|return
name|diffurl
return|;
case|case
literal|7
case|:
return|return
name|added
return|;
case|case
literal|8
case|:
return|return
name|comment
return|;
case|case
literal|9
case|:
return|return
name|commentlength
return|;
case|case
literal|10
case|:
return|return
name|isnew
return|;
case|case
literal|11
case|:
return|return
name|isminor
return|;
case|case
literal|12
case|:
return|return
name|delta
return|;
case|case
literal|13
case|:
return|return
name|isanonymous
return|;
case|case
literal|14
case|:
return|return
name|user
return|;
case|case
literal|15
case|:
return|return
name|deltabucket
return|;
case|case
literal|16
case|:
return|return
name|deleted
return|;
case|case
literal|17
case|:
return|return
name|namespace
return|;
default|default:
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|AvroRuntimeException
argument_list|(
literal|"Bad index"
argument_list|)
throw|;
block|}
block|}
comment|// Used by DatumReader.  Applications should not call.
annotation|@
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|put
parameter_list|(
name|int
name|field$
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Object
name|value$
parameter_list|)
block|{
switch|switch
condition|(
name|field$
condition|)
block|{
case|case
literal|0
case|:
name|isrobot
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|channel
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|value$
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|timestamp
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|value$
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|flags
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|value$
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|isunpatrolled
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|page
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|value$
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|diffurl
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|value$
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|added
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|Long
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|comment
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|value$
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
literal|9
case|:
name|commentlength
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|Long
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|10
case|:
name|isnew
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|11
case|:
name|isminor
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|12
case|:
name|delta
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|Long
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|13
case|:
name|isanonymous
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|14
case|:
name|user
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|value$
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
literal|15
case|:
name|deltabucket
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|Double
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|deleted
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|Long
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|17
case|:
name|namespace
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|value$
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|AvroRuntimeException
argument_list|(
literal|"Bad index"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Gets the value of the 'isrobot' field.    * @return The value of the 'isrobot' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Boolean
name|getIsrobot
parameter_list|()
block|{
return|return
name|isrobot
return|;
block|}
comment|/**    * Sets the value of the 'isrobot' field.    * @param value the value to set.    */
specifier|public
name|void
name|setIsrobot
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|isrobot
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'channel' field.    * @return The value of the 'channel' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getChannel
parameter_list|()
block|{
return|return
name|channel
return|;
block|}
comment|/**    * Sets the value of the 'channel' field.    * @param value the value to set.    */
specifier|public
name|void
name|setChannel
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|channel
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'timestamp' field.    * @return The value of the 'timestamp' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
comment|/**    * Sets the value of the 'timestamp' field.    * @param value the value to set.    */
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'flags' field.    * @return The value of the 'flags' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getFlags
parameter_list|()
block|{
return|return
name|flags
return|;
block|}
comment|/**    * Sets the value of the 'flags' field.    * @param value the value to set.    */
specifier|public
name|void
name|setFlags
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|flags
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'isunpatrolled' field.    * @return The value of the 'isunpatrolled' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Boolean
name|getIsunpatrolled
parameter_list|()
block|{
return|return
name|isunpatrolled
return|;
block|}
comment|/**    * Sets the value of the 'isunpatrolled' field.    * @param value the value to set.    */
specifier|public
name|void
name|setIsunpatrolled
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|isunpatrolled
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'page' field.    * @return The value of the 'page' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getPage
parameter_list|()
block|{
return|return
name|page
return|;
block|}
comment|/**    * Sets the value of the 'page' field.    * @param value the value to set.    */
specifier|public
name|void
name|setPage
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|page
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'diffurl' field.    * @return The value of the 'diffurl' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getDiffurl
parameter_list|()
block|{
return|return
name|diffurl
return|;
block|}
comment|/**    * Sets the value of the 'diffurl' field.    * @param value the value to set.    */
specifier|public
name|void
name|setDiffurl
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|diffurl
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'added' field.    * @return The value of the 'added' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Long
name|getAdded
parameter_list|()
block|{
return|return
name|added
return|;
block|}
comment|/**    * Sets the value of the 'added' field.    * @param value the value to set.    */
specifier|public
name|void
name|setAdded
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|value
parameter_list|)
block|{
name|this
operator|.
name|added
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'comment' field.    * @return The value of the 'comment' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getComment
parameter_list|()
block|{
return|return
name|comment
return|;
block|}
comment|/**    * Sets the value of the 'comment' field.    * @param value the value to set.    */
specifier|public
name|void
name|setComment
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|comment
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'commentlength' field.    * @return The value of the 'commentlength' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Long
name|getCommentlength
parameter_list|()
block|{
return|return
name|commentlength
return|;
block|}
comment|/**    * Sets the value of the 'commentlength' field.    * @param value the value to set.    */
specifier|public
name|void
name|setCommentlength
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|value
parameter_list|)
block|{
name|this
operator|.
name|commentlength
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'isnew' field.    * @return The value of the 'isnew' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Boolean
name|getIsnew
parameter_list|()
block|{
return|return
name|isnew
return|;
block|}
comment|/**    * Sets the value of the 'isnew' field.    * @param value the value to set.    */
specifier|public
name|void
name|setIsnew
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|isnew
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'isminor' field.    * @return The value of the 'isminor' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Boolean
name|getIsminor
parameter_list|()
block|{
return|return
name|isminor
return|;
block|}
comment|/**    * Sets the value of the 'isminor' field.    * @param value the value to set.    */
specifier|public
name|void
name|setIsminor
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|isminor
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'delta' field.    * @return The value of the 'delta' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Long
name|getDelta
parameter_list|()
block|{
return|return
name|delta
return|;
block|}
comment|/**    * Sets the value of the 'delta' field.    * @param value the value to set.    */
specifier|public
name|void
name|setDelta
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|value
parameter_list|)
block|{
name|this
operator|.
name|delta
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'isanonymous' field.    * @return The value of the 'isanonymous' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Boolean
name|getIsanonymous
parameter_list|()
block|{
return|return
name|isanonymous
return|;
block|}
comment|/**    * Sets the value of the 'isanonymous' field.    * @param value the value to set.    */
specifier|public
name|void
name|setIsanonymous
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|isanonymous
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'user' field.    * @return The value of the 'user' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
comment|/**    * Sets the value of the 'user' field.    * @param value the value to set.    */
specifier|public
name|void
name|setUser
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'deltabucket' field.    * @return The value of the 'deltabucket' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Double
name|getDeltabucket
parameter_list|()
block|{
return|return
name|deltabucket
return|;
block|}
comment|/**    * Sets the value of the 'deltabucket' field.    * @param value the value to set.    */
specifier|public
name|void
name|setDeltabucket
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Double
name|value
parameter_list|)
block|{
name|this
operator|.
name|deltabucket
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'deleted' field.    * @return The value of the 'deleted' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Long
name|getDeleted
parameter_list|()
block|{
return|return
name|deleted
return|;
block|}
comment|/**    * Sets the value of the 'deleted' field.    * @param value the value to set.    */
specifier|public
name|void
name|setDeleted
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|value
parameter_list|)
block|{
name|this
operator|.
name|deleted
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'namespace' field.    * @return The value of the 'namespace' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getNamespace
parameter_list|()
block|{
return|return
name|namespace
return|;
block|}
comment|/**    * Sets the value of the 'namespace' field.    * @param value the value to set.    */
specifier|public
name|void
name|setNamespace
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|namespace
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Creates a new Wikipedia RecordBuilder.    * @return A new Wikipedia RecordBuilder    */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
argument_list|()
return|;
block|}
comment|/**    * Creates a new Wikipedia RecordBuilder by copying an existing Builder.    * @param other The existing builder to copy.    * @return A new Wikipedia RecordBuilder    */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|newBuilder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|other
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
argument_list|(
name|other
argument_list|)
return|;
block|}
comment|/**    * Creates a new Wikipedia RecordBuilder by copying an existing Wikipedia instance.    * @param other The existing instance to copy.    * @return A new Wikipedia RecordBuilder    */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|newBuilder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
name|other
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
argument_list|(
name|other
argument_list|)
return|;
block|}
comment|/**    * RecordBuilder for Wikipedia instances.    */
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificRecordBuilderBase
argument_list|<
name|Wikipedia
argument_list|>
implements|implements
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|data
operator|.
name|RecordBuilder
argument_list|<
name|Wikipedia
argument_list|>
block|{
specifier|private
name|boolean
name|isrobot
decl_stmt|;
specifier|private
name|java
operator|.
name|lang
operator|.
name|String
name|channel
decl_stmt|;
specifier|private
name|java
operator|.
name|lang
operator|.
name|String
name|timestamp
decl_stmt|;
specifier|private
name|java
operator|.
name|lang
operator|.
name|String
name|flags
decl_stmt|;
specifier|private
name|boolean
name|isunpatrolled
decl_stmt|;
specifier|private
name|java
operator|.
name|lang
operator|.
name|String
name|page
decl_stmt|;
specifier|private
name|java
operator|.
name|lang
operator|.
name|String
name|diffurl
decl_stmt|;
specifier|private
name|long
name|added
decl_stmt|;
specifier|private
name|java
operator|.
name|lang
operator|.
name|String
name|comment
decl_stmt|;
specifier|private
name|long
name|commentlength
decl_stmt|;
specifier|private
name|boolean
name|isnew
decl_stmt|;
specifier|private
name|boolean
name|isminor
decl_stmt|;
specifier|private
name|long
name|delta
decl_stmt|;
specifier|private
name|boolean
name|isanonymous
decl_stmt|;
specifier|private
name|java
operator|.
name|lang
operator|.
name|String
name|user
decl_stmt|;
specifier|private
name|double
name|deltabucket
decl_stmt|;
specifier|private
name|long
name|deleted
decl_stmt|;
specifier|private
name|java
operator|.
name|lang
operator|.
name|String
name|namespace
decl_stmt|;
comment|/** Creates a new Builder */
specifier|private
name|Builder
parameter_list|()
block|{
name|super
argument_list|(
name|SCHEMA$
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a Builder by copying an existing Builder.      * @param other The existing Builder to copy.      */
specifier|private
name|Builder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|other
argument_list|)
expr_stmt|;
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|other
operator|.
name|isrobot
argument_list|)
condition|)
block|{
name|this
operator|.
name|isrobot
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|0
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|isrobot
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|other
operator|.
name|channel
argument_list|)
condition|)
block|{
name|this
operator|.
name|channel
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|1
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|channel
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|2
index|]
argument_list|,
name|other
operator|.
name|timestamp
argument_list|)
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|2
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|3
index|]
argument_list|,
name|other
operator|.
name|flags
argument_list|)
condition|)
block|{
name|this
operator|.
name|flags
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|3
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|flags
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|4
index|]
argument_list|,
name|other
operator|.
name|isunpatrolled
argument_list|)
condition|)
block|{
name|this
operator|.
name|isunpatrolled
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|4
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|isunpatrolled
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|4
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|5
index|]
argument_list|,
name|other
operator|.
name|page
argument_list|)
condition|)
block|{
name|this
operator|.
name|page
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|5
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|page
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|5
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|6
index|]
argument_list|,
name|other
operator|.
name|diffurl
argument_list|)
condition|)
block|{
name|this
operator|.
name|diffurl
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|6
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|diffurl
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|6
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|7
index|]
argument_list|,
name|other
operator|.
name|added
argument_list|)
condition|)
block|{
name|this
operator|.
name|added
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|7
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|added
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|7
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|8
index|]
argument_list|,
name|other
operator|.
name|comment
argument_list|)
condition|)
block|{
name|this
operator|.
name|comment
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|8
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|comment
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|8
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|9
index|]
argument_list|,
name|other
operator|.
name|commentlength
argument_list|)
condition|)
block|{
name|this
operator|.
name|commentlength
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|9
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|commentlength
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|9
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|10
index|]
argument_list|,
name|other
operator|.
name|isnew
argument_list|)
condition|)
block|{
name|this
operator|.
name|isnew
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|10
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|isnew
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|10
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|11
index|]
argument_list|,
name|other
operator|.
name|isminor
argument_list|)
condition|)
block|{
name|this
operator|.
name|isminor
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|11
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|isminor
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|11
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|12
index|]
argument_list|,
name|other
operator|.
name|delta
argument_list|)
condition|)
block|{
name|this
operator|.
name|delta
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|12
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|delta
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|12
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|13
index|]
argument_list|,
name|other
operator|.
name|isanonymous
argument_list|)
condition|)
block|{
name|this
operator|.
name|isanonymous
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|13
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|isanonymous
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|13
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|14
index|]
argument_list|,
name|other
operator|.
name|user
argument_list|)
condition|)
block|{
name|this
operator|.
name|user
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|14
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|user
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|14
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|15
index|]
argument_list|,
name|other
operator|.
name|deltabucket
argument_list|)
condition|)
block|{
name|this
operator|.
name|deltabucket
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|15
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|deltabucket
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|15
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|16
index|]
argument_list|,
name|other
operator|.
name|deleted
argument_list|)
condition|)
block|{
name|this
operator|.
name|deleted
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|16
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|deleted
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|16
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|17
index|]
argument_list|,
name|other
operator|.
name|namespace
argument_list|)
condition|)
block|{
name|this
operator|.
name|namespace
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|17
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|namespace
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|17
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**      * Creates a Builder by copying an existing Wikipedia instance      * @param other The existing instance to copy.      */
specifier|private
name|Builder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|SCHEMA$
argument_list|)
expr_stmt|;
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|other
operator|.
name|isrobot
argument_list|)
condition|)
block|{
name|this
operator|.
name|isrobot
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|0
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|isrobot
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|other
operator|.
name|channel
argument_list|)
condition|)
block|{
name|this
operator|.
name|channel
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|1
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|channel
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|2
index|]
argument_list|,
name|other
operator|.
name|timestamp
argument_list|)
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|2
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|3
index|]
argument_list|,
name|other
operator|.
name|flags
argument_list|)
condition|)
block|{
name|this
operator|.
name|flags
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|3
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|flags
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|4
index|]
argument_list|,
name|other
operator|.
name|isunpatrolled
argument_list|)
condition|)
block|{
name|this
operator|.
name|isunpatrolled
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|4
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|isunpatrolled
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|4
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|5
index|]
argument_list|,
name|other
operator|.
name|page
argument_list|)
condition|)
block|{
name|this
operator|.
name|page
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|5
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|page
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|5
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|6
index|]
argument_list|,
name|other
operator|.
name|diffurl
argument_list|)
condition|)
block|{
name|this
operator|.
name|diffurl
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|6
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|diffurl
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|6
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|7
index|]
argument_list|,
name|other
operator|.
name|added
argument_list|)
condition|)
block|{
name|this
operator|.
name|added
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|7
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|added
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|7
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|8
index|]
argument_list|,
name|other
operator|.
name|comment
argument_list|)
condition|)
block|{
name|this
operator|.
name|comment
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|8
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|comment
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|8
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|9
index|]
argument_list|,
name|other
operator|.
name|commentlength
argument_list|)
condition|)
block|{
name|this
operator|.
name|commentlength
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|9
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|commentlength
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|9
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|10
index|]
argument_list|,
name|other
operator|.
name|isnew
argument_list|)
condition|)
block|{
name|this
operator|.
name|isnew
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|10
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|isnew
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|10
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|11
index|]
argument_list|,
name|other
operator|.
name|isminor
argument_list|)
condition|)
block|{
name|this
operator|.
name|isminor
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|11
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|isminor
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|11
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|12
index|]
argument_list|,
name|other
operator|.
name|delta
argument_list|)
condition|)
block|{
name|this
operator|.
name|delta
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|12
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|delta
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|12
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|13
index|]
argument_list|,
name|other
operator|.
name|isanonymous
argument_list|)
condition|)
block|{
name|this
operator|.
name|isanonymous
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|13
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|isanonymous
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|13
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|14
index|]
argument_list|,
name|other
operator|.
name|user
argument_list|)
condition|)
block|{
name|this
operator|.
name|user
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|14
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|user
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|14
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|15
index|]
argument_list|,
name|other
operator|.
name|deltabucket
argument_list|)
condition|)
block|{
name|this
operator|.
name|deltabucket
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|15
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|deltabucket
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|15
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|16
index|]
argument_list|,
name|other
operator|.
name|deleted
argument_list|)
condition|)
block|{
name|this
operator|.
name|deleted
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|16
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|deleted
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|16
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|17
index|]
argument_list|,
name|other
operator|.
name|namespace
argument_list|)
condition|)
block|{
name|this
operator|.
name|namespace
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|17
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|namespace
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|17
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**      * Gets the value of the 'isrobot' field.      * @return The value.      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Boolean
name|getIsrobot
parameter_list|()
block|{
return|return
name|isrobot
return|;
block|}
comment|/**      * Sets the value of the 'isrobot' field.      * @param value The value of 'isrobot'.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|setIsrobot
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|isrobot
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks whether the 'isrobot' field has been set.      * @return True if the 'isrobot' field has been set, false otherwise.      */
specifier|public
name|boolean
name|hasIsrobot
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|0
index|]
return|;
block|}
comment|/**      * Clears the value of the 'isrobot' field.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|clearIsrobot
parameter_list|()
block|{
name|fieldSetFlags
argument_list|()
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the value of the 'channel' field.      * @return The value.      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getChannel
parameter_list|()
block|{
return|return
name|channel
return|;
block|}
comment|/**      * Sets the value of the 'channel' field.      * @param value The value of 'channel'.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|setChannel
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks whether the 'channel' field has been set.      * @return True if the 'channel' field has been set, false otherwise.      */
specifier|public
name|boolean
name|hasChannel
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|1
index|]
return|;
block|}
comment|/**      * Clears the value of the 'channel' field.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|clearChannel
parameter_list|()
block|{
name|channel
operator|=
literal|null
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the value of the 'timestamp' field.      * @return The value.      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
comment|/**      * Sets the value of the 'timestamp' field.      * @param value The value of 'timestamp'.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|setTimestamp
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|2
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks whether the 'timestamp' field has been set.      * @return True if the 'timestamp' field has been set, false otherwise.      */
specifier|public
name|boolean
name|hasTimestamp
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|2
index|]
return|;
block|}
comment|/**      * Clears the value of the 'timestamp' field.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|clearTimestamp
parameter_list|()
block|{
name|timestamp
operator|=
literal|null
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|2
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the value of the 'flags' field.      * @return The value.      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getFlags
parameter_list|()
block|{
return|return
name|flags
return|;
block|}
comment|/**      * Sets the value of the 'flags' field.      * @param value The value of 'flags'.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|setFlags
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|3
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|flags
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks whether the 'flags' field has been set.      * @return True if the 'flags' field has been set, false otherwise.      */
specifier|public
name|boolean
name|hasFlags
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|3
index|]
return|;
block|}
comment|/**      * Clears the value of the 'flags' field.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|clearFlags
parameter_list|()
block|{
name|flags
operator|=
literal|null
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|3
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the value of the 'isunpatrolled' field.      * @return The value.      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Boolean
name|getIsunpatrolled
parameter_list|()
block|{
return|return
name|isunpatrolled
return|;
block|}
comment|/**      * Sets the value of the 'isunpatrolled' field.      * @param value The value of 'isunpatrolled'.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|setIsunpatrolled
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|4
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|isunpatrolled
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|4
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks whether the 'isunpatrolled' field has been set.      * @return True if the 'isunpatrolled' field has been set, false otherwise.      */
specifier|public
name|boolean
name|hasIsunpatrolled
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|4
index|]
return|;
block|}
comment|/**      * Clears the value of the 'isunpatrolled' field.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|clearIsunpatrolled
parameter_list|()
block|{
name|fieldSetFlags
argument_list|()
index|[
literal|4
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the value of the 'page' field.      * @return The value.      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getPage
parameter_list|()
block|{
return|return
name|page
return|;
block|}
comment|/**      * Sets the value of the 'page' field.      * @param value The value of 'page'.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|setPage
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|5
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|page
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|5
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks whether the 'page' field has been set.      * @return True if the 'page' field has been set, false otherwise.      */
specifier|public
name|boolean
name|hasPage
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|5
index|]
return|;
block|}
comment|/**      * Clears the value of the 'page' field.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|clearPage
parameter_list|()
block|{
name|page
operator|=
literal|null
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|5
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the value of the 'diffurl' field.      * @return The value.      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getDiffurl
parameter_list|()
block|{
return|return
name|diffurl
return|;
block|}
comment|/**      * Sets the value of the 'diffurl' field.      * @param value The value of 'diffurl'.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|setDiffurl
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|6
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|diffurl
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|6
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks whether the 'diffurl' field has been set.      * @return True if the 'diffurl' field has been set, false otherwise.      */
specifier|public
name|boolean
name|hasDiffurl
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|6
index|]
return|;
block|}
comment|/**      * Clears the value of the 'diffurl' field.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|clearDiffurl
parameter_list|()
block|{
name|diffurl
operator|=
literal|null
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|6
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the value of the 'added' field.      * @return The value.      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Long
name|getAdded
parameter_list|()
block|{
return|return
name|added
return|;
block|}
comment|/**      * Sets the value of the 'added' field.      * @param value The value of 'added'.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|setAdded
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|7
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|added
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|7
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks whether the 'added' field has been set.      * @return True if the 'added' field has been set, false otherwise.      */
specifier|public
name|boolean
name|hasAdded
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|7
index|]
return|;
block|}
comment|/**      * Clears the value of the 'added' field.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|clearAdded
parameter_list|()
block|{
name|fieldSetFlags
argument_list|()
index|[
literal|7
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the value of the 'comment' field.      * @return The value.      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getComment
parameter_list|()
block|{
return|return
name|comment
return|;
block|}
comment|/**      * Sets the value of the 'comment' field.      * @param value The value of 'comment'.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|setComment
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|8
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|comment
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|8
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks whether the 'comment' field has been set.      * @return True if the 'comment' field has been set, false otherwise.      */
specifier|public
name|boolean
name|hasComment
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|8
index|]
return|;
block|}
comment|/**      * Clears the value of the 'comment' field.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|clearComment
parameter_list|()
block|{
name|comment
operator|=
literal|null
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|8
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the value of the 'commentlength' field.      * @return The value.      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Long
name|getCommentlength
parameter_list|()
block|{
return|return
name|commentlength
return|;
block|}
comment|/**      * Sets the value of the 'commentlength' field.      * @param value The value of 'commentlength'.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|setCommentlength
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|9
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|commentlength
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|9
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks whether the 'commentlength' field has been set.      * @return True if the 'commentlength' field has been set, false otherwise.      */
specifier|public
name|boolean
name|hasCommentlength
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|9
index|]
return|;
block|}
comment|/**      * Clears the value of the 'commentlength' field.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|clearCommentlength
parameter_list|()
block|{
name|fieldSetFlags
argument_list|()
index|[
literal|9
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the value of the 'isnew' field.      * @return The value.      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Boolean
name|getIsnew
parameter_list|()
block|{
return|return
name|isnew
return|;
block|}
comment|/**      * Sets the value of the 'isnew' field.      * @param value The value of 'isnew'.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|setIsnew
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|10
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|isnew
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|10
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks whether the 'isnew' field has been set.      * @return True if the 'isnew' field has been set, false otherwise.      */
specifier|public
name|boolean
name|hasIsnew
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|10
index|]
return|;
block|}
comment|/**      * Clears the value of the 'isnew' field.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|clearIsnew
parameter_list|()
block|{
name|fieldSetFlags
argument_list|()
index|[
literal|10
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the value of the 'isminor' field.      * @return The value.      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Boolean
name|getIsminor
parameter_list|()
block|{
return|return
name|isminor
return|;
block|}
comment|/**      * Sets the value of the 'isminor' field.      * @param value The value of 'isminor'.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|setIsminor
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|11
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|isminor
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|11
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks whether the 'isminor' field has been set.      * @return True if the 'isminor' field has been set, false otherwise.      */
specifier|public
name|boolean
name|hasIsminor
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|11
index|]
return|;
block|}
comment|/**      * Clears the value of the 'isminor' field.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|clearIsminor
parameter_list|()
block|{
name|fieldSetFlags
argument_list|()
index|[
literal|11
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the value of the 'delta' field.      * @return The value.      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Long
name|getDelta
parameter_list|()
block|{
return|return
name|delta
return|;
block|}
comment|/**      * Sets the value of the 'delta' field.      * @param value The value of 'delta'.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|setDelta
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|12
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|delta
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|12
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks whether the 'delta' field has been set.      * @return True if the 'delta' field has been set, false otherwise.      */
specifier|public
name|boolean
name|hasDelta
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|12
index|]
return|;
block|}
comment|/**      * Clears the value of the 'delta' field.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|clearDelta
parameter_list|()
block|{
name|fieldSetFlags
argument_list|()
index|[
literal|12
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the value of the 'isanonymous' field.      * @return The value.      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Boolean
name|getIsanonymous
parameter_list|()
block|{
return|return
name|isanonymous
return|;
block|}
comment|/**      * Sets the value of the 'isanonymous' field.      * @param value The value of 'isanonymous'.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|setIsanonymous
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|13
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|isanonymous
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|13
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks whether the 'isanonymous' field has been set.      * @return True if the 'isanonymous' field has been set, false otherwise.      */
specifier|public
name|boolean
name|hasIsanonymous
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|13
index|]
return|;
block|}
comment|/**      * Clears the value of the 'isanonymous' field.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|clearIsanonymous
parameter_list|()
block|{
name|fieldSetFlags
argument_list|()
index|[
literal|13
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the value of the 'user' field.      * @return The value.      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
comment|/**      * Sets the value of the 'user' field.      * @param value The value of 'user'.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|setUser
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|14
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|14
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks whether the 'user' field has been set.      * @return True if the 'user' field has been set, false otherwise.      */
specifier|public
name|boolean
name|hasUser
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|14
index|]
return|;
block|}
comment|/**      * Clears the value of the 'user' field.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|clearUser
parameter_list|()
block|{
name|user
operator|=
literal|null
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|14
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the value of the 'deltabucket' field.      * @return The value.      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Double
name|getDeltabucket
parameter_list|()
block|{
return|return
name|deltabucket
return|;
block|}
comment|/**      * Sets the value of the 'deltabucket' field.      * @param value The value of 'deltabucket'.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|setDeltabucket
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|15
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|deltabucket
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|15
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks whether the 'deltabucket' field has been set.      * @return True if the 'deltabucket' field has been set, false otherwise.      */
specifier|public
name|boolean
name|hasDeltabucket
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|15
index|]
return|;
block|}
comment|/**      * Clears the value of the 'deltabucket' field.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|clearDeltabucket
parameter_list|()
block|{
name|fieldSetFlags
argument_list|()
index|[
literal|15
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the value of the 'deleted' field.      * @return The value.      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Long
name|getDeleted
parameter_list|()
block|{
return|return
name|deleted
return|;
block|}
comment|/**      * Sets the value of the 'deleted' field.      * @param value The value of 'deleted'.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|setDeleted
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|16
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|deleted
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|16
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks whether the 'deleted' field has been set.      * @return True if the 'deleted' field has been set, false otherwise.      */
specifier|public
name|boolean
name|hasDeleted
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|16
index|]
return|;
block|}
comment|/**      * Clears the value of the 'deleted' field.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|clearDeleted
parameter_list|()
block|{
name|fieldSetFlags
argument_list|()
index|[
literal|16
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the value of the 'namespace' field.      * @return The value.      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getNamespace
parameter_list|()
block|{
return|return
name|namespace
return|;
block|}
comment|/**      * Sets the value of the 'namespace' field.      * @param value The value of 'namespace'.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|setNamespace
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|17
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|namespace
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|17
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Checks whether the 'namespace' field has been set.      * @return True if the 'namespace' field has been set, false otherwise.      */
specifier|public
name|boolean
name|hasNamespace
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|17
index|]
return|;
block|}
comment|/**      * Clears the value of the 'namespace' field.      * @return This builder.      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|kafka
operator|.
name|Wikipedia
operator|.
name|Builder
name|clearNamespace
parameter_list|()
block|{
name|namespace
operator|=
literal|null
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|17
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Wikipedia
name|build
parameter_list|()
block|{
try|try
block|{
name|Wikipedia
name|record
init|=
operator|new
name|Wikipedia
argument_list|()
decl_stmt|;
name|record
operator|.
name|isrobot
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|0
index|]
condition|?
name|this
operator|.
name|isrobot
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|channel
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|1
index|]
condition|?
name|this
operator|.
name|channel
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|timestamp
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|2
index|]
condition|?
name|this
operator|.
name|timestamp
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|flags
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|3
index|]
condition|?
name|this
operator|.
name|flags
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|isunpatrolled
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|4
index|]
condition|?
name|this
operator|.
name|isunpatrolled
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|page
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|5
index|]
condition|?
name|this
operator|.
name|page
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|diffurl
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|6
index|]
condition|?
name|this
operator|.
name|diffurl
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|added
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|7
index|]
condition|?
name|this
operator|.
name|added
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|Long
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|comment
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|8
index|]
condition|?
name|this
operator|.
name|comment
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|commentlength
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|9
index|]
condition|?
name|this
operator|.
name|commentlength
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|Long
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|isnew
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|10
index|]
condition|?
name|this
operator|.
name|isnew
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|isminor
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|11
index|]
condition|?
name|this
operator|.
name|isminor
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|delta
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|12
index|]
condition|?
name|this
operator|.
name|delta
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|Long
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|12
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|isanonymous
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|13
index|]
condition|?
name|this
operator|.
name|isanonymous
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|13
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|user
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|14
index|]
condition|?
name|this
operator|.
name|user
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|14
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|deltabucket
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|15
index|]
condition|?
name|this
operator|.
name|deltabucket
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|Double
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|15
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|deleted
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|16
index|]
condition|?
name|this
operator|.
name|deleted
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|Long
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|16
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|namespace
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|17
index|]
condition|?
name|this
operator|.
name|namespace
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|17
index|]
argument_list|)
expr_stmt|;
return|return
name|record
return|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|AvroRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|DatumWriter
argument_list|<
name|Wikipedia
argument_list|>
name|WRITER$
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|DatumWriter
argument_list|<
name|Wikipedia
argument_list|>
operator|)
name|MODEL$
operator|.
name|createDatumWriter
argument_list|(
name|SCHEMA$
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|writeExternal
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|WRITER$
operator|.
name|write
argument_list|(
name|this
argument_list|,
name|SpecificData
operator|.
name|getEncoder
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|DatumReader
argument_list|<
name|Wikipedia
argument_list|>
name|READER$
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|DatumReader
argument_list|<
name|Wikipedia
argument_list|>
operator|)
name|MODEL$
operator|.
name|createDatumReader
argument_list|(
name|SCHEMA$
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|readExternal
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|READER$
operator|.
name|read
argument_list|(
name|this
argument_list|,
name|SpecificData
operator|.
name|getDecoder
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

