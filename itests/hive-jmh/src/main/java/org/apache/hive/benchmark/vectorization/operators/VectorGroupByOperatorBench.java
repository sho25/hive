begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|benchmark
operator|.
name|vectorization
operator|.
name|operators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|OperatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorGroupByOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|physical
operator|.
name|Vectorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|AggregationDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|GroupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorGroupByDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorGroupByDesc
operator|.
name|ProcessingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFBloomFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|benchmark
operator|.
name|vectorization
operator|.
name|ColumnVectorGenUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Setup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|TearDown
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|profile
operator|.
name|LinuxPerfAsmProfiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|profile
operator|.
name|LinuxPerfNormProfiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|profile
operator|.
name|LinuxPerfProfiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|Runner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|RunnerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|options
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|options
operator|.
name|OptionsBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_class
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Benchmark
argument_list|)
specifier|public
class|class
name|VectorGroupByOperatorBench
extends|extends
name|AbstractOperatorBench
block|{
annotation|@
name|Param
argument_list|(
block|{
literal|"true"
block|,
literal|"false"
block|}
argument_list|)
specifier|private
name|boolean
name|hasNulls
decl_stmt|;
annotation|@
name|Param
argument_list|(
block|{
literal|"true"
block|,
literal|"false"
block|}
argument_list|)
specifier|private
name|boolean
name|isRepeating
decl_stmt|;
annotation|@
name|Param
argument_list|(
block|{
literal|"PARTIAL1"
block|,
literal|"PARTIAL2"
block|,
literal|"FINAL"
block|,
literal|"COMPLETE"
block|}
argument_list|)
specifier|private
name|GenericUDAFEvaluator
operator|.
name|Mode
name|evalMode
decl_stmt|;
annotation|@
name|Param
argument_list|(
block|{
literal|"GLOBAL"
block|,
literal|"HASH"
block|}
argument_list|)
specifier|private
name|VectorGroupByDesc
operator|.
name|ProcessingMode
name|processMode
decl_stmt|;
annotation|@
name|Param
argument_list|(
block|{
literal|"count"
block|,
literal|"min"
block|,
literal|"max"
block|,
literal|"sum"
block|,
literal|"avg"
block|,
literal|"variance"
block|,
literal|"var_pop"
block|,
literal|"var_samp"
block|,
literal|"stddev"
block|,
literal|"stddev_pop"
block|,
literal|"stddev_samp"
block|,
literal|"bloom_filter"
block|}
argument_list|)
specifier|private
name|String
name|aggregation
decl_stmt|;
annotation|@
name|Param
argument_list|(
block|{
literal|"bigint"
block|,
literal|"double"
block|,
literal|"string"
block|,
literal|"decimal(7,2)"
block|,
comment|// to use this via command line arg "decimal(7_2)"
literal|"decimal(38,18)"
block|,
comment|// to use this via command line arg "decimal(38_18)"
literal|"timestamp"
block|}
argument_list|)
specifier|private
name|String
name|dataType
decl_stmt|;
specifier|private
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
specifier|private
name|VectorGroupByOperator
name|vgo
decl_stmt|;
specifier|private
name|VectorizedRowBatch
name|vrb
decl_stmt|;
specifier|private
name|int
name|size
init|=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
decl_stmt|;
annotation|@
name|Setup
specifier|public
name|void
name|setup
parameter_list|()
block|{
try|try
block|{
name|dataType
operator|=
name|dataType
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|","
argument_list|)
expr_stmt|;
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|dataType
argument_list|)
decl_stmt|;
name|ColumnVector
name|cv
init|=
name|ColumnVectorGenUtil
operator|.
name|generateColumnVector
argument_list|(
name|typeInfo
argument_list|,
name|hasNulls
argument_list|,
name|isRepeating
argument_list|,
name|size
argument_list|,
name|rand
argument_list|)
decl_stmt|;
name|TypeDescription
name|typeDescription
init|=
name|TypeDescription
operator|.
name|fromString
argument_list|(
name|dataType
argument_list|)
decl_stmt|;
name|vrb
operator|=
name|typeDescription
operator|.
name|createRowBatch
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|vrb
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|vrb
operator|.
name|cols
index|[
literal|0
index|]
operator|=
name|cv
expr_stmt|;
name|VectorizationContext
name|ctx
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|)
decl_stmt|;
name|GroupByDesc
name|desc
init|=
name|buildGroupByDescType
argument_list|(
name|aggregation
argument_list|,
name|evalMode
argument_list|,
literal|"A"
argument_list|,
name|typeInfo
argument_list|,
name|processMode
argument_list|)
decl_stmt|;
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|groupByOp
init|=
name|OperatorFactory
operator|.
name|get
argument_list|(
operator|new
name|CompilationOpContext
argument_list|()
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|VectorGroupByDesc
name|vectorGroupByDesc
init|=
operator|new
name|VectorGroupByDesc
argument_list|()
decl_stmt|;
name|vectorGroupByDesc
operator|.
name|setProcessingMode
argument_list|(
name|ProcessingMode
operator|.
name|HASH
argument_list|)
expr_stmt|;
name|vgo
operator|=
operator|(
name|VectorGroupByOperator
operator|)
name|Vectorizer
operator|.
name|vectorizeGroupByOperator
argument_list|(
name|groupByOp
argument_list|,
name|ctx
argument_list|,
name|vectorGroupByDesc
argument_list|)
expr_stmt|;
name|vgo
operator|.
name|initialize
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// likely unsupported combination of params
comment|// https://bugs.openjdk.java.net/browse/CODETOOLS-7901296 is not available yet to skip benchmark cleanly
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Skipping.. Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|GroupByDesc
name|buildGroupByDescType
parameter_list|(
name|String
name|aggregate
parameter_list|,
name|GenericUDAFEvaluator
operator|.
name|Mode
name|mode
parameter_list|,
name|String
name|column
parameter_list|,
name|TypeInfo
name|dataType
parameter_list|,
specifier|final
name|VectorGroupByDesc
operator|.
name|ProcessingMode
name|processMode
parameter_list|)
throws|throws
name|SemanticException
block|{
name|AggregationDesc
name|agg
init|=
name|buildAggregationDesc
argument_list|(
name|aggregate
argument_list|,
name|mode
argument_list|,
name|column
argument_list|,
name|dataType
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
name|aggs
init|=
operator|new
name|ArrayList
argument_list|<
name|AggregationDesc
argument_list|>
argument_list|()
decl_stmt|;
name|aggs
operator|.
name|add
argument_list|(
name|agg
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|outputColumnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|outputColumnNames
operator|.
name|add
argument_list|(
literal|"_col0"
argument_list|)
expr_stmt|;
name|GroupByDesc
name|desc
init|=
operator|new
name|GroupByDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setVectorDesc
argument_list|(
operator|new
name|VectorGroupByDesc
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setOutputColumnNames
argument_list|(
name|outputColumnNames
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setAggregators
argument_list|(
name|aggs
argument_list|)
expr_stmt|;
operator|(
operator|(
name|VectorGroupByDesc
operator|)
name|desc
operator|.
name|getVectorDesc
argument_list|()
operator|)
operator|.
name|setProcessingMode
argument_list|(
name|processMode
argument_list|)
expr_stmt|;
return|return
name|desc
return|;
block|}
specifier|private
name|AggregationDesc
name|buildAggregationDesc
parameter_list|(
name|String
name|aggregate
parameter_list|,
name|GenericUDAFEvaluator
operator|.
name|Mode
name|mode
parameter_list|,
name|String
name|column
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
throws|throws
name|SemanticException
block|{
name|ExprNodeDesc
name|inputColumn
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|typeInfo
argument_list|,
name|column
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|inputColumn
argument_list|)
expr_stmt|;
name|AggregationDesc
name|agg
init|=
operator|new
name|AggregationDesc
argument_list|()
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|TypeInfoUtils
operator|.
name|getStandardJavaObjectInspectorFromTypeInfo
argument_list|(
name|typeInfo
argument_list|)
decl_stmt|;
name|GenericUDAFEvaluator
name|genericUDAFEvaluator
init|=
name|FunctionRegistry
operator|.
name|getGenericUDAFEvaluator
argument_list|(
name|aggregate
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|oi
argument_list|)
operator|.
name|asList
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|agg
operator|.
name|setGenericUDAFEvaluator
argument_list|(
name|genericUDAFEvaluator
argument_list|)
expr_stmt|;
if|if
condition|(
name|aggregate
operator|.
name|equals
argument_list|(
literal|"bloom_filter"
argument_list|)
condition|)
block|{
name|GenericUDAFBloomFilter
operator|.
name|GenericUDAFBloomFilterEvaluator
name|udafBloomFilterEvaluator
init|=
operator|(
name|GenericUDAFBloomFilter
operator|.
name|GenericUDAFBloomFilterEvaluator
operator|)
name|agg
operator|.
name|getGenericUDAFEvaluator
argument_list|()
decl_stmt|;
name|udafBloomFilterEvaluator
operator|.
name|setHintEntries
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
name|agg
operator|.
name|setGenericUDAFName
argument_list|(
name|aggregate
argument_list|)
expr_stmt|;
name|agg
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|agg
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
return|return
name|agg
return|;
block|}
annotation|@
name|TearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|HiveException
block|{
name|vgo
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Benchmark
specifier|public
name|void
name|testAggCount
parameter_list|()
throws|throws
name|HiveException
block|{
name|vgo
operator|.
name|process
argument_list|(
name|vrb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/*    * ============================== HOW TO RUN THIS TEST: ====================================    *    * You can run this test:    *    * a) Via the command line:    *    $ mvn clean install    *    $ java -jar target/benchmarks.jar VectorGroupByOperatorCountBench -prof perf     -f 1 (Linux)    *    $ java -jar target/benchmarks.jar VectorGroupByOperatorCountBench -prof perfnorm -f 3 (Linux)    *    $ java -jar target/benchmarks.jar VectorGroupByOperatorCountBench -prof perfasm  -f 1 (Linux)    *    $ java -jar target/benchmarks.jar VectorGroupByOperatorCountBench -prof gc  -f 1 (allocation counting via gc)    *    $ java -jar target/benchmarks.jar VectorGroupByOperatorBench -p hasNulls=true -p isRepeating=false -p aggregation=bloom_filter  -p processMode=HASH -p evalMode=PARTIAL1    *    $ java -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:6006,suspend=y,server=y -jar target/benchmarks.jar VectorGroupByOperatorBench    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|RunnerException
block|{
name|Options
name|opt
init|=
operator|new
name|OptionsBuilder
argument_list|()
operator|.
name|include
argument_list|(
name|VectorGroupByOperatorBench
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|addProfiler
argument_list|(
name|LinuxPerfProfiler
operator|.
name|class
argument_list|)
operator|.
name|addProfiler
argument_list|(
name|LinuxPerfNormProfiler
operator|.
name|class
argument_list|)
operator|.
name|addProfiler
argument_list|(
name|LinuxPerfAsmProfiler
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
operator|new
name|Runner
argument_list|(
name|opt
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

