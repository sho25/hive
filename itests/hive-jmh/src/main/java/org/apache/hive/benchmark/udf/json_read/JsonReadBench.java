begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|benchmark
operator|.
name|udf
operator|.
name|json_read
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
operator|.
name|DeferredObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFJsonRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|State
import|;
end_import

begin_class
specifier|public
class|class
name|JsonReadBench
block|{
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Thread
argument_list|)
specifier|public
specifier|static
class|class
name|MyState
block|{
specifier|public
specifier|final
name|String
name|json
decl_stmt|;
specifier|public
specifier|final
name|String
name|type
decl_stmt|;
specifier|public
name|MyState
parameter_list|()
block|{
try|try
block|{
name|json
operator|=
name|getResource
argument_list|(
literal|"val1.json"
argument_list|)
expr_stmt|;
name|type
operator|=
name|getResource
argument_list|(
literal|"val1.type"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getResource
parameter_list|(
name|String
name|fname
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|IOUtils
operator|.
name|toString
argument_list|(
name|JsonReadBench
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|fname
argument_list|)
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|checkBenchMarkMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|benchmarkMethod
argument_list|(
operator|new
name|MyState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Benchmark
specifier|public
name|void
name|benchmarkMethod
parameter_list|(
name|MyState
name|state
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|GenericUDFJsonRead
name|udf
init|=
operator|new
name|GenericUDFJsonRead
argument_list|()
init|)
block|{
name|ObjectInspector
index|[]
name|arguments
init|=
name|buildArguments
argument_list|(
name|state
operator|.
name|type
argument_list|)
decl_stmt|;
name|udf
operator|.
name|initialize
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|udf
operator|.
name|evaluate
argument_list|(
name|evalArgs
argument_list|(
name|state
operator|.
name|json
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|DeferredObject
index|[]
name|evalArgs
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
operator|new
name|DeferredObject
index|[]
block|{
operator|new
name|GenericUDF
operator|.
name|DeferredJavaObject
argument_list|(
operator|new
name|Text
argument_list|(
name|string
argument_list|)
argument_list|)
block|,
literal|null
block|}
return|;
block|}
specifier|private
name|ObjectInspector
index|[]
name|buildArguments
parameter_list|(
name|String
name|typeStr
parameter_list|)
block|{
name|ObjectInspector
name|valueOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
decl_stmt|;
name|ObjectInspector
index|[]
name|arguments
init|=
block|{
name|valueOI
block|,
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|Text
argument_list|(
name|typeStr
argument_list|)
argument_list|)
block|}
decl_stmt|;
return|return
name|arguments
return|;
block|}
block|}
end_class

end_unit

