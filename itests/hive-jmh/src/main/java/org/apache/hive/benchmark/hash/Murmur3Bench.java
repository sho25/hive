begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|benchmark
operator|.
name|hash
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|FilterStringColLikeStringScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|Murmur3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|BenchmarkMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Fork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Measurement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|OutputTimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Warmup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|Runner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|RunnerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|options
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|options
operator|.
name|OptionsBuilder
import|;
end_import

begin_comment
comment|/**  * This test measures the performance for vectorization.  *<p/>  * This test uses JMH framework for benchmarking.  * You may execute this benchmark tool using JMH command line in different ways:  *<p/>  * To use the settings shown in the main() function, use:  * $ java -cp target/benchmarks.jar org.apache.hive.benchmark.hash.Murmur3Bench  *<p/>  * To use the default settings used by JMH, use:  * $ java -jar target/benchmarks.jar org.apache.hive.benchmark.hash.Murmur3Bench  *<p/>  * To specify different parameters, use:  * - This command will use 10 warm-up iterations, 5 test iterations, and 2 forks. And it will  * display the Average Time (avgt) in Microseconds (us)  * - Benchmark mode. Available modes are:  * [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]  * - Output time unit. Available time units are: [m, s, ms, us, ns].  *<p/>  * $ java -jar target/benchmarks.jar org.apache.hive.benchmark.hash.Murmur3Bench  * -wi 10 -i 5 -f 2 -bm avgt -tu us  */
end_comment

begin_class
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Benchmark
argument_list|)
specifier|public
class|class
name|Murmur3Bench
block|{
annotation|@
name|BenchmarkMode
argument_list|(
name|Mode
operator|.
name|AverageTime
argument_list|)
annotation|@
name|Fork
argument_list|(
literal|1
argument_list|)
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Thread
argument_list|)
annotation|@
name|OutputTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
specifier|public
specifier|static
class|class
name|Hash64Bench
block|{
annotation|@
name|Param
argument_list|(
block|{
literal|"-1"
block|}
argument_list|)
comment|//"123456789", "987654321", "1234", "4321",
name|long
name|v
decl_stmt|;
annotation|@
name|Benchmark
annotation|@
name|Warmup
argument_list|(
name|iterations
operator|=
literal|2
argument_list|,
name|time
operator|=
literal|2
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
annotation|@
name|Measurement
argument_list|(
name|iterations
operator|=
literal|20
argument_list|,
name|time
operator|=
literal|2
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
specifier|public
name|long
name|longHash
parameter_list|()
block|{
name|long
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4096
condition|;
name|i
operator|++
control|)
block|{
name|k
operator|+=
name|Murmur3
operator|.
name|hash64
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|k
return|;
block|}
annotation|@
name|Benchmark
annotation|@
name|Warmup
argument_list|(
name|iterations
operator|=
literal|2
argument_list|,
name|time
operator|=
literal|2
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
annotation|@
name|Measurement
argument_list|(
name|iterations
operator|=
literal|20
argument_list|,
name|time
operator|=
literal|2
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
specifier|public
name|long
name|longBytesHash
parameter_list|()
block|{
name|ByteBuffer
name|LONG_BUFFER
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|Long
operator|.
name|BYTES
argument_list|)
decl_stmt|;
name|long
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4096
condition|;
name|i
operator|++
control|)
block|{
name|LONG_BUFFER
operator|.
name|putLong
argument_list|(
literal|0
argument_list|,
name|v
operator|+
name|i
argument_list|)
expr_stmt|;
name|k
operator|+=
name|Murmur3
operator|.
name|hash64
argument_list|(
name|LONG_BUFFER
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|k
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|RunnerException
block|{
name|Options
name|opt
init|=
operator|new
name|OptionsBuilder
argument_list|()
operator|.
name|include
argument_list|(
literal|".*"
operator|+
name|Murmur3Bench
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".*"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
operator|new
name|Runner
argument_list|(
name|opt
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

