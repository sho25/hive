begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|benchmark
operator|.
name|vectorization
operator|.
name|operators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CompilationOpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorSelectOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|VectorizedRowGroupGenUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|SelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorSelectDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|benchmark
operator|.
name|vectorization
operator|.
name|BlackholeOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Setup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|TearDown
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|infra
operator|.
name|Blackhole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|profile
operator|.
name|LinuxPerfAsmProfiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|profile
operator|.
name|LinuxPerfNormProfiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|profile
operator|.
name|LinuxPerfProfiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|Runner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|RunnerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|options
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|options
operator|.
name|OptionsBuilder
import|;
end_import

begin_class
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Benchmark
argument_list|)
specifier|public
class|class
name|VectorSelectOperatorBench
extends|extends
name|AbstractOperatorBench
block|{
specifier|private
name|SelectDesc
name|selDesc
decl_stmt|;
specifier|private
name|VectorSelectOperator
name|vso
decl_stmt|;
specifier|private
name|VectorizedRowBatch
name|vrg
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|child
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Operator
argument_list|<
name|?
argument_list|>
argument_list|>
name|EMPTY_CHILD
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Setup
specifier|public
name|void
name|setup
parameter_list|(
name|Blackhole
name|bh
parameter_list|)
throws|throws
name|HiveException
block|{
name|HiveConf
name|hconf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|VectorizationContext
name|vc
init|=
operator|new
name|VectorizationContext
argument_list|(
literal|"name"
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|selDesc
operator|=
operator|new
name|SelectDesc
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|colList
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|ExprNodeColumnDesc
name|colDesc1
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"a"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|colDesc2
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"b"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeColumnDesc
name|colDesc3
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|Long
operator|.
name|class
argument_list|,
literal|"c"
argument_list|,
literal|"table"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|plusDesc
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|()
decl_stmt|;
name|GenericUDF
name|gudf
init|=
operator|new
name|GenericUDFOPPlus
argument_list|()
decl_stmt|;
name|plusDesc
operator|.
name|setGenericUDF
argument_list|(
name|gudf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ExprNodeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|colDesc1
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|colDesc2
argument_list|)
expr_stmt|;
name|plusDesc
operator|.
name|setChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|plusDesc
operator|.
name|setTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
expr_stmt|;
name|colList
operator|.
name|add
argument_list|(
name|plusDesc
argument_list|)
expr_stmt|;
name|colList
operator|.
name|add
argument_list|(
name|colDesc3
argument_list|)
expr_stmt|;
name|selDesc
operator|.
name|setColList
argument_list|(
name|colList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|outputColNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|outputColNames
operator|.
name|add
argument_list|(
literal|"_col0"
argument_list|)
expr_stmt|;
name|outputColNames
operator|.
name|add
argument_list|(
literal|"_col1"
argument_list|)
expr_stmt|;
name|selDesc
operator|.
name|setOutputColumnNames
argument_list|(
name|outputColNames
argument_list|)
expr_stmt|;
name|VectorSelectDesc
name|vectorSelectDesc
init|=
operator|new
name|VectorSelectDesc
argument_list|()
decl_stmt|;
name|selDesc
operator|.
name|setVectorDesc
argument_list|(
name|vectorSelectDesc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|selectColList
init|=
name|selDesc
operator|.
name|getColList
argument_list|()
decl_stmt|;
name|VectorExpression
index|[]
name|vectorSelectExprs
init|=
operator|new
name|VectorExpression
index|[
name|selectColList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selectColList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ExprNodeDesc
name|expr
init|=
name|selectColList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|VectorExpression
name|ve
init|=
name|vc
operator|.
name|getVectorExpression
argument_list|(
name|expr
argument_list|)
decl_stmt|;
name|vectorSelectExprs
index|[
name|i
index|]
operator|=
name|ve
expr_stmt|;
block|}
name|vectorSelectDesc
operator|.
name|setSelectExpressions
argument_list|(
name|vectorSelectExprs
argument_list|)
expr_stmt|;
name|vectorSelectDesc
operator|.
name|setProjectedOutputColumns
argument_list|(
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|2
block|}
argument_list|)
expr_stmt|;
name|CompilationOpContext
name|opContext
init|=
operator|new
name|CompilationOpContext
argument_list|()
decl_stmt|;
name|vso
operator|=
operator|new
name|VectorSelectOperator
argument_list|(
name|opContext
argument_list|,
name|selDesc
argument_list|,
name|vc
argument_list|,
name|vectorSelectDesc
argument_list|)
expr_stmt|;
comment|// to trigger vectorForward
name|child
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|child
operator|.
name|add
argument_list|(
operator|new
name|BlackholeOperator
argument_list|(
name|opContext
argument_list|,
name|bh
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|.
name|add
argument_list|(
operator|new
name|BlackholeOperator
argument_list|(
name|opContext
argument_list|,
name|bh
argument_list|)
argument_list|)
expr_stmt|;
name|vso
operator|.
name|initialize
argument_list|(
name|hconf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|vrg
operator|=
name|VectorizedRowGroupGenUtil
operator|.
name|getVectorizedRowBatch
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
literal|4
argument_list|,
literal|17
argument_list|)
expr_stmt|;
block|}
annotation|@
name|TearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|HiveException
block|{
name|vso
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Benchmark
specifier|public
name|void
name|testSelectStar
parameter_list|()
throws|throws
name|HiveException
block|{
name|selDesc
operator|.
name|setSelStarNoCompute
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|vso
operator|.
name|process
argument_list|(
name|vrg
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Benchmark
specifier|public
name|void
name|testVectorSelectBaseForward
parameter_list|()
throws|throws
name|HiveException
block|{
name|selDesc
operator|.
name|setSelStarNoCompute
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|vso
operator|.
name|setChildOperators
argument_list|(
name|EMPTY_CHILD
argument_list|)
expr_stmt|;
name|vso
operator|.
name|process
argument_list|(
name|vrg
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Benchmark
specifier|public
name|void
name|testVectorSelectVectorForward
parameter_list|()
throws|throws
name|HiveException
block|{
name|selDesc
operator|.
name|setSelStarNoCompute
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|vso
operator|.
name|setChildOperators
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|vso
operator|.
name|process
argument_list|(
name|vrg
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/*    * ============================== HOW TO RUN THIS TEST: ====================================    *    * You can run this test:    *    * a) Via the command line:    *    $ mvn clean install    *    $ java -jar target/benchmarks.jar VectorSelectOperatorBench -prof perf     -f 1 (Linux)    *    $ java -jar target/benchmarks.jar VectorSelectOperatorBench -prof perfnorm -f 3 (Linux)    *    $ java -jar target/benchmarks.jar VectorSelectOperatorBench -prof perfasm  -f 1 (Linux)    *    $ java -jar target/benchmarks.jar VectorSelectOperatorBench -prof gc  -f 1 (allocation counting via gc)    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|RunnerException
block|{
name|Options
name|opt
init|=
operator|new
name|OptionsBuilder
argument_list|()
operator|.
name|include
argument_list|(
name|VectorSelectOperatorBench
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|addProfiler
argument_list|(
name|LinuxPerfProfiler
operator|.
name|class
argument_list|)
operator|.
name|addProfiler
argument_list|(
name|LinuxPerfNormProfiler
operator|.
name|class
argument_list|)
operator|.
name|addProfiler
argument_list|(
name|LinuxPerfAsmProfiler
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
operator|new
name|Runner
argument_list|(
name|opt
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

