begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|benchmark
operator|.
name|vectorization
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|LongColDivideLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DoubleColAddDoubleColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DoubleColAddLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DoubleColDivideDoubleColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|DoubleColDivideLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|LongColAddDoubleColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|LongColAddLongColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|gen
operator|.
name|LongColDivideDoubleColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|BenchmarkMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Fork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Measurement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|OutputTimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Setup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Warmup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|Runner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|RunnerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|options
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|options
operator|.
name|OptionsBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Benchmark
argument_list|)
specifier|public
class|class
name|VectorizationBench
block|{
comment|/**    * This test measures the performance for vectorization.    *<p/>    * This test uses JMH framework for benchmarking.    * You may execute this benchmark tool using JMH command line in different ways:    *<p/>    * To use the settings shown in the main() function, use:    * $ java -cp target/benchmarks.jar org.apache.hive.benchmark.vectorization.VectorizationBench    *<p/>    * To use the default settings used by JMH, use:    * $ java -jar target/benchmarks.jar org.apache.hive.benchmark.vectorization VectorizationBench    *<p/>    * To specify different parameters, use:    * - This command will use 10 warm-up iterations, 5 test iterations, and 2 forks. And it will    * display the Average Time (avgt) in Microseconds (us)    * - Benchmark mode. Available modes are:    * [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]    * - Output time unit. Available time units are: [m, s, ms, us, ns].    *<p/>    * $ java -jar target/benchmarks.jar org.apache.hive.benchmark.vectorization VectorizationBench    * -wi 10 -i 5 -f 2 -bm avgt -tu us    */
specifier|private
specifier|static
name|LongColumnVector
name|longColumnVector
init|=
operator|new
name|LongColumnVector
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|LongColumnVector
name|dupLongColumnVector
init|=
operator|new
name|LongColumnVector
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|DoubleColumnVector
name|doubleColumnVector
init|=
operator|new
name|DoubleColumnVector
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|DoubleColumnVector
name|dupDoubleColumnVector
init|=
operator|new
name|DoubleColumnVector
argument_list|()
decl_stmt|;
annotation|@
name|BenchmarkMode
argument_list|(
name|Mode
operator|.
name|AverageTime
argument_list|)
annotation|@
name|Fork
argument_list|(
literal|1
argument_list|)
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Thread
argument_list|)
annotation|@
name|OutputTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
specifier|public
specifier|static
specifier|abstract
class|class
name|AbstractExpression
block|{
specifier|protected
name|VectorExpression
name|expression
decl_stmt|;
specifier|protected
name|VectorizedRowBatch
name|rowBatch
decl_stmt|;
specifier|protected
name|VectorizedRowBatch
name|buildRowBatch
parameter_list|(
name|ColumnVector
name|output
parameter_list|,
name|int
name|colNum
parameter_list|,
name|ColumnVector
modifier|...
name|cols
parameter_list|)
block|{
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|colNum
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|rowBatch
operator|.
name|cols
index|[
name|i
index|]
operator|=
name|cols
index|[
name|i
index|]
expr_stmt|;
block|}
name|rowBatch
operator|.
name|cols
index|[
name|colNum
index|]
operator|=
name|output
expr_stmt|;
return|return
name|rowBatch
return|;
block|}
annotation|@
name|Setup
specifier|public
specifier|abstract
name|void
name|setup
parameter_list|()
function_decl|;
annotation|@
name|Benchmark
annotation|@
name|Warmup
argument_list|(
name|iterations
operator|=
literal|2
argument_list|,
name|time
operator|=
literal|2
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
annotation|@
name|Measurement
argument_list|(
name|iterations
operator|=
literal|2
argument_list|,
name|time
operator|=
literal|2
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
specifier|public
name|void
name|bench
parameter_list|()
block|{
name|expression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DoubleAddDoubleExpr
extends|extends
name|AbstractExpression
block|{
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|rowBatch
operator|=
name|buildRowBatch
argument_list|(
operator|new
name|DoubleColumnVector
argument_list|()
argument_list|,
literal|2
argument_list|,
name|doubleColumnVector
argument_list|,
name|dupDoubleColumnVector
argument_list|)
expr_stmt|;
name|expression
operator|=
operator|new
name|DoubleColAddDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|LongAddLongExpr
extends|extends
name|AbstractExpression
block|{
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|rowBatch
operator|=
name|buildRowBatch
argument_list|(
operator|new
name|LongColumnVector
argument_list|()
argument_list|,
literal|2
argument_list|,
name|longColumnVector
argument_list|,
name|dupLongColumnVector
argument_list|)
expr_stmt|;
name|expression
operator|=
operator|new
name|LongColAddLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|LongAddDoubleExpr
extends|extends
name|AbstractExpression
block|{
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|rowBatch
operator|=
name|buildRowBatch
argument_list|(
operator|new
name|DoubleColumnVector
argument_list|()
argument_list|,
literal|2
argument_list|,
name|longColumnVector
argument_list|,
name|doubleColumnVector
argument_list|)
expr_stmt|;
name|expression
operator|=
operator|new
name|LongColAddDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DoubleAddLongExpr
extends|extends
name|AbstractExpression
block|{
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|rowBatch
operator|=
name|buildRowBatch
argument_list|(
operator|new
name|DoubleColumnVector
argument_list|()
argument_list|,
literal|2
argument_list|,
name|doubleColumnVector
argument_list|,
name|longColumnVector
argument_list|)
expr_stmt|;
name|expression
operator|=
operator|new
name|DoubleColAddLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DoubleDivideDoubleExpr
extends|extends
name|AbstractExpression
block|{
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|rowBatch
operator|=
name|buildRowBatch
argument_list|(
operator|new
name|DoubleColumnVector
argument_list|()
argument_list|,
literal|2
argument_list|,
name|doubleColumnVector
argument_list|,
name|dupDoubleColumnVector
argument_list|)
expr_stmt|;
name|expression
operator|=
operator|new
name|DoubleColDivideDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|LongDivideLongExpr
extends|extends
name|AbstractExpression
block|{
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|rowBatch
operator|=
name|buildRowBatch
argument_list|(
operator|new
name|DoubleColumnVector
argument_list|()
argument_list|,
literal|2
argument_list|,
name|longColumnVector
argument_list|,
name|dupLongColumnVector
argument_list|)
expr_stmt|;
name|expression
operator|=
operator|new
name|LongColDivideLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DoubleDivideLongExpr
extends|extends
name|AbstractExpression
block|{
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|rowBatch
operator|=
name|buildRowBatch
argument_list|(
operator|new
name|DoubleColumnVector
argument_list|()
argument_list|,
literal|2
argument_list|,
name|doubleColumnVector
argument_list|,
name|longColumnVector
argument_list|)
expr_stmt|;
name|expression
operator|=
operator|new
name|DoubleColDivideLongColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|LongDivideDoubleExpr
extends|extends
name|AbstractExpression
block|{
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|rowBatch
operator|=
name|buildRowBatch
argument_list|(
operator|new
name|DoubleColumnVector
argument_list|()
argument_list|,
literal|2
argument_list|,
name|longColumnVector
argument_list|,
name|doubleColumnVector
argument_list|)
expr_stmt|;
name|expression
operator|=
operator|new
name|LongColDivideDoubleColumn
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Setup
argument_list|(
name|Level
operator|.
name|Trial
argument_list|)
specifier|public
name|void
name|initialColumnVectors
parameter_list|()
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|dupLongColumnVector
operator|.
name|fill
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|dupDoubleColumnVector
operator|.
name|fill
argument_list|(
name|random
operator|.
name|nextDouble
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|doubleColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|random
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
name|longColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|random
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|RunnerException
block|{
name|Options
name|opt
init|=
operator|new
name|OptionsBuilder
argument_list|()
operator|.
name|include
argument_list|(
literal|".*"
operator|+
name|VectorizationBench
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".*"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
operator|new
name|Runner
argument_list|(
name|opt
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

