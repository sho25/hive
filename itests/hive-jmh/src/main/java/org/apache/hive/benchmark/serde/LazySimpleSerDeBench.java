begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|benchmark
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|ByteArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyByte
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyDouble
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyFloat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyShort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LazyPrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|BenchmarkMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Fork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Measurement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|OutputTimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Setup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Warmup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|Runner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|RunnerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|options
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|runner
operator|.
name|options
operator|.
name|OptionsBuilder
import|;
end_import

begin_class
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Benchmark
argument_list|)
specifier|public
class|class
name|LazySimpleSerDeBench
block|{
comment|/**    * This test measures the performance for LazySimpleSerDe.    *<p/>    * This test uses JMH framework for benchmarking. You may execute this    * benchmark tool using JMH command line in different ways:    *<p/>    * To run using default settings, use:     * $ java -cp target/benchmarks.jar org.apache.hive.benchmark.serde.LazySimpleSerDeBench    *<p/>    */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_ITER_TIME
init|=
literal|1000000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_DATA_SIZE
init|=
literal|4096
decl_stmt|;
annotation|@
name|BenchmarkMode
argument_list|(
name|Mode
operator|.
name|AverageTime
argument_list|)
annotation|@
name|Fork
argument_list|(
literal|1
argument_list|)
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Thread
argument_list|)
annotation|@
name|OutputTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
specifier|public
specifier|static
specifier|abstract
class|class
name|AbstractDeserializer
block|{
specifier|public
name|int
index|[]
name|offsets
init|=
operator|new
name|int
index|[
name|DEFAULT_DATA_SIZE
index|]
decl_stmt|;
specifier|public
name|int
index|[]
name|sizes
init|=
operator|new
name|int
index|[
name|DEFAULT_DATA_SIZE
index|]
decl_stmt|;
specifier|protected
specifier|final
name|ByteArrayRef
name|ref
init|=
operator|new
name|ByteArrayRef
argument_list|()
decl_stmt|;
annotation|@
name|Setup
specifier|public
specifier|abstract
name|void
name|setup
parameter_list|()
function_decl|;
annotation|@
name|Benchmark
annotation|@
name|Warmup
argument_list|(
name|iterations
operator|=
literal|2
argument_list|,
name|time
operator|=
literal|2
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
annotation|@
name|Measurement
argument_list|(
name|iterations
operator|=
literal|2
argument_list|,
name|time
operator|=
literal|2
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
specifier|public
name|void
name|bench
parameter_list|()
block|{      }
block|}
specifier|public
specifier|static
specifier|abstract
class|class
name|RandomDataInitializer
extends|extends
name|AbstractDeserializer
block|{
specifier|final
name|int
name|width
decl_stmt|;
specifier|public
name|RandomDataInitializer
parameter_list|(
specifier|final
name|int
name|width
parameter_list|)
block|{
name|this
operator|.
name|width
operator|=
name|width
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|int
name|len
init|=
literal|0
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sizes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sizes
index|[
name|i
index|]
operator|=
call|(
name|int
call|)
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|width
argument_list|)
argument_list|)
expr_stmt|;
name|offsets
index|[
name|i
index|]
operator|=
name|len
expr_stmt|;
name|len
operator|+=
name|sizes
index|[
name|i
index|]
expr_stmt|;
block|}
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|len
operator|+
literal|1
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setData
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|abstract
class|class
name|GoodDataInitializer
extends|extends
name|AbstractDeserializer
block|{
specifier|public
specifier|final
name|int
name|max
decl_stmt|;
specifier|public
name|GoodDataInitializer
parameter_list|(
specifier|final
name|int
name|max
parameter_list|)
block|{
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|sizes
operator|=
operator|new
name|int
index|[
literal|1024
index|]
expr_stmt|;
name|offsets
operator|=
operator|new
name|int
index|[
name|sizes
operator|.
name|length
index|]
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sizes
operator|.
name|length
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|int
name|p
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|max
argument_list|)
decl_stmt|;
name|int
name|n
init|=
operator|-
literal|1
operator|*
operator|(
name|p
operator|-
literal|1
operator|)
decl_stmt|;
name|byte
index|[]
name|ps
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|p
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|ns
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|n
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|sizes
index|[
literal|2
operator|*
name|i
index|]
operator|=
name|ps
operator|.
name|length
expr_stmt|;
name|sizes
index|[
literal|2
operator|*
name|i
operator|+
literal|1
index|]
operator|=
name|ns
operator|.
name|length
expr_stmt|;
name|offsets
index|[
literal|2
operator|*
name|i
index|]
operator|=
name|len
expr_stmt|;
name|offsets
index|[
literal|2
operator|*
name|i
operator|+
literal|1
index|]
operator|=
name|len
operator|+
name|ps
operator|.
name|length
expr_stmt|;
name|len
operator|+=
name|ps
operator|.
name|length
operator|+
name|ns
operator|.
name|length
expr_stmt|;
try|try
block|{
name|bos
operator|.
name|write
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|ref
operator|.
name|setData
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|RandomLazyByte
extends|extends
name|RandomDataInitializer
block|{
specifier|public
name|RandomLazyByte
parameter_list|()
block|{
name|super
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LazyByte
name|obj
init|=
operator|new
name|LazyByte
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_BYTE_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|WorstLazyByte
extends|extends
name|RandomDataInitializer
block|{
specifier|public
name|WorstLazyByte
parameter_list|()
block|{
name|super
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LazyByte
name|obj
init|=
operator|new
name|LazyByte
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_BYTE_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|GoodLazyByte
extends|extends
name|GoodDataInitializer
block|{
specifier|final
name|LazyByte
name|obj
init|=
operator|new
name|LazyByte
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_BYTE_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
specifier|public
name|GoodLazyByte
parameter_list|()
block|{
name|super
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|RandomLazyShort
extends|extends
name|RandomDataInitializer
block|{
specifier|public
name|RandomLazyShort
parameter_list|()
block|{
name|super
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LazyShort
name|obj
init|=
operator|new
name|LazyShort
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_SHORT_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|WorstLazyShort
extends|extends
name|RandomDataInitializer
block|{
specifier|public
name|WorstLazyShort
parameter_list|()
block|{
name|super
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LazyShort
name|obj
init|=
operator|new
name|LazyShort
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_SHORT_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|GoodLazyShort
extends|extends
name|GoodDataInitializer
block|{
specifier|final
name|LazyShort
name|obj
init|=
operator|new
name|LazyShort
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_SHORT_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
specifier|public
name|GoodLazyShort
parameter_list|()
block|{
name|super
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|RandomLazyInteger
extends|extends
name|RandomDataInitializer
block|{
specifier|public
name|RandomLazyInteger
parameter_list|()
block|{
name|super
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LazyInteger
name|obj
init|=
operator|new
name|LazyInteger
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_INT_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|WorstLazyInteger
extends|extends
name|RandomDataInitializer
block|{
specifier|public
name|WorstLazyInteger
parameter_list|()
block|{
name|super
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LazyInteger
name|obj
init|=
operator|new
name|LazyInteger
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_INT_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|GoodLazyInteger
extends|extends
name|GoodDataInitializer
block|{
specifier|final
name|LazyInteger
name|obj
init|=
operator|new
name|LazyInteger
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_INT_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
specifier|public
name|GoodLazyInteger
parameter_list|()
block|{
name|super
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|RandomLazyFloat
extends|extends
name|RandomDataInitializer
block|{
specifier|public
name|RandomLazyFloat
parameter_list|()
block|{
name|super
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LazyFloat
name|obj
init|=
operator|new
name|LazyFloat
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_FLOAT_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|WorstLazyFloat
extends|extends
name|RandomDataInitializer
block|{
specifier|public
name|WorstLazyFloat
parameter_list|()
block|{
name|super
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LazyFloat
name|obj
init|=
operator|new
name|LazyFloat
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_FLOAT_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|GoodLazyFloat
extends|extends
name|GoodDataInitializer
block|{
specifier|final
name|LazyFloat
name|obj
init|=
operator|new
name|LazyFloat
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_FLOAT_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
specifier|public
name|GoodLazyFloat
parameter_list|()
block|{
name|super
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|RandomLazyLong
extends|extends
name|RandomDataInitializer
block|{
specifier|public
name|RandomLazyLong
parameter_list|()
block|{
name|super
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LazyLong
name|obj
init|=
operator|new
name|LazyLong
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_LONG_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|WorstLazyLong
extends|extends
name|RandomDataInitializer
block|{
specifier|public
name|WorstLazyLong
parameter_list|()
block|{
name|super
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LazyLong
name|obj
init|=
operator|new
name|LazyLong
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_LONG_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|GoodLazyLong
extends|extends
name|GoodDataInitializer
block|{
specifier|final
name|LazyLong
name|obj
init|=
operator|new
name|LazyLong
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_LONG_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
specifier|public
name|GoodLazyLong
parameter_list|()
block|{
name|super
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|RandomLazyDouble
extends|extends
name|RandomDataInitializer
block|{
specifier|public
name|RandomLazyDouble
parameter_list|()
block|{
name|super
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LazyDouble
name|obj
init|=
operator|new
name|LazyDouble
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_DOUBLE_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|WorstLazyDouble
extends|extends
name|RandomDataInitializer
block|{
specifier|public
name|WorstLazyDouble
parameter_list|()
block|{
name|super
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LazyDouble
name|obj
init|=
operator|new
name|LazyDouble
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_DOUBLE_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|GoodLazyDouble
extends|extends
name|GoodDataInitializer
block|{
specifier|final
name|LazyDouble
name|obj
init|=
operator|new
name|LazyDouble
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_DOUBLE_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
specifier|public
name|GoodLazyDouble
parameter_list|()
block|{
name|super
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|BenchmarkMode
argument_list|(
name|Mode
operator|.
name|AverageTime
argument_list|)
annotation|@
name|Fork
argument_list|(
literal|1
argument_list|)
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Thread
argument_list|)
annotation|@
name|OutputTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
specifier|public
specifier|static
class|class
name|GoodLazyDate
block|{
specifier|final
name|LazyDate
name|obj
init|=
operator|new
name|LazyDate
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_DATE_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
specifier|public
name|int
index|[]
name|offsets
init|=
operator|new
name|int
index|[
name|DEFAULT_DATA_SIZE
index|]
decl_stmt|;
specifier|public
name|int
index|[]
name|sizes
init|=
operator|new
name|int
index|[
name|DEFAULT_DATA_SIZE
index|]
decl_stmt|;
specifier|protected
specifier|final
name|ByteArrayRef
name|ref
init|=
operator|new
name|ByteArrayRef
argument_list|()
decl_stmt|;
annotation|@
name|Setup
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|sizes
operator|=
operator|new
name|int
index|[
name|DEFAULT_DATA_SIZE
index|]
expr_stmt|;
name|offsets
operator|=
operator|new
name|int
index|[
name|sizes
operator|.
name|length
index|]
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|base
init|=
operator|-
literal|320000000L
operator|*
literal|1000L
decl_stmt|;
comment|// 1959
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_DATA_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|// -ve dates are also valid dates - the dates are within 1959 to 2027
name|Date
name|dt
init|=
operator|new
name|Date
argument_list|(
name|base
operator|+
operator|(
name|Math
operator|.
name|abs
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|%
operator|(
name|Integer
operator|.
name|MAX_VALUE
operator|*
literal|1000L
operator|)
operator|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|ds
init|=
name|dt
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|sizes
index|[
name|i
index|]
operator|=
name|ds
operator|.
name|length
expr_stmt|;
name|offsets
index|[
name|i
index|]
operator|=
name|len
expr_stmt|;
name|len
operator|+=
name|ds
operator|.
name|length
expr_stmt|;
try|try
block|{
name|bos
operator|.
name|write
argument_list|(
name|ds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|ref
operator|.
name|setData
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Benchmark
annotation|@
name|Warmup
argument_list|(
name|iterations
operator|=
literal|2
argument_list|,
name|time
operator|=
literal|2
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
annotation|@
name|Measurement
argument_list|(
name|iterations
operator|=
literal|2
argument_list|,
name|time
operator|=
literal|2
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|RandomLazyDate
extends|extends
name|RandomDataInitializer
block|{
specifier|final
name|LazyDate
name|obj
init|=
operator|new
name|LazyDate
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_DATE_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
specifier|public
name|RandomLazyDate
parameter_list|()
block|{
name|super
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|WorstLazyDate
extends|extends
name|RandomDataInitializer
block|{
specifier|final
name|LazyDate
name|obj
init|=
operator|new
name|LazyDate
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_DATE_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
specifier|public
name|WorstLazyDate
parameter_list|()
block|{
name|super
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|BenchmarkMode
argument_list|(
name|Mode
operator|.
name|AverageTime
argument_list|)
annotation|@
name|Fork
argument_list|(
literal|1
argument_list|)
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Thread
argument_list|)
annotation|@
name|OutputTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
specifier|public
specifier|static
class|class
name|GoodLazyTimestamp
block|{
specifier|final
name|LazyTimestamp
name|obj
init|=
operator|new
name|LazyTimestamp
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_TIMESTAMP_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
specifier|public
name|int
index|[]
name|offsets
init|=
operator|new
name|int
index|[
name|DEFAULT_DATA_SIZE
index|]
decl_stmt|;
specifier|public
name|int
index|[]
name|sizes
init|=
operator|new
name|int
index|[
name|DEFAULT_DATA_SIZE
index|]
decl_stmt|;
specifier|protected
specifier|final
name|ByteArrayRef
name|ref
init|=
operator|new
name|ByteArrayRef
argument_list|()
decl_stmt|;
annotation|@
name|Setup
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|sizes
operator|=
operator|new
name|int
index|[
name|DEFAULT_DATA_SIZE
index|]
expr_stmt|;
name|offsets
operator|=
operator|new
name|int
index|[
name|sizes
operator|.
name|length
index|]
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|base
init|=
operator|-
literal|320000000L
operator|*
literal|1000L
decl_stmt|;
comment|// 1959
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_DATA_SIZE
condition|;
name|i
operator|++
control|)
block|{
comment|// -ve dates are also valid Timestamps - dates are within 1959 to 2027
name|Date
name|dt
init|=
operator|new
name|Date
argument_list|(
name|base
operator|+
operator|(
name|Math
operator|.
name|abs
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|%
operator|(
name|Integer
operator|.
name|MAX_VALUE
operator|*
literal|1000L
operator|)
operator|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|ds
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s 00:00:01"
argument_list|,
name|dt
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|sizes
index|[
name|i
index|]
operator|=
name|ds
operator|.
name|length
expr_stmt|;
name|offsets
index|[
name|i
index|]
operator|=
name|len
expr_stmt|;
name|len
operator|+=
name|ds
operator|.
name|length
expr_stmt|;
try|try
block|{
name|bos
operator|.
name|write
argument_list|(
name|ds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|ref
operator|.
name|setData
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Benchmark
annotation|@
name|Warmup
argument_list|(
name|iterations
operator|=
literal|2
argument_list|,
name|time
operator|=
literal|2
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
annotation|@
name|Measurement
argument_list|(
name|iterations
operator|=
literal|2
argument_list|,
name|time
operator|=
literal|2
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|RandomLazyTimestamp
extends|extends
name|RandomDataInitializer
block|{
specifier|final
name|LazyTimestamp
name|obj
init|=
operator|new
name|LazyTimestamp
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_TIMESTAMP_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
specifier|public
name|RandomLazyTimestamp
parameter_list|()
block|{
name|super
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|WorstLazyTimestamp
extends|extends
name|RandomDataInitializer
block|{
specifier|final
name|LazyTimestamp
name|obj
init|=
operator|new
name|LazyTimestamp
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_TIMESTAMP_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
specifier|public
name|WorstLazyTimestamp
parameter_list|()
block|{
name|super
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|.
name|init
argument_list|(
name|ref
argument_list|,
name|offsets
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|,
name|sizes
index|[
name|i
operator|%
name|sizes
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|RunnerException
block|{
name|Options
name|opt
init|=
operator|new
name|OptionsBuilder
argument_list|()
operator|.
name|include
argument_list|(
literal|".*"
operator|+
name|LazySimpleSerDeBench
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".*"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
operator|new
name|Runner
argument_list|(
name|opt
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

