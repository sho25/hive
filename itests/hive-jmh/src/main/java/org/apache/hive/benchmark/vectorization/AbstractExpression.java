begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|benchmark
operator|.
name|vectorization
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|BenchmarkMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Fork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Measurement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|OutputTimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Setup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Warmup
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
annotation|@
name|BenchmarkMode
argument_list|(
name|Mode
operator|.
name|AverageTime
argument_list|)
annotation|@
name|Fork
argument_list|(
literal|1
argument_list|)
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Thread
argument_list|)
annotation|@
name|OutputTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
specifier|public
specifier|abstract
class|class
name|AbstractExpression
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_ITER_TIME
init|=
literal|1000000
decl_stmt|;
specifier|protected
name|VectorExpression
name|expression
decl_stmt|;
specifier|protected
name|VectorizedRowBatch
name|rowBatch
decl_stmt|;
specifier|protected
name|VectorizedRowBatch
name|buildRowBatch
parameter_list|(
name|ColumnVector
name|output
parameter_list|,
name|int
name|colNum
parameter_list|,
name|ColumnVector
modifier|...
name|cols
parameter_list|)
block|{
name|VectorizedRowBatch
name|rowBatch
init|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|colNum
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|rowBatch
operator|.
name|cols
index|[
name|i
index|]
operator|=
name|cols
index|[
name|i
index|]
expr_stmt|;
block|}
name|rowBatch
operator|.
name|cols
index|[
name|colNum
index|]
operator|=
name|output
expr_stmt|;
return|return
name|rowBatch
return|;
block|}
annotation|@
name|Setup
specifier|public
specifier|abstract
name|void
name|setup
parameter_list|()
function_decl|;
annotation|@
name|Benchmark
annotation|@
name|Warmup
argument_list|(
name|iterations
operator|=
literal|2
argument_list|,
name|time
operator|=
literal|2
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
annotation|@
name|Measurement
argument_list|(
name|iterations
operator|=
literal|2
argument_list|,
name|time
operator|=
literal|2
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
specifier|public
name|void
name|bench
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_ITER_TIME
condition|;
name|i
operator|++
control|)
block|{
name|rowBatch
operator|.
name|selectedInUse
operator|=
literal|false
expr_stmt|;
name|rowBatch
operator|.
name|size
operator|=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
expr_stmt|;
name|expression
operator|.
name|evaluate
argument_list|(
name|rowBatch
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|LongColumnVector
name|getLongColumnVector
parameter_list|()
block|{
name|LongColumnVector
name|columnVector
init|=
operator|new
name|LongColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|columnVector
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|random
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
return|return
name|columnVector
return|;
block|}
specifier|protected
name|LongColumnVector
name|getRepeatingLongColumnVector
parameter_list|()
block|{
name|LongColumnVector
name|columnVector
init|=
operator|new
name|LongColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|columnVector
operator|.
name|fill
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|columnVector
return|;
block|}
specifier|protected
name|LongColumnVector
name|getLongColumnVectorWithNull
parameter_list|()
block|{
name|LongColumnVector
name|columnVector
init|=
operator|new
name|LongColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|columnVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|columnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|columnVector
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|random
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
return|return
name|columnVector
return|;
block|}
specifier|protected
name|LongColumnVector
name|getBooleanLongColumnVector
parameter_list|()
block|{
name|LongColumnVector
name|columnVector
init|=
operator|new
name|LongColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|columnVector
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|random
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|columnVector
return|;
block|}
specifier|protected
name|LongColumnVector
name|getBooleanRepeatingLongColumnVector
parameter_list|()
block|{
name|LongColumnVector
name|columnVector
init|=
operator|new
name|LongColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|columnVector
operator|.
name|fill
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|columnVector
return|;
block|}
specifier|protected
name|LongColumnVector
name|getBooleanLongColumnVectorWithNull
parameter_list|()
block|{
name|LongColumnVector
name|columnVector
init|=
operator|new
name|LongColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|columnVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|columnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|columnVector
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|random
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|columnVector
return|;
block|}
specifier|protected
name|DoubleColumnVector
name|getDoubleColumnVector
parameter_list|()
block|{
name|DoubleColumnVector
name|columnVector
init|=
operator|new
name|DoubleColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|columnVector
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|random
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
return|return
name|columnVector
return|;
block|}
specifier|protected
name|DoubleColumnVector
name|getRepeatingDoubleColumnVector
parameter_list|()
block|{
name|DoubleColumnVector
name|columnVector
init|=
operator|new
name|DoubleColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|columnVector
operator|.
name|fill
argument_list|(
literal|2.0d
argument_list|)
expr_stmt|;
return|return
name|columnVector
return|;
block|}
specifier|protected
name|DoubleColumnVector
name|getDoubleColumnVectorWithNull
parameter_list|()
block|{
name|DoubleColumnVector
name|columnVector
init|=
operator|new
name|DoubleColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|columnVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|columnVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|columnVector
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|random
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
return|return
name|columnVector
return|;
block|}
specifier|protected
name|BytesColumnVector
name|getBytesColumnVector
parameter_list|()
block|{
name|BytesColumnVector
name|columnVector
init|=
operator|new
name|BytesColumnVector
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|length
init|=
literal|16
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|columnVector
operator|.
name|vector
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|columnVector
operator|.
name|start
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|columnVector
operator|.
name|length
index|[
name|i
index|]
operator|=
name|length
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|length
condition|;
name|j
operator|++
control|)
block|{
name|columnVector
operator|.
name|vector
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
operator|+
literal|'c'
operator|-
literal|'a'
operator|+
literal|1
argument_list|)
operator|+
literal|'a'
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|columnVector
return|;
block|}
block|}
end_class

end_unit

