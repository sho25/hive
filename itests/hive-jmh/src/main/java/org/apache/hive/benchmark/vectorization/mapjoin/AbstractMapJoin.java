begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|benchmark
operator|.
name|vectorization
operator|.
name|mapjoin
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|MapJoinOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|collectoroperator
operator|.
name|CountCollectorTestOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|util
operator|.
name|collectoroperator
operator|.
name|CountVectorCollectorTestOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorExtractRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedBatchUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|batchgen
operator|.
name|VectorBatchGenerateStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|util
operator|.
name|batchgen
operator|.
name|VectorBatchGenerateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|VectorExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|MapJoinTestConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|MapJoinTestData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|MapJoinTestDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|MapJoinTestConfig
operator|.
name|MapJoinTestImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|mapjoin
operator|.
name|MapJoinTestDescription
operator|.
name|SmallTableGenerationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapJoinDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|OperatorDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|VectorMapJoinDesc
operator|.
name|VectorMapJoinVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|BenchmarkMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Fork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Measurement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|OutputTimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Setup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Warmup
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|// UNDONE: For now, just run once cold.
end_comment

begin_class
annotation|@
name|BenchmarkMode
argument_list|(
name|Mode
operator|.
name|SingleShotTime
argument_list|)
annotation|@
name|Fork
argument_list|(
literal|1
argument_list|)
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Thread
argument_list|)
annotation|@
name|OutputTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
specifier|public
specifier|abstract
class|class
name|AbstractMapJoin
block|{
specifier|protected
name|VectorMapJoinVariation
name|vectorMapJoinVariation
decl_stmt|;
specifier|protected
name|MapJoinTestImplementation
name|mapJoinImplementation
decl_stmt|;
specifier|protected
name|MapJoinTestDescription
name|testDesc
decl_stmt|;
specifier|protected
name|MapJoinTestData
name|testData
decl_stmt|;
specifier|protected
name|MapJoinOperator
name|operator
decl_stmt|;
specifier|protected
name|boolean
name|isVectorOutput
decl_stmt|;
specifier|protected
name|Object
index|[]
index|[]
name|bigTableRows
decl_stmt|;
specifier|protected
name|VectorizedRowBatch
index|[]
name|bigTableBatches
decl_stmt|;
annotation|@
name|Benchmark
comment|// @Warmup(iterations = 0, time = 1, timeUnit = TimeUnit.MILLISECONDS)
annotation|@
name|Measurement
argument_list|(
name|iterations
operator|=
literal|1
argument_list|,
name|time
operator|=
literal|1
argument_list|,
name|timeUnit
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
specifier|public
name|void
name|bench
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isVectorOutput
condition|)
block|{
name|executeBenchmarkImplementationRow
argument_list|(
name|mapJoinImplementation
argument_list|,
name|testDesc
argument_list|,
name|testData
argument_list|,
name|operator
argument_list|,
name|bigTableRows
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|executeBenchmarkImplementationVector
argument_list|(
name|mapJoinImplementation
argument_list|,
name|testDesc
argument_list|,
name|testData
argument_list|,
name|operator
argument_list|,
name|bigTableBatches
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setupMapJoin
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|long
name|seed
parameter_list|,
name|int
name|rowCount
parameter_list|,
name|VectorMapJoinVariation
name|vectorMapJoinVariation
parameter_list|,
name|MapJoinTestImplementation
name|mapJoinImplementation
parameter_list|,
name|String
index|[]
name|bigTableColumnNames
parameter_list|,
name|TypeInfo
index|[]
name|bigTableTypeInfos
parameter_list|,
name|int
index|[]
name|bigTableKeyColumnNums
parameter_list|,
name|String
index|[]
name|smallTableValueColumnNames
parameter_list|,
name|TypeInfo
index|[]
name|smallTableValueTypeInfos
parameter_list|,
name|int
index|[]
name|bigTableRetainColumnNums
parameter_list|,
name|int
index|[]
name|smallTableRetainKeyColumnNums
parameter_list|,
name|int
index|[]
name|smallTableRetainValueColumnNums
parameter_list|,
name|SmallTableGenerationParameters
name|smallTableGenerationParameters
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|vectorMapJoinVariation
operator|=
name|vectorMapJoinVariation
expr_stmt|;
name|this
operator|.
name|mapJoinImplementation
operator|=
name|mapJoinImplementation
expr_stmt|;
name|testDesc
operator|=
operator|new
name|MapJoinTestDescription
argument_list|(
name|hiveConf
argument_list|,
name|vectorMapJoinVariation
argument_list|,
name|bigTableColumnNames
argument_list|,
name|bigTableTypeInfos
argument_list|,
name|bigTableKeyColumnNums
argument_list|,
name|smallTableValueColumnNames
argument_list|,
name|smallTableValueTypeInfos
argument_list|,
name|bigTableRetainColumnNums
argument_list|,
name|smallTableRetainKeyColumnNums
argument_list|,
name|smallTableRetainValueColumnNums
argument_list|,
name|smallTableGenerationParameters
argument_list|)
expr_stmt|;
comment|// Prepare data.  Good for ANY implementation variation.
name|testData
operator|=
operator|new
name|MapJoinTestData
argument_list|(
name|rowCount
argument_list|,
name|testDesc
argument_list|,
name|seed
argument_list|,
name|seed
operator|*
literal|10
argument_list|)
expr_stmt|;
name|operator
operator|=
name|setupBenchmarkImplementation
argument_list|(
name|mapJoinImplementation
argument_list|,
name|testDesc
argument_list|,
name|testData
argument_list|)
expr_stmt|;
name|isVectorOutput
operator|=
name|isVectorOutput
argument_list|(
name|mapJoinImplementation
argument_list|)
expr_stmt|;
comment|/*      * We don't measure data generation execution cost -- generate the big table into memory first.      */
if|if
condition|(
operator|!
name|isVectorOutput
condition|)
block|{
name|bigTableRows
operator|=
name|VectorBatchGenerateUtil
operator|.
name|generateRowObjectArray
argument_list|(
name|testDesc
operator|.
name|bigTableKeyTypeInfos
argument_list|,
name|testData
operator|.
name|getBigTableBatchStream
argument_list|()
argument_list|,
name|testData
operator|.
name|getBigTableBatch
argument_list|()
argument_list|,
name|testDesc
operator|.
name|outputObjectInspectors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bigTableBatches
operator|=
name|VectorBatchGenerateUtil
operator|.
name|generateBatchArray
argument_list|(
name|testData
operator|.
name|getBigTableBatchStream
argument_list|()
argument_list|,
name|testData
operator|.
name|getBigTableBatch
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isVectorOutput
parameter_list|(
name|MapJoinTestImplementation
name|mapJoinImplementation
parameter_list|)
block|{
return|return
operator|(
name|mapJoinImplementation
operator|!=
name|MapJoinTestImplementation
operator|.
name|ROW_MODE_HASH_MAP
operator|&&
name|mapJoinImplementation
operator|!=
name|MapJoinTestImplementation
operator|.
name|ROW_MODE_OPTIMIZED
operator|)
return|;
block|}
specifier|protected
specifier|static
name|MapJoinOperator
name|setupBenchmarkImplementation
parameter_list|(
name|MapJoinTestImplementation
name|mapJoinImplementation
parameter_list|,
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|MapJoinTestData
name|testData
parameter_list|)
throws|throws
name|Exception
block|{
comment|// UNDONE: Parameterize for implementation variation?
name|MapJoinDesc
name|mapJoinDesc
init|=
name|MapJoinTestConfig
operator|.
name|createMapJoinDesc
argument_list|(
name|testDesc
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isVectorOutput
init|=
name|isVectorOutput
argument_list|(
name|mapJoinImplementation
argument_list|)
decl_stmt|;
comment|// This collector is just a row counter.
name|Operator
argument_list|<
name|?
extends|extends
name|OperatorDesc
argument_list|>
name|testCollectorOperator
init|=
operator|(
operator|!
name|isVectorOutput
condition|?
operator|new
name|CountCollectorTestOperator
argument_list|()
else|:
operator|new
name|CountVectorCollectorTestOperator
argument_list|()
operator|)
decl_stmt|;
name|MapJoinOperator
name|operator
init|=
name|MapJoinTestConfig
operator|.
name|createMapJoinImplementation
argument_list|(
name|mapJoinImplementation
argument_list|,
name|testDesc
argument_list|,
name|testCollectorOperator
argument_list|,
name|testData
argument_list|,
name|mapJoinDesc
argument_list|)
decl_stmt|;
return|return
name|operator
return|;
block|}
specifier|private
specifier|static
name|void
name|executeBenchmarkImplementationRow
parameter_list|(
name|MapJoinTestImplementation
name|mapJoinImplementation
parameter_list|,
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|MapJoinTestData
name|testData
parameter_list|,
name|MapJoinOperator
name|operator
parameter_list|,
name|Object
index|[]
index|[]
name|bigTableRows
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|size
init|=
name|bigTableRows
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|operator
operator|.
name|process
argument_list|(
name|bigTableRows
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|operator
operator|.
name|closeOp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|executeBenchmarkImplementationVector
parameter_list|(
name|MapJoinTestImplementation
name|mapJoinImplementation
parameter_list|,
name|MapJoinTestDescription
name|testDesc
parameter_list|,
name|MapJoinTestData
name|testData
parameter_list|,
name|MapJoinOperator
name|operator
parameter_list|,
name|VectorizedRowBatch
index|[]
name|bigTableBatches
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|size
init|=
name|bigTableBatches
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|operator
operator|.
name|process
argument_list|(
name|bigTableBatches
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|operator
operator|.
name|closeOp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

