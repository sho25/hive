begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|HiveConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|HiveDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|CookieStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|cookie
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|cookie
operator|.
name|BasicClientCookie
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|THttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * TestHttpCookieAuthenticationTest.  */
end_comment

begin_class
specifier|public
class|class
name|TestHttpCookieAuthenticationTest
block|{
specifier|private
specifier|static
name|MiniHS2
name|miniHS2
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startServices
parameter_list|()
throws|throws
name|Exception
block|{
name|miniHS2
operator|=
operator|new
name|MiniHS2
operator|.
name|Builder
argument_list|()
operator|.
name|withHTTPTransport
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configOverlay
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|configOverlay
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|configOverlay
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_COOKIE_AUTH_ENABLED
operator|.
name|varname
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|configOverlay
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|stopServices
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|miniHS2
operator|!=
literal|null
operator|&&
name|miniHS2
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|miniHS2
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|miniHS2
operator|=
literal|null
expr_stmt|;
name|MiniHS2
operator|.
name|cleanupLocalDir
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHttpJdbcCookies
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|sqlQuery
init|=
literal|"show tables"
decl_stmt|;
name|Class
operator|.
name|forName
argument_list|(
name|HiveDriver
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|username
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
argument_list|,
name|username
argument_list|,
literal|"bar"
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|CookieStore
name|cookieStore
init|=
name|getCookieStoreFromConnection
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cookieStore
argument_list|)
expr_stmt|;
comment|// Test that basic cookies worked
name|List
argument_list|<
name|Cookie
argument_list|>
name|cookies1
init|=
name|cookieStore
operator|.
name|getCookies
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cookies1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertNotNull
argument_list|(
name|statement
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|resultSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|sqlQuery
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check that cookies worked and still the same after a statement
name|List
argument_list|<
name|Cookie
argument_list|>
name|cookies2
init|=
name|cookieStore
operator|.
name|getCookies
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cookies2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cookies1
argument_list|,
name|cookies2
argument_list|)
expr_stmt|;
comment|// Empty out cookies to make sure same connection gets new cookies
name|cookieStore
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|cookieStore
operator|.
name|getCookies
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertNotNull
argument_list|(
name|statement
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|resultSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|sqlQuery
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check that cookies worked after clearing and got back new cookie
name|List
argument_list|<
name|Cookie
argument_list|>
name|cookies3
init|=
name|cookieStore
operator|.
name|getCookies
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cookies3
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|cookies1
argument_list|,
name|cookies3
argument_list|)
expr_stmt|;
comment|// Get original cookie to copy metadata
name|Cookie
name|originalCookie
init|=
name|cookies3
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Put in a bad client side cookie - ensure HS2 authenticates and overwrites
name|BasicClientCookie
name|badCookie
init|=
operator|new
name|BasicClientCookie
argument_list|(
literal|"hive.server2.auth"
argument_list|,
literal|"bad"
argument_list|)
decl_stmt|;
name|badCookie
operator|.
name|setDomain
argument_list|(
name|originalCookie
operator|.
name|getDomain
argument_list|()
argument_list|)
expr_stmt|;
name|badCookie
operator|.
name|setPath
argument_list|(
name|originalCookie
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|badCookie
operator|.
name|setExpiryDate
argument_list|(
name|originalCookie
operator|.
name|getExpiryDate
argument_list|()
argument_list|)
expr_stmt|;
name|cookieStore
operator|.
name|addCookie
argument_list|(
name|badCookie
argument_list|)
expr_stmt|;
comment|// Check that putting in the bad cookie overrode the original cookie
name|List
argument_list|<
name|Cookie
argument_list|>
name|cookies4
init|=
name|cookieStore
operator|.
name|getCookies
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cookies4
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cookies4
operator|.
name|contains
argument_list|(
name|badCookie
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertNotNull
argument_list|(
name|statement
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|resultSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|sqlQuery
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check that cookies worked and replaced the bad cookie
name|List
argument_list|<
name|Cookie
argument_list|>
name|cookies5
init|=
name|cookieStore
operator|.
name|getCookies
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cookies5
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|cookies4
argument_list|,
name|cookies5
argument_list|)
expr_stmt|;
try|try
init|(
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|assertNotNull
argument_list|(
name|statement
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|resultSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|sqlQuery
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check that cookies worked and didn't get replaced
name|List
argument_list|<
name|Cookie
argument_list|>
name|cookies6
init|=
name|cookieStore
operator|.
name|getCookies
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cookies6
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cookies5
argument_list|,
name|cookies6
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ((InternalHttpClient) ((THttpClient) ((HiveConnection) connection).transport).client).cookieStore.getCookies()
specifier|private
name|CookieStore
name|getCookieStoreFromConnection
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
name|CookieStore
name|cookieStore
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|connection
operator|instanceof
name|HiveConnection
condition|)
block|{
name|HiveConnection
name|hiveConnection
init|=
operator|(
name|HiveConnection
operator|)
name|connection
decl_stmt|;
name|Field
name|transportField
init|=
name|hiveConnection
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"transport"
argument_list|)
decl_stmt|;
name|transportField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TTransport
name|transport
init|=
operator|(
name|TTransport
operator|)
name|transportField
operator|.
name|get
argument_list|(
name|hiveConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|transport
operator|instanceof
name|THttpClient
condition|)
block|{
name|THttpClient
name|httpTransport
init|=
operator|(
name|THttpClient
operator|)
name|transport
decl_stmt|;
name|Field
name|clientField
init|=
name|httpTransport
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"client"
argument_list|)
decl_stmt|;
name|clientField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|HttpClient
name|httpClient
init|=
operator|(
name|HttpClient
operator|)
name|clientField
operator|.
name|get
argument_list|(
name|httpTransport
argument_list|)
decl_stmt|;
name|Field
name|cookieStoreField
init|=
name|httpClient
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"cookieStore"
argument_list|)
decl_stmt|;
name|cookieStoreField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cookieStore
operator|=
operator|(
name|CookieStore
operator|)
name|cookieStoreField
operator|.
name|get
argument_list|(
name|httpClient
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cookieStore
return|;
block|}
block|}
end_class

end_unit

