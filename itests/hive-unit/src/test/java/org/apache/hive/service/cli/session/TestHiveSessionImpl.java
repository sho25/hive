begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|session
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|HiveSQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|OperationHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|operation
operator|.
name|ExecuteStatementOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|operation
operator|.
name|OperationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveSessionImpl
block|{
comment|/**    * Verifying OperationManager.closeOperation(opHandle) is invoked when    * get HiveSQLException during sync query    * @throws HiveSQLException    */
annotation|@
name|Test
specifier|public
name|void
name|testLeakOperationHandle
parameter_list|()
throws|throws
name|HiveSQLException
block|{
comment|//create HiveSessionImpl object
name|TProtocolVersion
name|protocol
init|=
name|TProtocolVersion
operator|.
name|HIVE_CLI_SERVICE_PROTOCOL_V2
decl_stmt|;
name|String
name|username
init|=
literal|""
decl_stmt|;
name|String
name|password
init|=
literal|""
decl_stmt|;
name|HiveConf
name|serverhiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|String
name|ipAddress
init|=
literal|null
decl_stmt|;
name|HiveSessionImpl
name|session
init|=
operator|new
name|HiveSessionImpl
argument_list|(
literal|null
argument_list|,
name|protocol
argument_list|,
name|username
argument_list|,
name|password
argument_list|,
name|serverhiveConf
argument_list|,
name|ipAddress
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|void
name|acquire
parameter_list|(
name|boolean
name|userAccess
parameter_list|,
name|boolean
name|isOperation
parameter_list|)
block|{       }
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|void
name|release
parameter_list|(
name|boolean
name|userAccess
parameter_list|,
name|boolean
name|isOperation
parameter_list|)
block|{       }
block|}
decl_stmt|;
comment|//mock operationManager for session
name|OperationManager
name|operationManager
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|OperationManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|session
operator|.
name|setOperationManager
argument_list|(
name|operationManager
argument_list|)
expr_stmt|;
comment|//mock operation and opHandle for operationManager
name|ExecuteStatementOperation
name|operation
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ExecuteStatementOperation
operator|.
name|class
argument_list|)
decl_stmt|;
name|OperationHandle
name|opHandle
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|OperationHandle
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|operation
operator|.
name|getHandle
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|hql
init|=
literal|"drop table if exists table_not_exists"
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|operationManager
operator|.
name|newExecuteStatementOperation
argument_list|(
name|same
argument_list|(
name|session
argument_list|)
argument_list|,
name|eq
argument_list|(
name|hql
argument_list|)
argument_list|,
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|0L
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|operation
argument_list|)
expr_stmt|;
try|try
block|{
comment|//Running a normal async query with no exceptions,then no need to close opHandle
name|session
operator|.
name|open
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|executeStatementAsync
argument_list|(
name|hql
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|operationManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|closeOperation
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
comment|// Throw an HiveSqlException when do async calls
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|HiveSQLException
argument_list|(
literal|"Fail for clean up test"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|operation
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|session
operator|.
name|executeStatementAsync
argument_list|(
name|hql
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"HiveSqlException expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveSQLException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
literal|"Fail for clean up test"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"unexpected exception:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//operationManager.closeOperation() is expected to be invoked once
name|Mockito
operator|.
name|verify
argument_list|(
name|operationManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|closeOperation
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

