begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|thrift
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|HttpBasicAuthInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|auth
operator|.
name|HiveAuthFactory
operator|.
name|AuthTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|DefaultHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|THttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  * TestThriftHttpCLIService.  * This tests ThriftCLIService started in http mode.  *  */
end_comment

begin_class
specifier|public
class|class
name|TestThriftHttpCLIService
extends|extends
name|ThriftCLIServiceTest
block|{
specifier|private
specifier|static
name|String
name|transportMode
init|=
literal|"http"
decl_stmt|;
specifier|private
specifier|static
name|String
name|thriftHttpPath
init|=
literal|"cliservice"
decl_stmt|;
specifier|private
specifier|static
name|TTransport
name|transport
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up the base class
name|ThriftCLIServiceTest
operator|.
name|setUpBeforeClass
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|hiveServer2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_ENABLE_DOAS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_BIND_HOST
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_PORT
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_AUTHENTICATION
argument_list|,
name|AuthTypes
operator|.
name|NOSASL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
argument_list|,
name|transportMode
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_PATH
argument_list|,
name|thriftHttpPath
argument_list|)
expr_stmt|;
name|startHiveServer2WithConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|// Open an http transport
comment|// Fail if the transport doesn't open
name|transport
operator|=
name|createHttpTransport
argument_list|()
expr_stmt|;
try|try
block|{
name|transport
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|ThriftCLIServiceTest
operator|.
name|tearDownAfterClass
argument_list|()
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create and set the client before every test from the transport
name|initClient
argument_list|(
name|transport
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|Override
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{    }
annotation|@
name|Test
specifier|public
name|void
name|testIncompatibeClientServer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// A binary client communicating with an http server should throw an exception
comment|// Close the older http client transport
comment|// The server is already running in Http mode
if|if
condition|(
name|transport
operator|!=
literal|null
condition|)
block|{
name|transport
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Create a binary transport and init the client
name|transport
operator|=
name|createBinaryTransport
argument_list|()
expr_stmt|;
comment|// Create and set the client
name|initClient
argument_list|(
name|transport
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|client
argument_list|)
expr_stmt|;
comment|// This will throw an expected exception since client-server modes are incompatible
name|testOpenSessionExpectedException
argument_list|()
expr_stmt|;
comment|// Close binary client transport
if|if
condition|(
name|transport
operator|!=
literal|null
condition|)
block|{
name|transport
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Create http transport (client is inited in setUp before every test from the transport)
name|transport
operator|=
name|createHttpTransport
argument_list|()
expr_stmt|;
try|try
block|{
name|transport
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncorrectHttpPath
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Close the older http client transport
if|if
condition|(
name|transport
operator|!=
literal|null
condition|)
block|{
name|transport
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Create an http transport with incorrect http path endpoint
name|thriftHttpPath
operator|=
literal|"wrong_path"
expr_stmt|;
name|transport
operator|=
name|createHttpTransport
argument_list|()
expr_stmt|;
comment|// Create and set the client
name|initClient
argument_list|(
name|transport
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|client
argument_list|)
expr_stmt|;
comment|// This will throw an expected exception since
comment|// client is communicating with the wrong http service endpoint
name|testOpenSessionExpectedException
argument_list|()
expr_stmt|;
comment|// Close incorrect client transport
comment|// Reinit http client transport
name|thriftHttpPath
operator|=
literal|"cliservice"
expr_stmt|;
if|if
condition|(
name|transport
operator|!=
literal|null
condition|)
block|{
name|transport
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|transport
operator|=
name|createHttpTransport
argument_list|()
expr_stmt|;
try|try
block|{
name|transport
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|TTransport
name|createHttpTransport
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultHttpClient
name|httpClient
init|=
operator|new
name|DefaultHttpClient
argument_list|()
decl_stmt|;
name|String
name|httpUrl
init|=
name|transportMode
operator|+
literal|"://"
operator|+
name|host
operator|+
literal|":"
operator|+
name|port
operator|+
literal|"/"
operator|+
name|thriftHttpPath
operator|+
literal|"/"
decl_stmt|;
name|httpClient
operator|.
name|addRequestInterceptor
argument_list|(
operator|new
name|HttpBasicAuthInterceptor
argument_list|(
name|anonymousUser
argument_list|,
name|anonymousPasswd
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|THttpClient
argument_list|(
name|httpUrl
argument_list|,
name|httpClient
argument_list|)
return|;
block|}
block|}
end_class

end_unit

