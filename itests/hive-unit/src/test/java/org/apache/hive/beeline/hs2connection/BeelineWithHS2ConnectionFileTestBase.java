begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|hs2connection
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|BeeLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|CLIServiceClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|HiveSQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|OperationHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|RowSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|SessionHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|BeelineWithHS2ConnectionFileTestBase
block|{
specifier|protected
name|MiniHS2
name|miniHS2
decl_stmt|;
specifier|protected
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|String
name|tableName
init|=
literal|"testBeelineTable"
decl_stmt|;
specifier|protected
name|String
name|dataFileDir
init|=
name|hiveConf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|LOCALHOST_KEY_STORE_NAME
init|=
literal|"keystore.jks"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|TRUST_STORE_NAME
init|=
literal|"truststore.jks"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|KEY_STORE_TRUST_STORE_PASSWORD
init|=
literal|"HiveJdbc"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|HS2_HTTP_MODE
init|=
literal|"http"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|HS2_HTTP_ENDPOINT
init|=
literal|"cliservice"
decl_stmt|;
specifier|private
specifier|final
name|String
name|fileLocation
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
literal|"testHs2ConnectionConfig.xml"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|JAVA_TRUST_STORE_PROP
init|=
literal|"javax.net.ssl.trustStore"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|JAVA_TRUST_STORE_PASS_PROP
init|=
literal|"javax.net.ssl.trustStorePassword"
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
class|class
name|TestBeeLine
extends|extends
name|BeeLine
block|{
name|UserHS2ConnectionFileParser
name|testHs2ConfigFileManager
decl_stmt|;
name|ByteArrayOutputStream
name|os
decl_stmt|;
name|TestBeeLine
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|defaultHS2ConnectionFiles
parameter_list|)
block|{
name|testHs2ConfigFileManager
operator|=
operator|new
name|UserHS2ConnectionFileParser
argument_list|(
name|defaultHS2ConnectionFiles
argument_list|)
expr_stmt|;
name|os
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|PrintStream
name|beelineOutputStream
init|=
operator|new
name|PrintStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|setOutputStream
argument_list|(
name|beelineOutputStream
argument_list|)
expr_stmt|;
name|setErrorStream
argument_list|(
name|beelineOutputStream
argument_list|)
expr_stmt|;
block|}
name|TestBeeLine
parameter_list|()
block|{
name|testHs2ConfigFileManager
operator|=
operator|new
name|UserHS2ConnectionFileParser
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|os
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|PrintStream
name|beelineOutputStream
init|=
operator|new
name|PrintStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|setOutputStream
argument_list|(
name|beelineOutputStream
argument_list|)
expr_stmt|;
name|setErrorStream
argument_list|(
name|beelineOutputStream
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getOutput
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
return|return
name|os
operator|.
name|toString
argument_list|(
literal|"UTF8"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|UserHS2ConnectionFileParser
name|getUserHS2ConnFileParser
parameter_list|()
block|{
return|return
name|testHs2ConfigFileManager
return|;
block|}
annotation|@
name|Override
specifier|public
name|HS2ConnectionFileParser
name|getHiveSiteHS2ConnectionFileParser
parameter_list|()
block|{
name|HiveSiteHS2ConnectionFileParser
name|ret
init|=
operator|new
name|HiveSiteHS2ConnectionFileParser
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setHiveConf
argument_list|(
name|miniHS2
operator|.
name|getHiveConf
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
comment|/*    * Wrapper class to write a HS2ConnectionConfig file    */
specifier|protected
class|class
name|Hs2ConnectionXmlConfigFileWriter
block|{
specifier|private
specifier|final
name|PrintWriter
name|writer
decl_stmt|;
specifier|private
specifier|final
name|File
name|file
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|Hs2ConnectionXmlConfigFileWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|fileLocation
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|file
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|PrintWriter
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|writeProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|path
parameter_list|()
block|{
return|return
name|file
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
specifier|protected
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|conf
operator|.
name|writeXml
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniHS2
operator|.
name|cleanupLocalDir
argument_list|()
expr_stmt|;
name|Class
operator|.
name|forName
argument_list|(
name|MiniHS2
operator|.
name|getJdbcDriverName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniHS2
operator|.
name|cleanupLocalDir
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|DriverManager
operator|.
name|setLoginTimeout
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.data.files"
argument_list|,
literal|""
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dataFileDir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.data.files"
argument_list|)
expr_stmt|;
block|}
name|dataFileDir
operator|=
name|dataFileDir
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"c:"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|miniHS2
operator|=
name|getNewMiniHS2
argument_list|()
expr_stmt|;
name|confOverlay
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
operator|.
name|varname
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|MiniHS2
name|getNewMiniHS2
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|MiniHS2
operator|.
name|Builder
argument_list|()
operator|.
name|withConf
argument_list|(
name|hiveConf
argument_list|)
operator|.
name|cleanupLocalDirOnStartup
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|miniHS2
operator|!=
literal|null
operator|&&
name|miniHS2
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|miniHS2
operator|=
literal|null
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
name|JAVA_TRUST_STORE_PROP
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
name|JAVA_TRUST_STORE_PASS_PROP
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createTable
parameter_list|()
throws|throws
name|HiveSQLException
block|{
name|CLIServiceClient
name|serviceClient
init|=
name|miniHS2
operator|.
name|getServiceClient
argument_list|()
decl_stmt|;
name|SessionHandle
name|sessHandle
init|=
name|serviceClient
operator|.
name|openSession
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (id INT)"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|OperationHandle
name|opHandle
init|=
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"SHOW TABLES"
argument_list|,
name|confOverlay
argument_list|)
decl_stmt|;
name|RowSet
name|rowSet
init|=
name|serviceClient
operator|.
name|fetchResults
argument_list|(
name|opHandle
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|rowSet
operator|.
name|numRows
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|testBeeLineConnection
parameter_list|(
name|String
name|path
parameter_list|,
name|String
index|[]
name|beelineArgs
parameter_list|,
name|String
name|expectedOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|TestBeeLine
name|beeLine
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|testLocations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|testLocations
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|beeLine
operator|=
operator|new
name|TestBeeLine
argument_list|(
name|testLocations
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|beeLine
operator|=
operator|new
name|TestBeeLine
argument_list|()
expr_stmt|;
block|}
name|beeLine
operator|.
name|begin
argument_list|(
name|beelineArgs
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|beeLine
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Output "
operator|+
name|output
operator|+
literal|" does not contain "
operator|+
name|expectedOutput
argument_list|,
name|output
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedOutput
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|beeLine
operator|!=
literal|null
condition|)
block|{
name|beeLine
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

