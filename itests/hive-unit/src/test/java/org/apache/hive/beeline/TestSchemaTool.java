begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreSchemaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|HiveSchemaHelper
operator|.
name|NestedScriptParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|HiveSchemaHelper
operator|.
name|PostgresCommandParser
import|;
end_import

begin_class
specifier|public
class|class
name|TestSchemaTool
extends|extends
name|TestCase
block|{
specifier|private
name|HiveSchemaTool
name|schemaTool
decl_stmt|;
specifier|private
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
name|String
name|testMetastoreDB
decl_stmt|;
specifier|private
name|PrintStream
name|errStream
decl_stmt|;
specifier|private
name|PrintStream
name|outStream
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|testMetastoreDB
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
literal|"test_metastore-"
operator|+
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORECONNECTURLKEY
operator|.
name|varname
argument_list|,
literal|"jdbc:derby:"
operator|+
name|testMetastoreDB
operator|+
literal|";create=true"
argument_list|)
expr_stmt|;
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|schemaTool
operator|=
operator|new
name|HiveSchemaTool
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|,
literal|"target/tmp"
argument_list|)
argument_list|,
name|hiveConf
argument_list|,
literal|"derby"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"beeLine.system.exit"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|errStream
operator|=
name|System
operator|.
name|err
expr_stmt|;
name|outStream
operator|=
name|System
operator|.
name|out
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|metaStoreDir
init|=
operator|new
name|File
argument_list|(
name|testMetastoreDB
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaStoreDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|forceDeleteOnExit
argument_list|(
name|metaStoreDir
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setOut
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|errStream
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the sequence validation functionality    * @throws Exception    */
specifier|public
name|void
name|testValidateSequences
parameter_list|()
throws|throws
name|Exception
block|{
name|schemaTool
operator|.
name|doInit
argument_list|()
expr_stmt|;
comment|// Test empty database
name|boolean
name|isValid
init|=
operator|(
name|boolean
operator|)
name|schemaTool
operator|.
name|validateSequences
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
comment|// Test valid case
name|String
index|[]
name|scripts
init|=
operator|new
name|String
index|[]
block|{
literal|"insert into SEQUENCE_TABLE values('org.apache.hadoop.hive.metastore.model.MDatabase', 100)"
block|,
literal|"insert into DBS values(99, 'test db1', 'hdfs:///tmp', 'db1', 'test', 'test')"
block|}
decl_stmt|;
name|File
name|scriptFile
init|=
name|generateTestScript
argument_list|(
name|scripts
argument_list|)
decl_stmt|;
name|schemaTool
operator|.
name|runBeeLine
argument_list|(
name|scriptFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|isValid
operator|=
name|schemaTool
operator|.
name|validateSequences
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
comment|// Test invalid case
name|scripts
operator|=
operator|new
name|String
index|[]
block|{
literal|"delete from SEQUENCE_TABLE"
block|,
literal|"delete from DBS"
block|,
literal|"insert into SEQUENCE_TABLE values('org.apache.hadoop.hive.metastore.model.MDatabase', 100)"
block|,
literal|"insert into DBS values(102, 'test db1', 'hdfs:///tmp', 'db1', 'test', 'test')"
block|}
expr_stmt|;
name|scriptFile
operator|=
name|generateTestScript
argument_list|(
name|scripts
argument_list|)
expr_stmt|;
name|schemaTool
operator|.
name|runBeeLine
argument_list|(
name|scriptFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|isValid
operator|=
name|schemaTool
operator|.
name|validateSequences
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to validate that all tables exist in the HMS metastore.    * @throws Exception    */
specifier|public
name|void
name|testValidateSchemaTables
parameter_list|()
throws|throws
name|Exception
block|{
name|schemaTool
operator|.
name|doInit
argument_list|(
literal|"2.0.0"
argument_list|)
expr_stmt|;
name|boolean
name|isValid
init|=
operator|(
name|boolean
operator|)
name|schemaTool
operator|.
name|validateSchemaTables
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
comment|// upgrade to 2.2.0 schema and re-validate
name|schemaTool
operator|.
name|doUpgrade
argument_list|(
literal|"2.2.0"
argument_list|)
expr_stmt|;
name|isValid
operator|=
operator|(
name|boolean
operator|)
name|schemaTool
operator|.
name|validateSchemaTables
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
comment|// Simulate a missing table scenario by renaming a couple of tables
name|String
index|[]
name|scripts
init|=
operator|new
name|String
index|[]
block|{
literal|"RENAME TABLE SEQUENCE_TABLE to SEQUENCE_TABLE_RENAMED"
block|,
literal|"RENAME TABLE NUCLEUS_TABLES to NUCLEUS_TABLES_RENAMED"
block|}
decl_stmt|;
name|File
name|scriptFile
init|=
name|generateTestScript
argument_list|(
name|scripts
argument_list|)
decl_stmt|;
name|schemaTool
operator|.
name|runBeeLine
argument_list|(
name|scriptFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|isValid
operator|=
name|schemaTool
operator|.
name|validateSchemaTables
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
comment|// Restored the renamed tables
name|scripts
operator|=
operator|new
name|String
index|[]
block|{
literal|"RENAME TABLE SEQUENCE_TABLE_RENAMED to SEQUENCE_TABLE"
block|,
literal|"RENAME TABLE NUCLEUS_TABLES_RENAMED to NUCLEUS_TABLES"
block|}
expr_stmt|;
name|scriptFile
operator|=
name|generateTestScript
argument_list|(
name|scripts
argument_list|)
expr_stmt|;
name|schemaTool
operator|.
name|runBeeLine
argument_list|(
name|scriptFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|isValid
operator|=
name|schemaTool
operator|.
name|validateSchemaTables
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test dryrun of schema initialization    * @throws Exception    */
specifier|public
name|void
name|testSchemaInitDryRun
parameter_list|()
throws|throws
name|Exception
block|{
name|schemaTool
operator|.
name|setDryRun
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|schemaTool
operator|.
name|doInit
argument_list|(
literal|"0.7.0"
argument_list|)
expr_stmt|;
name|schemaTool
operator|.
name|setDryRun
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|schemaTool
operator|.
name|verifySchemaVersion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveMetaException
name|e
parameter_list|)
block|{
comment|// The connection should fail since it the dry run
return|return;
block|}
name|fail
argument_list|(
literal|"Dry run shouldn't create actual metastore"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test dryrun of schema upgrade    * @throws Exception    */
specifier|public
name|void
name|testSchemaUpgradeDryRun
parameter_list|()
throws|throws
name|Exception
block|{
name|schemaTool
operator|.
name|doInit
argument_list|(
literal|"0.7.0"
argument_list|)
expr_stmt|;
name|schemaTool
operator|.
name|setDryRun
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|schemaTool
operator|.
name|doUpgrade
argument_list|(
literal|"0.7.0"
argument_list|)
expr_stmt|;
name|schemaTool
operator|.
name|setDryRun
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|schemaTool
operator|.
name|verifySchemaVersion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveMetaException
name|e
parameter_list|)
block|{
comment|// The connection should fail since it the dry run
return|return;
block|}
name|fail
argument_list|(
literal|"Dry run shouldn't upgrade metastore schema"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test schema initialization    * @throws Exception    */
specifier|public
name|void
name|testSchemaInit
parameter_list|()
throws|throws
name|Exception
block|{
name|schemaTool
operator|.
name|doInit
argument_list|(
name|MetaStoreSchemaInfo
operator|.
name|getHiveSchemaVersion
argument_list|()
argument_list|)
expr_stmt|;
name|schemaTool
operator|.
name|verifySchemaVersion
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test schema upgrade    * @throws Exception    */
specifier|public
name|void
name|testSchemaUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|foundException
init|=
literal|false
decl_stmt|;
comment|// Initialize 0.7.0 schema
name|schemaTool
operator|.
name|doInit
argument_list|(
literal|"0.7.0"
argument_list|)
expr_stmt|;
comment|// verify that driver fails due to older version schema
try|try
block|{
name|schemaTool
operator|.
name|verifySchemaVersion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveMetaException
name|e
parameter_list|)
block|{
comment|// Expected to fail due to old schema
name|foundException
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|foundException
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Hive operations shouldn't pass with older version schema"
argument_list|)
throw|;
block|}
comment|// Generate dummy pre-upgrade script with errors
name|String
name|invalidPreUpgradeScript
init|=
name|writeDummyPreUpgradeScript
argument_list|(
literal|0
argument_list|,
literal|"upgrade-0.11.0-to-0.12.0.derby.sql"
argument_list|,
literal|"foo bar;"
argument_list|)
decl_stmt|;
comment|// Generate dummy pre-upgrade scripts with valid SQL
name|String
name|validPreUpgradeScript0
init|=
name|writeDummyPreUpgradeScript
argument_list|(
literal|0
argument_list|,
literal|"upgrade-0.12.0-to-0.13.0.derby.sql"
argument_list|,
literal|"CREATE TABLE schema_test0 (id integer);"
argument_list|)
decl_stmt|;
name|String
name|validPreUpgradeScript1
init|=
name|writeDummyPreUpgradeScript
argument_list|(
literal|1
argument_list|,
literal|"upgrade-0.12.0-to-0.13.0.derby.sql"
argument_list|,
literal|"CREATE TABLE schema_test1 (id integer);"
argument_list|)
decl_stmt|;
comment|// Capture system out and err
name|schemaTool
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OutputStream
name|stderr
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|errPrintStream
init|=
operator|new
name|PrintStream
argument_list|(
name|stderr
argument_list|)
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|errPrintStream
argument_list|)
expr_stmt|;
name|OutputStream
name|stdout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|outPrintStream
init|=
operator|new
name|PrintStream
argument_list|(
name|stdout
argument_list|)
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|outPrintStream
argument_list|)
expr_stmt|;
comment|// Upgrade schema from 0.7.0 to latest
name|schemaTool
operator|.
name|doUpgrade
argument_list|(
literal|"0.7.0"
argument_list|)
expr_stmt|;
comment|// Verify that the schemaTool ran pre-upgrade scripts and ignored errors
name|assertTrue
argument_list|(
name|stderr
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|invalidPreUpgradeScript
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stderr
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|stderr
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|validPreUpgradeScript0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|stderr
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|validPreUpgradeScript1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stdout
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|validPreUpgradeScript0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stdout
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|validPreUpgradeScript1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that driver works fine with latest schema
name|schemaTool
operator|.
name|verifySchemaVersion
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test script formatting    * @throws Exception    */
specifier|public
name|void
name|testScripts
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testScript
index|[]
init|=
block|{
literal|"-- this is a comment"
block|,
literal|"DROP TABLE IF EXISTS fooTab;"
block|,
literal|"/*!1234 this is comment code like mysql */;"
block|,
literal|"CREATE TABLE fooTab(id INTEGER);"
block|,
literal|"DROP TABLE footab;"
block|,
literal|"-- ending comment"
block|}
decl_stmt|;
name|String
name|resultScript
index|[]
init|=
block|{
literal|"DROP TABLE IF EXISTS fooTab"
block|,
literal|"/*!1234 this is comment code like mysql */"
block|,
literal|"CREATE TABLE fooTab(id INTEGER)"
block|,
literal|"DROP TABLE footab"
block|,     }
decl_stmt|;
name|String
name|expectedSQL
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|resultScript
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|File
name|testScriptFile
init|=
name|generateTestScript
argument_list|(
name|testScript
argument_list|)
decl_stmt|;
name|String
name|flattenedSql
init|=
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
literal|"derby"
argument_list|)
operator|.
name|buildCommand
argument_list|(
name|testScriptFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|testScriptFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedSQL
argument_list|,
name|flattenedSql
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test nested script formatting    * @throws Exception    */
specifier|public
name|void
name|testNestedScriptsForDerby
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|childTab1
init|=
literal|"childTab1"
decl_stmt|;
name|String
name|childTab2
init|=
literal|"childTab2"
decl_stmt|;
name|String
name|parentTab
init|=
literal|"fooTab"
decl_stmt|;
name|String
name|childTestScript1
index|[]
init|=
block|{
literal|"-- this is a comment "
block|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|childTab1
operator|+
literal|";"
block|,
literal|"CREATE TABLE "
operator|+
name|childTab1
operator|+
literal|"(id INTEGER);"
block|,
literal|"DROP TABLE "
operator|+
name|childTab1
operator|+
literal|";"
block|}
decl_stmt|;
name|String
name|childTestScript2
index|[]
init|=
block|{
literal|"-- this is a comment"
block|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|childTab2
operator|+
literal|";"
block|,
literal|"CREATE TABLE "
operator|+
name|childTab2
operator|+
literal|"(id INTEGER);"
block|,
literal|"-- this is also a comment"
block|,
literal|"DROP TABLE "
operator|+
name|childTab2
operator|+
literal|";"
block|}
decl_stmt|;
name|String
name|parentTestScript
index|[]
init|=
block|{
literal|" -- this is a comment"
block|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|parentTab
operator|+
literal|";"
block|,
literal|" -- this is another comment "
block|,
literal|"CREATE TABLE "
operator|+
name|parentTab
operator|+
literal|"(id INTEGER);"
block|,
literal|"RUN '"
operator|+
name|generateTestScript
argument_list|(
name|childTestScript1
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|"';"
block|,
literal|"DROP TABLE "
operator|+
name|parentTab
operator|+
literal|";"
block|,
literal|"RUN '"
operator|+
name|generateTestScript
argument_list|(
name|childTestScript2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|"';"
block|,
literal|"--ending comment "
block|,       }
decl_stmt|;
name|File
name|testScriptFile
init|=
name|generateTestScript
argument_list|(
name|parentTestScript
argument_list|)
decl_stmt|;
name|String
name|flattenedSql
init|=
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
literal|"derby"
argument_list|)
operator|.
name|buildCommand
argument_list|(
name|testScriptFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|testScriptFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
literal|"RUN"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
name|childTab1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
name|childTab2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
name|parentTab
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test nested script formatting    * @throws Exception    */
specifier|public
name|void
name|testNestedScriptsForMySQL
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|childTab1
init|=
literal|"childTab1"
decl_stmt|;
name|String
name|childTab2
init|=
literal|"childTab2"
decl_stmt|;
name|String
name|parentTab
init|=
literal|"fooTab"
decl_stmt|;
name|String
name|childTestScript1
index|[]
init|=
block|{
literal|"/* this is a comment code */"
block|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|childTab1
operator|+
literal|";"
block|,
literal|"CREATE TABLE "
operator|+
name|childTab1
operator|+
literal|"(id INTEGER);"
block|,
literal|"DROP TABLE "
operator|+
name|childTab1
operator|+
literal|";"
block|}
decl_stmt|;
name|String
name|childTestScript2
index|[]
init|=
block|{
literal|"/* this is a special exec code */;"
block|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|childTab2
operator|+
literal|";"
block|,
literal|"CREATE TABLE "
operator|+
name|childTab2
operator|+
literal|"(id INTEGER);"
block|,
literal|"-- this is a comment"
block|,
literal|"DROP TABLE "
operator|+
name|childTab2
operator|+
literal|";"
block|}
decl_stmt|;
name|String
name|parentTestScript
index|[]
init|=
block|{
literal|" -- this is a comment"
block|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|parentTab
operator|+
literal|";"
block|,
literal|" /* this is special exec code */;"
block|,
literal|"CREATE TABLE "
operator|+
name|parentTab
operator|+
literal|"(id INTEGER);"
block|,
literal|"SOURCE "
operator|+
name|generateTestScript
argument_list|(
name|childTestScript1
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|";"
block|,
literal|"DROP TABLE "
operator|+
name|parentTab
operator|+
literal|";"
block|,
literal|"SOURCE "
operator|+
name|generateTestScript
argument_list|(
name|childTestScript2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|";"
block|,
literal|"--ending comment "
block|,       }
decl_stmt|;
name|File
name|testScriptFile
init|=
name|generateTestScript
argument_list|(
name|parentTestScript
argument_list|)
decl_stmt|;
name|String
name|flattenedSql
init|=
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
literal|"mysql"
argument_list|)
operator|.
name|buildCommand
argument_list|(
name|testScriptFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|testScriptFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
literal|"RUN"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
name|childTab1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
name|childTab2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
name|parentTab
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test script formatting    * @throws Exception    */
specifier|public
name|void
name|testScriptWithDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testScript
index|[]
init|=
block|{
literal|"-- this is a comment"
block|,
literal|"DROP TABLE IF EXISTS fooTab;"
block|,
literal|"DELIMITER $$"
block|,
literal|"/*!1234 this is comment code like mysql */$$"
block|,
literal|"CREATE TABLE fooTab(id INTEGER)$$"
block|,
literal|"CREATE PROCEDURE fooProc()"
block|,
literal|"SELECT * FROM fooTab;"
block|,
literal|"CALL barProc();"
block|,
literal|"END PROCEDURE$$"
block|,
literal|"DELIMITER ;"
block|,
literal|"DROP TABLE footab;"
block|,
literal|"-- ending comment"
block|}
decl_stmt|;
name|String
name|resultScript
index|[]
init|=
block|{
literal|"DROP TABLE IF EXISTS fooTab"
block|,
literal|"/*!1234 this is comment code like mysql */"
block|,
literal|"CREATE TABLE fooTab(id INTEGER)"
block|,
literal|"CREATE PROCEDURE fooProc()"
operator|+
literal|" "
operator|+
literal|"SELECT * FROM fooTab;"
operator|+
literal|" "
operator|+
literal|"CALL barProc();"
operator|+
literal|" "
operator|+
literal|"END PROCEDURE"
block|,
literal|"DROP TABLE footab"
block|,     }
decl_stmt|;
name|String
name|expectedSQL
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|resultScript
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|File
name|testScriptFile
init|=
name|generateTestScript
argument_list|(
name|testScript
argument_list|)
decl_stmt|;
name|NestedScriptParser
name|testDbParser
init|=
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
literal|"mysql"
argument_list|)
decl_stmt|;
name|String
name|flattenedSql
init|=
name|testDbParser
operator|.
name|buildCommand
argument_list|(
name|testScriptFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|testScriptFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedSQL
argument_list|,
name|flattenedSql
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test script formatting    * @throws Exception    */
specifier|public
name|void
name|testScriptMultiRowComment
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testScript
index|[]
init|=
block|{
literal|"-- this is a comment"
block|,
literal|"DROP TABLE IF EXISTS fooTab;"
block|,
literal|"DELIMITER $$"
block|,
literal|"/*!1234 this is comment code like mysql */$$"
block|,
literal|"CREATE TABLE fooTab(id INTEGER)$$"
block|,
literal|"DELIMITER ;"
block|,
literal|"/* multiline comment started "
block|,
literal|" * multiline comment continue"
block|,
literal|" * multiline comment ended */"
block|,
literal|"DROP TABLE footab;"
block|,
literal|"-- ending comment"
block|}
decl_stmt|;
name|String
name|parsedScript
index|[]
init|=
block|{
literal|"DROP TABLE IF EXISTS fooTab"
block|,
literal|"/*!1234 this is comment code like mysql */"
block|,
literal|"CREATE TABLE fooTab(id INTEGER)"
block|,
literal|"DROP TABLE footab"
block|,     }
decl_stmt|;
name|String
name|expectedSQL
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|parsedScript
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|File
name|testScriptFile
init|=
name|generateTestScript
argument_list|(
name|testScript
argument_list|)
decl_stmt|;
name|NestedScriptParser
name|testDbParser
init|=
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
literal|"mysql"
argument_list|)
decl_stmt|;
name|String
name|flattenedSql
init|=
name|testDbParser
operator|.
name|buildCommand
argument_list|(
name|testScriptFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|testScriptFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedSQL
argument_list|,
name|flattenedSql
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test nested script formatting    * @throws Exception    */
specifier|public
name|void
name|testNestedScriptsForOracle
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|childTab1
init|=
literal|"childTab1"
decl_stmt|;
name|String
name|childTab2
init|=
literal|"childTab2"
decl_stmt|;
name|String
name|parentTab
init|=
literal|"fooTab"
decl_stmt|;
name|String
name|childTestScript1
index|[]
init|=
block|{
literal|"-- this is a comment "
block|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|childTab1
operator|+
literal|";"
block|,
literal|"CREATE TABLE "
operator|+
name|childTab1
operator|+
literal|"(id INTEGER);"
block|,
literal|"DROP TABLE "
operator|+
name|childTab1
operator|+
literal|";"
block|}
decl_stmt|;
name|String
name|childTestScript2
index|[]
init|=
block|{
literal|"-- this is a comment"
block|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|childTab2
operator|+
literal|";"
block|,
literal|"CREATE TABLE "
operator|+
name|childTab2
operator|+
literal|"(id INTEGER);"
block|,
literal|"-- this is also a comment"
block|,
literal|"DROP TABLE "
operator|+
name|childTab2
operator|+
literal|";"
block|}
decl_stmt|;
name|String
name|parentTestScript
index|[]
init|=
block|{
literal|" -- this is a comment"
block|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|parentTab
operator|+
literal|";"
block|,
literal|" -- this is another comment "
block|,
literal|"CREATE TABLE "
operator|+
name|parentTab
operator|+
literal|"(id INTEGER);"
block|,
literal|"@"
operator|+
name|generateTestScript
argument_list|(
name|childTestScript1
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|";"
block|,
literal|"DROP TABLE "
operator|+
name|parentTab
operator|+
literal|";"
block|,
literal|"@"
operator|+
name|generateTestScript
argument_list|(
name|childTestScript2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|";"
block|,
literal|"--ending comment "
block|,       }
decl_stmt|;
name|File
name|testScriptFile
init|=
name|generateTestScript
argument_list|(
name|parentTestScript
argument_list|)
decl_stmt|;
name|String
name|flattenedSql
init|=
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
literal|"oracle"
argument_list|)
operator|.
name|buildCommand
argument_list|(
name|testScriptFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|testScriptFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
literal|"@"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
name|childTab1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
name|childTab2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
name|parentTab
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test script formatting    * @throws Exception    */
specifier|public
name|void
name|testPostgresFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testScript
index|[]
init|=
block|{
literal|"-- this is a comment"
block|,
literal|"DROP TABLE IF EXISTS fooTab;"
block|,
name|HiveSchemaHelper
operator|.
name|PostgresCommandParser
operator|.
name|POSTGRES_STANDARD_STRINGS_OPT
operator|+
literal|";"
block|,
literal|"CREATE TABLE fooTab(id INTEGER);"
block|,
literal|"DROP TABLE footab;"
block|,
literal|"-- ending comment"
block|}
decl_stmt|;
name|String
name|expectedScriptWithOptionPresent
index|[]
init|=
block|{
literal|"DROP TABLE IF EXISTS fooTab"
block|,
name|HiveSchemaHelper
operator|.
name|PostgresCommandParser
operator|.
name|POSTGRES_STANDARD_STRINGS_OPT
block|,
literal|"CREATE TABLE fooTab(id INTEGER)"
block|,
literal|"DROP TABLE footab"
block|,     }
decl_stmt|;
name|NestedScriptParser
name|noDbOptParser
init|=
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
literal|"postgres"
argument_list|)
decl_stmt|;
name|String
name|expectedSQL
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|expectedScriptWithOptionPresent
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|File
name|testScriptFile
init|=
name|generateTestScript
argument_list|(
name|testScript
argument_list|)
decl_stmt|;
name|String
name|flattenedSql
init|=
name|noDbOptParser
operator|.
name|buildCommand
argument_list|(
name|testScriptFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|testScriptFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedSQL
argument_list|,
name|flattenedSql
argument_list|)
expr_stmt|;
name|String
name|expectedScriptWithOptionAbsent
index|[]
init|=
block|{
literal|"DROP TABLE IF EXISTS fooTab"
block|,
literal|"CREATE TABLE fooTab(id INTEGER)"
block|,
literal|"DROP TABLE footab"
block|,     }
decl_stmt|;
name|NestedScriptParser
name|dbOptParser
init|=
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
literal|"postgres"
argument_list|,
name|PostgresCommandParser
operator|.
name|POSTGRES_SKIP_STANDARD_STRINGS_DBOPT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|expectedSQL
operator|=
name|StringUtils
operator|.
name|join
argument_list|(
name|expectedScriptWithOptionAbsent
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
expr_stmt|;
name|testScriptFile
operator|=
name|generateTestScript
argument_list|(
name|testScript
argument_list|)
expr_stmt|;
name|flattenedSql
operator|=
name|dbOptParser
operator|.
name|buildCommand
argument_list|(
name|testScriptFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|testScriptFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSQL
argument_list|,
name|flattenedSql
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test validate uri of locations    * @throws Exception    */
specifier|public
name|void
name|testValidateLocations
parameter_list|()
throws|throws
name|Exception
block|{
name|schemaTool
operator|.
name|doInit
argument_list|()
expr_stmt|;
name|String
name|defaultRoot
init|=
literal|"hdfs://myhost.com:8020"
decl_stmt|;
comment|//check empty DB
name|boolean
name|isValid
init|=
name|schemaTool
operator|.
name|validateLocations
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
name|isValid
operator|=
name|schemaTool
operator|.
name|validateLocations
argument_list|(
name|defaultRoot
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
name|String
name|dbmydbLocation
init|=
name|defaultRoot
operator|+
literal|"/user/hive/warehouse/mydb"
decl_stmt|;
comment|// Test valid case
name|String
index|[]
name|scripts
init|=
operator|new
name|String
index|[]
block|{
literal|"insert into DBS values(2, 'my db', 'hdfs://myhost.com:8020/user/hive/warehouse/mydb', 'mydb', 'public', 'role')"
block|,
literal|"insert into SDS(SD_ID,CD_ID,INPUT_FORMAT,IS_COMPRESSED,IS_STOREDASSUBDIRECTORIES,LOCATION,NUM_BUCKETS,OUTPUT_FORMAT,SERDE_ID) values (1,null,'org.apache.hadoop.mapred.TextInputFormat','N','N','hdfs://myhost.com:8020/user/hive/warehouse/mydb',-1,'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat',null)"
block|,
literal|"insert into SDS(SD_ID,CD_ID,INPUT_FORMAT,IS_COMPRESSED,IS_STOREDASSUBDIRECTORIES,LOCATION,NUM_BUCKETS,OUTPUT_FORMAT,SERDE_ID) values (2,null,'org.apache.hadoop.mapred.TextInputFormat','N','N','hdfs://myhost.com:8020/user/admin/2015_11_18',-1,'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat',null)"
block|,
literal|"insert into TBLS(TBL_ID,CREATE_TIME,DB_ID,LAST_ACCESS_TIME,OWNER,RETENTION,SD_ID,TBL_NAME,TBL_TYPE,VIEW_EXPANDED_TEXT,VIEW_ORIGINAL_TEXT) values (2 ,1435255431,2,0 ,'hive',0,1,'mytal','MANAGED_TABLE',NULL,NULL)"
block|,
literal|"insert into PARTITiONS(PART_ID,CREATE_TIME,LAST_ACCESS_TIME, PART_NAME,SD_ID,TBL_ID) values(1, 1441402388,0, 'd1=1/d2=1',2,2)"
block|}
decl_stmt|;
name|File
name|scriptFile
init|=
name|generateTestScript
argument_list|(
name|scripts
argument_list|)
decl_stmt|;
name|schemaTool
operator|.
name|runBeeLine
argument_list|(
name|scriptFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|isValid
operator|=
name|schemaTool
operator|.
name|validateLocations
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
name|isValid
operator|=
name|schemaTool
operator|.
name|validateLocations
argument_list|(
name|defaultRoot
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
name|scripts
operator|=
operator|new
name|String
index|[]
block|{
literal|"delete from PARTITIONS"
block|,
literal|"delete from TBLS"
block|,
literal|"delete from SDS"
block|,
literal|"delete from DBS"
block|,
literal|"insert into DBS values(2, 'my db', '/user/hive/warehouse/mydb', 'mydb', 'public', 'role')"
block|,
literal|"insert into SDS(SD_ID,CD_ID,INPUT_FORMAT,IS_COMPRESSED,IS_STOREDASSUBDIRECTORIES,LOCATION,NUM_BUCKETS,OUTPUT_FORMAT,SERDE_ID) values (1,null,'org.apache.hadoop.mapred.TextInputFormat','N','N','hdfs://yourhost.com:8020/user/hive/warehouse/mydb',-1,'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat',null)"
block|,
literal|"insert into SDS(SD_ID,CD_ID,INPUT_FORMAT,IS_COMPRESSED,IS_STOREDASSUBDIRECTORIES,LOCATION,NUM_BUCKETS,OUTPUT_FORMAT,SERDE_ID) values (2,null,'org.apache.hadoop.mapred.TextInputFormat','N','N','file:///user/admin/2015_11_18',-1,'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat',null)"
block|,
literal|"insert into TBLS(TBL_ID,CREATE_TIME,DB_ID,LAST_ACCESS_TIME,OWNER,RETENTION,SD_ID,TBL_NAME,TBL_TYPE,VIEW_EXPANDED_TEXT,VIEW_ORIGINAL_TEXT) values (2 ,1435255431,2,0 ,'hive',0,1,'mytal','MANAGED_TABLE',NULL,NULL)"
block|,
literal|"insert into PARTITiONS(PART_ID,CREATE_TIME,LAST_ACCESS_TIME, PART_NAME,SD_ID,TBL_ID) values(1, 1441402388,0, 'd1=1/d2=1',2,2)"
block|,
literal|"insert into SDS(SD_ID,CD_ID,INPUT_FORMAT,IS_COMPRESSED,IS_STOREDASSUBDIRECTORIES,LOCATION,NUM_BUCKETS,OUTPUT_FORMAT,SERDE_ID) values (3000,null,'org.apache.hadoop.mapred.TextInputFormat','N','N','yourhost.com:8020/user/hive/warehouse/mydb',-1,'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat',null)"
block|,
literal|"insert into SDS(SD_ID,CD_ID,INPUT_FORMAT,IS_COMPRESSED,IS_STOREDASSUBDIRECTORIES,LOCATION,NUM_BUCKETS,OUTPUT_FORMAT,SERDE_ID) values (5000,null,'org.apache.hadoop.mapred.TextInputFormat','N','N','file:///user/admin/2016_11_18',-1,'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat',null)"
block|,
literal|"insert into TBLS(TBL_ID,CREATE_TIME,DB_ID,LAST_ACCESS_TIME,OWNER,RETENTION,SD_ID,TBL_NAME,TBL_TYPE,VIEW_EXPANDED_TEXT,VIEW_ORIGINAL_TEXT) values (3000 ,1435255431,2,0 ,'hive',0,3000,'mytal3000','MANAGED_TABLE',NULL,NULL)"
block|,
literal|"insert into PARTITiONS(PART_ID,CREATE_TIME,LAST_ACCESS_TIME, PART_NAME,SD_ID,TBL_ID) values(5000, 1441402388,0, 'd1=1/d2=5000',5000,2)"
block|}
expr_stmt|;
name|scriptFile
operator|=
name|generateTestScript
argument_list|(
name|scripts
argument_list|)
expr_stmt|;
name|schemaTool
operator|.
name|runBeeLine
argument_list|(
name|scriptFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|isValid
operator|=
name|schemaTool
operator|.
name|validateLocations
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
name|isValid
operator|=
name|schemaTool
operator|.
name|validateLocations
argument_list|(
name|defaultRoot
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
block|}
specifier|private
name|File
name|generateTestScript
parameter_list|(
name|String
index|[]
name|stmts
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|testScriptFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"schematest"
argument_list|,
literal|".sql"
argument_list|)
decl_stmt|;
name|testScriptFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|FileWriter
name|fstream
init|=
operator|new
name|FileWriter
argument_list|(
name|testScriptFile
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|BufferedWriter
name|out
init|=
operator|new
name|BufferedWriter
argument_list|(
name|fstream
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|stmts
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|out
operator|.
name|newLine
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|testScriptFile
return|;
block|}
comment|/**    * Write out a dummy pre-upgrade script with given SQL statement.    */
specifier|private
name|String
name|writeDummyPreUpgradeScript
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|upgradeScriptName
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|preUpgradeScript
init|=
literal|"pre-"
operator|+
name|index
operator|+
literal|"-"
operator|+
name|upgradeScriptName
decl_stmt|;
name|String
name|dummyPreScriptPath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|,
literal|"target/tmp"
argument_list|)
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"scripts"
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"metastore"
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"upgrade"
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"derby"
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|preUpgradeScript
decl_stmt|;
name|FileWriter
name|fstream
init|=
operator|new
name|FileWriter
argument_list|(
name|dummyPreScriptPath
argument_list|)
decl_stmt|;
name|BufferedWriter
name|out
init|=
operator|new
name|BufferedWriter
argument_list|(
name|fstream
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|sql
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|preUpgradeScript
return|;
block|}
block|}
end_class

end_unit

