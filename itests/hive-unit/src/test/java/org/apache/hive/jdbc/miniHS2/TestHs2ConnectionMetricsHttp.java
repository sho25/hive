begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|metrics2
operator|.
name|CodahaleMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|HttpBasicAuthInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TCLIService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TCloseSessionReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TOpenSessionReq
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TOpenSessionResp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
operator|.
name|TSessionHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|CookieStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|DefaultHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|THttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the connection metrics using an HttpClient, when HS2 is start in http mode.  */
end_comment

begin_class
specifier|public
class|class
name|TestHs2ConnectionMetricsHttp
extends|extends
name|Hs2ConnectionMetrics
block|{
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|confOverlay
operator|.
name|clear
argument_list|()
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
operator|.
name|varname
argument_list|,
literal|"http"
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_PATH
operator|.
name|varname
argument_list|,
literal|"cliservice"
argument_list|)
expr_stmt|;
name|Hs2ConnectionMetrics
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
name|Hs2ConnectionMetrics
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOpenConnectionMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|CodahaleMetrics
name|metrics
init|=
operator|(
name|CodahaleMetrics
operator|)
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|TCLIService
operator|.
name|Client
name|httpClient
init|=
name|getHttpClient
argument_list|()
decl_stmt|;
name|TOpenSessionReq
name|openSessionReq
init|=
operator|new
name|TOpenSessionReq
argument_list|()
decl_stmt|;
name|TOpenSessionResp
name|tOpenSessionResp
init|=
name|httpClient
operator|.
name|OpenSession
argument_list|(
name|openSessionReq
argument_list|)
decl_stmt|;
name|verifyConnectionMetrics
argument_list|(
name|metrics
operator|.
name|dumpJson
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TSessionHandle
name|sessionHandle
init|=
name|tOpenSessionResp
operator|.
name|getSessionHandle
argument_list|()
decl_stmt|;
name|TCloseSessionReq
name|closeSessionReq
init|=
operator|new
name|TCloseSessionReq
argument_list|(
name|sessionHandle
argument_list|)
decl_stmt|;
name|httpClient
operator|.
name|CloseSession
argument_list|(
name|closeSessionReq
argument_list|)
expr_stmt|;
name|verifyConnectionMetrics
argument_list|(
name|metrics
operator|.
name|dumpJson
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tOpenSessionResp
operator|=
name|httpClient
operator|.
name|OpenSession
argument_list|(
name|openSessionReq
argument_list|)
expr_stmt|;
name|verifyConnectionMetrics
argument_list|(
name|metrics
operator|.
name|dumpJson
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|sessionHandle
operator|=
name|tOpenSessionResp
operator|.
name|getSessionHandle
argument_list|()
expr_stmt|;
name|closeSessionReq
operator|=
operator|new
name|TCloseSessionReq
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|CloseSession
argument_list|(
name|closeSessionReq
argument_list|)
expr_stmt|;
name|verifyConnectionMetrics
argument_list|(
name|metrics
operator|.
name|dumpJson
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TCLIService
operator|.
name|Client
name|getHttpClient
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultHttpClient
name|httpClient
init|=
operator|new
name|DefaultHttpClient
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"Connection"
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|addRequestInterceptor
argument_list|(
operator|new
name|BasicHttpRequestInterceptor
argument_list|(
name|USERNAME
argument_list|,
name|PASSWORD
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|headers
argument_list|)
argument_list|)
expr_stmt|;
name|TTransport
name|transport
init|=
operator|new
name|THttpClient
argument_list|(
name|getHttpUrl
argument_list|()
argument_list|,
name|httpClient
argument_list|)
decl_stmt|;
name|TProtocol
name|protocol
init|=
operator|new
name|TBinaryProtocol
argument_list|(
name|transport
argument_list|)
decl_stmt|;
return|return
operator|new
name|TCLIService
operator|.
name|Client
argument_list|(
name|protocol
argument_list|)
return|;
block|}
specifier|private
name|String
name|getHttpUrl
parameter_list|()
block|{
return|return
literal|"http://"
operator|+
name|miniHS2
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|miniHS2
operator|.
name|getHttpPort
argument_list|()
operator|+
literal|"/cliservice/"
return|;
block|}
specifier|private
class|class
name|BasicHttpRequestInterceptor
extends|extends
name|HttpBasicAuthInterceptor
block|{
name|BasicHttpRequestInterceptor
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|password
parameter_list|,
name|CookieStore
name|cookieStore
parameter_list|,
name|String
name|cn
parameter_list|,
name|boolean
name|isSSL
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|additionalHeaders
parameter_list|)
block|{
name|super
argument_list|(
name|userName
argument_list|,
name|password
argument_list|,
name|cookieStore
argument_list|,
name|cn
argument_list|,
name|isSSL
argument_list|,
name|additionalHeaders
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

