begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TestBeelinePasswordOption
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestBeelinePasswordOption
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|tableName
init|=
literal|"TestBeelineTable1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|tableComment
init|=
literal|"Test table comment"
decl_stmt|;
specifier|private
specifier|static
name|MiniHS2
name|miniHS2
decl_stmt|;
comment|/**    * Start up a local Hive Server 2 for these tests    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|preTests
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
comment|// Set to non-zk lock manager to prevent HS2 from trying to connect
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_LOCK_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.EmbeddedLockManager"
argument_list|)
expr_stmt|;
name|miniHS2
operator|=
operator|new
name|MiniHS2
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|createTable
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test if beeline prompts for a password when optional password option is at the beginning of    * arguments    */
annotation|@
name|Test
specifier|public
name|void
name|testPromptPasswordOptionAsFirst
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-p"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|addAll
argument_list|(
name|getBaseArgs
argument_list|(
name|miniHS2
operator|.
name|getBaseJdbcURL
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-n"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"hive"
argument_list|)
expr_stmt|;
name|connectBeelineWithUserPrompt
argument_list|(
name|argList
argument_list|,
literal|"hivepassword"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if beeline prompts for a password when optional password option is at the end of arguments    */
annotation|@
name|Test
specifier|public
name|void
name|testPromptPasswordOptionLast
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
name|getBaseArgs
argument_list|(
name|miniHS2
operator|.
name|getBaseJdbcURL
argument_list|()
argument_list|)
decl_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-n"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"hive"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-p"
argument_list|)
expr_stmt|;
name|connectBeelineWithUserPrompt
argument_list|(
name|argList
argument_list|,
literal|"hivepassword"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if beeline prompts for a password when optional password option is at the middle of    * arguments    */
annotation|@
name|Test
specifier|public
name|void
name|testPromptPasswordOptionMiddle
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
name|getBaseArgs
argument_list|(
name|miniHS2
operator|.
name|getBaseJdbcURL
argument_list|()
argument_list|)
decl_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-p"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-n"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"hive"
argument_list|)
expr_stmt|;
name|connectBeelineWithUserPrompt
argument_list|(
name|argList
argument_list|,
literal|"hivepassword"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if beeline prompts for a password when optional password option is used in conjunction    * with additional commandLine options after -p    */
annotation|@
name|Test
specifier|public
name|void
name|testPromptPasswordOptionWithOtherOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
name|getBaseArgs
argument_list|(
name|miniHS2
operator|.
name|getBaseJdbcURL
argument_list|()
argument_list|)
decl_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-p"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-n"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"hive"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-e"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"show tables;"
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|connectBeelineWithUserPrompt
argument_list|(
name|argList
argument_list|,
literal|"hivepassword"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Table name "
operator|+
name|tableName
operator|+
literal|" not found in the output"
argument_list|,
name|output
operator|.
name|contains
argument_list|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if beeline prompts for a password when optional password option is used in conjunction    * with additional BeeLineOpts options after -p    */
annotation|@
name|Test
specifier|public
name|void
name|testPromptPasswordOptionWithBeelineOpts
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
name|getBaseArgs
argument_list|(
name|miniHS2
operator|.
name|getBaseJdbcURL
argument_list|()
argument_list|)
decl_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-n"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"hive"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-p"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"--force=true"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-e"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"show tables;"
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|connectBeelineWithUserPrompt
argument_list|(
name|argList
argument_list|,
literal|"hivepassword"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Table name "
operator|+
name|tableName
operator|+
literal|" not found in the output"
argument_list|,
name|output
operator|.
name|contains
argument_list|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if beeline prompts for a password when optional password option is used in conjunction    * with additional BeeLineOpts options after -p. Also, verifies the beelineOpt value is set as    * expected    */
annotation|@
name|Test
specifier|public
name|void
name|testPromptPasswordVerifyBeelineOpts
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
name|getBaseArgs
argument_list|(
name|miniHS2
operator|.
name|getBaseJdbcURL
argument_list|()
argument_list|)
decl_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-n"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"hive"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-p"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"--maxColumnWidth=57"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-e"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"show tables;"
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|connectWithPromptAndVerify
argument_list|(
name|argList
argument_list|,
literal|"hivepassword"
argument_list|,
literal|true
argument_list|,
literal|57
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Table name "
operator|+
name|tableName
operator|+
literal|" not found in the output"
argument_list|,
name|output
operator|.
name|contains
argument_list|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests if beeline prompts for a password and also confirms that --hiveconf    * argument works when given immediately after -p with no password    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testPromptPasswordWithHiveConf
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
name|getBaseArgs
argument_list|(
name|miniHS2
operator|.
name|getBaseJdbcURL
argument_list|()
argument_list|)
decl_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-n"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"hive"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-p"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"--hiveconf"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"hive.cli.print.header=true"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-e"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"show tables;"
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|connectWithPromptAndVerify
argument_list|(
name|argList
argument_list|,
literal|"hivepassword"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|"hive.cli.print.header"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Table name "
operator|+
name|tableName
operator|+
literal|" not found in the output"
argument_list|,
name|output
operator|.
name|contains
argument_list|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests if beeline doesn't prompt for a password and connects with empty password    * when no password option provided    */
annotation|@
name|Test
specifier|public
name|void
name|testNoPasswordPrompt
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
name|getBaseArgs
argument_list|(
name|miniHS2
operator|.
name|getBaseJdbcURL
argument_list|()
argument_list|)
decl_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-n"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"hive"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"--force=true"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-e"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"show tables;"
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|connectBeelineWithUserPrompt
argument_list|(
name|argList
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Table name "
operator|+
name|tableName
operator|+
literal|" not found in the output"
argument_list|,
name|output
operator|.
name|contains
argument_list|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests if beeline doesn't prompt for a password and connects with no password/username option    * provided    */
annotation|@
name|Test
specifier|public
name|void
name|testNoPasswordPrompt2
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
name|getBaseArgs
argument_list|(
name|miniHS2
operator|.
name|getBaseJdbcURL
argument_list|()
argument_list|)
decl_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"--force=true"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-e"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"show tables;"
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|connectBeelineWithUserPrompt
argument_list|(
name|argList
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Table name "
operator|+
name|tableName
operator|+
literal|" not found in the output"
argument_list|,
name|output
operator|.
name|contains
argument_list|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests if Beeline prompts for password when -p is the last argument and argList has CommandLine    * options as well as BeelineOpts    */
annotation|@
name|Test
specifier|public
name|void
name|testPromptPassOptionLastWithBeelineOpts
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
name|getBaseArgs
argument_list|(
name|miniHS2
operator|.
name|getBaseJdbcURL
argument_list|()
argument_list|)
decl_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-n"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"hive"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"--force=true"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-e"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"show tables;"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-p"
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|connectBeelineWithUserPrompt
argument_list|(
name|argList
argument_list|,
literal|"hivepassword"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Table name "
operator|+
name|tableName
operator|+
literal|" not found in the output"
argument_list|,
name|output
operator|.
name|contains
argument_list|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Connects to miniHS2 using beeline with the given string value for the prompt if the prompt is    * null, uses beeline with null inputstream in which this method expects that the argList is    * sufficient to make a successful Beeline connection with no prompt required from user    *    * @param argList - arguments list for the beeline    * @param prompt - String value to be given to beeline prompt during connection    * @param beelineOptName - Name of BeelineOpt to be verified    * @param beelineOptValue - Expected value of value of BeeLineOpt    * @param hiveConfKey - hive conf variable name to verify    * @param expectedHiveConfValue - Expected value of hive conf variable    * @return output of beeline from outputstream    * @throws Exception    */
specifier|private
name|String
name|connectWithPromptAndVerify
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|argList
parameter_list|,
name|String
name|prompt
parameter_list|,
name|boolean
name|testMaxColumnWidthOption
parameter_list|,
name|Integer
name|expectedMaxColumnWidth
parameter_list|,
name|String
name|hiveConfKey
parameter_list|,
name|String
name|expectedHiveConfValue
parameter_list|)
throws|throws
name|Exception
block|{
name|BeeLine
name|beeLine
init|=
literal|null
decl_stmt|;
name|InputStream
name|inputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|beeLine
operator|=
operator|new
name|BeeLine
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|beelineOutputStream
init|=
operator|new
name|PrintStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|beeLine
operator|.
name|setOutputStream
argument_list|(
name|beelineOutputStream
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|setErrorStream
argument_list|(
name|beelineOutputStream
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
name|argList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|argList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|prompt
operator|!=
literal|null
condition|)
block|{
name|inputStream
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|prompt
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|beeLine
operator|.
name|begin
argument_list|(
name|args
argument_list|,
name|inputStream
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|testMaxColumnWidthOption
condition|)
block|{
name|int
name|maxColumnWidth
init|=
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getMaxColumnWidth
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected max columnWidth to be "
operator|+
name|expectedMaxColumnWidth
operator|+
literal|" found "
operator|+
name|maxColumnWidth
argument_list|,
name|maxColumnWidth
operator|==
name|expectedMaxColumnWidth
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hiveConfKey
operator|!=
literal|null
condition|)
block|{
name|String
name|hiveConfValue
init|=
name|beeLine
operator|.
name|getOpts
argument_list|()
operator|.
name|getHiveConfVariables
argument_list|()
operator|.
name|get
argument_list|(
name|hiveConfKey
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|expectedHiveConfValue
operator|+
literal|" got "
operator|+
name|hiveConfValue
operator|+
literal|" for "
operator|+
name|hiveConfKey
argument_list|,
name|expectedHiveConfValue
operator|.
name|equalsIgnoreCase
argument_list|(
name|hiveConfValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|output
init|=
name|os
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|output
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|beeLine
operator|!=
literal|null
condition|)
block|{
name|beeLine
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|connectBeelineWithUserPrompt
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|argList
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|connectBeelineWithUserPrompt
argument_list|(
name|argList
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|String
name|connectBeelineWithUserPrompt
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|argList
parameter_list|,
name|String
name|prompt
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|connectWithPromptAndVerify
argument_list|(
name|argList
argument_list|,
name|prompt
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Create table for use by tests    *    * @throws ClassNotFoundException    * @throws SQLException    */
specifier|private
specifier|static
name|void
name|createTable
parameter_list|()
throws|throws
name|ClassNotFoundException
throws|,
name|SQLException
block|{
name|Class
operator|.
name|forName
argument_list|(
name|BeeLine
operator|.
name|BEELINE_DEFAULT_JDBC_DRIVER
argument_list|)
expr_stmt|;
name|Connection
name|con
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getBaseJdbcURL
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Connection is null"
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Connection should not be closed"
argument_list|,
name|con
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.support.concurrency = false"
argument_list|)
expr_stmt|;
try|try
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed due to exception "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Unable to create setup table "
operator|+
name|tableName
operator|+
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// create table
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (under_col int comment 'the under column', value string) comment '"
operator|+
name|tableComment
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getBaseArgs
parameter_list|(
name|String
name|jdbcUrl
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-d"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
name|BeeLine
operator|.
name|BEELINE_DEFAULT_JDBC_DRIVER
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-u"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
name|jdbcUrl
argument_list|)
expr_stmt|;
return|return
name|argList
return|;
block|}
block|}
end_class

end_unit

