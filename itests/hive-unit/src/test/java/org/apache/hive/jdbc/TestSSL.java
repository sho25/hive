begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestSSL
block|{
specifier|private
specifier|static
specifier|final
name|String
name|KEY_STORE_NAME
init|=
literal|"keystore.jks"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TRUST_STORE_NAME
init|=
literal|"truststore.jks"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KEY_STORE_PASSWORD
init|=
literal|"HiveJdbc"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAVA_TRUST_STORE_PROP
init|=
literal|"javax.net.ssl.trustStore"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAVA_TRUST_STORE_PASS_PROP
init|=
literal|"javax.net.ssl.trustStorePassword"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HS2_BINARY_MODE
init|=
literal|"binary"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HS2_HTTP_MODE
init|=
literal|"http"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HS2_HTTP_ENDPOINT
init|=
literal|"cliservice"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HS2_BINARY_AUTH_MODE
init|=
literal|"NONE"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HS2_HTTP_AUTH_MODE
init|=
literal|"NOSASL"
decl_stmt|;
specifier|private
name|MiniHS2
name|miniHS2
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
specifier|private
name|Connection
name|hs2Conn
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|dataFileDir
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
decl_stmt|;
specifier|private
specifier|final
name|String
name|SSL_CONN_PARAMS
init|=
literal|";ssl=true;sslTrustStore="
operator|+
name|dataFileDir
operator|+
name|File
operator|.
name|separator
operator|+
name|TRUST_STORE_NAME
operator|+
literal|";trustStorePassword="
operator|+
name|KEY_STORE_PASSWORD
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
operator|.
name|forName
argument_list|(
name|MiniHS2
operator|.
name|getJdbcDriverName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|DriverManager
operator|.
name|setLoginTimeout
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.data.files"
argument_list|,
literal|""
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dataFileDir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.data.files"
argument_list|)
expr_stmt|;
block|}
name|dataFileDir
operator|=
name|dataFileDir
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"c:"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|miniHS2
operator|=
operator|new
name|MiniHS2
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|confOverlay
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|hs2Conn
operator|!=
literal|null
condition|)
block|{
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|miniHS2
operator|!=
literal|null
operator|&&
name|miniHS2
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|clearProperty
argument_list|(
name|JAVA_TRUST_STORE_PROP
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
name|JAVA_TRUST_STORE_PASS_PROP
argument_list|)
expr_stmt|;
block|}
comment|/***    * Test SSL client with non-SSL server fails    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testInvalidConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|clearSslConfOverlay
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
comment|// Test in binary mode
name|setBinaryConfOverlay
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
name|DriverManager
operator|.
name|setLoginTimeout
argument_list|(
literal|4
argument_list|)
expr_stmt|;
try|try
block|{
name|hs2Conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
literal|"default"
argument_list|,
name|SSL_CONN_PARAMS
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"SSL connection should fail with NON-SSL server"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// expected error
name|assertEquals
argument_list|(
literal|"08S01"
argument_list|,
name|e
operator|.
name|getSQLState
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
name|JAVA_TRUST_STORE_PROP
argument_list|,
name|dataFileDir
operator|+
name|File
operator|.
name|separator
operator|+
name|TRUST_STORE_NAME
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|JAVA_TRUST_STORE_PASS_PROP
argument_list|,
name|KEY_STORE_PASSWORD
argument_list|)
expr_stmt|;
try|try
block|{
name|hs2Conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
operator|+
literal|";ssl=true"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"SSL connection should fail with NON-SSL server"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// expected error
name|assertEquals
argument_list|(
literal|"08S01"
argument_list|,
name|e
operator|.
name|getSQLState
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Test in http mode with ssl properties specified in url
name|System
operator|.
name|clearProperty
argument_list|(
name|JAVA_TRUST_STORE_PROP
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
name|JAVA_TRUST_STORE_PASS_PROP
argument_list|)
expr_stmt|;
name|setHttpConfOverlay
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
try|try
block|{
name|hs2Conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
literal|"default"
argument_list|,
name|SSL_CONN_PARAMS
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"SSL connection should fail with NON-SSL server"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// expected error
name|assertEquals
argument_list|(
literal|"08S01"
argument_list|,
name|e
operator|.
name|getSQLState
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/***    * Test non-SSL client with SSL server fails    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testConnectionMismatch
parameter_list|()
throws|throws
name|Exception
block|{
name|setSslConfOverlay
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
comment|// Test in binary mode
name|setBinaryConfOverlay
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
comment|// Start HS2 with SSL
try|try
block|{
name|hs2Conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"NON SSL connection should fail with SSL server"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// expected error
name|assertEquals
argument_list|(
literal|"08S01"
argument_list|,
name|e
operator|.
name|getSQLState
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|hs2Conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
operator|+
literal|";ssl=false"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"NON SSL connection should fail with SSL server"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// expected error
name|assertEquals
argument_list|(
literal|"08S01"
argument_list|,
name|e
operator|.
name|getSQLState
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Test in http mode
name|setHttpConfOverlay
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
try|try
block|{
name|hs2Conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
literal|"default"
argument_list|,
literal|";ssl=false"
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"NON SSL connection should fail with SSL server"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// expected error
name|assertEquals
argument_list|(
literal|"08S01"
argument_list|,
name|e
operator|.
name|getSQLState
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/***    * Test SSL client connection to SSL server    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testSSLConnectionWithURL
parameter_list|()
throws|throws
name|Exception
block|{
name|setSslConfOverlay
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
comment|// Test in binary mode
name|setBinaryConfOverlay
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
comment|// Start HS2 with SSL
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
comment|// make SSL connection
name|hs2Conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
literal|"default"
argument_list|,
name|SSL_CONN_PARAMS
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Test in http mode
name|setHttpConfOverlay
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
comment|// make SSL connection
name|hs2Conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
literal|"default"
argument_list|,
name|SSL_CONN_PARAMS
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/***    * Test SSL client connection to SSL server    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testSSLConnectionWithProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|setSslConfOverlay
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
comment|// Test in binary mode
name|setBinaryConfOverlay
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
comment|// Start HS2 with SSL
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|JAVA_TRUST_STORE_PROP
argument_list|,
name|dataFileDir
operator|+
name|File
operator|.
name|separator
operator|+
name|TRUST_STORE_NAME
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|JAVA_TRUST_STORE_PASS_PROP
argument_list|,
name|KEY_STORE_PASSWORD
argument_list|)
expr_stmt|;
comment|// make SSL connection
name|hs2Conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
operator|+
literal|";ssl=true"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Test in http mode
name|setHttpConfOverlay
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
comment|// make SSL connection
name|hs2Conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
literal|"default"
argument_list|,
name|SSL_CONN_PARAMS
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Start HS2 in SSL mode, open a SSL connection and fetch data    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testSSLFetch
parameter_list|()
throws|throws
name|Exception
block|{
name|setSslConfOverlay
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
comment|// Test in binary mode
name|setBinaryConfOverlay
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
comment|// Start HS2 with SSL
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
name|String
name|tableName
init|=
literal|"sslTab"
decl_stmt|;
name|Path
name|dataFilePath
init|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"kv1.txt"
argument_list|)
decl_stmt|;
comment|// make SSL connection
name|hs2Conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
literal|"default"
argument_list|,
name|SSL_CONN_PARAMS
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
comment|// Set up test data
name|setupTestTableWithData
argument_list|(
name|tableName
argument_list|,
name|dataFilePath
argument_list|,
name|hs2Conn
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
operator|++
name|rowCount
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val_"
operator|+
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// read result over SSL
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Start HS2 in Http mode with SSL enabled, open a SSL connection and fetch data    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testSSLFetchHttp
parameter_list|()
throws|throws
name|Exception
block|{
name|setSslConfOverlay
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
comment|// Test in http mode
name|setHttpConfOverlay
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
name|String
name|tableName
init|=
literal|"sslTab"
decl_stmt|;
name|Path
name|dataFilePath
init|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"kv1.txt"
argument_list|)
decl_stmt|;
comment|// make SSL connection
name|hs2Conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
literal|"default"
argument_list|,
name|SSL_CONN_PARAMS
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
comment|// Set up test data
name|setupTestTableWithData
argument_list|(
name|tableName
argument_list|,
name|dataFilePath
argument_list|,
name|hs2Conn
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
operator|++
name|rowCount
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val_"
operator|+
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// read result over SSL
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setupTestTableWithData
parameter_list|(
name|String
name|tableName
parameter_list|,
name|Path
name|dataFilePath
parameter_list|,
name|Connection
name|hs2Conn
parameter_list|)
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.support.concurrency = false"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (under_col int comment 'the under column', value string)"
argument_list|)
expr_stmt|;
comment|// load data
name|stmt
operator|.
name|execute
argument_list|(
literal|"load data local inpath '"
operator|+
name|dataFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setSslConfOverlay
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
parameter_list|)
block|{
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_USE_SSL
operator|.
name|varname
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_SSL_KEYSTORE_PATH
operator|.
name|varname
argument_list|,
name|dataFileDir
operator|+
name|File
operator|.
name|separator
operator|+
name|KEY_STORE_NAME
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_SSL_KEYSTORE_PASSWORD
operator|.
name|varname
argument_list|,
name|KEY_STORE_PASSWORD
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|clearSslConfOverlay
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
parameter_list|)
block|{
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_USE_SSL
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
comment|// Currently http mode works with server in NOSASL auth mode& doesn't support doAs
specifier|private
name|void
name|setHttpConfOverlay
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
parameter_list|)
block|{
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
operator|.
name|varname
argument_list|,
name|HS2_HTTP_MODE
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_PATH
operator|.
name|varname
argument_list|,
name|HS2_HTTP_ENDPOINT
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_AUTHENTICATION
operator|.
name|varname
argument_list|,
name|HS2_HTTP_AUTH_MODE
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_ENABLE_DOAS
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setBinaryConfOverlay
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
parameter_list|)
block|{
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
operator|.
name|varname
argument_list|,
name|HS2_BINARY_MODE
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_AUTHENTICATION
operator|.
name|varname
argument_list|,
name|HS2_BINARY_AUTH_MODE
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_ENABLE_DOAS
operator|.
name|varname
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

