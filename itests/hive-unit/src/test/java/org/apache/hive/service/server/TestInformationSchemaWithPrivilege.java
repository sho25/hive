begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|HadoopDefaultAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|HiveAuthenticationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAccessController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizationValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzPluginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzSessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveMetastoreClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePolicyChangeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
operator|.
name|HivePrivilegeObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveResourceACLs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveResourceACLsImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|sqlstd
operator|.
name|SQLStdHiveAccessControllerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|sqlstd
operator|.
name|SQLStdHiveAuthorizationValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|BeeLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|CLIServiceClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|OperationHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|RowSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|SessionHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test restricted information schema with privilege synchronization  */
end_comment

begin_class
specifier|public
class|class
name|TestInformationSchemaWithPrivilege
block|{
comment|// Group mapping:
comment|// group_a: user1, user2
comment|// group_b: user2
specifier|static
class|class
name|FakeGroupAuthenticator
extends|extends
name|HadoopDefaultAuthenticator
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroupNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|getUserName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"user1"
argument_list|)
condition|)
block|{
name|groups
operator|.
name|add
argument_list|(
literal|"group_a"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getUserName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"user2"
argument_list|)
condition|)
block|{
name|groups
operator|.
name|add
argument_list|(
literal|"group_a"
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
literal|"group_b"
argument_list|)
expr_stmt|;
block|}
return|return
name|groups
return|;
block|}
block|}
comment|// Privilege matrix:
comment|//                    user1  user2  group_a  group_b  public
comment|// testdb1:            S             S
comment|//   testtable1.*:     SU     S
comment|//   testtable2.*:                   S
comment|//   testtable3.*:                                     S
comment|//   testtable4.*:                            S
comment|// testdb2:            S
comment|//   testtable1.key    S
specifier|static
class|class
name|TestHivePolicyProvider
implements|implements
name|HivePolicyProvider
block|{
annotation|@
name|Override
specifier|public
name|HiveResourceACLs
name|getResourceACLs
parameter_list|(
name|HivePrivilegeObject
name|hiveObject
parameter_list|)
block|{
name|HiveResourceACLsImpl
name|acls
init|=
operator|new
name|HiveResourceACLsImpl
argument_list|()
decl_stmt|;
if|if
condition|(
name|hiveObject
operator|.
name|getType
argument_list|()
operator|==
name|HivePrivilegeObjectType
operator|.
name|DATABASE
condition|)
block|{
if|if
condition|(
name|hiveObject
operator|.
name|getDbname
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testdb1"
argument_list|)
condition|)
block|{
name|acls
operator|.
name|addUserEntry
argument_list|(
literal|"user1"
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|SELECT
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
name|acls
operator|.
name|addGroupEntry
argument_list|(
literal|"group_a"
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|SELECT
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getDbname
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testdb2"
argument_list|)
condition|)
block|{
name|acls
operator|.
name|addUserEntry
argument_list|(
literal|"user1"
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|SELECT
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getType
argument_list|()
operator|==
name|HivePrivilegeObjectType
operator|.
name|TABLE_OR_VIEW
condition|)
block|{
if|if
condition|(
name|hiveObject
operator|.
name|getDbname
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testdb1"
argument_list|)
operator|&&
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testtable1"
argument_list|)
condition|)
block|{
name|acls
operator|.
name|addUserEntry
argument_list|(
literal|"user1"
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|SELECT
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
name|acls
operator|.
name|addUserEntry
argument_list|(
literal|"user1"
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|UPDATE
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
name|acls
operator|.
name|addUserEntry
argument_list|(
literal|"user2"
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|SELECT
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getDbname
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testdb1"
argument_list|)
operator|&&
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testtable2"
argument_list|)
condition|)
block|{
name|acls
operator|.
name|addGroupEntry
argument_list|(
literal|"group_a"
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|SELECT
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getDbname
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testdb1"
argument_list|)
operator|&&
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testtable3"
argument_list|)
condition|)
block|{
name|acls
operator|.
name|addGroupEntry
argument_list|(
literal|"public"
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|SELECT
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getDbname
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testdb1"
argument_list|)
operator|&&
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testtable4"
argument_list|)
condition|)
block|{
name|acls
operator|.
name|addGroupEntry
argument_list|(
literal|"group_b"
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|SELECT
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getDbname
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testdb2"
argument_list|)
operator|&&
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testtable1"
argument_list|)
condition|)
block|{
name|acls
operator|.
name|addUserEntry
argument_list|(
literal|"user1"
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|SELECT
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getType
argument_list|()
operator|==
name|HivePrivilegeObjectType
operator|.
name|COLUMN
condition|)
block|{
if|if
condition|(
name|hiveObject
operator|.
name|getDbname
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testdb1"
argument_list|)
operator|&&
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testtable1"
argument_list|)
condition|)
block|{
name|acls
operator|.
name|addUserEntry
argument_list|(
literal|"user1"
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|SELECT
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
name|acls
operator|.
name|addUserEntry
argument_list|(
literal|"user2"
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|SELECT
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getDbname
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testdb1"
argument_list|)
operator|&&
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testtable2"
argument_list|)
condition|)
block|{
name|acls
operator|.
name|addGroupEntry
argument_list|(
literal|"group_a"
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|SELECT
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getDbname
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testdb1"
argument_list|)
operator|&&
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testtable3"
argument_list|)
condition|)
block|{
name|acls
operator|.
name|addGroupEntry
argument_list|(
literal|"public"
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|SELECT
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getDbname
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testdb1"
argument_list|)
operator|&&
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testtable4"
argument_list|)
condition|)
block|{
name|acls
operator|.
name|addGroupEntry
argument_list|(
literal|"group_b"
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|SELECT
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getDbname
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testdb2"
argument_list|)
operator|&&
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"testtable1"
argument_list|)
operator|&&
name|hiveObject
operator|.
name|getColumns
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|acls
operator|.
name|addUserEntry
argument_list|(
literal|"user1"
argument_list|,
name|HiveResourceACLs
operator|.
name|Privilege
operator|.
name|SELECT
argument_list|,
name|HiveResourceACLs
operator|.
name|AccessResult
operator|.
name|ALLOWED
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|acls
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerHivePolicyChangeListener
parameter_list|(
name|HivePolicyChangeListener
name|listener
parameter_list|)
block|{
comment|// PolicyChangeListener will be implemented later
block|}
block|}
specifier|static
class|class
name|HiveAuthorizerImplWithPolicyProvider
extends|extends
name|HiveAuthorizerImpl
block|{
name|HiveAuthorizerImplWithPolicyProvider
parameter_list|(
name|HiveAccessController
name|accessController
parameter_list|,
name|HiveAuthorizationValidator
name|authValidator
parameter_list|)
block|{
name|super
argument_list|(
name|accessController
argument_list|,
name|authValidator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HivePolicyProvider
name|getHivePolicyProvider
parameter_list|()
throws|throws
name|HiveAuthzPluginException
block|{
return|return
operator|new
name|TestHivePolicyProvider
argument_list|()
return|;
block|}
block|}
specifier|static
class|class
name|HiveAuthorizerImplWithNullPolicyProvider
extends|extends
name|HiveAuthorizerImpl
block|{
name|HiveAuthorizerImplWithNullPolicyProvider
parameter_list|(
name|HiveAccessController
name|accessController
parameter_list|,
name|HiveAuthorizationValidator
name|authValidator
parameter_list|)
block|{
name|super
argument_list|(
name|accessController
argument_list|,
name|authValidator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HivePolicyProvider
name|getHivePolicyProvider
parameter_list|()
throws|throws
name|HiveAuthzPluginException
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
class|class
name|TestHiveAuthorizerFactory
implements|implements
name|HiveAuthorizerFactory
block|{
annotation|@
name|Override
specifier|public
name|HiveAuthorizer
name|createHiveAuthorizer
parameter_list|(
name|HiveMetastoreClientFactory
name|metastoreClientFactory
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|HiveAuthenticationProvider
name|authenticator
parameter_list|,
name|HiveAuthzSessionContext
name|ctx
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
name|SQLStdHiveAccessControllerWrapper
name|privilegeManager
init|=
operator|new
name|SQLStdHiveAccessControllerWrapper
argument_list|(
name|metastoreClientFactory
argument_list|,
name|conf
argument_list|,
name|authenticator
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
return|return
operator|new
name|HiveAuthorizerImplWithPolicyProvider
argument_list|(
name|privilegeManager
argument_list|,
operator|new
name|SQLStdHiveAuthorizationValidator
argument_list|(
name|metastoreClientFactory
argument_list|,
name|conf
argument_list|,
name|authenticator
argument_list|,
name|privilegeManager
argument_list|,
name|ctx
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|TestHiveAuthorizerNullPolicyProviderFactory
implements|implements
name|HiveAuthorizerFactory
block|{
annotation|@
name|Override
specifier|public
name|HiveAuthorizer
name|createHiveAuthorizer
parameter_list|(
name|HiveMetastoreClientFactory
name|metastoreClientFactory
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|HiveAuthenticationProvider
name|authenticator
parameter_list|,
name|HiveAuthzSessionContext
name|ctx
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
name|SQLStdHiveAccessControllerWrapper
name|privilegeManager
init|=
operator|new
name|SQLStdHiveAccessControllerWrapper
argument_list|(
name|metastoreClientFactory
argument_list|,
name|conf
argument_list|,
name|authenticator
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
return|return
operator|new
name|HiveAuthorizerImplWithNullPolicyProvider
argument_list|(
name|privilegeManager
argument_list|,
operator|new
name|SQLStdHiveAuthorizationValidator
argument_list|(
name|metastoreClientFactory
argument_list|,
name|conf
argument_list|,
name|authenticator
argument_list|,
name|privilegeManager
argument_list|,
name|ctx
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|MiniHS2
name|miniHS2
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|MiniZooKeeperCluster
name|zkCluster
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|zkDataDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|)
argument_list|)
decl_stmt|;
name|zkCluster
operator|=
operator|new
name|MiniZooKeeperCluster
argument_list|()
expr_stmt|;
name|int
name|zkPort
init|=
name|zkCluster
operator|.
name|startup
argument_list|(
name|zkDataDir
argument_list|)
decl_stmt|;
name|miniHS2
operator|=
operator|new
name|MiniHS2
argument_list|(
operator|new
name|HiveConf
argument_list|()
argument_list|)
expr_stmt|;
name|confOverlay
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_PRIVILEGE_SYNCHRONIZER
operator|.
name|varname
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_PRIVILEGE_SYNCHRONIZER_INTERVAL
operator|.
name|varname
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_SUPPORT_DYNAMIC_SERVICE_DISCOVERY
operator|.
name|varname
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
operator|.
name|varname
argument_list|,
name|TestHiveAuthorizerFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_ZOOKEEPER_QUORUM
operator|.
name|varname
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_ZOOKEEPER_CLIENT_PORT
operator|.
name|varname
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|zkPort
argument_list|)
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|AUTO_CREATE_ALL
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_AUTHENTICATOR_MANAGER
operator|.
name|varname
argument_list|,
name|FakeGroupAuthenticator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|db1Name
init|=
literal|"testdb1"
decl_stmt|;
name|String
name|db2Name
init|=
literal|"testdb2"
decl_stmt|;
name|String
name|table1Name
init|=
literal|"testtable1"
decl_stmt|;
name|String
name|table2Name
init|=
literal|"testtable2"
decl_stmt|;
name|String
name|table3Name
init|=
literal|"testtable3"
decl_stmt|;
name|String
name|table4Name
init|=
literal|"testtable4"
decl_stmt|;
name|CLIServiceClient
name|serviceClient
init|=
name|miniHS2
operator|.
name|getServiceClient
argument_list|()
decl_stmt|;
name|SessionHandle
name|sessHandle
init|=
name|serviceClient
operator|.
name|openSession
argument_list|(
literal|"hive_test_user"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"DROP DATABASE IF EXISTS "
operator|+
name|db1Name
operator|+
literal|" CASCADE"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"CREATE DATABASE "
operator|+
name|db1Name
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|db1Name
operator|+
literal|"."
operator|+
name|table1Name
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"CREATE TABLE "
operator|+
name|db1Name
operator|+
literal|"."
operator|+
name|table1Name
operator|+
literal|"(key string, value double)"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|db1Name
operator|+
literal|"."
operator|+
name|table2Name
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"CREATE TABLE "
operator|+
name|db1Name
operator|+
literal|"."
operator|+
name|table2Name
operator|+
literal|"(key string, value double)"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"DROP VIEW IF EXISTS "
operator|+
name|db1Name
operator|+
literal|"."
operator|+
name|table3Name
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"CREATE VIEW "
operator|+
name|db1Name
operator|+
literal|"."
operator|+
name|table3Name
operator|+
literal|" AS SELECT * FROM "
operator|+
name|db1Name
operator|+
literal|"."
operator|+
name|table1Name
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|db1Name
operator|+
literal|"."
operator|+
name|table4Name
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"CREATE TABLE "
operator|+
name|db1Name
operator|+
literal|"."
operator|+
name|table4Name
operator|+
literal|"(key string, value double) PARTITIONED BY (p string)"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"DROP DATABASE IF EXISTS "
operator|+
name|db2Name
operator|+
literal|" CASCADE"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"CREATE DATABASE "
operator|+
name|db2Name
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|db2Name
operator|+
literal|"."
operator|+
name|table1Name
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"CREATE TABLE "
operator|+
name|db2Name
operator|+
literal|"."
operator|+
name|table1Name
operator|+
literal|"(key string, value double)"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
comment|// Just to trigger auto creation of needed metastore tables
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"SHOW GRANT USER hive_test_user ON ALL"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|serviceClient
operator|.
name|closeSession
argument_list|(
name|sessHandle
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|baseArgs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|baseArgs
operator|.
name|add
argument_list|(
literal|"-d"
argument_list|)
expr_stmt|;
name|baseArgs
operator|.
name|add
argument_list|(
name|BeeLine
operator|.
name|BEELINE_DEFAULT_JDBC_DRIVER
argument_list|)
expr_stmt|;
name|baseArgs
operator|.
name|add
argument_list|(
literal|"-u"
argument_list|)
expr_stmt|;
name|baseArgs
operator|.
name|add
argument_list|(
name|miniHS2
operator|.
name|getBaseJdbcURL
argument_list|()
argument_list|)
expr_stmt|;
name|baseArgs
operator|.
name|add
argument_list|(
literal|"-n"
argument_list|)
expr_stmt|;
name|baseArgs
operator|.
name|add
argument_list|(
literal|"hive_test_user"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|baseArgs
argument_list|)
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-f"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"../../metastore/scripts/upgrade/hive/hive-schema-3.0.0.hive.sql"
argument_list|)
expr_stmt|;
name|BeeLine
name|beeLine
init|=
operator|new
name|BeeLine
argument_list|()
decl_stmt|;
name|int
name|result
init|=
name|beeLine
operator|.
name|begin
argument_list|(
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|beeLine
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|boolean
name|containsDb1
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb2
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb1Table1
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb1Table2
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb1Table3
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb1Table4
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb2Table1
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb1Table1SelectPriv
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb1Table1UpdatePriv
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb1Table2SelectPriv
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb1Table3SelectPriv
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb1Table4SelectPriv
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb2Table1SelectPriv
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb1Table1Key
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb1Table1Value
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb1Table2Key
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb1Table2Value
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb1Table3Key
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb1Table3Value
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb1Table4Key
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb1Table4Value
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb1Table4P
init|=
literal|false
decl_stmt|;
name|boolean
name|containsDb2Table1Key
init|=
literal|false
decl_stmt|;
comment|// We shall have enough time to synchronize privileges during loading
comment|// information schema
comment|// User1 privileges:
comment|// testdb1:            S
comment|//   testtable1.*:     SU
comment|//   testtable2.*:     S
comment|//   testtable3.*:     S
comment|//   testtable4.*:
comment|// testdb2:            S
comment|//   testtable1.*:     S
name|sessHandle
operator|=
name|serviceClient
operator|.
name|openSession
argument_list|(
literal|"user1"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|OperationHandle
name|opHandle
init|=
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"select * from INFORMATION_SCHEMA.SCHEMATA"
argument_list|,
name|confOverlay
argument_list|)
decl_stmt|;
name|RowSet
name|rowSet
init|=
name|serviceClient
operator|.
name|fetchResults
argument_list|(
name|opHandle
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rowSet
operator|.
name|numRows
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Object
index|[]
argument_list|>
name|iter
init|=
name|rowSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
index|[]
name|cols
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
condition|)
block|{
name|containsDb1
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db2Name
argument_list|)
condition|)
block|{
name|containsDb2
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsDb1
operator|&&
name|containsDb2
argument_list|)
expr_stmt|;
name|opHandle
operator|=
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"select * from INFORMATION_SCHEMA.TABLES"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|rowSet
operator|=
name|serviceClient
operator|.
name|fetchResults
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rowSet
operator|.
name|numRows
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|iter
operator|=
name|rowSet
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
index|[]
name|cols
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table1Name
argument_list|)
condition|)
block|{
name|containsDb1Table1
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table2Name
argument_list|)
condition|)
block|{
name|containsDb1Table2
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table3Name
argument_list|)
condition|)
block|{
name|containsDb1Table3
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table4Name
argument_list|)
condition|)
block|{
name|containsDb1Table4
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db2Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table1Name
argument_list|)
condition|)
block|{
name|containsDb2Table1
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsDb1Table1
operator|&&
name|containsDb1Table2
operator|&&
name|containsDb1Table3
operator|&&
operator|!
name|containsDb1Table4
operator|&&
name|containsDb2Table1
argument_list|)
expr_stmt|;
name|opHandle
operator|=
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"select * from INFORMATION_SCHEMA.VIEWS"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|rowSet
operator|=
name|serviceClient
operator|.
name|fetchResults
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rowSet
operator|.
name|numRows
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iter
operator|=
name|rowSet
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
index|[]
name|cols
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table3Name
argument_list|)
condition|)
block|{
name|containsDb1Table3
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|containsDb1Table3
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsDb1Table3
argument_list|)
expr_stmt|;
name|opHandle
operator|=
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"select * from INFORMATION_SCHEMA.TABLE_PRIVILEGES"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|rowSet
operator|=
name|serviceClient
operator|.
name|fetchResults
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rowSet
operator|.
name|numRows
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|iter
operator|=
name|rowSet
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
index|[]
name|cols
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table1Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"SELECT"
argument_list|)
condition|)
block|{
name|containsDb1Table1SelectPriv
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table1Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"UPDATE"
argument_list|)
condition|)
block|{
name|containsDb1Table1UpdatePriv
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table2Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"SELECT"
argument_list|)
condition|)
block|{
name|containsDb1Table2SelectPriv
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table3Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"SELECT"
argument_list|)
condition|)
block|{
name|containsDb1Table3SelectPriv
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table4Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"SELECT"
argument_list|)
condition|)
block|{
name|containsDb1Table4SelectPriv
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db2Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table1Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"SELECT"
argument_list|)
condition|)
block|{
name|containsDb2Table1SelectPriv
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsDb1Table1SelectPriv
operator|&&
name|containsDb1Table1UpdatePriv
operator|&&
name|containsDb1Table2SelectPriv
operator|&&
name|containsDb1Table3SelectPriv
operator|&&
operator|!
name|containsDb1Table4SelectPriv
operator|&&
name|containsDb2Table1SelectPriv
argument_list|)
expr_stmt|;
name|opHandle
operator|=
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"select * from INFORMATION_SCHEMA.COLUMNS"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|rowSet
operator|=
name|serviceClient
operator|.
name|fetchResults
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rowSet
operator|.
name|numRows
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|iter
operator|=
name|rowSet
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
index|[]
name|cols
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table1Name
argument_list|)
operator|&&
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|containsDb1Table1Key
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table1Name
argument_list|)
operator|&&
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|containsDb1Table1Value
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table2Name
argument_list|)
operator|&&
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|containsDb1Table2Key
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table2Name
argument_list|)
operator|&&
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|containsDb1Table2Value
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table3Name
argument_list|)
operator|&&
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|containsDb1Table3Key
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table3Name
argument_list|)
operator|&&
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|containsDb1Table3Value
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db2Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table1Name
argument_list|)
operator|&&
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|containsDb2Table1Key
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsDb1Table1Key
operator|&&
name|containsDb1Table1Value
operator|&&
name|containsDb1Table2Key
operator|&&
name|containsDb1Table2Value
operator|&&
name|containsDb1Table3Key
operator|&&
name|containsDb1Table3Value
operator|&&
name|containsDb2Table1Key
argument_list|)
expr_stmt|;
name|containsDb1Table1Key
operator|=
literal|false
expr_stmt|;
name|containsDb1Table1Value
operator|=
literal|false
expr_stmt|;
name|containsDb1Table2Key
operator|=
literal|false
expr_stmt|;
name|containsDb1Table2Value
operator|=
literal|false
expr_stmt|;
name|containsDb1Table3Key
operator|=
literal|false
expr_stmt|;
name|containsDb1Table3Value
operator|=
literal|false
expr_stmt|;
name|containsDb2Table1Key
operator|=
literal|false
expr_stmt|;
name|opHandle
operator|=
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"select * from INFORMATION_SCHEMA.COLUMN_PRIVILEGES"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|rowSet
operator|=
name|serviceClient
operator|.
name|fetchResults
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rowSet
operator|.
name|numRows
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|iter
operator|=
name|rowSet
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
index|[]
name|cols
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table1Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|containsDb1Table1Key
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table1Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|containsDb1Table1Value
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table2Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|containsDb1Table2Key
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table2Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|containsDb1Table2Value
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table3Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|containsDb1Table3Key
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table3Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|containsDb1Table3Value
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db2Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table1Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|containsDb2Table1Key
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsDb1Table1Key
operator|&&
name|containsDb1Table1Value
operator|&&
name|containsDb1Table2Key
operator|&&
name|containsDb1Table2Value
operator|&&
name|containsDb1Table3Key
operator|&&
name|containsDb1Table3Value
operator|&&
name|containsDb2Table1Key
argument_list|)
expr_stmt|;
name|serviceClient
operator|.
name|closeSession
argument_list|(
name|sessHandle
argument_list|)
expr_stmt|;
comment|// User2 privileges:
comment|// testdb1: S
comment|// testtable1.*: S
comment|// testtable2.*: S
comment|// testtable3.*: S
comment|// testtable4.*: S
comment|// testdb2:
comment|// testtable1.*:
name|sessHandle
operator|=
name|serviceClient
operator|.
name|openSession
argument_list|(
literal|"user2"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|opHandle
operator|=
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"select * from INFORMATION_SCHEMA.SCHEMATA"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|rowSet
operator|=
name|serviceClient
operator|.
name|fetchResults
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rowSet
operator|.
name|numRows
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iter
operator|=
name|rowSet
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
index|[]
name|cols
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
condition|)
block|{
name|containsDb1
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsDb1
argument_list|)
expr_stmt|;
name|opHandle
operator|=
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"select * from INFORMATION_SCHEMA.TABLES"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|rowSet
operator|=
name|serviceClient
operator|.
name|fetchResults
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rowSet
operator|.
name|numRows
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|iter
operator|=
name|rowSet
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
index|[]
name|cols
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table1Name
argument_list|)
condition|)
block|{
name|containsDb1Table1
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table2Name
argument_list|)
condition|)
block|{
name|containsDb1Table2
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table3Name
argument_list|)
condition|)
block|{
name|containsDb1Table3
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table4Name
argument_list|)
condition|)
block|{
name|containsDb1Table4
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsDb1Table1
operator|&&
name|containsDb1Table2
operator|&&
name|containsDb1Table3
operator|&&
name|containsDb1Table4
argument_list|)
expr_stmt|;
name|opHandle
operator|=
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"select * from INFORMATION_SCHEMA.VIEWS"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|rowSet
operator|=
name|serviceClient
operator|.
name|fetchResults
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rowSet
operator|.
name|numRows
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iter
operator|=
name|rowSet
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
index|[]
name|cols
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table3Name
argument_list|)
condition|)
block|{
name|containsDb1Table3
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|containsDb1Table3
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsDb1Table3
argument_list|)
expr_stmt|;
name|opHandle
operator|=
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"select * from INFORMATION_SCHEMA.TABLE_PRIVILEGES"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|rowSet
operator|=
name|serviceClient
operator|.
name|fetchResults
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rowSet
operator|.
name|numRows
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|iter
operator|=
name|rowSet
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
index|[]
name|cols
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table1Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"SELECT"
argument_list|)
condition|)
block|{
name|containsDb1Table1SelectPriv
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table2Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"SELECT"
argument_list|)
condition|)
block|{
name|containsDb1Table2SelectPriv
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table3Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"SELECT"
argument_list|)
condition|)
block|{
name|containsDb1Table3SelectPriv
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table4Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"SELECT"
argument_list|)
condition|)
block|{
name|containsDb1Table4SelectPriv
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsDb1Table1SelectPriv
operator|&&
name|containsDb1Table2SelectPriv
operator|&&
name|containsDb1Table3SelectPriv
operator|&&
name|containsDb1Table4SelectPriv
argument_list|)
expr_stmt|;
comment|// db1.testtable3.p should also be in COLUMNS, will fix in separate ticket
name|opHandle
operator|=
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"select * from INFORMATION_SCHEMA.COLUMNS"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|rowSet
operator|=
name|serviceClient
operator|.
name|fetchResults
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rowSet
operator|.
name|numRows
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|iter
operator|=
name|rowSet
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
index|[]
name|cols
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table1Name
argument_list|)
operator|&&
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|containsDb1Table1Key
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table1Name
argument_list|)
operator|&&
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|containsDb1Table1Value
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table2Name
argument_list|)
operator|&&
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|containsDb1Table2Key
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table2Name
argument_list|)
operator|&&
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|containsDb1Table2Value
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table3Name
argument_list|)
operator|&&
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|containsDb1Table3Key
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table3Name
argument_list|)
operator|&&
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|containsDb1Table3Value
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table4Name
argument_list|)
operator|&&
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|containsDb1Table4Key
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|table4Name
argument_list|)
operator|&&
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|containsDb1Table4Value
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsDb1Table1Key
operator|&&
name|containsDb1Table1Value
operator|&&
name|containsDb1Table2Key
operator|&&
name|containsDb1Table2Value
operator|&&
name|containsDb1Table3Key
operator|&&
name|containsDb1Table3Value
operator|&&
name|containsDb1Table4Key
operator|&&
name|containsDb1Table4Value
argument_list|)
expr_stmt|;
name|containsDb1Table1Key
operator|=
literal|false
expr_stmt|;
name|containsDb1Table1Value
operator|=
literal|false
expr_stmt|;
name|containsDb1Table2Key
operator|=
literal|false
expr_stmt|;
name|containsDb1Table2Value
operator|=
literal|false
expr_stmt|;
name|containsDb1Table3Key
operator|=
literal|false
expr_stmt|;
name|containsDb1Table3Value
operator|=
literal|false
expr_stmt|;
name|containsDb1Table4Key
operator|=
literal|false
expr_stmt|;
name|containsDb1Table4Value
operator|=
literal|false
expr_stmt|;
name|containsDb1Table4P
operator|=
literal|false
expr_stmt|;
name|opHandle
operator|=
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"select * from INFORMATION_SCHEMA.COLUMN_PRIVILEGES"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|rowSet
operator|=
name|serviceClient
operator|.
name|fetchResults
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rowSet
operator|.
name|numRows
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|iter
operator|=
name|rowSet
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
index|[]
name|cols
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table1Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|containsDb1Table1Key
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table1Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|containsDb1Table1Value
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table2Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|containsDb1Table2Key
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table2Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|containsDb1Table2Value
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table3Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|containsDb1Table3Key
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table3Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|containsDb1Table3Value
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table4Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"key"
argument_list|)
condition|)
block|{
name|containsDb1Table4Key
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table4Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|containsDb1Table4Value
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cols
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|db1Name
argument_list|)
operator|&&
name|cols
index|[
literal|4
index|]
operator|.
name|equals
argument_list|(
name|table4Name
argument_list|)
operator|&&
name|cols
index|[
literal|5
index|]
operator|.
name|equals
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|containsDb1Table4P
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containsDb1Table1Key
operator|&&
name|containsDb1Table1Value
operator|&&
name|containsDb1Table2Key
operator|&&
name|containsDb1Table2Value
operator|&&
name|containsDb1Table3Key
operator|&&
name|containsDb1Table3Value
operator|&&
name|containsDb1Table4Key
operator|&&
name|containsDb1Table4Value
operator|&&
name|containsDb1Table4P
argument_list|)
expr_stmt|;
name|serviceClient
operator|.
name|closeSession
argument_list|(
name|sessHandle
argument_list|)
expr_stmt|;
comment|// Revert hive.server2.restrict_information_schema to false
name|miniHS2
operator|.
name|getHiveConf
argument_list|()
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
operator|.
name|varname
argument_list|,
name|TestHiveAuthorizerNullPolicyProviderFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|miniHS2
operator|.
name|getHiveConf
argument_list|()
operator|.
name|unset
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|PRE_EVENT_LISTENERS
operator|.
name|getVarname
argument_list|()
argument_list|)
expr_stmt|;
name|sessHandle
operator|=
name|serviceClient
operator|.
name|openSession
argument_list|(
literal|"user1"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|opHandle
operator|=
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"select * from INFORMATION_SCHEMA.SCHEMATA"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|rowSet
operator|=
name|serviceClient
operator|.
name|fetchResults
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rowSet
operator|.
name|numRows
argument_list|()
operator|>
literal|2
argument_list|)
expr_stmt|;
name|opHandle
operator|=
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"select * from INFORMATION_SCHEMA.TABLES"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|rowSet
operator|=
name|serviceClient
operator|.
name|fetchResults
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rowSet
operator|.
name|numRows
argument_list|()
operator|>
literal|10
argument_list|)
expr_stmt|;
name|opHandle
operator|=
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"select * from INFORMATION_SCHEMA.TABLE_PRIVILEGES"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|rowSet
operator|=
name|serviceClient
operator|.
name|fetchResults
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rowSet
operator|.
name|numRows
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|opHandle
operator|=
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"select * from INFORMATION_SCHEMA.COLUMNS"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|rowSet
operator|=
name|serviceClient
operator|.
name|fetchResults
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rowSet
operator|.
name|numRows
argument_list|()
operator|>
literal|10
argument_list|)
expr_stmt|;
name|opHandle
operator|=
name|serviceClient
operator|.
name|executeStatement
argument_list|(
name|sessHandle
argument_list|,
literal|"select * from INFORMATION_SCHEMA.COLUMN_PRIVILEGES"
argument_list|,
name|confOverlay
argument_list|)
expr_stmt|;
name|rowSet
operator|=
name|serviceClient
operator|.
name|fetchResults
argument_list|(
name|opHandle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rowSet
operator|.
name|numRows
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

