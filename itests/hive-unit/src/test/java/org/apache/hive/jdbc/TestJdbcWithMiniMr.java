begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|HiveSQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|session
operator|.
name|HiveSessionHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|session
operator|.
name|HiveSessionHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestJdbcWithMiniMr
block|{
specifier|public
specifier|static
specifier|final
name|String
name|TEST_TAG
init|=
literal|"miniHS2.miniMr.tag"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEST_TAG_VALUE
init|=
literal|"miniHS2.miniMr.value"
decl_stmt|;
specifier|public
specifier|static
class|class
name|MiniMrTestSessionHook
implements|implements
name|HiveSessionHook
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HiveSessionHookContext
name|sessionHookContext
parameter_list|)
throws|throws
name|HiveSQLException
block|{
name|sessionHookContext
operator|.
name|getSessionConf
argument_list|()
operator|.
name|set
argument_list|(
name|TEST_TAG
argument_list|,
name|TEST_TAG_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|MiniHS2
name|miniHS2
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|static
name|Path
name|dataFilePath
decl_stmt|;
specifier|private
specifier|static
name|String
name|dbName
init|=
literal|"mrTestDb"
decl_stmt|;
specifier|private
name|Connection
name|hs2Conn
init|=
literal|null
decl_stmt|;
specifier|private
name|Statement
name|stmt
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
operator|.
name|forName
argument_list|(
name|MiniHS2
operator|.
name|getJdbcDriverName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|dataFileDir
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"c:"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|dataFilePath
operator|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
name|DriverManager
operator|.
name|setLoginTimeout
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|miniHS2
operator|=
operator|new
name|MiniHS2
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overlayProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|overlayProps
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_SESSION_HOOK
operator|.
name|varname
argument_list|,
name|MiniMrTestSessionHook
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|overlayProps
argument_list|)
expr_stmt|;
name|createDb
argument_list|()
expr_stmt|;
block|}
comment|// setup DB
specifier|private
specifier|static
name|void
name|createDb
parameter_list|()
throws|throws
name|SQLException
block|{
name|Connection
name|conn
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|Statement
name|stmt2
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt2
operator|.
name|execute
argument_list|(
literal|"DROP DATABASE IF EXISTS "
operator|+
name|dbName
operator|+
literal|" CASCADE"
argument_list|)
expr_stmt|;
name|stmt2
operator|.
name|execute
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|stmt2
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|hs2Conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"USE "
operator|+
name|dbName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|hs2Conn
operator|!=
literal|null
condition|)
block|{
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterTest
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|miniHS2
operator|!=
literal|null
operator|&&
name|miniHS2
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Verify that the connection to HS2 with MiniMr is successful    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testConnection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// the session hook should set the property
name|verifyProperty
argument_list|(
name|TEST_TAG
argument_list|,
name|TEST_TAG_VALUE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run nonMr query    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testNonMrQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"testTab1"
decl_stmt|;
name|String
name|resultVal
init|=
literal|"val_238"
decl_stmt|;
name|String
name|queryStr
init|=
literal|"SELECT * FROM "
operator|+
name|tableName
decl_stmt|;
name|testKvQuery
argument_list|(
name|tableName
argument_list|,
name|queryStr
argument_list|,
name|resultVal
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run nonMr query    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMrQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"testTab2"
decl_stmt|;
name|String
name|resultVal
init|=
literal|"val_238"
decl_stmt|;
name|String
name|queryStr
init|=
literal|"SELECT * FROM "
operator|+
name|tableName
operator|+
literal|" where value = '"
operator|+
name|resultVal
operator|+
literal|"'"
decl_stmt|;
name|testKvQuery
argument_list|(
name|tableName
argument_list|,
name|queryStr
argument_list|,
name|resultVal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPermFunc
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test assumes the hive-contrib JAR has been built as part of the Hive build.
comment|// Also dependent on the UDFExampleAdd class within that JAR.
name|String
name|udfClassName
init|=
literal|"org.apache.hadoop.hive.contrib.udf.example.UDFExampleAdd"
decl_stmt|;
name|String
name|mvnRepo
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"maven.local.repository"
argument_list|)
decl_stmt|;
name|String
name|hiveVersion
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"hive.version"
argument_list|)
decl_stmt|;
name|String
name|jarFileName
init|=
literal|"hive-contrib-"
operator|+
name|hiveVersion
operator|+
literal|".jar"
decl_stmt|;
name|String
index|[]
name|pathParts
init|=
block|{
literal|"org"
block|,
literal|"apache"
block|,
literal|"hive"
block|,
literal|"hive-contrib"
block|,
name|hiveVersion
block|,
name|jarFileName
block|}
decl_stmt|;
comment|// Create path to hive-contrib JAR on local filesystem
name|Path
name|contribJarPath
init|=
operator|new
name|Path
argument_list|(
name|mvnRepo
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pathPart
range|:
name|pathParts
control|)
block|{
name|contribJarPath
operator|=
operator|new
name|Path
argument_list|(
name|contribJarPath
argument_list|,
name|pathPart
argument_list|)
expr_stmt|;
block|}
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Hive contrib JAR exists at "
operator|+
name|contribJarPath
argument_list|,
name|localFs
operator|.
name|exists
argument_list|(
name|contribJarPath
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|hdfsJarPathStr
init|=
literal|"hdfs:///"
operator|+
name|jarFileName
decl_stmt|;
name|Path
name|hdfsJarPath
init|=
operator|new
name|Path
argument_list|(
name|hdfsJarPathStr
argument_list|)
decl_stmt|;
comment|// Copy JAR to DFS
name|FileSystem
name|dfs
init|=
name|miniHS2
operator|.
name|getDFS
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|copyFromLocalFile
argument_list|(
name|contribJarPath
argument_list|,
name|hdfsJarPath
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Verify contrib JAR copied to HDFS at "
operator|+
name|hdfsJarPath
argument_list|,
name|dfs
operator|.
name|exists
argument_list|(
name|hdfsJarPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Register function
name|String
name|queryStr
init|=
literal|"CREATE FUNCTION example_add AS '"
operator|+
name|udfClassName
operator|+
literal|"'"
operator|+
literal|" USING JAR '"
operator|+
name|hdfsJarPathStr
operator|+
literal|"'"
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
name|queryStr
argument_list|)
expr_stmt|;
comment|// Call describe
name|ResultSet
name|res
decl_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"DESCRIBE FUNCTION "
operator|+
name|dbName
operator|+
literal|".example_add"
argument_list|)
expr_stmt|;
name|checkForNotExist
argument_list|(
name|res
argument_list|)
expr_stmt|;
comment|// Use UDF in query
name|String
name|tableName
init|=
literal|"testTab3"
decl_stmt|;
name|setupKv1Tabs
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT EXAMPLE_ADD(1, 2) FROM "
operator|+
name|tableName
operator|+
literal|" LIMIT 1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"query has results"
argument_list|,
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no more results"
argument_list|,
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// A new connection should be able to call describe/use function without issue
name|Connection
name|conn2
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|Statement
name|stmt2
init|=
name|conn2
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt2
operator|.
name|execute
argument_list|(
literal|"USE "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|res
operator|=
name|stmt2
operator|.
name|executeQuery
argument_list|(
literal|"DESCRIBE FUNCTION "
operator|+
name|dbName
operator|+
literal|".example_add"
argument_list|)
expr_stmt|;
name|checkForNotExist
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|res
operator|=
name|stmt2
operator|.
name|executeQuery
argument_list|(
literal|"SELECT "
operator|+
name|dbName
operator|+
literal|".example_add(1, 1) FROM "
operator|+
name|tableName
operator|+
literal|" LIMIT 1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"query has results"
argument_list|,
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no more results"
argument_list|,
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTempTable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create temp table with current connection
name|String
name|tempTableName
init|=
literal|"tmp1"
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TEMPORARY TABLE "
operator|+
name|tempTableName
operator|+
literal|" (key string, value string)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"load data local inpath '"
operator|+
name|dataFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|tempTableName
argument_list|)
expr_stmt|;
name|String
name|resultVal
init|=
literal|"val_238"
decl_stmt|;
name|String
name|queryStr
init|=
literal|"SELECT * FROM "
operator|+
name|tempTableName
operator|+
literal|" where value = '"
operator|+
name|resultVal
operator|+
literal|"'"
decl_stmt|;
name|verifyResult
argument_list|(
name|queryStr
argument_list|,
name|resultVal
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// A second connection should not be able to see the table
name|Connection
name|conn2
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|Statement
name|stmt2
init|=
name|conn2
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt2
operator|.
name|execute
argument_list|(
literal|"USE "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|boolean
name|gotException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ResultSet
name|res
decl_stmt|;
name|res
operator|=
name|stmt2
operator|.
name|executeQuery
argument_list|(
name|queryStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|err
parameter_list|)
block|{
comment|// This is expected to fail.
name|assertTrue
argument_list|(
literal|"Expecting table not found error, instead got: "
operator|+
name|err
argument_list|,
name|err
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Table not found"
argument_list|)
argument_list|)
expr_stmt|;
name|gotException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Exception while querying non-existing temp table"
argument_list|,
name|gotException
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkForNotExist
parameter_list|(
name|ResultSet
name|res
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numRows
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|numRows
operator|++
expr_stmt|;
name|String
name|strVal
init|=
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should not find 'not exist'"
argument_list|,
operator|-
literal|1
argument_list|,
name|strVal
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"not exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Rows returned from describe function"
argument_list|,
name|numRows
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify if the given property contains the expected value    * @param propertyName    * @param expectedValue    * @throws Exception    */
specifier|private
name|void
name|verifyProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|String
name|expectedValue
parameter_list|)
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"set "
operator|+
name|propertyName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|results
index|[]
init|=
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Property should be set"
argument_list|,
name|results
operator|.
name|length
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Property should be set"
argument_list|,
name|expectedValue
argument_list|,
name|results
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
comment|// create tables, verify query
specifier|private
name|void
name|testKvQuery
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|queryStr
parameter_list|,
name|String
name|resultVal
parameter_list|)
throws|throws
name|SQLException
block|{
name|setupKv1Tabs
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|queryStr
argument_list|,
name|resultVal
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|// create table and pupulate with kv1.txt
specifier|private
name|void
name|setupKv1Tabs
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// create table
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (under_col INT COMMENT 'the under column', value STRING)"
operator|+
literal|" COMMENT ' test table'"
argument_list|)
expr_stmt|;
comment|// load data
name|stmt
operator|.
name|execute
argument_list|(
literal|"load data local inpath '"
operator|+
name|dataFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|// run given query and validate expecated result
specifier|private
name|void
name|verifyResult
parameter_list|(
name|String
name|queryStr
parameter_list|,
name|String
name|expString
parameter_list|,
name|int
name|colPos
parameter_list|)
throws|throws
name|SQLException
block|{
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|queryStr
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expString
argument_list|,
name|res
operator|.
name|getString
argument_list|(
name|colPos
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

