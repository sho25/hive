begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|FieldDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapRowRecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
operator|.
name|MiniClusterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapBaseInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapRowInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|ClassLoaderResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|NucleusContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|api
operator|.
name|jdo
operator|.
name|JDOPersistenceManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|AbstractNucleusContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestJdbcWithMiniLlap
block|{
specifier|private
specifier|static
name|MiniHS2
name|miniHS2
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|String
name|dataFileDir
decl_stmt|;
specifier|private
specifier|static
name|Path
name|kvDataFilePath
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|tmpDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|conf
init|=
literal|null
decl_stmt|;
specifier|private
name|Connection
name|hs2Conn
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
operator|.
name|forName
argument_list|(
name|MiniHS2
operator|.
name|getJdbcDriverName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|confDir
init|=
literal|"../../data/conf/llap/"
decl_stmt|;
if|if
condition|(
name|confDir
operator|!=
literal|null
operator|&&
operator|!
name|confDir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HiveConf
operator|.
name|setHiveSiteLocation
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file://"
operator|+
operator|new
name|File
argument_list|(
name|confDir
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/hive-site.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setting hive-site: "
operator|+
name|HiveConf
operator|.
name|getHiveSiteLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file://"
operator|+
operator|new
name|File
argument_list|(
name|confDir
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/tez-site.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|miniHS2
operator|=
operator|new
name|MiniHS2
argument_list|(
name|conf
argument_list|,
name|MiniClusterType
operator|.
name|LLAP
argument_list|)
expr_stmt|;
name|dataFileDir
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"c:"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|kvDataFilePath
operator|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
name|miniHS2
operator|.
name|getDFS
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/apps_staging_dir/anonymous"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|hs2Conn
operator|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Connection
name|getConnection
parameter_list|(
name|String
name|jdbcURL
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|pwd
parameter_list|)
throws|throws
name|SQLException
block|{
name|Connection
name|conn
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|jdbcURL
argument_list|,
name|user
argument_list|,
name|pwd
argument_list|)
decl_stmt|;
name|conn
operator|.
name|createStatement
argument_list|()
operator|.
name|execute
argument_list|(
literal|"set hive.support.concurrency = false"
argument_list|)
expr_stmt|;
return|return
name|conn
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterTest
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|miniHS2
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createTestTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// create table
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (under_col INT COMMENT 'the under column', value STRING) COMMENT ' test table'"
argument_list|)
expr_stmt|;
comment|// load data
name|stmt
operator|.
name|execute
argument_list|(
literal|"load data local inpath '"
operator|+
name|kvDataFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val_238"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createTableWithComplexTypes
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// create table
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (c0 int, c1 array<int>, c2 map<int, string>, c3 struct<f1:int, f2:string, f3:array<int>>, c4 array<struct<f1:int, f2:string, f3:array<int>>>)"
argument_list|)
expr_stmt|;
comment|// load data
name|stmt
operator|.
name|execute
argument_list|(
literal|"insert into "
operator|+
name|tableName
operator|+
literal|" select 1"
operator|+
literal|", array(1, 2, 3)"
operator|+
literal|", map(1, 'one', 2, 'two')"
operator|+
literal|", named_struct('f1', 1, 'f2', 'two', 'f3', array(1,2,3))"
operator|+
literal|", array(named_struct('f1', 11, 'f2', 'two', 'f3', array(2,3,4)))"
argument_list|)
expr_stmt|;
comment|// Inserting nulls into complex columns doesn't work without this CASE workaround - what a hack.
name|stmt
operator|.
name|execute
argument_list|(
literal|"insert into "
operator|+
name|tableName
operator|+
literal|" select 2"
operator|+
literal|", case when 2 = 2 then null else array(1, 2, 3) end"
operator|+
literal|", case when 2 = 2 then null else map(1, 'one', 2, 'two') end"
operator|+
literal|", case when 2 = 2 then null else named_struct('f1', 1, 'f2', 'two', 'f3', array(1,2,3)) end"
operator|+
literal|", case when 2 = 2 then null else array(named_struct('f1', 11, 'f2', 'two', 'f3', array(2,3,4))) end"
argument_list|)
expr_stmt|;
comment|// TODO: test nested nulls in complex types. Currently blocked by HIVE-16587.
comment|//stmt.execute("insert into " + tableName
comment|//    + " select 3"
comment|//    + ", array(1, 2, null)"
comment|//    + ", map(1, 'one', 2, null)"
comment|//    + ", named_struct('f1', cast(null as int), 'f2', cast(null as string), 'f3', array(1,2,null))"
comment|//    + ", array(named_struct('f1', 11, 'f2', 'two', 'f3', array(2,3,4)))");
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testLlapInputFormatEndToEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestTable
argument_list|(
literal|"testtab1"
argument_list|)
expr_stmt|;
name|int
name|rowCount
decl_stmt|;
name|RowCollector
name|rowCollector
init|=
operator|new
name|RowCollector
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"select * from testtab1 where under_col = 0"
decl_stmt|;
name|rowCount
operator|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"val_0"
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"val_0"
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"val_0"
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try empty rows query
name|rowCollector
operator|.
name|rows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|query
operator|=
literal|"select * from testtab1 where true = false"
expr_stmt|;
name|rowCount
operator|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testNonAsciiStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestTable
argument_list|(
literal|"testtab1"
argument_list|)
expr_stmt|;
name|RowCollector
name|rowCollector
init|=
operator|new
name|RowCollector
argument_list|()
decl_stmt|;
name|String
name|nonAscii
init|=
literal|"À côté du garçon"
decl_stmt|;
name|String
name|query
init|=
literal|"select value, '"
operator|+
name|nonAscii
operator|+
literal|"' from testtab1 where under_col=0"
decl_stmt|;
name|int
name|rowCount
init|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"val_0"
block|,
name|nonAscii
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"val_0"
block|,
name|nonAscii
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"val_0"
block|,
name|nonAscii
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testEscapedStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestTable
argument_list|(
literal|"testtab1"
argument_list|)
expr_stmt|;
name|RowCollector
name|rowCollector
init|=
operator|new
name|RowCollector
argument_list|()
decl_stmt|;
name|String
name|expectedVal1
init|=
literal|"'a',\"b\",\\c\\"
decl_stmt|;
name|String
name|expectedVal2
init|=
literal|"multi\nline"
decl_stmt|;
name|String
name|query
init|=
literal|"select value, '\\'a\\',\"b\",\\\\c\\\\', 'multi\\nline' from testtab1 where under_col=0"
decl_stmt|;
name|int
name|rowCount
init|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"val_0"
block|,
name|expectedVal1
block|,
name|expectedVal2
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"val_0"
block|,
name|expectedVal1
block|,
name|expectedVal2
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"val_0"
block|,
name|expectedVal1
block|,
name|expectedVal2
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testComplexTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|createTableWithComplexTypes
argument_list|(
literal|"complex1"
argument_list|)
expr_stmt|;
name|RowCollector2
name|rowCollector
init|=
operator|new
name|RowCollector2
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"select * from complex1"
decl_stmt|;
name|int
name|rowCount
init|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
comment|// Verify schema
name|FieldDesc
name|c0Desc
init|=
name|rowCollector
operator|.
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"complex1.c0"
argument_list|,
name|c0Desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"int"
argument_list|,
name|c0Desc
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|FieldDesc
name|c1Desc
init|=
name|rowCollector
operator|.
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"complex1.c1"
argument_list|,
name|c1Desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"array<int>"
argument_list|,
name|c1Desc
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|FieldDesc
name|c2Desc
init|=
name|rowCollector
operator|.
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"complex1.c2"
argument_list|,
name|c2Desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"map<int,string>"
argument_list|,
name|c2Desc
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|FieldDesc
name|c3Desc
init|=
name|rowCollector
operator|.
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"complex1.c3"
argument_list|,
name|c3Desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Category
operator|.
name|STRUCT
argument_list|,
name|c3Desc
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStructFieldSchema
argument_list|(
operator|(
name|StructTypeInfo
operator|)
name|c3Desc
operator|.
name|getTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|FieldDesc
name|c4Desc
init|=
name|rowCollector
operator|.
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|get
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"complex1.c4"
argument_list|,
name|c4Desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Category
operator|.
name|LIST
argument_list|,
name|c4Desc
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|TypeInfo
name|c4ElementType
init|=
operator|(
operator|(
name|ListTypeInfo
operator|)
name|c4Desc
operator|.
name|getTypeInfo
argument_list|()
operator|)
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Category
operator|.
name|STRUCT
argument_list|,
name|c4ElementType
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStructFieldSchema
argument_list|(
operator|(
name|StructTypeInfo
operator|)
name|c4ElementType
argument_list|)
expr_stmt|;
comment|// First row
name|Object
index|[]
name|rowValues
init|=
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|(
operator|(
name|Integer
operator|)
name|rowValues
index|[
literal|0
index|]
operator|)
argument_list|)
expr_stmt|;
comment|// assertEquals("[1, 2, 3]", rowValues[1]);
name|List
argument_list|<
name|?
argument_list|>
name|c1Value
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|c1Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|c1Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|c1Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|,
name|c1Value
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// assertEquals("{1=one, 2=two}", rowValues[2]);
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|c2Value
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|2
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c2Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one"
argument_list|,
name|c2Value
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"two"
argument_list|,
name|c2Value
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//  assertEquals("[1, two, [1, 2, 3]]", rowValues[3]);
name|List
argument_list|<
name|?
argument_list|>
name|c3Value
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|3
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|c3Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"two"
argument_list|,
name|c3Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|f3Value
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|c3Value
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|f3Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|f3Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|,
name|f3Value
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// assertEquals("[[11, two, [2, 3, 4]]]", rowValues[4]);
name|List
argument_list|<
name|?
argument_list|>
name|c4Value
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|4
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c4Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|c4Element
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|c4Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|11
argument_list|)
argument_list|,
name|c4Element
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"two"
argument_list|,
name|c4Element
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|f3Value
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|c4Element
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|f3Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|f3Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|,
name|f3Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|4
argument_list|)
argument_list|,
name|f3Value
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Second row
name|rowValues
operator|=
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|(
operator|(
name|Integer
operator|)
name|rowValues
index|[
literal|0
index|]
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyStructFieldSchema
parameter_list|(
name|StructTypeInfo
name|structType
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|structType
operator|.
name|getAllStructFieldNames
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|TypeInfo
name|f1Type
init|=
name|structType
operator|.
name|getStructFieldTypeInfo
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Category
operator|.
name|PRIMITIVE
argument_list|,
name|f1Type
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PrimitiveCategory
operator|.
name|INT
argument_list|,
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|f1Type
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f2"
argument_list|,
name|structType
operator|.
name|getAllStructFieldNames
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|TypeInfo
name|f2Type
init|=
name|structType
operator|.
name|getStructFieldTypeInfo
argument_list|(
literal|"f2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Category
operator|.
name|PRIMITIVE
argument_list|,
name|f2Type
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PrimitiveCategory
operator|.
name|STRING
argument_list|,
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|f2Type
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f3"
argument_list|,
name|structType
operator|.
name|getAllStructFieldNames
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|TypeInfo
name|f3Type
init|=
name|structType
operator|.
name|getStructFieldTypeInfo
argument_list|(
literal|"f3"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Category
operator|.
name|LIST
argument_list|,
name|f3Type
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PrimitiveCategory
operator|.
name|INT
argument_list|,
operator|(
call|(
name|PrimitiveTypeInfo
call|)
argument_list|(
operator|(
name|ListTypeInfo
operator|)
name|f3Type
argument_list|)
operator|.
name|getListElementTypeInfo
argument_list|()
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
interface|interface
name|RowProcessor
block|{
name|void
name|process
parameter_list|(
name|Row
name|row
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|RowCollector
implements|implements
name|RowProcessor
block|{
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|Schema
name|schema
init|=
literal|null
decl_stmt|;
name|int
name|numColumns
init|=
literal|0
decl_stmt|;
specifier|public
name|void
name|process
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|schema
operator|=
name|row
operator|.
name|getSchema
argument_list|()
expr_stmt|;
name|numColumns
operator|=
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|arr
init|=
operator|new
name|String
index|[
name|numColumns
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|numColumns
condition|;
operator|++
name|idx
control|)
block|{
name|arr
index|[
name|idx
index|]
operator|=
name|row
operator|.
name|getValue
argument_list|(
name|idx
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|rows
operator|.
name|add
argument_list|(
name|arr
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Save the actual values from each row as opposed to the String representation.
specifier|private
specifier|static
class|class
name|RowCollector2
implements|implements
name|RowProcessor
block|{
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|Schema
name|schema
init|=
literal|null
decl_stmt|;
name|int
name|numColumns
init|=
literal|0
decl_stmt|;
specifier|public
name|void
name|process
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|schema
operator|=
name|row
operator|.
name|getSchema
argument_list|()
expr_stmt|;
name|numColumns
operator|=
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|Object
index|[]
name|arr
init|=
operator|new
name|Object
index|[
name|numColumns
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|numColumns
condition|;
operator|++
name|idx
control|)
block|{
name|arr
index|[
name|idx
index|]
operator|=
name|row
operator|.
name|getValue
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
name|rows
operator|.
name|add
argument_list|(
name|arr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|processQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|int
name|numSplits
parameter_list|,
name|RowProcessor
name|rowProcessor
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|String
name|pwd
init|=
name|user
decl_stmt|;
name|LlapRowInputFormat
name|inputFormat
init|=
operator|new
name|LlapRowInputFormat
argument_list|()
decl_stmt|;
comment|// Get splits
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|URL_KEY
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|USER_KEY
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|PWD_KEY
argument_list|,
name|pwd
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|QUERY_KEY
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|inputFormat
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
name|numSplits
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|splits
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Fetch rows from splits
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InputSplit
name|split
range|:
name|splits
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Processing split "
operator|+
name|split
operator|.
name|getLocations
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numColumns
init|=
literal|2
decl_stmt|;
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|Row
argument_list|>
name|reader
init|=
name|inputFormat
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|job
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Row
name|row
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|row
argument_list|)
condition|)
block|{
name|rowProcessor
operator|.
name|process
argument_list|(
name|row
argument_list|)
expr_stmt|;
operator|++
name|rowCount
expr_stmt|;
block|}
block|}
return|return
name|rowCount
return|;
block|}
block|}
end_class

end_unit

