begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|metrics2
operator|.
name|CodahaleMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|BeeLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the connection metrics using BeeLine client, when HS2 is started in binary mode.  */
end_comment

begin_class
specifier|public
class|class
name|TestHs2ConnectionMetricsBinary
extends|extends
name|Hs2ConnectionMetrics
block|{
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|confOverlay
operator|.
name|clear
argument_list|()
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_TRANSPORT_MODE
operator|.
name|varname
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
name|confOverlay
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_ENABLE_DOAS
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|Hs2ConnectionMetrics
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
name|Hs2ConnectionMetrics
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOpenConnectionMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|CodahaleMetrics
name|metrics
init|=
operator|(
name|CodahaleMetrics
operator|)
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
index|[]
name|beelineArgs
init|=
block|{
literal|"-u"
block|,
name|miniHS2
operator|.
name|getBaseJdbcURL
argument_list|()
operator|+
literal|"default"
block|,
literal|"-n"
block|,
name|USERNAME
block|,
literal|"-p"
block|,
name|PASSWORD
block|,
literal|"-e"
block|,
literal|"show tables;"
block|}
decl_stmt|;
name|BeeLine
name|beeLine
init|=
name|openBeeLineConnection
argument_list|(
name|beelineArgs
argument_list|)
decl_stmt|;
comment|// wait a couple of sec to make sure the connection is open
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|verifyConnectionMetrics
argument_list|(
name|metrics
operator|.
name|dumpJson
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|close
argument_list|()
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|verifyConnectionMetrics
argument_list|(
name|metrics
operator|.
name|dumpJson
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|beeLine
operator|=
name|openBeeLineConnection
argument_list|(
name|beelineArgs
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|verifyConnectionMetrics
argument_list|(
name|metrics
operator|.
name|dumpJson
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|beeLine
operator|.
name|close
argument_list|()
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|verifyConnectionMetrics
argument_list|(
name|metrics
operator|.
name|dumpJson
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|BeeLine
name|openBeeLineConnection
parameter_list|(
name|String
index|[]
name|beelineArgs
parameter_list|)
throws|throws
name|IOException
block|{
name|BeeLine
name|beeLine
init|=
operator|new
name|BeeLine
argument_list|()
decl_stmt|;
name|beeLine
operator|.
name|begin
argument_list|(
name|beelineArgs
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|beeLine
return|;
block|}
block|}
end_class

end_unit

