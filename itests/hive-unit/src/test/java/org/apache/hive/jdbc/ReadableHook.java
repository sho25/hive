begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ExecuteWithHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookContext
import|;
end_import

begin_comment
comment|/**  * An ExecuteWithHookContext that stores HookContexts in memory and makes them available for reading  */
end_comment

begin_class
specifier|public
class|class
name|ReadableHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|private
specifier|static
name|List
argument_list|<
name|HookContext
argument_list|>
name|hookList
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
name|hookList
operator|.
name|add
argument_list|(
name|hookContext
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the stored HookContexts.    */
specifier|public
specifier|static
name|List
argument_list|<
name|HookContext
argument_list|>
name|getHookList
parameter_list|()
block|{
return|return
name|hookList
return|;
block|}
comment|/**    * Clear the stored HookContexts.    */
specifier|public
specifier|static
name|void
name|clear
parameter_list|()
block|{
name|hookList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

