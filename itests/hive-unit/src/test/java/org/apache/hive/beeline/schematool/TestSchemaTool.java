begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|beeline
operator|.
name|schematool
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|HiveSchemaHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|HiveSchemaHelper
operator|.
name|NestedScriptParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
operator|.
name|HiveSchemaHelper
operator|.
name|PostgresCommandParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestSchemaTool
block|{
comment|/**    * Test script formatting    */
annotation|@
name|Test
specifier|public
name|void
name|testScripts
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testScript
index|[]
init|=
block|{
literal|"-- this is a comment"
block|,
literal|"DROP TABLE IF EXISTS fooTab;"
block|,
literal|"/*!1234 this is comment code like mysql */;"
block|,
literal|"CREATE TABLE fooTab(id INTEGER);"
block|,
literal|"DROP TABLE footab;"
block|,
literal|"-- ending comment"
block|}
decl_stmt|;
name|String
name|resultScript
index|[]
init|=
block|{
literal|"DROP TABLE IF EXISTS fooTab"
block|,
literal|"/*!1234 this is comment code like mysql */"
block|,
literal|"CREATE TABLE fooTab(id INTEGER)"
block|,
literal|"DROP TABLE footab"
block|,     }
decl_stmt|;
name|String
name|expectedSQL
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|resultScript
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|File
name|testScriptFile
init|=
name|generateTestScript
argument_list|(
name|testScript
argument_list|)
decl_stmt|;
name|String
name|flattenedSql
init|=
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
literal|"derby"
argument_list|,
literal|false
argument_list|)
operator|.
name|buildCommand
argument_list|(
name|testScriptFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|testScriptFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSQL
argument_list|,
name|flattenedSql
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test nested script formatting    */
annotation|@
name|Test
specifier|public
name|void
name|testNestedScriptsForDerby
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|childTab1
init|=
literal|"childTab1"
decl_stmt|;
name|String
name|childTab2
init|=
literal|"childTab2"
decl_stmt|;
name|String
name|parentTab
init|=
literal|"fooTab"
decl_stmt|;
name|String
name|childTestScript1
index|[]
init|=
block|{
literal|"-- this is a comment "
block|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|childTab1
operator|+
literal|";"
block|,
literal|"CREATE TABLE "
operator|+
name|childTab1
operator|+
literal|"(id INTEGER);"
block|,
literal|"DROP TABLE "
operator|+
name|childTab1
operator|+
literal|";"
block|}
decl_stmt|;
name|String
name|childTestScript2
index|[]
init|=
block|{
literal|"-- this is a comment"
block|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|childTab2
operator|+
literal|";"
block|,
literal|"CREATE TABLE "
operator|+
name|childTab2
operator|+
literal|"(id INTEGER);"
block|,
literal|"-- this is also a comment"
block|,
literal|"DROP TABLE "
operator|+
name|childTab2
operator|+
literal|";"
block|}
decl_stmt|;
name|String
name|parentTestScript
index|[]
init|=
block|{
literal|" -- this is a comment"
block|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|parentTab
operator|+
literal|";"
block|,
literal|" -- this is another comment "
block|,
literal|"CREATE TABLE "
operator|+
name|parentTab
operator|+
literal|"(id INTEGER);"
block|,
literal|"RUN '"
operator|+
name|generateTestScript
argument_list|(
name|childTestScript1
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|"';"
block|,
literal|"DROP TABLE "
operator|+
name|parentTab
operator|+
literal|";"
block|,
literal|"RUN '"
operator|+
name|generateTestScript
argument_list|(
name|childTestScript2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|"';"
block|,
literal|"--ending comment "
block|,       }
decl_stmt|;
name|File
name|testScriptFile
init|=
name|generateTestScript
argument_list|(
name|parentTestScript
argument_list|)
decl_stmt|;
name|String
name|flattenedSql
init|=
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
literal|"derby"
argument_list|,
literal|false
argument_list|)
operator|.
name|buildCommand
argument_list|(
name|testScriptFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|testScriptFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
literal|"RUN"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
name|childTab1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
name|childTab2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
name|parentTab
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test nested script formatting    */
annotation|@
name|Test
specifier|public
name|void
name|testNestedScriptsForMySQL
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|childTab1
init|=
literal|"childTab1"
decl_stmt|;
name|String
name|childTab2
init|=
literal|"childTab2"
decl_stmt|;
name|String
name|parentTab
init|=
literal|"fooTab"
decl_stmt|;
name|String
name|childTestScript1
index|[]
init|=
block|{
literal|"/* this is a comment code */"
block|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|childTab1
operator|+
literal|";"
block|,
literal|"CREATE TABLE "
operator|+
name|childTab1
operator|+
literal|"(id INTEGER);"
block|,
literal|"DROP TABLE "
operator|+
name|childTab1
operator|+
literal|";"
block|}
decl_stmt|;
name|String
name|childTestScript2
index|[]
init|=
block|{
literal|"/* this is a special exec code */;"
block|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|childTab2
operator|+
literal|";"
block|,
literal|"CREATE TABLE "
operator|+
name|childTab2
operator|+
literal|"(id INTEGER);"
block|,
literal|"-- this is a comment"
block|,
literal|"DROP TABLE "
operator|+
name|childTab2
operator|+
literal|";"
block|}
decl_stmt|;
name|String
name|parentTestScript
index|[]
init|=
block|{
literal|" -- this is a comment"
block|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|parentTab
operator|+
literal|";"
block|,
literal|" /* this is special exec code */;"
block|,
literal|"CREATE TABLE "
operator|+
name|parentTab
operator|+
literal|"(id INTEGER);"
block|,
literal|"SOURCE "
operator|+
name|generateTestScript
argument_list|(
name|childTestScript1
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|";"
block|,
literal|"DROP TABLE "
operator|+
name|parentTab
operator|+
literal|";"
block|,
literal|"SOURCE "
operator|+
name|generateTestScript
argument_list|(
name|childTestScript2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|";"
block|,
literal|"--ending comment "
block|,       }
decl_stmt|;
name|File
name|testScriptFile
init|=
name|generateTestScript
argument_list|(
name|parentTestScript
argument_list|)
decl_stmt|;
name|String
name|flattenedSql
init|=
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
literal|"mysql"
argument_list|,
literal|false
argument_list|)
operator|.
name|buildCommand
argument_list|(
name|testScriptFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|testScriptFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
literal|"RUN"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
name|childTab1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
name|childTab2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
name|parentTab
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test script formatting    */
annotation|@
name|Test
specifier|public
name|void
name|testScriptWithDelimiter
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testScript
index|[]
init|=
block|{
literal|"-- this is a comment"
block|,
literal|"DROP TABLE IF EXISTS fooTab;"
block|,
literal|"DELIMITER $$"
block|,
literal|"/*!1234 this is comment code like mysql */$$"
block|,
literal|"CREATE TABLE fooTab(id INTEGER)$$"
block|,
literal|"CREATE PROCEDURE fooProc()"
block|,
literal|"SELECT * FROM fooTab;"
block|,
literal|"CALL barProc();"
block|,
literal|"END PROCEDURE$$"
block|,
literal|"DELIMITER ;"
block|,
literal|"DROP TABLE footab;"
block|,
literal|"-- ending comment"
block|}
decl_stmt|;
name|String
name|resultScript
index|[]
init|=
block|{
literal|"DROP TABLE IF EXISTS fooTab"
block|,
literal|"/*!1234 this is comment code like mysql */"
block|,
literal|"CREATE TABLE fooTab(id INTEGER)"
block|,
literal|"CREATE PROCEDURE fooProc()"
operator|+
literal|" "
operator|+
literal|"SELECT * FROM fooTab;"
operator|+
literal|" "
operator|+
literal|"CALL barProc();"
operator|+
literal|" "
operator|+
literal|"END PROCEDURE"
block|,
literal|"DROP TABLE footab"
block|,     }
decl_stmt|;
name|String
name|expectedSQL
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|resultScript
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|File
name|testScriptFile
init|=
name|generateTestScript
argument_list|(
name|testScript
argument_list|)
decl_stmt|;
name|NestedScriptParser
name|testDbParser
init|=
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
literal|"mysql"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|flattenedSql
init|=
name|testDbParser
operator|.
name|buildCommand
argument_list|(
name|testScriptFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|testScriptFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSQL
argument_list|,
name|flattenedSql
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test script formatting    */
annotation|@
name|Test
specifier|public
name|void
name|testScriptMultiRowComment
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testScript
index|[]
init|=
block|{
literal|"-- this is a comment"
block|,
literal|"DROP TABLE IF EXISTS fooTab;"
block|,
literal|"DELIMITER $$"
block|,
literal|"/*!1234 this is comment code like mysql */$$"
block|,
literal|"CREATE TABLE fooTab(id INTEGER)$$"
block|,
literal|"DELIMITER ;"
block|,
literal|"/* multiline comment started "
block|,
literal|" * multiline comment continue"
block|,
literal|" * multiline comment ended */"
block|,
literal|"DROP TABLE footab;"
block|,
literal|"-- ending comment"
block|}
decl_stmt|;
name|String
name|parsedScript
index|[]
init|=
block|{
literal|"DROP TABLE IF EXISTS fooTab"
block|,
literal|"/*!1234 this is comment code like mysql */"
block|,
literal|"CREATE TABLE fooTab(id INTEGER)"
block|,
literal|"DROP TABLE footab"
block|,     }
decl_stmt|;
name|String
name|expectedSQL
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|parsedScript
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|File
name|testScriptFile
init|=
name|generateTestScript
argument_list|(
name|testScript
argument_list|)
decl_stmt|;
name|NestedScriptParser
name|testDbParser
init|=
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
literal|"mysql"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|flattenedSql
init|=
name|testDbParser
operator|.
name|buildCommand
argument_list|(
name|testScriptFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|testScriptFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSQL
argument_list|,
name|flattenedSql
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test nested script formatting    */
annotation|@
name|Test
specifier|public
name|void
name|testNestedScriptsForOracle
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|childTab1
init|=
literal|"childTab1"
decl_stmt|;
name|String
name|childTab2
init|=
literal|"childTab2"
decl_stmt|;
name|String
name|parentTab
init|=
literal|"fooTab"
decl_stmt|;
name|String
name|childTestScript1
index|[]
init|=
block|{
literal|"-- this is a comment "
block|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|childTab1
operator|+
literal|";"
block|,
literal|"CREATE TABLE "
operator|+
name|childTab1
operator|+
literal|"(id INTEGER);"
block|,
literal|"DROP TABLE "
operator|+
name|childTab1
operator|+
literal|";"
block|}
decl_stmt|;
name|String
name|childTestScript2
index|[]
init|=
block|{
literal|"-- this is a comment"
block|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|childTab2
operator|+
literal|";"
block|,
literal|"CREATE TABLE "
operator|+
name|childTab2
operator|+
literal|"(id INTEGER);"
block|,
literal|"-- this is also a comment"
block|,
literal|"DROP TABLE "
operator|+
name|childTab2
operator|+
literal|";"
block|}
decl_stmt|;
name|String
name|parentTestScript
index|[]
init|=
block|{
literal|" -- this is a comment"
block|,
literal|"DROP TABLE IF EXISTS "
operator|+
name|parentTab
operator|+
literal|";"
block|,
literal|" -- this is another comment "
block|,
literal|"CREATE TABLE "
operator|+
name|parentTab
operator|+
literal|"(id INTEGER);"
block|,
literal|"@"
operator|+
name|generateTestScript
argument_list|(
name|childTestScript1
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|";"
block|,
literal|"DROP TABLE "
operator|+
name|parentTab
operator|+
literal|";"
block|,
literal|"@"
operator|+
name|generateTestScript
argument_list|(
name|childTestScript2
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|";"
block|,
literal|"--ending comment "
block|,       }
decl_stmt|;
name|File
name|testScriptFile
init|=
name|generateTestScript
argument_list|(
name|parentTestScript
argument_list|)
decl_stmt|;
name|String
name|flattenedSql
init|=
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
literal|"oracle"
argument_list|,
literal|false
argument_list|)
operator|.
name|buildCommand
argument_list|(
name|testScriptFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|testScriptFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
literal|"@"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
name|childTab1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
name|childTab2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|flattenedSql
operator|.
name|contains
argument_list|(
name|parentTab
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test script formatting    */
annotation|@
name|Test
specifier|public
name|void
name|testPostgresFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testScript
index|[]
init|=
block|{
literal|"-- this is a comment"
block|,
literal|"DROP TABLE IF EXISTS fooTab;"
block|,
name|HiveSchemaHelper
operator|.
name|PostgresCommandParser
operator|.
name|POSTGRES_STANDARD_STRINGS_OPT
operator|+
literal|";"
block|,
literal|"CREATE TABLE fooTab(id INTEGER);"
block|,
literal|"DROP TABLE footab;"
block|,
literal|"-- ending comment"
block|}
decl_stmt|;
name|String
name|expectedScriptWithOptionPresent
index|[]
init|=
block|{
literal|"DROP TABLE IF EXISTS fooTab"
block|,
name|HiveSchemaHelper
operator|.
name|PostgresCommandParser
operator|.
name|POSTGRES_STANDARD_STRINGS_OPT
block|,
literal|"CREATE TABLE fooTab(id INTEGER)"
block|,
literal|"DROP TABLE footab"
block|,     }
decl_stmt|;
name|NestedScriptParser
name|noDbOptParser
init|=
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
literal|"postgres"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|expectedSQL
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|expectedScriptWithOptionPresent
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|File
name|testScriptFile
init|=
name|generateTestScript
argument_list|(
name|testScript
argument_list|)
decl_stmt|;
name|String
name|flattenedSql
init|=
name|noDbOptParser
operator|.
name|buildCommand
argument_list|(
name|testScriptFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|testScriptFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSQL
argument_list|,
name|flattenedSql
argument_list|)
expr_stmt|;
name|String
name|expectedScriptWithOptionAbsent
index|[]
init|=
block|{
literal|"DROP TABLE IF EXISTS fooTab"
block|,
literal|"CREATE TABLE fooTab(id INTEGER)"
block|,
literal|"DROP TABLE footab"
block|,     }
decl_stmt|;
name|NestedScriptParser
name|dbOptParser
init|=
name|HiveSchemaHelper
operator|.
name|getDbCommandParser
argument_list|(
literal|"postgres"
argument_list|,
name|PostgresCommandParser
operator|.
name|POSTGRES_SKIP_STANDARD_STRINGS_DBOPT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|expectedSQL
operator|=
name|StringUtils
operator|.
name|join
argument_list|(
name|expectedScriptWithOptionAbsent
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
expr_stmt|;
name|testScriptFile
operator|=
name|generateTestScript
argument_list|(
name|testScript
argument_list|)
expr_stmt|;
name|flattenedSql
operator|=
name|dbOptParser
operator|.
name|buildCommand
argument_list|(
name|testScriptFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|testScriptFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSQL
argument_list|,
name|flattenedSql
argument_list|)
expr_stmt|;
block|}
specifier|private
name|File
name|generateTestScript
parameter_list|(
name|String
index|[]
name|stmts
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|testScriptFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"schematest"
argument_list|,
literal|".sql"
argument_list|)
decl_stmt|;
name|testScriptFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|FileWriter
name|fstream
init|=
operator|new
name|FileWriter
argument_list|(
name|testScriptFile
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|BufferedWriter
name|out
init|=
operator|new
name|BufferedWriter
argument_list|(
name|fstream
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|stmts
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|out
operator|.
name|newLine
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|testScriptFile
return|;
block|}
block|}
end_class

end_unit

