begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|LineageLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|optimizer
operator|.
name|lineage
operator|.
name|LineageCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|HiveSQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|ClassLoaderResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|NucleusContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|api
operator|.
name|jdo
operator|.
name|JDOPersistenceManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|AbstractNucleusContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestJdbcWithMiniHS2
block|{
specifier|private
specifier|static
name|MiniHS2
name|miniHS2
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|String
name|dataFileDir
decl_stmt|;
specifier|private
specifier|static
name|Path
name|kvDataFilePath
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|tmpDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|testDbName
init|=
literal|"testjdbcminihs2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|defaultDbName
init|=
literal|"default"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|tableName
init|=
literal|"testjdbcminihs2tbl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|tableComment
init|=
literal|"Simple table"
decl_stmt|;
specifier|private
specifier|static
name|Connection
name|conDefault
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Connection
name|conTestDb
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|String
name|testUdfClassName
init|=
literal|"org.apache.hadoop.hive.contrib.udf.example.UDFExampleAdd"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniHS2
operator|.
name|cleanupLocalDir
argument_list|()
expr_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|dataFileDir
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"c:"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|kvDataFilePath
operator|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
try|try
block|{
name|startMiniHS2
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unable to start MiniHS2: "
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
comment|// Open default connections which will be used throughout the tests
try|try
block|{
name|openDefaultConnections
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unable to open default connections to MiniHS2: "
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|Statement
name|stmt
init|=
name|conDefault
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop database if exists "
operator|+
name|testDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create database "
operator|+
name|testDbName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|openTestConnections
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unable to open default connections to MiniHS2: "
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
comment|// tables in test db
name|createTestTables
argument_list|(
name|conTestDb
argument_list|,
name|testDbName
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Connection
name|getConnection
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Connection
name|getConnection
parameter_list|(
name|String
name|jdbcURL
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|pwd
parameter_list|)
throws|throws
name|SQLException
block|{
name|Connection
name|conn
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|jdbcURL
argument_list|,
name|user
argument_list|,
name|pwd
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|conn
argument_list|)
expr_stmt|;
return|return
name|conn
return|;
block|}
specifier|private
specifier|static
name|void
name|createTestTables
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|String
name|dbName
parameter_list|)
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|Path
name|dataFilePath
init|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"kv1.txt"
argument_list|)
decl_stmt|;
comment|// We've already dropped testDbName in constructor& we also drop it in tearDownAfterClass
name|String
name|prefix
init|=
name|dbName
operator|+
literal|"."
decl_stmt|;
name|String
name|tableName
init|=
name|prefix
operator|+
name|TestJdbcWithMiniHS2
operator|.
name|tableName
decl_stmt|;
comment|// create a table
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (int_col int comment 'the int column', value string) comment '"
operator|+
name|tableComment
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|// load data
name|stmt
operator|.
name|execute
argument_list|(
literal|"load data local inpath '"
operator|+
name|dataFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// drop test db and its tables and views
name|Statement
name|stmt
init|=
name|conDefault
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.support.concurrency = false"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop database if exists "
operator|+
name|testDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|conTestDb
operator|!=
literal|null
condition|)
block|{
name|conTestDb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conDefault
operator|!=
literal|null
condition|)
block|{
name|conDefault
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|stopMiniHS2
argument_list|()
expr_stmt|;
name|cleanupMiniHS2
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|restoreMiniHS2AndConnections
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|conTestDb
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|conTestDb
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// Do nothing
block|}
block|}
if|if
condition|(
name|conDefault
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|conDefault
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// Do nothing
block|}
block|}
name|stopMiniHS2
argument_list|()
expr_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|startMiniHS2
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|openDefaultConnections
argument_list|()
expr_stmt|;
name|openTestConnections
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|startMiniHS2
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|startMiniHS2
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|startMiniHS2
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|boolean
name|httpMode
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_LOGGING_OPERATION_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVESTATSCOLAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// store post-exec hooks calls so we can look at them later
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|POSTEXECHOOKS
argument_list|,
name|ReadableHook
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|","
operator|+
name|LineageLogger
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|MiniHS2
operator|.
name|Builder
name|builder
init|=
operator|new
name|MiniHS2
operator|.
name|Builder
argument_list|()
operator|.
name|withConf
argument_list|(
name|conf
argument_list|)
operator|.
name|cleanupLocalDirOnStartup
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|httpMode
condition|)
block|{
name|builder
operator|=
name|builder
operator|.
name|withHTTPTransport
argument_list|()
expr_stmt|;
block|}
name|miniHS2
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|stopMiniHS2
parameter_list|()
block|{
if|if
condition|(
operator|(
name|miniHS2
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|miniHS2
operator|.
name|isStarted
argument_list|()
operator|)
condition|)
block|{
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|cleanupMiniHS2
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|miniHS2
operator|!=
literal|null
condition|)
block|{
name|miniHS2
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
name|MiniHS2
operator|.
name|cleanupLocalDir
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|openDefaultConnections
parameter_list|()
throws|throws
name|Exception
block|{
name|conDefault
operator|=
name|getConnection
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|openTestConnections
parameter_list|()
throws|throws
name|Exception
block|{
name|conTestDb
operator|=
name|getConnection
argument_list|(
name|testDbName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|conTestDb
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tableName
operator|+
literal|" limit 5"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParallelCompilation
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|conTestDb
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.driver.parallel.compilation=true"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.server2.async.exec.async.compile=true"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|startConcurrencyTest
argument_list|(
name|conTestDb
argument_list|,
name|tableName
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|getConnection
argument_list|(
name|testDbName
argument_list|)
decl_stmt|;
name|startConcurrencyTest
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParallelCompilation2
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|conTestDb
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.driver.parallel.compilation=false"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.server2.async.exec.async.compile=true"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|startConcurrencyTest
argument_list|(
name|conTestDb
argument_list|,
name|tableName
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|getConnection
argument_list|(
name|testDbName
argument_list|)
decl_stmt|;
name|startConcurrencyTest
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentStatements
parameter_list|()
throws|throws
name|Exception
block|{
name|startConcurrencyTest
argument_list|(
name|conTestDb
argument_list|,
name|tableName
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|startConcurrencyTest
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|numTasks
parameter_list|)
block|{
comment|// Start concurrent testing
name|int
name|POOL_SIZE
init|=
literal|100
decl_stmt|;
name|int
name|TASK_COUNT
init|=
name|numTasks
decl_stmt|;
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
name|executorQueue
init|=
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
decl_stmt|;
name|ExecutorService
name|workers
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
name|POOL_SIZE
argument_list|,
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|executorQueue
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|Boolean
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|TASK_COUNT
condition|)
block|{
try|try
block|{
name|Future
argument_list|<
name|Boolean
argument_list|>
name|future
init|=
name|workers
operator|.
name|submit
argument_list|(
operator|new
name|JDBCTask
argument_list|(
name|conn
argument_list|,
name|i
argument_list|,
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ree
parameter_list|)
block|{
try|try
block|{
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Future
argument_list|<
name|Boolean
argument_list|>
name|future
range|:
name|list
control|)
block|{
try|try
block|{
name|Boolean
name|result
init|=
name|future
operator|.
name|get
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ee
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Concurrent Statement failed: "
operator|+
name|ee
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|te
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Task was timeout after 30 second: "
operator|+
name|te
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|ce
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Task was interrupted: "
operator|+
name|ce
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Thread was interrupted: "
operator|+
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
name|workers
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|static
class|class
name|JDBCTask
implements|implements
name|Callable
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
name|String
name|showsql
init|=
literal|"show tables"
decl_stmt|;
specifier|private
name|String
name|querysql
decl_stmt|;
specifier|private
name|int
name|seq
init|=
literal|0
decl_stmt|;
name|Connection
name|con
init|=
literal|null
decl_stmt|;
name|Statement
name|stmt
init|=
literal|null
decl_stmt|;
name|ResultSet
name|res
init|=
literal|null
decl_stmt|;
name|JDBCTask
parameter_list|(
name|Connection
name|con
parameter_list|,
name|int
name|seq
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
name|this
operator|.
name|con
operator|=
name|con
expr_stmt|;
name|this
operator|.
name|seq
operator|=
name|seq
expr_stmt|;
name|querysql
operator|=
literal|"SELECT count(value) FROM "
operator|+
name|tblName
expr_stmt|;
block|}
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|SQLException
block|{
name|int
name|mod
init|=
name|seq
operator|%
literal|10
decl_stmt|;
try|try
block|{
if|if
condition|(
name|mod
operator|<
literal|2
condition|)
block|{
name|String
name|name
init|=
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getDatabaseProductName
argument_list|()
decl_stmt|;
block|}
elseif|else
if|if
condition|(
name|mod
operator|<
literal|5
condition|)
block|{
name|stmt
operator|=
name|con
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|querysql
argument_list|)
expr_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|mod
operator|<
literal|7
condition|)
block|{
name|res
operator|=
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSchemas
argument_list|()
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|stmt
operator|=
name|con
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|showsql
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
return|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|res
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|stmt
operator|!=
literal|null
condition|)
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqle1
parameter_list|)
block|{         }
block|}
block|}
block|}
comment|/**   This test is to connect to any database without using the command "Use<<DB>>"    *  1) connect to default database.    *  2) Create a new DB test_default.    *  3) Connect to test_default database.    *  4) Connect and create table under test_default_test.    *  5) Connect and display all tables.    *  6) Connect to default database and shouldn't find table test_default_test.    *  7) Connect and drop test_default_test.    *  8) drop test_default database.    */
annotation|@
name|Test
specifier|public
name|void
name|testURIDatabaseName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jdbcUri
init|=
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"default"
argument_list|)
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
name|getConnection
argument_list|(
name|jdbcUri
operator|+
literal|"default"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
literal|"test_connection_non_default_db"
decl_stmt|;
name|String
name|tableInNonDefaultSchema
init|=
literal|"table_in_non_default_schema"
decl_stmt|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create database  if not exists "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|=
name|getConnection
argument_list|(
name|jdbcUri
operator|+
name|dbName
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|boolean
name|expected
init|=
name|stmt
operator|.
name|execute
argument_list|(
literal|" create table "
operator|+
name|tableInNonDefaultSchema
operator|+
literal|" (x int)"
argument_list|)
decl_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|=
name|getConnection
argument_list|(
name|jdbcUri
operator|+
name|dbName
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show tables"
argument_list|)
decl_stmt|;
name|boolean
name|testTableExists
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"table name is null in result set"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableInNonDefaultSchema
operator|.
name|equalsIgnoreCase
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|testTableExists
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"table name  "
operator|+
name|tableInNonDefaultSchema
operator|+
literal|"   found in SHOW TABLES result set"
argument_list|,
name|testTableExists
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|=
name|getConnection
argument_list|(
name|jdbcUri
operator|+
literal|"default"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show tables"
argument_list|)
expr_stmt|;
name|testTableExists
operator|=
literal|false
expr_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"table name is null in result set"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableInNonDefaultSchema
operator|.
name|equalsIgnoreCase
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|testTableExists
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
literal|"table name "
operator|+
name|tableInNonDefaultSchema
operator|+
literal|"  NOT  found in SHOW TABLES result set"
argument_list|,
name|testTableExists
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|=
name|getConnection
argument_list|(
name|jdbcUri
operator|+
name|dbName
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.support.concurrency = false"
argument_list|)
expr_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show tables"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|" drop table if exists table_in_non_default_schema"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP DATABASE "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|=
name|getConnection
argument_list|(
name|jdbcUri
operator|+
literal|"default"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show tables"
argument_list|)
expr_stmt|;
name|testTableExists
operator|=
literal|false
expr_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"table name is null in result set"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableInNonDefaultSchema
operator|.
name|equalsIgnoreCase
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|testTableExists
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// test URI with no dbName
name|conn
operator|=
name|getConnection
argument_list|(
name|jdbcUri
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|verifyCurrentDB
argument_list|(
literal|"default"
argument_list|,
name|conn
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|=
name|getConnection
argument_list|(
name|jdbcUri
operator|+
literal|";"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|verifyCurrentDB
argument_list|(
literal|"default"
argument_list|,
name|conn
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|=
name|getConnection
argument_list|(
name|jdbcUri
operator|+
literal|";/foo=bar;foo1=bar1"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|verifyCurrentDB
argument_list|(
literal|"default"
argument_list|,
name|conn
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * verify that the current db is the one expected. first create table as<db>.tab and then    * describe that table to check if<db> is the current database    * @param expectedDbName    * @param hs2Conn    * @throws Exception    */
specifier|private
name|void
name|verifyCurrentDB
parameter_list|(
name|String
name|expectedDbName
parameter_list|,
name|Connection
name|hs2Conn
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|verifyTab
init|=
literal|"miniHS2DbVerificationTable"
decl_stmt|;
name|Statement
name|stmt
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|expectedDbName
operator|+
literal|"."
operator|+
name|verifyTab
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE "
operator|+
name|expectedDbName
operator|+
literal|"."
operator|+
name|verifyTab
operator|+
literal|"(id INT)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"DESCRIBE "
operator|+
name|verifyTab
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|expectedDbName
operator|+
literal|"."
operator|+
name|verifyTab
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectionSchemaAPIs
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * get/set Schema are new in JDK7 and not available in java.sql.Connection in JDK6. Hence the      * test uses HiveConnection object to call these methods so that test will run with older JDKs      */
name|HiveConnection
name|hiveConn
init|=
operator|(
name|HiveConnection
operator|)
name|conDefault
decl_stmt|;
name|assertEquals
argument_list|(
name|defaultDbName
argument_list|,
name|hiveConn
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|conDefault
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"USE "
operator|+
name|testDbName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testDbName
argument_list|,
name|hiveConn
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"USE "
operator|+
name|defaultDbName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|defaultDbName
argument_list|,
name|hiveConn
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConn
operator|.
name|setSchema
argument_list|(
name|defaultDbName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|defaultDbName
argument_list|,
name|hiveConn
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConn
operator|.
name|setSchema
argument_list|(
name|defaultDbName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|defaultDbName
argument_list|,
name|hiveConn
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hiveConn
operator|.
name|getCatalog
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConn
operator|.
name|setCatalog
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hiveConn
operator|.
name|getCatalog
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method tests whether while creating a new connection, the config    * variables specified in the JDBC URI are properly set for the connection.    * This is a test for HiveConnection#configureConnection.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testNewConnectionConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set some conf parameters
name|String
name|hiveConf
init|=
literal|"hive.cli.print.header=true;hive.server2.async.exec.shutdown.timeout=20;"
operator|+
literal|"hive.server2.async.exec.threads=30;hive.server2.thrift.max.worker.threads=15"
decl_stmt|;
comment|// Set some conf vars
name|String
name|hiveVar
init|=
literal|"stab=salesTable;icol=customerID"
decl_stmt|;
name|String
name|jdbcUri
init|=
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
operator|+
literal|"?"
operator|+
name|hiveConf
operator|+
literal|"#"
operator|+
name|hiveVar
decl_stmt|;
comment|// Open a new connection with these conf& vars
name|Connection
name|con1
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|jdbcUri
argument_list|)
decl_stmt|;
comment|// Execute "set" command and retrieve values for the conf& vars specified above
comment|// Assert values retrieved
name|Statement
name|stmt
init|=
name|con1
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// Verify that the property has been properly set while creating the
comment|// connection above
name|verifyConfProperty
argument_list|(
name|stmt
argument_list|,
literal|"hive.cli.print.header"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|verifyConfProperty
argument_list|(
name|stmt
argument_list|,
literal|"hive.server2.async.exec.shutdown.timeout"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|verifyConfProperty
argument_list|(
name|stmt
argument_list|,
literal|"hive.server2.async.exec.threads"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|verifyConfProperty
argument_list|(
name|stmt
argument_list|,
literal|"hive.server2.thrift.max.worker.threads"
argument_list|,
literal|"15"
argument_list|)
expr_stmt|;
name|verifyConfProperty
argument_list|(
name|stmt
argument_list|,
literal|"stab"
argument_list|,
literal|"salesTable"
argument_list|)
expr_stmt|;
name|verifyConfProperty
argument_list|(
name|stmt
argument_list|,
literal|"icol"
argument_list|,
literal|"customerID"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|con1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifyConfProperty
parameter_list|(
name|Statement
name|stmt
parameter_list|,
name|String
name|property
parameter_list|,
name|String
name|expectedValue
parameter_list|)
throws|throws
name|Exception
block|{
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"set "
operator|+
name|property
argument_list|)
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|resultValues
index|[]
init|=
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|resultValues
index|[
literal|1
index|]
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataQueriesWithSerializeThriftInTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|conTestDb
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|setSerializeInTasksInConf
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show tables"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"describe "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"explain select * from "
operator|+
name|tableName
argument_list|)
expr_stmt|;
comment|// Note: by closing stmt object, we are also reverting any session specific config changes.
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectThriftSerializeInTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|conTestDb
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|setSerializeInTasksInConf
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.compute.query.using.stats=false"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists testSelectThriftOrders"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists testSelectThriftCustomers"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table testSelectThriftOrders (orderid int, orderdate string, customerid int)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table testSelectThriftCustomers (customerid int, customername string, customercountry string)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"insert into testSelectThriftOrders values (1, '2015-09-09', 123), "
operator|+
literal|"(2, '2015-10-10', 246), (3, '2015-11-11', 356)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"insert into testSelectThriftCustomers values (123, 'David', 'America'), "
operator|+
literal|"(246, 'John', 'Canada'), (356, 'Mary', 'CostaRica')"
argument_list|)
expr_stmt|;
name|ResultSet
name|countOrders
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select count(*) from testSelectThriftOrders"
argument_list|)
decl_stmt|;
while|while
condition|(
name|countOrders
operator|.
name|next
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|countOrders
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|maxOrders
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select max(customerid) from testSelectThriftCustomers"
argument_list|)
decl_stmt|;
while|while
condition|(
name|maxOrders
operator|.
name|next
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|356
argument_list|,
name|maxOrders
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table testSelectThriftOrders"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table testSelectThriftCustomers"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Test that jdbc does not allow shell commands starting with "!".
annotation|@
name|Test
specifier|public
name|void
name|testBangCommand
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|conTestDb
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"!ls --l"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"statement should fail, allowing this would be bad security"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveSQLException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"cannot recognize input near '!'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJoinThriftSerializeInTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|conTestDb
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|setSerializeInTasksInConf
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists testThriftJoinOrders"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists testThriftJoinCustomers"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table testThriftJoinOrders (orderid int, orderdate string, customerid int)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table testThriftJoinCustomers (customerid int, customername string, customercountry string)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"insert into testThriftJoinOrders values (1, '2015-09-09', 123), (2, '2015-10-10', 246), "
operator|+
literal|"(3, '2015-11-11', 356)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"insert into testThriftJoinCustomers values (123, 'David', 'America'), "
operator|+
literal|"(246, 'John', 'Canada'), (356, 'Mary', 'CostaRica')"
argument_list|)
expr_stmt|;
name|ResultSet
name|joinResultSet
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select testThriftJoinOrders.orderid, testThriftJoinCustomers.customername "
operator|+
literal|"from testThriftJoinOrders inner join testThriftJoinCustomers where "
operator|+
literal|"testThriftJoinOrders.customerid=testThriftJoinCustomers.customerid"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|expectedResult
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedResult
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"David"
argument_list|)
expr_stmt|;
name|expectedResult
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"John"
argument_list|)
expr_stmt|;
name|expectedResult
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"Mary"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|joinResultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|joinResultSet
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|,
name|expectedResult
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table testThriftJoinOrders"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table testThriftJoinCustomers"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyResultsetThriftSerializeInTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|conTestDb
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|setSerializeInTasksInConf
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists testThriftSerializeShow1"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists testThriftSerializeShow2"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table testThriftSerializeShow1 (a int)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table testThriftSerializeShow2 (b int)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"insert into testThriftSerializeShow1 values (1)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"insert into testThriftSerializeShow2 values (2)"
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from testThriftSerializeShow1 inner join "
operator|+
literal|"testThriftSerializeShow2 where testThriftSerializeShow1.a=testThriftSerializeShow2.b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table testThriftSerializeShow1"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table testThriftSerializeShow2"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFloatCast2DoubleThriftSerializeInTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|conTestDb
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|setSerializeInTasksInConf
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists testThriftSerializeShow1"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists testThriftSerializeShow2"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table testThriftSerializeShow1 (a float)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table testThriftSerializeShow2 (b double)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"insert into testThriftSerializeShow1 values (1.1), (2.2), (3.3)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"insert into testThriftSerializeShow2 values (2.2), (3.3), (4.4)"
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from testThriftSerializeShow1 inner join "
operator|+
literal|"testThriftSerializeShow2 where testThriftSerializeShow1.a=testThriftSerializeShow2.b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table testThriftSerializeShow1"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table testThriftSerializeShow2"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnableThriftSerializeInTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|conTestDb
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists testThriftSerializeShow1"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists testThriftSerializeShow2"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table testThriftSerializeShow1 (a int)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table testThriftSerializeShow2 (b int)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"insert into testThriftSerializeShow1 values (1)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"insert into testThriftSerializeShow2 values (2)"
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from testThriftSerializeShow1 inner join "
operator|+
literal|"testThriftSerializeShow2 where testThriftSerializeShow1.a=testThriftSerializeShow2.b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|unsetSerializeInTasksInConf
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|rs
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from testThriftSerializeShow1 inner join "
operator|+
literal|"testThriftSerializeShow2 where testThriftSerializeShow1.a=testThriftSerializeShow2.b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|setSerializeInTasksInConf
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|rs
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from testThriftSerializeShow1 inner join "
operator|+
literal|"testThriftSerializeShow2 where testThriftSerializeShow1.a=testThriftSerializeShow2.b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table testThriftSerializeShow1"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table testThriftSerializeShow2"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setSerializeInTasksInConf
parameter_list|(
name|Statement
name|stmt
parameter_list|)
throws|throws
name|SQLException
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.server2.thrift.resultset.serialize.in.tasks=true"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.server2.thrift.resultset.max.fetch.size=1000"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|unsetSerializeInTasksInConf
parameter_list|(
name|Statement
name|stmt
parameter_list|)
throws|throws
name|SQLException
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.server2.thrift.resultset.serialize.in.tasks=false"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.server2.thrift.resultset.max.fetch.size"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the creation of the 3 scratch dirs: hdfs, local, downloaded resources (which is also local).    * 1. Test with doAs=false: open a new JDBC session and verify the presence of directories/permissions    * 2. Test with doAs=true: open a new JDBC session and verify the presence of directories/permissions    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testSessionScratchDirs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Stop HiveServer2
name|stopMiniHS2
argument_list|()
expr_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|String
name|userName
decl_stmt|;
name|Path
name|scratchDirPath
decl_stmt|;
comment|// Set a custom prefix for hdfs scratch dir path
name|conf
operator|.
name|set
argument_list|(
literal|"hive.exec.scratchdir"
argument_list|,
name|tmpDir
operator|+
literal|"/hs2"
argument_list|)
expr_stmt|;
comment|// Set a scratch dir permission
name|String
name|fsPermissionStr
init|=
literal|"700"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.scratch.dir.permission"
argument_list|,
name|fsPermissionStr
argument_list|)
expr_stmt|;
comment|// Start an instance of HiveServer2 which uses miniMR
name|startMiniHS2
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// 1. Test with doAs=false
name|String
name|sessionConf
init|=
literal|"hive.server2.enable.doAs=false"
decl_stmt|;
name|userName
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|testDbName
argument_list|,
name|sessionConf
argument_list|)
argument_list|,
name|userName
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
comment|// FS
name|FileSystem
name|fs
init|=
name|miniHS2
operator|.
name|getLocalFS
argument_list|()
decl_stmt|;
name|FsPermission
name|expectedFSPermission
init|=
operator|new
name|FsPermission
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SCRATCHDIRPERMISSION
argument_list|)
argument_list|)
decl_stmt|;
comment|// Verify scratch dir paths and permission
comment|// HDFS scratch dir
name|scratchDirPath
operator|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SCRATCHDIR
argument_list|)
operator|+
literal|"/"
operator|+
name|userName
argument_list|)
expr_stmt|;
name|verifyScratchDir
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|scratchDirPath
argument_list|,
name|expectedFSPermission
argument_list|,
name|userName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Local scratch dir
name|scratchDirPath
operator|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LOCALSCRATCHDIR
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScratchDir
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|scratchDirPath
argument_list|,
name|expectedFSPermission
argument_list|,
name|userName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Downloaded resources dir
name|scratchDirPath
operator|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DOWNLOADED_RESOURCES_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScratchDir
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|scratchDirPath
argument_list|,
name|expectedFSPermission
argument_list|,
name|userName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// 2. Test with doAs=true
name|sessionConf
operator|=
literal|"hive.server2.enable.doAs=true"
expr_stmt|;
comment|// Test for user "neo"
name|userName
operator|=
literal|"neo"
expr_stmt|;
name|conn
operator|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|testDbName
argument_list|,
name|sessionConf
argument_list|)
argument_list|,
name|userName
argument_list|,
literal|"the-one"
argument_list|)
expr_stmt|;
comment|// Verify scratch dir paths and permission
comment|// HDFS scratch dir
name|scratchDirPath
operator|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SCRATCHDIR
argument_list|)
operator|+
literal|"/"
operator|+
name|userName
argument_list|)
expr_stmt|;
name|verifyScratchDir
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|scratchDirPath
argument_list|,
name|expectedFSPermission
argument_list|,
name|userName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Local scratch dir
name|scratchDirPath
operator|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LOCALSCRATCHDIR
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScratchDir
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|scratchDirPath
argument_list|,
name|expectedFSPermission
argument_list|,
name|userName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Downloaded resources dir
name|scratchDirPath
operator|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DOWNLOADED_RESOURCES_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScratchDir
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|scratchDirPath
argument_list|,
name|expectedFSPermission
argument_list|,
name|userName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Restore original state
name|restoreMiniHS2AndConnections
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test UDF whitelist    * - verify default value    * - verify udf allowed with default whitelist    * - verify udf allowed with specific whitelist    * - verify udf disallowed when not in whitelist    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testUdfWhiteBlackList
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|testConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|testConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_BUILTIN_UDF_WHITELIST
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that udf in default whitelist can be executed
name|Statement
name|stmt
init|=
name|conDefault
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT substr('foobar', 4) "
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// setup whitelist
name|stopMiniHS2
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|funcNames
init|=
name|FunctionRegistry
operator|.
name|getFunctionNames
argument_list|()
decl_stmt|;
name|funcNames
operator|.
name|remove
argument_list|(
literal|"reflect"
argument_list|)
expr_stmt|;
name|String
name|funcNameStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|funcName
range|:
name|funcNames
control|)
block|{
name|funcNameStr
operator|+=
literal|","
operator|+
name|funcName
expr_stmt|;
block|}
name|funcNameStr
operator|=
name|funcNameStr
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// remove ',' at begining
name|testConf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_BUILTIN_UDF_WHITELIST
argument_list|,
name|funcNameStr
argument_list|)
expr_stmt|;
name|startMiniHS2
argument_list|(
name|testConf
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|testDbName
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|stmt
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
comment|// verify that udf in whitelist can be executed
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT substr('foobar', 3) "
argument_list|)
expr_stmt|;
comment|// verify that udf not in whitelist fails
try|try
block|{
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT reflect('java.lang.String', 'valueOf', 1) "
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"reflect() udf invocation should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Restore original state
name|restoreMiniHS2AndConnections
argument_list|()
expr_stmt|;
block|}
comment|/** Test UDF blacklist    *   - verify default value    *   - verify udfs allowed with default blacklist    *   - verify udf disallowed when in blacklist    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testUdfBlackList
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|testConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|testConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_BUILTIN_UDF_BLACKLIST
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|conDefault
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// verify that udf in default whitelist can be executed
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT substr('foobar', 4) "
argument_list|)
expr_stmt|;
name|stopMiniHS2
argument_list|()
expr_stmt|;
name|testConf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_BUILTIN_UDF_BLACKLIST
argument_list|,
literal|"reflect"
argument_list|)
expr_stmt|;
name|startMiniHS2
argument_list|(
name|testConf
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|testDbName
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|stmt
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
try|try
block|{
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT reflect('java.lang.String', 'valueOf', 1) "
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"reflect() udf invocation should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Restore original state
name|restoreMiniHS2AndConnections
argument_list|()
expr_stmt|;
block|}
comment|/** Test UDF blacklist overrides whitelist    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testUdfBlackListOverride
parameter_list|()
throws|throws
name|Exception
block|{
name|stopMiniHS2
argument_list|()
expr_stmt|;
comment|// setup whitelist
name|HiveConf
name|testConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|funcNames
init|=
name|FunctionRegistry
operator|.
name|getFunctionNames
argument_list|()
decl_stmt|;
name|String
name|funcNameStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|funcName
range|:
name|funcNames
control|)
block|{
name|funcNameStr
operator|+=
literal|","
operator|+
name|funcName
expr_stmt|;
block|}
name|funcNameStr
operator|=
name|funcNameStr
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// remove ',' at begining
name|testConf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_BUILTIN_UDF_WHITELIST
argument_list|,
name|funcNameStr
argument_list|)
expr_stmt|;
name|testConf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_BUILTIN_UDF_BLACKLIST
argument_list|,
literal|"reflect"
argument_list|)
expr_stmt|;
name|startMiniHS2
argument_list|(
name|testConf
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|testDbName
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// verify that udf in black list fails even though it's included in whitelist
try|try
block|{
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT reflect('java.lang.String', 'valueOf', 1) "
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"reflect() udf invocation should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Restore original state
name|restoreMiniHS2AndConnections
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests the creation of the root hdfs scratch dir, which should be writable by all.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testRootScratchDir
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Stop HiveServer2
name|stopMiniHS2
argument_list|()
expr_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|String
name|userName
decl_stmt|;
name|Path
name|scratchDirPath
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.exec.scratchdir"
argument_list|,
name|tmpDir
operator|+
literal|"/hs2"
argument_list|)
expr_stmt|;
comment|// Start an instance of HiveServer2 which uses miniMR
name|startMiniHS2
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|userName
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|testDbName
argument_list|)
argument_list|,
name|userName
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
comment|// FS
name|FileSystem
name|fs
init|=
name|miniHS2
operator|.
name|getLocalFS
argument_list|()
decl_stmt|;
name|FsPermission
name|expectedFSPermission
init|=
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|00733
argument_list|)
decl_stmt|;
comment|// Verify scratch dir paths and permission
comment|// HDFS scratch dir
name|scratchDirPath
operator|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SCRATCHDIR
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScratchDir
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|scratchDirPath
argument_list|,
name|expectedFSPermission
argument_list|,
name|userName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Test with multi-level scratch dir path
comment|// Stop HiveServer2
name|stopMiniHS2
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.exec.scratchdir"
argument_list|,
name|tmpDir
operator|+
literal|"/level1/level2/level3"
argument_list|)
expr_stmt|;
name|startMiniHS2
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conn
operator|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|testDbName
argument_list|)
argument_list|,
name|userName
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|scratchDirPath
operator|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SCRATCHDIR
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScratchDir
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|scratchDirPath
argument_list|,
name|expectedFSPermission
argument_list|,
name|userName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Restore original state
name|restoreMiniHS2AndConnections
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifyScratchDir
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|scratchDirPath
parameter_list|,
name|FsPermission
name|expectedFSPermission
parameter_list|,
name|String
name|userName
parameter_list|,
name|boolean
name|isLocal
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dirType
init|=
name|isLocal
condition|?
literal|"Local"
else|:
literal|"DFS"
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The expected "
operator|+
name|dirType
operator|+
literal|" scratch dir does not exist for the user: "
operator|+
name|userName
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|scratchDirPath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|scratchDirPath
argument_list|)
operator|&&
operator|!
name|isLocal
condition|)
block|{
name|assertEquals
argument_list|(
literal|"DFS scratch dir permissions don't match"
argument_list|,
name|expectedFSPermission
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|scratchDirPath
argument_list|)
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test for http header size    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testHttpHeaderSize
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Stop HiveServer2
name|stopMiniHS2
argument_list|()
expr_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_REQUEST_HEADER_SIZE
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_RESPONSE_HEADER_SIZE
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|startMiniHS2
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Username and password are added to the http request header.
comment|// We will test the reconfiguration of the header size by changing the password length.
name|String
name|userName
init|=
literal|"userName"
decl_stmt|;
name|String
name|password
init|=
name|StringUtils
operator|.
name|leftPad
argument_list|(
literal|"*"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
comment|// This should go fine, since header should be less than the configured header size
try|try
block|{
name|conn
operator|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|testDbName
argument_list|)
argument_list|,
name|userName
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Not expecting exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// This should fail with given HTTP response code 413 in error message, since header is more
comment|// than the configured the header size
name|password
operator|=
name|StringUtils
operator|.
name|leftPad
argument_list|(
literal|"*"
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|Exception
name|headerException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
literal|null
expr_stmt|;
name|conn
operator|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|testDbName
argument_list|)
argument_list|,
name|userName
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|headerException
operator|=
name|e
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Header exception should be thrown"
argument_list|,
name|headerException
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect HTTP Response:"
operator|+
name|headerException
operator|.
name|getMessage
argument_list|()
argument_list|,
name|headerException
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"HTTP Response code: 413"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Stop HiveServer2 to increase header size
name|stopMiniHS2
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_REQUEST_HEADER_SIZE
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_RESPONSE_HEADER_SIZE
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|startMiniHS2
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// This should now go fine, since we increased the configured header size
try|try
block|{
name|conn
operator|=
literal|null
expr_stmt|;
name|conn
operator|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|testDbName
argument_list|)
argument_list|,
name|userName
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Not expecting exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Restore original state
name|restoreMiniHS2AndConnections
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test for jdbc driver retry on NoHttpResponseException    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testHttpRetryOnServerIdleTimeout
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Stop HiveServer2
name|stopMiniHS2
argument_list|()
expr_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
comment|// Set server's idle timeout to a very low value
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_HTTP_MAX_IDLE_TIME
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|startMiniHS2
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|userName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|testDbName
argument_list|)
argument_list|,
name|userName
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"select from_unixtime(unix_timestamp())"
argument_list|)
expr_stmt|;
comment|// Sleep for longer than server's idletimeout and execute a query
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
try|try
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"select from_unixtime(unix_timestamp())"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Not expecting exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Restore original state
name|restoreMiniHS2AndConnections
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests that DataNucleus' NucleusContext.classLoaderResolverMap clears cached class objects    * (& hence doesn't leak classloaders) on closing any session    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testAddJarDataNucleusUnCaching
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|jarFilePath
init|=
name|getHiveContribJarPath
argument_list|()
decl_stmt|;
comment|// We need a new connection object as we'll check the cache size after connection close
name|Connection
name|conn
init|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|testDbName
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|int
name|mapSizeAfterClose
decl_stmt|;
comment|// Add the jar file
name|stmt
operator|.
name|execute
argument_list|(
literal|"ADD JAR "
operator|+
name|jarFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a temporary function using the jar
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TEMPORARY FUNCTION add_func AS '"
operator|+
name|testUdfClassName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"DESCRIBE FUNCTION add_func"
argument_list|)
decl_stmt|;
name|checkForNotExist
argument_list|(
name|res
argument_list|)
expr_stmt|;
comment|// Execute the UDF
name|stmt
operator|.
name|execute
argument_list|(
literal|"SELECT add_func(int_col, 1) from "
operator|+
name|tableName
operator|+
literal|" limit 1"
argument_list|)
expr_stmt|;
comment|// Close the connection
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|mapSizeAfterClose
operator|=
name|getNucleusClassLoaderResolverMapSize
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"classLoaderResolverMap size after connection close: "
operator|+
name|mapSizeAfterClose
argument_list|)
expr_stmt|;
comment|// Cache size should be 0 now
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Failed; NucleusContext classLoaderResolverMap size: "
operator|+
name|mapSizeAfterClose
argument_list|,
name|mapSizeAfterClose
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|int
name|getNucleusClassLoaderResolverMapSize
parameter_list|()
block|{
name|Field
name|classLoaderResolverMap
decl_stmt|;
name|Field
name|pmf
decl_stmt|;
name|JDOPersistenceManagerFactory
name|jdoPmf
init|=
literal|null
decl_stmt|;
name|NucleusContext
name|nc
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ClassLoaderResolver
argument_list|>
name|cMap
decl_stmt|;
try|try
block|{
name|pmf
operator|=
name|ObjectStore
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"pmf"
argument_list|)
expr_stmt|;
if|if
condition|(
name|pmf
operator|!=
literal|null
condition|)
block|{
name|pmf
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|jdoPmf
operator|=
operator|(
name|JDOPersistenceManagerFactory
operator|)
name|pmf
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|jdoPmf
operator|!=
literal|null
condition|)
block|{
name|nc
operator|=
name|jdoPmf
operator|.
name|getNucleusContext
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nc
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|classLoaderResolverMap
operator|=
name|AbstractNucleusContext
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"classLoaderResolverMap"
argument_list|)
expr_stmt|;
if|if
condition|(
name|classLoaderResolverMap
operator|!=
literal|null
condition|)
block|{
name|classLoaderResolverMap
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cMap
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|ClassLoaderResolver
argument_list|>
operator|)
name|classLoaderResolverMap
operator|.
name|get
argument_list|(
name|nc
argument_list|)
expr_stmt|;
if|if
condition|(
name|cMap
operator|!=
literal|null
condition|)
block|{
return|return
name|cMap
operator|.
name|size
argument_list|()
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Tests ADD JAR uses Hives ReflectionUtil.CONSTRUCTOR_CACHE    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testAddJarConstructorUnCaching
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test assumes the hive-contrib JAR has been built as part of the Hive build.
comment|// Also dependent on the UDFExampleAdd class within that JAR.
name|setReflectionUtilCache
argument_list|()
expr_stmt|;
name|Path
name|jarFilePath
init|=
name|getHiveContribJarPath
argument_list|()
decl_stmt|;
name|long
name|cacheBeforeAddJar
decl_stmt|,
name|cacheAfterClose
decl_stmt|;
comment|// Force the cache clear so we know its empty
name|invalidateReflectionUtlCache
argument_list|()
expr_stmt|;
name|cacheBeforeAddJar
operator|=
name|getReflectionUtilCacheSize
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"CONSTRUCTOR_CACHE size before add jar: "
operator|+
name|cacheBeforeAddJar
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"CONSTRUCTOR_CACHE as map before add jar:"
operator|+
name|getReflectionUtilCache
argument_list|()
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"FAILED: CONSTRUCTOR_CACHE size before add jar: "
operator|+
name|cacheBeforeAddJar
argument_list|,
name|cacheBeforeAddJar
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Add the jar file
name|Statement
name|stmt
init|=
name|conTestDb
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"ADD JAR "
operator|+
name|jarFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a temporary function using the jar
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TEMPORARY FUNCTION add_func AS '"
operator|+
name|testUdfClassName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|// Execute the UDF
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT add_func(int_col, 1) from "
operator|+
name|tableName
operator|+
literal|" limit 1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|7
argument_list|)
expr_stmt|;
comment|// Have to force a cleanup of all expired entries here because its possible that the
comment|// expired entries will still be counted in Cache.size().
comment|// Taken from:
comment|// http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/cache/CacheBuilder.html
name|cleanUpReflectionUtlCache
argument_list|()
expr_stmt|;
name|cacheAfterClose
operator|=
name|getReflectionUtilCacheSize
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"CONSTRUCTOR_CACHE size after connection close: "
operator|+
name|cacheAfterClose
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"FAILED: CONSTRUCTOR_CACHE size after connection close: "
operator|+
name|cacheAfterClose
argument_list|,
name|cacheAfterClose
operator|==
literal|0
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TEMPORARY FUNCTION IF EXISTS add_func"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setReflectionUtilCache
parameter_list|()
block|{
name|Field
name|constructorCacheField
decl_stmt|;
name|Cache
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Constructor
argument_list|<
name|?
argument_list|>
argument_list|>
name|tmp
decl_stmt|;
try|try
block|{
name|constructorCacheField
operator|=
name|ReflectionUtil
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"CONSTRUCTOR_CACHE"
argument_list|)
expr_stmt|;
if|if
condition|(
name|constructorCacheField
operator|!=
literal|null
condition|)
block|{
name|constructorCacheField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Field
name|modifiersField
init|=
name|Field
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"modifiers"
argument_list|)
decl_stmt|;
name|modifiersField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|modifiersField
operator|.
name|setInt
argument_list|(
name|constructorCacheField
argument_list|,
name|constructorCacheField
operator|.
name|getModifiers
argument_list|()
operator|&
operator|~
name|Modifier
operator|.
name|FINAL
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|concurrencyLevel
argument_list|(
literal|64
argument_list|)
operator|.
name|weakKeys
argument_list|()
operator|.
name|weakValues
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|constructorCacheField
operator|.
name|set
argument_list|(
name|tmp
operator|.
name|getClass
argument_list|()
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error when setting the CONSTRUCTOR_CACHE to expire: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Cache
name|getReflectionUtilCache
parameter_list|()
block|{
name|Field
name|constructorCacheField
decl_stmt|;
try|try
block|{
name|constructorCacheField
operator|=
name|ReflectionUtil
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"CONSTRUCTOR_CACHE"
argument_list|)
expr_stmt|;
if|if
condition|(
name|constructorCacheField
operator|!=
literal|null
condition|)
block|{
name|constructorCacheField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|Cache
operator|)
name|constructorCacheField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error when getting the CONSTRUCTOR_CACHE var: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|invalidateReflectionUtlCache
parameter_list|()
block|{
try|try
block|{
name|Cache
name|constructorCache
init|=
name|getReflectionUtilCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|constructorCache
operator|!=
literal|null
condition|)
block|{
name|constructorCache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error when trying to invalidate the cache: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|cleanUpReflectionUtlCache
parameter_list|()
block|{
try|try
block|{
name|Cache
name|constructorCache
init|=
name|getReflectionUtilCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|constructorCache
operator|!=
literal|null
condition|)
block|{
name|constructorCache
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error when trying to cleanUp the cache: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|getReflectionUtilCacheSize
parameter_list|()
block|{
try|try
block|{
name|Cache
name|constructorCache
init|=
name|getReflectionUtilCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|constructorCache
operator|!=
literal|null
condition|)
block|{
return|return
name|constructorCache
operator|.
name|size
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPermFunc
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test assumes the hive-contrib JAR has been built as part of the Hive build.
comment|// Also dependent on the UDFExampleAdd class within that JAR.
name|Path
name|jarFilePath
init|=
name|getHiveContribJarPath
argument_list|()
decl_stmt|;
name|Statement
name|stmt
init|=
name|conTestDb
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
decl_stmt|;
comment|// Add the jar file
name|stmt
operator|.
name|execute
argument_list|(
literal|"ADD JAR "
operator|+
name|jarFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Register function
name|String
name|queryStr
init|=
literal|"CREATE FUNCTION example_add AS '"
operator|+
name|testUdfClassName
operator|+
literal|"' USING JAR '"
operator|+
name|jarFilePath
operator|+
literal|"'"
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
name|queryStr
argument_list|)
expr_stmt|;
comment|// Call describe
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"DESCRIBE FUNCTION "
operator|+
name|testDbName
operator|+
literal|".example_add"
argument_list|)
expr_stmt|;
name|checkForNotExist
argument_list|(
name|res
argument_list|)
expr_stmt|;
comment|// Use UDF in query
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT example_add(1, 2) FROM "
operator|+
name|tableName
operator|+
literal|" LIMIT 1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"query has results"
argument_list|,
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no more results"
argument_list|,
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// A new connection should be able to call describe/use function without issue
name|Connection
name|conn2
init|=
name|getConnection
argument_list|(
name|testDbName
argument_list|)
decl_stmt|;
name|Statement
name|stmt2
init|=
name|conn2
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt2
operator|.
name|execute
argument_list|(
literal|"USE "
operator|+
name|testDbName
argument_list|)
expr_stmt|;
name|res
operator|=
name|stmt2
operator|.
name|executeQuery
argument_list|(
literal|"DESCRIBE FUNCTION "
operator|+
name|testDbName
operator|+
literal|".example_add"
argument_list|)
expr_stmt|;
name|checkForNotExist
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|res
operator|=
name|stmt2
operator|.
name|executeQuery
argument_list|(
literal|"SELECT "
operator|+
name|testDbName
operator|+
literal|".example_add(1, 1) FROM "
operator|+
name|tableName
operator|+
literal|" LIMIT 1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"query has results"
argument_list|,
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no more results"
argument_list|,
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|conn2
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP FUNCTION IF EXISTS "
operator|+
name|testDbName
operator|+
literal|".example_add"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Path
name|getHiveContribJarPath
parameter_list|()
block|{
name|String
name|mvnRepo
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"maven.local.repository"
argument_list|)
decl_stmt|;
name|String
name|hiveVersion
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"hive.version"
argument_list|)
decl_stmt|;
name|String
name|jarFileName
init|=
literal|"hive-contrib-"
operator|+
name|hiveVersion
operator|+
literal|".jar"
decl_stmt|;
name|String
index|[]
name|pathParts
init|=
block|{
literal|"org"
block|,
literal|"apache"
block|,
literal|"hive"
block|,
literal|"hive-contrib"
block|,
name|hiveVersion
block|,
name|jarFileName
block|}
decl_stmt|;
comment|// Create path to hive-contrib JAR on local filesystem
name|Path
name|jarFilePath
init|=
operator|new
name|Path
argument_list|(
name|mvnRepo
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pathPart
range|:
name|pathParts
control|)
block|{
name|jarFilePath
operator|=
operator|new
name|Path
argument_list|(
name|jarFilePath
argument_list|,
name|pathPart
argument_list|)
expr_stmt|;
block|}
return|return
name|jarFilePath
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTempTable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create temp table with current connection
name|String
name|tempTableName
init|=
literal|"tmp1"
decl_stmt|;
name|Statement
name|stmt
init|=
name|conTestDb
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TEMPORARY TABLE "
operator|+
name|tempTableName
operator|+
literal|" (key string, value string)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"load data local inpath '"
operator|+
name|kvDataFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|tempTableName
argument_list|)
expr_stmt|;
name|String
name|resultVal
init|=
literal|"val_238"
decl_stmt|;
name|String
name|queryStr
init|=
literal|"SELECT * FROM "
operator|+
name|tempTableName
operator|+
literal|" where value = '"
operator|+
name|resultVal
operator|+
literal|"'"
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|queryStr
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|resultVal
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Test getTables()
name|DatabaseMetaData
name|md
init|=
name|conTestDb
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|md
operator|.
name|getConnection
argument_list|()
operator|==
name|conTestDb
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|md
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|tempTableName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|foundTable
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|tableName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableName
operator|.
name|equalsIgnoreCase
argument_list|(
name|tempTableName
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
literal|"Table not found yet"
argument_list|,
name|foundTable
argument_list|)
expr_stmt|;
name|foundTable
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Found temp table"
argument_list|,
name|foundTable
argument_list|)
expr_stmt|;
comment|// Test getTables() with no table name pattern
name|rs
operator|=
name|md
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|foundTable
operator|=
literal|false
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|tableName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableName
operator|.
name|equalsIgnoreCase
argument_list|(
name|tempTableName
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
literal|"Table not found yet"
argument_list|,
name|foundTable
argument_list|)
expr_stmt|;
name|foundTable
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Found temp table"
argument_list|,
name|foundTable
argument_list|)
expr_stmt|;
comment|// Test getColumns()
name|rs
operator|=
name|md
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|tempTableName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"First row"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
name|tempTableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|rs
operator|.
name|getInt
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Second row"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
name|tempTableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|rs
operator|.
name|getInt
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// A second connection should not be able to see the table
name|Connection
name|conn2
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|testDbName
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|Statement
name|stmt2
init|=
name|conn2
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt2
operator|.
name|execute
argument_list|(
literal|"USE "
operator|+
name|testDbName
argument_list|)
expr_stmt|;
name|boolean
name|gotException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|res
operator|=
name|stmt2
operator|.
name|executeQuery
argument_list|(
name|queryStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|err
parameter_list|)
block|{
comment|// This is expected to fail.
name|assertTrue
argument_list|(
literal|"Expecting table not found error, instead got: "
operator|+
name|err
argument_list|,
name|err
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Table not found"
argument_list|)
argument_list|)
expr_stmt|;
name|gotException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Exception while querying non-existing temp table"
argument_list|,
name|gotException
argument_list|)
expr_stmt|;
name|conn2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkForNotExist
parameter_list|(
name|ResultSet
name|res
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numRows
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|numRows
operator|++
expr_stmt|;
name|String
name|strVal
init|=
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should not find 'not exist'"
argument_list|,
operator|-
literal|1
argument_list|,
name|strVal
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"not exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Rows returned from describe function"
argument_list|,
name|numRows
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplDumpResultSet
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tid
init|=
name|TestJdbcWithMiniHS2
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'_'
argument_list|)
operator|+
literal|"_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|testPathName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.warehouse.dir"
argument_list|,
literal|"/tmp"
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|tid
decl_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|testPathName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|testPath
operator|.
name|getFileSystem
argument_list|(
operator|new
name|HiveConf
argument_list|()
argument_list|)
decl_stmt|;
name|Statement
name|stmt
init|=
name|conDefault
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.repl.rootdir = "
operator|+
name|testPathName
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"repl dump "
operator|+
name|testDbName
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|rsMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rsMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numRows
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|numRows
operator|++
expr_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|notificationId
init|=
name|rs
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPath
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPath
operator|.
name|toUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
comment|// In test setup, we append '/next' to hive.repl.rootdir and use that as the dump location
name|assertEquals
argument_list|(
name|testPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/next"
argument_list|,
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|notificationId
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numRows
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Clean up
name|fs
operator|.
name|delete
argument_list|(
name|testPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SleepMsUDF
extends|extends
name|UDF
block|{
specifier|public
name|Integer
name|evaluate
parameter_list|(
specifier|final
name|Integer
name|value
parameter_list|,
specifier|final
name|Integer
name|ms
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|ms
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// No-op
block|}
return|return
name|value
return|;
block|}
block|}
comment|/**    * Test CLI kill command of a query that is running.    * We spawn 2 threads - one running the query and    * the other attempting to cancel.    * We're using a dummy udf to simulate a query,    * that runs for a sufficiently long time.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testKillQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|con
init|=
name|conTestDb
decl_stmt|;
name|Connection
name|con2
init|=
name|getConnection
argument_list|(
name|testDbName
argument_list|)
decl_stmt|;
name|String
name|udfName
init|=
name|SleepMsUDF
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Statement
name|stmt1
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
specifier|final
name|Statement
name|stmt2
init|=
name|con2
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt1
operator|.
name|execute
argument_list|(
literal|"create temporary function sleepMsUDF as '"
operator|+
name|udfName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|stmt1
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
specifier|final
name|ExceptionHolder
name|tExecuteHolder
init|=
operator|new
name|ExceptionHolder
argument_list|()
decl_stmt|;
specifier|final
name|ExceptionHolder
name|tKillHolder
init|=
operator|new
name|ExceptionHolder
argument_list|()
decl_stmt|;
comment|// Thread executing the query
name|Thread
name|tExecute
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Executing query: "
argument_list|)
expr_stmt|;
comment|// The test table has 500 rows, so total query time should be ~ 500*500ms
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select sleepMsUDF(t1.int_col, 100), t1.int_col, t2.int_col "
operator|+
literal|"from "
operator|+
name|tableName
operator|+
literal|" t1 join "
operator|+
name|tableName
operator|+
literal|" t2 on t1.int_col = t2.int_col"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting SQLException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|tExecuteHolder
operator|.
name|throwable
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Thread killing the query
name|Thread
name|tKill
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|String
name|queryId
init|=
operator|(
operator|(
name|HiveStatement
operator|)
name|stmt
operator|)
operator|.
name|getQueryId
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Killing query: "
operator|+
name|queryId
argument_list|)
expr_stmt|;
name|stmt2
operator|.
name|execute
argument_list|(
literal|"kill query '"
operator|+
name|queryId
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|stmt2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|tKillHolder
operator|.
name|throwable
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|tExecute
operator|.
name|start
argument_list|()
expr_stmt|;
name|tKill
operator|.
name|start
argument_list|()
expr_stmt|;
name|tExecute
operator|.
name|join
argument_list|()
expr_stmt|;
name|tKill
operator|.
name|join
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|con2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"tExecute"
argument_list|,
name|tExecuteHolder
operator|.
name|throwable
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"tCancel"
argument_list|,
name|tKillHolder
operator|.
name|throwable
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|ExceptionHolder
block|{
name|Throwable
name|throwable
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFetchSize
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test setting fetch size below max
name|Connection
name|fsConn
init|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
literal|"default"
argument_list|,
literal|"fetchSize=50"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|Statement
name|stmt
init|=
name|fsConn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.server2.thrift.resultset.serialize.in.tasks=true"
argument_list|)
expr_stmt|;
name|int
name|fetchSize
init|=
name|stmt
operator|.
name|getFetchSize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|fetchSize
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsConn
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Test setting fetch size above max
name|fsConn
operator|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
literal|"default"
argument_list|,
literal|"fetchSize="
operator|+
operator|(
name|miniHS2
operator|.
name|getHiveConf
argument_list|()
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_RESULTSET_MAX_FETCH_SIZE
argument_list|)
operator|+
literal|1
operator|)
argument_list|,
literal|""
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|fsConn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.server2.thrift.resultset.serialize.in.tasks=true"
argument_list|)
expr_stmt|;
name|fetchSize
operator|=
name|stmt
operator|.
name|getFetchSize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|miniHS2
operator|.
name|getHiveConf
argument_list|()
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_RESULTSET_MAX_FETCH_SIZE
argument_list|)
argument_list|,
name|fetchSize
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsConn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * A test that checks that Lineage is correct when a multiple concurrent    * requests are make on a connection    */
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentLineage
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup to run concurrent operations
name|Statement
name|stmt
init|=
name|conTestDb
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|setSerializeInTasksInConf
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists testConcurrentLineage1"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists testConcurrentLineage2"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table testConcurrentLineage1 (col1 int)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table testConcurrentLineage2 (col2 int)"
argument_list|)
expr_stmt|;
comment|// clear vertices list
name|ReadableHook
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// run 5 sql inserts concurrently
name|int
name|numThreads
init|=
literal|5
decl_stmt|;
comment|// set to 1 for single threading
name|int
name|concurrentCalls
init|=
literal|5
decl_stmt|;
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|InsertCallable
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|concurrentCalls
condition|;
name|i
operator|++
control|)
block|{
name|InsertCallable
name|runner
init|=
operator|new
name|InsertCallable
argument_list|(
name|conTestDb
argument_list|)
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
name|runner
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|futures
init|=
name|pool
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
decl_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|future
operator|.
name|get
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
comment|// check to see that the vertices are correct
name|checkVertices
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// clean up
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table testConcurrentLineage1"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table testConcurrentLineage2"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|pool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * A Callable that does 2 inserts    */
specifier|private
class|class
name|InsertCallable
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
name|Connection
name|connection
decl_stmt|;
name|InsertCallable
parameter_list|(
name|Connection
name|conn
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|conn
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|doLineageInserts
argument_list|(
name|connection
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|doLineageInserts
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"insert into testConcurrentLineage1 values (1)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"insert into testConcurrentLineage2 values (2)"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * check to see that the vertices derived from the HookContexts are correct    */
specifier|private
name|void
name|checkVertices
parameter_list|()
block|{
name|List
argument_list|<
name|Set
argument_list|<
name|LineageLogger
operator|.
name|Vertex
argument_list|>
argument_list|>
name|verticesLists
init|=
name|getVerticesFromHooks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"5 runs of 2 inserts makes 10"
argument_list|,
literal|10
argument_list|,
name|verticesLists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Set
argument_list|<
name|LineageLogger
operator|.
name|Vertex
argument_list|>
name|vertices
range|:
name|verticesLists
control|)
block|{
name|assertFalse
argument_list|(
literal|"Each insert affects a column so should be some vertices"
argument_list|,
name|vertices
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Each insert affects one column so should be one vertex"
argument_list|,
literal|1
argument_list|,
name|vertices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|LineageLogger
operator|.
name|Vertex
argument_list|>
name|iterator
init|=
name|vertices
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|LineageLogger
operator|.
name|Vertex
name|vertex
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|vertex
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LineageLogger
operator|.
name|Vertex
operator|.
name|Type
operator|.
name|COLUMN
argument_list|,
name|vertex
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|label
init|=
name|vertex
operator|.
name|getLabel
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"vertex.getLabel() = "
operator|+
name|label
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"did not see one of the 2 expected column names"
argument_list|,
name|label
operator|.
name|equals
argument_list|(
literal|"testjdbcminihs2.testconcurrentlineage1.col1"
argument_list|)
operator|||
name|label
operator|.
name|equals
argument_list|(
literal|"testjdbcminihs2.testconcurrentlineage2.col2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Use the logic in LineageLogger to get vertices from Hook Contexts    */
specifier|private
name|List
argument_list|<
name|Set
argument_list|<
name|LineageLogger
operator|.
name|Vertex
argument_list|>
argument_list|>
name|getVerticesFromHooks
parameter_list|()
block|{
name|List
argument_list|<
name|Set
argument_list|<
name|LineageLogger
operator|.
name|Vertex
argument_list|>
argument_list|>
name|verticesLists
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HookContext
argument_list|>
name|hookList
init|=
name|ReadableHook
operator|.
name|getHookList
argument_list|()
decl_stmt|;
for|for
control|(
name|HookContext
name|hookContext
range|:
name|hookList
control|)
block|{
name|QueryPlan
name|plan
init|=
name|hookContext
operator|.
name|getQueryPlan
argument_list|()
decl_stmt|;
name|LineageCtx
operator|.
name|Index
name|index
init|=
name|hookContext
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LineageLogger
operator|.
name|Edge
argument_list|>
name|edges
init|=
name|LineageLogger
operator|.
name|getEdges
argument_list|(
name|plan
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|LineageLogger
operator|.
name|Vertex
argument_list|>
name|vertices
init|=
name|LineageLogger
operator|.
name|getVertices
argument_list|(
name|edges
argument_list|)
decl_stmt|;
name|verticesLists
operator|.
name|add
argument_list|(
name|vertices
argument_list|)
expr_stmt|;
block|}
return|return
name|verticesLists
return|;
block|}
comment|/**    * Test 'describe extended' on tables that have special white space characters in the row format.    */
annotation|@
name|Test
specifier|public
name|void
name|testDescribe
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|conTestDb
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|String
name|table
init|=
literal|"testDescribe"
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists "
operator|+
name|table
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table "
operator|+
name|table
operator|+
literal|" (orderid int, orderdate string, customerid int)"
operator|+
literal|" ROW FORMAT DELIMITED FIELDS terminated by '\\t' LINES terminated by '\\n'"
argument_list|)
expr_stmt|;
name|String
name|extendedDescription
init|=
name|getDetailedTableDescription
argument_list|(
name|stmt
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"could not get Detailed Table Information"
argument_list|,
name|extendedDescription
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"description appears truncated: "
operator|+
name|extendedDescription
argument_list|,
name|extendedDescription
operator|.
name|endsWith
argument_list|(
literal|")"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"bad line delimiter: "
operator|+
name|extendedDescription
argument_list|,
name|extendedDescription
operator|.
name|contains
argument_list|(
literal|"line.delim=\\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"bad field delimiter: "
operator|+
name|extendedDescription
argument_list|,
name|extendedDescription
operator|.
name|contains
argument_list|(
literal|"field.delim=\\t"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|view
init|=
literal|"testDescribeView"
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create view "
operator|+
name|view
operator|+
literal|" as select * from "
operator|+
name|table
argument_list|)
expr_stmt|;
name|String
name|extendedViewDescription
init|=
name|getDetailedTableDescription
argument_list|(
name|stmt
argument_list|,
name|view
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"bad view text: "
operator|+
name|extendedViewDescription
argument_list|,
name|extendedViewDescription
operator|.
name|contains
argument_list|(
literal|"viewOriginalText:select * from "
operator|+
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"bad expanded view text: "
operator|+
name|extendedViewDescription
argument_list|,
name|extendedViewDescription
operator|.
name|contains
argument_list|(
literal|"viewExpandedText:select `testdescribe`.`orderid`, `testdescribe`.`orderdate`, "
operator|+
literal|"`testdescribe`.`customerid` from `testjdbcminihs2`"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get Detailed Table Information via jdbc    */
specifier|private
name|String
name|getDetailedTableDescription
parameter_list|(
name|Statement
name|stmt
parameter_list|,
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|extendedDescription
init|=
literal|null
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"describe extended "
operator|+
name|table
argument_list|)
init|)
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|out
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|tableInfo
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"Detailed Table Information"
operator|.
name|equals
argument_list|(
name|out
argument_list|)
condition|)
block|{
comment|// from TextMetaDataFormatter
name|extendedDescription
operator|=
name|tableInfo
expr_stmt|;
block|}
block|}
block|}
return|return
name|extendedDescription
return|;
block|}
block|}
end_class

end_unit

