begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestJdbcWithMiniHS2
block|{
specifier|private
specifier|static
name|MiniHS2
name|miniHS2
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Path
name|dataFilePath
decl_stmt|;
specifier|private
name|Connection
name|hs2Conn
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
operator|.
name|forName
argument_list|(
name|MiniHS2
operator|.
name|getJdbcDriverName
argument_list|()
argument_list|)
expr_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|miniHS2
operator|=
operator|new
name|MiniHS2
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|dataFileDir
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"c:"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|dataFilePath
operator|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|hs2Conn
operator|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Connection
name|getConnection
parameter_list|(
name|String
name|jdbcURL
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|pwd
parameter_list|)
throws|throws
name|SQLException
block|{
name|Connection
name|conn
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|jdbcURL
argument_list|,
name|user
argument_list|,
name|pwd
argument_list|)
decl_stmt|;
name|conn
operator|.
name|createStatement
argument_list|()
operator|.
name|execute
argument_list|(
literal|"set hive.support.concurrency = false"
argument_list|)
expr_stmt|;
return|return
name|conn
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterTest
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|miniHS2
operator|.
name|isStarted
argument_list|()
condition|)
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"testTab1"
decl_stmt|;
name|Statement
name|stmt
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// create table
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (under_col INT COMMENT 'the under column', value STRING) COMMENT ' test table'"
argument_list|)
expr_stmt|;
comment|// load data
name|stmt
operator|.
name|execute
argument_list|(
literal|"load data local inpath '"
operator|+
name|dataFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val_238"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**   This test is to connect to any database without using the command "Use<<DB>>"      *  1)connect to default database.      *  2) Create a new DB test_default.      *  3) Connect to test_default database.      *  4) Connect and create table under test_default_test.      *  5) Connect and display all tables.      *  6) Connect to default database and shouldn't find table test_default_test.      *  7) Connect and drop test_default_test.      *  8) drop test_default database.      */
annotation|@
name|Test
specifier|public
name|void
name|testURIDatabaseName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jdbcUri
init|=
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"default"
argument_list|)
argument_list|)
decl_stmt|;
name|hs2Conn
operator|=
name|getConnection
argument_list|(
name|jdbcUri
operator|+
literal|"default"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
literal|"test_connection_non_default_db"
decl_stmt|;
name|String
name|tableInNonDefaultSchema
init|=
literal|"table_in_non_default_schema"
decl_stmt|;
name|Statement
name|stmt
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create database  if not exists "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|hs2Conn
operator|=
name|getConnection
argument_list|(
name|jdbcUri
operator|+
name|dbName
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|boolean
name|expected
init|=
name|stmt
operator|.
name|execute
argument_list|(
literal|" create table "
operator|+
name|tableInNonDefaultSchema
operator|+
literal|" (x int)"
argument_list|)
decl_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|hs2Conn
operator|=
name|getConnection
argument_list|(
name|jdbcUri
operator|+
name|dbName
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show tables"
argument_list|)
decl_stmt|;
name|boolean
name|testTableExists
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"table name is null in result set"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableInNonDefaultSchema
operator|.
name|equalsIgnoreCase
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|testTableExists
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"table name  "
operator|+
name|tableInNonDefaultSchema
operator|+
literal|"   found in SHOW TABLES result set"
argument_list|,
name|testTableExists
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|hs2Conn
operator|=
name|getConnection
argument_list|(
name|jdbcUri
operator|+
literal|"default"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show tables"
argument_list|)
expr_stmt|;
name|testTableExists
operator|=
literal|false
expr_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"table name is null in result set"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableInNonDefaultSchema
operator|.
name|equalsIgnoreCase
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|testTableExists
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
literal|"table name "
operator|+
name|tableInNonDefaultSchema
operator|+
literal|"  NOT  found in SHOW TABLES result set"
argument_list|,
name|testTableExists
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|hs2Conn
operator|=
name|getConnection
argument_list|(
name|jdbcUri
operator|+
name|dbName
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.support.concurrency = false"
argument_list|)
expr_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show tables"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|" drop table if exists table_in_non_default_schema"
argument_list|)
expr_stmt|;
name|expected
operator|=
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP DATABASE "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|hs2Conn
operator|=
name|getConnection
argument_list|(
name|jdbcUri
operator|+
literal|"default"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show tables"
argument_list|)
expr_stmt|;
name|testTableExists
operator|=
literal|false
expr_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"table name is null in result set"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableInNonDefaultSchema
operator|.
name|equalsIgnoreCase
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|testTableExists
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// test URI with no dbName
name|hs2Conn
operator|=
name|getConnection
argument_list|(
name|jdbcUri
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|verifyCurrentDB
argument_list|(
literal|"default"
argument_list|,
name|hs2Conn
argument_list|)
expr_stmt|;
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|hs2Conn
operator|=
name|getConnection
argument_list|(
name|jdbcUri
operator|+
literal|";"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|verifyCurrentDB
argument_list|(
literal|"default"
argument_list|,
name|hs2Conn
argument_list|)
expr_stmt|;
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|hs2Conn
operator|=
name|getConnection
argument_list|(
name|jdbcUri
operator|+
literal|";/foo=bar;foo1=bar1"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|verifyCurrentDB
argument_list|(
literal|"default"
argument_list|,
name|hs2Conn
argument_list|)
expr_stmt|;
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectionSchemaAPIs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|db1
init|=
literal|"DB1"
decl_stmt|;
comment|/**         * get/set Schema are new in JDK7 and not available in java.sql.Connection in JDK6.         * Hence the test uses HiveConnection object to call these methods so that test will run with older JDKs         */
name|HiveConnection
name|hiveConn
init|=
operator|(
name|HiveConnection
operator|)
name|hs2Conn
decl_stmt|;
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|hiveConn
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP DATABASE IF EXISTS "
operator|+
name|db1
operator|+
literal|" CASCADE"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|db1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|hiveConn
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"USE "
operator|+
name|db1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|db1
argument_list|,
name|hiveConn
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"USE default"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|hiveConn
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConn
operator|.
name|setSchema
argument_list|(
name|db1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|db1
argument_list|,
name|hiveConn
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConn
operator|.
name|setSchema
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|hiveConn
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hiveConn
operator|.
name|getCatalog
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConn
operator|.
name|setCatalog
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hiveConn
operator|.
name|getCatalog
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**     * verify that the current db is the one expected. first create table as<db>.tab and then     * describe that table to check if<db> is the current database     * @param expectedDbName     * @param hs2Conn     * @throws Exception     */
specifier|private
name|void
name|verifyCurrentDB
parameter_list|(
name|String
name|expectedDbName
parameter_list|,
name|Connection
name|hs2Conn
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|verifyTab
init|=
literal|"miniHS2DbVerificationTable"
decl_stmt|;
name|Statement
name|stmt
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|expectedDbName
operator|+
literal|"."
operator|+
name|verifyTab
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE "
operator|+
name|expectedDbName
operator|+
literal|"."
operator|+
name|verifyTab
operator|+
literal|"(id INT)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"DESCRIBE "
operator|+
name|verifyTab
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|expectedDbName
operator|+
literal|"."
operator|+
name|verifyTab
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**     * This method tests whether while creating a new connection, the config     * variables specified in the JDBC URI are properly set for the connection.     * This is a test for HiveConnection#configureConnection.     *     * @throws Exception     */
annotation|@
name|Test
specifier|public
name|void
name|testNewConnectionConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set some conf parameters
name|String
name|hiveConf
init|=
literal|"hive.cli.print.header=true;hive.server2.async.exec.shutdown.timeout=20;"
operator|+
literal|"hive.server2.async.exec.threads=30;hive.server2.thrift.http.max.worker.threads=15"
decl_stmt|;
comment|// Set some conf vars
name|String
name|hiveVar
init|=
literal|"stab=salesTable;icol=customerID"
decl_stmt|;
name|String
name|jdbcUri
init|=
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
operator|+
literal|"?"
operator|+
name|hiveConf
operator|+
literal|"#"
operator|+
name|hiveVar
decl_stmt|;
comment|// Open a new connection with these conf& vars
name|Connection
name|con1
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|jdbcUri
argument_list|)
decl_stmt|;
comment|// Execute "set" command and retrieve values for the conf& vars specified
comment|// above
comment|// Assert values retrieved
name|Statement
name|stmt
init|=
name|con1
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// Verify that the property has been properly set while creating the
comment|// connection above
name|verifyConfProperty
argument_list|(
name|stmt
argument_list|,
literal|"hive.cli.print.header"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|verifyConfProperty
argument_list|(
name|stmt
argument_list|,
literal|"hive.server2.async.exec.shutdown.timeout"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|verifyConfProperty
argument_list|(
name|stmt
argument_list|,
literal|"hive.server2.async.exec.threads"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|verifyConfProperty
argument_list|(
name|stmt
argument_list|,
literal|"hive.server2.thrift.http.max.worker.threads"
argument_list|,
literal|"15"
argument_list|)
expr_stmt|;
name|verifyConfProperty
argument_list|(
name|stmt
argument_list|,
literal|"stab"
argument_list|,
literal|"salesTable"
argument_list|)
expr_stmt|;
name|verifyConfProperty
argument_list|(
name|stmt
argument_list|,
literal|"icol"
argument_list|,
literal|"customerID"
argument_list|)
expr_stmt|;
name|con1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifyConfProperty
parameter_list|(
name|Statement
name|stmt
parameter_list|,
name|String
name|property
parameter_list|,
name|String
name|expectedValue
parameter_list|)
throws|throws
name|Exception
block|{
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"set "
operator|+
name|property
argument_list|)
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|resultValues
index|[]
init|=
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|resultValues
index|[
literal|1
index|]
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

