begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapBaseInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|tez
operator|.
name|TezSessionPoolManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|ExecutionTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|MetastoreGlobalTriggersFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|wm
operator|.
name|Trigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
operator|.
name|MiniClusterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|TestTriggersTezSessionPoolManager
block|{
specifier|protected
specifier|static
name|MiniHS2
name|miniHS2
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
name|String
name|dataFileDir
decl_stmt|;
specifier|static
name|Path
name|kvDataFilePath
decl_stmt|;
specifier|private
specifier|static
name|String
name|tableName
init|=
literal|"testtab1"
decl_stmt|;
specifier|protected
specifier|static
name|HiveConf
name|conf
init|=
literal|null
decl_stmt|;
specifier|protected
name|Connection
name|hs2Conn
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
operator|.
name|forName
argument_list|(
name|MiniHS2
operator|.
name|getJdbcDriverName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|confDir
init|=
literal|"../../data/conf/llap/"
decl_stmt|;
name|HiveConf
operator|.
name|setHiveSiteLocation
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file://"
operator|+
operator|new
name|File
argument_list|(
name|confDir
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/hive-site.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setting hive-site: "
operator|+
name|HiveConf
operator|.
name|getHiveSiteLocation
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_ENABLE_DOAS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TEZ_DEFAULT_QUEUES
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_TRIGGER_VALIDATION_INTERVAL_MS
argument_list|,
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TEZ_INITIALIZE_DEFAULT_SESSIONS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|TEZ_EXEC_SUMMARY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_STRICT_CHECKS_CARTESIAN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// don't want cache hits from llap io for testing filesystem bytes read counters
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|LLAP_IO_MEMORY_MODE
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file://"
operator|+
operator|new
name|File
argument_list|(
name|confDir
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/tez-site.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|miniHS2
operator|=
operator|new
name|MiniHS2
argument_list|(
name|conf
argument_list|,
name|MiniClusterType
operator|.
name|LLAP
argument_list|)
expr_stmt|;
name|dataFileDir
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"c:"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|kvDataFilePath
operator|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
name|miniHS2
operator|.
name|getDFS
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/apps_staging_dir/anonymous"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|hs2Conn
operator|=
name|TestJdbcWithMiniLlap
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|LlapBaseInputFormat
operator|.
name|closeAll
argument_list|()
expr_stmt|;
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterTest
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|miniHS2
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTriggerSlowQueryElapsedTime
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"ELAPSED_TIME> 20000"
argument_list|)
decl_stmt|;
name|Trigger
name|trigger
init|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"slow_query"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
decl_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|trigger
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"select sleep(t1.under_col, 500), t1.value from "
operator|+
name|tableName
operator|+
literal|" t1 join "
operator|+
name|tableName
operator|+
literal|" t2 on t1.under_col>=t2.under_col"
decl_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|trigger
operator|+
literal|" violated"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTriggerSlowQueryExecutionTime
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"EXECUTION_TIME> 1000"
argument_list|)
decl_stmt|;
name|Trigger
name|trigger
init|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"slow_query"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
decl_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|trigger
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"select sleep(t1.under_col, 5), t1.value from "
operator|+
name|tableName
operator|+
literal|" t1 join "
operator|+
name|tableName
operator|+
literal|" t2 on t1.under_col>=t2.under_col"
decl_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|trigger
operator|+
literal|" violated"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTriggerHighShuffleBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"SHUFFLE_BYTES> 100"
argument_list|)
decl_stmt|;
name|Trigger
name|trigger
init|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"big_shuffle"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
decl_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|trigger
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"select sleep(t1.under_col, 5), t1.value from "
operator|+
name|tableName
operator|+
literal|" t1 join "
operator|+
name|tableName
operator|+
literal|" t2 on t1.under_col>=t2.under_col"
decl_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|"Query was cancelled"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTriggerHighBytesRead
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"HDFS_BYTES_READ> 100"
argument_list|)
decl_stmt|;
name|Trigger
name|trigger
init|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"big_read"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
decl_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|trigger
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"select sleep(t1.under_col, 5), t1.value from "
operator|+
name|tableName
operator|+
literal|" t1 join "
operator|+
name|tableName
operator|+
literal|" t2 on t1.under_col>=t2.under_col"
decl_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|trigger
operator|+
literal|" violated"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTriggerHighBytesWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"FILE_BYTES_WRITTEN> 100"
argument_list|)
decl_stmt|;
name|Trigger
name|trigger
init|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"big_write"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
decl_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|trigger
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"select sleep(t1.under_col, 5), t1.value from "
operator|+
name|tableName
operator|+
literal|" t1 join "
operator|+
name|tableName
operator|+
literal|" t2 on t1.under_col>=t2.under_col"
decl_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|trigger
operator|+
literal|" violated"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTriggerTotalTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"TOTAL_TASKS> 50"
argument_list|)
decl_stmt|;
name|Trigger
name|trigger
init|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"highly_parallel"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
decl_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|trigger
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"select sleep(t1.under_col, 5), t1.value from "
operator|+
name|tableName
operator|+
literal|" t1 join "
operator|+
name|tableName
operator|+
literal|" t2 on t1.under_col>=t2.under_col"
decl_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
name|getConfigs
argument_list|()
argument_list|,
name|trigger
operator|+
literal|" violated"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTriggerCustomReadOps
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"HDFS_READ_OPS> 50"
argument_list|)
decl_stmt|;
name|Trigger
name|trigger
init|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"high_read_ops"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
decl_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|trigger
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"select sleep(t1.under_col, 5), t1.value from "
operator|+
name|tableName
operator|+
literal|" t1 join "
operator|+
name|tableName
operator|+
literal|" t2 on t1.under_col>=t2.under_col"
decl_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
name|getConfigs
argument_list|()
argument_list|,
literal|"Query was cancelled"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testTriggerCustomCreatedFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cmds
init|=
name|getConfigs
argument_list|()
decl_stmt|;
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"CREATED_FILES> 5"
argument_list|)
decl_stmt|;
name|Trigger
name|trigger
init|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"high_read_ops"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
decl_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|trigger
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"create table testtab2 as select * from "
operator|+
name|tableName
decl_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
name|cmds
argument_list|,
literal|"Query was cancelled"
argument_list|)
expr_stmt|;
comment|// partitioned insert
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"CREATED_FILES> 10"
argument_list|)
expr_stmt|;
name|trigger
operator|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"high_read_ops"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
expr_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|trigger
argument_list|)
argument_list|)
expr_stmt|;
name|cmds
operator|.
name|add
argument_list|(
literal|"drop table src3"
argument_list|)
expr_stmt|;
name|cmds
operator|.
name|add
argument_list|(
literal|"create table src3 (key int) partitioned by (value string)"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"insert overwrite table src3 partition (value) select sleep(under_col, 10), value from "
operator|+
name|tableName
operator|+
literal|" where under_col< 100"
expr_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
name|cmds
argument_list|,
literal|"Query was cancelled"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|240000
argument_list|)
specifier|public
name|void
name|testTriggerCustomCreatedDynamicPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cmds
init|=
name|getConfigs
argument_list|()
decl_stmt|;
name|cmds
operator|.
name|add
argument_list|(
literal|"drop table src2"
argument_list|)
expr_stmt|;
name|cmds
operator|.
name|add
argument_list|(
literal|"create table src2 (key int) partitioned by (value string)"
argument_list|)
expr_stmt|;
comment|// query will get cancelled before creating 57 partitions
name|String
name|query
init|=
literal|"insert overwrite table src2 partition (value) select * from "
operator|+
name|tableName
operator|+
literal|" where under_col< 100"
decl_stmt|;
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"CREATED_DYNAMIC_PARTITIONS> 20"
argument_list|)
decl_stmt|;
name|Trigger
name|trigger
init|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"high_read_ops"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
decl_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|trigger
argument_list|)
argument_list|)
expr_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
name|cmds
argument_list|,
literal|"Query was cancelled"
argument_list|)
expr_stmt|;
name|cmds
operator|=
name|getConfigs
argument_list|()
expr_stmt|;
comment|// let it create 57 partitions without any triggers
name|query
operator|=
literal|"insert overwrite table src2 partition (value) select under_col, value from "
operator|+
name|tableName
operator|+
literal|" where under_col< 100"
expr_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
name|cmds
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// query will try to add 64 more partitions to already existing 57 partitions but will get cancelled for violation
name|query
operator|=
literal|"insert into table src2 partition (value) select * from "
operator|+
name|tableName
operator|+
literal|" where under_col< 200"
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"CREATED_DYNAMIC_PARTITIONS> 30"
argument_list|)
expr_stmt|;
name|trigger
operator|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"high_read_ops"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
expr_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|trigger
argument_list|)
argument_list|)
expr_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
name|cmds
argument_list|,
literal|"Query was cancelled"
argument_list|)
expr_stmt|;
comment|// let it create 64 more partitions (total 57 + 64 = 121) without any triggers
name|query
operator|=
literal|"insert into table src2 partition (value) select * from "
operator|+
name|tableName
operator|+
literal|" where under_col< 200"
expr_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|()
argument_list|)
expr_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
name|cmds
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// re-run insert into but this time no new partitions will be created, so there will be no violation
name|query
operator|=
literal|"insert into table src2 partition (value) select * from "
operator|+
name|tableName
operator|+
literal|" where under_col< 200"
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"CREATED_DYNAMIC_PARTITIONS> 10"
argument_list|)
expr_stmt|;
name|trigger
operator|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"high_read_ops"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
expr_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|trigger
argument_list|)
argument_list|)
expr_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
name|cmds
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTriggerCustomCreatedDynamicPartitionsMultiInsert
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cmds
init|=
name|getConfigs
argument_list|()
decl_stmt|;
name|cmds
operator|.
name|add
argument_list|(
literal|"drop table src2"
argument_list|)
expr_stmt|;
name|cmds
operator|.
name|add
argument_list|(
literal|"drop table src3"
argument_list|)
expr_stmt|;
name|cmds
operator|.
name|add
argument_list|(
literal|"create table src2 (key int) partitioned by (value string)"
argument_list|)
expr_stmt|;
name|cmds
operator|.
name|add
argument_list|(
literal|"create table src3 (key int) partitioned by (value string)"
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"from "
operator|+
name|tableName
operator|+
literal|" insert overwrite table src2 partition (value) select * where under_col< 100 "
operator|+
literal|" insert overwrite table src3 partition (value) select * where under_col>= 100 and under_col< 200"
decl_stmt|;
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"CREATED_DYNAMIC_PARTITIONS> 70"
argument_list|)
decl_stmt|;
name|Trigger
name|trigger
init|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"high_partitions"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
decl_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|trigger
argument_list|)
argument_list|)
expr_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
name|cmds
argument_list|,
literal|"Query was cancelled"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTriggerCustomCreatedDynamicPartitionsUnionAll
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cmds
init|=
name|getConfigs
argument_list|()
decl_stmt|;
name|cmds
operator|.
name|add
argument_list|(
literal|"drop table src2"
argument_list|)
expr_stmt|;
name|cmds
operator|.
name|add
argument_list|(
literal|"create table src2 (key int) partitioned by (value string)"
argument_list|)
expr_stmt|;
comment|// query will get cancelled before creating 57 partitions
name|String
name|query
init|=
literal|"insert overwrite table src2 partition (value) "
operator|+
literal|"select temps.* from ("
operator|+
literal|"select * from "
operator|+
name|tableName
operator|+
literal|" where under_col< 100 "
operator|+
literal|"union all "
operator|+
literal|"select * from "
operator|+
name|tableName
operator|+
literal|" where under_col>= 100 and under_col< 200) temps"
decl_stmt|;
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"CREATED_DYNAMIC_PARTITIONS> 70"
argument_list|)
decl_stmt|;
name|Trigger
name|trigger
init|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"high_partitions"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
decl_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|trigger
argument_list|)
argument_list|)
expr_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
name|cmds
argument_list|,
literal|"Query was cancelled"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTriggerCustomNonExistent
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"OPEN_FILES> 50"
argument_list|)
decl_stmt|;
name|Trigger
name|trigger
init|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"non_existent"
argument_list|,
name|expression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
decl_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|trigger
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"select l.under_col, l.value from "
operator|+
name|tableName
operator|+
literal|" l join "
operator|+
name|tableName
operator|+
literal|" r on l.under_col>=r.under_col"
decl_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testMultipleTriggers1
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|shuffleExpression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"HDFS_BYTES_READ> 1000000"
argument_list|)
decl_stmt|;
name|Trigger
name|shuffleTrigger
init|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"big_shuffle"
argument_list|,
name|shuffleExpression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
decl_stmt|;
name|Expression
name|execTimeExpression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"EXECUTION_TIME> 1000"
argument_list|)
decl_stmt|;
name|Trigger
name|execTimeTrigger
init|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"slow_query"
argument_list|,
name|execTimeExpression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
decl_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|shuffleTrigger
argument_list|,
name|execTimeTrigger
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"select sleep(t1.under_col, 5), t1.value from "
operator|+
name|tableName
operator|+
literal|" t1 join "
operator|+
name|tableName
operator|+
literal|" t2 on t1.under_col>=t2.under_col"
decl_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|execTimeTrigger
operator|+
literal|" violated"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testMultipleTriggers2
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|shuffleExpression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"HDFS_BYTES_READ> 100"
argument_list|)
decl_stmt|;
name|Trigger
name|shuffleTrigger
init|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"big_shuffle"
argument_list|,
name|shuffleExpression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
decl_stmt|;
name|Expression
name|execTimeExpression
init|=
name|ExpressionFactory
operator|.
name|fromString
argument_list|(
literal|"EXECUTION_TIME> 100000"
argument_list|)
decl_stmt|;
name|Trigger
name|execTimeTrigger
init|=
operator|new
name|ExecutionTrigger
argument_list|(
literal|"slow_query"
argument_list|,
name|execTimeExpression
argument_list|,
name|Trigger
operator|.
name|Action
operator|.
name|KILL_QUERY
argument_list|)
decl_stmt|;
name|setupTriggers
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|shuffleTrigger
argument_list|,
name|execTimeTrigger
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|query
init|=
literal|"select sleep(t1.under_col, 5), t1.value from "
operator|+
name|tableName
operator|+
literal|" t1 join "
operator|+
name|tableName
operator|+
literal|" t2 on t1.under_col>=t2.under_col"
decl_stmt|;
name|runQueryWithTrigger
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|shuffleTrigger
operator|+
literal|" violated"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createSleepUDF
parameter_list|()
throws|throws
name|SQLException
block|{
name|String
name|udfName
init|=
name|TestJdbcWithMiniHS2
operator|.
name|SleepMsUDF
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Connection
name|con
init|=
name|hs2Conn
decl_stmt|;
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create temporary function sleep as '"
operator|+
name|udfName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|runQueryWithTrigger
parameter_list|(
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|setCmds
parameter_list|,
specifier|final
name|String
name|expect
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|con
init|=
name|hs2Conn
decl_stmt|;
name|TestJdbcWithMiniLlap
operator|.
name|createTestTable
argument_list|(
name|con
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|,
name|kvDataFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|createSleepUDF
argument_list|()
expr_stmt|;
specifier|final
name|Statement
name|selStmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
specifier|final
name|Throwable
index|[]
name|throwable
init|=
operator|new
name|Throwable
index|[
literal|1
index|]
decl_stmt|;
name|Thread
name|queryThread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
if|if
condition|(
name|setCmds
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|setCmd
range|:
name|setCmds
control|)
block|{
name|selStmt
operator|.
name|execute
argument_list|(
name|setCmd
argument_list|)
expr_stmt|;
block|}
block|}
name|selStmt
operator|.
name|execute
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|throwable
index|[
literal|0
index|]
operator|=
name|e
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|queryThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|queryThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|selStmt
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|expect
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
literal|"Expected query to succeed"
argument_list|,
name|throwable
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
literal|"Expected non-null throwable"
argument_list|,
name|throwable
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SQLException
operator|.
name|class
argument_list|,
name|throwable
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expect
operator|+
literal|" is not contained in "
operator|+
name|throwable
index|[
literal|0
index|]
operator|.
name|getMessage
argument_list|()
argument_list|,
name|throwable
index|[
literal|0
index|]
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expect
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setupTriggers
parameter_list|(
specifier|final
name|List
argument_list|<
name|Trigger
argument_list|>
name|triggers
parameter_list|)
throws|throws
name|Exception
block|{
name|MetastoreGlobalTriggersFetcher
name|triggersFetcher
init|=
name|mock
argument_list|(
name|MetastoreGlobalTriggersFetcher
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|triggersFetcher
operator|.
name|fetch
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|triggers
argument_list|)
expr_stmt|;
name|TezSessionPoolManager
operator|.
name|getInstance
argument_list|()
operator|.
name|setGlobalTriggersFetcher
argument_list|(
name|triggersFetcher
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getConfigs
parameter_list|(
name|String
modifier|...
name|more
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|setCmds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|setCmds
operator|.
name|add
argument_list|(
literal|"set hive.exec.dynamic.partition.mode=nonstrict"
argument_list|)
expr_stmt|;
name|setCmds
operator|.
name|add
argument_list|(
literal|"set mapred.min.split.size=100"
argument_list|)
expr_stmt|;
name|setCmds
operator|.
name|add
argument_list|(
literal|"set mapred.max.split.size=100"
argument_list|)
expr_stmt|;
name|setCmds
operator|.
name|add
argument_list|(
literal|"set tez.grouping.min-size=100"
argument_list|)
expr_stmt|;
name|setCmds
operator|.
name|add
argument_list|(
literal|"set tez.grouping.max-size=100"
argument_list|)
expr_stmt|;
if|if
condition|(
name|more
operator|!=
literal|null
condition|)
block|{
name|setCmds
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|more
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|setCmds
return|;
block|}
block|}
end_class

end_unit

