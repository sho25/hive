begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|DfsProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|StatsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveVersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|Utils
operator|.
name|JdbcConnectionParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|HiveSQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|operation
operator|.
name|ClassicTableTypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|operation
operator|.
name|ClassicTableTypeMapping
operator|.
name|ClassicTableTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|operation
operator|.
name|HiveTableTypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|operation
operator|.
name|TableTypeMappingFactory
operator|.
name|TableTypeMappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Exception
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Object
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|String
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverPropertyInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLWarning
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|SystemVariables
operator|.
name|SET_COLUMN_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExplainTask
operator|.
name|EXPL_COLUMN_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * TestJdbcDriver2  * This class tests the JDBC API for HiveServer2 via an embedded HiveServer2 instance  *  */
end_comment

begin_class
specifier|public
class|class
name|TestJdbcDriver2
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestJdbcDriver2
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|driverName
init|=
literal|"org.apache.hive.jdbc.HiveDriver"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|testDbName
init|=
literal|"testjdbcdriver"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|defaultDbName
init|=
literal|"default"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|tableName
init|=
literal|"testjdbcdrivertbl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|tableNameWithPk
init|=
literal|"pktable"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|tableComment
init|=
literal|"Simple table"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|viewName
init|=
literal|"testjdbcdriverview"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|viewComment
init|=
literal|"Simple view"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|partitionedTableName
init|=
literal|"testjdbcdriverparttbl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|partitionedColumnName
init|=
literal|"partcoljdbc"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|partitionedColumnValue
init|=
literal|"20090619"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|partitionedTableComment
init|=
literal|"Partitioned table"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|dataTypeTableName
init|=
literal|"testjdbcdriverdatatypetbl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|dataTypeTableComment
init|=
literal|"Table with many column data types"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|externalTableName
init|=
literal|"testjdbcdriverexttbl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|externalTableComment
init|=
literal|"An external table"
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|static
name|String
name|dataFileDir
decl_stmt|;
specifier|private
specifier|static
name|Path
name|dataFilePath
decl_stmt|;
specifier|private
specifier|static
name|int
name|dataFileRowCount
decl_stmt|;
specifier|private
specifier|static
name|Path
name|dataTypeDataFilePath
decl_stmt|;
comment|// Creating a new connection is expensive, so we'll reuse this object
specifier|private
specifier|static
name|Connection
name|con
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|floatCompareDelta
init|=
literal|0.0001f
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Connection
name|getConnection
parameter_list|(
name|String
name|postfix
parameter_list|)
throws|throws
name|SQLException
block|{
name|Connection
name|con1
decl_stmt|;
name|con1
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hive2:///"
operator|+
name|postfix
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Connection is null"
argument_list|,
name|con1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Connection should not be closed"
argument_list|,
name|con1
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|con1
return|;
block|}
specifier|private
specifier|static
name|void
name|createTestTables
parameter_list|(
name|Statement
name|stmt
parameter_list|,
name|String
name|testDbName
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// We've already dropped testDbName in constructor& we also drop it in tearDownAfterClass
name|String
name|prefix
init|=
name|testDbName
operator|+
literal|"."
decl_stmt|;
name|String
name|tableName
init|=
name|prefix
operator|+
name|TestJdbcDriver2
operator|.
name|tableName
decl_stmt|;
name|String
name|externalTableName
init|=
name|prefix
operator|+
name|TestJdbcDriver2
operator|.
name|externalTableName
decl_stmt|;
name|String
name|partitionedTableName
init|=
name|prefix
operator|+
name|TestJdbcDriver2
operator|.
name|partitionedTableName
decl_stmt|;
name|String
name|dataTypeTableName
init|=
name|prefix
operator|+
name|TestJdbcDriver2
operator|.
name|dataTypeTableName
decl_stmt|;
name|String
name|viewName
init|=
name|prefix
operator|+
name|TestJdbcDriver2
operator|.
name|viewName
decl_stmt|;
comment|// create a table
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (under_col int comment 'the under column', value string) comment '"
operator|+
name|tableComment
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table "
operator|+
name|tableNameWithPk
operator|+
literal|" (a STRING, b STRING, primary key (a) disable) "
argument_list|)
expr_stmt|;
comment|// load data
name|stmt
operator|.
name|execute
argument_list|(
literal|"load data local inpath '"
operator|+
name|dataFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
comment|// create an external table
name|stmt
operator|.
name|execute
argument_list|(
literal|"create external table "
operator|+
name|externalTableName
operator|+
literal|" (a int) comment '"
operator|+
name|externalTableComment
operator|+
literal|"' location '"
operator|+
name|dataFileDir
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|// create a paritioned table
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table "
operator|+
name|partitionedTableName
operator|+
literal|" (under_col int, value string) comment '"
operator|+
name|partitionedTableComment
operator|+
literal|"' partitioned by ("
operator|+
name|partitionedColumnName
operator|+
literal|" STRING)"
argument_list|)
expr_stmt|;
comment|// load data
name|stmt
operator|.
name|execute
argument_list|(
literal|"load data local inpath '"
operator|+
name|dataFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|partitionedTableName
operator|+
literal|" PARTITION ("
operator|+
name|partitionedColumnName
operator|+
literal|"="
operator|+
name|partitionedColumnValue
operator|+
literal|")"
argument_list|)
expr_stmt|;
comment|// tables with various types
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table "
operator|+
name|dataTypeTableName
operator|+
literal|" (c1 int, c2 boolean, c3 double, c4 string,"
operator|+
literal|" c5 array<int>, c6 map<int,string>, c7 map<string,string>,"
operator|+
literal|" c8 struct<r:string,s:int,t:double>,"
operator|+
literal|" c9 tinyint, c10 smallint, c11 float, c12 bigint,"
operator|+
literal|" c13 array<array<string>>,"
operator|+
literal|" c14 map<int, map<int,int>>,"
operator|+
literal|" c15 struct<r:int,s:struct<a:int,b:string>>,"
operator|+
literal|" c16 array<struct<m:map<string,string>,n:int>>,"
operator|+
literal|" c17 timestamp, "
operator|+
literal|" c18 decimal(16,7), "
operator|+
literal|" c19 binary, "
operator|+
literal|" c20 date,"
operator|+
literal|" c21 varchar(20),"
operator|+
literal|" c22 char(15),"
operator|+
literal|" c23 binary"
operator|+
literal|") comment'"
operator|+
name|dataTypeTableComment
operator|+
literal|"' partitioned by (dt STRING)"
argument_list|)
expr_stmt|;
comment|// load data
name|stmt
operator|.
name|execute
argument_list|(
literal|"load data local inpath '"
operator|+
name|dataTypeDataFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|dataTypeTableName
operator|+
literal|" PARTITION (dt='20090619')"
argument_list|)
expr_stmt|;
comment|// create view
name|stmt
operator|.
name|execute
argument_list|(
literal|"create view "
operator|+
name|viewName
operator|+
literal|" comment '"
operator|+
name|viewComment
operator|+
literal|"' as select * from "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|SQLException
throws|,
name|ClassNotFoundException
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestJdbcDriver2
operator|.
name|class
argument_list|)
expr_stmt|;
name|dataFileDir
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"c:"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|dataFilePath
operator|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
name|dataFileRowCount
operator|=
literal|500
expr_stmt|;
name|dataTypeDataFilePath
operator|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"datatypes.txt"
argument_list|)
expr_stmt|;
comment|// Create test database and base tables once for all the test
name|Class
operator|.
name|forName
argument_list|(
name|driverName
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_LOGGING_OPERATION_LEVEL
operator|.
name|varname
argument_list|,
literal|"verbose"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|ConfVars
operator|.
name|HIVEMAPREDMODE
operator|.
name|varname
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
operator|.
name|varname
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.DefaultHiveAuthorizationProvider"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_PARALLEL_OPS_IN_SESSION
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|con
operator|=
name|getConnection
argument_list|(
name|defaultDbName
operator|+
literal|";create=true"
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.support.concurrency = false"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop database if exists "
operator|+
name|testDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create database "
operator|+
name|testDbName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"use "
operator|+
name|testDbName
argument_list|)
expr_stmt|;
name|createTestTables
argument_list|(
name|stmt
argument_list|,
name|testDbName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExceucteUpdateCounts
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set "
operator|+
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
operator|+
literal|"=true"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set "
operator|+
name|ConfVars
operator|.
name|HIVE_TXN_MANAGER
operator|.
name|varname
operator|+
literal|"=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table transactional_crud (a int, b int) stored as orc "
operator|+
literal|"tblproperties('transactional'='true', 'transactional_properties'='default')"
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|stmt
operator|.
name|executeUpdate
argument_list|(
literal|"insert into transactional_crud values(1,2),(3,4),(5,6)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Statement insert"
argument_list|,
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|stmt
operator|.
name|executeUpdate
argument_list|(
literal|"update transactional_crud set b = 17 where a<= 3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Statement update"
argument_list|,
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|stmt
operator|.
name|executeUpdate
argument_list|(
literal|"delete from transactional_crud where b = 6"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Statement delete"
argument_list|,
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|PreparedStatement
name|pStmt
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"update transactional_crud set b = ? where a = ? or a = ?"
argument_list|)
decl_stmt|;
name|pStmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setInt
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|count
operator|=
name|pStmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2 row PreparedStatement update"
argument_list|,
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setInt
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|pStmt
operator|.
name|setInt
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|count
operator|=
name|pStmt
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1 row PreparedStatement update"
argument_list|,
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// drop test db and its tables and views
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.support.concurrency = false"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop database if exists "
operator|+
name|testDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
comment|/**    * Tests malformed JDBC URL    * @throws Exception    */
specifier|public
name|void
name|testBadURL
parameter_list|()
throws|throws
name|Exception
block|{
name|checkBadUrl
argument_list|(
literal|"jdbc:hive2://localhost:10000;principal=test"
argument_list|)
expr_stmt|;
name|checkBadUrl
argument_list|(
literal|"jdbc:hive2://localhost:10000;"
operator|+
literal|"principal=hive/HiveServer2Host@YOUR-REALM.COM"
argument_list|)
expr_stmt|;
name|checkBadUrl
argument_list|(
literal|"jdbc:hive2://localhost:10000test"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkBadUrl
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown JdbcUriParseException but did not "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JdbcUriParseException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Bad URL format"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
comment|/**    * Tests setting a custom fetch size for the RPC call    * @throws SQLException    */
specifier|public
name|void
name|testURLWithFetchSize
parameter_list|()
throws|throws
name|SQLException
block|{
name|Connection
name|con
init|=
name|getConnection
argument_list|(
name|testDbName
operator|+
literal|";fetchSize=1234"
argument_list|)
decl_stmt|;
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|stmt
operator|.
name|getFetchSize
argument_list|()
argument_list|,
literal|1234
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
comment|/**    * Test running parallel queries (with parallel queries disabled).    * Should be serialized in the order of execution.    * @throws Exception    */
specifier|public
name|void
name|testSerializedExecution
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveStatement
name|stmt1
init|=
operator|(
name|HiveStatement
operator|)
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|HiveStatement
name|stmt2
init|=
operator|(
name|HiveStatement
operator|)
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt1
operator|.
name|execute
argument_list|(
literal|"SET hive.driver.parallel.compilation=false"
argument_list|)
expr_stmt|;
name|stmt1
operator|.
name|execute
argument_list|(
literal|"SET hive.server2.async.exec.async.compile=false"
argument_list|)
expr_stmt|;
name|stmt2
operator|.
name|execute
argument_list|(
literal|"SET hive.driver.parallel.compilation=false"
argument_list|)
expr_stmt|;
name|stmt2
operator|.
name|execute
argument_list|(
literal|"SET hive.server2.async.exec.async.compile=false"
argument_list|)
expr_stmt|;
name|stmt1
operator|.
name|execute
argument_list|(
literal|"create temporary function sleepMsUDF as '"
operator|+
name|SleepMsUDF
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|stmt1
operator|.
name|execute
argument_list|(
literal|"create table test_ser_1(i int)"
argument_list|)
expr_stmt|;
name|stmt1
operator|.
name|executeAsync
argument_list|(
literal|"insert into test_ser_1 select sleepMsUDF(under_col, 500) from "
operator|+
name|tableName
operator|+
literal|" limit 1"
argument_list|)
expr_stmt|;
name|boolean
name|isResultSet
init|=
name|stmt2
operator|.
name|executeAsync
argument_list|(
literal|"select * from test_ser_1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isResultSet
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stmt2
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|stmt1
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParentReferences
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Test parent references from Statement */
name|Statement
name|s
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|rs
init|=
name|s
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|dataTypeTableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|getConnection
argument_list|()
operator|==
name|con
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rs
operator|.
name|getStatement
argument_list|()
operator|==
name|s
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
comment|/* Test parent references from PreparedStatement */
name|PreparedStatement
name|ps
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT * FROM "
operator|+
name|dataTypeTableName
argument_list|)
decl_stmt|;
name|rs
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ps
operator|.
name|getConnection
argument_list|()
operator|==
name|con
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rs
operator|.
name|getStatement
argument_list|()
operator|==
name|ps
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
comment|/* Test DatabaseMetaData queries which do not have a parent Statement */
name|DatabaseMetaData
name|md
init|=
name|con
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|md
operator|.
name|getConnection
argument_list|()
operator|==
name|con
argument_list|)
expr_stmt|;
name|rs
operator|=
name|md
operator|.
name|getCatalogs
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|rs
operator|.
name|getStatement
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|rs
operator|=
name|md
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rs
operator|.
name|getStatement
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|rs
operator|=
name|md
operator|.
name|getFunctions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rs
operator|.
name|getStatement
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|rs
operator|=
name|md
operator|.
name|getImportedKeys
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rs
operator|.
name|getStatement
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|rs
operator|=
name|md
operator|.
name|getPrimaryKeys
argument_list|(
literal|null
argument_list|,
name|testDbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rs
operator|.
name|getStatement
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|rs
operator|=
name|md
operator|.
name|getProcedureColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rs
operator|.
name|getStatement
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|rs
operator|=
name|md
operator|.
name|getProcedures
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rs
operator|.
name|getStatement
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|rs
operator|=
name|md
operator|.
name|getSchemas
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|rs
operator|.
name|getStatement
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|rs
operator|=
name|md
operator|.
name|getTableTypes
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|rs
operator|.
name|getStatement
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|rs
operator|=
name|md
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rs
operator|.
name|getStatement
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|rs
operator|=
name|md
operator|.
name|getTypeInfo
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|rs
operator|.
name|getStatement
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDataTypes2
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select c5, c1 from "
operator|+
name|dataTypeTableName
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|meta
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
comment|// row 1
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// skip the last (partitioning) column since it is always non-null
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|meta
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertNull
argument_list|(
name|res
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testErrorDiag
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// verify syntax error
try|try
block|{
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select from "
operator|+
name|dataTypeTableName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"SQLException is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"42000"
argument_list|,
name|e
operator|.
name|getSQLState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// verify table not fuond error
try|try
block|{
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from nonTable"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"SQLException is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"42S02"
argument_list|,
name|e
operator|.
name|getSQLState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// verify invalid column error
try|try
block|{
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select zzzz from "
operator|+
name|dataTypeTableName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"SQLException is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"42000"
argument_list|,
name|e
operator|.
name|getSQLState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * verify 'explain ...' resultset    * @throws SQLException    */
annotation|@
name|Test
specifier|public
name|void
name|testExplainStmt
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"explain select c1, c2, c3, c4, c5 as a, c6, c7, c8, c9, c10, c11, c12, "
operator|+
literal|"c1*2, sentences(null, null, null) as b, c23 from "
operator|+
name|dataTypeTableName
operator|+
literal|" limit 1"
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|md
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
comment|// only one result column
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// verify the column name
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnLabel
argument_list|(
literal|1
argument_list|)
argument_list|,
name|EXPL_COLUMN_NAME
argument_list|)
expr_stmt|;
comment|//verify that there is data in the resultset
name|assertTrue
argument_list|(
literal|"Nothing returned explain"
argument_list|,
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepareStatement
parameter_list|()
block|{
name|String
name|sql
init|=
literal|"FROM (SELECT 1 FROM "
operator|+
name|tableName
operator|+
literal|" where   'not?param?not?param'<> 'not_param??not_param' and ?=? "
operator|+
literal|" and 1=? and 2=? and 3.0=? and 4.0=? and 'test\\'string\"'=? and 5=? and ?=? "
operator|+
literal|" and date '2012-01-01' = date ?"
operator|+
literal|" and timestamp '2012-04-22 09:00:00.123456789' = timestamp ?"
operator|+
literal|" ) t SELECT '2011-03-25' ddate,'China',true bv, 10 num LIMIT 1"
decl_stmt|;
comment|// executed twice: once with the typed ps setters, once with the generic setObject
try|try
block|{
try|try
init|(
name|PreparedStatement
name|ps
init|=
name|createPreapredStatementUsingSetXXX
argument_list|(
name|sql
argument_list|)
init|;
name|ResultSet
name|res
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
init|)
block|{
name|assertPreparedStatementResultAsExpected
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|PreparedStatement
name|ps
init|=
name|createPreapredStatementUsingSetObject
argument_list|(
name|sql
argument_list|)
init|;
name|ResultSet
name|res
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
init|)
block|{
name|assertPreparedStatementResultAsExpected
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// set nothing for prepared sql
name|Exception
name|expectedException
init|=
literal|null
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|ps
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
init|;
name|ResultSet
name|ignored
operator|=
name|ps
operator|.
name|executeQuery
argument_list|()
init|)
block|{     }
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|expectedException
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Execute the un-setted sql statement should throw exception"
argument_list|,
name|expectedException
argument_list|)
expr_stmt|;
comment|// set some of parameters for prepared sql, not all of them.
name|expectedException
operator|=
literal|null
expr_stmt|;
try|try
init|(
name|PreparedStatement
name|ps
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
init|)
block|{
name|ps
operator|.
name|setBoolean
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setBoolean
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|ignored
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
init|)
block|{}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|expectedException
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Execute the invalid setted sql statement should throw exception"
argument_list|,
name|expectedException
argument_list|)
expr_stmt|;
comment|// set the wrong type parameters for prepared sql.
name|expectedException
operator|=
literal|null
expr_stmt|;
try|try
init|(
name|PreparedStatement
name|ps
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
init|)
block|{
comment|// wrong type here
name|ps
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
literal|"wrong"
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|res
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
init|)
block|{
name|assertFalse
argument_list|(
literal|"ResultSet was not empty"
argument_list|,
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|expectedException
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Execute the invalid setted sql statement should throw exception"
argument_list|,
name|expectedException
argument_list|)
expr_stmt|;
comment|// setObject to the yet unknown type java.util.Date
name|expectedException
operator|=
literal|null
expr_stmt|;
try|try
init|(
name|PreparedStatement
name|ps
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
init|)
block|{
name|ps
operator|.
name|setObject
argument_list|(
literal|1
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultSet
name|ignored
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
init|)
block|{}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|expectedException
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Setting to an unknown type should throw an exception"
argument_list|,
name|expectedException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepareStatementWithSetBinaryStream
parameter_list|()
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|stmt
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select under_col from "
operator|+
name|tableName
operator|+
literal|" where value=?"
argument_list|)
decl_stmt|;
name|stmt
operator|.
name|setBinaryStream
argument_list|(
literal|1
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"'val_238' or under_col<> 0"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepareStatementWithSetString
parameter_list|()
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|stmt
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"select under_col from "
operator|+
name|tableName
operator|+
literal|" where value=?"
argument_list|)
decl_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
literal|"val_238\\' or under_col<> 0 --"
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
literal|"anyStringHere\\' or 1=1 --"
argument_list|)
expr_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PreparedStatement
name|createPreapredStatementUsingSetObject
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|ps
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setObject
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//setBoolean
name|ps
operator|.
name|setObject
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//setBoolean
name|ps
operator|.
name|setObject
argument_list|(
literal|3
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//setShort
name|ps
operator|.
name|setObject
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|//setInt
name|ps
operator|.
name|setObject
argument_list|(
literal|5
argument_list|,
literal|3f
argument_list|)
expr_stmt|;
comment|//setFloat
name|ps
operator|.
name|setObject
argument_list|(
literal|6
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|//setDouble
name|ps
operator|.
name|setObject
argument_list|(
literal|7
argument_list|,
literal|"test'string\""
argument_list|)
expr_stmt|;
comment|//setString
name|ps
operator|.
name|setObject
argument_list|(
literal|8
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
comment|//setLong
name|ps
operator|.
name|setObject
argument_list|(
literal|9
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|//setByte
name|ps
operator|.
name|setObject
argument_list|(
literal|10
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|//setByte
name|ps
operator|.
name|setString
argument_list|(
literal|11
argument_list|,
literal|"2012-01-01"
argument_list|)
expr_stmt|;
comment|//setString
name|ps
operator|.
name|setObject
argument_list|(
literal|12
argument_list|,
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2012-04-22 09:00:00.123456789"
argument_list|)
argument_list|)
expr_stmt|;
comment|//setTimestamp
name|ps
operator|.
name|setMaxRows
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|ps
return|;
block|}
specifier|private
name|PreparedStatement
name|createPreapredStatementUsingSetXXX
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|ps
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setBoolean
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//setBoolean
name|ps
operator|.
name|setBoolean
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//setBoolean
name|ps
operator|.
name|setShort
argument_list|(
literal|3
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//setShort
name|ps
operator|.
name|setInt
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|//setInt
name|ps
operator|.
name|setFloat
argument_list|(
literal|5
argument_list|,
literal|3f
argument_list|)
expr_stmt|;
comment|//setFloat
name|ps
operator|.
name|setDouble
argument_list|(
literal|6
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|//setDouble
name|ps
operator|.
name|setString
argument_list|(
literal|7
argument_list|,
literal|"test'string\""
argument_list|)
expr_stmt|;
comment|//setString
name|ps
operator|.
name|setLong
argument_list|(
literal|8
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
comment|//setLong
name|ps
operator|.
name|setByte
argument_list|(
literal|9
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|//setByte
name|ps
operator|.
name|setByte
argument_list|(
literal|10
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|//setByte
name|ps
operator|.
name|setString
argument_list|(
literal|11
argument_list|,
literal|"2012-01-01"
argument_list|)
expr_stmt|;
comment|//setString
name|ps
operator|.
name|setTimestamp
argument_list|(
literal|12
argument_list|,
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2012-04-22 09:00:00.123456789"
argument_list|)
argument_list|)
expr_stmt|;
comment|//setTimestamp
name|ps
operator|.
name|setMaxRows
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|ps
return|;
block|}
specifier|private
name|void
name|assertPreparedStatementResultAsExpected
parameter_list|(
name|ResultSet
name|res
parameter_list|)
throws|throws
name|SQLException
block|{
name|assertNotNull
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ResultSet contained no rows"
argument_list|,
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
do|do
block|{
name|assertEquals
argument_list|(
literal|"2011-03-25"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|"ddate"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|"num"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|10
argument_list|,
name|res
operator|.
name|getByte
argument_list|(
literal|"num"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2011-03-25"
argument_list|,
name|res
operator|.
name|getDate
argument_list|(
literal|"ddate"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|res
operator|.
name|getDouble
argument_list|(
literal|"num"
argument_list|)
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|res
operator|.
name|getInt
argument_list|(
literal|"num"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
literal|"10"
argument_list|)
operator|.
name|shortValue
argument_list|()
argument_list|,
name|res
operator|.
name|getShort
argument_list|(
literal|"num"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|res
operator|.
name|getLong
argument_list|(
literal|"num"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
operator|.
name|getBoolean
argument_list|(
literal|"bv"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|res
operator|.
name|getObject
argument_list|(
literal|"ddate"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|o
operator|=
name|res
operator|.
name|getObject
argument_list|(
literal|"num"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
do|;
block|}
comment|/**    * Execute non-select statements using execute() and executeUpdated() APIs    * of PreparedStatement interface    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testExecutePreparedStatement
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|key
init|=
literal|"testKey"
decl_stmt|;
name|String
name|val1
init|=
literal|"val1"
decl_stmt|;
name|String
name|val2
init|=
literal|"val2"
decl_stmt|;
name|PreparedStatement
name|ps
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
literal|"set "
operator|+
name|key
operator|+
literal|" = ?"
argument_list|)
decl_stmt|;
comment|// execute() of Prepared statement
name|ps
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|ps
operator|.
name|execute
argument_list|()
expr_stmt|;
name|verifyConfValue
argument_list|(
name|con
argument_list|,
name|key
argument_list|,
name|val1
argument_list|)
expr_stmt|;
comment|// executeUpdate() of Prepared statement
name|ps
operator|.
name|clearParameters
argument_list|()
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|ps
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|verifyConfValue
argument_list|(
name|con
argument_list|,
name|key
argument_list|,
name|val2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetOnConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|getConnection
argument_list|(
name|testDbName
operator|+
literal|"?conf1=conf2;conf3=conf4#var1=var2;var3=var4"
argument_list|)
decl_stmt|;
try|try
block|{
name|verifyConfValue
argument_list|(
name|connection
argument_list|,
literal|"conf1"
argument_list|,
literal|"conf2"
argument_list|)
expr_stmt|;
name|verifyConfValue
argument_list|(
name|connection
argument_list|,
literal|"conf3"
argument_list|,
literal|"conf4"
argument_list|)
expr_stmt|;
name|verifyConfValue
argument_list|(
name|connection
argument_list|,
literal|"var1"
argument_list|,
literal|"var2"
argument_list|)
expr_stmt|;
name|verifyConfValue
argument_list|(
name|connection
argument_list|,
literal|"var3"
argument_list|,
literal|"var4"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Execute "set x" and extract value from key=val format result    * Verify the extracted value    * @param key    * @param expectedVal    * @throws Exception    */
specifier|private
name|void
name|verifyConfValue
parameter_list|(
name|Connection
name|con
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|expectedVal
parameter_list|)
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"set "
operator|+
name|key
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|resultValues
index|[]
init|=
name|value
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
comment|// "key = 'val'"
name|assertEquals
argument_list|(
literal|"Result not in key = val format: "
operator|+
name|value
argument_list|,
literal|2
argument_list|,
name|resultValues
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|resultValues
index|[
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"'"
argument_list|)
operator|&&
name|resultValues
index|[
literal|1
index|]
operator|.
name|endsWith
argument_list|(
literal|"'"
argument_list|)
condition|)
block|{
name|resultValues
index|[
literal|1
index|]
operator|=
name|resultValues
index|[
literal|1
index|]
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|resultValues
index|[
literal|1
index|]
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// remove '
block|}
name|assertEquals
argument_list|(
literal|"Conf value should be set by execute()"
argument_list|,
name|expectedVal
argument_list|,
name|resultValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testSelectAll
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSelectAll
argument_list|(
name|tableName
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// tests not setting maxRows (return all)
name|doTestSelectAll
argument_list|(
name|tableName
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// tests setting maxRows to 0 (return all)
block|}
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testSelectAllFromView
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSelectAll
argument_list|(
name|viewName
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// tests not setting maxRows (return all)
name|doTestSelectAll
argument_list|(
name|viewName
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// tests setting maxRows to 0 (return all)
block|}
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testSelectAllPartioned
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSelectAll
argument_list|(
name|partitionedTableName
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// tests not setting maxRows
comment|// (return all)
name|doTestSelectAll
argument_list|(
name|partitionedTableName
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// tests setting maxRows to 0
comment|// (return all)
block|}
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testSelectAllMaxRows
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSelectAll
argument_list|(
name|tableName
argument_list|,
literal|100
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testSelectAllFetchSize
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSelectAll
argument_list|(
name|tableName
argument_list|,
literal|100
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullType
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select null from "
operator|+
name|dataTypeTableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|res
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// executeQuery should always throw a SQLException,
comment|// when it executes a non-ResultSet query (like create)
annotation|@
name|Test
specifier|public
name|void
name|testExecuteQueryException
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"create table test_t2 (under_col int, value string)"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting SQLException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Caught an expected SQLException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkResultSetExpected
parameter_list|(
name|Statement
name|stmt
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|setupQueries
parameter_list|,
name|String
name|testQuery
parameter_list|,
name|boolean
name|isExpectedResultSet
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|hasResultSet
decl_stmt|;
comment|// execute the setup queries
for|for
control|(
name|String
name|setupQuery
range|:
name|setupQueries
control|)
block|{
try|try
block|{
name|stmt
operator|.
name|execute
argument_list|(
name|setupQuery
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failWithExceptionMsg
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// execute the test query
try|try
block|{
name|hasResultSet
operator|=
name|stmt
operator|.
name|execute
argument_list|(
name|testQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hasResultSet
argument_list|,
name|isExpectedResultSet
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failWithExceptionMsg
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|failWithExceptionMsg
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullResultSet
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|setupQueries
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|testQuery
decl_stmt|;
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// -select- should return a ResultSet
name|testQuery
operator|=
literal|"select * from "
operator|+
name|tableName
operator|+
literal|" limit 5"
expr_stmt|;
name|checkResultSetExpected
argument_list|(
name|stmt
argument_list|,
name|setupQueries
argument_list|,
name|testQuery
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setupQueries
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// -create- should not return a ResultSet
name|setupQueries
operator|.
name|add
argument_list|(
literal|"drop table test_t1"
argument_list|)
expr_stmt|;
name|testQuery
operator|=
literal|"create table test_t1 (under_col int, value string)"
expr_stmt|;
name|checkResultSetExpected
argument_list|(
name|stmt
argument_list|,
name|setupQueries
argument_list|,
name|testQuery
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setupQueries
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// -create table as select- should not return a ResultSet
name|setupQueries
operator|.
name|add
argument_list|(
literal|"drop table test_t1"
argument_list|)
expr_stmt|;
name|testQuery
operator|=
literal|"create table test_t1 as select * from "
operator|+
name|tableName
operator|+
literal|" limit 5"
expr_stmt|;
name|checkResultSetExpected
argument_list|(
name|stmt
argument_list|,
name|setupQueries
argument_list|,
name|testQuery
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setupQueries
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// -insert table as select- should not return a ResultSet
name|setupQueries
operator|.
name|add
argument_list|(
literal|"drop table test_t1"
argument_list|)
expr_stmt|;
name|setupQueries
operator|.
name|add
argument_list|(
literal|"create table test_t1 (under_col int, value string)"
argument_list|)
expr_stmt|;
name|testQuery
operator|=
literal|"insert into table test_t1 select under_col, value from "
operator|+
name|tableName
operator|+
literal|" limit 5"
expr_stmt|;
name|checkResultSetExpected
argument_list|(
name|stmt
argument_list|,
name|setupQueries
argument_list|,
name|testQuery
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setupQueries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseResultSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// execute query, ignore exception if any
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tableName
argument_list|)
decl_stmt|;
comment|// close ResultSet, ignore exception if any
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// A statement should be open even after ResultSet#close
name|assertFalse
argument_list|(
name|stmt
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
comment|// A Statement#cancel after ResultSet#close should be a no-op
try|try
block|{
name|stmt
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|failWithExceptionMsg
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|=
name|con
operator|.
name|createStatement
argument_list|()
expr_stmt|;
comment|// execute query, ignore exception if any
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tableName
argument_list|)
expr_stmt|;
comment|// close ResultSet, ignore exception if any
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// A Statement#execute after ResultSet#close should be fine too
try|try
block|{
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|failWithExceptionMsg
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// A Statement#close after ResultSet#close should close the statement
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|stmt
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDataTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|dataTypeTableName
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|meta
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
comment|// row 1
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// skip the last (partitioning) column since it is always non-null
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|meta
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertNull
argument_list|(
literal|"Column "
operator|+
name|i
operator|+
literal|" should be null"
argument_list|,
name|res
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// getXXX returns 0 for numeric types, false for boolean and null for other
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|res
operator|.
name|getBoolean
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0d
argument_list|,
name|res
operator|.
name|getDouble
argument_list|(
literal|3
argument_list|)
argument_list|,
name|floatCompareDelta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
operator|.
name|getByte
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
operator|.
name|getShort
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0f
argument_list|,
name|res
operator|.
name|getFloat
argument_list|(
literal|11
argument_list|)
argument_list|,
name|floatCompareDelta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|res
operator|.
name|getLong
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|18
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getDate
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|22
argument_list|)
argument_list|)
expr_stmt|;
comment|// row 2
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|res
operator|.
name|getBoolean
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1.1d
argument_list|,
name|res
operator|.
name|getDouble
argument_list|(
literal|3
argument_list|)
argument_list|,
name|floatCompareDelta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[]"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"r\":null,\"s\":null,\"t\":null}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|res
operator|.
name|getByte
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|res
operator|.
name|getShort
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1.0f
argument_list|,
name|res
operator|.
name|getFloat
argument_list|(
literal|11
argument_list|)
argument_list|,
name|floatCompareDelta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|res
operator|.
name|getLong
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[]"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"r\":null,\"s\":null}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[]"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getTimestamp
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getBigDecimal
argument_list|(
literal|18
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getDate
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|22
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
comment|// row 3
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
operator|.
name|getBoolean
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.1d
argument_list|,
name|res
operator|.
name|getDouble
argument_list|(
literal|3
argument_list|)
argument_list|,
name|floatCompareDelta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1,2]"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{1:\"x\",2:\"y\"}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"k\":\"v\"}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"r\":\"a\",\"s\":9,\"t\":2.2}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|getByte
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|getShort
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|res
operator|.
name|getFloat
argument_list|(
literal|11
argument_list|)
argument_list|,
name|floatCompareDelta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|getLong
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[[\"a\",\"b\"],[\"c\",\"d\"]]"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{1:{11:12,13:14},2:{21:22}}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{\"r\":1,\"s\":{\"a\":2,\"b\":\"x\"}}"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[{\"m\":{},\"n\":1},{\"m\":{\"a\":\"b\",\"c\":\"d\"},\"n\":2}]"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2012-04-22 09:00:00.123456789"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2012-04-22 09:00:00.123456789"
argument_list|,
name|res
operator|.
name|getTimestamp
argument_list|(
literal|17
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"123456789.1234560"
argument_list|,
name|res
operator|.
name|getBigDecimal
argument_list|(
literal|18
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcd"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2013-01-01"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2013-01-01"
argument_list|,
name|res
operator|.
name|getDate
argument_list|(
literal|20
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc123"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc123         "
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|22
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|"X'01FF'"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|InputStream
name|resultSetInputStream
init|=
name|res
operator|.
name|getBinaryStream
argument_list|(
literal|23
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|bytes
operator|.
name|length
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|resultSetInputStream
operator|.
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|bytes
index|[
name|i
index|]
argument_list|,
name|b
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// test getBoolean rules on non-boolean columns
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
operator|.
name|getBoolean
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
operator|.
name|getBoolean
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// test case sensitivity
name|assertFalse
argument_list|(
name|meta
operator|.
name|isCaseSensitive
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|isCaseSensitive
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|isCaseSensitive
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|isCaseSensitive
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// no more rows
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntervalTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// Since interval types not currently supported as table columns, need to create them
comment|// as expressions.
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select case when c17 is null then null else interval '1' year end as col1,"
operator|+
literal|" c17 -  c17 as col2 from "
operator|+
name|dataTypeTableName
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|meta
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|meta
operator|.
name|getColumnLabel
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|OTHER
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"interval_year_month"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HiveIntervalYearMonth
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|meta
operator|.
name|getColumnClassName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"col2"
argument_list|,
name|meta
operator|.
name|getColumnLabel
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|OTHER
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"interval_day_time"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|29
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|29
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HiveIntervalDayTime
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|meta
operator|.
name|getColumnClassName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// row 1 - results should be null
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// skip the last (partitioning) column since it is always non-null
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|meta
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertNull
argument_list|(
literal|"Column "
operator|+
name|i
operator|+
literal|" should be null"
argument_list|,
name|res
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// row 2 - results should be null
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|meta
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertNull
argument_list|(
literal|"Column "
operator|+
name|i
operator|+
literal|" should be null"
argument_list|,
name|res
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// row 3
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1-0"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|HiveIntervalYearMonth
operator|)
name|res
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getYears
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0 00:00:00.000000000"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|HiveIntervalDayTime
operator|)
name|res
operator|.
name|getObject
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|doTestSelectAll
parameter_list|(
name|String
name|tableName
parameter_list|,
name|int
name|maxRows
parameter_list|,
name|int
name|fetchSize
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|isPartitionTable
init|=
name|tableName
operator|.
name|equals
argument_list|(
name|partitionedTableName
argument_list|)
decl_stmt|;
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxRows
operator|>=
literal|0
condition|)
block|{
name|stmt
operator|.
name|setMaxRows
argument_list|(
name|maxRows
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchSize
operator|>
literal|0
condition|)
block|{
name|stmt
operator|.
name|setFetchSize
argument_list|(
name|fetchSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fetchSize
argument_list|,
name|stmt
operator|.
name|getFetchSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// JDBC says that 0 means return all, which is the default
name|int
name|expectedMaxRows
init|=
name|maxRows
operator|<
literal|1
condition|?
literal|0
else|:
name|maxRows
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Statement max rows not as expected"
argument_list|,
name|expectedMaxRows
argument_list|,
name|stmt
operator|.
name|getMaxRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Statement should not be closed"
argument_list|,
name|stmt
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|ResultSet
name|res
decl_stmt|;
comment|// run some queries
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"ResultSet is null"
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"getResultSet() not returning expected ResultSet"
argument_list|,
name|res
operator|==
name|stmt
operator|.
name|getResultSet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"get update count not as expected"
argument_list|,
literal|0
argument_list|,
name|stmt
operator|.
name|getUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|ResultSetMetaData
name|meta
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|int
name|expectedColCount
init|=
name|isPartitionTable
condition|?
literal|3
else|:
literal|2
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected column count"
argument_list|,
name|expectedColCount
argument_list|,
name|meta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|moreRow
init|=
name|res
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
name|moreRow
condition|)
block|{
try|try
block|{
name|i
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|res
operator|.
name|getInt
argument_list|(
name|tableName
operator|+
literal|".under_col"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|res
operator|.
name|getInt
argument_list|(
literal|"under_col"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
name|tableName
operator|+
literal|".under_col"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|"under_col"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
name|tableName
operator|+
literal|".value"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPartitionTable
condition|)
block|{
name|assertEquals
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|,
name|partitionedColumnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
name|partitionedColumnName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
name|tableName
operator|+
literal|"."
operator|+
name|partitionedColumnName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Last result value was not null"
argument_list|,
name|res
operator|.
name|wasNull
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"No warnings should be found on ResultSet"
argument_list|,
name|res
operator|.
name|getWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|.
name|clearWarnings
argument_list|()
expr_stmt|;
comment|// verifying that method is supported
comment|// System.out.println(res.getString(1) + " " + res.getString(2));
name|assertEquals
argument_list|(
literal|"getInt and getString don't align for the same result value"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected result found"
argument_list|,
literal|"val_"
operator|+
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|moreRow
operator|=
name|res
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// supposed to get 500 rows if maxRows isn't set
name|int
name|expectedRowCount
init|=
name|maxRows
operator|>
literal|0
condition|?
name|maxRows
else|:
literal|500
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of rows returned"
argument_list|,
name|expectedRowCount
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// should have no more rows
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|moreRow
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"No warnings should be found on statement"
argument_list|,
name|stmt
operator|.
name|getWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|clearWarnings
argument_list|()
expr_stmt|;
comment|// verifying that method is supported
name|assertNull
argument_list|(
literal|"No warnings should be found on connection"
argument_list|,
name|con
operator|.
name|getWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|con
operator|.
name|clearWarnings
argument_list|()
expr_stmt|;
comment|// verifying that method is supported
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Statement should be closed"
argument_list|,
name|stmt
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testErrorMessages
parameter_list|()
throws|throws
name|SQLException
block|{
name|String
name|invalidSyntaxSQLState
init|=
literal|"42000"
decl_stmt|;
comment|// These tests inherently cause exceptions to be written to the test output
comment|// logs. This is undesirable, since you it might appear to someone looking
comment|// at the test output logs as if something is failing when it isn't.
comment|// Not sure how to get around that.
name|doTestErrorCase
argument_list|(
literal|"SELECTT * FROM "
operator|+
name|tableName
argument_list|,
literal|"cannot recognize input near 'SELECTT' '*' 'FROM'"
argument_list|,
name|invalidSyntaxSQLState
argument_list|,
literal|40000
argument_list|)
expr_stmt|;
name|doTestErrorCase
argument_list|(
literal|"SELECT * FROM some_table_that_does_not_exist"
argument_list|,
literal|"Table not found"
argument_list|,
literal|"42S02"
argument_list|,
literal|10001
argument_list|)
expr_stmt|;
name|doTestErrorCase
argument_list|(
literal|"drop table some_table_that_does_not_exist"
argument_list|,
literal|"Table not found"
argument_list|,
literal|"42S02"
argument_list|,
literal|10001
argument_list|)
expr_stmt|;
name|doTestErrorCase
argument_list|(
literal|"SELECT invalid_column FROM "
operator|+
name|tableName
argument_list|,
literal|"Invalid table alias or column reference"
argument_list|,
name|invalidSyntaxSQLState
argument_list|,
literal|10004
argument_list|)
expr_stmt|;
name|doTestErrorCase
argument_list|(
literal|"SELECT invalid_function(under_col) FROM "
operator|+
name|tableName
argument_list|,
literal|"Invalid function"
argument_list|,
name|invalidSyntaxSQLState
argument_list|,
literal|10011
argument_list|)
expr_stmt|;
comment|// TODO: execute errors like this currently don't return good error
comment|// codes and messages. This should be fixed.
name|doTestErrorCase
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (key int, value string)"
argument_list|,
literal|"FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.DDLTask"
argument_list|,
literal|"08S01"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestErrorCase
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|expectedMessage
parameter_list|,
name|String
name|expectedSQLState
parameter_list|,
name|int
name|expectedErrorCode
parameter_list|)
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|boolean
name|exceptionFound
init|=
literal|false
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Adequate error messaging not found for '"
operator|+
name|sql
operator|+
literal|"': "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedMessage
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected SQLState not found for '"
operator|+
name|sql
operator|+
literal|"'"
argument_list|,
name|expectedSQLState
argument_list|,
name|e
operator|.
name|getSQLState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected error code not found for '"
operator|+
name|sql
operator|+
literal|"'"
argument_list|,
name|expectedErrorCode
argument_list|,
name|e
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
name|exceptionFound
operator|=
literal|true
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Exception should have been thrown for query: "
operator|+
name|sql
argument_list|,
name|exceptionFound
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShowTables
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show tables"
argument_list|)
decl_stmt|;
name|boolean
name|testTableExists
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"table name is null in result set"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableName
operator|.
name|equalsIgnoreCase
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|testTableExists
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"table name "
operator|+
name|tableName
operator|+
literal|" not found in SHOW TABLES result set"
argument_list|,
name|testTableExists
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShowTablesInDb
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|String
name|tableNameInDbUnique
init|=
name|tableName
operator|+
literal|"_unique"
decl_stmt|;
name|String
name|fullTestTableName
init|=
name|StatsUtils
operator|.
name|getFullyQualifiedTableName
argument_list|(
name|testDbName
argument_list|,
name|tableNameInDbUnique
argument_list|)
decl_stmt|;
comment|// create a table with a unique name in testDb
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists "
operator|+
name|fullTestTableName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table "
operator|+
name|fullTestTableName
operator|+
literal|" (under_col int comment 'the under column', value string) comment '"
operator|+
name|tableComment
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show tables in "
operator|+
name|testDbName
argument_list|)
decl_stmt|;
name|boolean
name|testTableExists
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"table name is null in result set"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableNameInDbUnique
operator|.
name|equalsIgnoreCase
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|testTableExists
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"table name "
operator|+
name|tableNameInDbUnique
operator|+
literal|" not found in SHOW TABLES result set"
argument_list|,
name|testTableExists
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table if exists "
operator|+
name|fullTestTableName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidShowTables
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
comment|//show tables<dbname> is in invalid show tables syntax. Hive does not return
comment|//any tables in this case
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show tables "
operator|+
name|testDbName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaDataGetTables
parameter_list|()
throws|throws
name|SQLException
block|{
name|getTablesTest
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ClassicTableTypes
operator|.
name|TABLE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|ClassicTableTypes
operator|.
name|VIEW
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaDataGetTablesHive
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_TABLE_TYPE_MAPPING
operator|.
name|varname
operator|+
literal|" = "
operator|+
name|TableTypeMappings
operator|.
name|HIVE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|getTablesTest
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|,
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaDataGetTablesClassic
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_TABLE_TYPE_MAPPING
operator|.
name|varname
operator|+
literal|" = "
operator|+
name|TableTypeMappings
operator|.
name|CLASSIC
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|getTablesTest
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ClassicTableTypes
operator|.
name|TABLE
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|ClassicTableTypes
operator|.
name|VIEW
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaDataGetExternalTables
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_TABLE_TYPE_MAPPING
operator|.
name|varname
operator|+
literal|" = "
operator|+
name|TableTypeMappings
operator|.
name|HIVE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|ResultSet
name|rs
init|=
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getTables
argument_list|(
name|testDbName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|resMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|resMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_CAT"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_SCHEM"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_NAME"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_TYPE"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"REMARKS"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|String
name|resultDbName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_SCHEM"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|resultDbName
argument_list|,
name|testDbName
argument_list|)
expr_stmt|;
name|String
name|resultTableName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|resultTableName
argument_list|,
name|externalTableName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|resultTableComment
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"REMARKS"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing comment on the table."
argument_list|,
name|resultTableComment
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|tableType
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_TYPE"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
argument_list|,
name|tableType
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Unexpected table"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaDataGetTypeInfo
parameter_list|()
throws|throws
name|SQLException
block|{
name|HiveBaseResultSet
name|rs
init|=
operator|(
name|HiveBaseResultSet
operator|)
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|typeInfos
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
literal|"BOOLEAN"
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
literal|"TINYINT"
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
literal|"SMALLINT"
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
literal|"INT"
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
literal|"BIGINT"
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
literal|"FLOAT"
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
literal|"DOUBLE"
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
literal|"STRING"
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
literal|"TIMESTAMP"
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
literal|"BINARY"
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
literal|"DECIMAL"
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
literal|"ARRAY"
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
literal|"MAP"
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
literal|"STRUCT"
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
literal|"UNIONTYPE"
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|typeInfo
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Get by index different from get by name"
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|remove
argument_list|(
name|typeInfo
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect typeInfo count."
argument_list|,
literal|0
argument_list|,
name|typeInfos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Found less typeInfos than we test for."
argument_list|,
name|cnt
operator|>=
name|typeInfos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the type returned for pre-created table type table and view type table    * @param tableTypeNames expected table types    * @param viewTypeName expected view type    * @throws SQLException    */
specifier|private
name|void
name|getTablesTest
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|tableTypeNames
parameter_list|,
name|String
name|viewTypeName
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
index|[]
name|ALL
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|VIEW_ONLY
init|=
block|{
name|viewTypeName
block|}
decl_stmt|;
name|String
index|[]
name|TABLE_ONLY
init|=
name|tableTypeNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|tableTypeNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|viewOrTableArray
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|viewOrTableArray
operator|.
name|addAll
argument_list|(
name|tableTypeNames
argument_list|)
expr_stmt|;
name|viewOrTableArray
operator|.
name|add
argument_list|(
name|viewTypeName
argument_list|)
expr_stmt|;
name|String
name|testTblWithDb
init|=
name|StatsUtils
operator|.
name|getFullyQualifiedTableName
argument_list|(
name|testDbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|String
name|testPartTblWithDb
init|=
name|StatsUtils
operator|.
name|getFullyQualifiedTableName
argument_list|(
name|testDbName
argument_list|,
name|partitionedTableName
argument_list|)
decl_stmt|;
name|String
name|testDataTypeTblWithDb
init|=
name|StatsUtils
operator|.
name|getFullyQualifiedTableName
argument_list|(
name|testDbName
argument_list|,
name|dataTypeTableName
argument_list|)
decl_stmt|;
name|String
name|testViewWithDb
init|=
name|StatsUtils
operator|.
name|getFullyQualifiedTableName
argument_list|(
name|testDbName
argument_list|,
name|viewName
argument_list|)
decl_stmt|;
name|String
name|testExtTblWithDb
init|=
name|StatsUtils
operator|.
name|getFullyQualifiedTableName
argument_list|(
name|testDbName
argument_list|,
name|externalTableName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Object
index|[]
argument_list|,
name|String
index|[]
argument_list|>
name|tests
init|=
operator|new
name|IdentityHashMap
argument_list|<
name|Object
index|[]
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|"testjdbc%"
block|,
name|ALL
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|testTblWithDb
block|,
name|testPartTblWithDb
block|,
name|testViewWithDb
block|,
name|testExtTblWithDb
block|,
name|testDataTypeTblWithDb
block|}
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"test%"
block|,
literal|"testjdbc%"
block|,
name|ALL
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|testTblWithDb
block|,
name|testPartTblWithDb
block|,
name|testViewWithDb
block|,
name|testExtTblWithDb
block|,
name|testDataTypeTblWithDb
block|}
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"test%"
block|,
literal|"testjdbc%"
block|,
name|VIEW_ONLY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|testViewWithDb
block|}
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|"testjdbcdrivertbl"
block|,
name|ALL
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|testTblWithDb
block|}
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"%jdbc%"
block|,
literal|"testjdbcdrivertbl"
block|,
name|ALL
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|testTblWithDb
block|}
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"%jdbc%"
block|,
literal|"testjdbc%"
block|,
name|ALL
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|testTblWithDb
block|,
name|testPartTblWithDb
block|,
name|testViewWithDb
block|,
name|testExtTblWithDb
block|,
name|testDataTypeTblWithDb
block|}
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"%jdbc%"
block|,
literal|"testjdbcdrivertbl"
block|,
name|TABLE_ONLY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|testTblWithDb
block|}
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|"test_dbcdri_ertbl"
block|,
name|ALL
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|testTblWithDb
block|}
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|"%jdbc%"
block|,
name|ALL
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|testTblWithDb
block|,
name|testPartTblWithDb
block|,
name|testViewWithDb
block|,
name|testDataTypeTblWithDb
block|,
name|testExtTblWithDb
block|}
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"%"
block|,
literal|"%jdbc%"
block|,
name|VIEW_ONLY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|testViewWithDb
block|}
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|null
block|,
literal|"%jdbc%"
block|,
name|TABLE_ONLY
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|testTblWithDb
block|,
name|testPartTblWithDb
block|,
name|testExtTblWithDb
block|,
name|testDataTypeTblWithDb
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
index|[]
argument_list|,
name|String
index|[]
argument_list|>
name|entry
range|:
name|tests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
index|[]
name|checkPattern
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|debugString
init|=
name|checkPattern
index|[
literal|0
index|]
operator|+
literal|", "
operator|+
name|checkPattern
index|[
literal|1
index|]
operator|+
literal|", "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|String
index|[]
operator|)
name|checkPattern
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedTables
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ResultSet
name|rs
init|=
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
operator|(
name|String
operator|)
name|checkPattern
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|checkPattern
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
index|[]
operator|)
name|checkPattern
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|resMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|resMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_CAT"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_SCHEM"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_NAME"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_TYPE"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"REMARKS"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|resultDbName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_SCHEM"
argument_list|)
decl_stmt|;
name|String
name|resultTableName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
decl_stmt|;
name|String
name|fullTableName
init|=
name|StatsUtils
operator|.
name|getFullyQualifiedTableName
argument_list|(
name|resultDbName
argument_list|,
name|resultTableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid table "
operator|+
name|fullTableName
operator|+
literal|" for test "
operator|+
name|debugString
argument_list|,
name|expectedTables
operator|.
name|contains
argument_list|(
name|fullTableName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|resultTableComment
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"REMARKS"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing comment on the table."
argument_list|,
name|resultTableComment
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|tableType
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_TYPE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultTableName
operator|.
name|endsWith
argument_list|(
literal|"view"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Expected a tabletype view but got something else."
argument_list|,
name|viewTypeName
argument_list|,
name|tableType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Expected one of "
operator|+
name|tableTypeNames
operator|+
literal|" table but got something else: "
operator|+
name|tableType
argument_list|,
name|tableTypeNames
operator|.
name|contains
argument_list|(
name|tableType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cnt
operator|++
expr_stmt|;
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Received an incorrect number of tables for test "
operator|+
name|debugString
argument_list|,
name|expectedTables
operator|.
name|size
argument_list|()
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaDataGetCatalogs
parameter_list|()
throws|throws
name|SQLException
block|{
name|ResultSet
name|rs
init|=
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getCatalogs
argument_list|()
decl_stmt|;
name|ResultSetMetaData
name|resMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_CAT"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaDataGetSchemas
parameter_list|()
throws|throws
name|SQLException
block|{
name|ResultSet
name|rs
init|=
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSchemas
argument_list|()
decl_stmt|;
name|ResultSetMetaData
name|resMeta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resMeta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_SCHEM"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_CATALOG"
argument_list|,
name|resMeta
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testDbName
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// test default table types returned in
comment|// Connection.getMetaData().getTableTypes()
annotation|@
name|Test
specifier|public
name|void
name|testMetaDataGetTableTypes
parameter_list|()
throws|throws
name|SQLException
block|{
name|metaDataGetTableTypeTest
argument_list|(
operator|new
name|ClassicTableTypeMapping
argument_list|()
operator|.
name|getTableTypeNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test default table types returned in
comment|// Connection.getMetaData().getTableTypes() when type config is set to "HIVE"
annotation|@
name|Test
specifier|public
name|void
name|testMetaDataGetHiveTableTypes
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_TABLE_TYPE_MAPPING
operator|.
name|varname
operator|+
literal|" = "
operator|+
name|TableTypeMappings
operator|.
name|HIVE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|metaDataGetTableTypeTest
argument_list|(
operator|new
name|HiveTableTypeMapping
argument_list|()
operator|.
name|getTableTypeNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test default table types returned in
comment|// Connection.getMetaData().getTableTypes() when type config is set to "CLASSIC"
annotation|@
name|Test
specifier|public
name|void
name|testMetaDataGetClassicTableTypes
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_TABLE_TYPE_MAPPING
operator|.
name|varname
operator|+
literal|" = "
operator|+
name|TableTypeMappings
operator|.
name|CLASSIC
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|metaDataGetTableTypeTest
argument_list|(
operator|new
name|ClassicTableTypeMapping
argument_list|()
operator|.
name|getTableTypeNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if Connection.getMetaData().getTableTypes() returns expected    *  tabletypes    * @param tabletypes expected table types    * @throws SQLException    */
specifier|private
name|void
name|metaDataGetTableTypeTest
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|tabletypes
parameter_list|)
throws|throws
name|SQLException
block|{
name|ResultSet
name|rs
init|=
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getTableTypes
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|tabletype
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_TYPE"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Get by index different from get by name"
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|tabletype
argument_list|)
expr_stmt|;
name|tabletypes
operator|.
name|remove
argument_list|(
name|tabletype
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect tabletype count."
argument_list|,
literal|0
argument_list|,
name|tabletypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Found less tabletypes then we test for."
argument_list|,
name|cnt
operator|>=
name|tabletypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaDataGetColumns
parameter_list|()
throws|throws
name|SQLException
block|{
name|Map
argument_list|<
name|String
index|[]
argument_list|,
name|Integer
argument_list|>
name|tests
init|=
operator|new
name|HashMap
argument_list|<
name|String
index|[]
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"testjdbcdrivertbl"
block|,
literal|null
block|}
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"%jdbcdrivertbl"
block|,
literal|null
block|}
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"%jdbcdrivertbl%"
block|,
literal|"under\\_col"
block|}
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"%jdbcdrivertbl%"
block|,
literal|"under\\_co_"
block|}
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"%jdbcdrivertbl%"
block|,
literal|"under_col"
block|}
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"%jdbcdrivertbl%"
block|,
literal|"und%"
block|}
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"%jdbcdrivertbl%"
block|,
literal|"%"
block|}
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tests
operator|.
name|put
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"%jdbcdrivertbl%"
block|,
literal|"_%"
block|}
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|String
index|[]
name|checkPattern
range|:
name|tests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ResultSet
name|rs
init|=
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
name|testDbName
argument_list|,
name|checkPattern
index|[
literal|0
index|]
argument_list|,
name|checkPattern
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
comment|// validate the metadata for the getColumns result set
name|ResultSetMetaData
name|rsmd
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_CAT"
argument_list|,
name|rsmd
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|columnname
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
decl_stmt|;
name|int
name|ordinalPos
init|=
name|rs
operator|.
name|getInt
argument_list|(
literal|"ORDINAL_POSITION"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|cnt
condition|)
block|{
case|case
literal|0
case|:
name|assertEquals
argument_list|(
literal|"Wrong column name found"
argument_list|,
literal|"under_col"
argument_list|,
name|columnname
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong ordinal position found"
argument_list|,
name|ordinalPos
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|assertEquals
argument_list|(
literal|"Wrong column name found"
argument_list|,
literal|"value"
argument_list|,
name|columnname
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong ordinal position found"
argument_list|,
name|ordinalPos
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|cnt
operator|++
expr_stmt|;
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Found less columns then we test for."
argument_list|,
name|tests
operator|.
name|get
argument_list|(
name|checkPattern
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validate the Metadata for the result set of a metadata getColumns call.    */
annotation|@
name|Test
specifier|public
name|void
name|testMetaDataGetColumnsMetaData
parameter_list|()
throws|throws
name|SQLException
block|{
name|ResultSet
name|rs
init|=
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"testhivejdbcdrivertable"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|rsmd
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TABLE_CAT"
argument_list|,
name|rsmd
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|rsmd
operator|.
name|getColumnType
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|rsmd
operator|.
name|getColumnDisplaySize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ORDINAL_POSITION"
argument_list|,
name|rsmd
operator|.
name|getColumnName
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|rsmd
operator|.
name|getColumnType
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|rsmd
operator|.
name|getColumnDisplaySize
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDescribeTable
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"describe "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|res
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column name 'under_col' not found"
argument_list|,
literal|"under_col"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column type 'under_col' for column under_col not found"
argument_list|,
literal|"int"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column name 'value' not found"
argument_list|,
literal|"value"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column type 'string' for column key not found"
argument_list|,
literal|"string"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"More results found than expected"
argument_list|,
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShowColumns
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show columns in "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|res
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column name 'under_col' not found"
argument_list|,
literal|"under_col"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column name 'value' not found"
argument_list|,
literal|"value"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"More results found than expected"
argument_list|,
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDatabaseMetaData
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|meta
init|=
name|con
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Apache Hive"
argument_list|,
name|meta
operator|.
name|getDatabaseProductName
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|keywords
init|=
name|meta
operator|.
name|getSQLKeywords
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
comment|// Check a random one. These can change w/Hive versions.
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|keyword
range|:
name|keywords
control|)
block|{
name|found
operator|=
literal|"limit"
operator|.
name|equals
argument_list|(
name|keyword
argument_list|)
expr_stmt|;
if|if
condition|(
name|found
condition|)
break|break;
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HiveVersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|,
name|meta
operator|.
name|getDatabaseProductVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"hive.version"
argument_list|)
argument_list|,
name|meta
operator|.
name|getDatabaseProductVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"verifying hive version pattern. got "
operator|+
name|meta
operator|.
name|getDatabaseProductVersion
argument_list|()
argument_list|,
name|Pattern
operator|.
name|matches
argument_list|(
literal|"\\d+\\.\\d+\\.\\d+.*"
argument_list|,
name|meta
operator|.
name|getDatabaseProductVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DatabaseMetaData
operator|.
name|sqlStateSQL99
argument_list|,
name|meta
operator|.
name|getSQLStateType
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|supportsCatalogsInTableDefinitions
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|supportsSchemasInTableDefinitions
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|supportsSchemasInDataManipulation
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|supportsMultipleResultSets
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|supportsStoredProcedures
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|supportsAlterTableWithAddColumn
argument_list|()
argument_list|)
expr_stmt|;
comment|// -1 indicates malformed version.
name|assertTrue
argument_list|(
name|meta
operator|.
name|getDatabaseMajorVersion
argument_list|()
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|getDatabaseMinorVersion
argument_list|()
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientInfo
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|meta
init|=
name|con
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|meta
operator|.
name|getClientInfoProperties
argument_list|()
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ApplicationName"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|res
operator|.
name|getInt
argument_list|(
literal|"MAX_LEN"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Unexpected exception: "
operator|+
name|e
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|Connection
name|conn
init|=
name|getConnection
argument_list|(
literal|""
argument_list|)
decl_stmt|;
try|try
block|{
name|conn
operator|.
name|setClientInfo
argument_list|(
literal|"ApplicationName"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|conn
operator|.
name|getClientInfo
argument_list|(
literal|"ApplicationName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResultSetColumnNameCaseInsensitive
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
decl_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select c1 from "
operator|+
name|dataTypeTableName
operator|+
literal|" limit 1"
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|res
operator|.
name|findColumn
argument_list|(
literal|"c1"
argument_list|)
expr_stmt|;
name|res
operator|.
name|findColumn
argument_list|(
literal|"C1"
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Unexpected exception: "
operator|+
name|e
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select c1 C1 from "
operator|+
name|dataTypeTableName
operator|+
literal|" limit 1"
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|res
operator|.
name|findColumn
argument_list|(
literal|"c1"
argument_list|)
expr_stmt|;
name|res
operator|.
name|findColumn
argument_list|(
literal|"C1"
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Unexpected exception: "
operator|+
name|e
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResultSetMetaData
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
operator|.
name|varname
operator|+
literal|"=false"
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select c1, c2, c3, c4, c5 as a, c6, c7, c8, c9, c10, c11, c12, "
operator|+
literal|"c1*2, sentences(null, null, null) as b, c17, c18, c20, c21, c22, c23, null as null_val from "
operator|+
name|dataTypeTableName
operator|+
literal|" limit 1"
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|meta
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|ResultSet
name|colRS
init|=
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|dataTypeTableName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|meta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c1"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"int"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c1"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"int"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|1
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|1
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c2"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c2"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|2
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c3"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|DOUBLE
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"double"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c3"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|DOUBLE
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"double"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|3
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|3
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c4"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c4"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|4
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|4
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|ARRAY
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"array"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c5"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|ARRAY
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"array<int>"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c6"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|JAVA_OBJECT
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"map"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c6"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|JAVA_OBJECT
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"map<int,string>"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c7"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|JAVA_OBJECT
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"map"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c7"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|JAVA_OBJECT
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"map<string,string>"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c8"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|STRUCT
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"struct"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c8"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|STRUCT
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"struct<r:string,s:int,t:double>"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c9"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|TINYINT
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tinyint"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c9"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|TINYINT
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tinyint"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|9
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|9
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c10"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|SMALLINT
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"smallint"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c10"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|SMALLINT
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"smallint"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|10
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|10
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c11"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|FLOAT
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"float"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|24
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c11"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|FLOAT
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"float"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|11
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|11
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c12"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bigint"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|19
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c12"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bigint"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|12
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|12
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_c12"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"int"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|ARRAY
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"array"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
comment|// Move the result of getColumns() forward to match the columns of the query
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// c13
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// c14
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// c15
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// c16
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// c17
name|assertEquals
argument_list|(
literal|"c17"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|TIMESTAMP
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"timestamp"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|29
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|29
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c17"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|TIMESTAMP
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"timestamp"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|15
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|15
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c18"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|DECIMAL
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"decimal"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c18"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|DECIMAL
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"decimal"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|16
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|16
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// skip c19, since not selected by query
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c20"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|DATE
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"date"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|17
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c20"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|DATE
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"date"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|17
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|17
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c21"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|18
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|18
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"varchar"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|18
argument_list|)
argument_list|)
expr_stmt|;
comment|// varchar columns should have correct display size/precision
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|18
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|18
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|18
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c21"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"varchar"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|18
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|18
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c22"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|CHAR
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"char"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|19
argument_list|)
argument_list|)
expr_stmt|;
comment|// char columns should have correct display size/precision
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c22"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|CHAR
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"char"
argument_list|,
name|colRS
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getPrecision
argument_list|(
literal|19
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta
operator|.
name|getScale
argument_list|(
literal|19
argument_list|)
argument_list|,
name|colRS
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c23"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|BINARY
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"binary"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"null_val"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|NULL
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"void"
argument_list|,
name|meta
operator|.
name|getColumnTypeName
argument_list|(
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|meta
operator|.
name|getColumnDisplaySize
argument_list|(
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getPrecision
argument_list|(
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|getScale
argument_list|(
literal|21
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|meta
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|meta
operator|.
name|isAutoIncrement
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|isCurrency
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResultSetMetaData
operator|.
name|columnNullable
argument_list|,
name|meta
operator|.
name|isNullable
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResultSetMetaDataDuplicateColumnNames
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select c1 as c2_1, c2, c1*2 from "
operator|+
name|dataTypeTableName
operator|+
literal|" limit 1"
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|meta
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|ResultSet
name|colRS
init|=
name|con
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|dataTypeTableName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|meta
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c2_1"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c2"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|colRS
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_c2"
argument_list|,
name|meta
operator|.
name|getColumnName
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResultSetRowProperties
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|dataTypeTableName
operator|+
literal|" limit 1"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|rowDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|rowInserted
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|rowUpdated
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// [url] [host] [port] [db]
specifier|private
specifier|static
specifier|final
name|String
index|[]
index|[]
name|URL_PROPERTIES
init|=
operator|new
name|String
index|[]
index|[]
block|{
comment|// binary mode
comment|// For embedded mode, the JDBC uri is of the form:
comment|// jdbc:hive2:///dbName;sess_var_list?hive_conf_list#hive_var_list
comment|// and does not contain host:port string.
comment|// As a result port is parsed to '-1' per the Java URI conventions
block|{
literal|"jdbc:hive2://"
block|,
literal|""
block|,
literal|""
block|,
literal|"default"
block|}
block|,
block|{
literal|"jdbc:hive2://localhost:10001/default"
block|,
literal|"localhost"
block|,
literal|"10001"
block|,
literal|"default"
block|}
block|,
block|{
literal|"jdbc:hive2://localhost/notdefault"
block|,
literal|"localhost"
block|,
literal|"10000"
block|,
literal|"notdefault"
block|}
block|,
block|{
literal|"jdbc:hive2://foo:1243"
block|,
literal|"foo"
block|,
literal|"1243"
block|,
literal|"default"
block|}
block|,
comment|// http mode
block|{
literal|"jdbc:hive2://server:10002/db;user=foo;password=bar?"
operator|+
literal|"hive.server2.transport.mode=http;"
operator|+
literal|"hive.server2.thrift.http.path=hs2"
block|,
literal|"server"
block|,
literal|"10002"
block|,
literal|"db"
block|}
block|,   }
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testDriverProperties
parameter_list|()
throws|throws
name|SQLException
block|{
name|HiveDriver
name|driver
init|=
operator|new
name|HiveDriver
argument_list|()
decl_stmt|;
for|for
control|(
name|String
index|[]
name|testValues
range|:
name|URL_PROPERTIES
control|)
block|{
name|DriverPropertyInfo
index|[]
name|dpi
init|=
name|driver
operator|.
name|getPropertyInfo
argument_list|(
name|testValues
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected DriverPropertyInfo array size"
argument_list|,
literal|3
argument_list|,
name|dpi
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertDpi
argument_list|(
name|dpi
index|[
literal|0
index|]
argument_list|,
literal|"HOST"
argument_list|,
name|testValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertDpi
argument_list|(
name|dpi
index|[
literal|1
index|]
argument_list|,
literal|"PORT"
argument_list|,
name|testValues
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertDpi
argument_list|(
name|dpi
index|[
literal|2
index|]
argument_list|,
literal|"DBNAME"
argument_list|,
name|testValues
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
index|[]
index|[]
name|HTTP_URL_PROPERTIES
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"jdbc:hive2://server:10002/db;user=foo;password=bar;transportMode=http;httpPath=hs2"
block|,
literal|"server"
block|,
literal|"10002"
block|,
literal|"db"
block|,
literal|"http"
block|,
literal|"hs2"
block|}
block|,
block|{
literal|"jdbc:hive2://server:10000/testdb;user=foo;password=bar;transportMode=binary;httpPath="
block|,
literal|"server"
block|,
literal|"10000"
block|,
literal|"testdb"
block|,
literal|"binary"
block|,
literal|""
block|}
block|, }
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testParseUrlHttpMode
parameter_list|()
throws|throws
name|SQLException
throws|,
name|JdbcUriParseException
throws|,
name|ZooKeeperHiveClientException
block|{
operator|new
name|HiveDriver
argument_list|()
expr_stmt|;
for|for
control|(
name|String
index|[]
name|testValues
range|:
name|HTTP_URL_PROPERTIES
control|)
block|{
name|JdbcConnectionParams
name|params
init|=
name|Utils
operator|.
name|parseURL
argument_list|(
name|testValues
index|[
literal|0
index|]
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|params
operator|.
name|getHost
argument_list|()
argument_list|,
name|testValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|params
operator|.
name|getPort
argument_list|()
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|testValues
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|params
operator|.
name|getDbName
argument_list|()
argument_list|,
name|testValues
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|params
operator|.
name|getSessionVars
argument_list|()
operator|.
name|get
argument_list|(
literal|"transportMode"
argument_list|)
argument_list|,
name|testValues
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|params
operator|.
name|getSessionVars
argument_list|()
operator|.
name|get
argument_list|(
literal|"httpPath"
argument_list|)
argument_list|,
name|testValues
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertDpi
parameter_list|(
name|DriverPropertyInfo
name|dpi
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid DriverPropertyInfo name"
argument_list|,
name|name
argument_list|,
name|dpi
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid DriverPropertyInfo value"
argument_list|,
name|value
argument_list|,
name|dpi
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid DriverPropertyInfo required"
argument_list|,
literal|false
argument_list|,
name|dpi
operator|.
name|required
argument_list|)
expr_stmt|;
block|}
comment|/**    * validate schema generated by "set" command    * @throws SQLException    */
annotation|@
name|Test
specifier|public
name|void
name|testSetCommand
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// execute set command
name|String
name|sql
init|=
literal|"set -v"
decl_stmt|;
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
comment|// Validate resultset columns
name|ResultSetMetaData
name|md
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|md
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SET_COLUMN_NAME
argument_list|,
name|md
operator|.
name|getColumnLabel
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if there is data in the resultset
name|int
name|numLines
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|numLines
operator|++
expr_stmt|;
name|String
name|rline
init|=
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"set output must not contain hidden variables such as the metastore password:"
operator|+
name|rline
argument_list|,
name|rline
operator|.
name|contains
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREPWD
operator|.
name|varname
argument_list|)
operator|&&
operator|!
operator|(
name|rline
operator|.
name|contains
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_CONF_HIDDEN_LIST
operator|.
name|varname
argument_list|)
operator|)
argument_list|)
expr_stmt|;
comment|// the only conf allowed to have the metastore pwd keyname is the hidden list configuration
comment|// value
block|}
name|assertTrue
argument_list|(
literal|"Nothing returned by set -v"
argument_list|,
name|numLines
operator|>
literal|0
argument_list|)
expr_stmt|;
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Validate error on closed resultset    * @throws SQLException    */
annotation|@
name|Test
specifier|public
name|void
name|testPostClose
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"ResultSet is null"
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected SQLException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|res
operator|.
name|getMetaData
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected SQLException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|res
operator|.
name|setFetchSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected SQLException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{     }
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*    * The JDBC spec says when you have duplicate column names,    * the first one should be returned.    */
annotation|@
name|Test
specifier|public
name|void
name|testDuplicateColumnNameOrder
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT 1 AS a, 2 AS a from "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rs
operator|.
name|getInt
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test bad args to getXXX()    * @throws SQLException    */
annotation|@
name|Test
specifier|public
name|void
name|testOutOfBoundCols
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tableName
argument_list|)
decl_stmt|;
comment|// row 1
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|res
operator|.
name|getInt
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|res
operator|.
name|getInt
argument_list|(
literal|"zzzz"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{     }
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify selecting using builtin UDFs    * @throws SQLException    */
annotation|@
name|Test
specifier|public
name|void
name|testBuiltInUDFCol
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select c12, bin(c12) from "
operator|+
name|dataTypeTableName
operator|+
literal|" where c1=1"
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|md
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// only one result column
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnLabel
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"_c1"
argument_list|)
expr_stmt|;
comment|// verify the system generated column name
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify selecting named expression columns    * @throws SQLException    */
annotation|@
name|Test
specifier|public
name|void
name|testExprCol
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select c1+1 as col1, length(c4) as len from "
operator|+
name|dataTypeTableName
operator|+
literal|" where c1=1"
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|md
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// only one result column
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnLabel
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"col1"
argument_list|)
expr_stmt|;
comment|// verify the column name
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnLabel
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"len"
argument_list|)
expr_stmt|;
comment|// verify the column name
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * test getProcedureColumns()    * @throws SQLException    */
annotation|@
name|Test
specifier|public
name|void
name|testProcCols
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|dbmd
init|=
name|con
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dbmd
argument_list|)
expr_stmt|;
comment|// currently getProcedureColumns always returns an empty resultset for Hive
name|ResultSet
name|res
init|=
name|dbmd
operator|.
name|getProcedureColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|md
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnCount
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * test testProccedures()    * @throws SQLException    */
annotation|@
name|Test
specifier|public
name|void
name|testProccedures
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|dbmd
init|=
name|con
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dbmd
argument_list|)
expr_stmt|;
comment|// currently testProccedures always returns an empty resultset for Hive
name|ResultSet
name|res
init|=
name|dbmd
operator|.
name|getProcedures
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|md
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnCount
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * test getPrimaryKeys()    * @throws SQLException    */
annotation|@
name|Test
specifier|public
name|void
name|testPrimaryKeys
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|dbmd
init|=
name|con
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dbmd
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|dbmd
operator|.
name|getPrimaryKeys
argument_list|(
literal|null
argument_list|,
name|testDbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|md
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnCount
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * test testPrimaryKeysNotNull()    * @throws SQLException    */
annotation|@
name|Test
specifier|public
name|void
name|testPrimaryKeysNotNull
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|dbmd
init|=
name|con
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dbmd
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|dbmd
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
name|testDbName
argument_list|,
name|tableNameWithPk
argument_list|,
literal|"%"
argument_list|)
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|int
name|nullableInt
init|=
name|rs
operator|.
name|getInt
argument_list|(
literal|"NULLABLE"
argument_list|)
decl_stmt|;
name|String
name|isNullable
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"IS_NULLABLE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|nullableInt
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isNullable
argument_list|,
literal|"NO"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|nullableInt
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isNullable
argument_list|,
literal|"YES"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Unexpected column."
argument_list|)
throw|;
block|}
name|index
operator|++
expr_stmt|;
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * test getImportedKeys()    * @throws SQLException    */
annotation|@
name|Test
specifier|public
name|void
name|testImportedKeys
parameter_list|()
throws|throws
name|SQLException
block|{
name|DatabaseMetaData
name|dbmd
init|=
name|con
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dbmd
argument_list|)
expr_stmt|;
comment|// currently getImportedKeys always returns an empty resultset for Hive
name|ResultSet
name|res
init|=
name|dbmd
operator|.
name|getImportedKeys
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|md
init|=
name|res
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|md
operator|.
name|getColumnCount
argument_list|()
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * If the Driver implementation understands the URL, it will return a Connection object;    * otherwise it returns null    */
annotation|@
name|Test
specifier|public
name|void
name|testInvalidURL
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveDriver
name|driver
init|=
operator|new
name|HiveDriver
argument_list|()
decl_stmt|;
name|Connection
name|conn
init|=
name|driver
operator|.
name|connect
argument_list|(
literal|"jdbc:derby://localhost:10000/default"
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the cursor repositioning to start of resultset    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testFetchFirstQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|execFetchFirst
argument_list|(
literal|"select c4, c1 from "
operator|+
name|dataTypeTableName
operator|+
literal|" order by c1"
argument_list|,
literal|"c4"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|execFetchFirst
argument_list|(
literal|"select c4, c1 from "
operator|+
name|dataTypeTableName
operator|+
literal|" order by c1"
argument_list|,
literal|"c4"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the cursor repositioning to start of resultset from non-mr query    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testFetchFirstNonMR
parameter_list|()
throws|throws
name|Exception
block|{
name|execFetchFirst
argument_list|(
literal|"select * from "
operator|+
name|dataTypeTableName
argument_list|,
name|dataTypeTableName
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"."
operator|+
literal|"c4"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    *  Test for cursor repositioning to start of resultset for non-sql commands    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testFetchFirstSetCmds
parameter_list|()
throws|throws
name|Exception
block|{
name|execFetchFirst
argument_list|(
literal|"set -v"
argument_list|,
name|SET_COLUMN_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    *  Test for cursor repositioning to start of resultset for non-sql commands    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testFetchFirstDfsCmds
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|wareHouseDir
init|=
name|conf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
operator|.
name|varname
argument_list|)
decl_stmt|;
name|execFetchFirst
argument_list|(
literal|"dfs -ls "
operator|+
name|wareHouseDir
argument_list|,
name|DfsProcessor
operator|.
name|DFS_RESULT_HEADER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Negative Test for cursor repositioning to start of resultset    * Verify unsupported JDBC resultset attributes    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testUnsupportedFetchTypes
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|con
operator|.
name|createStatement
argument_list|(
name|ResultSet
operator|.
name|TYPE_SCROLL_SENSITIVE
argument_list|,
name|ResultSet
operator|.
name|CONCUR_READ_ONLY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"createStatement with TYPE_SCROLL_SENSITIVE should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"HYC00"
argument_list|,
name|e
operator|.
name|getSQLState
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|con
operator|.
name|createStatement
argument_list|(
name|ResultSet
operator|.
name|TYPE_SCROLL_INSENSITIVE
argument_list|,
name|ResultSet
operator|.
name|CONCUR_UPDATABLE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"createStatement with CONCUR_UPDATABLE should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"HYC00"
argument_list|,
name|e
operator|.
name|getSQLState
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Negative Test for cursor repositioning to start of resultset    * Verify unsupported JDBC resultset methods    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testFetchFirstError
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|res
operator|.
name|beforeFirst
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"beforeFirst() should fail for normal resultset"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Method not supported for TYPE_FORWARD_ONLY resultset"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Read the results locally. Then reset the read position to start and read the    * rows again verify that we get the same results next time.    * @param sqlStmt - SQL statement to execute    * @param colName - columns name to read    * @param oneRowOnly -  read and compare only one row from the resultset    * @throws Exception    */
specifier|private
name|void
name|execFetchFirst
parameter_list|(
name|String
name|sqlStmt
parameter_list|,
name|String
name|colName
parameter_list|,
name|boolean
name|oneRowOnly
parameter_list|)
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|(
name|ResultSet
operator|.
name|TYPE_SCROLL_INSENSITIVE
argument_list|,
name|ResultSet
operator|.
name|CONCUR_READ_ONLY
argument_list|)
decl_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|sqlStmt
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|isBeforeFirst
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|rowNum
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|res
operator|.
name|getString
argument_list|(
name|colName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|++
name|rowNum
argument_list|,
name|res
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|isBeforeFirst
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|oneRowOnly
condition|)
block|{
break|break;
block|}
block|}
comment|// reposition at the begining
name|res
operator|.
name|beforeFirst
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|isBeforeFirst
argument_list|()
argument_list|)
expr_stmt|;
name|rowNum
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
comment|// compare the results fetched last time
name|assertEquals
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|rowNum
operator|++
argument_list|)
argument_list|,
name|res
operator|.
name|getString
argument_list|(
name|colName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowNum
argument_list|,
name|res
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|isBeforeFirst
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|oneRowOnly
condition|)
block|{
break|break;
block|}
block|}
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShowGrant
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"grant select on table "
operator|+
name|dataTypeTableName
operator|+
literal|" to user hive_test_user"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"show grant user hive_test_user on table "
operator|+
name|dataTypeTableName
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testDbName
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dataTypeTableName
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// partition
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// column
name|assertEquals
argument_list|(
literal|"hive_test_user"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"USER"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SELECT"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|res
operator|.
name|getBoolean
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
comment|// grant option
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|res
operator|.
name|getLong
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// grantor
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShowRoleGrant
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// drop role. ignore error.
try|try
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop role role1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring error during drop role: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|execute
argument_list|(
literal|"create role role1"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"grant role role1 to user hive_test_user"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"show role grant user hive_test_user"
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"public"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"role1"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Useful for modifying outer class context from anonymous inner class    */
specifier|public
specifier|static
interface|interface
name|Holder
parameter_list|<
name|T
parameter_list|>
block|{
specifier|public
name|void
name|set
parameter_list|(
name|T
name|obj
parameter_list|)
function_decl|;
specifier|public
name|T
name|get
parameter_list|()
function_decl|;
block|}
comment|/**    *  Tests for query cancellation    */
annotation|@
name|Test
specifier|public
name|void
name|testCancelQueryNotRun
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
specifier|final
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cancel the Statement without running query ..."
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Executing query: "
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|" show databases"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCancelQueryFinished
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
specifier|final
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Executing query: "
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|" show databases"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cancel the Statement after running query ..."
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCancelQueryErrored
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Executing query: "
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"list dbs"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting SQLException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// No-op
block|}
comment|// Cancel the query
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cancel the Statement ..."
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test the cancellation of a query that is running.    * We spawn 2 threads - one running the query and    * the other attempting to cancel.    * We're using a dummy udf to simulate a query,    * that runs for a sufficiently long time.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testQueryCancel
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|udfName
init|=
name|SleepMsUDF
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Statement
name|stmt1
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt1
operator|.
name|execute
argument_list|(
literal|"create temporary function sleepMsUDF as '"
operator|+
name|udfName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|stmt1
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// Thread executing the query
name|Thread
name|tExecute
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Executing query: "
argument_list|)
expr_stmt|;
comment|// The test table has 500 rows, so total query time should be ~ 500*500ms
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select sleepMsUDF(t1.under_col, 1) as u0, t1.under_col as u1, "
operator|+
literal|"t2.under_col as u2 from "
operator|+
name|tableName
operator|+
literal|" t1 join "
operator|+
name|tableName
operator|+
literal|" t2 on t1.under_col = t2.under_col"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting SQLException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// This thread should throw an exception
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Thread cancelling the query
name|Thread
name|tCancel
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// Sleep for 100ms
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cancelling query: "
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// No-op
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|tExecute
operator|.
name|start
argument_list|()
expr_stmt|;
name|tCancel
operator|.
name|start
argument_list|()
expr_stmt|;
name|tExecute
operator|.
name|join
argument_list|()
expr_stmt|;
name|tCancel
operator|.
name|join
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryCancelTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|udfName
init|=
name|SleepMsUDF
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Statement
name|stmt1
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt1
operator|.
name|execute
argument_list|(
literal|"create temporary function sleepMsUDF as '"
operator|+
name|udfName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|stmt1
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// Thread executing the query
name|Thread
name|tExecute
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Executing query: "
argument_list|)
expr_stmt|;
comment|// The test table has 500 rows, so total query time should be ~ 500*500ms
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select sleepMsUDF(t1.under_col, 1) as u0, t1.under_col as u1, "
operator|+
literal|"t2.under_col as u2 from "
operator|+
name|tableName
operator|+
literal|" t1 join "
operator|+
name|tableName
operator|+
literal|" t2 on t1.under_col = t2.under_col"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting SQLException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// This thread should throw an exception
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Thread cancelling the query
name|Thread
name|tCancel
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// 1st Cancel
try|try
block|{
comment|// Sleep for 100ms
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cancelling query: "
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// No-op
block|}
comment|// 2nd cancel
try|try
block|{
comment|// Sleep for 5ms and cancel again
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cancelling query again: "
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// No-op
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|tExecute
operator|.
name|start
argument_list|()
expr_stmt|;
name|tCancel
operator|.
name|start
argument_list|()
expr_stmt|;
name|tExecute
operator|.
name|join
argument_list|()
expr_stmt|;
name|tCancel
operator|.
name|join
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|udfName
init|=
name|SleepMsUDF
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Statement
name|stmt1
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt1
operator|.
name|execute
argument_list|(
literal|"create temporary function sleepMsUDF as '"
operator|+
name|udfName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|stmt1
operator|.
name|close
argument_list|()
expr_stmt|;
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// Test a query where timeout kicks in
comment|// Set query timeout to 1 second
name|stmt
operator|.
name|setQueryTimeout
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Executing query: "
argument_list|)
expr_stmt|;
try|try
block|{
comment|// The test table has 500 rows, so total query time should be ~ 2500ms
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select sleepMsUDF(t1.under_col, 5) as u0, t1.under_col as u1, "
operator|+
literal|"t2.under_col as u2 from "
operator|+
name|tableName
operator|+
literal|" t1 join "
operator|+
name|tableName
operator|+
literal|" t2 on t1.under_col = t2.under_col"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting SQLTimeoutException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLTimeoutException
name|e
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Expecting SQLTimeoutException, but got SQLException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|// Test a query where timeout does not kick in. Set it to 5s;
comment|// show tables should be faster than that
name|stmt
operator|.
name|setQueryTimeout
argument_list|(
literal|5
argument_list|)
expr_stmt|;
try|try
block|{
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"show tables"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected SQLException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test the non-null value of the Yarn ATS GUID.    * We spawn 2 threads - one running the query and    * the other attempting to read the ATS GUID.    * We're using a dummy udf to simulate a query,    * that runs for a sufficiently long time.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testYarnATSGuid
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|udfName
init|=
name|SleepMsUDF
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Statement
name|stmt1
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt1
operator|.
name|execute
argument_list|(
literal|"create temporary function sleepMsUDF as '"
operator|+
name|udfName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|stmt1
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
specifier|final
name|Holder
argument_list|<
name|Boolean
argument_list|>
name|yarnATSGuidSet
init|=
operator|new
name|Holder
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|b
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|set
parameter_list|(
name|Boolean
name|b
parameter_list|)
block|{
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|this
operator|.
name|b
return|;
block|}
block|}
decl_stmt|;
comment|// Thread executing the query
name|Thread
name|tExecute
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// The test table has 500 rows, so total query time should be ~ 500*1ms
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Executing query: "
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select sleepMsUDF(t1.under_col, 1) as u0, t1.under_col as u1, "
operator|+
literal|"t2.under_col as u2 from "
operator|+
name|tableName
operator|+
literal|" t1 join "
operator|+
name|tableName
operator|+
literal|" t2 on t1.under_col = t2.under_col"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// No op
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Thread reading the ATS GUID
name|Thread
name|tGuid
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|String
name|atsGuid
init|=
operator|(
operator|(
name|HiveStatement
operator|)
name|stmt
operator|)
operator|.
name|getYarnATSGuid
argument_list|()
decl_stmt|;
if|if
condition|(
name|atsGuid
operator|!=
literal|null
condition|)
block|{
name|yarnATSGuidSet
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Yarn ATS GUID: "
operator|+
name|atsGuid
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|yarnATSGuidSet
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No Yarn ATS GUID yet"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|tExecute
operator|.
name|start
argument_list|()
expr_stmt|;
name|tGuid
operator|.
name|start
argument_list|()
expr_stmt|;
name|tExecute
operator|.
name|join
argument_list|()
expr_stmt|;
name|tGuid
operator|.
name|interrupt
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|yarnATSGuidSet
operator|.
name|get
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to set the YARN ATS Guid"
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// A udf which sleeps for some number of ms to simulate a long running query
specifier|public
specifier|static
class|class
name|SleepMsUDF
extends|extends
name|UDF
block|{
specifier|public
name|Integer
name|evaluate
parameter_list|(
specifier|final
name|Integer
name|value
parameter_list|,
specifier|final
name|Integer
name|ms
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|ms
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// No-op
block|}
return|return
name|value
return|;
block|}
block|}
comment|/**    * Loads data from a table containing non-ascii value column    * Runs a query and compares the return value    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testNonAsciiReturnValues
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nonAsciiTableName
init|=
literal|"nonAsciiTable"
decl_stmt|;
name|String
name|nonAsciiString
init|=
literal|"Garçu Kôkaku kidôtai"
decl_stmt|;
name|Path
name|nonAsciiFilePath
init|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"non_ascii_tbl.txt"
argument_list|)
decl_stmt|;
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.support.concurrency = false"
argument_list|)
expr_stmt|;
comment|// Create table
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table "
operator|+
name|nonAsciiTableName
operator|+
literal|" (key int, value string) "
operator|+
literal|"row format delimited fields terminated by '|'"
argument_list|)
expr_stmt|;
comment|// Load data
name|stmt
operator|.
name|execute
argument_list|(
literal|"load data local inpath '"
operator|+
name|nonAsciiFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|nonAsciiTableName
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select value from "
operator|+
name|nonAsciiTableName
operator|+
literal|" limit 1"
argument_list|)
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|resultValue
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|resultValue
operator|.
name|equalsIgnoreCase
argument_list|(
name|nonAsciiString
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Drop table, ignore error.
try|try
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table "
operator|+
name|nonAsciiTableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// no-op
block|}
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test getting query log method in Jdbc    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testGetQueryLog
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Prepare
name|String
index|[]
name|expectedLogs
init|=
block|{
literal|"Compiling command"
block|,
literal|"Completed compiling command"
block|,
literal|"Starting Semantic Analysis"
block|,
literal|"Semantic Analysis Completed"
block|,
literal|"Executing command"
block|,
literal|"Completed executing command"
block|}
decl_stmt|;
name|String
name|sql
init|=
literal|"select count(*) from "
operator|+
name|tableName
decl_stmt|;
comment|// Verify the fetched log (from the beginning of log file)
name|HiveStatement
name|stmt
init|=
operator|(
name|HiveStatement
operator|)
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logs
init|=
name|stmt
operator|.
name|getQueryLog
argument_list|(
literal|false
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|verifyFetchedLog
argument_list|(
name|logs
argument_list|,
name|expectedLogs
argument_list|)
expr_stmt|;
comment|// Verify the fetched log (incrementally)
specifier|final
name|HiveStatement
name|statement
init|=
operator|(
name|HiveStatement
operator|)
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|statement
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setFetchSize
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|incrementalLogs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Runnable
name|logThread
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|statement
operator|.
name|hasMoreLogs
argument_list|()
condition|)
block|{
try|try
block|{
name|incrementalLogs
operator|.
name|addAll
argument_list|(
name|statement
operator|.
name|getQueryLog
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed getQueryLog. Error message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"error in getting log thread"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Getting log thread is interrupted. Error message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"error in getting log thread"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|logThread
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|statement
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|thread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|thread
operator|.
name|join
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
comment|// fetch remaining logs
name|List
argument_list|<
name|String
argument_list|>
name|remainingLogs
decl_stmt|;
do|do
block|{
name|remainingLogs
operator|=
name|statement
operator|.
name|getQueryLog
argument_list|()
expr_stmt|;
name|incrementalLogs
operator|.
name|addAll
argument_list|(
name|remainingLogs
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|remainingLogs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
do|;
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
name|verifyFetchedLog
argument_list|(
name|incrementalLogs
argument_list|,
name|expectedLogs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test getting query log when HS2 disable logging.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testGetQueryLogOnDisabledLog
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|setStmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|setStmt
operator|.
name|execute
argument_list|(
literal|"set hive.server2.logging.operation.enabled = false"
argument_list|)
expr_stmt|;
name|String
name|sql
init|=
literal|"select count(*) from "
operator|+
name|tableName
decl_stmt|;
name|HiveStatement
name|stmt
init|=
operator|(
name|HiveStatement
operator|)
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Statement is null"
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logs
init|=
name|stmt
operator|.
name|getQueryLog
argument_list|(
literal|false
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|logs
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|setStmt
operator|.
name|execute
argument_list|(
literal|"set hive.server2.logging.operation.enabled = true"
argument_list|)
expr_stmt|;
name|setStmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifyFetchedLog
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|logs
parameter_list|,
name|String
index|[]
name|expectedLogs
parameter_list|)
block|{
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|log
range|:
name|logs
control|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
name|String
name|accumulatedLogs
init|=
name|stringBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|expectedLog
range|:
name|expectedLogs
control|)
block|{
name|assertTrue
argument_list|(
name|accumulatedLogs
operator|.
name|contains
argument_list|(
name|expectedLog
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepareSetDate
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|sql
init|=
literal|"select * from "
operator|+
name|dataTypeTableName
operator|+
literal|" where c20 = ?"
decl_stmt|;
name|PreparedStatement
name|ps
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|java
operator|.
name|sql
operator|.
name|Date
name|dtValue
init|=
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2013-01-01"
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setDate
argument_list|(
literal|1
argument_list|,
name|dtValue
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2013-01-01"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepareSetTimestamp
parameter_list|()
throws|throws
name|SQLException
throws|,
name|ParseException
block|{
name|String
name|sql
init|=
name|String
operator|.
name|format
argument_list|(
literal|"SELECT * FROM %s WHERE c17 = ?"
argument_list|,
name|dataTypeTableName
argument_list|)
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|ps
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
init|)
block|{
name|Timestamp
name|timestamp
init|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2012-04-22 09:00:00.123456789"
argument_list|)
decl_stmt|;
name|ps
operator|.
name|setTimestamp
argument_list|(
literal|1
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
comment|// Ensure we find the single row which matches our timestamp (where field 1 has value 1)
try|try
init|(
name|ResultSet
name|resultSet
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
init|)
block|{
name|assertTrue
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resultSet
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAutoCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|con
operator|.
name|clearWarnings
argument_list|()
expr_stmt|;
name|con
operator|.
name|setAutoCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|con
operator|.
name|getWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|con
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|SQLWarning
name|warning
init|=
name|con
operator|.
name|getWarnings
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|warning
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hive does not support autoCommit=false"
argument_list|,
name|warning
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|warning
operator|.
name|getNextWarning
argument_list|()
argument_list|)
expr_stmt|;
name|con
operator|.
name|clearWarnings
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setAutoCommitOnClosedConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|mycon
init|=
name|getConnection
argument_list|(
literal|""
argument_list|)
decl_stmt|;
try|try
block|{
name|mycon
operator|.
name|setAutoCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mycon
operator|.
name|close
argument_list|()
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|SQLException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"Connection is closed"
argument_list|)
expr_stmt|;
name|mycon
operator|.
name|setAutoCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|mycon
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test {@link HiveStatement#executeAsync(String)} for a select query    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testSelectExecAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveStatement
name|stmt
init|=
operator|(
name|HiveStatement
operator|)
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|testSelect
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectExecAsync2
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveStatement
name|stmt
init|=
operator|(
name|HiveStatement
operator|)
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"SET hive.driver.parallel.compilation=true"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"SET hive.server2.async.exec.async.compile=true"
argument_list|)
expr_stmt|;
name|testSelect
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectExecAsync3
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveStatement
name|stmt
init|=
operator|(
name|HiveStatement
operator|)
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"SET hive.driver.parallel.compilation=true"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"SET hive.server2.async.exec.async.compile=false"
argument_list|)
expr_stmt|;
name|testSelect
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|testSelect
parameter_list|(
name|HiveStatement
name|stmt
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// Expected row count of the join query we'll run
name|int
name|expectedCount
init|=
literal|1028
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
name|boolean
name|isResulSet
init|=
name|stmt
operator|.
name|executeAsync
argument_list|(
literal|"select t1.value as v11, "
operator|+
literal|"t2.value as v12 from "
operator|+
name|tableName
operator|+
literal|" t1 join "
operator|+
name|tableName
operator|+
literal|" t2 on t1.under_col = t2.under_col"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isResulSet
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|rs
argument_list|)
expr_stmt|;
comment|// ResultSet#next blocks until the async query is complete
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|value
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|rowCount
operator|++
expr_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|rowCount
argument_list|,
name|expectedCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link HiveStatement#executeAsync(String)} for a create table    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableExecAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveStatement
name|stmt
init|=
operator|(
name|HiveStatement
operator|)
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
literal|"testCreateTableExecAsync"
decl_stmt|;
name|boolean
name|isResulSet
init|=
name|stmt
operator|.
name|executeAsync
argument_list|(
literal|"create table "
operator|+
name|tblName
operator|+
literal|" (col1 int , col2 string)"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isResulSet
argument_list|)
expr_stmt|;
comment|// HiveStatement#getUpdateCount blocks until the async query is complete
name|stmt
operator|.
name|getUpdateCount
argument_list|()
expr_stmt|;
name|DatabaseMetaData
name|metadata
init|=
name|con
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|ResultSet
name|tablesMetadata
init|=
name|metadata
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"%"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|tblFound
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|tablesMetadata
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|tableName
init|=
name|tablesMetadata
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableName
operator|.
name|equalsIgnoreCase
argument_list|(
name|tblName
argument_list|)
condition|)
block|{
name|tblFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|tblFound
condition|)
block|{
name|fail
argument_list|(
literal|"Unable to create table using executeAsync"
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table "
operator|+
name|tblName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplErrorScenarios
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveStatement
name|stmt
init|=
operator|(
name|HiveStatement
operator|)
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
comment|// source of replication not set
name|stmt
operator|.
name|execute
argument_list|(
literal|"repl dump default"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getErrorCode
argument_list|()
operator|==
name|ErrorMsg
operator|.
name|REPL_DATABASE_IS_NOT_SOURCE_OF_REPLICATION
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// invalid load path
name|stmt
operator|.
name|execute
argument_list|(
literal|"repl load default1 from '/tmp/junk'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getErrorCode
argument_list|()
operator|==
name|ErrorMsg
operator|.
name|REPL_LOAD_PATH_NOT_FOUND
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test {@link HiveStatement#executeAsync(String)} for an insert overwrite into a table    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testInsertOverwriteExecAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveStatement
name|stmt
init|=
operator|(
name|HiveStatement
operator|)
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|testInsertOverwrite
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertOverwriteExecAsync2
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveStatement
name|stmt
init|=
operator|(
name|HiveStatement
operator|)
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"SET hive.driver.parallel.compilation=true"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"SET hive.server2.async.exec.async.compile=true"
argument_list|)
expr_stmt|;
name|testInsertOverwrite
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertOverwriteExecAsync3
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveStatement
name|stmt
init|=
operator|(
name|HiveStatement
operator|)
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"SET hive.driver.parallel.compilation=true"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"SET hive.server2.async.exec.async.compile=false"
argument_list|)
expr_stmt|;
name|testInsertOverwrite
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|testInsertOverwrite
parameter_list|(
name|HiveStatement
name|stmt
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|tblName
init|=
literal|"testInsertOverwriteExecAsync"
decl_stmt|;
try|try
block|{
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table "
operator|+
name|tblName
operator|+
literal|" (col1 int , col2 string)"
argument_list|)
expr_stmt|;
name|boolean
name|isResulSet
init|=
name|stmt
operator|.
name|executeAsync
argument_list|(
literal|"insert overwrite table "
operator|+
name|tblName
operator|+
literal|" select * from "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isResulSet
argument_list|)
expr_stmt|;
comment|// HiveStatement#getUpdateCount blocks until the async query is complete
name|rowCount
operator|=
name|stmt
operator|.
name|getUpdateCount
argument_list|()
expr_stmt|;
comment|// Read from the new table
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select * from "
operator|+
name|tblName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rs
argument_list|)
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|value
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|dataFileRowCount
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop table "
operator|+
name|tblName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetQueryId
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveStatement
name|stmt
init|=
operator|(
name|HiveStatement
operator|)
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|HiveStatement
name|stmt1
init|=
operator|(
name|HiveStatement
operator|)
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// Returns null if no query is running.
name|String
name|queryId
init|=
name|stmt
operator|.
name|getQueryId
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|queryId
operator|==
literal|null
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeAsync
argument_list|(
literal|"create database query_id_test with dbproperties ('repl.source.for' = '1, 2, 3')"
argument_list|)
expr_stmt|;
name|queryId
operator|=
name|stmt
operator|.
name|getQueryId
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|queryId
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|getUpdateCount
argument_list|()
expr_stmt|;
name|stmt1
operator|.
name|executeAsync
argument_list|(
literal|"repl status query_id_test with ('hive.query.id' = 'hiveCustomTag')"
argument_list|)
expr_stmt|;
name|String
name|queryId1
init|=
name|stmt1
operator|.
name|getQueryId
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"hiveCustomTag"
operator|.
name|equals
argument_list|(
name|queryId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queryId
operator|.
name|equals
argument_list|(
name|queryId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queryId1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|stmt1
operator|.
name|getUpdateCount
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|executeAsync
argument_list|(
literal|"select count(*) from "
operator|+
name|dataTypeTableName
argument_list|)
expr_stmt|;
name|queryId
operator|=
name|stmt
operator|.
name|getQueryId
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"hiveCustomTag"
operator|.
name|equals
argument_list|(
name|queryId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queryId
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queryId
operator|.
name|equals
argument_list|(
name|queryId1
argument_list|)
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|getUpdateCount
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop database query_id_test"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Test that opening a JDBC connection to a non-existent database throws a HiveSQLException
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HiveSQLException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testConnectInvalidDatabase
parameter_list|()
throws|throws
name|SQLException
block|{
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hive2:///databasedoesnotexist"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

