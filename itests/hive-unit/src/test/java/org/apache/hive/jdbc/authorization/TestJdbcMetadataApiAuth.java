begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|authorization
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|HiveAuthenticationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|SessionStateUserAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthorizerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzPluginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveAuthzSessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveMetastoreClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HiveOperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|HivePrivilegeObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|sqlstd
operator|.
name|SQLStdHiveAccessControllerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|plugin
operator|.
name|sqlstd
operator|.
name|SQLStdHiveAuthorizationValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Verify validation of jdbc metadata methods is happening  */
end_comment

begin_class
specifier|public
class|class
name|TestJdbcMetadataApiAuth
block|{
specifier|private
specifier|static
name|MiniHS2
name|miniHS2
init|=
literal|null
decl_stmt|;
comment|/**    * HiveAuthorizationValidator that allows/disallows actions based on    * allowActions boolean value    */
specifier|public
specifier|static
class|class
name|TestAuthValidator
extends|extends
name|SQLStdHiveAuthorizationValidator
block|{
specifier|public
specifier|static
name|boolean
name|allowActions
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DENIED_ERR
init|=
literal|"Actions not allowed because of allowActions=false"
decl_stmt|;
specifier|public
name|TestAuthValidator
parameter_list|(
name|HiveMetastoreClientFactory
name|metastoreClientFactory
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|HiveAuthenticationProvider
name|authenticator
parameter_list|,
name|SQLStdHiveAccessControllerWrapper
name|privilegeManager
parameter_list|,
name|HiveAuthzSessionContext
name|ctx
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
name|super
argument_list|(
name|metastoreClientFactory
argument_list|,
name|conf
argument_list|,
name|authenticator
argument_list|,
name|privilegeManager
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkPrivileges
parameter_list|(
name|HiveOperationType
name|hiveOpType
parameter_list|,
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|inputHObjs
parameter_list|,
name|List
argument_list|<
name|HivePrivilegeObject
argument_list|>
name|outputHObjs
parameter_list|,
name|HiveAuthzContext
name|context
parameter_list|)
throws|throws
name|HiveAuthzPluginException
throws|,
name|HiveAccessControlException
block|{
if|if
condition|(
operator|!
name|allowActions
condition|)
block|{
throw|throw
operator|new
name|HiveAccessControlException
argument_list|(
name|DENIED_ERR
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Factory that uses TestAuthValidator    */
specifier|public
specifier|static
class|class
name|TestAuthorizerFactory
implements|implements
name|HiveAuthorizerFactory
block|{
annotation|@
name|Override
specifier|public
name|HiveAuthorizer
name|createHiveAuthorizer
parameter_list|(
name|HiveMetastoreClientFactory
name|metastoreClientFactory
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|HiveAuthenticationProvider
name|authenticator
parameter_list|,
name|HiveAuthzSessionContext
name|ctx
parameter_list|)
throws|throws
name|HiveAuthzPluginException
block|{
name|SQLStdHiveAccessControllerWrapper
name|privilegeManager
init|=
operator|new
name|SQLStdHiveAccessControllerWrapper
argument_list|(
name|metastoreClientFactory
argument_list|,
name|conf
argument_list|,
name|authenticator
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
return|return
operator|new
name|HiveAuthorizerImpl
argument_list|(
name|privilegeManager
argument_list|,
operator|new
name|TestAuthValidator
argument_list|(
name|metastoreClientFactory
argument_list|,
name|conf
argument_list|,
name|authenticator
argument_list|,
name|privilegeManager
argument_list|,
name|ctx
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
operator|.
name|forName
argument_list|(
name|MiniHS2
operator|.
name|getJdbcDriverName
argument_list|()
argument_list|)
expr_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
name|TestAuthorizerFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_AUTHENTICATOR_MANAGER
argument_list|,
name|SessionStateUserAuthenticator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_ENABLE_DOAS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|miniHS2
operator|=
operator|new
name|MiniHS2
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|TestAuthValidator
operator|.
name|allowActions
operator|=
literal|true
expr_stmt|;
comment|// set up a db and table
name|String
name|tableName1
init|=
name|TestJdbcMetadataApiAuth
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"_tab"
decl_stmt|;
name|String
name|dbName1
init|=
name|TestJdbcMetadataApiAuth
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"_db"
decl_stmt|;
comment|// create connection as user1
name|Connection
name|hs2Conn
init|=
name|getConnection
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|Statement
name|stmt
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// create table, db
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table "
operator|+
name|tableName1
operator|+
literal|"(i int) "
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create database "
operator|+
name|dbName1
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterTest
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|miniHS2
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Call the HS2 metadata api's with authorizer allowing those calls    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMetaApiAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAuthValidator
operator|.
name|allowActions
operator|=
literal|true
expr_stmt|;
name|Connection
name|hs2Conn
init|=
name|getConnection
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|DatabaseMetaData
name|dbmetadata
init|=
name|hs2Conn
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|ResultSet
name|res
decl_stmt|;
name|res
operator|=
name|dbmetadata
operator|.
name|getCatalogs
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
name|dbmetadata
operator|.
name|getSchemas
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
name|dbmetadata
operator|.
name|getTypeInfo
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
name|dbmetadata
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|"default"
argument_list|,
literal|"t%"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
name|dbmetadata
operator|.
name|getTableTypes
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
name|dbmetadata
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
literal|"default"
argument_list|,
literal|"nosuchtable"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
name|dbmetadata
operator|.
name|getFunctions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"trim"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Call the HS2 metadata api's with authorizer disallowing those calls    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMetaApiDisAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|TestAuthValidator
operator|.
name|allowActions
operator|=
literal|false
expr_stmt|;
name|Connection
name|hs2Conn
init|=
name|getConnection
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|DatabaseMetaData
name|dbmetadata
init|=
name|hs2Conn
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
try|try
block|{
name|dbmetadata
operator|.
name|getCatalogs
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"HiveAccessControlException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertErrorContains
argument_list|(
name|e
argument_list|,
name|TestAuthValidator
operator|.
name|DENIED_ERR
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"HiveAccessControlException expected"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dbmetadata
operator|.
name|getSchemas
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"HiveAccessControlException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertErrorContains
argument_list|(
name|e
argument_list|,
name|TestAuthValidator
operator|.
name|DENIED_ERR
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"HiveAccessControlException expected"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dbmetadata
operator|.
name|getTypeInfo
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"HiveAccessControlException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertErrorContains
argument_list|(
name|e
argument_list|,
name|TestAuthValidator
operator|.
name|DENIED_ERR
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"HiveAccessControlException expected"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dbmetadata
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|"default"
argument_list|,
literal|"t%"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"HiveAccessControlException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertErrorContains
argument_list|(
name|e
argument_list|,
name|TestAuthValidator
operator|.
name|DENIED_ERR
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"HiveAccessControlException expected"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dbmetadata
operator|.
name|getTableTypes
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"HiveAccessControlException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertErrorContains
argument_list|(
name|e
argument_list|,
name|TestAuthValidator
operator|.
name|DENIED_ERR
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"HiveAccessControlException expected"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dbmetadata
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
literal|"default"
argument_list|,
literal|"nosuchtable"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"HiveAccessControlException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertErrorContains
argument_list|(
name|e
argument_list|,
name|TestAuthValidator
operator|.
name|DENIED_ERR
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"HiveAccessControlException expected"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dbmetadata
operator|.
name|getFunctions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"trim"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"HiveAccessControlException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|assertErrorContains
argument_list|(
name|e
argument_list|,
name|TestAuthValidator
operator|.
name|DENIED_ERR
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"HiveAccessControlException expected"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertErrorContains
parameter_list|(
name|SQLException
name|e
parameter_list|,
name|String
name|deniedErr
parameter_list|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|deniedErr
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Exception message ["
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"] does not contain ["
operator|+
name|deniedErr
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Connection
name|getConnection
parameter_list|(
name|String
name|userName
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
argument_list|,
name|userName
argument_list|,
literal|"bar"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

