begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|FieldDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapBaseInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapArrowRowInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * TestJdbcWithMiniLlap for Arrow format  */
end_comment

begin_class
specifier|public
class|class
name|TestJdbcWithMiniLlapArrow
extends|extends
name|BaseJdbcWithMiniLlap
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestJdbcWithMiniLlapArrow
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|MiniHS2
name|miniHS2
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|tableName
init|=
literal|"testJdbcMinihs2Tbl"
decl_stmt|;
specifier|private
specifier|static
name|String
name|dataFileDir
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|testDbName
init|=
literal|"testJdbcMinihs2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|tag
init|=
literal|"mytag"
decl_stmt|;
specifier|private
specifier|static
class|class
name|ExceptionHolder
block|{
name|Throwable
name|throwable
decl_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
name|defaultConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|LLAP_OUTPUT_FORMAT_ARROW
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_AUTHENTICATOR_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security"
operator|+
literal|".SessionStateUserAuthenticator"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|USERS_IN_ADMIN_ROLE
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_SQL_STD_AUTH_CONFIG_WHITELIST_APPEND
argument_list|,
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
operator|+
literal|"|"
operator|+
name|ConfVars
operator|.
name|HIVE_SERVER2_ENABLE_DOAS
operator|.
name|varname
argument_list|)
expr_stmt|;
name|MiniHS2
operator|.
name|cleanupLocalDir
argument_list|()
expr_stmt|;
name|miniHS2
operator|=
name|BaseJdbcWithMiniLlap
operator|.
name|beforeTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dataFileDir
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"c:"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Connection
name|conDefault
init|=
name|BaseJdbcWithMiniLlap
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|Statement
name|stmt
init|=
name|conDefault
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|testDbName
operator|+
literal|"."
operator|+
name|tableName
decl_stmt|;
name|Path
name|dataFilePath
init|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"kv1.txt"
argument_list|)
decl_stmt|;
name|String
name|udfName
init|=
name|SleepMsUDF
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop database if exists "
operator|+
name|testDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create database "
operator|+
name|testDbName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set role admin"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"dfs -put "
operator|+
name|dataFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
literal|"kv1.txt"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"use "
operator|+
name|testDbName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table "
operator|+
name|tblName
operator|+
literal|" (int_col int, value string) "
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"load data inpath 'kv1.txt' into table "
operator|+
name|tblName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create function sleepMsUDF as '"
operator|+
name|udfName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"grant select on table "
operator|+
name|tblName
operator|+
literal|" to role public"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|conDefault
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterTest
parameter_list|()
block|{
if|if
condition|(
name|miniHS2
operator|!=
literal|null
operator|&&
name|miniHS2
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|InputFormat
argument_list|<
name|NullWritable
argument_list|,
name|Row
argument_list|>
name|getInputFormat
parameter_list|()
block|{
comment|//For unit testing, no harm in hard-coding allocator ceiling to LONG.MAX_VALUE
return|return
operator|new
name|LlapArrowRowInputFormat
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
comment|// Currently MAP type is not supported. Add it back when Arrow 1.0 is released.
comment|// See: SPARK-21187
annotation|@
name|Override
specifier|public
name|void
name|testDataTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|createDataTypesTable
argument_list|(
literal|"datatypes"
argument_list|)
expr_stmt|;
name|RowCollector2
name|rowCollector
init|=
operator|new
name|RowCollector2
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"select * from datatypes"
decl_stmt|;
name|int
name|rowCount
init|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
comment|// Verify schema
name|String
index|[]
index|[]
name|colNameTypes
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"datatypes.c1"
block|,
literal|"int"
block|}
block|,
block|{
literal|"datatypes.c2"
block|,
literal|"boolean"
block|}
block|,
block|{
literal|"datatypes.c3"
block|,
literal|"double"
block|}
block|,
block|{
literal|"datatypes.c4"
block|,
literal|"string"
block|}
block|,
block|{
literal|"datatypes.c5"
block|,
literal|"array<int>"
block|}
block|,
block|{
literal|"datatypes.c6"
block|,
literal|"map<int,string>"
block|}
block|,
block|{
literal|"datatypes.c7"
block|,
literal|"map<string,string>"
block|}
block|,
block|{
literal|"datatypes.c8"
block|,
literal|"struct<r:string,s:int,t:double>"
block|}
block|,
block|{
literal|"datatypes.c9"
block|,
literal|"tinyint"
block|}
block|,
block|{
literal|"datatypes.c10"
block|,
literal|"smallint"
block|}
block|,
block|{
literal|"datatypes.c11"
block|,
literal|"float"
block|}
block|,
block|{
literal|"datatypes.c12"
block|,
literal|"bigint"
block|}
block|,
block|{
literal|"datatypes.c13"
block|,
literal|"array<array<string>>"
block|}
block|,
block|{
literal|"datatypes.c14"
block|,
literal|"map<int,map<int,int>>"
block|}
block|,
block|{
literal|"datatypes.c15"
block|,
literal|"struct<r:int,s:struct<a:int,b:string>>"
block|}
block|,
block|{
literal|"datatypes.c16"
block|,
literal|"array<struct<m:map<string,string>,n:int>>"
block|}
block|,
block|{
literal|"datatypes.c17"
block|,
literal|"timestamp"
block|}
block|,
block|{
literal|"datatypes.c18"
block|,
literal|"decimal(16,7)"
block|}
block|,
block|{
literal|"datatypes.c19"
block|,
literal|"binary"
block|}
block|,
block|{
literal|"datatypes.c20"
block|,
literal|"date"
block|}
block|,
block|{
literal|"datatypes.c21"
block|,
literal|"varchar(20)"
block|}
block|,
block|{
literal|"datatypes.c22"
block|,
literal|"char(15)"
block|}
block|,
block|{
literal|"datatypes.c23"
block|,
literal|"binary"
block|}
block|,     }
decl_stmt|;
name|FieldDesc
name|fieldDesc
decl_stmt|;
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|rowCollector
operator|.
name|numColumns
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|rowCollector
operator|.
name|numColumns
condition|;
operator|++
name|idx
control|)
block|{
name|fieldDesc
operator|=
name|rowCollector
operator|.
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ColName idx="
operator|+
name|idx
argument_list|,
name|colNameTypes
index|[
name|idx
index|]
index|[
literal|0
index|]
argument_list|,
name|fieldDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ColType idx="
operator|+
name|idx
argument_list|,
name|colNameTypes
index|[
name|idx
index|]
index|[
literal|1
index|]
argument_list|,
name|fieldDesc
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// First row is all nulls
name|Object
index|[]
name|rowValues
init|=
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|rowCollector
operator|.
name|numColumns
condition|;
operator|++
name|idx
control|)
block|{
name|assertEquals
argument_list|(
literal|"idx="
operator|+
name|idx
argument_list|,
literal|null
argument_list|,
name|rowValues
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Second Row
name|rowValues
operator|=
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|rowValues
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|rowValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
operator|-
literal|1.1d
argument_list|)
argument_list|,
name|rowValues
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|rowValues
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|c5Value
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|4
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c5Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Map<?,?> c6Value = (Map<?,?>) rowValues[5];
comment|//assertEquals(0, c6Value.size());
comment|//Map<?,?> c7Value = (Map<?,?>) rowValues[6];
comment|//assertEquals(0, c7Value.size());
name|List
argument_list|<
name|?
argument_list|>
name|c8Value
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|7
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|c8Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|c8Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|c8Value
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|rowValues
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|rowValues
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
operator|-
literal|1.0f
argument_list|)
argument_list|,
name|rowValues
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|,
name|rowValues
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|c13Value
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|12
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c13Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Map<?,?> c14Value = (Map<?,?>) rowValues[13];
comment|//assertEquals(0, c14Value.size());
name|List
argument_list|<
name|?
argument_list|>
name|c15Value
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|14
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|c15Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|c15Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//List<?> c16Value = (List<?>) rowValues[15];
comment|//assertEquals(0, c16Value.size());
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|16
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|17
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|18
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|19
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|20
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|21
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|22
index|]
argument_list|)
expr_stmt|;
comment|// Third row
name|rowValues
operator|=
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|rowValues
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|rowValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|1.1d
argument_list|)
argument_list|,
name|rowValues
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|rowValues
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|c5Value
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|4
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c5Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|c5Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|c5Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//c6Value = (Map<?,?>) rowValues[5];
comment|//assertEquals(2, c6Value.size());
comment|//assertEquals("x", c6Value.get(Integer.valueOf(1)));
comment|//assertEquals("y", c6Value.get(Integer.valueOf(2)));
comment|//c7Value = (Map<?,?>) rowValues[6];
comment|//assertEquals(1, c7Value.size());
comment|//assertEquals("v", c7Value.get("k"));
name|c8Value
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|7
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|c8Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|9
argument_list|)
argument_list|,
name|c8Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|2.2d
argument_list|)
argument_list|,
name|c8Value
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|,
name|rowValues
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|,
name|rowValues
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|1.0f
argument_list|)
argument_list|,
name|rowValues
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|1l
argument_list|)
argument_list|,
name|rowValues
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|c13Value
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|12
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c13Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|listVal
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|c13Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|listVal
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|c13Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//c14Value = (Map<?,?>) rowValues[13];
comment|//assertEquals(2, c14Value.size());
comment|//Map<?,?> mapVal = (Map<?,?>) c14Value.get(Integer.valueOf(1));
comment|//assertEquals(2, mapVal.size());
comment|//assertEquals(Integer.valueOf(12), mapVal.get(Integer.valueOf(11)));
comment|//assertEquals(Integer.valueOf(14), mapVal.get(Integer.valueOf(13)));
comment|//mapVal = (Map<?,?>) c14Value.get(Integer.valueOf(2));
comment|//assertEquals(1, mapVal.size());
comment|//assertEquals(Integer.valueOf(22), mapVal.get(Integer.valueOf(21)));
name|c15Value
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|14
index|]
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|c15Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|listVal
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|c15Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|listVal
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//c16Value = (List<?>) rowValues[15];
comment|//assertEquals(2, c16Value.size());
comment|//listVal = (List<?>) c16Value.get(0);
comment|//assertEquals(2, listVal.size());
comment|//mapVal = (Map<?,?>) listVal.get(0);
comment|//assertEquals(0, mapVal.size());
comment|//assertEquals(Integer.valueOf(1), listVal.get(1));
comment|//listVal = (List<?>) c16Value.get(1);
comment|//mapVal = (Map<?,?>) listVal.get(0);
comment|//assertEquals(2, mapVal.size());
comment|//assertEquals("b", mapVal.get("a"));
comment|//assertEquals("d", mapVal.get("c"));
comment|//assertEquals(Integer.valueOf(2), listVal.get(1));
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2012-04-22 09:00:00.123456"
argument_list|)
argument_list|,
name|rowValues
index|[
literal|16
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"123456789.123456"
argument_list|)
argument_list|,
name|rowValues
index|[
literal|17
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"abcd"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|rowValues
index|[
literal|18
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2013-01-01"
argument_list|)
argument_list|,
name|rowValues
index|[
literal|19
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc123"
argument_list|,
name|rowValues
index|[
literal|20
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc123         "
argument_list|,
name|rowValues
index|[
literal|21
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"X'01FF'"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|rowValues
index|[
literal|22
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * SleepMsUDF    */
specifier|public
specifier|static
class|class
name|SleepMsUDF
extends|extends
name|UDF
block|{
specifier|public
name|Integer
name|evaluate
parameter_list|(
name|int
name|value
parameter_list|,
name|int
name|ms
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|ms
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// No-op
block|}
return|return
name|value
return|;
block|}
block|}
comment|/**    * Test CLI kill command of a query that is running.    * We spawn 2 threads - one running the query and    * the other attempting to cancel.    * We're using a dummy udf to simulate a query,    * that runs for a sufficiently long time.    * @throws Exception    */
specifier|private
name|void
name|testKillQueryInternal
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|killUser
parameter_list|,
name|boolean
name|useTag
parameter_list|,
specifier|final
name|ExceptionHolder
name|stmtHolder
parameter_list|,
specifier|final
name|ExceptionHolder
name|tKillHolder
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|con1
init|=
name|BaseJdbcWithMiniLlap
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|testDbName
argument_list|)
argument_list|,
name|user
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|Connection
name|con2
init|=
name|BaseJdbcWithMiniLlap
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|testDbName
argument_list|)
argument_list|,
name|killUser
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
specifier|final
name|Statement
name|stmt2
init|=
name|con2
operator|.
name|createStatement
argument_list|()
decl_stmt|;
specifier|final
name|HiveStatement
name|stmt
init|=
operator|(
name|HiveStatement
operator|)
name|con1
operator|.
name|createStatement
argument_list|()
decl_stmt|;
specifier|final
name|StringBuffer
name|stmtQueryId
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
comment|// Thread executing the query
name|Thread
name|tExecute
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Executing query: "
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.llap.execution.mode = none"
argument_list|)
expr_stmt|;
if|if
condition|(
name|useTag
condition|)
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"set hive.query.tag = "
operator|+
name|tag
argument_list|)
expr_stmt|;
block|}
comment|// The test table has 500 rows, so total query time should be ~ 500*500ms
name|stmt
operator|.
name|executeAsync
argument_list|(
literal|"select sleepMsUDF(t1.int_col, 100), t1.int_col, t2.int_col "
operator|+
literal|"from "
operator|+
name|tableName
operator|+
literal|" t1 join "
operator|+
name|tableName
operator|+
literal|" t2 on t1.int_col = t2.int_col"
argument_list|)
expr_stmt|;
name|stmtQueryId
operator|.
name|append
argument_list|(
name|stmt
operator|.
name|getQueryId
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|getUpdateCount
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|stmtHolder
operator|.
name|throwable
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|tExecute
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for other thread to create the stmt handle
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
operator|<
literal|10
condition|)
block|{
try|try
block|{
name|tKillHolder
operator|.
name|throwable
operator|=
literal|null
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|String
name|queryId
decl_stmt|;
if|if
condition|(
name|useTag
condition|)
block|{
name|queryId
operator|=
name|tag
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|stmtQueryId
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|queryId
operator|=
name|stmtQueryId
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Killing query: "
operator|+
name|queryId
argument_list|)
expr_stmt|;
if|if
condition|(
name|killUser
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
condition|)
block|{
name|stmt2
operator|.
name|execute
argument_list|(
literal|"set role admin"
argument_list|)
expr_stmt|;
block|}
name|stmt2
operator|.
name|execute
argument_list|(
literal|"kill query '"
operator|+
name|queryId
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|stmt2
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|count
operator|++
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception when kill query"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|tKillHolder
operator|.
name|throwable
operator|=
name|e
expr_stmt|;
block|}
block|}
name|tExecute
operator|.
name|join
argument_list|()
expr_stmt|;
try|try
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|con1
operator|.
name|close
argument_list|()
expr_stmt|;
name|con2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore error
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception when close stmt and con"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Override
specifier|public
name|void
name|testKillQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testKillQueryById
argument_list|()
expr_stmt|;
name|testKillQueryByTagNegative
argument_list|()
expr_stmt|;
name|testKillQueryByTagAdmin
argument_list|()
expr_stmt|;
name|testKillQueryByTagOwner
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testKillQueryById
parameter_list|()
throws|throws
name|Exception
block|{
name|ExceptionHolder
name|tExecuteHolder
init|=
operator|new
name|ExceptionHolder
argument_list|()
decl_stmt|;
name|ExceptionHolder
name|tKillHolder
init|=
operator|new
name|ExceptionHolder
argument_list|()
decl_stmt|;
name|testKillQueryInternal
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|false
argument_list|,
name|tExecuteHolder
argument_list|,
name|tKillHolder
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"tExecute"
argument_list|,
name|tExecuteHolder
operator|.
name|throwable
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"tCancel"
argument_list|,
name|tKillHolder
operator|.
name|throwable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testKillQueryByTagNegative
parameter_list|()
throws|throws
name|Exception
block|{
name|ExceptionHolder
name|tExecuteHolder
init|=
operator|new
name|ExceptionHolder
argument_list|()
decl_stmt|;
name|ExceptionHolder
name|tKillHolder
init|=
operator|new
name|ExceptionHolder
argument_list|()
decl_stmt|;
name|testKillQueryInternal
argument_list|(
literal|"user1"
argument_list|,
literal|"user2"
argument_list|,
literal|true
argument_list|,
name|tExecuteHolder
argument_list|,
name|tKillHolder
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"tExecute"
argument_list|,
name|tExecuteHolder
operator|.
name|throwable
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"tCancel"
argument_list|,
name|tKillHolder
operator|.
name|throwable
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tKillHolder
operator|.
name|throwable
operator|.
name|getMessage
argument_list|()
argument_list|,
name|tKillHolder
operator|.
name|throwable
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"No privilege"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testKillQueryByTagAdmin
parameter_list|()
throws|throws
name|Exception
block|{
name|ExceptionHolder
name|tExecuteHolder
init|=
operator|new
name|ExceptionHolder
argument_list|()
decl_stmt|;
name|ExceptionHolder
name|tKillHolder
init|=
operator|new
name|ExceptionHolder
argument_list|()
decl_stmt|;
name|testKillQueryInternal
argument_list|(
literal|"user1"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|true
argument_list|,
name|tExecuteHolder
argument_list|,
name|tKillHolder
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"tExecute"
argument_list|,
name|tExecuteHolder
operator|.
name|throwable
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"tCancel"
argument_list|,
name|tKillHolder
operator|.
name|throwable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testKillQueryByTagOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|ExceptionHolder
name|tExecuteHolder
init|=
operator|new
name|ExceptionHolder
argument_list|()
decl_stmt|;
name|ExceptionHolder
name|tKillHolder
init|=
operator|new
name|ExceptionHolder
argument_list|()
decl_stmt|;
name|testKillQueryInternal
argument_list|(
literal|"user1"
argument_list|,
literal|"user1"
argument_list|,
literal|true
argument_list|,
name|tExecuteHolder
argument_list|,
name|tKillHolder
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"tExecute"
argument_list|,
name|tExecuteHolder
operator|.
name|throwable
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"tCancel"
argument_list|,
name|tKillHolder
operator|.
name|throwable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentAddAndCloseAndCloseAllConnections
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestTable
argument_list|(
literal|"testtab1"
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|String
name|pwd
init|=
name|user
decl_stmt|;
name|InputFormat
argument_list|<
name|NullWritable
argument_list|,
name|Row
argument_list|>
name|inputFormat
init|=
name|getInputFormat
argument_list|()
decl_stmt|;
comment|// Get splits
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|URL_KEY
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|USER_KEY
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|PWD_KEY
argument_list|,
name|pwd
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|QUERY_KEY
argument_list|,
literal|"select * from testtab1"
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|handleIds
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|20
argument_list|)
operator|.
name|boxed
argument_list|()
operator|.
name|map
argument_list|(
name|i
lambda|->
literal|"handleId-"
operator|+
name|i
argument_list|)
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
specifier|final
name|ExceptionHolder
name|exceptionHolder
init|=
operator|new
name|ExceptionHolder
argument_list|()
decl_stmt|;
comment|// addConnThread thread will keep adding connections
comment|// closeConnThread thread tries close connection(s) associated to handleIds, one at a time
comment|// closeAllConnThread thread tries to close All at once.
specifier|final
name|int
name|numIterations
init|=
literal|100
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|addConnIterator
init|=
name|Iterables
operator|.
name|cycle
argument_list|(
name|handleIds
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Thread
name|addConnThread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
name|executeNTimes
argument_list|(
parameter_list|()
lambda|->
block|{
name|String
name|handleId
operator|=
name|addConnIterator
operator|.
name|next
argument_list|()
argument_list|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|HANDLE_ID
argument_list|,
name|handleId
argument_list|)
argument_list|;
name|InputSplit
index|[]
name|splits
operator|=
name|inputFormat
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
literal|1
argument_list|)
argument_list|;
name|assertTrue
argument_list|(
name|splits
operator|.
name|length
operator|>
literal|0
argument_list|)
argument_list|;       return
literal|null
argument_list|;
block|}
operator|,
name|numIterations
operator|,
literal|1
operator|,
name|exceptionHolder
block|)
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_decl_stmt
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|removeConnIterator
init|=
name|Iterables
operator|.
name|cycle
argument_list|(
name|handleIds
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Thread
name|closeConnThread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
name|executeNTimes
argument_list|(
parameter_list|()
lambda|->
block|{
name|String
name|handleId
operator|=
name|removeConnIterator
operator|.
name|next
argument_list|()
argument_list|;
name|LlapBaseInputFormat
operator|.
name|close
argument_list|(
name|handleId
argument_list|)
argument_list|;       return
literal|null
argument_list|;
end_decl_stmt

begin_expr_stmt
unit|},
name|numIterations
operator|,
literal|2
operator|,
name|exceptionHolder
end_expr_stmt

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|Thread
name|closeAllConnThread
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
name|executeNTimes
argument_list|(
parameter_list|()
lambda|->
block|{
name|LlapBaseInputFormat
operator|.
name|closeAll
argument_list|()
argument_list|;       return
literal|null
argument_list|;
end_decl_stmt

begin_expr_stmt
unit|},
name|numIterations
operator|,
literal|5
operator|,
name|exceptionHolder
end_expr_stmt

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|addConnThread
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|closeConnThread
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|closeAllConnThread
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|closeAllConnThread
operator|.
name|join
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|closeConnThread
operator|.
name|join
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|addConnThread
operator|.
name|join
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Throwable
name|throwable
init|=
name|exceptionHolder
operator|.
name|throwable
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertNull
argument_list|(
literal|"Something went wrong while testAddCloseCloseAllConnections"
operator|+
name|throwable
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    private
name|void
name|executeNTimes
parameter_list|(
name|Callable
name|action
parameter_list|,
name|int
name|noOfTimes
parameter_list|,
name|long
name|intervalMillis
parameter_list|,
name|ExceptionHolder
name|exceptionHolder
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noOfTimes
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|action
operator|.
name|call
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|intervalMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// populate first exception only
if|if
condition|(
name|exceptionHolder
operator|.
name|throwable
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|exceptionHolder
operator|.
name|throwable
operator|==
literal|null
condition|)
block|{
name|exceptionHolder
operator|.
name|throwable
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_function

unit|}
end_unit

