begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|FieldDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapBaseInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapInputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
operator|.
name|MiniClusterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|TestJdbcGenericUDTFGetSplits
block|{
specifier|protected
specifier|static
name|MiniHS2
name|miniHS2
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
name|String
name|dataFileDir
decl_stmt|;
specifier|static
name|Path
name|kvDataFilePath
decl_stmt|;
specifier|protected
specifier|static
name|String
name|tableName
init|=
literal|"testtab1"
decl_stmt|;
specifier|protected
specifier|static
name|HiveConf
name|conf
init|=
literal|null
decl_stmt|;
specifier|protected
name|Connection
name|hs2Conn
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
operator|.
name|forName
argument_list|(
name|MiniHS2
operator|.
name|getJdbcDriverName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|confDir
init|=
literal|"../../data/conf/llap/"
decl_stmt|;
name|HiveConf
operator|.
name|setHiveSiteLocation
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file://"
operator|+
operator|new
name|File
argument_list|(
name|confDir
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/hive-site.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setting hive-site: "
operator|+
name|HiveConf
operator|.
name|getHiveSiteLocation
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_ENABLE_DOAS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TEZ_DEFAULT_QUEUES
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_TRIGGER_VALIDATION_INTERVAL
argument_list|,
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_TEZ_INITIALIZE_DEFAULT_SESSIONS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|TEZ_EXEC_SUMMARY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_STRICT_CHECKS_CARTESIAN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|LLAP_IO_MEMORY_MODE
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|LLAP_EXTERNAL_SPLITS_TEMP_TABLE_STORAGE_FORMAT
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file://"
operator|+
operator|new
name|File
argument_list|(
name|confDir
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/tez-site.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|miniHS2
operator|=
operator|new
name|MiniHS2
argument_list|(
name|conf
argument_list|,
name|MiniClusterType
operator|.
name|LLAP
argument_list|)
expr_stmt|;
name|dataFileDir
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"c:"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|kvDataFilePath
operator|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
name|miniHS2
operator|.
name|getDFS
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/apps_staging_dir/anonymous"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|hs2Conn
operator|=
name|BaseJdbcWithMiniLlap
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|LlapBaseInputFormat
operator|.
name|closeAll
argument_list|()
expr_stmt|;
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterTest
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|miniHS2
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|200000
argument_list|)
specifier|public
name|void
name|testGenericUDTFOrderBySplitCount1
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|query
init|=
literal|"select get_splits("
operator|+
literal|"'select value from "
operator|+
name|tableName
operator|+
literal|"', 5)"
decl_stmt|;
name|runQuery
argument_list|(
name|query
argument_list|,
name|getConfigs
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"select get_splits("
operator|+
literal|"'select value from "
operator|+
name|tableName
operator|+
literal|" order by under_col', 5)"
expr_stmt|;
name|runQuery
argument_list|(
name|query
argument_list|,
name|getConfigs
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"select get_splits("
operator|+
literal|"'select value from "
operator|+
name|tableName
operator|+
literal|" order by under_col limit 0', 5)"
expr_stmt|;
name|runQuery
argument_list|(
name|query
argument_list|,
name|getConfigs
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"select get_splits("
operator|+
literal|"'select `value` from (select value from "
operator|+
name|tableName
operator|+
literal|" where value is not null order by value) as t', 5)"
expr_stmt|;
name|runQuery
argument_list|(
name|query
argument_list|,
name|getConfigs
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|setCmds
init|=
name|getConfigs
argument_list|()
decl_stmt|;
name|setCmds
operator|.
name|add
argument_list|(
literal|"set hive.llap.external.splits.order.by.force.single.split=false"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"select get_splits("
operator|+
literal|"'select `value` from (select value from "
operator|+
name|tableName
operator|+
literal|" where value is not null order by value) as t', 5)"
expr_stmt|;
name|runQuery
argument_list|(
name|query
argument_list|,
name|setCmds
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecimalPrecisionAndScale
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE decimal_test_table(decimal_col DECIMAL(6,2))"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"INSERT INTO decimal_test_table VALUES(2507.92)"
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM decimal_test_table"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|url
init|=
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|String
name|pwd
init|=
name|user
decl_stmt|;
name|String
name|handleId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
literal|"SELECT avg(decimal_col)/3 FROM decimal_test_table"
decl_stmt|;
comment|// make request through llap-ext-client
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|URL_KEY
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|USER_KEY
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|PWD_KEY
argument_list|,
name|pwd
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|QUERY_KEY
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|HANDLE_ID
argument_list|,
name|handleId
argument_list|)
expr_stmt|;
name|LlapBaseInputFormat
name|llapBaseInputFormat
init|=
operator|new
name|LlapBaseInputFormat
argument_list|()
decl_stmt|;
comment|//schema split
name|LlapInputSplit
name|schemaSplit
init|=
operator|(
name|LlapInputSplit
operator|)
name|llapBaseInputFormat
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
literal|0
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|assertNotNull
argument_list|(
name|schemaSplit
argument_list|)
expr_stmt|;
name|FieldDesc
name|fieldDesc
init|=
name|schemaSplit
operator|.
name|getSchema
argument_list|()
operator|.
name|getColumns
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DecimalTypeInfo
name|type
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|fieldDesc
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|type
operator|.
name|getPrecision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|24
argument_list|,
name|type
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|LlapBaseInputFormat
operator|.
name|close
argument_list|(
name|handleId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|runQuery
parameter_list|(
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|setCmds
parameter_list|,
specifier|final
name|int
name|numRows
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|con
init|=
name|hs2Conn
decl_stmt|;
name|BaseJdbcWithMiniLlap
operator|.
name|createTestTable
argument_list|(
name|con
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|,
name|kvDataFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|baos
argument_list|)
argument_list|)
expr_stmt|;
comment|// capture stderr
specifier|final
name|Statement
name|selStmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|Throwable
name|throwable
init|=
literal|null
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
try|try
block|{
try|try
block|{
if|if
condition|(
name|setCmds
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|setCmd
range|:
name|setCmds
control|)
block|{
name|selStmt
operator|.
name|execute
argument_list|(
name|setCmd
argument_list|)
expr_stmt|;
block|}
block|}
name|ResultSet
name|resultSet
init|=
name|selStmt
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|rowCount
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|throwable
operator|=
name|e
expr_stmt|;
block|}
name|selStmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|throwable
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Expected "
operator|+
name|numRows
operator|+
literal|" rows for query '"
operator|+
name|query
operator|+
literal|"'. Got: "
operator|+
name|rowCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected rows: "
operator|+
name|numRows
operator|+
literal|" got: "
operator|+
name|rowCount
argument_list|,
name|numRows
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|getConfigs
parameter_list|(
name|String
modifier|...
name|more
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|setCmds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|setCmds
operator|.
name|add
argument_list|(
literal|"set hive.exec.dynamic.partition.mode=nonstrict"
argument_list|)
expr_stmt|;
name|setCmds
operator|.
name|add
argument_list|(
literal|"set mapred.min.split.size=10"
argument_list|)
expr_stmt|;
name|setCmds
operator|.
name|add
argument_list|(
literal|"set mapred.max.split.size=10"
argument_list|)
expr_stmt|;
name|setCmds
operator|.
name|add
argument_list|(
literal|"set tez.grouping.min-size=10"
argument_list|)
expr_stmt|;
name|setCmds
operator|.
name|add
argument_list|(
literal|"set tez.grouping.max-size=10"
argument_list|)
expr_stmt|;
comment|// to get at least 10 splits
name|setCmds
operator|.
name|add
argument_list|(
literal|"set tez.grouping.split-waves=10"
argument_list|)
expr_stmt|;
if|if
condition|(
name|more
operator|!=
literal|null
condition|)
block|{
name|setCmds
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|more
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|setCmds
return|;
block|}
block|}
end_class

end_unit

