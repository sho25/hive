begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|FieldDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapArrowRowInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * TestJdbcWithMiniLlap for Arrow format with vectorized output sink  */
end_comment

begin_class
specifier|public
class|class
name|TestJdbcWithMiniLlapVectorArrow
extends|extends
name|BaseJdbcWithMiniLlap
block|{
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
name|defaultConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|LLAP_OUTPUT_FORMAT_ARROW
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_FILESINK_ARROW_NATIVE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|BaseJdbcWithMiniLlap
operator|.
name|beforeTest
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|InputFormat
argument_list|<
name|NullWritable
argument_list|,
name|Row
argument_list|>
name|getInputFormat
parameter_list|()
block|{
comment|//For unit testing, no harm in hard-coding allocator ceiling to LONG.MAX_VALUE
return|return
operator|new
name|LlapArrowRowInputFormat
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
comment|// Currently MAP type is not supported. Add it back when Arrow 1.0 is released.
comment|// See: SPARK-21187
annotation|@
name|Override
specifier|public
name|void
name|testDataTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|createDataTypesTable
argument_list|(
literal|"datatypes"
argument_list|)
expr_stmt|;
name|RowCollector2
name|rowCollector
init|=
operator|new
name|RowCollector2
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"select * from datatypes"
decl_stmt|;
name|int
name|rowCount
init|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
comment|// Verify schema
name|String
index|[]
index|[]
name|colNameTypes
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"datatypes.c1"
block|,
literal|"int"
block|}
block|,
block|{
literal|"datatypes.c2"
block|,
literal|"boolean"
block|}
block|,
block|{
literal|"datatypes.c3"
block|,
literal|"double"
block|}
block|,
block|{
literal|"datatypes.c4"
block|,
literal|"string"
block|}
block|,
block|{
literal|"datatypes.c5"
block|,
literal|"array<int>"
block|}
block|,
block|{
literal|"datatypes.c6"
block|,
literal|"map<int,string>"
block|}
block|,
block|{
literal|"datatypes.c7"
block|,
literal|"map<string,string>"
block|}
block|,
block|{
literal|"datatypes.c8"
block|,
literal|"struct<r:string,s:int,t:double>"
block|}
block|,
block|{
literal|"datatypes.c9"
block|,
literal|"tinyint"
block|}
block|,
block|{
literal|"datatypes.c10"
block|,
literal|"smallint"
block|}
block|,
block|{
literal|"datatypes.c11"
block|,
literal|"float"
block|}
block|,
block|{
literal|"datatypes.c12"
block|,
literal|"bigint"
block|}
block|,
block|{
literal|"datatypes.c13"
block|,
literal|"array<array<string>>"
block|}
block|,
block|{
literal|"datatypes.c14"
block|,
literal|"map<int,map<int,int>>"
block|}
block|,
block|{
literal|"datatypes.c15"
block|,
literal|"struct<r:int,s:struct<a:int,b:string>>"
block|}
block|,
block|{
literal|"datatypes.c16"
block|,
literal|"array<struct<m:map<string,string>,n:int>>"
block|}
block|,
block|{
literal|"datatypes.c17"
block|,
literal|"timestamp"
block|}
block|,
block|{
literal|"datatypes.c18"
block|,
literal|"decimal(16,7)"
block|}
block|,
block|{
literal|"datatypes.c19"
block|,
literal|"binary"
block|}
block|,
block|{
literal|"datatypes.c20"
block|,
literal|"date"
block|}
block|,
block|{
literal|"datatypes.c21"
block|,
literal|"varchar(20)"
block|}
block|,
block|{
literal|"datatypes.c22"
block|,
literal|"char(15)"
block|}
block|,
block|{
literal|"datatypes.c23"
block|,
literal|"binary"
block|}
block|,     }
decl_stmt|;
name|FieldDesc
name|fieldDesc
decl_stmt|;
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|rowCollector
operator|.
name|numColumns
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|rowCollector
operator|.
name|numColumns
condition|;
operator|++
name|idx
control|)
block|{
name|fieldDesc
operator|=
name|rowCollector
operator|.
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ColName idx="
operator|+
name|idx
argument_list|,
name|colNameTypes
index|[
name|idx
index|]
index|[
literal|0
index|]
argument_list|,
name|fieldDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ColType idx="
operator|+
name|idx
argument_list|,
name|colNameTypes
index|[
name|idx
index|]
index|[
literal|1
index|]
argument_list|,
name|fieldDesc
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// First row is all nulls
name|Object
index|[]
name|rowValues
init|=
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|rowCollector
operator|.
name|numColumns
condition|;
operator|++
name|idx
control|)
block|{
name|assertEquals
argument_list|(
literal|"idx="
operator|+
name|idx
argument_list|,
literal|null
argument_list|,
name|rowValues
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Second Row
name|rowValues
operator|=
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|rowValues
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|rowValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
operator|-
literal|1.1d
argument_list|)
argument_list|,
name|rowValues
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|rowValues
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|c5Value
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|4
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c5Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Map<?,?> c6Value = (Map<?,?>) rowValues[5];
comment|//assertEquals(0, c6Value.size());
comment|//Map<?,?> c7Value = (Map<?,?>) rowValues[6];
comment|//assertEquals(0, c7Value.size());
name|List
argument_list|<
name|?
argument_list|>
name|c8Value
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|7
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|c8Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|c8Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|c8Value
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|rowValues
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|rowValues
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
operator|-
literal|1.0f
argument_list|)
argument_list|,
name|rowValues
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|,
name|rowValues
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|c13Value
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|12
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c13Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Map<?,?> c14Value = (Map<?,?>) rowValues[13];
comment|//assertEquals(0, c14Value.size());
name|List
argument_list|<
name|?
argument_list|>
name|c15Value
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|14
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|c15Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|c15Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//List<?> c16Value = (List<?>) rowValues[15];
comment|//assertEquals(0, c16Value.size());
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|16
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|17
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|18
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|19
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|20
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|21
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|22
index|]
argument_list|)
expr_stmt|;
comment|// Third row
name|rowValues
operator|=
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|rowValues
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|rowValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|1.1d
argument_list|)
argument_list|,
name|rowValues
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|rowValues
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|c5Value
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|4
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c5Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|c5Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|c5Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//c6Value = (Map<?,?>) rowValues[5];
comment|//assertEquals(2, c6Value.size());
comment|//assertEquals("x", c6Value.get(Integer.valueOf(1)));
comment|//assertEquals("y", c6Value.get(Integer.valueOf(2)));
comment|//c7Value = (Map<?,?>) rowValues[6];
comment|//assertEquals(1, c7Value.size());
comment|//assertEquals("v", c7Value.get("k"));
name|c8Value
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|7
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|c8Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|9
argument_list|)
argument_list|,
name|c8Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|2.2d
argument_list|)
argument_list|,
name|c8Value
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|,
name|rowValues
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|,
name|rowValues
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|1.0f
argument_list|)
argument_list|,
name|rowValues
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|1l
argument_list|)
argument_list|,
name|rowValues
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|c13Value
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|12
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c13Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|listVal
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|c13Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|listVal
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|c13Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//c14Value = (Map<?,?>) rowValues[13];
comment|//assertEquals(2, c14Value.size());
comment|//Map<?,?> mapVal = (Map<?,?>) c14Value.get(Integer.valueOf(1));
comment|//assertEquals(2, mapVal.size());
comment|//assertEquals(Integer.valueOf(12), mapVal.get(Integer.valueOf(11)));
comment|//assertEquals(Integer.valueOf(14), mapVal.get(Integer.valueOf(13)));
comment|//mapVal = (Map<?,?>) c14Value.get(Integer.valueOf(2));
comment|//assertEquals(1, mapVal.size());
comment|//assertEquals(Integer.valueOf(22), mapVal.get(Integer.valueOf(21)));
name|c15Value
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|14
index|]
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|c15Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|listVal
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|c15Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|listVal
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//c16Value = (List<?>) rowValues[15];
comment|//assertEquals(2, c16Value.size());
comment|//listVal = (List<?>) c16Value.get(0);
comment|//assertEquals(2, listVal.size());
comment|//mapVal = (Map<?,?>) listVal.get(0);
comment|//assertEquals(0, mapVal.size());
comment|//assertEquals(Integer.valueOf(1), listVal.get(1));
comment|//listVal = (List<?>) c16Value.get(1);
comment|//mapVal = (Map<?,?>) listVal.get(0);
comment|//assertEquals(2, mapVal.size());
comment|//assertEquals("b", mapVal.get("a"));
comment|//assertEquals("d", mapVal.get("c"));
comment|//assertEquals(Integer.valueOf(2), listVal.get(1));
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2012-04-22 09:00:00.123456"
argument_list|)
argument_list|,
name|rowValues
index|[
literal|16
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"123456789.123456"
argument_list|)
argument_list|,
name|rowValues
index|[
literal|17
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"abcd"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|rowValues
index|[
literal|18
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2013-01-01"
argument_list|)
argument_list|,
name|rowValues
index|[
literal|19
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc123"
argument_list|,
name|rowValues
index|[
literal|20
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc123         "
argument_list|,
name|rowValues
index|[
literal|21
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"X'01FF'"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|rowValues
index|[
literal|22
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTypesNestedInListWithLimitAndFilters
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Statement
name|statement
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|statement
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE complex_tbl(c1 array<string>, "
operator|+
literal|"c2 array<struct<f1:string,f2:string>>, "
operator|+
literal|"c3 array<array<struct<f1:string,f2:string>>>, "
operator|+
literal|"c4 int) STORED AS ORC"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"INSERT INTO complex_tbl VALUES "
operator|+
literal|"("
operator|+
literal|"ARRAY('a1', 'a2', 'a3', null), "
operator|+
literal|"ARRAY(NAMED_STRUCT('f1','a1', 'f2','a2'), NAMED_STRUCT('f1','a3', 'f2','a4')), "
operator|+
literal|"ARRAY((ARRAY(NAMED_STRUCT('f1','a1', 'f2','a2'), NAMED_STRUCT('f1','a3', 'f2','a4')))), "
operator|+
literal|"1),      "
operator|+
literal|"("
operator|+
literal|"ARRAY('b1'), "
operator|+
literal|"ARRAY(NAMED_STRUCT('f1','b1', 'f2','b2'), NAMED_STRUCT('f1','b3', 'f2','b4')), "
operator|+
literal|"ARRAY((ARRAY(NAMED_STRUCT('f1','b1', 'f2','b2'), NAMED_STRUCT('f1','b3', 'f2','b4'))), "
operator|+
literal|"(ARRAY(NAMED_STRUCT('f1','b5', 'f2','b6'), NAMED_STRUCT('f1','b7', 'f2','b8')))), "
operator|+
literal|"2), "
operator|+
literal|"("
operator|+
literal|"ARRAY('c1', 'c2'), ARRAY(NAMED_STRUCT('f1','c1', 'f2','c2'), NAMED_STRUCT('f1','c3', 'f2','c4'), "
operator|+
literal|"NAMED_STRUCT('f1','c5', 'f2','c6')), ARRAY((ARRAY(NAMED_STRUCT('f1','c1', 'f2','c2'), "
operator|+
literal|"NAMED_STRUCT('f1','c3', 'f2','c4'))), (ARRAY(NAMED_STRUCT('f1','c5', 'f2','c6'), "
operator|+
literal|"NAMED_STRUCT('f1','c7', 'f2','c8'))), (ARRAY(NAMED_STRUCT('f1','c9', 'f2','c10'), "
operator|+
literal|"NAMED_STRUCT('f1','c11', 'f2','c12')))), "
operator|+
literal|"3), "
operator|+
literal|"("
operator|+
literal|"ARRAY(null), "
operator|+
literal|"ARRAY(NAMED_STRUCT('f1','d1', 'f2','d2'), NAMED_STRUCT('f1','d3', 'f2','d4'), "
operator|+
literal|"NAMED_STRUCT('f1','d5', 'f2','d6'), NAMED_STRUCT('f1','d7', 'f2','d8')), "
operator|+
literal|"ARRAY((ARRAY(NAMED_STRUCT('f1','d1', 'f2', 'd2')))), "
operator|+
literal|"4)"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|asList
argument_list|(
literal|"a1"
argument_list|,
literal|"a2"
argument_list|,
literal|"a3"
argument_list|,
literal|null
argument_list|)
block|,
name|asList
argument_list|(
name|asList
argument_list|(
literal|"a1"
argument_list|,
literal|"a2"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"a3"
argument_list|,
literal|"a4"
argument_list|)
argument_list|)
block|,
name|asList
argument_list|(
name|asList
argument_list|(
name|asList
argument_list|(
literal|"a1"
argument_list|,
literal|"a2"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"a3"
argument_list|,
literal|"a4"
argument_list|)
argument_list|)
argument_list|)
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|asList
argument_list|(
literal|"b1"
argument_list|)
block|,
name|asList
argument_list|(
name|asList
argument_list|(
literal|"b1"
argument_list|,
literal|"b2"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"b3"
argument_list|,
literal|"b4"
argument_list|)
argument_list|)
block|,
name|asList
argument_list|(
name|asList
argument_list|(
name|asList
argument_list|(
literal|"b1"
argument_list|,
literal|"b2"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"b3"
argument_list|,
literal|"b4"
argument_list|)
argument_list|)
argument_list|,
name|asList
argument_list|(
name|asList
argument_list|(
literal|"b5"
argument_list|,
literal|"b6"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"b7"
argument_list|,
literal|"b8"
argument_list|)
argument_list|)
argument_list|)
block|,
literal|2
block|}
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|asList
argument_list|(
literal|"c1"
argument_list|,
literal|"c2"
argument_list|)
block|,
name|asList
argument_list|(
name|asList
argument_list|(
literal|"c1"
argument_list|,
literal|"c2"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"c3"
argument_list|,
literal|"c4"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"c5"
argument_list|,
literal|"c6"
argument_list|)
argument_list|)
block|,
name|asList
argument_list|(
name|asList
argument_list|(
name|asList
argument_list|(
literal|"c1"
argument_list|,
literal|"c2"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"c3"
argument_list|,
literal|"c4"
argument_list|)
argument_list|)
argument_list|,
name|asList
argument_list|(
name|asList
argument_list|(
literal|"c5"
argument_list|,
literal|"c6"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"c7"
argument_list|,
literal|"c8"
argument_list|)
argument_list|)
argument_list|,
name|asList
argument_list|(
name|asList
argument_list|(
literal|"c9"
argument_list|,
literal|"c10"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"c11"
argument_list|,
literal|"c12"
argument_list|)
argument_list|)
argument_list|)
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nullList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|nullList
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|nullList
block|,
name|asList
argument_list|(
name|asList
argument_list|(
literal|"d1"
argument_list|,
literal|"d2"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"d3"
argument_list|,
literal|"d4"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"d5"
argument_list|,
literal|"d6"
argument_list|)
argument_list|,
name|asList
argument_list|(
literal|"d7"
argument_list|,
literal|"d8"
argument_list|)
argument_list|)
block|,
name|asList
argument_list|(
name|asList
argument_list|(
name|asList
argument_list|(
literal|"d1"
argument_list|,
literal|"d2"
argument_list|)
argument_list|)
argument_list|)
block|,
literal|4
block|}
argument_list|)
expr_stmt|;
comment|// test without limit and filters (i.e VectorizedRowBatch#selectedInUse=false)
name|RowCollector2
name|rowCollector
init|=
operator|new
name|RowCollector2
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"select * from complex_tbl"
decl_stmt|;
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|rowCollector
operator|.
name|rows
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with filter
name|rowCollector
operator|=
operator|new
name|RowCollector2
argument_list|()
expr_stmt|;
name|query
operator|=
literal|"select * from complex_tbl where c4> 1 "
expr_stmt|;
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|rowCollector
operator|.
name|rows
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with limit
name|rowCollector
operator|=
operator|new
name|RowCollector2
argument_list|()
expr_stmt|;
name|query
operator|=
literal|"select * from complex_tbl limit 3"
expr_stmt|;
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|rowCollector
operator|.
name|rows
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with filters and limit
name|rowCollector
operator|=
operator|new
name|RowCollector2
argument_list|()
expr_stmt|;
name|query
operator|=
literal|"select * from complex_tbl where c4> 1 limit 2"
expr_stmt|;
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|rowCollector
operator|.
name|rows
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTypesNestedInMapWithLimitAndFilters
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Statement
name|statement
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|statement
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE complex_tbl2(c1 map<int, string>,"
operator|+
literal|" c2 map<int, array<string>>, "
operator|+
literal|" c3 map<int, struct<f1:string,f2:string>>, c4 int) STORED AS ORC"
argument_list|)
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"INSERT INTO complex_tbl2 VALUES "
operator|+
literal|"(MAP(1, 'a1'), MAP(1, ARRAY('a1', 'a2')), MAP(1, NAMED_STRUCT('f1','a1', 'f2','a2')), "
operator|+
literal|"1), "
operator|+
literal|"(MAP(1, 'b1',2, 'b2'), MAP(1, ARRAY('b1', 'b2'), 2, ARRAY('b3') ), "
operator|+
literal|"MAP(1, NAMED_STRUCT('f1','b1', 'f2','b2')), "
operator|+
literal|"2), "
operator|+
literal|"(MAP(1, 'c1',2, 'c2'), MAP(1, ARRAY('c1', 'c2'), 2, ARRAY('c3') ), "
operator|+
literal|"MAP(1, NAMED_STRUCT('f1','c1', 'f2','c2'), 2, NAMED_STRUCT('f1', 'c3', 'f2', 'c4') ), "
operator|+
literal|"3)"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|"a1"
argument_list|)
block|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
name|asList
argument_list|(
literal|"a1"
argument_list|,
literal|"a2"
argument_list|)
argument_list|)
block|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
name|asList
argument_list|(
literal|"a1"
argument_list|,
literal|"a2"
argument_list|)
argument_list|)
block|,
literal|1
block|,     }
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|"b1"
argument_list|,
literal|2
argument_list|,
literal|"b2"
argument_list|)
block|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
name|asList
argument_list|(
literal|"b1"
argument_list|,
literal|"b2"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|asList
argument_list|(
literal|"b3"
argument_list|)
argument_list|)
block|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
name|asList
argument_list|(
literal|"b1"
argument_list|,
literal|"b2"
argument_list|)
argument_list|)
block|,
literal|2
block|,     }
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|"c1"
argument_list|,
literal|2
argument_list|,
literal|"c2"
argument_list|)
block|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
name|asList
argument_list|(
literal|"c1"
argument_list|,
literal|"c2"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|asList
argument_list|(
literal|"c3"
argument_list|)
argument_list|)
block|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|1
argument_list|,
name|asList
argument_list|(
literal|"c1"
argument_list|,
literal|"c2"
argument_list|)
argument_list|,
literal|2
argument_list|,
name|asList
argument_list|(
literal|"c3"
argument_list|,
literal|"c4"
argument_list|)
argument_list|)
block|,
literal|3
block|,     }
argument_list|)
expr_stmt|;
comment|// test without limit and filters (i.e. VectorizedRowBatch#selectedInUse=false)
name|RowCollector2
name|rowCollector
init|=
operator|new
name|RowCollector2
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"select * from complex_tbl2"
decl_stmt|;
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|rowCollector
operator|.
name|rows
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with filter
name|rowCollector
operator|=
operator|new
name|RowCollector2
argument_list|()
expr_stmt|;
name|query
operator|=
literal|"select * from complex_tbl2 where c4> 1 "
expr_stmt|;
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|rowCollector
operator|.
name|rows
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with limit
name|rowCollector
operator|=
operator|new
name|RowCollector2
argument_list|()
expr_stmt|;
name|query
operator|=
literal|"select * from complex_tbl2 limit 2"
expr_stmt|;
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|rowCollector
operator|.
name|rows
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with filters and limit
name|rowCollector
operator|=
operator|new
name|RowCollector2
argument_list|()
expr_stmt|;
name|query
operator|=
literal|"select * from complex_tbl2 where c4> 1 limit 1"
expr_stmt|;
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|rowCollector
operator|.
name|rows
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyResult
parameter_list|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|actual
parameter_list|,
name|Object
index|[]
modifier|...
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertArrayEquals
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

