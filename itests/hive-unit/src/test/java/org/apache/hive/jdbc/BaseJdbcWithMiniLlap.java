begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|FieldDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
operator|.
name|MiniClusterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapBaseInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_comment
comment|/**  * Specialize this base class for different serde's/formats  * {@link #beforeTest(boolean) beforeTest} should be called  * by sub-classes in a {@link org.junit.BeforeClass} initializer  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BaseJdbcWithMiniLlap
block|{
specifier|private
specifier|static
name|String
name|dataFileDir
decl_stmt|;
specifier|private
specifier|static
name|Path
name|kvDataFilePath
decl_stmt|;
specifier|private
specifier|static
name|Path
name|dataTypesFilePath
decl_stmt|;
specifier|private
specifier|static
name|Path
name|over10KFilePath
decl_stmt|;
specifier|protected
specifier|static
name|MiniHS2
name|miniHS2
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
name|HiveConf
name|conf
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
name|Connection
name|hs2Conn
init|=
literal|null
decl_stmt|;
comment|// This method should be called by sub-classes in a @BeforeClass initializer
specifier|public
specifier|static
name|MiniHS2
name|beforeTest
parameter_list|(
name|HiveConf
name|inputConf
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|=
name|inputConf
expr_stmt|;
name|Class
operator|.
name|forName
argument_list|(
name|MiniHS2
operator|.
name|getJdbcDriverName
argument_list|()
argument_list|)
expr_stmt|;
name|miniHS2
operator|=
operator|new
name|MiniHS2
argument_list|(
name|conf
argument_list|,
name|MiniClusterType
operator|.
name|LLAP
argument_list|)
expr_stmt|;
name|dataFileDir
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"c:"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|kvDataFilePath
operator|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
name|dataTypesFilePath
operator|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"datatypes.txt"
argument_list|)
expr_stmt|;
name|over10KFilePath
operator|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"over10k"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
name|miniHS2
operator|.
name|getDFS
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/apps_staging_dir/anonymous"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|miniHS2
return|;
block|}
specifier|static
name|HiveConf
name|defaultConf
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|confDir
init|=
literal|"../../data/conf/llap/"
decl_stmt|;
if|if
condition|(
name|confDir
operator|!=
literal|null
operator|&&
operator|!
name|confDir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HiveConf
operator|.
name|setHiveSiteLocation
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file://"
operator|+
operator|new
name|File
argument_list|(
name|confDir
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/hive-site.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setting hive-site: "
operator|+
name|HiveConf
operator|.
name|getHiveSiteLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HiveConf
name|defaultConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|defaultConf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|defaultConf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_ENABLE_DOAS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|defaultConf
operator|.
name|addResource
argument_list|(
operator|new
name|URL
argument_list|(
literal|"file://"
operator|+
operator|new
name|File
argument_list|(
name|confDir
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"/tez-site.xml"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|defaultConf
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|hs2Conn
operator|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Connection
name|getConnection
parameter_list|(
name|String
name|jdbcURL
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|pwd
parameter_list|)
throws|throws
name|SQLException
block|{
name|Connection
name|conn
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|jdbcURL
argument_list|,
name|user
argument_list|,
name|pwd
argument_list|)
decl_stmt|;
name|conn
operator|.
name|createStatement
argument_list|()
operator|.
name|execute
argument_list|(
literal|"set hive.support.concurrency = false"
argument_list|)
expr_stmt|;
return|return
name|conn
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|LlapBaseInputFormat
operator|.
name|closeAll
argument_list|()
expr_stmt|;
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterTest
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|miniHS2
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|createTestTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|createTestTable
argument_list|(
name|hs2Conn
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|,
name|kvDataFilePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|createTestTable
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|database
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|srcFile
parameter_list|)
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
if|if
condition|(
name|database
operator|!=
literal|null
condition|)
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE DATABASE IF NOT EXISTS "
operator|+
name|database
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"USE "
operator|+
name|database
argument_list|)
expr_stmt|;
block|}
comment|// create table
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (under_col INT COMMENT 'the under column', value STRING) COMMENT ' test table'"
argument_list|)
expr_stmt|;
comment|// load data
name|stmt
operator|.
name|execute
argument_list|(
literal|"load data local inpath '"
operator|+
name|srcFile
operator|+
literal|"' into table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val_238"
argument_list|,
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|createDataTypesTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|Statement
name|stmt
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// create table
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
argument_list|)
expr_stmt|;
comment|// tables with various types
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (c1 int, c2 boolean, c3 double, c4 string,"
operator|+
literal|" c5 array<int>, c6 map<int,string>, c7 map<string,string>,"
operator|+
literal|" c8 struct<r:string,s:int,t:double>,"
operator|+
literal|" c9 tinyint, c10 smallint, c11 float, c12 bigint,"
operator|+
literal|" c13 array<array<string>>,"
operator|+
literal|" c14 map<int, map<int,int>>,"
operator|+
literal|" c15 struct<r:int,s:struct<a:int,b:string>>,"
operator|+
literal|" c16 array<struct<m:map<string,string>,n:int>>,"
operator|+
literal|" c17 timestamp, "
operator|+
literal|" c18 decimal(16,7), "
operator|+
literal|" c19 binary, "
operator|+
literal|" c20 date,"
operator|+
literal|" c21 varchar(20),"
operator|+
literal|" c22 char(15),"
operator|+
literal|" c23 binary"
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"load data local inpath '"
operator|+
name|dataTypesFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|createOver10KTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|String
name|createQuery
init|=
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (t tinyint, si smallint, i int, b bigint, f float, d double, bo boolean, "
operator|+
literal|"s string, ts timestamp, `dec` decimal(4,2), bin binary) row format delimited fields terminated by '|'"
decl_stmt|;
comment|// create table
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
name|createQuery
argument_list|)
expr_stmt|;
comment|// load data
name|stmt
operator|.
name|execute
argument_list|(
literal|"load data local inpath '"
operator|+
name|over10KFilePath
operator|.
name|toString
argument_list|()
operator|+
literal|"' into table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testLlapInputFormatEndToEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestTable
argument_list|(
literal|"testtab1"
argument_list|)
expr_stmt|;
name|int
name|rowCount
decl_stmt|;
name|RowCollector
name|rowCollector
init|=
operator|new
name|RowCollector
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"select * from testtab1 where under_col = 0"
decl_stmt|;
name|rowCount
operator|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"val_0"
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"val_0"
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"val_0"
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try empty rows query
name|rowCollector
operator|.
name|rows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|query
operator|=
literal|"select * from testtab1 where true = false"
expr_stmt|;
name|rowCount
operator|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMultipleBatchesOfComplexTypes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|tableName
init|=
literal|"testMultipleBatchesOfComplexTypes"
decl_stmt|;
try|try
init|(
name|Statement
name|stmt
init|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|String
name|createQuery
init|=
literal|"create table "
operator|+
name|tableName
operator|+
literal|"(c1 array<struct<f1:string,f2:string>>, "
operator|+
literal|"c2 int, "
operator|+
literal|"c3 array<array<int>>, "
operator|+
literal|"c4 array<struct<f1:array<string>>>) STORED AS ORC"
decl_stmt|;
comment|// create table
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
name|createQuery
argument_list|)
expr_stmt|;
comment|// load data
name|stmt
operator|.
name|execute
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|"  VALUES "
comment|// value 1
operator|+
literal|"(ARRAY(NAMED_STRUCT('f1','a1', 'f2','a2'), NAMED_STRUCT('f1','a3', 'f2','a4')), "
operator|+
literal|"1, ARRAY(ARRAY(1)), ARRAY(NAMED_STRUCT('f1',ARRAY('aa1')))), "
comment|// value 2
operator|+
literal|"(ARRAY(NAMED_STRUCT('f1','b1', 'f2','b2'), NAMED_STRUCT('f1','b3', 'f2','b4')), 2, "
operator|+
literal|"ARRAY(ARRAY(2,2), ARRAY(2,2)), "
operator|+
literal|"ARRAY(NAMED_STRUCT('f1',ARRAY('aa2','aa2')), NAMED_STRUCT('f1',ARRAY('aa2','aa2')))), "
comment|// value 3
operator|+
literal|"(ARRAY(NAMED_STRUCT('f1','c1', 'f2','c2'), NAMED_STRUCT('f1','c3', 'f2','c4'), "
operator|+
literal|"NAMED_STRUCT('f1','c5', 'f2','c6')), 3, "
operator|+
literal|"ARRAY(ARRAY(3,3,3), ARRAY(3,3,3), ARRAY(3,3,3)), "
operator|+
literal|"ARRAY(NAMED_STRUCT('f1',ARRAY('aa3','aa3','aa3')), "
operator|+
literal|"NAMED_STRUCT('f1',ARRAY('aa3','aa3', 'aa3')), NAMED_STRUCT('f1',ARRAY('aa3','aa3', 'aa3')))), "
comment|// value 4
operator|+
literal|"(ARRAY(NAMED_STRUCT('f1','d1', 'f2','d2'), NAMED_STRUCT('f1','d3', 'f2','d4'),"
operator|+
literal|" NAMED_STRUCT('f1','d5', 'f2','d6'), NAMED_STRUCT('f1','d7', 'f2','d8')), 4, "
operator|+
literal|"ARRAY(ARRAY(4,4,4,4),ARRAY(4,4,4,4),ARRAY(4,4,4,4),ARRAY(4,4,4,4)), "
operator|+
literal|"ARRAY(NAMED_STRUCT('f1',ARRAY('aa4','aa4','aa4', 'aa4')), "
operator|+
literal|"NAMED_STRUCT('f1',ARRAY('aa4','aa4','aa4', 'aa4')), NAMED_STRUCT('f1',ARRAY('aa4','aa4','aa4', 'aa4')),"
operator|+
literal|" NAMED_STRUCT('f1',ARRAY('aa4','aa4','aa4', 'aa4'))))"
argument_list|)
expr_stmt|;
comment|// generate 4096 rows from above records
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|stmt
operator|.
name|execute
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"insert into %s select * from %s"
argument_list|,
name|tableName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// validate test table
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"SELECT count(*) FROM "
operator|+
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|res
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|RowCollector
name|rowCollector
init|=
operator|new
name|RowCollector
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"select * from "
operator|+
name|tableName
decl_stmt|;
name|int
name|rowCount
init|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
comment|/*      *      * validate different rows      * [[[a1, a2], [a3, a4]], 1, [[1]], [[[aa1]]]]      * [[[b1, b2], [b3, b4]], 2, [[2, 2], [2, 2]], [[[aa2, aa2]], [[aa2, aa2]]]]      * [[[c1, c2], [c3, c4], [c5, c6]], 3, [[3, 3, 3], [3, 3, 3], [3, 3, 3]], [[[aa3, aa3, aa3]], [[aa3, aa3, aa3]], [[aa3, aa3, aa3]]]]      * [[[d1, d2], [d3, d4], [d5, d6], [d7, d8]], 4, [[4, 4, 4, 4], [4, 4, 4, 4], [4, 4, 4, 4], [4, 4, 4, 4]], [[[aa4, aa4, aa4, aa4]], [[aa4, aa4, aa4, aa4]], [[aa4, aa4, aa4, aa4]], [[aa4, aa4, aa4, aa4]]]]      *      */
name|rowCollector
operator|.
name|rows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|query
operator|=
literal|"select * from "
operator|+
name|tableName
operator|+
literal|" where c2=1 limit 1"
expr_stmt|;
name|rowCount
operator|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|expected1
init|=
block|{
literal|"[[a1, a2], [a3, a4]]"
block|,
literal|"1"
block|,
literal|"[[1]]"
block|,
literal|"[[[aa1]]]"
block|}
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected1
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|rowCollector
operator|.
name|rows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|query
operator|=
literal|"select * from "
operator|+
name|tableName
operator|+
literal|" where c2=2 limit 1"
expr_stmt|;
name|rowCount
operator|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|expected2
init|=
block|{
literal|"[[b1, b2], [b3, b4]]"
block|,
literal|"2"
block|,
literal|"[[2, 2], [2, 2]]"
block|,
literal|"[[[aa2, aa2]], [[aa2, aa2]]]"
block|}
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected2
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|rowCollector
operator|.
name|rows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|query
operator|=
literal|"select * from "
operator|+
name|tableName
operator|+
literal|" where c2=3 limit 1"
expr_stmt|;
name|rowCount
operator|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|expected3
init|=
block|{
literal|"[[c1, c2], [c3, c4], [c5, c6]]"
block|,
literal|"3"
block|,
literal|"[[3, 3, 3], [3, 3, 3], [3, 3, 3]]"
block|,
literal|"[[[aa3, aa3, aa3]], [[aa3, aa3, aa3]], [[aa3, aa3, aa3]]]"
block|}
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected3
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|rowCollector
operator|.
name|rows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|query
operator|=
literal|"select * from "
operator|+
name|tableName
operator|+
literal|" where c2=4 limit 1"
expr_stmt|;
name|rowCount
operator|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|expected4
init|=
block|{
literal|"[[d1, d2], [d3, d4], [d5, d6], [d7, d8]]"
block|,
literal|"4"
block|,
literal|"[[4, 4, 4, 4], [4, 4, 4, 4], [4, 4, 4, 4], [4, 4, 4, 4]]"
block|,
literal|"[[[aa4, aa4, aa4, aa4]], [[aa4, aa4, aa4, aa4]], [[aa4, aa4, aa4, aa4]], [[aa4, aa4, aa4, aa4]]]"
block|}
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected4
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testLlapInputFormatEndToEndWithMultipleBatches
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"over10k_table"
decl_stmt|;
name|createOver10KTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|int
name|rowCount
decl_stmt|;
comment|// Try with more than one batch
name|RowCollector
name|rowCollector
init|=
operator|new
name|RowCollector
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"select * from "
operator|+
name|tableName
decl_stmt|;
name|rowCount
operator|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9999
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
comment|// Try with less than one batch
name|rowCollector
operator|.
name|rows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|query
operator|=
literal|"select * from "
operator|+
name|tableName
operator|+
literal|" where s = 'rachel brown'"
expr_stmt|;
name|rowCount
operator|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
comment|// Try empty rows query
name|rowCollector
operator|.
name|rows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|query
operator|=
literal|"select * from "
operator|+
name|tableName
operator|+
literal|" where false"
expr_stmt|;
name|rowCount
operator|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testNonAsciiStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestTable
argument_list|(
literal|"testtab_nonascii"
argument_list|)
expr_stmt|;
name|RowCollector
name|rowCollector
init|=
operator|new
name|RowCollector
argument_list|()
decl_stmt|;
name|String
name|nonAscii
init|=
literal|"À côté du garçon"
decl_stmt|;
name|String
name|query
init|=
literal|"select value, '"
operator|+
name|nonAscii
operator|+
literal|"' from testtab_nonascii where under_col=0"
decl_stmt|;
name|int
name|rowCount
init|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"val_0"
block|,
name|nonAscii
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"val_0"
block|,
name|nonAscii
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"val_0"
block|,
name|nonAscii
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testEscapedStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestTable
argument_list|(
literal|"testtab1"
argument_list|)
expr_stmt|;
name|RowCollector
name|rowCollector
init|=
operator|new
name|RowCollector
argument_list|()
decl_stmt|;
name|String
name|expectedVal1
init|=
literal|"'a',\"b\",\\c\\"
decl_stmt|;
name|String
name|expectedVal2
init|=
literal|"multi\nline"
decl_stmt|;
name|String
name|query
init|=
literal|"select value, '\\'a\\',\"b\",\\\\c\\\\', 'multi\\nline' from testtab1 where under_col=0"
decl_stmt|;
name|int
name|rowCount
init|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"val_0"
block|,
name|expectedVal1
block|,
name|expectedVal2
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"val_0"
block|,
name|expectedVal1
block|,
name|expectedVal2
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"val_0"
block|,
name|expectedVal1
block|,
name|expectedVal2
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testDataTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|createDataTypesTable
argument_list|(
literal|"datatypes"
argument_list|)
expr_stmt|;
name|RowCollector2
name|rowCollector
init|=
operator|new
name|RowCollector2
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"select * from datatypes"
decl_stmt|;
name|int
name|rowCount
init|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
comment|// Verify schema
name|String
index|[]
index|[]
name|colNameTypes
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"datatypes.c1"
block|,
literal|"int"
block|}
block|,
block|{
literal|"datatypes.c2"
block|,
literal|"boolean"
block|}
block|,
block|{
literal|"datatypes.c3"
block|,
literal|"double"
block|}
block|,
block|{
literal|"datatypes.c4"
block|,
literal|"string"
block|}
block|,
block|{
literal|"datatypes.c5"
block|,
literal|"array<int>"
block|}
block|,
block|{
literal|"datatypes.c6"
block|,
literal|"map<int,string>"
block|}
block|,
block|{
literal|"datatypes.c7"
block|,
literal|"map<string,string>"
block|}
block|,
block|{
literal|"datatypes.c8"
block|,
literal|"struct<r:string,s:int,t:double>"
block|}
block|,
block|{
literal|"datatypes.c9"
block|,
literal|"tinyint"
block|}
block|,
block|{
literal|"datatypes.c10"
block|,
literal|"smallint"
block|}
block|,
block|{
literal|"datatypes.c11"
block|,
literal|"float"
block|}
block|,
block|{
literal|"datatypes.c12"
block|,
literal|"bigint"
block|}
block|,
block|{
literal|"datatypes.c13"
block|,
literal|"array<array<string>>"
block|}
block|,
block|{
literal|"datatypes.c14"
block|,
literal|"map<int,map<int,int>>"
block|}
block|,
block|{
literal|"datatypes.c15"
block|,
literal|"struct<r:int,s:struct<a:int,b:string>>"
block|}
block|,
block|{
literal|"datatypes.c16"
block|,
literal|"array<struct<m:map<string,string>,n:int>>"
block|}
block|,
block|{
literal|"datatypes.c17"
block|,
literal|"timestamp"
block|}
block|,
block|{
literal|"datatypes.c18"
block|,
literal|"decimal(16,7)"
block|}
block|,
block|{
literal|"datatypes.c19"
block|,
literal|"binary"
block|}
block|,
block|{
literal|"datatypes.c20"
block|,
literal|"date"
block|}
block|,
block|{
literal|"datatypes.c21"
block|,
literal|"varchar(20)"
block|}
block|,
block|{
literal|"datatypes.c22"
block|,
literal|"char(15)"
block|}
block|,
block|{
literal|"datatypes.c23"
block|,
literal|"binary"
block|}
block|,     }
decl_stmt|;
name|FieldDesc
name|fieldDesc
decl_stmt|;
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|rowCollector
operator|.
name|numColumns
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|rowCollector
operator|.
name|numColumns
condition|;
operator|++
name|idx
control|)
block|{
name|fieldDesc
operator|=
name|rowCollector
operator|.
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ColName idx="
operator|+
name|idx
argument_list|,
name|colNameTypes
index|[
name|idx
index|]
index|[
literal|0
index|]
argument_list|,
name|fieldDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ColType idx="
operator|+
name|idx
argument_list|,
name|colNameTypes
index|[
name|idx
index|]
index|[
literal|1
index|]
argument_list|,
name|fieldDesc
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// First row is all nulls
name|Object
index|[]
name|rowValues
init|=
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|rowCollector
operator|.
name|numColumns
condition|;
operator|++
name|idx
control|)
block|{
name|assertEquals
argument_list|(
literal|"idx="
operator|+
name|idx
argument_list|,
literal|null
argument_list|,
name|rowValues
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Second Row
name|rowValues
operator|=
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|rowValues
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|rowValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
operator|-
literal|1.1d
argument_list|)
argument_list|,
name|rowValues
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|rowValues
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|c5Value
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|4
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c5Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|c6Value
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|5
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c6Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|c7Value
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|6
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c7Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|c8Value
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|7
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|c8Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|c8Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|c8Value
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|rowValues
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|rowValues
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
operator|-
literal|1.0f
argument_list|)
argument_list|,
name|rowValues
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|,
name|rowValues
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|c13Value
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|12
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c13Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|c14Value
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|13
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c14Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|c15Value
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|14
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|c15Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|c15Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|c16Value
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|15
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c16Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|16
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|17
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|18
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|19
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|20
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|21
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rowValues
index|[
literal|22
index|]
argument_list|)
expr_stmt|;
comment|// Third row
name|rowValues
operator|=
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|rowValues
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|rowValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|1.1d
argument_list|)
argument_list|,
name|rowValues
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|rowValues
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|c5Value
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|4
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c5Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|c5Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|c5Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|c6Value
operator|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|5
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c6Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|c6Value
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"y"
argument_list|,
name|c6Value
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c7Value
operator|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|6
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c7Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v"
argument_list|,
name|c7Value
operator|.
name|get
argument_list|(
literal|"k"
argument_list|)
argument_list|)
expr_stmt|;
name|c8Value
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|7
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|c8Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|9
argument_list|)
argument_list|,
name|c8Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|2.2d
argument_list|)
argument_list|,
name|c8Value
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|,
name|rowValues
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|,
name|rowValues
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|1.0f
argument_list|)
argument_list|,
name|rowValues
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|1l
argument_list|)
argument_list|,
name|rowValues
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|c13Value
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|12
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c13Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|listVal
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|c13Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|listVal
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|c13Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|c14Value
operator|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|13
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c14Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|mapVal
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|c14Value
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mapVal
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|12
argument_list|)
argument_list|,
name|mapVal
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|11
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|14
argument_list|)
argument_list|,
name|mapVal
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|13
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mapVal
operator|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|c14Value
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mapVal
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|22
argument_list|)
argument_list|,
name|mapVal
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|21
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c15Value
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|14
index|]
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|c15Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|listVal
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|c15Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|listVal
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|c16Value
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|rowValues
index|[
literal|15
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|c16Value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|listVal
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|c16Value
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|listVal
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|mapVal
operator|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|listVal
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mapVal
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|listVal
operator|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|c16Value
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mapVal
operator|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|listVal
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mapVal
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|mapVal
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|mapVal
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|listVal
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2012-04-22 09:00:00.123456789"
argument_list|)
argument_list|,
name|rowValues
index|[
literal|16
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"123456789.123456"
argument_list|)
argument_list|,
name|rowValues
index|[
literal|17
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"abcd"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|rowValues
index|[
literal|18
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2013-01-01"
argument_list|)
argument_list|,
name|rowValues
index|[
literal|19
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc123"
argument_list|,
name|rowValues
index|[
literal|20
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc123         "
argument_list|,
name|rowValues
index|[
literal|21
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"X'01FF'"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|rowValues
index|[
literal|22
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testComplexQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestTable
argument_list|(
literal|"testtab1"
argument_list|)
expr_stmt|;
name|RowCollector
name|rowCollector
init|=
operator|new
name|RowCollector
argument_list|()
decl_stmt|;
name|String
name|query
init|=
literal|"select value, count(*) from testtab1 where under_col=0 group by value"
decl_stmt|;
name|int
name|rowCount
init|=
name|processQuery
argument_list|(
name|query
argument_list|,
literal|1
argument_list|,
name|rowCollector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"val_0"
block|,
literal|"3"
block|}
argument_list|,
name|rowCollector
operator|.
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
interface|interface
name|RowProcessor
block|{
name|void
name|process
parameter_list|(
name|Row
name|row
parameter_list|)
function_decl|;
block|}
specifier|protected
specifier|static
class|class
name|RowCollector
implements|implements
name|RowProcessor
block|{
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|Schema
name|schema
init|=
literal|null
decl_stmt|;
name|int
name|numColumns
init|=
literal|0
decl_stmt|;
specifier|public
name|void
name|process
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|schema
operator|=
name|row
operator|.
name|getSchema
argument_list|()
expr_stmt|;
name|numColumns
operator|=
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|arr
init|=
operator|new
name|String
index|[
name|numColumns
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|numColumns
condition|;
operator|++
name|idx
control|)
block|{
name|Object
name|val
init|=
name|row
operator|.
name|getValue
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|arr
index|[
name|idx
index|]
operator|=
operator|(
name|val
operator|==
literal|null
condition|?
literal|null
else|:
name|val
operator|.
name|toString
argument_list|()
operator|)
expr_stmt|;
block|}
name|rows
operator|.
name|add
argument_list|(
name|arr
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Save the actual values from each row as opposed to the String representation.
specifier|protected
specifier|static
class|class
name|RowCollector2
implements|implements
name|RowProcessor
block|{
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|Schema
name|schema
init|=
literal|null
decl_stmt|;
name|int
name|numColumns
init|=
literal|0
decl_stmt|;
specifier|public
name|void
name|process
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|schema
operator|=
name|row
operator|.
name|getSchema
argument_list|()
expr_stmt|;
name|numColumns
operator|=
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|Object
index|[]
name|arr
init|=
operator|new
name|Object
index|[
name|numColumns
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|numColumns
condition|;
operator|++
name|idx
control|)
block|{
name|arr
index|[
name|idx
index|]
operator|=
name|row
operator|.
name|getValue
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
name|rows
operator|.
name|add
argument_list|(
name|arr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|int
name|processQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|int
name|numSplits
parameter_list|,
name|RowProcessor
name|rowProcessor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|processQuery
argument_list|(
literal|null
argument_list|,
name|query
argument_list|,
name|numSplits
argument_list|,
name|rowProcessor
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|InputFormat
argument_list|<
name|NullWritable
argument_list|,
name|Row
argument_list|>
name|getInputFormat
parameter_list|()
function_decl|;
specifier|protected
name|int
name|processQuery
parameter_list|(
name|String
name|currentDatabase
parameter_list|,
name|String
name|query
parameter_list|,
name|int
name|numSplits
parameter_list|,
name|RowProcessor
name|rowProcessor
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|String
name|pwd
init|=
name|user
decl_stmt|;
name|String
name|handleId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|InputFormat
argument_list|<
name|NullWritable
argument_list|,
name|Row
argument_list|>
name|inputFormat
init|=
name|getInputFormat
argument_list|()
decl_stmt|;
comment|// Get splits
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|URL_KEY
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|USER_KEY
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|PWD_KEY
argument_list|,
name|pwd
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|QUERY_KEY
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|HANDLE_ID
argument_list|,
name|handleId
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentDatabase
operator|!=
literal|null
condition|)
block|{
name|job
operator|.
name|set
argument_list|(
name|LlapBaseInputFormat
operator|.
name|DB_KEY
argument_list|,
name|currentDatabase
argument_list|)
expr_stmt|;
block|}
name|InputSplit
index|[]
name|splits
init|=
name|inputFormat
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
name|numSplits
argument_list|)
decl_stmt|;
comment|// Fetch rows from splits
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InputSplit
name|split
range|:
name|splits
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Processing split "
operator|+
name|split
operator|.
name|getLocations
argument_list|()
argument_list|)
expr_stmt|;
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|Row
argument_list|>
name|reader
init|=
name|inputFormat
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|job
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Row
name|row
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|row
argument_list|)
condition|)
block|{
name|rowProcessor
operator|.
name|process
argument_list|(
name|row
argument_list|)
expr_stmt|;
operator|++
name|rowCount
expr_stmt|;
block|}
comment|//In arrow-mode this will throw exception unless all buffers have been released
comment|//See org.apache.hadoop.hive.llap.LlapArrowBatchRecordReader
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|LlapBaseInputFormat
operator|.
name|close
argument_list|(
name|handleId
argument_list|)
expr_stmt|;
return|return
name|rowCount
return|;
block|}
comment|/**    * Test CLI kill command of a query that is running.    * We spawn 2 threads - one running the query and    * the other attempting to cancel.    * We're using a dummy udf to simulate a query,    * that runs for a sufficiently long time.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testKillQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"testtab1"
decl_stmt|;
name|createTestTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Connection
name|con
init|=
name|hs2Conn
decl_stmt|;
name|Connection
name|con2
init|=
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|String
name|udfName
init|=
name|TestJdbcWithMiniHS2
operator|.
name|SleepMsUDF
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Statement
name|stmt1
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|Statement
name|stmt2
init|=
name|con2
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt1
operator|.
name|execute
argument_list|(
literal|"create temporary function sleepMsUDF as '"
operator|+
name|udfName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|stmt1
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ExceptionHolder
name|tExecuteHolder
init|=
operator|new
name|ExceptionHolder
argument_list|()
decl_stmt|;
name|ExceptionHolder
name|tKillHolder
init|=
operator|new
name|ExceptionHolder
argument_list|()
decl_stmt|;
comment|// Thread executing the query
name|Thread
name|tExecute
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Executing query: "
argument_list|)
expr_stmt|;
comment|// The test table has 500 rows, so total query time should be ~ 500*500ms
name|stmt
operator|.
name|executeQuery
argument_list|(
literal|"select sleepMsUDF(t1.under_col, 100), t1.under_col, t2.under_col "
operator|+
literal|"from "
operator|+
name|tableName
operator|+
literal|" t1 join "
operator|+
name|tableName
operator|+
literal|" t2 on t1.under_col = t2.under_col"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting SQLException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|tExecuteHolder
operator|.
name|throwable
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Thread killing the query
name|Thread
name|tKill
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|String
name|queryId
init|=
operator|(
operator|(
name|HiveStatement
operator|)
name|stmt
operator|)
operator|.
name|getQueryId
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Killing query: "
operator|+
name|queryId
argument_list|)
expr_stmt|;
name|stmt2
operator|.
name|execute
argument_list|(
literal|"kill query '"
operator|+
name|queryId
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|stmt2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|tKillHolder
operator|.
name|throwable
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|tExecute
operator|.
name|start
argument_list|()
expr_stmt|;
name|tKill
operator|.
name|start
argument_list|()
expr_stmt|;
name|tExecute
operator|.
name|join
argument_list|()
expr_stmt|;
name|tKill
operator|.
name|join
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|con2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"tExecute"
argument_list|,
name|tExecuteHolder
operator|.
name|throwable
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"tCancel"
argument_list|,
name|tKillHolder
operator|.
name|throwable
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|ExceptionHolder
block|{
name|Throwable
name|throwable
decl_stmt|;
block|}
block|}
end_class

end_unit

