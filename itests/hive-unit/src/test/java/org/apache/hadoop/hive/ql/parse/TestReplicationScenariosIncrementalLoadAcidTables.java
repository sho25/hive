begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|gzip
operator|.
name|GzipJSONMessageEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|PathBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|WarehouseInstance
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ReplChangeManager
operator|.
name|SOURCE_OF_REPLICATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
operator|.
name|isFullAcidTable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
operator|.
name|isTransactionalTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ReplicationTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * TestReplicationScenariosAcidTables - test replication for ACID tables  */
end_comment

begin_class
specifier|public
class|class
name|TestReplicationScenariosIncrementalLoadAcidTables
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReplicationScenariosIncrementalLoadAcidTables
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
name|WarehouseInstance
name|primary
decl_stmt|;
specifier|private
specifier|static
name|WarehouseInstance
name|replica
decl_stmt|,
name|replicaNonAcid
decl_stmt|,
name|replicaMigration
decl_stmt|,
name|primaryMigration
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|String
name|primaryDbName
decl_stmt|,
name|replicatedDbName
decl_stmt|,
name|primaryDbNameExtra
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|classLevelSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overrides
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EVENT_MESSAGE_FACTORY
operator|.
name|getHiveName
argument_list|()
argument_list|,
name|GzipJSONMessageEncoder
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|internalBeforeClassSetup
argument_list|(
name|overrides
argument_list|,
name|TestReplicationScenariosIncrementalLoadAcidTables
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|internalBeforeClassSetup
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overrides
parameter_list|,
name|Class
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.client.use.datanode.hostname"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser."
operator|+
name|Utils
operator|.
name|getUGI
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|".hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|miniDFSCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|acidConfs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.support.concurrency"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.txn.manager"
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.DbTxnManager"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.client.capability.check"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.repl.bootstrap.dump.open.txn.timeout"
argument_list|,
literal|"1s"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.exec.dynamic.partition.mode"
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.strict.checks.bucketing"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.mapred.mode"
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"mapred.input.dir.recursive"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.disallow.incompatible.col.type.changes"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|acidConfs
operator|.
name|putAll
argument_list|(
name|overrides
argument_list|)
expr_stmt|;
name|primary
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|acidConfs
argument_list|)
expr_stmt|;
name|replica
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|acidConfs
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overridesForHiveConf1
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.support.concurrency"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.txn.manager"
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.DummyTxnManager"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.client.capability.check"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|replicaNonAcid
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|overridesForHiveConf1
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overridesForHiveConfReplicaMigration
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.support.concurrency"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.txn.manager"
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.DbTxnManager"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.client.capability.check"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.repl.bootstrap.dump.open.txn.timeout"
argument_list|,
literal|"1s"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.exec.dynamic.partition.mode"
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.strict.checks.bucketing"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.mapred.mode"
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"mapred.input.dir.recursive"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.disallow.incompatible.col.type.changes"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.strict.managed.tables"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|replicaMigration
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|overridesForHiveConfReplicaMigration
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overridesForHiveConfPrimaryMigration
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.client.capability.check"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.repl.bootstrap.dump.open.txn.timeout"
argument_list|,
literal|"1s"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.exec.dynamic.partition.mode"
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.strict.checks.bucketing"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.mapred.mode"
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"mapred.input.dir.recursive"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.disallow.incompatible.col.type.changes"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.support.concurrency"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.txn.manager"
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.DummyTxnManager"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.strict.managed.tables"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|primaryMigration
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|overridesForHiveConfPrimaryMigration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|classLevelTearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|primary
operator|.
name|close
argument_list|()
expr_stmt|;
name|replica
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Throwable
block|{
name|primaryDbName
operator|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_"
operator|+
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|replicatedDbName
operator|=
literal|"replicated_"
operator|+
name|primaryDbName
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|primaryDbName
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
expr_stmt|;
name|primaryDbNameExtra
operator|=
name|primaryDbName
operator|+
literal|"_extra"
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|primaryDbNameExtra
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|primaryDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|replicatedDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|replicaNonAcid
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|replicatedDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|primaryDbName
operator|+
literal|"_extra cascade"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAcidTableIncrementalReplication
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|bootStrapDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootStrapDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"testInsert"
decl_stmt|;
name|String
name|tableNameMM
init|=
name|tableName
operator|+
literal|"_MM"
decl_stmt|;
name|ReplicationTestUtils
operator|.
name|appendInsert
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|primaryDbNameExtra
argument_list|,
name|tableName
argument_list|,
name|tableNameMM
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|appendDelete
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|primaryDbNameExtra
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|appendUpdate
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|primaryDbNameExtra
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|appendTruncate
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|primaryDbNameExtra
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|appendInsertIntoFromSelect
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|primaryDbNameExtra
argument_list|,
name|tableName
argument_list|,
name|tableNameMM
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|appendMerge
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|primaryDbNameExtra
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|appendCreateAsSelect
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|primaryDbNameExtra
argument_list|,
name|tableName
argument_list|,
name|tableNameMM
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|appendImport
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|primaryDbNameExtra
argument_list|,
name|tableName
argument_list|,
name|tableNameMM
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|appendInsertOverwrite
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|primaryDbNameExtra
argument_list|,
name|tableName
argument_list|,
name|tableNameMM
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|appendLoadLocal
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|primaryDbNameExtra
argument_list|,
name|tableName
argument_list|,
name|tableNameMM
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|appendInsertUnion
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|primaryDbNameExtra
argument_list|,
name|tableName
argument_list|,
name|tableNameMM
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|appendMultiStatementTxn
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|primaryDbNameExtra
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|appendMultiStatementTxnUpdateDelete
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|primaryDbNameExtra
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|appendAlterTable
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|primaryDbNameExtra
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|verifyIncrementalLoadInt
argument_list|(
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|,
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendDelete
parameter_list|(
name|WarehouseInstance
name|primary
parameter_list|,
name|String
name|primaryDbName
parameter_list|,
name|String
name|primaryDbNameExtra
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
literal|"testDelete"
decl_stmt|;
name|ReplicationTestUtils
operator|.
name|insertRecords
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|primaryDbNameExtra
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|ReplicationTestUtils
operator|.
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|deleteRecords
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select count(*) from "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"0"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendUpdate
parameter_list|(
name|WarehouseInstance
name|primary
parameter_list|,
name|String
name|primaryDbName
parameter_list|,
name|String
name|primaryDbNameExtra
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
literal|"testUpdate"
decl_stmt|;
name|ReplicationTestUtils
operator|.
name|insertRecords
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|primaryDbNameExtra
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|ReplicationTestUtils
operator|.
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|updateRecords
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select value from "
operator|+
name|tableName
operator|+
literal|" order by value"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendMultiStatementTxnUpdateDelete
parameter_list|(
name|WarehouseInstance
name|primary
parameter_list|,
name|String
name|primaryDbName
parameter_list|,
name|String
name|primaryDbNameExtra
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
literal|"testMultiStatementTxnUpdate"
decl_stmt|;
name|String
name|tableNameDelete
init|=
literal|"testMultiStatementTxnDelete"
decl_stmt|;
name|String
index|[]
name|resultArray
init|=
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|}
decl_stmt|;
name|String
name|tableProperty
init|=
literal|"'transactional'='true'"
decl_stmt|;
name|String
name|tableStorage
init|=
literal|"STORED AS ORC"
decl_stmt|;
name|ReplicationTestUtils
operator|.
name|insertIntoDB
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|tableName
argument_list|,
name|tableProperty
argument_list|,
name|tableStorage
argument_list|,
name|resultArray
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updateRecords
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select value from "
operator|+
name|tableName
operator|+
literal|" order by value"
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|}
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|insertIntoDB
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|tableNameDelete
argument_list|,
name|tableProperty
argument_list|,
name|tableStorage
argument_list|,
name|resultArray
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|deleteRecords
argument_list|(
name|tableNameDelete
argument_list|)
expr_stmt|;
name|selectStmtList
operator|.
name|add
argument_list|(
literal|"select count(*) from "
operator|+
name|tableNameDelete
argument_list|)
expr_stmt|;
name|expectedValues
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"0"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplCM
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
literal|"testcm"
decl_stmt|;
name|String
name|tableNameMM
init|=
name|tableName
operator|+
literal|"_MM"
decl_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[]
block|{
literal|"5"
block|}
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|incrementalDump
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|bootStrapDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootStrapDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|insertRecords
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|primaryDbNameExtra
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|ReplicationTestUtils
operator|.
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|incrementalDump
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"drop table "
operator|+
name|primaryDbName
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incrementalDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|verifyResultsInReplicaInt
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"select count(*) from "
operator|+
name|tableName
argument_list|,
literal|"select count(*) from "
operator|+
name|tableName
operator|+
literal|"_nopart"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|result
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|insertRecords
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
name|primaryDbNameExtra
argument_list|,
name|tableNameMM
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|ReplicationTestUtils
operator|.
name|OperationType
operator|.
name|REPL_TEST_ACID_INSERT
argument_list|)
expr_stmt|;
name|incrementalDump
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"drop table "
operator|+
name|primaryDbName
operator|+
literal|"."
operator|+
name|tableNameMM
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incrementalDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|verifyResultsInReplicaInt
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"select count(*) from "
operator|+
name|tableNameMM
argument_list|,
literal|"select count(*) from "
operator|+
name|tableNameMM
operator|+
literal|"_nopart"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|result
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyResultsInReplicaInt
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|)
throws|throws
name|Throwable
block|{
name|ReplicationTestUtils
operator|.
name|verifyResultsInReplica
argument_list|(
name|replica
argument_list|,
name|replicatedDbName
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
block|}
specifier|private
name|WarehouseInstance
operator|.
name|Tuple
name|verifyIncrementalLoadInt
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
parameter_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
parameter_list|,
name|String
name|lastReplId
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|ReplicationTestUtils
operator|.
name|verifyIncrementalLoad
argument_list|(
name|primary
argument_list|,
name|replica
argument_list|,
name|primaryDbName
argument_list|,
name|replicatedDbName
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|,
name|lastReplId
argument_list|)
return|;
block|}
specifier|private
name|void
name|deleteRecords
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"delete from "
operator|+
name|tableName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select count(*) from "
operator|+
name|tableName
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateRecords
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"update "
operator|+
name|tableName
operator|+
literal|" set value = 100 where key>= 2"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select value from "
operator|+
name|tableName
operator|+
literal|" order by value"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|WarehouseInstance
operator|.
name|Tuple
name|prepareDataAndDump
parameter_list|(
name|String
name|primaryDbName
parameter_list|,
name|String
name|fromReplId
parameter_list|)
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primaryMigration
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tacid (id int) clustered by(id) into 3 buckets stored as orc "
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacid values(1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacid values(2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacid values(3)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tacidpart (place string) partitioned by (country string) clustered by(place) "
operator|+
literal|"into 3 buckets stored as orc "
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table tacidpart add partition(country='france')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacidpart partition(country='india') values('mumbai')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacidpart partition(country='us') values('sf')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacidpart partition(country='france') values('paris')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tflat (rank int) stored as orc tblproperties(\"transactional\"=\"false\")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tflat values(11)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tflat values(22)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tflattext (id int) "
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tflattext values(111), (222)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tflattextpart (id int) partitioned by (country string) "
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tflattextpart partition(country='india') values(1111), (2222)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tflattextpart partition(country='us') values(3333)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table avro_table ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.avro.AvroSerDe' "
operator|+
literal|"stored as avro tblproperties ('avro.schema.url'='"
operator|+
name|primaryMigration
operator|.
name|avroSchemaFile
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into avro_table values('str1', 10)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|fromReplId
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isTransactionalTable
argument_list|(
name|primaryMigration
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"tacid"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isTransactionalTable
argument_list|(
name|primaryMigration
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"tacidpart"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isTransactionalTable
argument_list|(
name|primaryMigration
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"tflat"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isTransactionalTable
argument_list|(
name|primaryMigration
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"tflattext"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isTransactionalTable
argument_list|(
name|primaryMigration
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"tflattextpart"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|avroTable
init|=
name|primaryMigration
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"avro_table"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isTransactionalTable
argument_list|(
name|avroTable
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|avroTable
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tuple
return|;
block|}
specifier|private
name|void
name|verifyLoadExecution
parameter_list|(
name|String
name|replicatedDbName
parameter_list|,
name|String
name|lastReplId
parameter_list|)
throws|throws
name|Throwable
block|{
name|replicaMigration
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"tacid"
block|,
literal|"tacidpart"
block|,
literal|"tflat"
block|,
literal|"tflattext"
block|,
literal|"tflattextpart"
block|,
literal|"avro_table"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|lastReplId
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from tacid order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from tacidpart order by country"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"france"
block|,
literal|"india"
block|,
literal|"us"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select rank from tflat order by rank"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"11"
block|,
literal|"22"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from tflattext order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"111"
block|,
literal|"222"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from tflattextpart order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1111"
block|,
literal|"2222"
block|,
literal|"3333"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select col1 from avro_table"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"str1"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isFullAcidTable
argument_list|(
name|replicaMigration
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tacid"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isFullAcidTable
argument_list|(
name|replicaMigration
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tacidpart"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isFullAcidTable
argument_list|(
name|replicaMigration
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tflat"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|isFullAcidTable
argument_list|(
name|replicaMigration
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tflattext"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|isFullAcidTable
argument_list|(
name|replicaMigration
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tflattextpart"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isTransactionalTable
argument_list|(
name|replicaMigration
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tflattext"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isTransactionalTable
argument_list|(
name|replicaMigration
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tflattextpart"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|avroTable
init|=
name|replicaMigration
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"avro_table"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|avroTable
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|tablePath
init|=
operator|new
name|PathBuilder
argument_list|(
name|replicaMigration
operator|.
name|externalTableWarehouseRoot
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|addDescendant
argument_list|(
name|replicatedDbName
operator|+
literal|".db"
argument_list|)
operator|.
name|addDescendant
argument_list|(
literal|"avro_table"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|avroTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|tablePath
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMigrationManagedToAcid
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tupleForBootStrap
init|=
name|primaryMigration
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|prepareDataAndDump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tupleForIncremental
init|=
name|primaryMigration
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tupleForBootStrap
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
name|replicaMigration
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|verifyLoadExecution
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replicaMigration
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|replicatedDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|replicaMigration
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|tupleForBootStrap
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|replicaMigration
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|tupleForIncremental
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|verifyLoadExecution
argument_list|(
name|replicatedDbName
argument_list|,
name|tupleForIncremental
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

