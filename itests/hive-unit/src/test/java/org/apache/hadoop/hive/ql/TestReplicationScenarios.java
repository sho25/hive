begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ReplicationSemanticAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|TestReplicationScenarios
block|{
specifier|final
specifier|static
name|String
name|DBNOTIF_LISTENER_CLASSNAME
init|=
literal|"org.apache.hive.hcatalog.listener.DbNotificationListener"
decl_stmt|;
comment|// FIXME : replace with hive copy once that is copied
specifier|final
specifier|static
name|String
name|tid
init|=
name|TestReplicationScenarios
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'_'
argument_list|)
operator|+
literal|"_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
specifier|static
name|String
name|TEST_PATH
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.warehouse.dir"
argument_list|,
literal|"/tmp"
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|tid
decl_stmt|;
specifier|static
name|HiveConf
name|hconf
decl_stmt|;
specifier|static
name|boolean
name|useExternalMS
init|=
literal|false
decl_stmt|;
specifier|static
name|int
name|msPort
decl_stmt|;
specifier|static
name|Driver
name|driver
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReplicationScenarios
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|String
argument_list|>
name|lastResults
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|hconf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestReplicationScenarios
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|metastoreUri
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test."
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
operator|.
name|varname
argument_list|)
decl_stmt|;
if|if
condition|(
name|metastoreUri
operator|!=
literal|null
condition|)
block|{
name|hconf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
name|metastoreUri
argument_list|)
expr_stmt|;
name|useExternalMS
operator|=
literal|true
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|WindowsPathUtil
operator|.
name|convertPathsFromWindowsToHdfs
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_EVENT_LISTENERS
operator|.
name|varname
argument_list|,
name|DBNOTIF_LISTENER_CLASSNAME
argument_list|)
expr_stmt|;
comment|// turn on db notification listener on metastore
name|msPort
operator|=
name|MetaStoreUtils
operator|.
name|startMetaStore
argument_list|()
expr_stmt|;
name|hconf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPLDIR
argument_list|,
name|TEST_PATH
operator|+
literal|"/hrepl/"
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
literal|"thrift://localhost:"
operator|+
name|msPort
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORETHRIFTCONNECTIONRETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|testPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|hconf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|driver
operator|=
operator|new
name|Driver
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|hconf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
block|{
comment|// FIXME : should clean up TEST_PATH, but not doing it now, for debugging's sake
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
comment|// before each test
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
comment|// after each test
block|}
specifier|private
specifier|static
name|int
name|next
init|=
literal|0
decl_stmt|;
specifier|private
specifier|synchronized
name|void
name|advanceDumpDir
parameter_list|()
block|{
name|next
operator|++
expr_stmt|;
name|ReplicationSemanticAnalyzer
operator|.
name|injectNextDumpDirForTest
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|next
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests basic operation - creates a db, with 4 tables, 2 ptned and 2 unptned.    * Inserts data into one of the ptned tables, and one of the unptned tables,    * and verifies that a REPL DUMP followed by a REPL LOAD is able to load it    * appropriately.    */
annotation|@
name|Test
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"basic"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|testName
operator|+
literal|"_"
operator|+
name|tid
decl_stmt|;
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_empty(a string) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_empty(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"thirteen"
block|,
literal|"fourteen"
block|,
literal|"fifteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"sixteen"
block|,
literal|"seventeen"
block|}
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
name|unptn_locn
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_unptn"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_1
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_ptn1"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_2
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_ptn2"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createTestDataFile
argument_list|(
name|unptn_locn
argument_list|,
name|unptn_data
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_1
argument_list|,
name|ptn_data_1
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_2
argument_list|,
name|ptn_data_2
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|unptn_locn
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|unptn_data
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_1
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=1)"
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=1"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_1
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_2
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=2)"
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=2"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_2
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_empty"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|empty
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned_empty"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|empty
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|unptn_data
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=1"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_1
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=2"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_2
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_empty"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|empty
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned_empty"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|empty
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalAdds
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"incrementalAdds"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|testName
operator|+
literal|"_"
operator|+
name|tid
decl_stmt|;
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_empty(a string) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_empty(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"thirteen"
block|,
literal|"fourteen"
block|,
literal|"fifteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"sixteen"
block|,
literal|"seventeen"
block|}
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
name|unptn_locn
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_unptn"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_1
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_ptn1"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_2
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_ptn2"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createTestDataFile
argument_list|(
name|unptn_locn
argument_list|,
name|unptn_data
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_1
argument_list|,
name|ptn_data_1
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_2
argument_list|,
name|ptn_data_2
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_empty"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|empty
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned_empty"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|empty
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|unptn_locn
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|unptn_data
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_late AS SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned_late"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|unptn_data
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_1
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=1)"
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=1"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_1
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_2
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=2)"
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=2"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_2
argument_list|)
expr_stmt|;
comment|// verified up to here.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_late(a string) PARTITIONED BY (b int) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_1
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_late PARTITION(b=1)"
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_late WHERE b=1"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_1
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_2
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_late PARTITION(b=2)"
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_late WHERE b=2"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_2
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dumped to {} with id {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned_empty"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|empty
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_empty"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|empty
argument_list|)
expr_stmt|;
comment|//  this does not work because LOAD DATA LOCAL INPATH into an unptned table seems
comment|//  to use ALTER_TABLE only - it does not emit an INSERT or CREATE - re-enable after
comment|//  fixing that.
comment|//    run("SELECT * from " + dbName + "_dupe.unptned");
comment|//    verifyResults(unptn_data);
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned_late"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|unptn_data
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=1"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_1
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=2"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_2
argument_list|)
expr_stmt|;
comment|// verified up to here.
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_late WHERE b=1"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_1
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_late WHERE b=2"
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getResult
parameter_list|(
name|int
name|rowNum
parameter_list|,
name|int
name|colNum
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getResult
argument_list|(
name|rowNum
argument_list|,
name|colNum
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|String
name|getResult
parameter_list|(
name|int
name|rowNum
parameter_list|,
name|int
name|colNum
parameter_list|,
name|boolean
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|reuse
condition|)
block|{
name|lastResults
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|driver
operator|.
name|getResults
argument_list|(
name|lastResults
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandNeedRetryException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|(
name|lastResults
operator|.
name|get
argument_list|(
name|rowNum
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\001"
argument_list|)
operator|)
index|[
name|colNum
index|]
return|;
block|}
specifier|private
name|void
name|verifyResults
parameter_list|(
name|String
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|driver
operator|.
name|getResults
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandNeedRetryException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Expecting {}"
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got {}"
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|data
index|[
name|i
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|run
parameter_list|(
name|String
name|cmd
parameter_list|)
throws|throws
name|RuntimeException
block|{
name|run
argument_list|(
name|cmd
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// default arg-less run simply runs, and does not care about failure
block|}
specifier|private
specifier|static
name|boolean
name|run
parameter_list|(
name|String
name|cmd
parameter_list|,
name|boolean
name|errorOnFail
parameter_list|)
throws|throws
name|RuntimeException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|success
operator|=
operator|(
name|ret
operator|.
name|getException
argument_list|()
operator|==
literal|null
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error {} : {} running [{}]."
argument_list|,
name|ret
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|ret
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CommandNeedRetryException
name|e
parameter_list|)
block|{
if|if
condition|(
name|errorOnFail
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// do nothing else
block|}
block|}
return|return
name|success
return|;
block|}
specifier|public
specifier|static
name|void
name|createTestDataFile
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
index|[]
name|lines
parameter_list|)
throws|throws
name|IOException
block|{
name|FileWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|line
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

