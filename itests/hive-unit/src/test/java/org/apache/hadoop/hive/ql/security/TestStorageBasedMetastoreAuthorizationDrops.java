begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test cases focusing on drop table permission checks  */
end_comment

begin_class
specifier|public
class|class
name|TestStorageBasedMetastoreAuthorizationDrops
extends|extends
name|StorageBasedMetastoreTestBase
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDropDatabase
parameter_list|()
throws|throws
name|Exception
block|{
name|dropDatabaseByOtherUser
argument_list|(
literal|"-rwxrwxrwx"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dropDatabaseByOtherUser
argument_list|(
literal|"-rwxrwxrwt"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates db and tries to drop as 'other' user    * @param perm - permission for warehouse dir    * @param expectedRet - expected return code for drop by other user    * @throws Exception    */
specifier|public
name|void
name|dropDatabaseByOtherUser
parameter_list|(
name|String
name|perm
parameter_list|,
name|int
name|expectedRet
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
name|getTestDbName
argument_list|()
decl_stmt|;
name|setPermissions
argument_list|(
name|clientHiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|resp
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|dbName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
name|msc
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|validateCreateDb
argument_list|(
name|db
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|InjectableDummyAuthenticator
operator|.
name|injectMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|resp
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedRet
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropTable
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTableByOtherUser
argument_list|(
literal|"-rwxrwxrwx"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dropTableByOtherUser
argument_list|(
literal|"-rwxrwxrwt"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param perm dir permission for database dir    * @param expectedRet expected return code on drop table    * @throws Exception    */
specifier|public
name|void
name|dropTableByOtherUser
parameter_list|(
name|String
name|perm
parameter_list|,
name|int
name|expectedRet
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
name|getTestDbName
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|getTestTableName
argument_list|()
decl_stmt|;
name|setPermissions
argument_list|(
name|clientHiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
argument_list|,
literal|"-rwxrwxrwx"
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|resp
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|dbName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
name|msc
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|validateCreateDb
argument_list|(
name|db
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|setPermissions
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|String
name|dbDotTable
init|=
name|dbName
operator|+
literal|"."
operator|+
name|tblName
decl_stmt|;
name|resp
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|dbDotTable
operator|+
literal|"(i int)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|InjectableDummyAuthenticator
operator|.
name|injectMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|resp
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table "
operator|+
name|dbDotTable
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedRet
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Drop view should not be blocked by SBA. View will not have any location to drop.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testDropView
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
name|getTestDbName
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|getTestTableName
argument_list|()
decl_stmt|;
name|String
name|viewName
init|=
literal|"view"
operator|+
name|tblName
decl_stmt|;
name|setPermissions
argument_list|(
name|clientHiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
argument_list|,
literal|"-rwxrwxrwx"
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|resp
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|dbName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
name|msc
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|validateCreateDb
argument_list|(
name|db
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|setPermissions
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|,
literal|"-rwxrwxrwt"
argument_list|)
expr_stmt|;
name|String
name|dbDotTable
init|=
name|dbName
operator|+
literal|"."
operator|+
name|tblName
decl_stmt|;
name|resp
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|dbDotTable
operator|+
literal|"(i int)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|dbDotView
init|=
name|dbName
operator|+
literal|"."
operator|+
name|viewName
decl_stmt|;
name|resp
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create view "
operator|+
name|dbDotView
operator|+
literal|" as select * from "
operator|+
name|dbDotTable
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop view "
operator|+
name|dbDotView
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"drop table "
operator|+
name|dbDotTable
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|dropPartitionByOtherUser
argument_list|(
literal|"-rwxrwxrwx"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dropPartitionByOtherUser
argument_list|(
literal|"-rwxrwxrwt"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param perm permissions for table dir    * @param expectedRet expected return code    * @throws Exception    */
specifier|public
name|void
name|dropPartitionByOtherUser
parameter_list|(
name|String
name|perm
parameter_list|,
name|int
name|expectedRet
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
name|getTestDbName
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|getTestTableName
argument_list|()
decl_stmt|;
name|setPermissions
argument_list|(
name|clientHiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
argument_list|,
literal|"-rwxrwxrwx"
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|resp
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|dbName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
name|msc
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|validateCreateDb
argument_list|(
name|db
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|setPermissions
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|,
literal|"-rwxrwxrwx"
argument_list|)
expr_stmt|;
name|String
name|dbDotTable
init|=
name|dbName
operator|+
literal|"."
operator|+
name|tblName
decl_stmt|;
name|resp
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|dbDotTable
operator|+
literal|"(i int) partitioned by (b string)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|tab
init|=
name|msc
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|setPermissions
argument_list|(
name|tab
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|resp
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table "
operator|+
name|dbDotTable
operator|+
literal|" add partition (b='2011')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|InjectableDummyAuthenticator
operator|.
name|injectMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|resp
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table "
operator|+
name|dbDotTable
operator|+
literal|" drop partition (b='2011')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedRet
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

