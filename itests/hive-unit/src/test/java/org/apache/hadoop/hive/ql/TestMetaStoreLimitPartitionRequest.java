begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|cli
operator|.
name|HiveSQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This unit test is for testing HIVE-13884 with more complex queries and  * hive.metastore.limit.partition.request enabled.  * It covers cases when the query predicates can be pushed down and the  * number of partitions can be retrieved via directSQL.  * It also covers cases when the number of partitions cannot be retrieved  * via directSQL, so it falls back to ORM.  */
end_comment

begin_class
specifier|public
class|class
name|TestMetaStoreLimitPartitionRequest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DB_NAME
init|=
literal|"max_partition_test_db"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"max_partition_test_table"
decl_stmt|;
specifier|private
specifier|static
name|int
name|PARTITION_REQUEST_LIMIT
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
name|MiniHS2
name|miniHS2
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|Connection
name|hs2Conn
init|=
literal|null
decl_stmt|;
specifier|private
name|Statement
name|stmt
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
operator|.
name|forName
argument_list|(
name|MiniHS2
operator|.
name|getJdbcDriverName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|DriverManager
operator|.
name|setLoginTimeout
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_LIMIT_PARTITION_REQUEST
argument_list|,
name|PARTITION_REQUEST_LIMIT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_INTEGER_JDO_PUSHDOWN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_TRY_DIRECT_SQL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DYNAMICPARTITIONING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DYNAMICPARTITIONINGMODE
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_CBO_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|miniHS2
operator|=
operator|new
name|MiniHS2
operator|.
name|Builder
argument_list|()
operator|.
name|withConf
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overlayProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|overlayProps
argument_list|)
expr_stmt|;
name|createDb
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|createDb
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|conn
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|Statement
name|stmt2
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt2
operator|.
name|execute
argument_list|(
literal|"DROP DATABASE IF EXISTS "
operator|+
name|DB_NAME
operator|+
literal|" CASCADE"
argument_list|)
expr_stmt|;
name|stmt2
operator|.
name|execute
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|DB_NAME
argument_list|)
expr_stmt|;
name|stmt2
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|hs2Conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|DB_NAME
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|hs2Conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"USE "
operator|+
name|DB_NAME
argument_list|)
expr_stmt|;
name|createTable
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tmpTableName
init|=
name|TABLE_NAME
operator|+
literal|"_tmp"
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tmpTableName
operator|+
literal|" (id string, value string, num string, ds date) ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n' STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"INSERT OVERWRITE TABLE "
operator|+
name|tmpTableName
operator|+
literal|" VALUES ('1', 'value1', '25', '2008-04-09'), ('2', 'value2', '30', '2008-04-09'), "
operator|+
literal|"('3', 'value3', '35', '2008-04-09'), ('4', 'value4', '40', '2008-04-09'), "
operator|+
literal|"('5', 'value5', '25', '2008-05-09'), ('6', 'value6', '30', '2008-05-09'), "
operator|+
literal|"('7', 'value7', '35', '2008-05-09'), ('8', 'value8', '40', '2008-05-09'), "
operator|+
literal|"('9', 'value9', '25', '2009-04-09'), ('10', 'value10', '30', '2009-04-09'), "
operator|+
literal|"('11', 'value11', '35', '2009-04-09'), ('12', 'value12', '40', '2009-04-09')"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE "
operator|+
name|TABLE_NAME
operator|+
literal|" (id string, value string) PARTITIONED BY (num string, ds date)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"INSERT OVERWRITE TABLE "
operator|+
name|TABLE_NAME
operator|+
literal|" PARTITION (num, ds) SELECT id, value, num, ds FROM "
operator|+
name|tmpTableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tmpTableName
init|=
name|TABLE_NAME
operator|+
literal|"_tmp"
decl_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|tmpTableName
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE IF EXISTS "
operator|+
name|TABLE_NAME
operator|+
literal|"_num_tmp"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hs2Conn
operator|!=
literal|null
condition|)
block|{
name|hs2Conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterTest
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|miniHS2
operator|!=
literal|null
operator|&&
name|miniHS2
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* Tests with queries which can be pushed down and executed with directSQL */
annotation|@
name|Test
specifier|public
name|void
name|testSimpleQueryWithDirectSql
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queryString
init|=
literal|"select value from %s where num='25' and ds='2008-04-09'"
decl_stmt|;
name|executeQuery
argument_list|(
name|queryString
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoreComplexQueryWithDirectSql
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queryString
init|=
literal|"select value from %s where (ds between '2009-01-01' and '2009-12-31' and num='25') or (ds between '2008-01-01' and '2008-12-31' and num='30')"
decl_stmt|;
name|executeQuery
argument_list|(
name|queryString
argument_list|,
literal|"value2"
argument_list|,
literal|"value6"
argument_list|,
literal|"value9"
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests with queries which can be pushed down and executed with directSQL, but the number of    * partitions which should be fetched is bigger than the maximum set by the    * hive.metastore.limit.partition.request parameter.    */
annotation|@
name|Test
specifier|public
name|void
name|testSimpleQueryWithDirectSqlTooManyPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queryString
init|=
literal|"select value from %s where ds>'2008-04-20'"
decl_stmt|;
name|executeQueryExceedPartitionLimit
argument_list|(
name|queryString
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoreComplexQueryWithDirectSqlTooManyPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queryString
init|=
literal|"select value from %s where num='25' or (num='30' and ds between '2008-01-01' and '2008-12-31')"
decl_stmt|;
name|executeQueryExceedPartitionLimit
argument_list|(
name|queryString
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests with queries which cannot be executed with directSQL, because of type mismatch. The type    * of the num column is string, but the parameters used in the where clause are numbers. After    * falling back to ORM, the number of partitions can be fetched by the    * ObjectStore.getNumPartitionsViaOrmFilter method.    */
annotation|@
name|Test
specifier|public
name|void
name|testQueryWithFallbackToORM1
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queryString
init|=
literal|"select value from %s where num!=25 and num!=35 and num!=40"
decl_stmt|;
name|executeQuery
argument_list|(
name|queryString
argument_list|,
literal|"value2"
argument_list|,
literal|"value6"
argument_list|,
literal|"value10"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryWithFallbackToORMTooManyPartitions1
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queryString
init|=
literal|"select value from %s where num=30 or num=25"
decl_stmt|;
name|executeQueryExceedPartitionLimit
argument_list|(
name|queryString
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests with queries which cannot be executed with directSQL, because of type mismatch. The type    * of the num column is string, but the parameters used in the where clause are numbers. After    * falling back to ORM the number of partitions cannot be fetched by the    * ObjectStore.getNumPartitionsViaOrmFilter method. They are fetched by the    * ObjectStore.getPartitionNamesPrunedByExprNoTxn method.    */
annotation|@
name|Test
specifier|public
name|void
name|testQueryWithFallbackToORM2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queryString
init|=
literal|"select value from %s where num!=25 and ds='2008-04-09'"
decl_stmt|;
name|executeQuery
argument_list|(
name|queryString
argument_list|,
literal|"value2"
argument_list|,
literal|"value3"
argument_list|,
literal|"value4"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryWithFallbackToORM3
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queryString
init|=
literal|"select value from %s where num between 26 and 31"
decl_stmt|;
name|executeQuery
argument_list|(
name|queryString
argument_list|,
literal|"value2"
argument_list|,
literal|"value6"
argument_list|,
literal|"value10"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryWithFallbackToORMTooManyPartitions2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queryString
init|=
literal|"select value from %s where num!=25 and (ds='2008-04-09' or ds='2008-05-09')"
decl_stmt|;
name|executeQueryExceedPartitionLimit
argument_list|(
name|queryString
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryWithFallbackToORMTooManyPartitions3
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queryString
init|=
literal|"select value from %s where num>=30"
decl_stmt|;
name|executeQueryExceedPartitionLimit
argument_list|(
name|queryString
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryWithFallbackToORMTooManyPartitions4
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queryString
init|=
literal|"select value from %s where num between 20 and 50"
decl_stmt|;
name|executeQueryExceedPartitionLimit
argument_list|(
name|queryString
argument_list|,
literal|12
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests with queries which cannot be executed with directSQL, because the contain like or in.    * After falling back to ORM the number of partitions cannot be fetched by the    * ObjectStore.getNumPartitionsViaOrmFilter method. They are fetched by the    * ObjectStore.getPartitionNamesPrunedByExprNoTxn method.    */
annotation|@
name|Test
specifier|public
name|void
name|testQueryWithInWithFallbackToORM
parameter_list|()
throws|throws
name|Exception
block|{
name|setupNumTmpTable
argument_list|()
expr_stmt|;
name|String
name|queryString
init|=
literal|"select value from %s a where ds='2008-04-09' and a.num in (select value from "
operator|+
name|TABLE_NAME
operator|+
literal|"_num_tmp)"
decl_stmt|;
name|executeQuery
argument_list|(
name|queryString
argument_list|,
literal|"value1"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryWithInWithFallbackToORMTooManyPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|setupNumTmpTable
argument_list|()
expr_stmt|;
name|String
name|queryString
init|=
literal|"select value from %s a where a.num in (select value from "
operator|+
name|TABLE_NAME
operator|+
literal|"_num_tmp)"
decl_stmt|;
name|executeQueryExceedPartitionLimit
argument_list|(
name|queryString
argument_list|,
literal|12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryWithInWithFallbackToORMTooManyPartitions2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupNumTmpTable
argument_list|()
expr_stmt|;
name|String
name|queryString
init|=
literal|"select value from %s a where a.num in (select value from "
operator|+
name|TABLE_NAME
operator|+
literal|"_num_tmp where value='25')"
decl_stmt|;
name|executeQueryExceedPartitionLimit
argument_list|(
name|queryString
argument_list|,
literal|12
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryWithLikeWithFallbackToORMTooManyPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queryString
init|=
literal|"select value from %s where num like '3%%'"
decl_stmt|;
name|executeQueryExceedPartitionLimit
argument_list|(
name|queryString
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupNumTmpTable
parameter_list|()
throws|throws
name|SQLException
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE TABLE "
operator|+
name|TABLE_NAME
operator|+
literal|"_num_tmp (value string)"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"INSERT INTO "
operator|+
name|TABLE_NAME
operator|+
literal|"_num_tmp VALUES ('25')"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"INSERT INTO "
operator|+
name|TABLE_NAME
operator|+
literal|"_num_tmp VALUES ('30')"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|executeQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|String
modifier|...
name|expectedValues
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|queryStr
init|=
name|String
operator|.
name|format
argument_list|(
name|query
argument_list|,
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|ResultSet
name|result
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|queryStr
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedValueSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedValues
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|resultValues
init|=
name|getResultValues
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|String
name|errorMsg
init|=
name|getWrongResultErrorMsg
argument_list|(
name|queryStr
argument_list|,
name|expectedValueSet
operator|.
name|toString
argument_list|()
argument_list|,
name|resultValues
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|errorMsg
argument_list|,
name|resultValues
operator|.
name|equals
argument_list|(
name|expectedValueSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getResultValues
parameter_list|(
name|ResultSet
name|result
parameter_list|)
throws|throws
name|SQLException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|resultValues
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|result
operator|.
name|next
argument_list|()
condition|)
block|{
name|resultValues
operator|.
name|add
argument_list|(
name|result
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resultValues
return|;
block|}
specifier|private
name|void
name|executeQueryExceedPartitionLimit
parameter_list|(
name|String
name|query
parameter_list|,
name|int
name|expectedPartitionNumber
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|queryStr
init|=
name|String
operator|.
name|format
argument_list|(
name|query
argument_list|,
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|stmt
operator|.
name|executeQuery
argument_list|(
name|queryStr
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The query should have failed, because the number of requested partitions are bigger than "
operator|+
name|PARTITION_REQUEST_LIMIT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveSQLException
name|e
parameter_list|)
block|{
name|String
name|exceedLimitMsg
init|=
name|String
operator|.
name|format
argument_list|(
name|HiveMetaStore
operator|.
name|PARTITION_NUMBER_EXCEED_LIMIT_MSG
argument_list|,
name|expectedPartitionNumber
argument_list|,
name|TABLE_NAME
argument_list|,
name|PARTITION_REQUEST_LIMIT
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|LIMIT_PARTITION_REQUEST
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|getWrongExceptionMessage
argument_list|(
name|exceedLimitMsg
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|exceedLimitMsg
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getWrongResultErrorMsg
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|expectedValues
parameter_list|,
name|String
name|resultValues
parameter_list|)
block|{
name|StringBuilder
name|errorMsg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|errorMsg
operator|.
name|append
argument_list|(
literal|"The query '"
argument_list|)
expr_stmt|;
name|errorMsg
operator|.
name|append
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|errorMsg
operator|.
name|append
argument_list|(
literal|"' returned wrong values. It returned the values "
argument_list|)
expr_stmt|;
name|errorMsg
operator|.
name|append
argument_list|(
name|resultValues
argument_list|)
expr_stmt|;
name|errorMsg
operator|.
name|append
argument_list|(
literal|" instead of the expected "
argument_list|)
expr_stmt|;
name|errorMsg
operator|.
name|append
argument_list|(
name|expectedValues
argument_list|)
expr_stmt|;
return|return
name|errorMsg
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getWrongExceptionMessage
parameter_list|(
name|String
name|exceedLimitMsg
parameter_list|,
name|String
name|exceptionMessage
parameter_list|)
block|{
name|StringBuilder
name|errorMsg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|errorMsg
operator|.
name|append
argument_list|(
literal|"The message of the exception doesn't contain the expected '"
argument_list|)
expr_stmt|;
name|errorMsg
operator|.
name|append
argument_list|(
name|exceedLimitMsg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|errorMsg
operator|.
name|append
argument_list|(
literal|"'. It is: "
argument_list|)
expr_stmt|;
name|errorMsg
operator|.
name|append
argument_list|(
name|exceptionMessage
argument_list|)
expr_stmt|;
return|return
name|errorMsg
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

