begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
operator|.
name|BehaviourInjection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
operator|.
name|CallerArguments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|gzip
operator|.
name|GzipJSONMessageEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|ReplExternalTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ReplChangeManager
operator|.
name|SOURCE_OF_REPLICATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|ReplExternalTables
operator|.
name|FILE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|util
operator|.
name|ReplUtils
operator|.
name|INC_BOOTSTRAP_ROOT_DIR_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|util
operator|.
name|ReplUtils
operator|.
name|REPL_CLEAN_TABLES_FROM_BOOTSTRAP_CONFIG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TestReplicationScenariosExternalTables
extends|extends
name|BaseReplicationAcrossInstances
block|{
specifier|private
specifier|static
specifier|final
name|String
name|REPLICA_EXTERNAL_BASE
init|=
literal|"/replica_external_base"
decl_stmt|;
name|String
name|extraPrimaryDb
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|classLevelSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overrides
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EVENT_MESSAGE_FACTORY
operator|.
name|getHiveName
argument_list|()
argument_list|,
name|GzipJSONMessageEncoder
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_DUMP_METADATA_ONLY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DISTCP_DOAS_USER
operator|.
name|varname
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|internalBeforeClassSetup
argument_list|(
name|overrides
argument_list|,
name|TestReplicationScenarios
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Throwable
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
name|extraPrimaryDb
operator|=
literal|"extra_"
operator|+
name|primaryDbName
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|extraPrimaryDb
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replicationWithoutExternalTables
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
init|=
name|externalTableBasePathWithClause
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='false'"
argument_list|)
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t1 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t2 (place string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='us') values ('austin')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='france') values ('paris')"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
comment|// the _external_tables_file info only should be created if external tables are to be replicated not otherwise
name|assertFalse
argument_list|(
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|primaryDbName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't1'"
argument_list|)
operator|.
name|verifyFailure
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't2'"
argument_list|)
operator|.
name|verifyFailure
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t2"
block|}
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t3 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t3 values (10)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t3 values (20)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|,
name|dumpWithClause
argument_list|)
expr_stmt|;
comment|// the _external_tables_file info only should be created if external tables are to be replicated not otherwise
name|assertFalse
argument_list|(
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't3'"
argument_list|)
operator|.
name|verifyFailure
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t3"
block|}
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|externalTableReplicationWithDefaultPaths
parameter_list|()
throws|throws
name|Throwable
block|{
comment|//creates external tables with partitions
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t1 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t2 (place string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='us') values ('austin')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='france') values ('paris')"
argument_list|)
operator|.
name|dump
argument_list|(
literal|"repl dump "
operator|+
name|primaryDbName
argument_list|)
decl_stmt|;
comment|// verify that the external table info is written correctly for bootstrap
name|assertExternalFileInfo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"t1"
argument_list|,
literal|"t2"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|primaryDbName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|withClauseOptions
init|=
name|externalTableBasePathWithClause
argument_list|()
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withClauseOptions
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't1'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"t1"
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't2'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"t2"
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from t2 where country = 'us'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"us"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from t2 where country = 'france'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"france"
argument_list|)
expr_stmt|;
comment|// Ckpt should be set on bootstrapped db.
name|replica
operator|.
name|verifyIfCkptSet
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|assertTablePartitionLocation
argument_list|(
name|primaryDbName
operator|+
literal|".t1"
argument_list|,
name|replicatedDbName
operator|+
literal|".t1"
argument_list|)
expr_stmt|;
name|assertTablePartitionLocation
argument_list|(
name|primaryDbName
operator|+
literal|".t2"
argument_list|,
name|replicatedDbName
operator|+
literal|".t2"
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t3 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t3 values (10)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t4 as select id from t3"
argument_list|)
operator|.
name|dump
argument_list|(
literal|"repl dump "
operator|+
name|primaryDbName
operator|+
literal|" from "
operator|+
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
comment|// verify that the external table info is written correctly for incremental
name|assertExternalFileInfo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"t1"
argument_list|,
literal|"t2"
argument_list|,
literal|"t3"
argument_list|,
literal|"t4"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withClauseOptions
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't3'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"t3"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t3"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"10"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t4"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"10"
argument_list|)
expr_stmt|;
name|assertTablePartitionLocation
argument_list|(
name|primaryDbName
operator|+
literal|".t3"
argument_list|,
name|replicatedDbName
operator|+
literal|".t3"
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop table t1"
argument_list|)
operator|.
name|dump
argument_list|(
literal|"repl dump "
operator|+
name|primaryDbName
operator|+
literal|" from "
operator|+
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
comment|// verify that the external table info is written correctly for incremental
name|assertExternalFileInfo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"t2"
argument_list|,
literal|"t3"
argument_list|,
literal|"t4"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param sourceTableName  -- Provide the fully qualified table name    * @param replicaTableName -- Provide the fully qualified table name    */
specifier|private
name|void
name|assertTablePartitionLocation
parameter_list|(
name|String
name|sourceTableName
parameter_list|,
name|String
name|replicaTableName
parameter_list|)
throws|throws
name|HiveException
block|{
name|Hive
name|hiveForPrimary
init|=
name|Hive
operator|.
name|get
argument_list|(
name|primary
operator|.
name|hiveConf
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
name|sourceTable
init|=
name|hiveForPrimary
operator|.
name|getTable
argument_list|(
name|sourceTableName
argument_list|)
decl_stmt|;
name|Path
name|sourceLocation
init|=
name|sourceTable
operator|.
name|getDataLocation
argument_list|()
decl_stmt|;
name|Hive
name|hiveForReplica
init|=
name|Hive
operator|.
name|get
argument_list|(
name|replica
operator|.
name|hiveConf
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
name|replicaTable
init|=
name|hiveForReplica
operator|.
name|getTable
argument_list|(
name|replicaTableName
argument_list|)
decl_stmt|;
name|Path
name|dataLocation
init|=
name|replicaTable
operator|.
name|getDataLocation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|REPLICA_EXTERNAL_BASE
operator|+
name|sourceLocation
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|dataLocation
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sourceTable
operator|.
name|isPartitioned
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Partition
argument_list|>
name|sourcePartitions
init|=
name|hiveForPrimary
operator|.
name|getAllPartitionsOf
argument_list|(
name|sourceTable
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Partition
argument_list|>
name|replicaPartitions
init|=
name|hiveForReplica
operator|.
name|getAllPartitionsOf
argument_list|(
name|replicaTable
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sourcePartitions
operator|.
name|size
argument_list|()
argument_list|,
name|replicaPartitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedPaths
init|=
name|sourcePartitions
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|p
lambda|->
name|REPLICA_EXTERNAL_BASE
operator|+
name|p
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actualPaths
init|=
name|replicaPartitions
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedPaths
operator|.
name|containsAll
argument_list|(
name|actualPaths
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|externalTableReplicationWithCustomPaths
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|externalTableLocation
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"/"
operator|+
name|primaryDbName
operator|+
literal|"/"
operator|+
literal|"a/"
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|externalTableLocation
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create base directory but use HDFS path without schema or authority details.
comment|// Hive should pick up the local cluster's HDFS schema/authority.
name|externalTableBasePathWithClause
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_EXTERNAL_TABLE_BASE_DIR
operator|.
name|varname
operator|+
literal|"'='"
operator|+
name|REPLICA_EXTERNAL_BASE
operator|+
literal|"'"
argument_list|,
literal|"'distcp.options.update'=''"
argument_list|)
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|bootstrapTuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table a (i int, j int) "
operator|+
literal|"row format delimited fields terminated by ',' "
operator|+
literal|"location '"
operator|+
name|externalTableLocation
operator|.
name|toUri
argument_list|()
operator|+
literal|"'"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootstrapTuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 'a'"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * From a"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|assertTablePartitionLocation
argument_list|(
name|primaryDbName
operator|+
literal|".a"
argument_list|,
name|replicatedDbName
operator|+
literal|".a"
argument_list|)
expr_stmt|;
comment|//externally add data to location
try|try
init|(
name|FSDataOutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|externalTableLocation
argument_list|,
literal|"file1.txt"
argument_list|)
argument_list|)
init|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
literal|"1,2\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
literal|"13,21\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|WarehouseInstance
operator|.
name|Tuple
name|incrementalTuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"create table b (i int)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootstrapTuple
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalTuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"select i From a"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"13"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select j from a"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"2"
block|,
literal|"21"
block|}
argument_list|)
expr_stmt|;
comment|// alter table location to something new.
name|externalTableLocation
operator|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"/"
operator|+
name|primaryDbName
operator|+
literal|"/new_location/a/"
argument_list|)
expr_stmt|;
name|incrementalTuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table a set location '"
operator|+
name|externalTableLocation
operator|+
literal|"'"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|incrementalTuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalTuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select i From a"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|assertTablePartitionLocation
argument_list|(
name|primaryDbName
operator|+
literal|".a"
argument_list|,
name|replicatedDbName
operator|+
literal|".a"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|externalTableWithPartitions
parameter_list|()
throws|throws
name|Throwable
block|{
name|Path
name|externalTableLocation
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"/t2/"
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|externalTableLocation
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
init|=
name|externalTableBasePathWithClause
argument_list|()
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t2 (place string) partitioned by (country string) row format "
operator|+
literal|"delimited fields terminated by ',' location '"
operator|+
name|externalTableLocation
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t2 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|dump
argument_list|(
literal|"repl dump "
operator|+
name|primaryDbName
argument_list|)
decl_stmt|;
name|assertExternalFileInfo
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"t2"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|primaryDbName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't2'"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t2"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select place from t2"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"bangalore"
block|}
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
name|assertTablePartitionLocation
argument_list|(
name|primaryDbName
operator|+
literal|".t2"
argument_list|,
name|replicatedDbName
operator|+
literal|".t2"
argument_list|)
expr_stmt|;
comment|// add new  data externally, to a partition, but under the table level top directory
name|Path
name|partitionDir
init|=
operator|new
name|Path
argument_list|(
name|externalTableLocation
argument_list|,
literal|"country=india"
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|partitionDir
argument_list|,
literal|"file.txt"
argument_list|)
argument_list|)
init|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
literal|"pune\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
literal|"mumbai\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into t2 partition(country='australia') values ('sydney')"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|assertExternalFileInfo
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"t2"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select distinct(country) from t2"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"india"
block|,
literal|"australia"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select place from t2 where country='india'"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"bangalore"
block|,
literal|"pune"
block|,
literal|"mumbai"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select place from t2 where country='australia'"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"sydney"
block|}
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
name|Path
name|customPartitionLocation
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"/partition_data/t2/country=france"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|externalTableLocation
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
comment|// add new partitions to the table, at an external location than the table level directory
try|try
init|(
name|FSDataOutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|customPartitionLocation
argument_list|,
literal|"file.txt"
argument_list|)
argument_list|)
init|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
literal|"paris"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"ALTER TABLE t2 ADD PARTITION (country='france') LOCATION '"
operator|+
name|customPartitionLocation
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select place from t2 where country='france'"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"paris"
block|}
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
comment|// change the location of the partition via alter command
name|String
name|tmpLocation
init|=
literal|"/tmp/"
operator|+
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpLocation
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table t2 partition (country='france') set location '"
operator|+
name|tmpLocation
operator|+
literal|"'"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select place from t2 where country='france'"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
comment|// Changing location of one of the partitions shouldn't result in changing location of other
comment|// partitions as well as that of the table.
name|assertTablePartitionLocation
argument_list|(
name|primaryDbName
operator|+
literal|".t2"
argument_list|,
name|replicatedDbName
operator|+
literal|".t2"
argument_list|)
expr_stmt|;
comment|// Changing location of the external table, should result in changes to the location of
comment|// partition residing within the table location and not the partitions located outside.
name|String
name|tmpLocation2
init|=
literal|"/tmp/"
operator|+
name|System
operator|.
name|nanoTime
argument_list|()
operator|+
literal|"_2"
decl_stmt|;
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpLocation2
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='france') values ('lyon')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table t2 set location '"
operator|+
name|tmpLocation2
operator|+
literal|"'"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
expr_stmt|;
name|assertTablePartitionLocation
argument_list|(
name|primaryDbName
operator|+
literal|".t2"
argument_list|,
name|replicatedDbName
operator|+
literal|".t2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|externalTableIncrementalReplication
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|dump
argument_list|(
literal|"repl dump "
operator|+
name|primaryDbName
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|Path
name|externalTableLocation
init|=
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"/t1/"
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|externalTableLocation
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t1 (place string) partitioned by (country string) row format "
operator|+
literal|"delimited fields terminated by ',' location '"
operator|+
name|externalTableLocation
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table t1 add partition(country='india')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table t1 add partition(country='us')"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|assertExternalFileInfo
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"t1"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add new data externally, to a partition, but under the partition level top directory
comment|// Also, it is added after dumping the events but data should be seen at target after REPL LOAD.
name|Path
name|partitionDir
init|=
operator|new
name|Path
argument_list|(
name|externalTableLocation
argument_list|,
literal|"country=india"
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|partitionDir
argument_list|,
literal|"file.txt"
argument_list|)
argument_list|)
init|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
literal|"pune\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
literal|"mumbai\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|FSDataOutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|partitionDir
argument_list|,
literal|"file1.txt"
argument_list|)
argument_list|)
init|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
literal|"bangalore\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
init|=
name|externalTableBasePathWithClause
argument_list|()
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't1'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"t1"
argument_list|)
operator|.
name|run
argument_list|(
literal|"show partitions t1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"country=india"
block|,
literal|"country=us"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select place from t1 order by place"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"bangalore"
block|,
literal|"mumbai"
block|,
literal|"pune"
block|}
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
comment|// Delete one of the file and update another one.
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|partitionDir
argument_list|,
literal|"file.txt"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|partitionDir
argument_list|,
literal|"file1.txt"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|FSDataOutputStream
name|outputStream
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|partitionDir
argument_list|,
literal|"file1.txt"
argument_list|)
argument_list|)
init|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
literal|"chennai\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Repl load with zero events but external tables location info should present.
name|tuple
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|assertExternalFileInfo
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"t1"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't1'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"t1"
argument_list|)
operator|.
name|run
argument_list|(
literal|"show partitions t1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"country=india"
block|,
literal|"country=us"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select place from t1 order by place"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"chennai"
block|}
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
name|Hive
name|hive
init|=
name|Hive
operator|.
name|get
argument_list|(
name|replica
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|hive
operator|.
name|getAllPartitionsOf
argument_list|(
name|hive
operator|.
name|getTable
argument_list|(
name|replicatedDbName
operator|+
literal|".t1"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|partitions
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getDataLocation
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"alter table t1 drop partition (country='india')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table t1 drop partition (country='us')"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * From t1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|assertTrue
argument_list|(
name|replica
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|bootstrapExternalTablesDuringIncrementalPhase
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
init|=
name|externalTableBasePathWithClause
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='false'"
argument_list|)
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t1 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t2 (place string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='us') values ('austin')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='france') values ('paris')"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
comment|// the _external_tables_file info only should be created if external tables are to be replicated not otherwise
name|assertFalse
argument_list|(
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|primaryDbName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't1'"
argument_list|)
operator|.
name|verifyFailure
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't2'"
argument_list|)
operator|.
name|verifyFailure
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t2"
block|}
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
name|dumpWithClause
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop table t1"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t3 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t3 values (10)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t3 values (20)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t4 as select * from t3"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|,
name|dumpWithClause
argument_list|)
expr_stmt|;
comment|// the _external_tables_file info should be created as external tables are to be replicated.
name|assertTrue
argument_list|(
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that the external table info is written correctly for incremental
name|assertExternalFileInfo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"t2"
argument_list|,
literal|"t3"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// _bootstrap directory should be created as bootstrap enabled on external tables.
name|Path
name|dumpPath
init|=
operator|new
name|Path
argument_list|(
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|INC_BOOTSTRAP_ROOT_DIR_NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|dumpPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// _bootstrap/<db_name>/t2
comment|// _bootstrap/<db_name>/t3
name|Path
name|dbPath
init|=
operator|new
name|Path
argument_list|(
name|dumpPath
argument_list|,
name|primaryDbName
argument_list|)
decl_stmt|;
name|Path
name|tblPath
init|=
operator|new
name|Path
argument_list|(
name|dbPath
argument_list|,
literal|"t2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|tblPath
argument_list|)
argument_list|)
expr_stmt|;
name|tblPath
operator|=
operator|new
name|Path
argument_list|(
name|dbPath
argument_list|,
literal|"t3"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|tblPath
argument_list|)
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't1'"
argument_list|)
operator|.
name|verifyFailure
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't2'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"t2"
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't3'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"t3"
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't4'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"t4"
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
comment|// Ckpt should be set on bootstrapped tables.
name|replica
operator|.
name|verifyIfCkptSetForTables
argument_list|(
name|replicatedDbName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"t2"
argument_list|,
literal|"t3"
argument_list|)
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
comment|// Drop source tables to see if target points to correct data or not after bootstrap load.
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop table t2"
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop table t3"
argument_list|)
expr_stmt|;
comment|// Create table event for t4 should be applied along with bootstrapping of t2 and t3
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select place from t2 where country = 'us'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"austin"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select place from t2 where country = 'france'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"paris"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t3 order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"10"
argument_list|,
literal|"20"
argument_list|)
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t4 order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"10"
argument_list|,
literal|"20"
argument_list|)
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|retryBootstrapExternalTablesFromDifferentDump
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|loadWithClause
operator|.
name|addAll
argument_list|(
name|externalTableBasePathWithClause
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='false'"
argument_list|)
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tupleBootstrapWithoutExternal
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t1 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t2 (place string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='us') values ('austin')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t3 as select * from t1"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tupleBootstrapWithoutExternal
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tupleBootstrapWithoutExternal
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"t3"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t3"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"1"
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
name|dumpWithClause
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tupleIncWithExternalBootstrap
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop table t1"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t4 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t4 values (10)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t5 as select * from t4"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tupleBootstrapWithoutExternal
operator|.
name|lastReplicationId
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
comment|// Fail setting ckpt property for table t4 but success for t2.
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
name|callerVerifier
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|CallerArguments
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|tblName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"t4"
argument_list|)
operator|&&
name|args
operator|.
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|replicatedDbName
argument_list|)
condition|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - DB : "
operator|+
name|args
operator|.
name|dbName
operator|+
literal|" TABLE : "
operator|+
name|args
operator|.
name|tblName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
comment|// Fail repl load before the ckpt property is set for t4 and after it is set for t2.
comment|// In the retry, these half baked tables should be dropped and bootstrap should be successful.
name|InjectableBehaviourObjectStore
operator|.
name|setAlterTableModifier
argument_list|(
name|callerVerifier
argument_list|)
expr_stmt|;
try|try
block|{
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName
argument_list|,
name|tupleIncWithExternalBootstrap
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
expr_stmt|;
name|callerVerifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|InjectableBehaviourObjectStore
operator|.
name|resetAlterTableModifier
argument_list|()
expr_stmt|;
block|}
comment|// Insert into existing external table and then Drop it, add another managed table with same name
comment|// and dump another bootstrap dump for external tables.
name|WarehouseInstance
operator|.
name|Tuple
name|tupleNewIncWithExternalBootstrap
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='india') values ('chennai')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop table t2"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t2 as select * from t4"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t4 values (20)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tupleIncWithExternalBootstrap
operator|.
name|lastReplicationId
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
comment|// Set incorrect bootstrap dump to clean tables. Here, used the full bootstrap dump which is invalid.
comment|// So, REPL LOAD fails.
name|loadWithClause
operator|.
name|add
argument_list|(
literal|"'"
operator|+
name|REPL_CLEAN_TABLES_FROM_BOOTSTRAP_CONFIG
operator|+
literal|"'='"
operator|+
name|tupleBootstrapWithoutExternal
operator|.
name|dumpLocation
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName
argument_list|,
name|tupleNewIncWithExternalBootstrap
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
expr_stmt|;
name|loadWithClause
operator|.
name|remove
argument_list|(
literal|"'"
operator|+
name|REPL_CLEAN_TABLES_FROM_BOOTSTRAP_CONFIG
operator|+
literal|"'='"
operator|+
name|tupleBootstrapWithoutExternal
operator|.
name|dumpLocation
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|// Set previously failed bootstrap dump to clean-up. Now, new bootstrap should overwrite the old one.
name|loadWithClause
operator|.
name|add
argument_list|(
literal|"'"
operator|+
name|REPL_CLEAN_TABLES_FROM_BOOTSTRAP_CONFIG
operator|+
literal|"'='"
operator|+
name|tupleIncWithExternalBootstrap
operator|.
name|dumpLocation
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|// Verify if bootstrapping with same dump is idempotent and return same result
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tupleNewIncWithExternalBootstrap
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't1'"
argument_list|)
operator|.
name|verifyFailure
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t2"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"10"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t4"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"10"
argument_list|,
literal|"20"
argument_list|)
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t5"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"10"
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
comment|// Once the REPL LOAD is successful, the this config should be unset or else, the subsequent REPL LOAD
comment|// will also drop those tables which will cause data loss.
name|loadWithClause
operator|.
name|remove
argument_list|(
literal|"'"
operator|+
name|REPL_CLEAN_TABLES_FROM_BOOTSTRAP_CONFIG
operator|+
literal|"'='"
operator|+
name|tupleIncWithExternalBootstrap
operator|.
name|dumpLocation
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExternalTableDataPath
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
name|primary
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Path
name|basePath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Path
name|sourcePath
init|=
operator|new
name|Path
argument_list|(
literal|"/abc/xyz"
argument_list|)
decl_stmt|;
name|Path
name|dataPath
init|=
name|ReplExternalTables
operator|.
name|externalTableDataPath
argument_list|(
name|conf
argument_list|,
name|basePath
argument_list|,
name|sourcePath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dataPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"/abc/xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|basePath
operator|=
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
expr_stmt|;
name|dataPath
operator|=
name|ReplExternalTables
operator|.
name|externalTableDataPath
argument_list|(
name|conf
argument_list|,
name|basePath
argument_list|,
name|sourcePath
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dataPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"/tmp/abc/xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|basePath
operator|=
operator|new
name|Path
argument_list|(
literal|"/tmp/"
argument_list|)
expr_stmt|;
name|dataPath
operator|=
name|ReplExternalTables
operator|.
name|externalTableDataPath
argument_list|(
name|conf
argument_list|,
name|basePath
argument_list|,
name|sourcePath
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dataPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"/tmp/abc/xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|basePath
operator|=
operator|new
name|Path
argument_list|(
literal|"/tmp/tmp1//"
argument_list|)
expr_stmt|;
name|dataPath
operator|=
name|ReplExternalTables
operator|.
name|externalTableDataPath
argument_list|(
name|conf
argument_list|,
name|basePath
argument_list|,
name|sourcePath
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dataPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"/tmp/tmp1/abc/xyz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExternalTablesIncReplicationWithConcurrentDropTable
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
init|=
name|externalTableBasePathWithClause
argument_list|()
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tupleBootstrap
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t1 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (1)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tupleBootstrap
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
expr_stmt|;
comment|// Insert a row into "t1" and create another external table using data from "t1".
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t2 as select * from t1"
argument_list|)
expr_stmt|;
comment|// Inject a behavior so that getTable returns null for table "t1". This ensures the table is
comment|// skipped for data files listing.
name|BehaviourInjection
argument_list|<
name|Table
argument_list|,
name|Table
argument_list|>
name|tableNuller
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|Table
argument_list|,
name|Table
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Table
name|apply
parameter_list|(
annotation|@
name|Nullable
name|Table
name|table
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Performing injection on table "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|getTableName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"t1"
argument_list|)
condition|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|nonInjectedPathCalled
operator|=
literal|true
expr_stmt|;
return|return
name|table
return|;
block|}
block|}
block|}
decl_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setGetTableBehaviour
argument_list|(
name|tableNuller
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tupleInc
decl_stmt|;
try|try
block|{
comment|// The t1 table will be skipped from data location listing.
name|tupleInc
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tupleBootstrap
operator|.
name|lastReplicationId
argument_list|,
name|dumpWithClause
argument_list|)
expr_stmt|;
name|tableNuller
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|InjectableBehaviourObjectStore
operator|.
name|resetGetTableBehaviour
argument_list|()
expr_stmt|;
comment|// reset the behaviour
block|}
comment|// Only table t2 should exist in the data location list file.
name|assertExternalFileInfo
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"t2"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|tupleInc
operator|.
name|dumpLocation
argument_list|,
name|FILE_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// The newly inserted data "2" should be missing in table "t1". But, table t2 should exist and have
comment|// inserted data.
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tupleInc
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t1 order by id"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"1"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t2 order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalDumpEmptyDumpDirectory
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
init|=
name|externalTableBasePathWithClause
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|)
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t1 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (2)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
comment|// This looks like an empty dump but it has the ALTER TABLE event created by the previous
comment|// dump. We need it here so that the next dump won't have any events.
name|WarehouseInstance
operator|.
name|Tuple
name|incTuple
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|incTuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incTuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
comment|// create events for some other database and then dump the primaryDbName to dump an empty directory.
name|primary
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|extraPrimaryDb
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|inc2Tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|extraPrimaryDb
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tbl (fld int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|incTuple
operator|.
name|lastReplicationId
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|primary
operator|.
name|getCurrentNotificationEventId
argument_list|()
operator|.
name|getEventId
argument_list|()
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|inc2Tuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Incremental load to existing database with empty dump directory should set the repl id to the last event at src.
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|inc2Tuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|inc2Tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtTableBootstrapDuringIncrementalWithoutAnyEvents
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|String
argument_list|>
name|loadWithClause
init|=
name|externalTableBasePathWithClause
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dumpWithClause
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='false'"
argument_list|)
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|bootstrapDump
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t1 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t2 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 values (1)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootstrapDump
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootstrapDump
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't1'"
argument_list|)
operator|.
name|verifyFailure
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't2'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"t2"
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
comment|// This looks like an empty dump but it has the ALTER TABLE event created by the previous
comment|// dump. We need it here so that the next dump won't have any events.
name|WarehouseInstance
operator|.
name|Tuple
name|incTuple
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootstrapDump
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|incTuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incTuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
comment|// Take a dump with external tables bootstrapped and load it
name|dumpWithClause
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_INCLUDE_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|,
literal|"'"
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_BOOTSTRAP_EXTERNAL_TABLES
operator|.
name|varname
operator|+
literal|"'='true'"
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|inc2Tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|incTuple
operator|.
name|lastReplicationId
argument_list|,
name|dumpWithClause
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|inc2Tuple
operator|.
name|dumpLocation
argument_list|,
name|loadWithClause
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|inc2Tuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't1'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"t1"
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't2'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"t2"
argument_list|)
operator|.
name|verifyReplTargetProperty
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|externalTableBasePathWithClause
parameter_list|()
throws|throws
name|IOException
throws|,
name|SemanticException
block|{
return|return
name|ReplicationTestUtils
operator|.
name|externalTableBasePathWithClause
argument_list|(
name|REPLICA_EXTERNAL_BASE
argument_list|,
name|replica
argument_list|)
return|;
block|}
specifier|private
name|void
name|assertExternalFileInfo
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|expected
parameter_list|,
name|Path
name|externalTableInfoFile
parameter_list|)
throws|throws
name|IOException
block|{
name|ReplicationTestUtils
operator|.
name|assertExternalFileInfo
argument_list|(
name|primary
argument_list|,
name|expected
argument_list|,
name|externalTableInfoFile
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

