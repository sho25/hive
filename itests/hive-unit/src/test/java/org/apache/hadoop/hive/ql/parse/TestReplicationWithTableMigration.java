begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
operator|.
name|CallerArguments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
operator|.
name|BehaviourInjection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|gzip
operator|.
name|GzipJSONMessageEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|PathBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ReplChangeManager
operator|.
name|SOURCE_OF_REPLICATION
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
operator|.
name|isFullAcidTable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
operator|.
name|isTransactionalTable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * TestReplicationWithTableMigration - test replication for Hive2 to Hive3 (Strict managed tables)  */
end_comment

begin_class
specifier|public
class|class
name|TestReplicationWithTableMigration
block|{
specifier|private
specifier|final
specifier|static
name|String
name|AVRO_SCHEMA_FILE_NAME
init|=
literal|"avro_table.avsc"
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReplicationWithTableMigration
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|WarehouseInstance
name|primary
decl_stmt|,
name|replica
decl_stmt|;
specifier|private
name|String
name|primaryDbName
decl_stmt|,
name|replicatedDbName
decl_stmt|;
specifier|private
name|Path
name|avroSchemaFile
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|classLevelSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overrideProperties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|overrideProperties
operator|.
name|put
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EVENT_MESSAGE_FACTORY
operator|.
name|getHiveName
argument_list|()
argument_list|,
name|GzipJSONMessageEncoder
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|internalBeforeClassSetup
argument_list|(
name|overrideProperties
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|internalBeforeClassSetup
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overrideConfigs
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|TestReplicationWithTableMigration
operator|.
name|class
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.client.use.datanode.hostname"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser."
operator|+
name|Utils
operator|.
name|getUGI
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|".hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|miniDFSCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|DistributedFileSystem
name|fs
init|=
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hiveConfigs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.support.concurrency"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.txn.manager"
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.DbTxnManager"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.client.capability.check"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.repl.bootstrap.dump.open.txn.timeout"
argument_list|,
literal|"1s"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.exec.dynamic.partition.mode"
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.strict.checks.bucketing"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.mapred.mode"
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"mapred.input.dir.recursive"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.disallow.incompatible.col.type.changes"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.strict.managed.tables"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|replica
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|hiveConfigs
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configsForPrimary
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.client.capability.check"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.repl.bootstrap.dump.open.txn.timeout"
argument_list|,
literal|"1s"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.exec.dynamic.partition.mode"
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.strict.checks.bucketing"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.mapred.mode"
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"mapred.input.dir.recursive"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.disallow.incompatible.col.type.changes"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.support.concurrency"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.txn.manager"
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.DummyTxnManager"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.strict.managed.tables"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|configsForPrimary
operator|.
name|putAll
argument_list|(
name|overrideConfigs
argument_list|)
expr_stmt|;
name|primary
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|configsForPrimary
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Path
name|createAvroSchemaFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|testPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|schemaFile
init|=
operator|new
name|Path
argument_list|(
name|testPath
argument_list|,
name|AVRO_SCHEMA_FILE_NAME
argument_list|)
decl_stmt|;
name|String
index|[]
name|schemaVals
init|=
operator|new
name|String
index|[]
block|{
literal|"{"
block|,
literal|"  \"type\" : \"record\","
block|,
literal|"  \"name\" : \"table1\","
block|,
literal|"  \"doc\" : \"Sqoop import of table1\","
block|,
literal|"  \"fields\" : [ {"
block|,
literal|"    \"name\" : \"col1\","
block|,
literal|"    \"type\" : [ \"null\", \"string\" ],"
block|,
literal|"    \"default\" : null,"
block|,
literal|"    \"columnName\" : \"col1\","
block|,
literal|"    \"sqlType\" : \"12\""
block|,
literal|"  }, {"
block|,
literal|"    \"name\" : \"col2\","
block|,
literal|"    \"type\" : [ \"null\", \"long\" ],"
block|,
literal|"    \"default\" : null,"
block|,
literal|"    \"columnName\" : \"col2\","
block|,
literal|"    \"sqlType\" : \"13\""
block|,
literal|"  } ],"
block|,
literal|"  \"tableName\" : \"table1\""
block|,
literal|"}"
block|}
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|schemaFile
argument_list|)
init|)
block|{
for|for
control|(
name|String
name|line
range|:
name|schemaVals
control|)
block|{
name|stream
operator|.
name|write
argument_list|(
operator|(
name|line
operator|+
literal|"\n"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|schemaFile
argument_list|)
expr_stmt|;
return|return
name|schemaFile
return|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|classLevelTearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|primary
operator|.
name|close
argument_list|()
expr_stmt|;
name|replica
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Throwable
block|{
name|primaryDbName
operator|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_"
operator|+
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|replicatedDbName
operator|=
literal|"replicated_"
operator|+
name|primaryDbName
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|primaryDbName
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
expr_stmt|;
if|if
condition|(
name|avroSchemaFile
operator|==
literal|null
condition|)
block|{
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/avro_schema/definition/"
operator|+
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|primary
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|testPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|avroSchemaFile
operator|=
name|PathBuilder
operator|.
name|fullyQualifiedHDFSUri
argument_list|(
name|createAvroSchemaFile
argument_list|(
name|fs
argument_list|,
name|testPath
argument_list|)
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|primaryDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|replicatedDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|WarehouseInstance
operator|.
name|Tuple
name|prepareDataAndDump
parameter_list|(
name|String
name|primaryDbName
parameter_list|,
name|String
name|fromReplId
parameter_list|)
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tacid (id int) clustered by(id) into 3 buckets stored as orc "
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacid values(1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacid values(2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacid values(3)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tacidpart (place string) partitioned by (country string) clustered by(place) "
operator|+
literal|"into 3 buckets stored as orc "
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table tacidpart add partition(country='france')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacidpart partition(country='india') values('mumbai')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacidpart partition(country='us') values('sf')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacidpart partition(country='france') values('paris')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tflat (rank int) stored as orc tblproperties(\"transactional\"=\"false\")"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tflat values(11)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tflat values(22)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tflattext (id int) "
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tflattext values(111), (222)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tflattextpart (id int) partitioned by (country string) "
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tflattextpart partition(country='india') values(1111), (2222)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tflattextpart partition(country='us') values(3333)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tacidloc (id int) clustered by(id) into 3 buckets stored as orc  LOCATION '/tmp' "
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacidloc values(1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacidloc values(2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacidloc values(3)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table tacidpartloc (place string) partitioned by (country string) clustered by(place) "
operator|+
literal|"into 3 buckets stored as orc "
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table tacidpartloc add partition(country='france') LOCATION '/tmp/part'"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacidpartloc partition(country='india') values('mumbai')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacidpartloc partition(country='us') values('sf')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into tacidpartloc partition(country='france') values('paris')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table avro_table ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.avro.AvroSerDe' "
operator|+
literal|"stored as avro tblproperties ('avro.schema.url'='"
operator|+
name|avroSchemaFile
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into avro_table values ('str1', 10)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table avro_table_part partitioned by (country string) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.avro.AvroSerDe' "
operator|+
literal|"stored as avro tblproperties ('avro.schema.url'='"
operator|+
name|avroSchemaFile
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into avro_table_part partition (country='india') values ('another', 13)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|fromReplId
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isTransactionalTable
argument_list|(
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"tacid"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isTransactionalTable
argument_list|(
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"tacidpart"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isTransactionalTable
argument_list|(
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"tflat"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isTransactionalTable
argument_list|(
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"tflattext"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isTransactionalTable
argument_list|(
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"tflattextpart"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isTransactionalTable
argument_list|(
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"tacidloc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isTransactionalTable
argument_list|(
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
literal|"tacidpartloc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertAvroTableState
argument_list|(
name|primaryDbName
argument_list|,
literal|"avro_table"
argument_list|,
literal|"avro_table_part"
argument_list|)
expr_stmt|;
name|assertAvroTableState
argument_list|(
name|primaryDbName
argument_list|,
literal|"avro_table_part"
argument_list|)
expr_stmt|;
return|return
name|tuple
return|;
block|}
specifier|private
name|void
name|assertAvroTableState
parameter_list|(
name|String
name|primaryDbName
parameter_list|,
name|String
modifier|...
name|tableNames
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|tableName
range|:
name|tableNames
control|)
block|{
name|Table
name|avroTable
init|=
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|isTransactionalTable
argument_list|(
name|avroTable
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|avroTable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyLoadExecution
parameter_list|(
name|String
name|replicatedDbName
parameter_list|,
name|String
name|lastReplId
parameter_list|)
throws|throws
name|Throwable
block|{
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"tacid"
block|,
literal|"tacidpart"
block|,
literal|"tflat"
block|,
literal|"tflattext"
block|,
literal|"tflattextpart"
block|,
literal|"tacidloc"
block|,
literal|"tacidpartloc"
block|,
literal|"avro_table"
block|,
literal|"avro_table_part"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|lastReplId
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from tacid order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from tacidpart order by country"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"france"
block|,
literal|"india"
block|,
literal|"us"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select rank from tflat order by rank"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"11"
block|,
literal|"22"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from tflattext order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"111"
block|,
literal|"222"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from tflattextpart order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1111"
block|,
literal|"2222"
block|,
literal|"3333"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from tacidloc order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from tacidpartloc order by country"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"france"
block|,
literal|"india"
block|,
literal|"us"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select col1 from avro_table"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"str1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select col1 from avro_table_part"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"another"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isFullAcidTable
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tacid"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isFullAcidTable
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tacidpart"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isFullAcidTable
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tflat"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|isFullAcidTable
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tflattext"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|isFullAcidTable
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tflattextpart"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isTransactionalTable
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tflattext"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isTransactionalTable
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tflattextpart"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isFullAcidTable
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tacidloc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isFullAcidTable
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"tacidpartloc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTablePath
argument_list|(
name|replicatedDbName
argument_list|,
literal|"avro_table"
argument_list|)
expr_stmt|;
name|assertPartitionPath
argument_list|(
name|replicatedDbName
argument_list|,
literal|"avro_table_part"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertPartitionPath
parameter_list|(
name|String
name|replicatedDbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|tablePath
init|=
name|assertTablePath
argument_list|(
name|replicatedDbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|replica
operator|.
name|getAllPartitions
argument_list|(
name|replicatedDbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|actualPartitionPath
init|=
name|partitions
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|expectedPartitionPath
init|=
operator|new
name|PathBuilder
argument_list|(
name|tablePath
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|addDescendant
argument_list|(
literal|"country=india"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPartitionPath
argument_list|,
name|actualPartitionPath
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Path
name|assertTablePath
parameter_list|(
name|String
name|replicatedDbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|Table
name|avroTable
init|=
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|avroTable
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|tablePath
init|=
operator|new
name|PathBuilder
argument_list|(
name|replica
operator|.
name|externalTableWarehouseRoot
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|addDescendant
argument_list|(
name|replicatedDbName
operator|+
literal|".db"
argument_list|)
operator|.
name|addDescendant
argument_list|(
name|tableName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|expectedTablePath
init|=
name|tablePath
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|actualTablePath
init|=
name|avroTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedTablePath
argument_list|,
name|actualTablePath
argument_list|)
expr_stmt|;
return|return
name|tablePath
return|;
block|}
specifier|private
name|void
name|loadWithFailureInAddNotification
parameter_list|(
name|String
name|tbl
parameter_list|,
name|String
name|dumpLocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
name|callerVerifier
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|InjectableBehaviourObjectStore
operator|.
name|CallerArguments
name|args
parameter_list|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|replicatedDbName
argument_list|)
operator|||
operator|(
name|args
operator|.
name|constraintTblName
operator|!=
literal|null
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - DB: "
operator|+
name|args
operator|.
name|dbName
operator|+
literal|" Constraint Table: "
operator|+
name|args
operator|.
name|constraintTblName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|args
operator|.
name|tblName
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - Table: "
operator|+
name|args
operator|.
name|tblName
argument_list|)
expr_stmt|;
return|return
name|args
operator|.
name|tblName
operator|.
name|equalsIgnoreCase
argument_list|(
name|tbl
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setCallerVerifier
argument_list|(
name|callerVerifier
argument_list|)
expr_stmt|;
try|try
block|{
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName
argument_list|,
name|dumpLocation
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|InjectableBehaviourObjectStore
operator|.
name|resetCallerVerifier
argument_list|()
expr_stmt|;
block|}
name|callerVerifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBootstrapLoadMigrationManagedToAcid
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|prepareDataAndDump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|verifyLoadExecution
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalLoadMigrationManagedToAcid
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|prepareDataAndDump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|verifyLoadExecution
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalLoadMigrationManagedToAcidFailure
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|prepareDataAndDump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|loadWithFailureInAddNotification
argument_list|(
literal|"tacid"
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like tacid"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|verifyLoadExecution
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalLoadMigrationManagedToAcidFailurePart
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|prepareDataAndDump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|loadWithFailureInAddNotification
argument_list|(
literal|"tacidpart"
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like tacidpart"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|verifyLoadExecution
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalLoadMigrationManagedToAcidAllOp
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|bootStrapDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootStrapDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|selectStmtList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|expectedValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"testInsert"
decl_stmt|;
name|String
name|tableNameMM
init|=
name|tableName
operator|+
literal|"_MM"
decl_stmt|;
name|ReplicationTestUtils
operator|.
name|appendInsert
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|,
name|tableNameMM
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|appendTruncate
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|appendInsertIntoFromSelect
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|,
name|tableNameMM
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|appendCreateAsSelect
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|,
name|tableNameMM
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|appendImport
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|,
name|tableNameMM
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|appendInsertOverwrite
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|,
name|tableNameMM
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|appendLoadLocal
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|,
name|tableNameMM
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|appendInsertUnion
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|,
name|tableNameMM
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|appendAlterTable
argument_list|(
name|primary
argument_list|,
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|)
expr_stmt|;
name|ReplicationTestUtils
operator|.
name|verifyIncrementalLoad
argument_list|(
name|primary
argument_list|,
name|replica
argument_list|,
name|primaryDbName
argument_list|,
name|replicatedDbName
argument_list|,
name|selectStmtList
argument_list|,
name|expectedValues
argument_list|,
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBootstrapLoadMigrationToAcidWithMoveOptimization
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|String
argument_list|>
name|withConfigs
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'hive.repl.enable.move.optimization'='true'"
argument_list|)
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|prepareDataAndDump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
expr_stmt|;
name|verifyLoadExecution
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalLoadMigrationToAcidWithMoveOptimization
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|String
argument_list|>
name|withConfigs
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'hive.repl.enable.move.optimization'='true'"
argument_list|)
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|prepareDataAndDump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
expr_stmt|;
name|verifyLoadExecution
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

