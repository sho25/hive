begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|text
operator|.
name|StrTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|CatalogBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|FunctionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|PartitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_class
specifier|public
class|class
name|TestSchemaToolCatalogOps
block|{
specifier|private
specifier|static
name|MetastoreSchemaTool
name|schemaTool
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
specifier|static
name|String
name|testMetastoreDB
decl_stmt|;
specifier|private
specifier|static
name|PrintStream
name|errStream
decl_stmt|;
specifier|private
specifier|static
name|PrintStream
name|outStream
decl_stmt|;
specifier|private
specifier|static
name|String
name|argsBase
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|initDb
parameter_list|()
throws|throws
name|HiveMetaException
throws|,
name|IOException
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|MetastoreConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|AUTO_CREATE_ALL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|HMS_HANDLER_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MetastoreConf
operator|.
name|setLongVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|THRIFT_CONNECTION_RETRIES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testMetastoreDB
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
literal|"testschematoolcatopsdb"
expr_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CONNECT_URL_KEY
argument_list|,
literal|"jdbc:derby:"
operator|+
name|testMetastoreDB
operator|+
literal|";create=true"
argument_list|)
expr_stmt|;
name|schemaTool
operator|=
operator|new
name|MetastoreSchemaTool
argument_list|()
expr_stmt|;
name|schemaTool
operator|.
name|init
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|,
literal|"target/tmp"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-dbType"
block|,
literal|"derby"
block|,
literal|"--info"
block|}
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|String
name|userName
init|=
name|MetastoreConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|CONNECTION_USER_NAME
argument_list|)
decl_stmt|;
name|String
name|passWord
init|=
name|MetastoreConf
operator|.
name|getPassword
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|PWD
argument_list|)
decl_stmt|;
name|schemaTool
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|schemaTool
operator|.
name|setPassWord
argument_list|(
name|passWord
argument_list|)
expr_stmt|;
name|errStream
operator|=
name|System
operator|.
name|err
expr_stmt|;
name|outStream
operator|=
name|System
operator|.
name|out
expr_stmt|;
name|argsBase
operator|=
literal|"-dbType derby -userName "
operator|+
name|userName
operator|+
literal|" -passWord "
operator|+
name|passWord
operator|+
literal|" "
expr_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskInit
argument_list|()
argument_list|,
literal|"-initSchema"
argument_list|)
expr_stmt|;
comment|// Pre-install the database so all the tables are there.
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|removeDb
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|metaStoreDir
init|=
operator|new
name|File
argument_list|(
name|testMetastoreDB
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaStoreDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|forceDeleteOnExit
argument_list|(
name|metaStoreDir
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setOut
argument_list|(
name|outStream
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|errStream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|createClient
parameter_list|()
throws|throws
name|MetaException
block|{
name|client
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createCatalog
parameter_list|()
throws|throws
name|HiveMetaException
throws|,
name|TException
block|{
name|String
name|catName
init|=
literal|"my_test_catalog"
decl_stmt|;
name|String
name|location
init|=
literal|"file:///tmp/my_test_catalog"
decl_stmt|;
name|String
name|description
init|=
literal|"very descriptive"
decl_stmt|;
name|String
name|argsCreate
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-createCatalog %s -catalogLocation \"%s\" -catalogDescription \"%s\""
argument_list|,
name|catName
argument_list|,
name|location
argument_list|,
name|description
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskCreateCatalog
argument_list|()
argument_list|,
name|argsCreate
argument_list|)
expr_stmt|;
name|Catalog
name|cat
init|=
name|client
operator|.
name|getCatalog
argument_list|(
name|catName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|location
argument_list|,
name|cat
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|description
argument_list|,
name|cat
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HiveMetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|createExistingCatalog
parameter_list|()
throws|throws
name|HiveMetaException
block|{
name|String
name|catName
init|=
literal|"hive"
decl_stmt|;
name|String
name|location
init|=
literal|"somewhere"
decl_stmt|;
name|String
name|argsCreate
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-createCatalog %s -catalogLocation \"%s\""
argument_list|,
name|catName
argument_list|,
name|location
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskCreateCatalog
argument_list|()
argument_list|,
name|argsCreate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createExistingCatalogWithIfNotExists
parameter_list|()
throws|throws
name|HiveMetaException
block|{
name|String
name|catName
init|=
literal|"my_existing_test_catalog"
decl_stmt|;
name|String
name|location
init|=
literal|"file:///tmp/my_test_catalog"
decl_stmt|;
name|String
name|description
init|=
literal|"very descriptive"
decl_stmt|;
name|String
name|argsCreate1
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-createCatalog %s -catalogLocation \"%s\" -catalogDescription \"%s\""
argument_list|,
name|catName
argument_list|,
name|location
argument_list|,
name|description
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskCreateCatalog
argument_list|()
argument_list|,
name|argsCreate1
argument_list|)
expr_stmt|;
name|String
name|argsCreate2
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-createCatalog %s -catalogLocation \"%s\" -catalogDescription \"%s\" -ifNotExists"
argument_list|,
name|catName
argument_list|,
name|location
argument_list|,
name|description
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskCreateCatalog
argument_list|()
argument_list|,
name|argsCreate2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|alterCatalog
parameter_list|()
throws|throws
name|HiveMetaException
throws|,
name|TException
block|{
name|String
name|catName
init|=
literal|"an_alterable_catalog"
decl_stmt|;
name|String
name|location
init|=
literal|"file:///tmp/an_alterable_catalog"
decl_stmt|;
name|String
name|description
init|=
literal|"description"
decl_stmt|;
name|String
name|argsCreate
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-createCatalog %s -catalogLocation \"%s\" -catalogDescription \"%s\""
argument_list|,
name|catName
argument_list|,
name|location
argument_list|,
name|description
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskCreateCatalog
argument_list|()
argument_list|,
name|argsCreate
argument_list|)
expr_stmt|;
name|location
operator|=
literal|"file:///tmp/somewhere_else"
expr_stmt|;
name|String
name|argsAlter1
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-alterCatalog %s -catalogLocation \"%s\""
argument_list|,
name|catName
argument_list|,
name|location
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskAlterCatalog
argument_list|()
argument_list|,
name|argsAlter1
argument_list|)
expr_stmt|;
name|Catalog
name|cat
init|=
name|client
operator|.
name|getCatalog
argument_list|(
name|catName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|location
argument_list|,
name|cat
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|description
argument_list|,
name|cat
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|description
operator|=
literal|"a better description"
expr_stmt|;
name|String
name|argsAlter2
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-alterCatalog %s -catalogDescription \"%s\""
argument_list|,
name|catName
argument_list|,
name|description
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskAlterCatalog
argument_list|()
argument_list|,
name|argsAlter2
argument_list|)
expr_stmt|;
name|cat
operator|=
name|client
operator|.
name|getCatalog
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|location
argument_list|,
name|cat
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|description
argument_list|,
name|cat
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|=
literal|"file:///tmp/a_third_location"
expr_stmt|;
name|description
operator|=
literal|"best description yet"
expr_stmt|;
name|String
name|argsAlter3
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-alterCatalog %s -catalogLocation \"%s\" -catalogDescription \"%s\""
argument_list|,
name|catName
argument_list|,
name|location
argument_list|,
name|description
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskAlterCatalog
argument_list|()
argument_list|,
name|argsAlter3
argument_list|)
expr_stmt|;
name|cat
operator|=
name|client
operator|.
name|getCatalog
argument_list|(
name|catName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|location
argument_list|,
name|cat
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|description
argument_list|,
name|cat
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HiveMetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|alterBogusCatalog
parameter_list|()
throws|throws
name|HiveMetaException
block|{
name|String
name|catName
init|=
literal|"nosuch"
decl_stmt|;
name|String
name|location
init|=
literal|"file:///tmp/somewhere"
decl_stmt|;
name|String
name|description
init|=
literal|"whatever"
decl_stmt|;
name|String
name|argsAlter
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-alterCatalog %s -catalogLocation \"%s\" -catalogDescription \"%s\""
argument_list|,
name|catName
argument_list|,
name|location
argument_list|,
name|description
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskAlterCatalog
argument_list|()
argument_list|,
name|argsAlter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HiveMetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|alterCatalogNoChange
parameter_list|()
throws|throws
name|HiveMetaException
block|{
name|String
name|catName
init|=
literal|"alter_cat_no_change"
decl_stmt|;
name|String
name|location
init|=
literal|"file:///tmp/alter_cat_no_change"
decl_stmt|;
name|String
name|description
init|=
literal|"description"
decl_stmt|;
name|String
name|argsCreate
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-createCatalog %s -catalogLocation \"%s\" -catalogDescription \"%s\""
argument_list|,
name|catName
argument_list|,
name|location
argument_list|,
name|description
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskCreateCatalog
argument_list|()
argument_list|,
name|argsCreate
argument_list|)
expr_stmt|;
name|String
name|argsAlter
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-alterCatalog %s"
argument_list|,
name|catName
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskAlterCatalog
argument_list|()
argument_list|,
name|argsAlter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveDatabase
parameter_list|()
throws|throws
name|HiveMetaException
throws|,
name|TException
block|{
name|String
name|toCatName
init|=
literal|"moveDbCat"
decl_stmt|;
name|String
name|dbName
init|=
literal|"moveDbDb"
decl_stmt|;
name|String
name|tableName
init|=
literal|"moveDbTable"
decl_stmt|;
name|String
name|funcName
init|=
literal|"movedbfunc"
decl_stmt|;
name|String
name|partVal
init|=
literal|"moveDbKey"
decl_stmt|;
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|toCatName
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"file:///tmp"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setCatalogName
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
operator|new
name|FunctionBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setName
argument_list|(
name|funcName
argument_list|)
operator|.
name|setClass
argument_list|(
literal|"org.apache.hive.myudf"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|db
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addPartCol
argument_list|(
literal|"p"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|table
argument_list|)
operator|.
name|addValue
argument_list|(
name|partVal
argument_list|)
operator|.
name|addToTable
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|String
name|argsMoveDB
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-moveDatabase %s -fromCatalog %s -toCatalog %s"
argument_list|,
name|dbName
argument_list|,
name|DEFAULT_CATALOG_NAME
argument_list|,
name|toCatName
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskMoveDatabase
argument_list|()
argument_list|,
name|argsMoveDB
argument_list|)
expr_stmt|;
name|Database
name|fetchedDb
init|=
name|client
operator|.
name|getDatabase
argument_list|(
name|toCatName
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fetchedDb
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|toCatName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fetchedDb
operator|.
name|getCatalogName
argument_list|()
argument_list|)
expr_stmt|;
name|Function
name|fetchedFunction
init|=
name|client
operator|.
name|getFunction
argument_list|(
name|toCatName
argument_list|,
name|dbName
argument_list|,
name|funcName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fetchedFunction
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|toCatName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fetchedFunction
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fetchedFunction
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|fetchedTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|toCatName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fetchedTable
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|toCatName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fetchedTable
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fetchedTable
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Partition
name|fetchedPart
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|toCatName
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|partVal
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fetchedPart
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|toCatName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fetchedPart
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fetchedPart
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fetchedPart
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveDatabaseWithExistingDbOfSameNameAlreadyInTargetCatalog
parameter_list|()
throws|throws
name|TException
throws|,
name|HiveMetaException
block|{
name|String
name|catName
init|=
literal|"clobberCatalog"
decl_stmt|;
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|catName
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"file:///tmp"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|argsMoveDB
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-moveDatabase %s -fromCatalog %s -toCatalog %s"
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|catName
argument_list|,
name|DEFAULT_CATALOG_NAME
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskMoveDatabase
argument_list|()
argument_list|,
name|argsMoveDB
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Attempt to move default database should have failed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveMetaException
name|e
parameter_list|)
block|{
comment|// good
block|}
comment|// Make sure nothing really moved
name|Set
argument_list|<
name|String
argument_list|>
name|dbNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getAllDatabases
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dbNames
operator|.
name|contains
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HiveMetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|moveNonExistentDatabase
parameter_list|()
throws|throws
name|TException
throws|,
name|HiveMetaException
block|{
name|String
name|catName
init|=
literal|"moveNonExistentDb"
decl_stmt|;
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|catName
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"file:///tmp"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|String
name|argsMoveDB
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-moveDatabase nosuch -fromCatalog %s -toCatalog %s"
argument_list|,
name|catName
argument_list|,
name|DEFAULT_CATALOG_NAME
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskMoveDatabase
argument_list|()
argument_list|,
name|argsMoveDB
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveDbToNonExistentCatalog
parameter_list|()
throws|throws
name|TException
throws|,
name|HiveMetaException
block|{
name|String
name|dbName
init|=
literal|"doomedToHomelessness"
decl_stmt|;
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|argsMoveDB
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-moveDatabase %s -fromCatalog %s -toCatalog nosuch"
argument_list|,
name|dbName
argument_list|,
name|DEFAULT_CATALOG_NAME
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskMoveDatabase
argument_list|()
argument_list|,
name|argsMoveDB
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Attempt to move database to non-existent catalog should have failed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveMetaException
name|e
parameter_list|)
block|{
comment|// good
block|}
comment|// Make sure nothing really moved
name|Set
argument_list|<
name|String
argument_list|>
name|dbNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getAllDatabases
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dbNames
operator|.
name|contains
argument_list|(
name|dbName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveTable
parameter_list|()
throws|throws
name|TException
throws|,
name|HiveMetaException
block|{
name|String
name|toCatName
init|=
literal|"moveTableCat"
decl_stmt|;
name|String
name|toDbName
init|=
literal|"moveTableDb"
decl_stmt|;
name|String
name|tableName
init|=
literal|"moveTableTable"
decl_stmt|;
name|String
name|partVal
init|=
literal|"moveTableKey"
decl_stmt|;
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|toCatName
argument_list|)
operator|.
name|setLocation
argument_list|(
literal|"file:///tmp"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|)
expr_stmt|;
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setCatalogName
argument_list|(
name|toCatName
argument_list|)
operator|.
name|setName
argument_list|(
name|toDbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addPartCol
argument_list|(
literal|"p"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|table
argument_list|)
operator|.
name|addValue
argument_list|(
name|partVal
argument_list|)
operator|.
name|addToTable
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|String
name|argsMoveTable
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-moveTable %s -fromCatalog %s -toCatalog %s -fromDatabase %s -toDatabase %s"
argument_list|,
name|tableName
argument_list|,
name|DEFAULT_CATALOG_NAME
argument_list|,
name|toCatName
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|toDbName
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskMoveTable
argument_list|()
argument_list|,
name|argsMoveTable
argument_list|)
expr_stmt|;
name|Table
name|fetchedTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|toCatName
argument_list|,
name|toDbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fetchedTable
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|toCatName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fetchedTable
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|toDbName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fetchedTable
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Partition
name|fetchedPart
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|toCatName
argument_list|,
name|toDbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|partVal
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fetchedPart
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|toCatName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fetchedPart
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|toDbName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fetchedPart
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fetchedPart
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveTableWithinCatalog
parameter_list|()
throws|throws
name|TException
throws|,
name|HiveMetaException
block|{
name|String
name|toDbName
init|=
literal|"moveTableWithinCatalogDb"
decl_stmt|;
name|String
name|tableName
init|=
literal|"moveTableWithinCatalogTable"
decl_stmt|;
name|String
name|partVal
init|=
literal|"moveTableWithinCatalogKey"
decl_stmt|;
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|toDbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|addPartCol
argument_list|(
literal|"p"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
operator|new
name|PartitionBuilder
argument_list|()
operator|.
name|inTable
argument_list|(
name|table
argument_list|)
operator|.
name|addValue
argument_list|(
name|partVal
argument_list|)
operator|.
name|addToTable
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|String
name|argsMoveTable
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-moveTable %s -fromCatalog %s -toCatalog %s -fromDatabase %s -toDatabase %s"
argument_list|,
name|tableName
argument_list|,
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|toDbName
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskMoveTable
argument_list|()
argument_list|,
name|argsMoveTable
argument_list|)
expr_stmt|;
name|Table
name|fetchedTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|toDbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fetchedTable
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|fetchedTable
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|toDbName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fetchedTable
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Partition
name|fetchedPart
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|toDbName
argument_list|,
name|tableName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|partVal
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fetchedPart
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|fetchedPart
operator|.
name|getCatName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|toDbName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fetchedPart
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fetchedPart
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveTableWithExistingTableOfSameNameAlreadyInTargetDatabase
parameter_list|()
throws|throws
name|TException
throws|,
name|HiveMetaException
block|{
name|String
name|toDbName
init|=
literal|"clobberTableDb"
decl_stmt|;
name|String
name|tableName
init|=
literal|"clobberTableTable"
decl_stmt|;
name|Database
name|toDb
init|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|toDbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
decl_stmt|;
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
operator|new
name|TableBuilder
argument_list|()
operator|.
name|inDb
argument_list|(
name|toDb
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"b"
argument_list|,
literal|"varchar(32)"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|argsMoveTable
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-moveTable %s -fromCatalog %s -toCatalog %s -fromDatabase %s -toDatabase %s"
argument_list|,
name|tableName
argument_list|,
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|toDbName
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskMoveTable
argument_list|()
argument_list|,
name|argsMoveTable
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Attempt to move table should have failed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveMetaException
name|e
parameter_list|)
block|{
comment|// good
block|}
comment|// Make sure nothing really moved
name|Set
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tableNames
operator|.
name|contains
argument_list|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure the table in the target database didn't get clobbered
name|Table
name|fetchedTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|toDbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|fetchedTable
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|HiveMetaException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|moveNonExistentTable
parameter_list|()
throws|throws
name|TException
throws|,
name|HiveMetaException
block|{
name|String
name|toDbName
init|=
literal|"moveNonExistentTable"
decl_stmt|;
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|toDbName
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|String
name|argsMoveTable
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-moveTable nosuch -fromCatalog %s -toCatalog %s -fromDatabase %s -toDatabase %s"
argument_list|,
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|,
name|toDbName
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskMoveTable
argument_list|()
argument_list|,
name|argsMoveTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveTableToNonExistentDb
parameter_list|()
throws|throws
name|TException
throws|,
name|HiveMetaException
block|{
name|String
name|tableName
init|=
literal|"doomedToWander"
decl_stmt|;
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
operator|.
name|addCol
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|create
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|argsMoveTable
init|=
name|String
operator|.
name|format
argument_list|(
literal|"-moveTable %s -fromCatalog %s -toCatalog %s -fromDatabase %s -toDatabase nosuch"
argument_list|,
name|tableName
argument_list|,
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|SchemaToolTaskMoveTable
argument_list|()
argument_list|,
name|argsMoveTable
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Attempt to move table to non-existent table should have failed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveMetaException
name|e
parameter_list|)
block|{
comment|// good
block|}
comment|// Make sure nothing really moved
name|Set
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|client
operator|.
name|getAllTables
argument_list|(
name|DEFAULT_CATALOG_NAME
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tableNames
operator|.
name|contains
argument_list|(
name|tableName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|execute
parameter_list|(
name|SchemaToolTask
name|task
parameter_list|,
name|String
name|taskArgs
parameter_list|)
throws|throws
name|HiveMetaException
block|{
try|try
block|{
name|StrTokenizer
name|tokenizer
init|=
operator|new
name|StrTokenizer
argument_list|(
name|argsBase
operator|+
name|taskArgs
argument_list|,
literal|' '
argument_list|,
literal|'\"'
argument_list|)
decl_stmt|;
name|SchemaToolCommandLine
name|cl
init|=
operator|new
name|SchemaToolCommandLine
argument_list|(
name|tokenizer
operator|.
name|getTokenArray
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|task
operator|.
name|setCommandLineArguments
argument_list|(
name|cl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not parse comman line \n"
operator|+
name|argsBase
operator|+
name|taskArgs
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|task
operator|.
name|setHiveSchemaTool
argument_list|(
name|schemaTool
argument_list|)
expr_stmt|;
name|task
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

