begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|IDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
operator|.
name|CompactorTestUtil
operator|.
name|executeStatementOnDriverAndReturnResults
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
operator|.
name|TestCompactor
operator|.
name|executeStatementOnDriver
import|;
end_import

begin_comment
comment|/**  * Superclass for Test[Crud|Mm]CompactorOnTez, for setup and helper classes.  */
end_comment

begin_class
specifier|public
class|class
name|CompactorOnTezTest
block|{
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|RANDOM_INT
init|=
operator|new
name|AtomicInteger
argument_list|(
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DATA_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
name|TestCrudCompactorOnTez
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"_"
operator|+
name|RANDOM_INT
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_WAREHOUSE_DIR
init|=
name|TEST_DATA_DIR
operator|+
literal|"/warehouse"
decl_stmt|;
specifier|protected
name|HiveConf
name|conf
decl_stmt|;
specifier|protected
name|IMetaStoreClient
name|msClient
decl_stmt|;
specifier|protected
name|IDriver
name|driver
decl_stmt|;
annotation|@
name|Before
comment|// Note: we create a new conf and driver object before every test
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
argument_list|)
operator|.
name|mkdirs
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not create "
operator|+
name|TEST_WAREHOUSE_DIR
argument_list|)
throw|;
block|}
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|,
name|TEST_WAREHOUSE_DIR
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEINPUTFORMAT
argument_list|,
name|HiveInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEFETCHTASKCONVERSION
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|prepDb
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|conf
operator|=
name|hiveConf
expr_stmt|;
comment|// Use tez as execution engine for this test class
name|setupTez
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|msClient
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|driver
operator|=
name|DriverFactory
operator|.
name|newDriver
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupTez
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|,
literal|"tez"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_USER_INSTALL_DIR
argument_list|,
name|TEST_DATA_DIR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"tez.am.resource.memory.mb"
argument_list|,
literal|"128"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"tez.am.dag.scheduler.class"
argument_list|,
literal|"org.apache.tez.dag.app.dag.impl.DAGSchedulerNaturalOrderControlled"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"tez.local.mode"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"tez.runtime.optimize.local.fetch"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"tez.staging-dir"
argument_list|,
name|TEST_DATA_DIR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"tez.ignore.lib.uris"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.tez.container.size"
argument_list|,
literal|"128"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hive.merge.tezfiles"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hive.in.tez.test"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|msClient
operator|!=
literal|null
condition|)
block|{
name|msClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|driver
operator|!=
literal|null
condition|)
block|{
name|driver
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|conf
operator|=
literal|null
expr_stmt|;
block|}
specifier|protected
class|class
name|TestDataProvider
block|{
name|void
name|createFullAcidTable
parameter_list|(
name|String
name|tblName
parameter_list|,
name|boolean
name|isPartitioned
parameter_list|,
name|boolean
name|isBucketed
parameter_list|)
throws|throws
name|Exception
block|{
name|createTable
argument_list|(
name|tblName
argument_list|,
name|isPartitioned
argument_list|,
name|isBucketed
argument_list|,
literal|false
argument_list|,
literal|"orc"
argument_list|)
expr_stmt|;
block|}
name|void
name|createMmTable
parameter_list|(
name|String
name|tblName
parameter_list|,
name|boolean
name|isPartitioned
parameter_list|,
name|boolean
name|isBucketed
parameter_list|)
throws|throws
name|Exception
block|{
name|createMmTable
argument_list|(
name|tblName
argument_list|,
name|isPartitioned
argument_list|,
name|isBucketed
argument_list|,
literal|"orc"
argument_list|)
expr_stmt|;
block|}
name|void
name|createMmTable
parameter_list|(
name|String
name|tblName
parameter_list|,
name|boolean
name|isPartitioned
parameter_list|,
name|boolean
name|isBucketed
parameter_list|,
name|String
name|fileFormat
parameter_list|)
throws|throws
name|Exception
block|{
name|createTable
argument_list|(
name|tblName
argument_list|,
name|isPartitioned
argument_list|,
name|isBucketed
argument_list|,
literal|true
argument_list|,
name|fileFormat
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createTable
parameter_list|(
name|String
name|tblName
parameter_list|,
name|boolean
name|isPartitioned
parameter_list|,
name|boolean
name|isBucketed
parameter_list|,
name|boolean
name|insertOnly
parameter_list|,
name|String
name|fileFormat
parameter_list|)
throws|throws
name|Exception
block|{
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"create table "
argument_list|)
operator|.
name|append
argument_list|(
name|tblName
argument_list|)
operator|.
name|append
argument_list|(
literal|" (a string, b int)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPartitioned
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" partitioned by (ds string)"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isBucketed
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" clustered by (a) into 2 buckets"
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|append
argument_list|(
literal|" stored as "
argument_list|)
operator|.
name|append
argument_list|(
name|fileFormat
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|" TBLPROPERTIES('transactional'='true',"
argument_list|)
expr_stmt|;
if|if
condition|(
name|insertOnly
condition|)
block|{
name|query
operator|.
name|append
argument_list|(
literal|" 'transactional_properties'='insert_only')"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|append
argument_list|(
literal|" 'transactional_properties'='default')"
argument_list|)
expr_stmt|;
block|}
name|executeStatementOnDriver
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
comment|/**      * 5 txns.      */
name|void
name|insertTestDataPartitioned
parameter_list|(
name|String
name|tblName
parameter_list|)
throws|throws
name|Exception
block|{
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" values('1',2, 'today'),('1',3, 'today'),('1',4, 'yesterday'),('2',2, 'tomorrow'),"
operator|+
literal|"('2',3, 'yesterday'),('2',4, 'today')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" values('3',2, 'tomorrow'),('3',3, 'today'),('3',4, 'yesterday'),('4',2, 'today'),"
operator|+
literal|"('4',3, 'tomorrow'),('4',4, 'today')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"delete from "
operator|+
name|tblName
operator|+
literal|" where b = 2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" values('5',2, 'yesterday'),('5',3, 'yesterday'),"
operator|+
literal|"('5',4, 'today'),('6',2, 'today'),('6',3, 'today'),('6',4, 'today')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"delete from "
operator|+
name|tblName
operator|+
literal|" where a = '1'"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
comment|/**      * 3 txns.      */
specifier|protected
name|void
name|insertMmTestDataPartitioned
parameter_list|(
name|String
name|tblName
parameter_list|)
throws|throws
name|Exception
block|{
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" values('1',2, 'today'),('1',3, 'today'),('1',4, 'yesterday'),('2',2, 'tomorrow'),"
operator|+
literal|"('2',3, 'yesterday'),('2',4, 'today')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" values('3',2, 'tomorrow'),('3',3, 'today'),('3',4, 'yesterday'),('4',2, 'today'),"
operator|+
literal|"('4',3, 'tomorrow'),('4',4, 'today')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" values('5',2, 'yesterday'),('5',3, 'yesterday'),"
operator|+
literal|"('5',4, 'today'),('6',2, 'today'),('6',3, 'today'),('6',4, 'today')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
comment|/**      * 5 txns.      */
specifier|protected
name|void
name|insertTestData
parameter_list|(
name|String
name|tblName
parameter_list|)
throws|throws
name|Exception
block|{
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" values('1',2),('1',3),('1',4),('2',2),('2',3),('2',4)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" values('3',2),('3',3),('3',4),('4',2),('4',3),('4',4)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"delete from "
operator|+
name|tblName
operator|+
literal|" where b = 2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" values('5',2),('5',3),('5',4),('6',2),('6',3),('6',4)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"delete from "
operator|+
name|tblName
operator|+
literal|" where a = '1'"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
comment|/**      * 3 txns.      */
specifier|protected
name|void
name|insertMmTestData
parameter_list|(
name|String
name|tblName
parameter_list|)
throws|throws
name|Exception
block|{
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" values('1',2),('1',3),('1',4),('2',2),('2',3),('2',4)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" values('3',2),('3',3),('3',4),('4',2),('4',3),('4',4)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" values('5',2),('5',3),('5',4),('6',2),('6',3),('6',4)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
comment|/**      * i * 1.5 txns.      */
specifier|protected
name|void
name|insertTestData
parameter_list|(
name|String
name|tblName
parameter_list|,
name|int
name|iterations
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" values('"
operator|+
name|i
operator|+
literal|"',"
operator|+
name|i
operator|+
literal|")"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|executeStatementOnDriver
argument_list|(
literal|"delete from "
operator|+
name|tblName
operator|+
literal|" where b = "
operator|+
name|i
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * i txns.      */
specifier|protected
name|void
name|insertMmTestData
parameter_list|(
name|String
name|tblName
parameter_list|,
name|int
name|iterations
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" values('"
operator|+
name|i
operator|+
literal|"',"
operator|+
name|i
operator|+
literal|")"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getAllData
parameter_list|(
name|String
name|tblName
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|executeStatementOnDriverAndReturnResults
argument_list|(
literal|"select * from "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getBucketData
parameter_list|(
name|String
name|tblName
parameter_list|,
name|String
name|bucketId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|executeStatementOnDriverAndReturnResults
argument_list|(
literal|"select ROW__ID, * from "
operator|+
name|tblName
operator|+
literal|" where ROW__ID.bucketid = "
operator|+
name|bucketId
operator|+
literal|" order by ROW__ID"
argument_list|,
name|driver
argument_list|)
return|;
block|}
specifier|protected
name|void
name|dropTable
parameter_list|(
name|String
name|tblName
parameter_list|)
throws|throws
name|Exception
block|{
name|executeStatementOnDriver
argument_list|(
literal|"drop table "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

