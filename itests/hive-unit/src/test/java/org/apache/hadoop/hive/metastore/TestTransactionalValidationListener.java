begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|MetaStoreClientTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|CatalogBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|minihms
operator|.
name|AbstractMetaStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestTransactionalValidationListener
extends|extends
name|MetaStoreClientTest
block|{
specifier|private
name|AbstractMetaStoreService
name|metaStore
decl_stmt|;
specifier|private
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
name|boolean
name|createdCatalogs
init|=
literal|false
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startMetaStores
parameter_list|()
block|{
name|Map
argument_list|<
name|MetastoreConf
operator|.
name|ConfVars
argument_list|,
name|String
argument_list|>
name|msConf
init|=
operator|new
name|HashMap
argument_list|<
name|MetastoreConf
operator|.
name|ConfVars
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Enable TransactionalValidationListener + create.as.acid
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraConf
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|extraConf
operator|.
name|put
argument_list|(
literal|"metastore.create.as.acid"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|extraConf
operator|.
name|put
argument_list|(
literal|"hive.txn.manager"
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.DbTxnManager"
argument_list|)
expr_stmt|;
name|extraConf
operator|.
name|put
argument_list|(
literal|"hive.support.concurrency"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|startMetaStores
argument_list|(
name|msConf
argument_list|,
name|extraConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get new client
name|client
operator|=
name|metaStore
operator|.
name|getClient
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|createdCatalogs
condition|)
block|{
name|createCatalogs
argument_list|()
expr_stmt|;
name|createdCatalogs
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|TestTransactionalValidationListener
parameter_list|(
name|String
name|name
parameter_list|,
name|AbstractMetaStoreService
name|metaStore
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|metaStore
operator|=
name|metaStore
expr_stmt|;
block|}
specifier|private
name|void
name|createCatalogs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|catNames
init|=
block|{
literal|"spark"
block|,
literal|"myapp"
block|}
decl_stmt|;
name|String
index|[]
name|location
init|=
block|{
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
literal|"spark"
argument_list|)
block|,
name|MetaStoreTestUtils
operator|.
name|getTestWarehouseDir
argument_list|(
literal|"myapp"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|catNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Catalog
name|cat
init|=
operator|new
name|CatalogBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|catNames
index|[
name|i
index|]
argument_list|)
operator|.
name|setLocation
argument_list|(
name|location
index|[
name|i
index|]
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|createCatalog
argument_list|(
name|cat
argument_list|)
expr_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|cat
operator|.
name|getLocationUri
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
operator|&&
name|dir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Table
name|createOrcTable
parameter_list|(
name|String
name|catalog
parameter_list|)
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|table
operator|.
name|setDbName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setTableName
argument_list|(
literal|"test_table"
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"column_name"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setInputFormat
argument_list|(
literal|"org.apache.hadoop.hive.ql.io.orc.OrcInputFormat"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setOutputFormat
argument_list|(
literal|"org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|table
operator|.
name|setCatName
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
name|table
operator|.
name|setTableType
argument_list|(
literal|"MANAGED_TABLE"
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Table
name|createdTable
init|=
name|client
operator|.
name|getTable
argument_list|(
name|catalog
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|createdTable
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateAsAcid
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Table created in hive catalog should have been automatically set to transactional
name|Table
name|createdTable
init|=
name|createOrcTable
argument_list|(
literal|"hive"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|createdTable
argument_list|)
argument_list|)
expr_stmt|;
comment|// Non-hive catalogs should not be transactional
name|createdTable
operator|=
name|createOrcTable
argument_list|(
literal|"spark"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|createdTable
argument_list|)
argument_list|)
expr_stmt|;
name|createdTable
operator|=
name|createOrcTable
argument_list|(
literal|"myapp"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AcidUtils
operator|.
name|isTransactionalTable
argument_list|(
name|createdTable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

