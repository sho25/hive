begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactResponseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|IDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
comment|// TODO: Add tests for bucketing_version=1 when HIVE-21167 is fixed
specifier|public
class|class
name|TestCrudCompactorOnTez
block|{
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|salt
init|=
operator|new
name|AtomicInteger
argument_list|(
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCrudCompactorOnTez
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DATA_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
name|TestCrudCompactorOnTez
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"_"
operator|+
name|salt
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_WAREHOUSE_DIR
init|=
name|TEST_DATA_DIR
operator|+
literal|"/warehouse"
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
name|IMetaStoreClient
name|msClient
decl_stmt|;
specifier|private
name|IDriver
name|driver
decl_stmt|;
annotation|@
name|Before
comment|// Note: we create a new conf and driver object before every test
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
argument_list|)
operator|.
name|mkdirs
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not create "
operator|+
name|TEST_WAREHOUSE_DIR
argument_list|)
throw|;
block|}
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|,
name|TEST_WAREHOUSE_DIR
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEINPUTFORMAT
argument_list|,
name|HiveInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DYNAMICPARTITIONINGMODE
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEFETCHTASKCONVERSION
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|prepDb
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|conf
operator|=
name|hiveConf
expr_stmt|;
comment|// Use tez as execution engine for this test class
name|setupTez
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|msClient
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|driver
operator|=
name|DriverFactory
operator|.
name|newDriver
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupTez
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXECUTION_ENGINE
argument_list|,
literal|"tez"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_USER_INSTALL_DIR
argument_list|,
name|TEST_DATA_DIR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"tez.am.resource.memory.mb"
argument_list|,
literal|"128"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"tez.am.dag.scheduler.class"
argument_list|,
literal|"org.apache.tez.dag.app.dag.impl.DAGSchedulerNaturalOrderControlled"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"tez.local.mode"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.defaultFS"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"tez.runtime.optimize.local.fetch"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"tez.staging-dir"
argument_list|,
name|TEST_DATA_DIR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"tez.ignore.lib.uris"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.tez.container.size"
argument_list|,
literal|"128"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hive.merge.tezfiles"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hive.in.tez.test"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|msClient
operator|!=
literal|null
condition|)
block|{
name|msClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|driver
operator|!=
literal|null
condition|)
block|{
name|driver
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|conf
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMajorCompaction
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tblName
init|=
literal|"testMajorCompaction"
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"create transactional table "
operator|+
name|tblName
operator|+
literal|" (a int, b int) clustered by (a) into 2 buckets"
operator|+
literal|" stored as ORC TBLPROPERTIES('bucketing_version'='2', 'transactional'='true',"
operator|+
literal|" 'transactional_properties'='default')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" values(1,2),(1,3),(1,4),(2,2),(2,3),(2,4)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" values(3,2),(3,3),(3,4),(4,2),(4,3),(4,4)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"delete from "
operator|+
name|tblName
operator|+
literal|" where b = 2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|msClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Verify deltas (delta_0000001_0000001_0000, delta_0000002_0000002_0000) are present
name|FileStatus
index|[]
name|filestatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|)
decl_stmt|;
name|String
index|[]
name|deltas
init|=
operator|new
name|String
index|[
name|filestatus
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deltas
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|deltas
index|[
name|i
index|]
operator|=
name|filestatus
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|deltas
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedDeltas
init|=
operator|new
name|String
index|[]
block|{
literal|"delta_0000001_0000001_0000"
block|,
literal|"delta_0000002_0000002_0000"
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|deepEquals
argument_list|(
name|expectedDeltas
argument_list|,
name|deltas
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expectedDeltas
argument_list|)
operator|+
literal|", found: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|deltas
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Verify that delete delta (delete_delta_0000003_0000003_0000) is present
name|FileStatus
index|[]
name|deleteDeltaStat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|AcidUtils
operator|.
name|deleteEventDeltaDirFilter
argument_list|)
decl_stmt|;
name|String
index|[]
name|deleteDeltas
init|=
operator|new
name|String
index|[
name|deleteDeltaStat
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deleteDeltas
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|deleteDeltas
index|[
name|i
index|]
operator|=
name|deleteDeltaStat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|deleteDeltas
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedDeleteDeltas
init|=
operator|new
name|String
index|[]
block|{
literal|"delete_delta_0000003_0000003_0000"
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|deepEquals
argument_list|(
name|expectedDeleteDeltas
argument_list|,
name|deleteDeltas
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expectedDeleteDeltas
argument_list|)
operator|+
literal|", found: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|deleteDeltas
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|expectedRsBucket0
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedRsBucket0
operator|.
name|add
argument_list|(
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":0}\t2\t4"
argument_list|)
expr_stmt|;
name|expectedRsBucket0
operator|.
name|add
argument_list|(
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":1}\t2\t3"
argument_list|)
expr_stmt|;
name|expectedRsBucket0
operator|.
name|add
argument_list|(
literal|"{\"writeid\":2,\"bucketid\":536870912,\"rowid\":0}\t3\t4"
argument_list|)
expr_stmt|;
name|expectedRsBucket0
operator|.
name|add
argument_list|(
literal|"{\"writeid\":2,\"bucketid\":536870912,\"rowid\":1}\t3\t3"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedRsBucket1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedRsBucket1
operator|.
name|add
argument_list|(
literal|"{\"writeid\":1,\"bucketid\":536936448,\"rowid\":0}\t1\t4"
argument_list|)
expr_stmt|;
name|expectedRsBucket1
operator|.
name|add
argument_list|(
literal|"{\"writeid\":1,\"bucketid\":536936448,\"rowid\":1}\t1\t3"
argument_list|)
expr_stmt|;
name|expectedRsBucket1
operator|.
name|add
argument_list|(
literal|"{\"writeid\":2,\"bucketid\":536936448,\"rowid\":0}\t4\t4"
argument_list|)
expr_stmt|;
name|expectedRsBucket1
operator|.
name|add
argument_list|(
literal|"{\"writeid\":2,\"bucketid\":536936448,\"rowid\":1}\t4\t3"
argument_list|)
expr_stmt|;
comment|// Bucket 0
name|List
argument_list|<
name|String
argument_list|>
name|rsBucket0
init|=
name|executeStatementOnDriverAndReturnResults
argument_list|(
literal|"select ROW__ID, * from "
operator|+
name|tblName
operator|+
literal|" where ROW__ID.bucketid = 536870912 order by ROW__ID"
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"normal read"
argument_list|,
name|expectedRsBucket0
argument_list|,
name|rsBucket0
argument_list|)
expr_stmt|;
comment|// Bucket 1
name|List
argument_list|<
name|String
argument_list|>
name|rsBucket1
init|=
name|executeStatementOnDriverAndReturnResults
argument_list|(
literal|"select ROW__ID, * from "
operator|+
name|tblName
operator|+
literal|" where ROW__ID.bucketid = 536936448 order by ROW__ID"
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"normal read"
argument_list|,
name|expectedRsBucket1
argument_list|,
name|rsBucket1
argument_list|)
expr_stmt|;
comment|// Run major compaction and cleaner
name|runCompaction
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|)
expr_stmt|;
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Should contain only one base directory now
name|filestatus
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|bases
init|=
operator|new
name|String
index|[
name|filestatus
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bases
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bases
index|[
name|i
index|]
operator|=
name|filestatus
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|bases
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedBases
init|=
operator|new
name|String
index|[]
block|{
literal|"base_0000003_v0000008"
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|deepEquals
argument_list|(
name|expectedBases
argument_list|,
name|bases
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expectedBases
argument_list|)
operator|+
literal|", found: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bases
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Bucket 0
name|List
argument_list|<
name|String
argument_list|>
name|rsCompactBucket0
init|=
name|executeStatementOnDriverAndReturnResults
argument_list|(
literal|"select ROW__ID, * from  "
operator|+
name|tblName
operator|+
literal|" where ROW__ID.bucketid = 536870912"
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"compacted read"
argument_list|,
name|rsBucket0
argument_list|,
name|rsCompactBucket0
argument_list|)
expr_stmt|;
comment|// Bucket 1
name|List
argument_list|<
name|String
argument_list|>
name|rsCompactBucket1
init|=
name|executeStatementOnDriverAndReturnResults
argument_list|(
literal|"select ROW__ID, * from  "
operator|+
name|tblName
operator|+
literal|" where ROW__ID.bucketid = 536936448"
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"compacted read"
argument_list|,
name|rsBucket1
argument_list|,
name|rsCompactBucket1
argument_list|)
expr_stmt|;
comment|// Clean up
name|executeStatementOnDriver
argument_list|(
literal|"drop table "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinorCompactionDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tblName
init|=
literal|"testMinorCompactionDisabled"
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"create transactional table "
operator|+
name|tblName
operator|+
literal|" (a int, b int) clustered by (a) into 2 buckets"
operator|+
literal|" stored as ORC TBLPROPERTIES('bucketing_version'='2', 'transactional'='true',"
operator|+
literal|" 'transactional_properties'='default')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" values(1,2),(1,3),(1,4),(2,2),(2,3),(2,4)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" values(3,2),(3,3),(3,4),(4,2),(4,3),(4,4)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"delete from "
operator|+
name|tblName
operator|+
literal|" where b = 2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|msClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Verify deltas (delta_0000001_0000001_0000, delta_0000002_0000002_0000) are present
name|FileStatus
index|[]
name|filestatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|)
decl_stmt|;
name|String
index|[]
name|deltas
init|=
operator|new
name|String
index|[
name|filestatus
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deltas
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|deltas
index|[
name|i
index|]
operator|=
name|filestatus
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|deltas
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedDeltas
init|=
operator|new
name|String
index|[]
block|{
literal|"delta_0000001_0000001_0000"
block|,
literal|"delta_0000002_0000002_0000"
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|deepEquals
argument_list|(
name|expectedDeltas
argument_list|,
name|deltas
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expectedDeltas
argument_list|)
operator|+
literal|", found: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|deltas
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Verify that delete delta (delete_delta_0000003_0000003_0000) is present
name|FileStatus
index|[]
name|deleteDeltaStat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|AcidUtils
operator|.
name|deleteEventDeltaDirFilter
argument_list|)
decl_stmt|;
name|String
index|[]
name|deleteDeltas
init|=
operator|new
name|String
index|[
name|deleteDeltaStat
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deleteDeltas
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|deleteDeltas
index|[
name|i
index|]
operator|=
name|deleteDeltaStat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|deleteDeltas
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedDeleteDeltas
init|=
operator|new
name|String
index|[]
block|{
literal|"delete_delta_0000003_0000003_0000"
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|deepEquals
argument_list|(
name|expectedDeleteDeltas
argument_list|,
name|deleteDeltas
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expectedDeleteDeltas
argument_list|)
operator|+
literal|", found: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|deleteDeltas
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Initiate a compaction, make sure it's not queued
name|runInitiator
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Clean up
name|executeStatementOnDriver
argument_list|(
literal|"drop table "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompactionWithSchemaEvolutionAndBuckets
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tblName
init|=
literal|"testCompactionWithSchemaEvolutionAndBuckets"
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"create transactional table "
operator|+
name|tblName
operator|+
literal|" (a int, b int) partitioned by(ds string) clustered by (a) into 2 buckets"
operator|+
literal|" stored as ORC TBLPROPERTIES('bucketing_version'='2', 'transactional'='true',"
operator|+
literal|" 'transactional_properties'='default')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Insert some data
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" partition (ds) values(1,2,'today'),(1,3,'today'),(1,4,'yesterday'),(2,2,'yesterday'),(2,3,'today'),(2,4,'today')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Add a new column
name|executeStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|tblName
operator|+
literal|" add columns(c int)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Insert more data
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" partition (ds) values(3,2,1000,'yesterday'),(3,3,1001,'today'),(3,4,1002,'yesterday'),(4,2,1003,'today'),"
operator|+
literal|"(4,3,1004,'yesterday'),(4,4,1005,'today')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"delete from "
operator|+
name|tblName
operator|+
literal|" where b = 2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|//  Run major compaction and cleaner
name|runCompaction
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|,
literal|"ds=yesterday"
argument_list|,
literal|"ds=today"
argument_list|)
expr_stmt|;
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedRsBucket0PtnToday
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedRsBucket0PtnToday
operator|.
name|add
argument_list|(
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":0}\t2\t3\tNULL\ttoday"
argument_list|)
expr_stmt|;
name|expectedRsBucket0PtnToday
operator|.
name|add
argument_list|(
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":1}\t2\t4\tNULL\ttoday"
argument_list|)
expr_stmt|;
name|expectedRsBucket0PtnToday
operator|.
name|add
argument_list|(
literal|"{\"writeid\":3,\"bucketid\":536870912,\"rowid\":0}\t3\t3\t1001\ttoday"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedRsBucket1PtnToday
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedRsBucket1PtnToday
operator|.
name|add
argument_list|(
literal|"{\"writeid\":1,\"bucketid\":536936448,\"rowid\":1}\t1\t3\tNULL\ttoday"
argument_list|)
expr_stmt|;
name|expectedRsBucket1PtnToday
operator|.
name|add
argument_list|(
literal|"{\"writeid\":3,\"bucketid\":536936448,\"rowid\":1}\t4\t4\t1005\ttoday"
argument_list|)
expr_stmt|;
comment|// Bucket 0, partition 'today'
name|List
argument_list|<
name|String
argument_list|>
name|rsCompactBucket0PtnToday
init|=
name|executeStatementOnDriverAndReturnResults
argument_list|(
literal|"select ROW__ID, * from  "
operator|+
name|tblName
operator|+
literal|" where ROW__ID.bucketid = 536870912 and ds='today'"
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"compacted read"
argument_list|,
name|expectedRsBucket0PtnToday
argument_list|,
name|rsCompactBucket0PtnToday
argument_list|)
expr_stmt|;
comment|// Bucket 1, partition 'today'
name|List
argument_list|<
name|String
argument_list|>
name|rsCompactBucket1PtnToday
init|=
name|executeStatementOnDriverAndReturnResults
argument_list|(
literal|"select ROW__ID, * from  "
operator|+
name|tblName
operator|+
literal|" where ROW__ID.bucketid = 536936448 and ds='today'"
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"compacted read"
argument_list|,
name|expectedRsBucket1PtnToday
argument_list|,
name|rsCompactBucket1PtnToday
argument_list|)
expr_stmt|;
comment|// Clean up
name|executeStatementOnDriver
argument_list|(
literal|"drop table "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompactionWithSchemaEvolutionNoBucketsMultipleReducers
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAXREDUCERS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPNUMREDUCERS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|driver
operator|=
name|DriverFactory
operator|.
name|newDriver
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tblName
init|=
literal|"testCompactionWithSchemaEvolutionNoBucketsMultipleReducers"
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"create transactional table "
operator|+
name|tblName
operator|+
literal|" (a int, b int) partitioned by(ds string)"
operator|+
literal|" stored as ORC TBLPROPERTIES('transactional'='true',"
operator|+
literal|" 'transactional_properties'='default')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Insert some data
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" partition (ds) values(1,2,'today'),(1,3,'today'),(1,4,'yesterday'),(2,2,'yesterday'),(2,3,'today'),(2,4,'today')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Add a new column
name|executeStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|tblName
operator|+
literal|" add columns(c int)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Insert more data
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" partition (ds) values(3,2,1000,'yesterday'),(3,3,1001,'today'),(3,4,1002,'yesterday'),(4,2,1003,'today'),"
operator|+
literal|"(4,3,1004,'yesterday'),(4,4,1005,'today')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"delete from "
operator|+
name|tblName
operator|+
literal|" where b = 2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|//  Run major compaction and cleaner
name|runCompaction
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|,
literal|"ds=yesterday"
argument_list|,
literal|"ds=today"
argument_list|)
expr_stmt|;
name|runCleaner
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedRsPtnToday
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedRsPtnToday
operator|.
name|add
argument_list|(
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":1}\t1\t3\tNULL\ttoday"
argument_list|)
expr_stmt|;
name|expectedRsPtnToday
operator|.
name|add
argument_list|(
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":2}\t2\t3\tNULL\ttoday"
argument_list|)
expr_stmt|;
name|expectedRsPtnToday
operator|.
name|add
argument_list|(
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":3}\t2\t4\tNULL\ttoday"
argument_list|)
expr_stmt|;
name|expectedRsPtnToday
operator|.
name|add
argument_list|(
literal|"{\"writeid\":3,\"bucketid\":536870912,\"rowid\":0}\t3\t3\t1001\ttoday"
argument_list|)
expr_stmt|;
name|expectedRsPtnToday
operator|.
name|add
argument_list|(
literal|"{\"writeid\":3,\"bucketid\":536870912,\"rowid\":2}\t4\t4\t1005\ttoday"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedRsPtnYesterday
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedRsPtnYesterday
operator|.
name|add
argument_list|(
literal|"{\"writeid\":1,\"bucketid\":536936448,\"rowid\":0}\t1\t4\tNULL\tyesterday"
argument_list|)
expr_stmt|;
name|expectedRsPtnYesterday
operator|.
name|add
argument_list|(
literal|"{\"writeid\":3,\"bucketid\":536936448,\"rowid\":1}\t3\t4\t1002\tyesterday"
argument_list|)
expr_stmt|;
name|expectedRsPtnYesterday
operator|.
name|add
argument_list|(
literal|"{\"writeid\":3,\"bucketid\":536936448,\"rowid\":2}\t4\t3\t1004\tyesterday"
argument_list|)
expr_stmt|;
comment|// Partition 'today'
name|List
argument_list|<
name|String
argument_list|>
name|rsCompactPtnToday
init|=
name|executeStatementOnDriverAndReturnResults
argument_list|(
literal|"select ROW__ID, * from  "
operator|+
name|tblName
operator|+
literal|" where ds='today'"
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"compacted read"
argument_list|,
name|expectedRsPtnToday
argument_list|,
name|rsCompactPtnToday
argument_list|)
expr_stmt|;
comment|// Partition 'yesterday'
name|List
argument_list|<
name|String
argument_list|>
name|rsCompactPtnYesterday
init|=
name|executeStatementOnDriverAndReturnResults
argument_list|(
literal|"select ROW__ID, * from  "
operator|+
name|tblName
operator|+
literal|" where ds='yesterday'"
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"compacted read"
argument_list|,
name|expectedRsPtnYesterday
argument_list|,
name|rsCompactPtnYesterday
argument_list|)
expr_stmt|;
comment|// Clean up
name|executeStatementOnDriver
argument_list|(
literal|"drop table "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runCompaction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|CompactionType
name|compactionType
parameter_list|,
name|String
modifier|...
name|partNames
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|COMPACTOR_CRUD_QUERY_BASED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|Worker
name|t
init|=
operator|new
name|Worker
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|t
operator|.
name|init
argument_list|(
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
argument_list|,
operator|new
name|AtomicBoolean
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|partNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|txnHandler
operator|.
name|compact
argument_list|(
operator|new
name|CompactionRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|compactionType
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|CompactionRequest
name|cr
init|=
operator|new
name|CompactionRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|compactionType
argument_list|)
decl_stmt|;
name|cr
operator|.
name|setPartitionname
argument_list|(
name|partName
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|void
name|runInitiator
parameter_list|(
name|HiveConf
name|hConf
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|hConf
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|COMPACTOR_CRUD_QUERY_BASED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Initiator
name|t
init|=
operator|new
name|Initiator
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
specifier|static
name|void
name|runWorker
parameter_list|(
name|HiveConf
name|hConf
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|hConf
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|COMPACTOR_CRUD_QUERY_BASED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Worker
name|t
init|=
operator|new
name|Worker
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
specifier|static
name|void
name|runCleaner
parameter_list|(
name|HiveConf
name|hConf
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|hConf
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Cleaner
name|t
init|=
operator|new
name|Cleaner
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
comment|/**    * Execute Hive CLI statement    *    * @param cmd arbitrary statement to execute    */
specifier|static
name|void
name|executeStatementOnDriver
parameter_list|(
name|String
name|cmd
parameter_list|,
name|IDriver
name|driver
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing: "
operator|+
name|cmd
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to execute \""
operator|+
name|cmd
operator|+
literal|"\". Driver returned: "
operator|+
name|cpr
argument_list|)
throw|;
block|}
block|}
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|executeStatementOnDriverAndReturnResults
parameter_list|(
name|String
name|cmd
parameter_list|,
name|IDriver
name|driver
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing: "
operator|+
name|cmd
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to execute \""
operator|+
name|cmd
operator|+
literal|"\". Driver returned: "
operator|+
name|cpr
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|rs
argument_list|)
expr_stmt|;
return|return
name|rs
return|;
block|}
block|}
end_class

end_unit

