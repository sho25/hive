begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LongColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactResponseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StringColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|CompactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CommandNeedRetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IOConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|common
operator|.
name|HCatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|DelimitedInputWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|HiveEndPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|StreamingConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|StreamingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|streaming
operator|.
name|TransactionBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|TestCompactor
block|{
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|salt
init|=
operator|new
name|AtomicInteger
argument_list|(
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCompactor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|TEST_DATA_DIR
init|=
name|HCatUtil
operator|.
name|makePathASafeFileName
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
name|TestCompactor
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"_"
operator|+
name|salt
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|BASIC_FILE_NAME
init|=
name|TEST_DATA_DIR
operator|+
literal|"/basic.input.data"
decl_stmt|;
specifier|private
specifier|final
name|String
name|TEST_WAREHOUSE_DIR
init|=
name|TEST_DATA_DIR
operator|+
literal|"/warehouse"
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|stagingFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
name|IMetaStoreClient
name|msClient
decl_stmt|;
specifier|private
name|Driver
name|driver
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|TEST_WAREHOUSE_DIR
argument_list|)
operator|.
name|mkdirs
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not create "
operator|+
name|TEST_WAREHOUSE_DIR
argument_list|)
throw|;
block|}
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|,
name|TEST_WAREHOUSE_DIR
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEINPUTFORMAT
argument_list|,
name|HiveInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DYNAMICPARTITIONINGMODE
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEMAPREDMODE
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
comment|//"org.apache.hadoop.hive.ql.io.HiveInputFormat"
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|prepDb
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|conf
operator|=
name|hiveConf
expr_stmt|;
name|msClient
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|driver
operator|=
operator|new
name|Driver
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|hiveConf
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|LOOP_SIZE
init|=
literal|3
decl_stmt|;
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[
name|LOOP_SIZE
operator|*
name|LOOP_SIZE
index|]
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|LOOP_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|String
name|si
init|=
name|i
operator|+
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|LOOP_SIZE
condition|;
name|j
operator|++
control|)
block|{
name|String
name|sj
init|=
literal|"S"
operator|+
name|j
operator|+
literal|"S"
decl_stmt|;
name|input
index|[
name|k
index|]
operator|=
name|si
operator|+
literal|"\t"
operator|+
name|sj
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
block|}
name|createTestDataFile
argument_list|(
name|BASIC_FILE_NAME
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|conf
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|msClient
operator|!=
literal|null
condition|)
block|{
name|msClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|driver
operator|!=
literal|null
condition|)
block|{
name|driver
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Simple schema evolution add columns with partitioning.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|schemaEvolutionAddColDynamicPartitioningInsert
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tblName
init|=
literal|"dpct"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tblName
operator|+
literal|"(a INT, b STRING) "
operator|+
literal|" PARTITIONED BY(ds string)"
operator|+
literal|" CLUSTERED BY(a) INTO 2 BUCKETS"
operator|+
comment|//currently ACID requires table to be bucketed
literal|" STORED AS ORC TBLPROPERTIES ('transactional'='true')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// First INSERT round.
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" partition (ds) values (1, 'fred', "
operator|+
literal|"'today'), (2, 'wilma', 'yesterday')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// ALTER TABLE ... ADD COLUMNS
name|executeStatementOnDriver
argument_list|(
literal|"ALTER TABLE "
operator|+
name|tblName
operator|+
literal|" ADD COLUMNS(c int)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Validate there is an added NULL for column c.
name|executeStatementOnDriver
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tblName
operator|+
literal|" ORDER BY a"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|valuesReadFromHiveDriver
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|valuesReadFromHiveDriver
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1\tfred\tNULL\ttoday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2\twilma\tNULL\tyesterday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Second INSERT round with new inserts into previously existing partition 'yesterday'.
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" partition (ds) values "
operator|+
literal|"(3, 'mark', 1900, 'soon'), (4, 'douglas', 1901, 'last_century'), "
operator|+
literal|"(5, 'doc', 1902, 'yesterday')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Validate there the new insertions for column c.
name|executeStatementOnDriver
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tblName
operator|+
literal|" ORDER BY a"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|valuesReadFromHiveDriver
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|valuesReadFromHiveDriver
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1\tfred\tNULL\ttoday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2\twilma\tNULL\tyesterday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3\tmark\t1900\tsoon"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"4\tdouglas\t1901\tlast_century"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"5\tdoc\t1902\tyesterday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|Initiator
name|initiator
init|=
operator|new
name|Initiator
argument_list|()
decl_stmt|;
name|initiator
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|initiator
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_COMPACTOR_DELTA_NUM_THRESHOLD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|initiator
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|initiator
operator|.
name|init
argument_list|(
name|stop
argument_list|,
operator|new
name|AtomicBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|initiator
operator|.
name|run
argument_list|()
expr_stmt|;
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compacts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDbname
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tblName
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"initiated"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|partNames
operator|.
name|add
argument_list|(
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getPartitionname
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|partNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ds=last_century"
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ds=soon"
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ds=today"
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ds=yesterday"
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate after compaction.
name|executeStatementOnDriver
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tblName
operator|+
literal|" ORDER BY a"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|valuesReadFromHiveDriver
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|valuesReadFromHiveDriver
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1\tfred\tNULL\ttoday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2\twilma\tNULL\tyesterday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3\tmark\t1900\tsoon"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"4\tdouglas\t1901\tlast_century"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"5\tdoc\t1902\tyesterday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|schemaEvolutionAddColDynamicPartitioningUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tblName
init|=
literal|"udpct"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tblName
operator|+
literal|"(a INT, b STRING) "
operator|+
literal|" PARTITIONED BY(ds string)"
operator|+
literal|" CLUSTERED BY(a) INTO 2 BUCKETS"
operator|+
comment|//currently ACID requires table to be bucketed
literal|" STORED AS ORC TBLPROPERTIES ('transactional'='true')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" partition (ds) values (1, 'fred', "
operator|+
literal|"'today'), (2, 'wilma', 'yesterday')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"update "
operator|+
name|tblName
operator|+
literal|" set b = 'barney'"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Validate the update.
name|executeStatementOnDriver
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tblName
operator|+
literal|" ORDER BY a"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|valuesReadFromHiveDriver
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|valuesReadFromHiveDriver
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1\tbarney\ttoday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2\tbarney\tyesterday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// ALTER TABLE ... ADD COLUMNS
name|executeStatementOnDriver
argument_list|(
literal|"ALTER TABLE "
operator|+
name|tblName
operator|+
literal|" ADD COLUMNS(c int)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Validate there is an added NULL for column c.
name|executeStatementOnDriver
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tblName
operator|+
literal|" ORDER BY a"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|valuesReadFromHiveDriver
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|valuesReadFromHiveDriver
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1\tbarney\tNULL\ttoday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2\tbarney\tNULL\tyesterday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Second INSERT round with new inserts into previously existing partition 'yesterday'.
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" partition (ds) values "
operator|+
literal|"(3, 'mark', 1900, 'soon'), (4, 'douglas', 1901, 'last_century'), "
operator|+
literal|"(5, 'doc', 1902, 'yesterday')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Validate there the new insertions for column c.
name|executeStatementOnDriver
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tblName
operator|+
literal|" ORDER BY a"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|valuesReadFromHiveDriver
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|valuesReadFromHiveDriver
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1\tbarney\tNULL\ttoday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2\tbarney\tNULL\tyesterday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3\tmark\t1900\tsoon"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"4\tdouglas\t1901\tlast_century"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"5\tdoc\t1902\tyesterday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"update "
operator|+
name|tblName
operator|+
literal|" set c = 2000"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Validate the update of new column c, even in old rows.
name|executeStatementOnDriver
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tblName
operator|+
literal|" ORDER BY a"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|valuesReadFromHiveDriver
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|valuesReadFromHiveDriver
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1\tbarney\t2000\ttoday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2\tbarney\t2000\tyesterday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3\tmark\t2000\tsoon"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"4\tdouglas\t2000\tlast_century"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"5\tdoc\t2000\tyesterday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|Initiator
name|initiator
init|=
operator|new
name|Initiator
argument_list|()
decl_stmt|;
name|initiator
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|initiator
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set to 1 so insert doesn't set it off but update does
name|conf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_COMPACTOR_DELTA_NUM_THRESHOLD
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|initiator
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|initiator
operator|.
name|init
argument_list|(
name|stop
argument_list|,
operator|new
name|AtomicBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|initiator
operator|.
name|run
argument_list|()
expr_stmt|;
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compacts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDbname
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tblName
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"initiated"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|partNames
operator|.
name|add
argument_list|(
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getPartitionname
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|partNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ds=last_century"
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ds=soon"
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ds=today"
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ds=yesterday"
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate after compaction.
name|executeStatementOnDriver
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tblName
operator|+
literal|" ORDER BY a"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|valuesReadFromHiveDriver
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|valuesReadFromHiveDriver
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1\tbarney\t2000\ttoday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2\tbarney\t2000\tyesterday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3\tmark\t2000\tsoon"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"4\tdouglas\t2000\tlast_century"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"5\tdoc\t2000\tyesterday"
argument_list|,
name|valuesReadFromHiveDriver
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * After each major compaction, stats need to be updated on each column of the    * table/partition which previously had stats.    * 1. create a bucketed ORC backed table (Orc is currently required by ACID)    * 2. populate 2 partitions with data    * 3. compute stats    * 4. insert some data into the table using StreamingAPI    * 5. Trigger major compaction (which should update stats)    * 6. check that stats have been updated    * @throws Exception    * todo:    * 2. add non-partitioned test    * 4. add a test with sorted table?    */
annotation|@
name|Test
specifier|public
name|void
name|testStatsAfterCompactionPartTbl
parameter_list|()
throws|throws
name|Exception
block|{
comment|//as of (8/27/2014) Hive 0.14, ACID/Orc requires HiveInputFormat
name|String
name|tblName
init|=
literal|"compaction_test"
decl_stmt|;
name|String
name|tblNameStg
init|=
name|tblName
operator|+
literal|"_stg"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblNameStg
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tblName
operator|+
literal|"(a INT, b STRING) "
operator|+
literal|" PARTITIONED BY(bkt INT)"
operator|+
literal|" CLUSTERED BY(a) INTO 4 BUCKETS"
operator|+
comment|//currently ACID requires table to be bucketed
literal|" STORED AS ORC  TBLPROPERTIES ('transactional'='true')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"CREATE EXTERNAL TABLE "
operator|+
name|tblNameStg
operator|+
literal|"(a INT, b STRING)"
operator|+
literal|" ROW FORMAT DELIMITED FIELDS TERMINATED BY '\\t' LINES TERMINATED BY '\\n'"
operator|+
literal|" STORED AS TEXTFILE"
operator|+
literal|" LOCATION '"
operator|+
name|stagingFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"load data local inpath '"
operator|+
name|BASIC_FILE_NAME
operator|+
literal|"' overwrite into table "
operator|+
name|tblNameStg
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|execSelectAndDumpData
argument_list|(
literal|"select * from "
operator|+
name|tblNameStg
argument_list|,
name|driver
argument_list|,
literal|"Dumping data for "
operator|+
name|tblNameStg
operator|+
literal|" after load:"
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"FROM "
operator|+
name|tblNameStg
operator|+
literal|" INSERT INTO TABLE "
operator|+
name|tblName
operator|+
literal|" PARTITION(bkt=0) "
operator|+
literal|"SELECT a, b where a< 2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"FROM "
operator|+
name|tblNameStg
operator|+
literal|" INSERT INTO TABLE "
operator|+
name|tblName
operator|+
literal|" PARTITION(bkt=1) "
operator|+
literal|"SELECT a, b where a>= 2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|execSelectAndDumpData
argument_list|(
literal|"select * from "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|,
literal|"Dumping data for "
operator|+
name|tblName
operator|+
literal|" after load:"
argument_list|)
expr_stmt|;
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CompactionInfo
name|ci
init|=
operator|new
name|CompactionInfo
argument_list|(
literal|"default"
argument_list|,
name|tblName
argument_list|,
literal|"bkt=0"
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"List of stats columns before analyze Part1: "
operator|+
name|txnHandler
operator|.
name|findColumnsWithStats
argument_list|(
name|ci
argument_list|)
argument_list|)
expr_stmt|;
name|Worker
operator|.
name|StatsUpdater
name|su
init|=
name|Worker
operator|.
name|StatsUpdater
operator|.
name|init
argument_list|(
name|ci
argument_list|,
name|colNames
argument_list|,
name|conf
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
decl_stmt|;
name|su
operator|.
name|gatherStats
argument_list|()
expr_stmt|;
comment|//compute stats before compaction
name|LOG
operator|.
name|debug
argument_list|(
literal|"List of stats columns after analyze Part1: "
operator|+
name|txnHandler
operator|.
name|findColumnsWithStats
argument_list|(
name|ci
argument_list|)
argument_list|)
expr_stmt|;
name|CompactionInfo
name|ciPart2
init|=
operator|new
name|CompactionInfo
argument_list|(
literal|"default"
argument_list|,
name|tblName
argument_list|,
literal|"bkt=1"
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"List of stats columns before analyze Part2: "
operator|+
name|txnHandler
operator|.
name|findColumnsWithStats
argument_list|(
name|ci
argument_list|)
argument_list|)
expr_stmt|;
name|su
operator|=
name|Worker
operator|.
name|StatsUpdater
operator|.
name|init
argument_list|(
name|ciPart2
argument_list|,
name|colNames
argument_list|,
name|conf
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
expr_stmt|;
name|su
operator|.
name|gatherStats
argument_list|()
expr_stmt|;
comment|//compute stats before compaction
name|LOG
operator|.
name|debug
argument_list|(
literal|"List of stats columns after analyze Part2: "
operator|+
name|txnHandler
operator|.
name|findColumnsWithStats
argument_list|(
name|ci
argument_list|)
argument_list|)
expr_stmt|;
comment|//now make sure we get the stats we expect for partition we are going to add data to later
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|stats
init|=
name|msClient
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|ci
operator|.
name|dbname
argument_list|,
name|ci
operator|.
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ci
operator|.
name|partName
argument_list|)
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
init|=
name|stats
operator|.
name|get
argument_list|(
name|ci
operator|.
name|partName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"No stats found for partition "
operator|+
name|ci
operator|.
name|partName
argument_list|,
name|colStats
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected column 'a' at index 0"
argument_list|,
literal|"a"
argument_list|,
name|colStats
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected column 'b' at index 1"
argument_list|,
literal|"b"
argument_list|,
name|colStats
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|LongColumnStatsData
name|colAStats
init|=
name|colStats
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"lowValue a"
argument_list|,
literal|1
argument_list|,
name|colAStats
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"highValue a"
argument_list|,
literal|1
argument_list|,
name|colAStats
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"numNulls a"
argument_list|,
literal|0
argument_list|,
name|colAStats
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"numNdv a"
argument_list|,
literal|1
argument_list|,
name|colAStats
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|StringColumnStatsData
name|colBStats
init|=
name|colStats
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"maxColLen b"
argument_list|,
literal|3
argument_list|,
name|colBStats
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"avgColLen b"
argument_list|,
literal|3.0
argument_list|,
name|colBStats
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"numNulls b"
argument_list|,
literal|0
argument_list|,
name|colBStats
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nunDVs"
argument_list|,
literal|3
argument_list|,
name|colBStats
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
comment|//now save stats for partition we won't modify
name|stats
operator|=
name|msClient
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|ciPart2
operator|.
name|dbname
argument_list|,
name|ciPart2
operator|.
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ciPart2
operator|.
name|partName
argument_list|)
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|colStats
operator|=
name|stats
operator|.
name|get
argument_list|(
name|ciPart2
operator|.
name|partName
argument_list|)
expr_stmt|;
name|LongColumnStatsData
name|colAStatsPart2
init|=
name|colStats
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
decl_stmt|;
name|StringColumnStatsData
name|colBStatsPart2
init|=
name|colStats
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
decl_stmt|;
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
literal|null
argument_list|,
name|ci
operator|.
name|dbname
argument_list|,
name|ci
operator|.
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
comment|/*next call will eventually end up in HiveEndPoint.createPartitionIfNotExists() which     makes an operation on Driver     * and starts it's own CliSessionState and then closes it, which removes it from ThreadLoacal;     * thus the session     * created in this class is gone after this; I fixed it in HiveEndPoint*/
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|true
argument_list|,
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|2
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TransactionBatch
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|txnBatch
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"50,Kiev"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"51,St. Petersburg"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"44,Boston"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"52,Tel Aviv"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"53,Atlantis"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"53,Boston"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|execSelectAndDumpData
argument_list|(
literal|"select * from "
operator|+
name|ci
operator|.
name|getFullTableName
argument_list|()
argument_list|,
name|driver
argument_list|,
name|ci
operator|.
name|getFullTableName
argument_list|()
argument_list|)
expr_stmt|;
comment|//so now we have written some new data to bkt=0 and it shows up
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
name|ci
operator|.
name|dbname
argument_list|,
name|ci
operator|.
name|tableName
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setPartitionname
argument_list|(
name|ci
operator|.
name|partName
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|Worker
name|t
init|=
operator|new
name|Worker
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
if|if
condition|(
literal|1
operator|!=
name|compacts
operator|.
name|size
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting 1 file and found "
operator|+
name|compacts
operator|.
name|size
argument_list|()
operator|+
literal|" files "
operator|+
name|compacts
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ready for cleaning"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|=
name|msClient
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|ci
operator|.
name|dbname
argument_list|,
name|ci
operator|.
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ci
operator|.
name|partName
argument_list|)
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|colStats
operator|=
name|stats
operator|.
name|get
argument_list|(
name|ci
operator|.
name|partName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"No stats found for partition "
operator|+
name|ci
operator|.
name|partName
argument_list|,
name|colStats
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected column 'a' at index 0"
argument_list|,
literal|"a"
argument_list|,
name|colStats
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected column 'b' at index 1"
argument_list|,
literal|"b"
argument_list|,
name|colStats
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|colAStats
operator|=
name|colStats
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"lowValue a"
argument_list|,
literal|1
argument_list|,
name|colAStats
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"highValue a"
argument_list|,
literal|53
argument_list|,
name|colAStats
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"numNulls a"
argument_list|,
literal|0
argument_list|,
name|colAStats
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"numNdv a"
argument_list|,
literal|6
argument_list|,
name|colAStats
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|colBStats
operator|=
name|colStats
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"maxColLen b"
argument_list|,
literal|14
argument_list|,
name|colBStats
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
comment|//cast it to long to get rid of periodic decimal
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"avgColLen b"
argument_list|,
operator|(
name|long
operator|)
literal|6.1111111111
argument_list|,
operator|(
name|long
operator|)
name|colBStats
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"numNulls b"
argument_list|,
literal|0
argument_list|,
name|colBStats
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nunDVs"
argument_list|,
literal|8
argument_list|,
name|colBStats
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
comment|//now check that stats for partition we didn't modify did not change
name|stats
operator|=
name|msClient
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|ciPart2
operator|.
name|dbname
argument_list|,
name|ciPart2
operator|.
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ciPart2
operator|.
name|partName
argument_list|)
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|colStats
operator|=
name|stats
operator|.
name|get
argument_list|(
name|ciPart2
operator|.
name|partName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected stats for "
operator|+
name|ciPart2
operator|.
name|partName
operator|+
literal|" to stay the same"
argument_list|,
name|colAStatsPart2
argument_list|,
name|colStats
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected stats for "
operator|+
name|ciPart2
operator|.
name|partName
operator|+
literal|" to stay the same"
argument_list|,
name|colBStatsPart2
argument_list|,
name|colStats
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dynamicPartitioningInsert
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tblName
init|=
literal|"dpct"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tblName
operator|+
literal|"(a INT, b STRING) "
operator|+
literal|" PARTITIONED BY(ds string)"
operator|+
literal|" CLUSTERED BY(a) INTO 2 BUCKETS"
operator|+
comment|//currently ACID requires table to be bucketed
literal|" STORED AS ORC TBLPROPERTIES ('transactional'='true')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" partition (ds) values (1, 'fred', "
operator|+
literal|"'today'), (2, 'wilma', 'yesterday')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|Initiator
name|initiator
init|=
operator|new
name|Initiator
argument_list|()
decl_stmt|;
name|initiator
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|initiator
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_COMPACTOR_DELTA_NUM_THRESHOLD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|initiator
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|initiator
operator|.
name|init
argument_list|(
name|stop
argument_list|,
operator|new
name|AtomicBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|initiator
operator|.
name|run
argument_list|()
expr_stmt|;
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compacts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDbname
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tblName
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"initiated"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|partNames
operator|.
name|add
argument_list|(
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getPartitionname
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|partNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ds=today"
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ds=yesterday"
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dynamicPartitioningUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tblName
init|=
literal|"udpct"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tblName
operator|+
literal|"(a INT, b STRING) "
operator|+
literal|" PARTITIONED BY(ds string)"
operator|+
literal|" CLUSTERED BY(a) INTO 2 BUCKETS"
operator|+
comment|//currently ACID requires table to be bucketed
literal|" STORED AS ORC TBLPROPERTIES ('transactional'='true')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" partition (ds) values (1, 'fred', "
operator|+
literal|"'today'), (2, 'wilma', 'yesterday')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"update "
operator|+
name|tblName
operator|+
literal|" set b = 'barney'"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|Initiator
name|initiator
init|=
operator|new
name|Initiator
argument_list|()
decl_stmt|;
name|initiator
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|initiator
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set to 1 so insert doesn't set it off but update does
name|conf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_COMPACTOR_DELTA_NUM_THRESHOLD
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|initiator
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|initiator
operator|.
name|init
argument_list|(
name|stop
argument_list|,
operator|new
name|AtomicBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|initiator
operator|.
name|run
argument_list|()
expr_stmt|;
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compacts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDbname
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tblName
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"initiated"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|partNames
operator|.
name|add
argument_list|(
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getPartitionname
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|partNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ds=today"
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ds=yesterday"
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dynamicPartitioningDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tblName
init|=
literal|"ddpct"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tblName
operator|+
literal|"(a INT, b STRING) "
operator|+
literal|" PARTITIONED BY(ds string)"
operator|+
literal|" CLUSTERED BY(a) INTO 2 BUCKETS"
operator|+
comment|//currently ACID requires table to be bucketed
literal|" STORED AS ORC TBLPROPERTIES ('transactional'='true')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" partition (ds) values (1, 'fred', "
operator|+
literal|"'today'), (2, 'wilma', 'yesterday')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"update "
operator|+
name|tblName
operator|+
literal|" set b = 'fred' where a = 1"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"delete from "
operator|+
name|tblName
operator|+
literal|" where b = 'fred'"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|Initiator
name|initiator
init|=
operator|new
name|Initiator
argument_list|()
decl_stmt|;
name|initiator
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|initiator
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set to 2 so insert and update don't set it off but delete does
name|conf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_COMPACTOR_DELTA_NUM_THRESHOLD
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|initiator
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|initiator
operator|.
name|init
argument_list|(
name|stop
argument_list|,
operator|new
name|AtomicBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|initiator
operator|.
name|run
argument_list|()
expr_stmt|;
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compacts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getDbname
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tblName
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"initiated"
argument_list|,
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|partNames
operator|.
name|add
argument_list|(
name|compacts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getPartitionname
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|partNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ds=today"
argument_list|,
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minorCompactWhileStreaming
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tblName
init|=
literal|"cws"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|String
name|columnNamesProperty
init|=
literal|"a,b"
decl_stmt|;
name|String
name|columnTypesProperty
init|=
literal|"int:string"
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tblName
operator|+
literal|"(a INT, b STRING) "
operator|+
literal|" CLUSTERED BY(a) INTO 1 BUCKETS"
operator|+
comment|//currently ACID requires table to be bucketed
literal|" STORED AS ORC  TBLPROPERTIES ('transactional'='true')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
literal|null
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|,
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Write a couple of batches
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|writeBatch
argument_list|(
name|connection
argument_list|,
name|writer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Start a third batch, but don't close it.
name|writeBatch
argument_list|(
name|connection
argument_list|,
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Now, compact
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
operator|new
name|CompactionRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
argument_list|)
expr_stmt|;
name|Worker
name|t
init|=
operator|new
name|Worker
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|msClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|)
decl_stmt|;
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[
name|stat
operator|.
name|length
index|]
decl_stmt|;
name|Path
name|resultFile
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|names
index|[
name|i
index|]
operator|=
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|names
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"delta_0000003_0000006"
argument_list|)
condition|)
block|{
name|resultFile
operator|=
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|String
index|[]
name|expected
init|=
operator|new
name|String
index|[]
block|{
literal|"delta_0000003_0000004"
block|,
literal|"delta_0000003_0000006"
block|,
literal|"delta_0000005_0000006"
block|,
literal|"delta_0000007_0000008"
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|deepEquals
argument_list|(
name|expected
argument_list|,
name|names
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expected
argument_list|)
operator|+
literal|", found: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|names
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|checkExpectedTxnsPresent
argument_list|(
literal|null
argument_list|,
operator|new
name|Path
index|[]
block|{
name|resultFile
block|}
argument_list|,
name|columnNamesProperty
argument_list|,
name|columnTypesProperty
argument_list|,
literal|0
argument_list|,
literal|3L
argument_list|,
literal|6L
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|majorCompactWhileStreaming
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tblName
init|=
literal|"cws"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|String
name|columnNamesProperty
init|=
literal|"a,b"
decl_stmt|;
name|String
name|columnTypesProperty
init|=
literal|"int:string"
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tblName
operator|+
literal|"(a INT, b STRING) "
operator|+
literal|" CLUSTERED BY(a) INTO 1 BUCKETS"
operator|+
comment|//currently ACID requires table to be bucketed
literal|" STORED AS ORC  TBLPROPERTIES ('transactional'='true') "
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
literal|null
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|,
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Write a couple of batches
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|writeBatch
argument_list|(
name|connection
argument_list|,
name|writer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Start a third batch, but don't close it.
name|writeBatch
argument_list|(
name|connection
argument_list|,
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Now, compact
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
operator|new
name|CompactionRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|)
argument_list|)
expr_stmt|;
name|Worker
name|t
init|=
operator|new
name|Worker
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|msClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|AcidUtils
operator|.
name|baseFileFilter
argument_list|)
decl_stmt|;
if|if
condition|(
literal|1
operator|!=
name|stat
operator|.
name|length
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting 1 file \"base_0000006\" and found "
operator|+
name|stat
operator|.
name|length
operator|+
literal|" files "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|stat
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|stat
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|name
argument_list|,
literal|"base_0000006"
argument_list|)
expr_stmt|;
name|checkExpectedTxnsPresent
argument_list|(
name|stat
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|,
name|columnNamesProperty
argument_list|,
name|columnTypesProperty
argument_list|,
literal|0
argument_list|,
literal|3L
argument_list|,
literal|6L
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|minorCompactAfterAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|agentInfo
init|=
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tblName
init|=
literal|"cws"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|String
name|columnNamesProperty
init|=
literal|"a,b"
decl_stmt|;
name|String
name|columnTypesProperty
init|=
literal|"int:string"
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tblName
operator|+
literal|"(a INT, b STRING) "
operator|+
literal|" CLUSTERED BY(a) INTO 1 BUCKETS"
operator|+
comment|//currently ACID requires table to be bucketed
literal|" STORED AS ORC  TBLPROPERTIES ('transactional'='true')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
literal|null
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|,
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Write a couple of batches
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|writeBatch
argument_list|(
name|connection
argument_list|,
name|writer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Start a third batch, abort everything, don't properly close it
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|2
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|abort
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|abort
argument_list|()
expr_stmt|;
comment|// Now, compact
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
operator|new
name|CompactionRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
argument_list|)
expr_stmt|;
name|Worker
name|t
init|=
operator|new
name|Worker
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|msClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|)
decl_stmt|;
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[
name|stat
operator|.
name|length
index|]
decl_stmt|;
name|Path
name|resultDelta
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|names
index|[
name|i
index|]
operator|=
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|names
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"delta_0000003_0000006"
argument_list|)
condition|)
block|{
name|resultDelta
operator|=
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|String
index|[]
name|expected
init|=
operator|new
name|String
index|[]
block|{
literal|"delta_0000003_0000004"
block|,
literal|"delta_0000003_0000006"
block|,
literal|"delta_0000005_0000006"
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|deepEquals
argument_list|(
name|expected
argument_list|,
name|names
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expected
argument_list|)
operator|+
literal|", found: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|names
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|checkExpectedTxnsPresent
argument_list|(
literal|null
argument_list|,
operator|new
name|Path
index|[]
block|{
name|resultDelta
block|}
argument_list|,
name|columnNamesProperty
argument_list|,
name|columnTypesProperty
argument_list|,
literal|0
argument_list|,
literal|3L
argument_list|,
literal|6L
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|majorCompactAfterAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tblName
init|=
literal|"cws"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|String
name|columnNamesProperty
init|=
literal|"a,b"
decl_stmt|;
name|String
name|columnTypesProperty
init|=
literal|"int:string"
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tblName
operator|+
literal|"(a INT, b STRING) "
operator|+
literal|" CLUSTERED BY(a) INTO 1 BUCKETS"
operator|+
comment|//currently ACID requires table to be bucketed
literal|" STORED AS ORC  TBLPROPERTIES ('transactional'='true')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
literal|null
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|,
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Write a couple of batches
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|writeBatch
argument_list|(
name|connection
argument_list|,
name|writer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Start a third batch, but don't close it.
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|2
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|abort
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|abort
argument_list|()
expr_stmt|;
comment|// Now, compact
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
operator|new
name|CompactionRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|)
argument_list|)
expr_stmt|;
name|Worker
name|t
init|=
operator|new
name|Worker
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|msClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|AcidUtils
operator|.
name|baseFileFilter
argument_list|)
decl_stmt|;
if|if
condition|(
literal|1
operator|!=
name|stat
operator|.
name|length
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"majorCompactAfterAbort FileStatus[] stat "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|stat
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|1
operator|!=
name|stat
operator|.
name|length
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting 1 file \"base_0000006\" and found "
operator|+
name|stat
operator|.
name|length
operator|+
literal|" files "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|stat
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|stat
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
literal|"base_0000006"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"majorCompactAfterAbort name "
operator|+
name|name
operator|+
literal|" not equals to base_0000006"
argument_list|)
expr_stmt|;
block|}
name|checkExpectedTxnsPresent
argument_list|(
name|stat
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|,
name|columnNamesProperty
argument_list|,
name|columnTypesProperty
argument_list|,
literal|0
argument_list|,
literal|3L
argument_list|,
literal|6L
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|majorCompactWhileStreamingForSplitUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tblName
init|=
literal|"cws"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|String
name|columnNamesProperty
init|=
literal|"a,b"
decl_stmt|;
name|String
name|columnTypesProperty
init|=
literal|"int:string"
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tblName
operator|+
literal|"(a INT, b STRING) "
operator|+
literal|" CLUSTERED BY(a) INTO 2 BUCKETS"
operator|+
comment|//currently ACID requires table to be bucketed
literal|" STORED AS ORC  TBLPROPERTIES ('transactional'='true', "
operator|+
literal|"'transactional_properties'='default') "
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// this turns on split-update U=D+I
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
literal|null
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|,
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Write a couple of batches
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|writeBatch
argument_list|(
name|connection
argument_list|,
name|writer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Start a third batch, but don't close it.
name|writeBatch
argument_list|(
name|connection
argument_list|,
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Now, compact
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
operator|new
name|CompactionRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|)
argument_list|)
expr_stmt|;
name|Worker
name|t
init|=
operator|new
name|Worker
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|msClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|AcidUtils
operator|.
name|baseFileFilter
argument_list|)
decl_stmt|;
if|if
condition|(
literal|1
operator|!=
name|stat
operator|.
name|length
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting 1 file \"base_0000006\" and found "
operator|+
name|stat
operator|.
name|length
operator|+
literal|" files "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|stat
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|stat
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|name
argument_list|,
literal|"base_0000006"
argument_list|)
expr_stmt|;
name|checkExpectedTxnsPresent
argument_list|(
name|stat
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|,
name|columnNamesProperty
argument_list|,
name|columnTypesProperty
argument_list|,
literal|0
argument_list|,
literal|3L
argument_list|,
literal|6L
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinorCompactionForSplitUpdateWithInsertsAndDeletes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|agentInfo
init|=
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tblName
init|=
literal|"cws"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|String
name|columnNamesProperty
init|=
literal|"a,b"
decl_stmt|;
name|String
name|columnTypesProperty
init|=
literal|"int:string"
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tblName
operator|+
literal|"(a INT, b STRING) "
operator|+
literal|" CLUSTERED BY(a) INTO 1 BUCKETS"
operator|+
comment|//currently ACID requires table to be bucketed
literal|" STORED AS ORC  TBLPROPERTIES ('transactional'='true',"
operator|+
literal|"'transactional_properties'='default')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Insert some data -> this will generate only insert deltas and no delete deltas: delta_3_3
name|executeStatementOnDriver
argument_list|(
literal|"INSERT INTO "
operator|+
name|tblName
operator|+
literal|"(a,b) VALUES(1, 'foo')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Insert some data -> this will again generate only insert deltas and no delete deltas: delta_4_4
name|executeStatementOnDriver
argument_list|(
literal|"INSERT INTO "
operator|+
name|tblName
operator|+
literal|"(a,b) VALUES(2, 'bar')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Delete some data -> this will generate only delete deltas and no insert deltas: delete_delta_5_5
name|executeStatementOnDriver
argument_list|(
literal|"DELETE FROM "
operator|+
name|tblName
operator|+
literal|" WHERE a = 2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Now, compact -> Compaction produces a single range for both delta and delete delta
comment|// That is, both delta and delete_deltas would be compacted into delta_3_5 and delete_delta_3_5
comment|// even though there are only two delta_3_3, delta_4_4 and one delete_delta_5_5.
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
operator|new
name|CompactionRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
argument_list|)
expr_stmt|;
name|Worker
name|t
init|=
operator|new
name|Worker
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|msClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Verify that we have got correct set of deltas.
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|)
decl_stmt|;
name|String
index|[]
name|deltas
init|=
operator|new
name|String
index|[
name|stat
operator|.
name|length
index|]
decl_stmt|;
name|Path
name|minorCompactedDelta
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deltas
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|deltas
index|[
name|i
index|]
operator|=
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|deltas
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"delta_0000003_0000005"
argument_list|)
condition|)
block|{
name|minorCompactedDelta
operator|=
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|deltas
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedDeltas
init|=
operator|new
name|String
index|[]
block|{
literal|"delta_0000003_0000003_0000"
block|,
literal|"delta_0000003_0000005"
block|,
literal|"delta_0000004_0000004_0000"
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|deepEquals
argument_list|(
name|expectedDeltas
argument_list|,
name|deltas
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expectedDeltas
argument_list|)
operator|+
literal|", found: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|deltas
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|checkExpectedTxnsPresent
argument_list|(
literal|null
argument_list|,
operator|new
name|Path
index|[]
block|{
name|minorCompactedDelta
block|}
argument_list|,
name|columnNamesProperty
argument_list|,
name|columnTypesProperty
argument_list|,
literal|0
argument_list|,
literal|3L
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
comment|// Verify that we have got correct set of delete_deltas.
name|FileStatus
index|[]
name|deleteDeltaStat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|AcidUtils
operator|.
name|deleteEventDeltaDirFilter
argument_list|)
decl_stmt|;
name|String
index|[]
name|deleteDeltas
init|=
operator|new
name|String
index|[
name|deleteDeltaStat
operator|.
name|length
index|]
decl_stmt|;
name|Path
name|minorCompactedDeleteDelta
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deleteDeltas
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|deleteDeltas
index|[
name|i
index|]
operator|=
name|deleteDeltaStat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|deleteDeltas
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"delete_delta_0000003_0000005"
argument_list|)
condition|)
block|{
name|minorCompactedDeleteDelta
operator|=
name|deleteDeltaStat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|deleteDeltas
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedDeleteDeltas
init|=
operator|new
name|String
index|[]
block|{
literal|"delete_delta_0000003_0000005"
block|,
literal|"delete_delta_0000005_0000005_0000"
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|deepEquals
argument_list|(
name|expectedDeleteDeltas
argument_list|,
name|deleteDeltas
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expectedDeleteDeltas
argument_list|)
operator|+
literal|", found: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|deleteDeltas
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|checkExpectedTxnsPresent
argument_list|(
literal|null
argument_list|,
operator|new
name|Path
index|[]
block|{
name|minorCompactedDeleteDelta
block|}
argument_list|,
name|columnNamesProperty
argument_list|,
name|columnTypesProperty
argument_list|,
literal|0
argument_list|,
literal|4L
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinorCompactionForSplitUpdateWithOnlyInserts
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|agentInfo
init|=
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tblName
init|=
literal|"cws"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|String
name|columnNamesProperty
init|=
literal|"a,b"
decl_stmt|;
name|String
name|columnTypesProperty
init|=
literal|"int:string"
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tblName
operator|+
literal|"(a INT, b STRING) "
operator|+
literal|" CLUSTERED BY(a) INTO 1 BUCKETS"
operator|+
comment|//currently ACID requires table to be bucketed
literal|" STORED AS ORC  TBLPROPERTIES ('transactional'='true',"
operator|+
literal|"'transactional_properties'='default')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Insert some data -> this will generate only insert deltas and no delete deltas: delta_1_1
name|executeStatementOnDriver
argument_list|(
literal|"INSERT INTO "
operator|+
name|tblName
operator|+
literal|"(a,b) VALUES(1, 'foo')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Insert some data -> this will again generate only insert deltas and no delete deltas: delta_2_2
name|executeStatementOnDriver
argument_list|(
literal|"INSERT INTO "
operator|+
name|tblName
operator|+
literal|"(a,b) VALUES(2, 'bar')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Now, compact
comment|// One important thing to note in this test is that minor compaction always produces
comment|// delta_x_y and a counterpart delete_delta_x_y, even when there are no delete_delta events.
comment|// Such a choice has been made to simplify processing of AcidUtils.getAcidState().
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
operator|new
name|CompactionRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
argument_list|)
expr_stmt|;
name|Worker
name|t
init|=
operator|new
name|Worker
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|msClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Verify that we have got correct set of deltas.
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|)
decl_stmt|;
name|String
index|[]
name|deltas
init|=
operator|new
name|String
index|[
name|stat
operator|.
name|length
index|]
decl_stmt|;
name|Path
name|minorCompactedDelta
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deltas
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|deltas
index|[
name|i
index|]
operator|=
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|deltas
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"delta_0000003_0000004"
argument_list|)
condition|)
block|{
name|minorCompactedDelta
operator|=
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|deltas
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedDeltas
init|=
operator|new
name|String
index|[]
block|{
literal|"delta_0000003_0000003_0000"
block|,
literal|"delta_0000003_0000004"
block|,
literal|"delta_0000004_0000004_0000"
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|deepEquals
argument_list|(
name|expectedDeltas
argument_list|,
name|deltas
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expectedDeltas
argument_list|)
operator|+
literal|", found: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|deltas
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|checkExpectedTxnsPresent
argument_list|(
literal|null
argument_list|,
operator|new
name|Path
index|[]
block|{
name|minorCompactedDelta
block|}
argument_list|,
name|columnNamesProperty
argument_list|,
name|columnTypesProperty
argument_list|,
literal|0
argument_list|,
literal|3L
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
comment|// Verify that we have got correct set of delete_deltas.
name|FileStatus
index|[]
name|deleteDeltaStat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|AcidUtils
operator|.
name|deleteEventDeltaDirFilter
argument_list|)
decl_stmt|;
name|String
index|[]
name|deleteDeltas
init|=
operator|new
name|String
index|[
name|deleteDeltaStat
operator|.
name|length
index|]
decl_stmt|;
name|Path
name|minorCompactedDeleteDelta
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deleteDeltas
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|deleteDeltas
index|[
name|i
index|]
operator|=
name|deleteDeltaStat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|deleteDeltas
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"delete_delta_0000003_0000004"
argument_list|)
condition|)
block|{
name|minorCompactedDeleteDelta
operator|=
name|deleteDeltaStat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|deleteDeltas
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedDeleteDeltas
init|=
operator|new
name|String
index|[]
block|{
literal|"delete_delta_0000003_0000004"
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|deepEquals
argument_list|(
name|expectedDeleteDeltas
argument_list|,
name|deleteDeltas
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expectedDeleteDeltas
argument_list|)
operator|+
literal|", found: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|deleteDeltas
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// There should be no rows in the delete_delta because there have been no delete events.
name|checkExpectedTxnsPresent
argument_list|(
literal|null
argument_list|,
operator|new
name|Path
index|[]
block|{
name|minorCompactedDeleteDelta
block|}
argument_list|,
name|columnNamesProperty
argument_list|,
name|columnTypesProperty
argument_list|,
literal|0
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|minorCompactWhileStreamingWithSplitUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tblName
init|=
literal|"cws"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|String
name|columnNamesProperty
init|=
literal|"a,b"
decl_stmt|;
name|String
name|columnTypesProperty
init|=
literal|"int:string"
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tblName
operator|+
literal|"(a INT, b STRING) "
operator|+
literal|" CLUSTERED BY(a) INTO 1 BUCKETS"
operator|+
comment|//currently ACID requires table to be bucketed
literal|" STORED AS ORC  TBLPROPERTIES ('transactional'='true',"
operator|+
literal|"'transactional_properties'='default')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|HiveEndPoint
name|endPt
init|=
operator|new
name|HiveEndPoint
argument_list|(
literal|null
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DelimitedInputWriter
name|writer
init|=
operator|new
name|DelimitedInputWriter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|","
argument_list|,
name|endPt
argument_list|)
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|endPt
operator|.
name|newConnection
argument_list|(
literal|false
argument_list|,
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Write a couple of batches
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|writeBatch
argument_list|(
name|connection
argument_list|,
name|writer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Start a third batch, but don't close it.
name|writeBatch
argument_list|(
name|connection
argument_list|,
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Now, compact
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
operator|new
name|CompactionRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
argument_list|)
expr_stmt|;
name|Worker
name|t
init|=
operator|new
name|Worker
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|msClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|)
decl_stmt|;
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[
name|stat
operator|.
name|length
index|]
decl_stmt|;
name|Path
name|resultFile
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|names
index|[
name|i
index|]
operator|=
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|names
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"delta_0000003_0000006"
argument_list|)
condition|)
block|{
name|resultFile
operator|=
name|stat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|String
index|[]
name|expected
init|=
operator|new
name|String
index|[]
block|{
literal|"delta_0000003_0000004"
block|,
literal|"delta_0000003_0000006"
block|,
literal|"delta_0000005_0000006"
block|,
literal|"delta_0000007_0000008"
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|deepEquals
argument_list|(
name|expected
argument_list|,
name|names
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expected
argument_list|)
operator|+
literal|", found: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|names
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|checkExpectedTxnsPresent
argument_list|(
literal|null
argument_list|,
operator|new
name|Path
index|[]
block|{
name|resultFile
block|}
argument_list|,
name|columnNamesProperty
argument_list|,
name|columnTypesProperty
argument_list|,
literal|0
argument_list|,
literal|3L
argument_list|,
literal|6L
argument_list|)
expr_stmt|;
comment|// Verify that we have got correct set of delete_deltas also
name|FileStatus
index|[]
name|deleteDeltaStat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
name|AcidUtils
operator|.
name|deleteEventDeltaDirFilter
argument_list|)
decl_stmt|;
name|String
index|[]
name|deleteDeltas
init|=
operator|new
name|String
index|[
name|deleteDeltaStat
operator|.
name|length
index|]
decl_stmt|;
name|Path
name|minorCompactedDeleteDelta
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deleteDeltas
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|deleteDeltas
index|[
name|i
index|]
operator|=
name|deleteDeltaStat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|deleteDeltas
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"delete_delta_0000003_0000006"
argument_list|)
condition|)
block|{
name|minorCompactedDeleteDelta
operator|=
name|deleteDeltaStat
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|deleteDeltas
argument_list|)
expr_stmt|;
name|String
index|[]
name|expectedDeleteDeltas
init|=
operator|new
name|String
index|[]
block|{
literal|"delete_delta_0000003_0000006"
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|deepEquals
argument_list|(
name|expectedDeleteDeltas
argument_list|,
name|deleteDeltas
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expectedDeleteDeltas
argument_list|)
operator|+
literal|", found: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|deleteDeltas
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// There should be no rows in the delete_delta because there have been no delete events.
name|checkExpectedTxnsPresent
argument_list|(
literal|null
argument_list|,
operator|new
name|Path
index|[]
block|{
name|minorCompactedDeleteDelta
block|}
argument_list|,
name|columnNamesProperty
argument_list|,
name|columnTypesProperty
argument_list|,
literal|0
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Users have the choice of specifying compaction related tblproperties either in CREATE TABLE    * statement or in ALTER TABLE .. COMPACT statement. This tests both cases.    */
annotation|@
name|Test
specifier|public
name|void
name|testTableProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tblName1
init|=
literal|"ttp1"
decl_stmt|;
comment|// plain acid table
name|String
name|tblName2
init|=
literal|"ttp2"
decl_stmt|;
comment|// acid table with customized tblproperties
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tblName1
operator|+
literal|"(a INT, b STRING) "
operator|+
literal|" CLUSTERED BY(a) INTO 2 BUCKETS STORED AS ORC TBLPROPERTIES ('transactional'='true')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tblName2
operator|+
literal|"(a INT, b STRING) "
operator|+
literal|" CLUSTERED BY(a) INTO 2 BUCKETS STORED AS ORC TBLPROPERTIES ("
operator|+
literal|"'transactional'='true',"
operator|+
literal|"'compactor.mapreduce.map.memory.mb'='2048',"
operator|+
comment|// 2048 MB memory for compaction map job
literal|"'compactorthreshold.hive.compactor.delta.num.threshold'='4',"
operator|+
comment|// minor compaction if more than 4 delta dirs
literal|"'compactorthreshold.hive.compactor.delta.pct.threshold'='0.49'"
operator|+
comment|// major compaction if more than 49%
literal|")"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Insert 5 rows to both tables
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName1
operator|+
literal|" values (1, 'a')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName1
operator|+
literal|" values (2, 'b')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName1
operator|+
literal|" values (3, 'c')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName1
operator|+
literal|" values (4, 'd')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName1
operator|+
literal|" values (5, 'e')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName2
operator|+
literal|" values (1, 'a')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName2
operator|+
literal|" values (2, 'b')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName2
operator|+
literal|" values (3, 'c')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName2
operator|+
literal|" values (4, 'd')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName2
operator|+
literal|" values (5, 'e')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|runInitiator
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Compactor should only schedule compaction for ttp2 (delta.num.threshold=4), not ttp1
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnStore
operator|.
name|INITIATED_RESPONSE
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ttp2"
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|CompactionType
operator|.
name|MAJOR
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// type is MAJOR since there's no base yet
comment|// Finish the scheduled compaction for ttp2, and manually compact ttp1, to make them comparable again
name|executeStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|tblName1
operator|+
literal|" compact 'major'"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ttp2"
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnStore
operator|.
name|INITIATED_RESPONSE
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ttp1"
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnStore
operator|.
name|INITIATED_RESPONSE
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// compact ttp2, by running the Worker explicitly, in order to get the reference to the compactor MR job
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Worker
name|t
init|=
operator|new
name|Worker
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
name|JobConf
name|job
init|=
name|t
operator|.
name|getMrJob
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|job
operator|.
name|getMemoryForMapTask
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2048 comes from tblproperties
comment|// Compact ttp1
name|stop
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|=
operator|new
name|Worker
argument_list|()
expr_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|looped
operator|=
operator|new
name|AtomicBoolean
argument_list|()
expr_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
name|job
operator|=
name|t
operator|.
name|getMrJob
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|job
operator|.
name|getMemoryForMapTask
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1024 is the default value
comment|// Clean up
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ttp2"
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnStore
operator|.
name|SUCCEEDED_RESPONSE
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ttp1"
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnStore
operator|.
name|SUCCEEDED_RESPONSE
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Insert one more row - this should trigger hive.compactor.delta.pct.threshold to be reached for ttp2
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName1
operator|+
literal|" values (6, 'f')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName2
operator|+
literal|" values (6, 'f')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Intentionally set this high so that it will not trigger major compaction for ttp1.
comment|// Only trigger major compaction for ttp2 (delta.pct.threshold=0.5) because of the newly inserted row (actual pct: 0.66)
name|conf
operator|.
name|setFloatVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_COMPACTOR_DELTA_PCT_THRESHOLD
argument_list|,
literal|0.8f
argument_list|)
expr_stmt|;
name|runInitiator
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ttp2"
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnStore
operator|.
name|INITIATED_RESPONSE
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Finish the scheduled compaction for ttp2
name|runWorker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ttp2"
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnStore
operator|.
name|SUCCEEDED_RESPONSE
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now test tblproperties specified on ALTER TABLE .. COMPACT .. statement
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName2
operator|+
literal|" values (7, 'g')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|tblName2
operator|+
literal|" compact 'major'"
operator|+
literal|" with overwrite tblproperties ("
operator|+
literal|"'compactor.mapreduce.map.memory.mb'='3072',"
operator|+
literal|"'tblprops.orc.compress.size'='8192')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|rsp
operator|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ttp2"
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TxnStore
operator|.
name|INITIATED_RESPONSE
argument_list|,
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Run the Worker explicitly, in order to get the reference to the compactor MR job
name|stop
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|=
operator|new
name|Worker
argument_list|()
expr_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|looped
operator|=
operator|new
name|AtomicBoolean
argument_list|()
expr_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
name|job
operator|=
name|t
operator|.
name|getMrJob
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3072
argument_list|,
name|job
operator|.
name|getMemoryForMapTask
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|job
operator|.
name|get
argument_list|(
literal|"hive.compactor.table.props"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"orc.compress.size4:8192"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeBatch
parameter_list|(
name|StreamingConnection
name|connection
parameter_list|,
name|DelimitedInputWriter
name|writer
parameter_list|,
name|boolean
name|closeEarly
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|StreamingException
block|{
name|TransactionBatch
name|txnBatch
init|=
name|connection
operator|.
name|fetchTransactionBatch
argument_list|(
literal|2
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"50,Kiev"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"51,St. Petersburg"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"44,Boston"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|closeEarly
condition|)
block|{
name|txnBatch
operator|.
name|beginNextTransaction
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"52,Tel Aviv"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"53,Atlantis"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|write
argument_list|(
literal|"53,Boston"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|txnBatch
operator|.
name|commit
argument_list|()
expr_stmt|;
name|txnBatch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkExpectedTxnsPresent
parameter_list|(
name|Path
name|base
parameter_list|,
name|Path
index|[]
name|deltas
parameter_list|,
name|String
name|columnNamesProperty
parameter_list|,
name|String
name|columnTypesProperty
parameter_list|,
name|int
name|bucket
parameter_list|,
name|long
name|min
parameter_list|,
name|long
name|max
parameter_list|)
throws|throws
name|IOException
block|{
name|ValidTxnList
name|txnList
init|=
operator|new
name|ValidTxnList
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isTxnValid
parameter_list|(
name|long
name|txnid
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|RangeResponse
name|isTxnRangeValid
parameter_list|(
name|long
name|minTxnId
parameter_list|,
name|long
name|maxTxnId
parameter_list|)
block|{
return|return
name|RangeResponse
operator|.
name|ALL
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|writeToString
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFromString
parameter_list|(
name|String
name|src
parameter_list|)
block|{        }
annotation|@
name|Override
specifier|public
name|Long
name|getMinOpenTxn
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getHighWatermark
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
index|[]
name|getInvalidTransactions
parameter_list|()
block|{
return|return
operator|new
name|long
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValidBase
parameter_list|(
name|long
name|txnid
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTxnAborted
parameter_list|(
name|long
name|txnid
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|RangeResponse
name|isTxnRangeAborted
parameter_list|(
name|long
name|minTxnId
parameter_list|,
name|long
name|maxTxnId
parameter_list|)
block|{
return|return
name|RangeResponse
operator|.
name|ALL
return|;
block|}
block|}
decl_stmt|;
name|OrcInputFormat
name|aif
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS
argument_list|,
name|columnNamesProperty
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS_TYPES
argument_list|,
name|columnTypesProperty
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TRANSACTIONAL_TABLE_SCAN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|AcidInputFormat
operator|.
name|RawReader
argument_list|<
name|OrcStruct
argument_list|>
name|reader
init|=
name|aif
operator|.
name|getRawReader
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|,
name|bucket
argument_list|,
name|txnList
argument_list|,
name|base
argument_list|,
name|deltas
argument_list|)
decl_stmt|;
name|RecordIdentifier
name|identifier
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|OrcStruct
name|value
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
name|long
name|currentTxn
init|=
name|min
decl_stmt|;
name|boolean
name|seenCurrentTxn
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|identifier
argument_list|,
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|seenCurrentTxn
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentTxn
argument_list|,
name|identifier
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
name|seenCurrentTxn
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|currentTxn
operator|!=
name|identifier
operator|.
name|getTransactionId
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentTxn
operator|+
literal|1
argument_list|,
name|identifier
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
name|currentTxn
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|max
argument_list|,
name|currentTxn
argument_list|)
expr_stmt|;
block|}
comment|/**    * convenience method to execute a select stmt and dump results to log file    */
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|execSelectAndDumpData
parameter_list|(
name|String
name|selectStmt
parameter_list|,
name|Driver
name|driver
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|executeStatementOnDriver
argument_list|(
name|selectStmt
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|valuesReadFromHiveDriver
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|valuesReadFromHiveDriver
argument_list|)
expr_stmt|;
name|int
name|rowIdx
init|=
literal|0
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|row
range|:
name|valuesReadFromHiveDriver
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|" rowIdx="
operator|+
name|rowIdx
operator|++
operator|+
literal|":"
operator|+
name|row
argument_list|)
expr_stmt|;
block|}
return|return
name|valuesReadFromHiveDriver
return|;
block|}
comment|/**    * Execute Hive CLI statement    * @param cmd arbitrary statement to execute    */
specifier|static
name|void
name|executeStatementOnDriver
parameter_list|(
name|String
name|cmd
parameter_list|,
name|Driver
name|driver
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommandNeedRetryException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing: "
operator|+
name|cmd
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to execute \""
operator|+
name|cmd
operator|+
literal|"\". Driver returned: "
operator|+
name|cpr
argument_list|)
throw|;
block|}
block|}
specifier|static
name|void
name|createTestDataFile
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
index|[]
name|lines
parameter_list|)
throws|throws
name|IOException
block|{
name|FileWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|line
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|void
name|runInitiator
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|MetaException
block|{
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Initiator
name|t
init|=
operator|new
name|Initiator
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
specifier|static
name|void
name|runWorker
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|MetaException
block|{
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Worker
name|t
init|=
operator|new
name|Worker
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
specifier|static
name|void
name|runCleaner
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|MetaException
block|{
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Cleaner
name|t
init|=
operator|new
name|Cleaner
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

