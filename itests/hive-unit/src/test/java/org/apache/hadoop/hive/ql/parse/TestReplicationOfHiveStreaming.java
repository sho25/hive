begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|gzip
operator|.
name|GzipJSONMessageEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|streaming
operator|.
name|HiveStreamingConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|streaming
operator|.
name|StrictDelimitedInputWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|streaming
operator|.
name|StreamingConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ReplChangeManager
operator|.
name|SOURCE_OF_REPLICATION
import|;
end_import

begin_comment
comment|/**  * TestReplicationOfHiveStreaming - test replication for streaming ingest on ACID tables.  */
end_comment

begin_class
specifier|public
class|class
name|TestReplicationOfHiveStreaming
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReplicationOfHiveStreaming
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|WarehouseInstance
name|primary
decl_stmt|;
specifier|private
specifier|static
name|WarehouseInstance
name|replica
decl_stmt|;
specifier|private
specifier|static
name|String
name|primaryDbName
decl_stmt|;
specifier|private
specifier|static
name|String
name|replicatedDbName
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|classLevelSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overrides
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EVENT_MESSAGE_FACTORY
operator|.
name|getHiveName
argument_list|()
argument_list|,
name|GzipJSONMessageEncoder
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|internalBeforeClassSetup
argument_list|(
name|overrides
argument_list|,
name|TestReplicationOfHiveStreaming
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|internalBeforeClassSetup
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overrides
parameter_list|,
name|Class
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.client.use.datanode.hostname"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser."
operator|+
name|Utils
operator|.
name|getUGI
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|".hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|miniDFSCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|acidEnableConf
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.support.concurrency"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.txn.manager"
argument_list|,
literal|"org.apache.hadoop.hive.ql.lockmgr.DbTxnManager"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.client.capability.check"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.repl.bootstrap.dump.open.txn.timeout"
argument_list|,
literal|"1s"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.strict.checks.bucketing"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.mapred.mode"
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"mapred.input.dir.recursive"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.metastore.disallow.incompatible.col.type.changes"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.strict.managed.tables"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"hive.in.repl.test"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|acidEnableConf
operator|.
name|putAll
argument_list|(
name|overrides
argument_list|)
expr_stmt|;
name|primary
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|acidEnableConf
argument_list|)
expr_stmt|;
name|replica
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|acidEnableConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|classLevelTearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|primary
operator|.
name|close
argument_list|()
expr_stmt|;
name|replica
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Throwable
block|{
name|primaryDbName
operator|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_"
operator|+
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|replicatedDbName
operator|=
literal|"replicated_"
operator|+
name|primaryDbName
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|primaryDbName
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|primaryDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|replicatedDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHiveStreamingUnpartitionedWithTxnBatchSizeAsOne
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|bootstrapDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|bootstrapDump
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
comment|// Create an ACID table.
name|String
name|tblName
init|=
literal|"alerts"
decl_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|tblName
operator|+
literal|"( id int , msg string ) "
operator|+
literal|"clustered by (id) into 5 buckets "
operator|+
literal|"stored as orc tblproperties(\"transactional\"=\"true\")"
argument_list|)
expr_stmt|;
comment|// Create delimited record writer whose schema exactly matches table schema
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Create and open streaming connection (default.src table has to exist already)
comment|// By default, txn batch size is 1.
name|StreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|primaryDbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"example-agent-1"
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|primary
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
comment|// Begin a transaction, write records and commit 1st transaction
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"1,val1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"2,val2"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
comment|// Replicate the committed data which should be visible.
name|WarehouseInstance
operator|.
name|Tuple
name|incrDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootstrapDump
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|incrDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select msg from "
operator|+
name|tblName
operator|+
literal|" order by msg"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|(
operator|new
name|String
index|[]
block|{
literal|"val1"
block|,
literal|"val2"
block|}
operator|)
argument_list|)
expr_stmt|;
comment|// Begin another transaction, write more records and commit 2nd transaction after REPL LOAD.
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"3,val3"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"4,val4"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Replicate events before committing txn. The uncommitted data shouldn't be seen.
name|incrDump
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootstrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|incrDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select msg from "
operator|+
name|tblName
operator|+
literal|" order by msg"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|(
operator|new
name|String
index|[]
block|{
literal|"val1"
block|,
literal|"val2"
block|}
operator|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
comment|// After commit, the data should be replicated and visible.
name|incrDump
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|incrDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|incrDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select msg from "
operator|+
name|tblName
operator|+
literal|" order by msg"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|(
operator|new
name|String
index|[]
block|{
literal|"val1"
block|,
literal|"val2"
block|,
literal|"val3"
block|,
literal|"val4"
block|}
operator|)
argument_list|)
expr_stmt|;
comment|// Begin another transaction, write more records and abort 3rd transaction
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"5,val5"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"6,val6"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|abortTransaction
argument_list|()
expr_stmt|;
comment|// Aborted data shouldn't be visible.
name|incrDump
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|incrDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|incrDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select msg from "
operator|+
name|tblName
operator|+
literal|" order by msg"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|(
operator|new
name|String
index|[]
block|{
literal|"val1"
block|,
literal|"val2"
block|,
literal|"val3"
block|,
literal|"val4"
block|}
operator|)
argument_list|)
expr_stmt|;
comment|// Close the streaming connection
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHiveStreamingStaticPartitionWithTxnBatchSizeAsOne
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|bootstrapDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|bootstrapDump
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
comment|// Create an ACID table.
name|String
name|tblName
init|=
literal|"alerts"
decl_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|tblName
operator|+
literal|"( id int , msg string ) "
operator|+
literal|"partitioned by (continent string, country string) "
operator|+
literal|"clustered by (id) into 5 buckets "
operator|+
literal|"stored as orc tblproperties(\"transactional\"=\"true\")"
argument_list|)
expr_stmt|;
comment|// Static partition values
name|ArrayList
argument_list|<
name|String
argument_list|>
name|partitionVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|partitionVals
operator|.
name|add
argument_list|(
literal|"Asia"
argument_list|)
expr_stmt|;
name|partitionVals
operator|.
name|add
argument_list|(
literal|"India"
argument_list|)
expr_stmt|;
comment|// Create delimited record writer whose schema exactly matches table schema
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Create and open streaming connection (default.src table has to exist already)
comment|// By default, txn batch size is 1.
name|StreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|primaryDbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"example-agent-1"
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|primary
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
comment|// Begin a transaction, write records and commit 1st transaction
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"1,val1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"2,val2"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
comment|// Replicate the committed data which should be visible.
name|WarehouseInstance
operator|.
name|Tuple
name|incrDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootstrapDump
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|incrDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select msg from "
operator|+
name|tblName
operator|+
literal|" where continent='Asia' and country='India' order by msg"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|(
operator|new
name|String
index|[]
block|{
literal|"val1"
block|,
literal|"val2"
block|}
operator|)
argument_list|)
expr_stmt|;
comment|// Begin another transaction, write more records and commit 2nd transaction after REPL LOAD.
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"3,val3"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"4,val4"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Replicate events before committing txn. The uncommitted data shouldn't be seen.
name|incrDump
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootstrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|incrDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select msg from "
operator|+
name|tblName
operator|+
literal|" where continent='Asia' and country='India' order by msg"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|(
operator|new
name|String
index|[]
block|{
literal|"val1"
block|,
literal|"val2"
block|}
operator|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
comment|// After commit, the data should be replicated and visible.
name|incrDump
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|incrDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|incrDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select msg from "
operator|+
name|tblName
operator|+
literal|" where continent='Asia' and country='India' order by msg"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|(
operator|new
name|String
index|[]
block|{
literal|"val1"
block|,
literal|"val2"
block|,
literal|"val3"
block|,
literal|"val4"
block|}
operator|)
argument_list|)
expr_stmt|;
comment|// Begin another transaction, write more records and abort 3rd transaction
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"5,val5"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"6,val6"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|abortTransaction
argument_list|()
expr_stmt|;
comment|// Aborted data shouldn't be visible.
name|incrDump
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|incrDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|incrDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select msg from "
operator|+
name|tblName
operator|+
literal|" where continent='Asia' and country='India' order by msg"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|(
operator|new
name|String
index|[]
block|{
literal|"val1"
block|,
literal|"val2"
block|,
literal|"val3"
block|,
literal|"val4"
block|}
operator|)
argument_list|)
expr_stmt|;
comment|// Close the streaming connection
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHiveStreamingDynamicPartitionWithTxnBatchSizeAsOne
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|bootstrapDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|bootstrapDump
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
comment|// Create an ACID table.
name|String
name|tblName
init|=
literal|"alerts"
decl_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|tblName
operator|+
literal|"( id int , msg string ) "
operator|+
literal|"partitioned by (continent string, country string) "
operator|+
literal|"clustered by (id) into 5 buckets "
operator|+
literal|"stored as orc tblproperties(\"transactional\"=\"true\")"
argument_list|)
expr_stmt|;
comment|// Dynamic partitioning
comment|// Create delimited record writer whose schema exactly matches table schema
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Create and open streaming connection (default.src table has to exist already)
comment|// By default, txn batch size is 1.
name|StreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|primaryDbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"example-agent-1"
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|primary
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
comment|// Begin a transaction, write records and commit 1st transaction
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
comment|// Dynamic partition mode where last 2 columns are partition values
name|connection
operator|.
name|write
argument_list|(
literal|"11,val11,Asia,China"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"12,val12,Asia,India"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
comment|// Replicate the committed data which should be visible.
name|WarehouseInstance
operator|.
name|Tuple
name|incrDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootstrapDump
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|incrDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select msg from "
operator|+
name|tblName
operator|+
literal|" where continent='Asia' and country='China' order by msg"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|(
operator|new
name|String
index|[]
block|{
literal|"val11"
block|}
operator|)
argument_list|)
operator|.
name|run
argument_list|(
literal|"select msg from "
operator|+
name|tblName
operator|+
literal|" where continent='Asia' and country='India' order by msg"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|(
operator|new
name|String
index|[]
block|{
literal|"val12"
block|}
operator|)
argument_list|)
expr_stmt|;
comment|// Begin another transaction, write more records and commit 2nd transaction after REPL LOAD.
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"13,val13,Europe,Germany"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"14,val14,Asia,India"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Replicate events before committing txn. The uncommitted data shouldn't be seen.
name|incrDump
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootstrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|incrDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select msg from "
operator|+
name|tblName
operator|+
literal|" where continent='Asia' and country='India' order by msg"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|(
operator|new
name|String
index|[]
block|{
literal|"val12"
block|}
operator|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
comment|// After committing the txn, the data should be visible.
name|incrDump
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootstrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|incrDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select msg from "
operator|+
name|tblName
operator|+
literal|" where continent='Asia' and country='India' order by msg"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|(
operator|new
name|String
index|[]
block|{
literal|"val12"
block|,
literal|"val14"
block|}
operator|)
argument_list|)
operator|.
name|run
argument_list|(
literal|"select msg from "
operator|+
name|tblName
operator|+
literal|" where continent='Europe' and country='Germany' order by msg"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|(
operator|new
name|String
index|[]
block|{
literal|"val13"
block|}
operator|)
argument_list|)
expr_stmt|;
comment|// Begin a transaction, write records and abort 3rd transaction
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"15,val15,Asia,China"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"16,val16,Asia,India"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|abortTransaction
argument_list|()
expr_stmt|;
comment|// Aborted data should not be visible.
name|incrDump
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootstrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|loadWithoutExplain
argument_list|(
name|replicatedDbName
argument_list|,
name|incrDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select msg from "
operator|+
name|tblName
operator|+
literal|" where continent='Asia' and country='India' order by msg"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|(
operator|new
name|String
index|[]
block|{
literal|"val12"
block|,
literal|"val14"
block|}
operator|)
argument_list|)
operator|.
name|run
argument_list|(
literal|"select msg from "
operator|+
name|tblName
operator|+
literal|" where continent='Asia' and country='China' order by msg"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|(
operator|new
name|String
index|[]
block|{
literal|"val11"
block|}
operator|)
argument_list|)
expr_stmt|;
comment|// Close the streaming connection
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

