begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_class
specifier|public
class|class
name|TestExportImport
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestExportImport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|WarehouseInstance
name|srcHiveWarehouse
decl_stmt|;
specifier|private
specifier|static
name|WarehouseInstance
name|destHiveWarehouse
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|String
name|dbName
decl_stmt|;
specifier|private
name|String
name|replDbName
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|classLevelSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.client.use.datanode.hostname"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|miniDFSCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overridesForHiveConf
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|srcHiveWarehouse
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|overridesForHiveConf
argument_list|)
expr_stmt|;
name|destHiveWarehouse
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|overridesForHiveConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|classLevelTearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|srcHiveWarehouse
operator|.
name|close
argument_list|()
expr_stmt|;
name|destHiveWarehouse
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Throwable
block|{
name|dbName
operator|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_"
operator|+
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|replDbName
operator|=
name|dbName
operator|+
literal|"_dupe"
expr_stmt|;
name|srcHiveWarehouse
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|destHiveWarehouse
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|replDbName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldExportImportATemporaryTable
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|path
init|=
literal|"hdfs:///tmp/"
operator|+
name|dbName
operator|+
literal|"/"
decl_stmt|;
name|String
name|exportPath
init|=
literal|"'"
operator|+
name|path
operator|+
literal|"'"
decl_stmt|;
name|String
name|importDataPath
init|=
name|path
operator|+
literal|"/data"
decl_stmt|;
name|srcHiveWarehouse
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create temporary table t1 (i int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (1),(2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"export table t1 to "
operator|+
name|exportPath
argument_list|)
operator|.
name|run
argument_list|(
literal|"create temporary table t2 like t1"
argument_list|)
operator|.
name|run
argument_list|(
literal|"load data inpath '"
operator|+
name|importDataPath
operator|+
literal|"' overwrite into table t2"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * from t2"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dataImportAfterMetadataOnlyImport
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|path
init|=
literal|"hdfs:///tmp/"
operator|+
name|dbName
operator|+
literal|"/"
decl_stmt|;
name|String
name|exportMDPath
init|=
literal|"'"
operator|+
name|path
operator|+
literal|"1/'"
decl_stmt|;
name|String
name|exportDataPath
init|=
literal|"'"
operator|+
name|path
operator|+
literal|"2/'"
decl_stmt|;
name|srcHiveWarehouse
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|dbName
operator|+
literal|".t1 (i int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table "
operator|+
name|dbName
operator|+
literal|".t1 values (1),(2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"export table "
operator|+
name|dbName
operator|+
literal|".t1 to "
operator|+
name|exportMDPath
operator|+
literal|" for metadata replication('1')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"export table "
operator|+
name|dbName
operator|+
literal|".t1 to "
operator|+
name|exportDataPath
operator|+
literal|" for replication('2')"
argument_list|)
expr_stmt|;
name|destHiveWarehouse
operator|.
name|run
argument_list|(
literal|"import table "
operator|+
name|replDbName
operator|+
literal|".t1 from "
operator|+
name|exportMDPath
argument_list|)
operator|.
name|run
argument_list|(
literal|"import table "
operator|+
name|replDbName
operator|+
literal|".t1 from "
operator|+
name|exportDataPath
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * from "
operator|+
name|replDbName
operator|+
literal|".t1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

