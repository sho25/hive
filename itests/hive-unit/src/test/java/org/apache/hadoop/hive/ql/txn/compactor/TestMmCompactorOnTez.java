begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactResponseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|IDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
operator|.
name|TestCompactor
operator|.
name|executeStatementOnDriver
import|;
end_import

begin_comment
comment|/**  * Test functionality of MmMinorQueryCompactor,.  */
end_comment

begin_class
specifier|public
class|class
name|TestMmCompactorOnTez
extends|extends
name|CompactorOnTezTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testMmMinorCompactionNotPartitionedWithoutBuckets
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"testMmMinorCompaction"
decl_stmt|;
comment|// Create test table
name|TestDataProvider
name|testDataProvider
init|=
operator|new
name|TestCrudCompactorOnTez
operator|.
name|TestDataProvider
argument_list|()
decl_stmt|;
name|testDataProvider
operator|.
name|createMmTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|msClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|msClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Insert test data into test table
name|testDataProvider
operator|.
name|insertMmTestData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Get all data before compaction is run
name|List
argument_list|<
name|String
argument_list|>
name|expectedData
init|=
name|testDataProvider
operator|.
name|getAllData
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Verify deltas
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Delta directories does not match"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"delta_0000001_0000001_0000"
argument_list|,
literal|"delta_0000002_0000002_0000"
argument_list|,
literal|"delta_0000003_0000003_0000"
argument_list|)
argument_list|,
name|CompactorTestUtil
operator|.
name|getBaseOrDeltaNames
argument_list|(
name|fs
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|,
name|table
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Run a compaction
name|CompactorTestUtil
operator|.
name|runCompaction
argument_list|(
name|conf
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CompactorTestUtil
operator|.
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verifySuccessulTxn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Verify delta directories after compaction
name|List
argument_list|<
name|String
argument_list|>
name|actualDeltasAfterComp
init|=
name|CompactorTestUtil
operator|.
name|getBaseOrDeltaNames
argument_list|(
name|fs
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|,
name|table
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Delta directories does not match after compaction"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"delta_0000001_0000003_v0000007"
argument_list|)
argument_list|,
name|actualDeltasAfterComp
argument_list|)
expr_stmt|;
comment|// Verify bucket files in delta dirs
name|List
argument_list|<
name|String
argument_list|>
name|expectedBucketFiles
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"000000_0"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Bucket names are not matching after compaction"
argument_list|,
name|expectedBucketFiles
argument_list|,
name|CompactorTestUtil
operator|.
name|getBucketFileNames
argument_list|(
name|fs
argument_list|,
name|table
argument_list|,
literal|null
argument_list|,
name|actualDeltasAfterComp
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyAllContents
argument_list|(
name|tableName
argument_list|,
name|testDataProvider
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
comment|// Clean up
name|testDataProvider
operator|.
name|dropTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMmMinorCompactionNotPartitionedWithBuckets
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"testMmMinorCompaction"
decl_stmt|;
comment|// expected name of the delta dir that will be created with minor compaction
name|String
name|newDeltaName
init|=
literal|"delta_0000001_0000003_v0000007"
decl_stmt|;
comment|// Create test table
name|TestDataProvider
name|testDataProvider
init|=
operator|new
name|TestDataProvider
argument_list|()
decl_stmt|;
name|testDataProvider
operator|.
name|createMmTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|metaStoreClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|metaStoreClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Insert test data into test table
name|testDataProvider
operator|.
name|insertMmTestData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Get all data before compaction is run
name|List
argument_list|<
name|String
argument_list|>
name|expectedData
init|=
name|testDataProvider
operator|.
name|getAllData
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Verify deltas
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Delta directories does not match"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"delta_0000001_0000001_0000"
argument_list|,
literal|"delta_0000002_0000002_0000"
argument_list|,
literal|"delta_0000003_0000003_0000"
argument_list|)
argument_list|,
name|CompactorTestUtil
operator|.
name|getBaseOrDeltaNames
argument_list|(
name|fs
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|,
name|table
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Run a compaction
name|CompactorTestUtil
operator|.
name|runCompaction
argument_list|(
name|conf
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CompactorTestUtil
operator|.
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verifySuccessulTxn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Verify delta directories after compaction
name|List
argument_list|<
name|String
argument_list|>
name|actualDeltasAfterComp
init|=
name|CompactorTestUtil
operator|.
name|getBaseOrDeltaNames
argument_list|(
name|fs
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|,
name|table
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Delta directories does not match after compaction"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|newDeltaName
argument_list|)
argument_list|,
name|actualDeltasAfterComp
argument_list|)
expr_stmt|;
comment|// Verify number of files in directory
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|newDeltaName
argument_list|)
argument_list|,
name|AcidUtils
operator|.
name|hiddenFileFilter
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect number of bucket files"
argument_list|,
literal|2
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Verify bucket files in delta dirs
name|List
argument_list|<
name|String
argument_list|>
name|expectedBucketFiles
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"000000_0"
argument_list|,
literal|"000001_0"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Bucket names are not matching after compaction"
argument_list|,
name|expectedBucketFiles
argument_list|,
name|CompactorTestUtil
operator|.
name|getBucketFileNames
argument_list|(
name|fs
argument_list|,
name|table
argument_list|,
literal|null
argument_list|,
name|actualDeltasAfterComp
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyAllContents
argument_list|(
name|tableName
argument_list|,
name|testDataProvider
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
comment|// Clean up
name|testDataProvider
operator|.
name|dropTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMmMinorCompactionPartitionedWithoutBuckets
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"testMmMinorCompaction"
decl_stmt|;
comment|// Create test table
name|TestDataProvider
name|dataProvider
init|=
operator|new
name|TestDataProvider
argument_list|()
decl_stmt|;
name|dataProvider
operator|.
name|createMmTable
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|metaStoreClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|metaStoreClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Insert test data into test table
name|dataProvider
operator|.
name|insertMmTestDataPartitioned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Get all data before compaction is run
name|List
argument_list|<
name|String
argument_list|>
name|expectedData
init|=
name|dataProvider
operator|.
name|getAllData
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Verify deltas
name|String
name|partitionToday
init|=
literal|"ds=today"
decl_stmt|;
name|String
name|partitionTomorrow
init|=
literal|"ds=tomorrow"
decl_stmt|;
name|String
name|partitionYesterday
init|=
literal|"ds=yesterday"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Delta directories does not match"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"delta_0000001_0000001_0000"
argument_list|,
literal|"delta_0000002_0000002_0000"
argument_list|,
literal|"delta_0000003_0000003_0000"
argument_list|)
argument_list|,
name|CompactorTestUtil
operator|.
name|getBaseOrDeltaNames
argument_list|(
name|fs
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|,
name|table
argument_list|,
name|partitionToday
argument_list|)
argument_list|)
expr_stmt|;
comment|// Run a compaction
name|CompactorTestUtil
operator|.
name|runCompaction
argument_list|(
name|conf
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|,
literal|true
argument_list|,
name|partitionToday
argument_list|,
name|partitionTomorrow
argument_list|,
name|partitionYesterday
argument_list|)
expr_stmt|;
name|CompactorTestUtil
operator|.
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verifySuccessulTxn
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Verify delta directories after compaction in each partition
name|List
argument_list|<
name|String
argument_list|>
name|actualDeltasAfterCompPartToday
init|=
name|CompactorTestUtil
operator|.
name|getBaseOrDeltaNames
argument_list|(
name|fs
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|,
name|table
argument_list|,
name|partitionToday
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Delta directories does not match after compaction"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"delta_0000001_0000003_v0000007"
argument_list|)
argument_list|,
name|actualDeltasAfterCompPartToday
argument_list|)
expr_stmt|;
comment|// Verify bucket files in delta dirs
name|List
argument_list|<
name|String
argument_list|>
name|expectedBucketFiles
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"000000_0"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Bucket names are not matching after compaction"
argument_list|,
name|expectedBucketFiles
argument_list|,
name|CompactorTestUtil
operator|.
name|getBucketFileNames
argument_list|(
name|fs
argument_list|,
name|table
argument_list|,
name|partitionToday
argument_list|,
name|actualDeltasAfterCompPartToday
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyAllContents
argument_list|(
name|tableName
argument_list|,
name|dataProvider
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
comment|// Clean up
name|dataProvider
operator|.
name|dropTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMmMinorCompactionPartitionedWithBucketsOrc
parameter_list|()
throws|throws
name|Exception
block|{
name|testMmMinorCompactionPartitionedWithBuckets
argument_list|(
literal|"orc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMmMinorCompactionPartitionedWithBucketsParquet
parameter_list|()
throws|throws
name|Exception
block|{
name|testMmMinorCompactionPartitionedWithBuckets
argument_list|(
literal|"parquet"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMmMinorCompactionPartitionedWithBucketsAvro
parameter_list|()
throws|throws
name|Exception
block|{
name|testMmMinorCompactionPartitionedWithBuckets
argument_list|(
literal|"avro"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMmMinorCompactionPartitionedWithBucketsTextFile
parameter_list|()
throws|throws
name|Exception
block|{
name|testMmMinorCompactionPartitionedWithBuckets
argument_list|(
literal|"textfile"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMmMinorCompactionPartitionedWithBucketsSequenceFile
parameter_list|()
throws|throws
name|Exception
block|{
name|testMmMinorCompactionPartitionedWithBuckets
argument_list|(
literal|"sequencefile"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMmMinorCompactionPartitionedWithBucketsRcFile
parameter_list|()
throws|throws
name|Exception
block|{
name|testMmMinorCompactionPartitionedWithBuckets
argument_list|(
literal|"RcFile"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMmMinorCompactionPartitionedWithBucketsJsonFile
parameter_list|()
throws|throws
name|Exception
block|{
name|testMmMinorCompactionPartitionedWithBuckets
argument_list|(
literal|"JsonFile"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testMmMinorCompactionPartitionedWithBuckets
parameter_list|(
name|String
name|fileFormat
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"testMmMinorCompaction"
decl_stmt|;
comment|// Create test table
name|TestDataProvider
name|dataProvider
init|=
operator|new
name|TestDataProvider
argument_list|()
decl_stmt|;
name|dataProvider
operator|.
name|createMmTable
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|fileFormat
argument_list|)
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|metaStoreClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|metaStoreClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Insert test data into test table
name|dataProvider
operator|.
name|insertMmTestDataPartitioned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Get all data before compaction is run
name|List
argument_list|<
name|String
argument_list|>
name|expectedData
init|=
name|dataProvider
operator|.
name|getAllData
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Verify deltas
name|String
name|partitionToday
init|=
literal|"ds=today"
decl_stmt|;
name|String
name|partitionTomorrow
init|=
literal|"ds=tomorrow"
decl_stmt|;
name|String
name|partitionYesterday
init|=
literal|"ds=yesterday"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Delta directories does not match"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"delta_0000001_0000001_0000"
argument_list|,
literal|"delta_0000002_0000002_0000"
argument_list|,
literal|"delta_0000003_0000003_0000"
argument_list|)
argument_list|,
name|CompactorTestUtil
operator|.
name|getBaseOrDeltaNames
argument_list|(
name|fs
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|,
name|table
argument_list|,
name|partitionToday
argument_list|)
argument_list|)
expr_stmt|;
comment|// Run a compaction
name|CompactorTestUtil
operator|.
name|runCompaction
argument_list|(
name|conf
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|,
literal|true
argument_list|,
name|partitionToday
argument_list|,
name|partitionTomorrow
argument_list|,
name|partitionYesterday
argument_list|)
expr_stmt|;
name|CompactorTestUtil
operator|.
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verifySuccessulTxn
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Verify delta directories after compaction in each partition
name|List
argument_list|<
name|String
argument_list|>
name|actualDeltasAfterCompPartToday
init|=
name|CompactorTestUtil
operator|.
name|getBaseOrDeltaNames
argument_list|(
name|fs
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|,
name|table
argument_list|,
name|partitionToday
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Delta directories does not match after compaction"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"delta_0000001_0000003_v0000007"
argument_list|)
argument_list|,
name|actualDeltasAfterCompPartToday
argument_list|)
expr_stmt|;
comment|// Verify bucket files in delta dirs
name|List
argument_list|<
name|String
argument_list|>
name|expectedBucketFiles
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"000000_0"
argument_list|,
literal|"000001_0"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Bucket names are not matching after compaction"
argument_list|,
name|expectedBucketFiles
argument_list|,
name|CompactorTestUtil
operator|.
name|getBucketFileNames
argument_list|(
name|fs
argument_list|,
name|table
argument_list|,
name|partitionToday
argument_list|,
name|actualDeltasAfterCompPartToday
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyAllContents
argument_list|(
name|tableName
argument_list|,
name|dataProvider
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
comment|// Clean up
name|dataProvider
operator|.
name|dropTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMmMinorCompaction10DeltaDirs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"testMmMinorCompaction"
decl_stmt|;
comment|// Create test table
name|TestDataProvider
name|dataProvider
init|=
operator|new
name|TestDataProvider
argument_list|()
decl_stmt|;
name|dataProvider
operator|.
name|createMmTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|metaStoreClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|metaStoreClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Insert test data into test table
name|dataProvider
operator|.
name|insertMmTestData
argument_list|(
name|tableName
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Get all data before compaction is run
name|List
argument_list|<
name|String
argument_list|>
name|expectedData
init|=
name|dataProvider
operator|.
name|getAllData
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expectedData
argument_list|)
expr_stmt|;
comment|// Verify deltas
name|List
argument_list|<
name|String
argument_list|>
name|deltaNames
init|=
name|CompactorTestUtil
operator|.
name|getBaseOrDeltaNames
argument_list|(
name|fs
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|,
name|table
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|deltaNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Run a compaction
name|CompactorTestUtil
operator|.
name|runCompaction
argument_list|(
name|conf
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CompactorTestUtil
operator|.
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Completed compaction queue must contain 3 element"
argument_list|,
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compacts
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Compaction state is not succeeded"
argument_list|,
literal|"succeeded"
argument_list|,
name|c
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify delta directories after compaction
name|List
argument_list|<
name|String
argument_list|>
name|actualDeltasAfterComp
init|=
name|CompactorTestUtil
operator|.
name|getBaseOrDeltaNames
argument_list|(
name|fs
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|,
name|table
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"delta_0000001_0000010_v0000014"
argument_list|)
argument_list|,
name|actualDeltasAfterComp
argument_list|)
expr_stmt|;
comment|// Verify bucket file in delta dir
name|List
argument_list|<
name|String
argument_list|>
name|expectedBucketFile
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"000000_0"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Bucket names are not matching after compaction"
argument_list|,
name|expectedBucketFile
argument_list|,
name|CompactorTestUtil
operator|.
name|getBucketFileNames
argument_list|(
name|fs
argument_list|,
name|table
argument_list|,
literal|null
argument_list|,
name|actualDeltasAfterComp
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyAllContents
argument_list|(
name|tableName
argument_list|,
name|dataProvider
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
comment|// Clean up
name|dataProvider
operator|.
name|dropTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleMmMinorCompactions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"testMmMinorCompaction"
decl_stmt|;
comment|// Create test table
name|TestDataProvider
name|dataProvider
init|=
operator|new
name|TestDataProvider
argument_list|()
decl_stmt|;
name|dataProvider
operator|.
name|createMmTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|metaStoreClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|metaStoreClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Insert test data into test table
name|dataProvider
operator|.
name|insertMmTestData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Run a compaction
name|CompactorTestUtil
operator|.
name|runCompaction
argument_list|(
name|conf
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CompactorTestUtil
operator|.
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verifySuccessulTxn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
decl_stmt|;
comment|// Insert test data into test table
name|dataProvider
operator|.
name|insertMmTestData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Run a compaction
name|CompactorTestUtil
operator|.
name|runCompaction
argument_list|(
name|conf
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CompactorTestUtil
operator|.
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verifySuccessulTxn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Insert test data into test table
name|dataProvider
operator|.
name|insertMmTestData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Run a compaction
name|CompactorTestUtil
operator|.
name|runCompaction
argument_list|(
name|conf
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CompactorTestUtil
operator|.
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verifySuccessulTxn
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Verify delta directories after compaction
name|List
argument_list|<
name|String
argument_list|>
name|actualDeltasAfterComp
init|=
name|CompactorTestUtil
operator|.
name|getBaseOrDeltaNames
argument_list|(
name|fs
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|,
name|table
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Delta directories does not match after compaction"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"delta_0000001_0000009_v0000026"
argument_list|)
argument_list|,
name|actualDeltasAfterComp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMmMajorCompactionAfterMinor
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"testMmMinorCompaction"
decl_stmt|;
comment|// Create test table
name|TestDataProvider
name|dataProvider
init|=
operator|new
name|TestDataProvider
argument_list|()
decl_stmt|;
name|dataProvider
operator|.
name|createMmTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|metaStoreClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|metaStoreClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Insert test data into test table
name|dataProvider
operator|.
name|insertMmTestData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Get all data before compaction is run
name|List
argument_list|<
name|String
argument_list|>
name|expectedData
init|=
name|dataProvider
operator|.
name|getAllData
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expectedData
argument_list|)
expr_stmt|;
comment|// Run a compaction
name|CompactorTestUtil
operator|.
name|runCompaction
argument_list|(
name|conf
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CompactorTestUtil
operator|.
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verifySuccessulTxn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
decl_stmt|;
comment|// Verify delta directories after compaction
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Delta directories does not match after minor compaction"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"delta_0000001_0000003_v0000007"
argument_list|)
argument_list|,
name|CompactorTestUtil
operator|.
name|getBaseOrDeltaNames
argument_list|(
name|fs
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|,
name|table
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|verifyAllContents
argument_list|(
name|tableName
argument_list|,
name|dataProvider
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actualData
decl_stmt|;
comment|// Insert a second round of test data into test table; update expectedData
name|dataProvider
operator|.
name|insertMmTestData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|expectedData
operator|=
name|dataProvider
operator|.
name|getAllData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Run a compaction
name|CompactorTestUtil
operator|.
name|runCompaction
argument_list|(
name|conf
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CompactorTestUtil
operator|.
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verifySuccessulTxn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Verify base directory after compaction
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Base directory does not match after major compaction"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"base_0000006_v0000019"
argument_list|)
argument_list|,
name|CompactorTestUtil
operator|.
name|getBaseOrDeltaNames
argument_list|(
name|fs
argument_list|,
name|AcidUtils
operator|.
name|baseFileFilter
argument_list|,
name|table
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|actualData
operator|=
name|dataProvider
operator|.
name|getAllData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedData
argument_list|,
name|actualData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMmMinorCompactionAfterMajor
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"testMmMinorCompaction"
decl_stmt|;
comment|// Create test table
name|TestDataProvider
name|dataProvider
init|=
operator|new
name|TestDataProvider
argument_list|()
decl_stmt|;
name|dataProvider
operator|.
name|createMmTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|metaStoreClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|metaStoreClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Insert test data into test table
name|dataProvider
operator|.
name|insertMmTestData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Get all data before compaction is run
name|List
argument_list|<
name|String
argument_list|>
name|expectedData
init|=
name|dataProvider
operator|.
name|getAllData
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expectedData
argument_list|)
expr_stmt|;
comment|// Run a major compaction
name|CompactorTestUtil
operator|.
name|runCompaction
argument_list|(
name|conf
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CompactorTestUtil
operator|.
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verifySuccessulTxn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
decl_stmt|;
comment|// Verify base directory after compaction
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Base directory does not match after major compaction"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"base_0000003_v0000007"
argument_list|)
argument_list|,
name|CompactorTestUtil
operator|.
name|getBaseOrDeltaNames
argument_list|(
name|fs
argument_list|,
name|AcidUtils
operator|.
name|baseFileFilter
argument_list|,
name|table
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|verifyAllContents
argument_list|(
name|tableName
argument_list|,
name|dataProvider
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
comment|// Insert test data into test table
name|dataProvider
operator|.
name|insertMmTestData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|expectedData
operator|=
name|dataProvider
operator|.
name|getAllData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expectedData
argument_list|)
expr_stmt|;
comment|// Run a compaction
name|CompactorTestUtil
operator|.
name|runCompaction
argument_list|(
name|conf
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CompactorTestUtil
operator|.
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verifySuccessulTxn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Verify base/delta directories after compaction
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Base directory does not match after major compaction"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"base_0000003_v0000007"
argument_list|)
argument_list|,
name|CompactorTestUtil
operator|.
name|getBaseOrDeltaNames
argument_list|(
name|fs
argument_list|,
name|AcidUtils
operator|.
name|baseFileFilter
argument_list|,
name|table
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Delta directories does not match after minor compaction"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"delta_0000001_0000006_v0000016"
argument_list|)
argument_list|,
name|CompactorTestUtil
operator|.
name|getBaseOrDeltaNames
argument_list|(
name|fs
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|,
name|table
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|verifyAllContents
argument_list|(
name|tableName
argument_list|,
name|dataProvider
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMmMinorCompactionWithSchemaEvolutionAndBuckets
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tblName
init|=
literal|"testMmMinorCompactionWithSchemaEvolutionAndBuckets"
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"create transactional table "
operator|+
name|tblName
operator|+
literal|" (a int, b int) partitioned by(ds string) clustered by (a) into 2 buckets"
operator|+
literal|" stored as ORC TBLPROPERTIES('bucketing_version'='2', 'transactional'='true',"
operator|+
literal|" 'transactional_properties'='insert_only')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Insert some data
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" partition (ds) values"
operator|+
literal|"(1,2,'today'),(1,3,'today'),(1,4,'yesterday'),"
operator|+
literal|"(2,2,'yesterday'),(2,3,'today'),(2,4,'today')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Add a new column
name|executeStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|tblName
operator|+
literal|" add columns(c int)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// TODO uncomment this line after HIVE-22826 fixed:
comment|// executeStatementOnDriver("alter table " + tblName + " change column a aa int", driver);
comment|// Insert more data
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" partition (ds) values"
operator|+
literal|"(3,2,1000,'yesterday'),(3,3,1001,'today'),"
operator|+
literal|"(3,4,1002,'yesterday'),(4,2,1003,'today'),"
operator|+
literal|"(4,3,1004,'yesterday'),(4,4,1005,'today')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Get all data before compaction is run
name|TestDataProvider
name|dataProvider
init|=
operator|new
name|TestDataProvider
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedData
init|=
name|dataProvider
operator|.
name|getAllData
argument_list|(
name|tblName
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expectedData
argument_list|)
expr_stmt|;
comment|//  Run minor compaction and cleaner
name|CompactorTestUtil
operator|.
name|runCompaction
argument_list|(
name|conf
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|,
literal|true
argument_list|,
literal|"ds=yesterday"
argument_list|,
literal|"ds=today"
argument_list|)
expr_stmt|;
name|CompactorTestUtil
operator|.
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verifySuccessulTxn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|verifyAllContents
argument_list|(
name|tblName
argument_list|,
name|dataProvider
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
comment|// Clean up
name|executeStatementOnDriver
argument_list|(
literal|"drop table "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMmMinorCompactionWithSchemaEvolutionNoBucketsMultipleReducers
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAXREDUCERS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPNUMREDUCERS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|driver
operator|=
name|DriverFactory
operator|.
name|newDriver
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tblName
init|=
literal|"testMmMinorCompactionWithSchemaEvolutionNoBucketsMultipleReducers"
decl_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"drop table if exists "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|executeStatementOnDriver
argument_list|(
literal|"create transactional table "
operator|+
name|tblName
operator|+
literal|" (a int, b int) partitioned by(ds string)"
operator|+
literal|" stored as ORC TBLPROPERTIES('transactional'='true',"
operator|+
literal|" 'transactional_properties'='insert_only')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Insert some data
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" partition (ds) values"
operator|+
literal|"(1,2,'today'),(1,3,'today'),"
operator|+
literal|"(1,4,'yesterday'),(2,2,'yesterday'),"
operator|+
literal|"(2,3,'today'),(2,4,'today')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Add a new column
name|executeStatementOnDriver
argument_list|(
literal|"alter table "
operator|+
name|tblName
operator|+
literal|" add columns(c int)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Insert more data
name|executeStatementOnDriver
argument_list|(
literal|"insert into "
operator|+
name|tblName
operator|+
literal|" partition (ds) values(3,2,1000,'yesterday'),(3,3,1001,'today'),(3,4,1002,'yesterday'),(4,2,1003,'today'),"
operator|+
literal|"(4,3,1004,'yesterday'),(4,4,1005,'today')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Get all data before compaction is run
name|TestDataProvider
name|dataProvider
init|=
operator|new
name|TestDataProvider
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedData
init|=
name|dataProvider
operator|.
name|getAllData
argument_list|(
name|tblName
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expectedData
argument_list|)
expr_stmt|;
comment|//  Run minor compaction and cleaner
name|CompactorTestUtil
operator|.
name|runCompaction
argument_list|(
name|conf
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|,
literal|true
argument_list|,
literal|"ds=yesterday"
argument_list|,
literal|"ds=today"
argument_list|)
expr_stmt|;
name|CompactorTestUtil
operator|.
name|runCleaner
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|verifySuccessulTxn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|verifyAllContents
argument_list|(
name|tblName
argument_list|,
name|dataProvider
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
comment|// Clean up
name|executeStatementOnDriver
argument_list|(
literal|"drop table "
operator|+
name|tblName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinorMmCompactionRemovesAbortedDirs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// see mmTableOpenWriteId
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"testMmMinorCompaction"
decl_stmt|;
comment|// Create test table
name|TestDataProvider
name|testDataProvider
init|=
operator|new
name|TestDataProvider
argument_list|()
decl_stmt|;
name|testDataProvider
operator|.
name|createMmTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Find the location of the table
name|IMetaStoreClient
name|metaStoreClient
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|metaStoreClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Insert test data into test table
name|testDataProvider
operator|.
name|insertMmTestData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Get all data before compaction is run. Expected data is 2 x MmTestData insertion
name|List
argument_list|<
name|String
argument_list|>
name|expectedData
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|oneMmTestDataInsertion
init|=
name|testDataProvider
operator|.
name|getAllData
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|expectedData
operator|.
name|addAll
argument_list|(
name|oneMmTestDataInsertion
argument_list|)
expr_stmt|;
name|expectedData
operator|.
name|addAll
argument_list|(
name|oneMmTestDataInsertion
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expectedData
argument_list|)
expr_stmt|;
comment|// Insert an aborted directory (txns 4-6)
name|rollbackAllTxns
argument_list|(
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|testDataProvider
operator|.
name|insertMmTestData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|rollbackAllTxns
argument_list|(
literal|false
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Check that delta dirs 4-6 exist
name|List
argument_list|<
name|String
argument_list|>
name|actualDeltasAfterComp
init|=
name|CompactorTestUtil
operator|.
name|getBaseOrDeltaNames
argument_list|(
name|fs
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|,
name|table
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"delta_0000001_0000001_0000"
argument_list|,
literal|"delta_0000002_0000002_0000"
argument_list|,
literal|"delta_0000003_0000003_0000"
argument_list|,
literal|"delta_0000004_0000004_0000"
argument_list|,
literal|"delta_0000005_0000005_0000"
argument_list|,
literal|"delta_0000006_0000006_0000"
argument_list|)
argument_list|,
name|actualDeltasAfterComp
argument_list|)
expr_stmt|;
comment|// Insert another round of test data (txns 7-9)
name|testDataProvider
operator|.
name|insertMmTestData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|verifyAllContents
argument_list|(
name|tableName
argument_list|,
name|testDataProvider
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
comment|// Run a minor compaction
name|CompactorTestUtil
operator|.
name|runCompaction
argument_list|(
name|conf
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CompactorTestUtil
operator|.
name|runCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verifySuccessulTxn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Verify delta directories after compaction
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Delta directories does not match after minor compaction"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"delta_0000001_0000009_v0000014"
argument_list|)
argument_list|,
name|CompactorTestUtil
operator|.
name|getBaseOrDeltaNames
argument_list|(
name|fs
argument_list|,
name|AcidUtils
operator|.
name|deltaFileFilter
argument_list|,
name|table
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|verifyAllContents
argument_list|(
name|tableName
argument_list|,
name|testDataProvider
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that the expected number of transactions have run, and their state is "succeeded".    *    * @param expectedCompleteCompacts number of compactions already run    * @throws MetaException    */
specifier|private
name|void
name|verifySuccessulTxn
parameter_list|(
name|int
name|expectedCompleteCompacts
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Completed compaction queue must contain one element"
argument_list|,
name|expectedCompleteCompacts
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|compacts
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Compaction state is not succeeded"
argument_list|,
literal|"succeeded"
argument_list|,
name|c
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Results of a select on the table results in the same data as expectedData.    */
specifier|private
name|void
name|verifyAllContents
parameter_list|(
name|String
name|tblName
parameter_list|,
name|TestDataProvider
name|dataProvider
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|expectedData
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|actualData
init|=
name|dataProvider
operator|.
name|getAllData
argument_list|(
name|tblName
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|actualData
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedData
argument_list|,
name|actualData
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set to true to cause all transactions to be rolled back, until set back to false.    */
specifier|private
specifier|static
name|void
name|rollbackAllTxns
parameter_list|(
name|boolean
name|val
parameter_list|,
name|IDriver
name|driver
parameter_list|)
block|{
name|driver
operator|.
name|getConf
argument_list|()
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVETESTMODEROLLBACKTXN
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

