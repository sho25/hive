begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|gzip
operator|.
name|GzipJSONMessageEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|PathBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ReplChangeManager
operator|.
name|SOURCE_OF_REPLICATION
import|;
end_import

begin_comment
comment|/**  * Tests for statistics replication.  */
end_comment

begin_class
specifier|public
class|class
name|TestStatsReplicationScenarios
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReplicationScenarios
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
name|WarehouseInstance
name|primary
decl_stmt|;
specifier|private
specifier|static
name|WarehouseInstance
name|replica
decl_stmt|;
specifier|private
name|String
name|primaryDbName
decl_stmt|,
name|replicatedDbName
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|hasAutogather
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|classLevelSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overrides
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EVENT_MESSAGE_FACTORY
operator|.
name|getHiveName
argument_list|()
argument_list|,
name|GzipJSONMessageEncoder
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|internalBeforeClassSetup
argument_list|(
name|overrides
argument_list|,
name|TestReplicationScenarios
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|internalBeforeClassSetup
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overrides
parameter_list|,
name|Class
name|clazz
parameter_list|,
name|boolean
name|autogather
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.client.use.datanode.hostname"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser."
operator|+
name|Utils
operator|.
name|getUGI
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|".hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|miniDFSCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|localOverrides
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST_REPL
operator|.
name|varname
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|localOverrides
operator|.
name|putAll
argument_list|(
name|overrides
argument_list|)
expr_stmt|;
name|replica
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|localOverrides
argument_list|)
expr_stmt|;
comment|// Run with autogather false on primary if requested
name|hasAutogather
operator|=
name|autogather
expr_stmt|;
name|localOverrides
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
operator|.
name|varname
argument_list|,
name|autogather
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|primary
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|localOverrides
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|classLevelTearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|primary
operator|.
name|close
argument_list|()
expr_stmt|;
name|replica
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Throwable
block|{
name|primaryDbName
operator|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_"
operator|+
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|replicatedDbName
operator|=
literal|"replicated_"
operator|+
name|primaryDbName
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|primaryDbName
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|primaryDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|replicatedDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|collectStatsParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|allParams
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|statsParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|StatsSetupConst
operator|.
name|SUPPORTED_STATS
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|param
range|:
name|params
control|)
block|{
name|String
name|value
init|=
name|allParams
operator|.
name|get
argument_list|(
name|param
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|statsParams
operator|.
name|put
argument_list|(
name|param
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|statsParams
return|;
block|}
specifier|private
name|void
name|verifyReplicatedStatsForTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Test column stats
name|Assert
operator|.
name|assertEquals
argument_list|(
name|primary
operator|.
name|getTableColumnStatistics
argument_list|(
name|primaryDbName
argument_list|,
name|tableName
argument_list|)
argument_list|,
name|replica
operator|.
name|getTableColumnStatistics
argument_list|(
name|replicatedDbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test table level stats
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rParams
init|=
name|collectStatsParams
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pParams
init|=
name|collectStatsParams
argument_list|(
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pParams
argument_list|,
name|rParams
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyNoStatsReplicationForMetadataOnly
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Test column stats
name|Assert
operator|.
name|assertTrue
argument_list|(
name|replica
operator|.
name|getTableColumnStatistics
argument_list|(
name|replicatedDbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// When no data is replicated, the basic stats parameters for table should look as if it's a
comment|// new table created on replica. Based on the create table rules the basic stats may be true
comment|// or false. Either is fine with us so don't bother checking exact values.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rParams
init|=
name|collectStatsParams
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|StatsSetupConst
operator|.
name|SUPPORTED_STATS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedFalseParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedTrueParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|StatsSetupConst
operator|.
name|setStatsStateForCreateTable
argument_list|(
name|expectedTrueParams
argument_list|,
name|replica
operator|.
name|getTableColNames
argument_list|(
name|replicatedDbName
argument_list|,
name|tableName
argument_list|)
argument_list|,
name|StatsSetupConst
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|StatsSetupConst
operator|.
name|setStatsStateForCreateTable
argument_list|(
name|expectedFalseParams
argument_list|,
name|replica
operator|.
name|getTableColNames
argument_list|(
name|replicatedDbName
argument_list|,
name|tableName
argument_list|)
argument_list|,
name|StatsSetupConst
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rParams
operator|.
name|equals
argument_list|(
name|expectedFalseParams
argument_list|)
operator|||
name|rParams
operator|.
name|equals
argument_list|(
name|expectedTrueParams
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|createBootStrapData
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|simpleTableName
init|=
literal|"sTable"
decl_stmt|;
name|String
name|partTableName
init|=
literal|"pTable"
decl_stmt|;
name|String
name|ndTableName
init|=
literal|"ndTable"
decl_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|simpleTableName
operator|+
literal|" (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|simpleTableName
operator|+
literal|" values (1), (2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|partTableName
operator|+
literal|" (place string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table "
operator|+
name|partTableName
operator|+
literal|" partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table "
operator|+
name|partTableName
operator|+
literal|" partition(country='us') values ('austin')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table "
operator|+
name|partTableName
operator|+
literal|" partition(country='france') values ('paris')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|ndTableName
operator|+
literal|" (str string)"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|simpleTableName
argument_list|,
name|partTableName
argument_list|,
name|ndTableName
argument_list|)
argument_list|)
decl_stmt|;
comment|// Run analyze on each of the tables, if they are not being gathered automatically.
if|if
condition|(
operator|!
name|hasAutogather
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|tableNames
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|primary
operator|.
name|getTableColumnStatistics
argument_list|(
name|primaryDbName
argument_list|,
name|name
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"analyze table "
operator|+
name|name
operator|+
literal|" compute statistics for columns"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableNames
return|;
block|}
comment|/**    * Dumps primarydb on primary, loads it on replica as replicadb, verifies that the statistics    * loaded are same as the ones on primary.    * @param tableNames, names of tables on primary expected to be loaded    * @param lastReplicationId of the last dump, for incremental dump/load    * @param parallelLoad, if true, parallel bootstrap load is used    * @param metadataOnly, only metadata is dumped and loaded.    * @return lastReplicationId of the dump performed.    */
specifier|private
name|String
name|dumpLoadVerify
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
parameter_list|,
name|String
name|lastReplicationId
parameter_list|,
name|boolean
name|parallelLoad
parameter_list|,
name|boolean
name|metadataOnly
parameter_list|)
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|String
argument_list|>
name|withClauseList
decl_stmt|;
comment|// Parallel load works only for bootstrap.
name|parallelLoad
operator|=
name|parallelLoad
operator|&&
operator|(
name|lastReplicationId
operator|==
literal|null
operator|)
expr_stmt|;
comment|// With clause construction for REPL DUMP command.
if|if
condition|(
name|metadataOnly
condition|)
block|{
name|withClauseList
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'hive.repl.dump.metadata.only'='true'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|withClauseList
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
comment|// Take dump
name|WarehouseInstance
operator|.
name|Tuple
name|dumpTuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|lastReplicationId
argument_list|,
name|withClauseList
argument_list|)
decl_stmt|;
comment|// Load, if necessary changing configuration.
if|if
condition|(
name|parallelLoad
operator|&&
name|lastReplicationId
operator|==
literal|null
condition|)
block|{
name|replica
operator|.
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|EXECPARALLEL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|dumpTuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|tableNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Metadata load may not load all the events.
if|if
condition|(
operator|!
name|metadataOnly
condition|)
block|{
name|replica
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|dumpTuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parallelLoad
condition|)
block|{
name|replica
operator|.
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|EXECPARALLEL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Test statistics
for|for
control|(
name|String
name|name
range|:
name|tableNames
control|)
block|{
if|if
condition|(
name|metadataOnly
condition|)
block|{
name|verifyNoStatsReplicationForMetadataOnly
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyReplicatedStatsForTable
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dumpTuple
operator|.
name|lastReplicationId
return|;
block|}
specifier|private
name|void
name|createIncrementalData
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|simpleTableName
init|=
literal|"sTable"
decl_stmt|;
name|String
name|partTableName
init|=
literal|"pTable"
decl_stmt|;
name|String
name|ndTableName
init|=
literal|"ndTable"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tableNames
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|simpleTableName
argument_list|,
name|partTableName
argument_list|,
name|ndTableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|incTableName
init|=
literal|"iTable"
decl_stmt|;
comment|// New table
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|simpleTableName
operator|+
literal|" values (3), (4)"
argument_list|)
comment|// new data inserted into table
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|ndTableName
operator|+
literal|" values ('string1'), ('string2')"
argument_list|)
comment|// two partitions changed and one unchanged
operator|.
name|run
argument_list|(
literal|"insert into table "
operator|+
name|partTableName
operator|+
literal|" values ('india', 'pune')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table "
operator|+
name|partTableName
operator|+
literal|" values ('us', 'chicago')"
argument_list|)
comment|// new partition
operator|.
name|run
argument_list|(
literal|"insert into table "
operator|+
name|partTableName
operator|+
literal|" values ('australia', 'perth')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|incTableName
operator|+
literal|" (config string, enabled boolean)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|incTableName
operator|+
literal|" values ('conf1', true)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|incTableName
operator|+
literal|" values ('conf2', false)"
argument_list|)
expr_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
name|incTableName
argument_list|)
expr_stmt|;
comment|// Run analyze on each of the tables, if they are not being gathered automatically.
if|if
condition|(
operator|!
name|hasAutogather
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|tableNames
control|)
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"analyze table "
operator|+
name|name
operator|+
literal|" compute statistics for columns"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testStatsReplicationCommon
parameter_list|(
name|boolean
name|parallelBootstrap
parameter_list|,
name|boolean
name|metadataOnly
parameter_list|)
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
name|createBootStrapData
argument_list|()
decl_stmt|;
name|String
name|lastReplicationId
init|=
name|dumpLoadVerify
argument_list|(
name|tableNames
argument_list|,
literal|null
argument_list|,
name|parallelBootstrap
argument_list|,
name|metadataOnly
argument_list|)
decl_stmt|;
comment|// Incremental dump
name|createIncrementalData
argument_list|(
name|tableNames
argument_list|)
expr_stmt|;
name|lastReplicationId
operator|=
name|dumpLoadVerify
argument_list|(
name|tableNames
argument_list|,
name|lastReplicationId
argument_list|,
name|parallelBootstrap
argument_list|,
name|metadataOnly
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testForNonAcidTables
parameter_list|()
throws|throws
name|Throwable
block|{
name|testStatsReplicationCommon
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testForNonAcidTablesParallelBootstrapLoad
parameter_list|()
throws|throws
name|Throwable
block|{
name|testStatsReplicationCommon
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonAcidMetadataOnlyDump
parameter_list|()
throws|throws
name|Throwable
block|{
name|testStatsReplicationCommon
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

