begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|StatsSetupConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|EventMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|gzip
operator|.
name|GzipJSONMessageEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
operator|.
name|BehaviourInjection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
operator|.
name|CallerArguments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ReplChangeManager
operator|.
name|SOURCE_OF_REPLICATION
import|;
end_import

begin_comment
comment|/**  * Tests for statistics replication.  */
end_comment

begin_class
specifier|public
class|class
name|TestStatsReplicationScenarios
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReplicationScenarios
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
name|WarehouseInstance
name|primary
decl_stmt|;
specifier|private
specifier|static
name|WarehouseInstance
name|replica
decl_stmt|;
specifier|private
name|String
name|primaryDbName
decl_stmt|,
name|replicatedDbName
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|hasAutogather
decl_stmt|;
enum|enum
name|AcidTableKind
block|{
name|FULL_ACID
block|,
name|INSERT_ONLY
block|}
specifier|private
specifier|static
name|AcidTableKind
name|acidTableKindToUse
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|classLevelSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overrides
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EVENT_MESSAGE_FACTORY
operator|.
name|getHiveName
argument_list|()
argument_list|,
name|GzipJSONMessageEncoder
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|internalBeforeClassSetup
argument_list|(
name|overrides
argument_list|,
name|overrides
argument_list|,
name|TestReplicationScenarios
operator|.
name|class
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|internalBeforeClassSetup
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|primaryOverrides
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|replicaOverrides
parameter_list|,
name|Class
name|clazz
parameter_list|,
name|boolean
name|autogather
parameter_list|,
name|AcidTableKind
name|acidTableKind
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.client.use.datanode.hostname"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser."
operator|+
name|Utils
operator|.
name|getUGI
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|".hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|miniDFSCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|additionalOverrides
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST_REPL
operator|.
name|varname
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|replicatedOverrides
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|replicatedOverrides
operator|.
name|putAll
argument_list|(
name|additionalOverrides
argument_list|)
expr_stmt|;
name|replicatedOverrides
operator|.
name|putAll
argument_list|(
name|replicaOverrides
argument_list|)
expr_stmt|;
comment|// Run with autogather false on primary if requested
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sourceOverrides
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|hasAutogather
operator|=
name|autogather
expr_stmt|;
name|additionalOverrides
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
operator|.
name|varname
argument_list|,
name|autogather
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|sourceOverrides
operator|.
name|putAll
argument_list|(
name|additionalOverrides
argument_list|)
expr_stmt|;
name|sourceOverrides
operator|.
name|putAll
argument_list|(
name|primaryOverrides
argument_list|)
expr_stmt|;
name|primary
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|sourceOverrides
argument_list|)
expr_stmt|;
name|replicatedOverrides
operator|.
name|put
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|REPLDIR
operator|.
name|getHiveName
argument_list|()
argument_list|,
name|primary
operator|.
name|repldDir
argument_list|)
expr_stmt|;
name|replica
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|replicatedOverrides
argument_list|)
expr_stmt|;
comment|// Use transactional tables
name|acidTableKindToUse
operator|=
name|acidTableKind
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|classLevelTearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|primary
operator|.
name|close
argument_list|()
expr_stmt|;
name|replica
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Throwable
block|{
name|primaryDbName
operator|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_"
operator|+
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|replicatedDbName
operator|=
literal|"replicated_"
operator|+
name|primaryDbName
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|primaryDbName
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|primaryDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|replicatedDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|collectStatsParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|allParams
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|statsParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|StatsSetupConst
operator|.
name|SUPPORTED_STATS
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|StatsSetupConst
operator|.
name|COLUMN_STATS_ACCURATE
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|param
range|:
name|params
control|)
block|{
name|String
name|value
init|=
name|allParams
operator|.
name|get
argument_list|(
name|param
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|statsParams
operator|.
name|put
argument_list|(
name|param
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|statsParams
return|;
block|}
specifier|private
name|void
name|verifyReplicatedStatsForTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Test column stats
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Mismatching column statistics for  table "
operator|+
name|tableName
argument_list|,
name|primary
operator|.
name|getTableColumnStatistics
argument_list|(
name|primaryDbName
argument_list|,
name|tableName
argument_list|)
argument_list|,
name|replica
operator|.
name|getTableColumnStatistics
argument_list|(
name|replicatedDbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test table level stats
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rParams
init|=
name|collectStatsParams
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pParams
init|=
name|collectStatsParams
argument_list|(
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Mismatch in stats parameters for table "
operator|+
name|tableName
argument_list|,
name|pParams
argument_list|,
name|rParams
argument_list|)
expr_stmt|;
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|getPartitionKeys
argument_list|()
expr_stmt|;
name|verifyReplicatedStatsForPartitionsOfTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyReplicatedStatsForPartitionsOfTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Test partition level stats
name|List
argument_list|<
name|Partition
argument_list|>
name|pParts
init|=
name|primary
operator|.
name|getAllPartitions
argument_list|(
name|primaryDbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pParts
operator|==
literal|null
operator|||
name|pParts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Not a partitioned table, nothing to verify.
return|return;
block|}
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
init|=
name|primary
operator|.
name|getTable
argument_list|(
name|primaryDbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|pPart
range|:
name|pParts
control|)
block|{
name|Partition
name|rPart
init|=
name|replica
operator|.
name|getPartition
argument_list|(
name|replicatedDbName
argument_list|,
name|tableName
argument_list|,
name|pPart
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rParams
init|=
name|collectStatsParams
argument_list|(
name|rPart
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pParams
init|=
name|collectStatsParams
argument_list|(
name|pPart
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|partKeys
argument_list|,
name|pPart
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Mismatch in stats parameters for partition "
operator|+
name|partName
operator|+
literal|" of table "
operator|+
name|tableName
argument_list|,
name|pParams
argument_list|,
name|rParams
argument_list|)
expr_stmt|;
comment|// Test partition column stats for the partition
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Mismatching column statistics for partition "
operator|+
name|partName
operator|+
literal|"of table "
operator|+
name|tableName
argument_list|,
name|primary
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|primaryDbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|StatsSetupConst
operator|.
name|getColumnsHavingStats
argument_list|(
name|pParams
argument_list|)
argument_list|)
argument_list|,
name|replica
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|replicatedDbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|StatsSetupConst
operator|.
name|getColumnsHavingStats
argument_list|(
name|rParams
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyNoStatsReplicationForMetadataOnly
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Test column stats
name|Assert
operator|.
name|assertTrue
argument_list|(
name|replica
operator|.
name|getTableColumnStatistics
argument_list|(
name|replicatedDbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// When no data is replicated, the basic stats parameters for table should look as if it's a
comment|// new table created on replica i.e. zero or null.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rParams
init|=
name|collectStatsParams
argument_list|(
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|param
range|:
name|StatsSetupConst
operator|.
name|SUPPORTED_STATS
control|)
block|{
name|String
name|val
init|=
name|rParams
operator|.
name|get
argument_list|(
name|param
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"parameter "
operator|+
name|param
operator|+
literal|" of table "
operator|+
name|tableName
operator|+
literal|" is expected to be "
operator|+
literal|"null or 0"
argument_list|,
name|val
operator|==
literal|null
operator|||
name|val
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// As long as the above conditions are met, it doesn't matter whether basic and column stats
comment|// state are set to true or false. If those are false, actual values are immaterial. If they
comment|// are true, the values assured above represent the correct state of no data.
name|verifyNoPartitionStatsReplicationForMetadataOnly
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyNoPartitionStatsReplicationForMetadataOnly
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Test partition level stats
name|List
argument_list|<
name|Partition
argument_list|>
name|pParts
init|=
name|primary
operator|.
name|getAllPartitions
argument_list|(
name|primaryDbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pParts
operator|==
literal|null
operator|||
name|pParts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Not a partitioned table, nothing to verify.
return|return;
block|}
comment|// Partitions are not replicated in metadata only replication.
name|List
argument_list|<
name|Partition
argument_list|>
name|rParts
init|=
name|replica
operator|.
name|getAllPartitions
argument_list|(
name|replicatedDbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Partitions replicated in a metadata only dump"
argument_list|,
name|rParts
operator|==
literal|null
operator|||
name|rParts
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test partition column stats for all partitions
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|rPartColStats
init|=
name|replica
operator|.
name|getAllPartitionColumnStatistics
argument_list|(
name|replicatedDbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|entry
range|:
name|rPartColStats
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|colStats
operator|==
literal|null
operator|||
name|colStats
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getCreateTableProperties
parameter_list|()
block|{
if|if
condition|(
name|acidTableKindToUse
operator|==
name|AcidTableKind
operator|.
name|FULL_ACID
condition|)
block|{
return|return
literal|" stored as orc TBLPROPERTIES('transactional'='true')"
return|;
block|}
if|if
condition|(
name|acidTableKindToUse
operator|==
name|AcidTableKind
operator|.
name|INSERT_ONLY
condition|)
block|{
return|return
literal|" TBLPROPERTIES('transactional'='true', 'transactional_properties'='insert_only')"
return|;
block|}
return|return
literal|""
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|createBootStrapData
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Unpartitioned table with data
name|String
name|simpleTableName
init|=
literal|"sTable"
decl_stmt|;
comment|// partitioned table with data
name|String
name|partTableName
init|=
literal|"pTable"
decl_stmt|;
comment|// Unpartitioned table without data during bootstrap and hence no stats
name|String
name|ndTableName
init|=
literal|"ndTable"
decl_stmt|;
comment|// Partitioned table without data during bootstrap and hence no stats.
name|String
name|ndPartTableName
init|=
literal|"ndPTable"
decl_stmt|;
name|String
name|tblCreateExtra
init|=
name|getCreateTableProperties
argument_list|()
decl_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|simpleTableName
operator|+
literal|" (id int)"
operator|+
name|tblCreateExtra
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|simpleTableName
operator|+
literal|" values (1), (2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|partTableName
operator|+
literal|" (place string) partitioned by (country string)"
operator|+
name|tblCreateExtra
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|partTableName
operator|+
literal|" partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|partTableName
operator|+
literal|" partition(country='us') values ('austin')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|partTableName
operator|+
literal|" partition(country='france') values ('paris')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|ndTableName
operator|+
literal|" (str string)"
operator|+
name|tblCreateExtra
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|ndPartTableName
operator|+
literal|" (val string) partitioned by (pk int)"
operator|+
name|tblCreateExtra
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|simpleTableName
argument_list|,
name|partTableName
argument_list|,
name|ndTableName
argument_list|,
name|ndPartTableName
argument_list|)
argument_list|)
decl_stmt|;
comment|// Run analyze on each of the tables, if they are not being gathered automatically.
if|if
condition|(
operator|!
name|hasAutogather
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|tableNames
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|primary
operator|.
name|getTableColumnStatistics
argument_list|(
name|primaryDbName
argument_list|,
name|name
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"analyze table "
operator|+
name|name
operator|+
literal|" compute statistics for columns"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableNames
return|;
block|}
comment|/**    * Dumps primarydb on primary, loads it on replica as replicadb, verifies that the statistics    * loaded are same as the ones on primary.    * @param tableNames, names of tables on primary expected to be loaded    * @param parallelLoad, if true, parallel bootstrap load is used    * @param metadataOnly, only metadata is dumped and loaded.    * @param lastReplicationId of the last dump, for incremental dump/load    * @param failRetry    * @return lastReplicationId of the dump performed.    */
specifier|private
name|String
name|dumpLoadVerify
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
parameter_list|,
name|String
name|lastReplicationId
parameter_list|,
name|boolean
name|parallelLoad
parameter_list|,
name|boolean
name|metadataOnly
parameter_list|,
name|boolean
name|failRetry
parameter_list|)
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|String
argument_list|>
name|withClauseList
decl_stmt|;
comment|// Parallel load works only for bootstrap.
name|parallelLoad
operator|=
name|parallelLoad
operator|&&
operator|(
name|lastReplicationId
operator|==
literal|null
operator|)
expr_stmt|;
comment|// With clause construction for REPL DUMP command.
if|if
condition|(
name|metadataOnly
condition|)
block|{
name|withClauseList
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'hive.repl.dump.metadata.only'='true'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|withClauseList
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
comment|// Take dump
name|WarehouseInstance
operator|.
name|Tuple
name|dumpTuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|withClauseList
argument_list|)
decl_stmt|;
comment|// Load, if necessary changing configuration.
if|if
condition|(
name|parallelLoad
condition|)
block|{
name|replica
operator|.
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|EXECPARALLEL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Fail load if for testing failure and retry scenario. Fail the load while setting
comment|// checkpoint for a table in the middle of list of tables.
if|if
condition|(
name|failRetry
condition|)
block|{
if|if
condition|(
name|lastReplicationId
operator|==
literal|null
condition|)
block|{
name|failBootstrapLoad
argument_list|(
name|tableNames
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failIncrementalLoad
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Load, possibly a retry
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|primaryDbName
argument_list|)
expr_stmt|;
comment|// Metadata load may not load all the events.
if|if
condition|(
operator|!
name|metadataOnly
condition|)
block|{
name|replica
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|dumpTuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parallelLoad
condition|)
block|{
name|replica
operator|.
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|EXECPARALLEL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Test statistics
for|for
control|(
name|String
name|name
range|:
name|tableNames
control|)
block|{
if|if
condition|(
name|metadataOnly
condition|)
block|{
name|verifyNoStatsReplicationForMetadataOnly
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyReplicatedStatsForTable
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dumpTuple
operator|.
name|lastReplicationId
return|;
block|}
comment|/**    * Run a bootstrap that will fail.    */
specifier|private
name|void
name|failBootstrapLoad
parameter_list|(
name|int
name|failAfterNumTables
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// fail setting ckpt directory property for the second table so that we test the case when
comment|// bootstrap load fails after some but not all tables are loaded.
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
name|callerVerifier
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
name|int
name|cntTables
init|=
literal|0
decl_stmt|;
name|String
name|prevTable
init|=
literal|null
decl_stmt|;
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|CallerArguments
name|args
parameter_list|)
block|{
if|if
condition|(
name|prevTable
operator|==
literal|null
operator|||
operator|!
name|prevTable
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
operator|.
name|tblName
argument_list|)
condition|)
block|{
name|cntTables
operator|++
expr_stmt|;
block|}
name|prevTable
operator|=
name|args
operator|.
name|tblName
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|replicatedDbName
argument_list|)
operator|&&
name|cntTables
operator|>
name|failAfterNumTables
condition|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - DB : "
operator|+
name|args
operator|.
name|dbName
operator|+
literal|" TABLE : "
operator|+
name|args
operator|.
name|tblName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setAlterTableModifier
argument_list|(
name|callerVerifier
argument_list|)
expr_stmt|;
try|try
block|{
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName
argument_list|,
name|primaryDbName
argument_list|)
expr_stmt|;
name|callerVerifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|InjectableBehaviourObjectStore
operator|.
name|resetAlterTableModifier
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|failIncrementalLoad
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// fail add notification when second update table stats event is encountered. Thus we
comment|// test successful application as well as failed application of this event.
name|BehaviourInjection
argument_list|<
name|NotificationEvent
argument_list|,
name|Boolean
argument_list|>
name|callerVerifier
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|NotificationEvent
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
name|int
name|cntEvents
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|NotificationEvent
name|entry
parameter_list|)
block|{
name|cntEvents
operator|++
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getEventType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|UPDATE_TABLE_COLUMN_STAT
operator|.
name|toString
argument_list|()
argument_list|)
operator|&&
name|cntEvents
operator|>
literal|1
condition|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - DB: "
operator|+
name|entry
operator|.
name|getDbName
argument_list|()
operator|+
literal|" Table: "
operator|+
name|entry
operator|.
name|getTableName
argument_list|()
operator|+
literal|" Event: "
operator|+
name|entry
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setAddNotificationModifier
argument_list|(
name|callerVerifier
argument_list|)
expr_stmt|;
try|try
block|{
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName
argument_list|,
name|primaryDbName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|InjectableBehaviourObjectStore
operator|.
name|resetAddNotificationModifier
argument_list|()
expr_stmt|;
block|}
name|callerVerifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// fail add notification when second update partition stats event is encountered. Thus we test
comment|// successful application as well as failed application of this event.
name|callerVerifier
operator|=
operator|new
name|BehaviourInjection
argument_list|<
name|NotificationEvent
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
name|int
name|cntEvents
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|NotificationEvent
name|entry
parameter_list|)
block|{
name|cntEvents
operator|++
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getEventType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|EventMessage
operator|.
name|EventType
operator|.
name|UPDATE_PARTITION_COLUMN_STAT
operator|.
name|toString
argument_list|()
argument_list|)
operator|&&
name|cntEvents
operator|>
literal|1
condition|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - DB: "
operator|+
name|entry
operator|.
name|getDbName
argument_list|()
operator|+
literal|" Table: "
operator|+
name|entry
operator|.
name|getTableName
argument_list|()
operator|+
literal|" Event: "
operator|+
name|entry
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
expr_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setAddNotificationModifier
argument_list|(
name|callerVerifier
argument_list|)
expr_stmt|;
try|try
block|{
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName
argument_list|,
name|primaryDbName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|InjectableBehaviourObjectStore
operator|.
name|resetAddNotificationModifier
argument_list|()
expr_stmt|;
block|}
name|callerVerifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createIncrementalData
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Annotations for this table are same as createBootStrapData
name|String
name|simpleTableName
init|=
literal|"sTable"
decl_stmt|;
name|String
name|partTableName
init|=
literal|"pTable"
decl_stmt|;
name|String
name|ndTableName
init|=
literal|"ndTable"
decl_stmt|;
name|String
name|ndPartTableName
init|=
literal|"ndPTable"
decl_stmt|;
name|String
name|tblCreateExtra
init|=
name|getCreateTableProperties
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tableNames
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|simpleTableName
argument_list|,
name|partTableName
argument_list|,
name|ndTableName
argument_list|,
name|ndPartTableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// New tables created during incremental phase and thus loaded with data and stats during
comment|// incremental phase.
name|String
name|incTableName
init|=
literal|"iTable"
decl_stmt|;
comment|// New table
name|String
name|incPartTableName
init|=
literal|"ipTable"
decl_stmt|;
comment|// New partitioned table
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|simpleTableName
operator|+
literal|" values (3), (4)"
argument_list|)
comment|// new data inserted into table
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|ndTableName
operator|+
literal|" values ('string1'), ('string2')"
argument_list|)
comment|// two partitions changed and one unchanged
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|partTableName
operator|+
literal|"(country, place) values ('india', 'pune')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|partTableName
operator|+
literal|"(country, place) values ('us', 'chicago')"
argument_list|)
comment|// new partition
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|partTableName
operator|+
literal|"(country, place) values ('australia', 'perth')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|incTableName
operator|+
literal|" (config string, enabled boolean)"
operator|+
name|tblCreateExtra
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|incTableName
operator|+
literal|" values ('conf1', true)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|incTableName
operator|+
literal|" values ('conf2', false)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|ndPartTableName
operator|+
literal|"(pk, val) values (1, 'one')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|ndPartTableName
operator|+
literal|"(pk, val) values (1, 'another one')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|ndPartTableName
operator|+
literal|"(pk, val) values (2, 'two')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|incPartTableName
operator|+
literal|"(val string) partitioned by (tvalue boolean)"
operator|+
name|tblCreateExtra
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|incPartTableName
operator|+
literal|"(tvalue, val) values (true, 'true')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into "
operator|+
name|incPartTableName
operator|+
literal|"(tvalue, val) values (false, 'false')"
argument_list|)
expr_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
name|incTableName
argument_list|)
expr_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
name|incPartTableName
argument_list|)
expr_stmt|;
comment|// Run analyze on each of the tables, if they are not being gathered automatically.
if|if
condition|(
operator|!
name|hasAutogather
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|tableNames
control|)
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"analyze table "
operator|+
name|name
operator|+
literal|" compute statistics for columns"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|applyDMLOperations
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Annotations for this table are same as createBootStrapData
name|String
name|simpleTableName
init|=
literal|"sTable"
decl_stmt|;
name|String
name|partTableName
init|=
literal|"pTable"
decl_stmt|;
name|String
name|ndTableName
init|=
literal|"ndTable"
decl_stmt|;
name|String
name|ndPartTableName
init|=
literal|"ndPTable"
decl_stmt|;
name|String
name|incTableName
init|=
literal|"iTable"
decl_stmt|;
comment|// New table
name|String
name|tblCreateExtra
init|=
name|getCreateTableProperties
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tableNames
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|simpleTableName
argument_list|,
name|partTableName
argument_list|,
name|ndTableName
argument_list|,
name|ndPartTableName
argument_list|,
name|incTableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|ctasTableName
init|=
literal|"ctasTable"
decl_stmt|;
comment|// Table created through CTAS
name|String
name|ctasPartTableName
init|=
literal|"ctasPartTable"
decl_stmt|;
comment|// Table created through CTAS
comment|// Tables created through import
name|String
name|eximTableName
init|=
literal|"eximTable"
decl_stmt|;
name|String
name|eximPartTableName
init|=
literal|"eximPartTable"
decl_stmt|;
comment|// Tables created through load
name|String
name|loadTableName
init|=
literal|"loadTable"
decl_stmt|;
name|String
name|loadPartTableName
init|=
literal|"loadPartTable"
decl_stmt|;
name|String
name|exportPath
init|=
literal|"'hdfs:///tmp/"
operator|+
name|primaryDbName
operator|+
literal|"/"
operator|+
name|incTableName
operator|+
literal|"/'"
decl_stmt|;
name|String
name|exportPartPath
init|=
literal|"'hdfs:///tmp/"
operator|+
name|primaryDbName
operator|+
literal|"/"
operator|+
name|partTableName
operator|+
literal|"/'"
decl_stmt|;
name|String
name|localDir
init|=
literal|"./test.dat"
decl_stmt|;
name|String
name|inPath
init|=
name|localDir
operator|+
literal|"/000000_0"
decl_stmt|;
name|String
name|tableStorage
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|acidTableKindToUse
operator|==
name|AcidTableKind
operator|.
name|FULL_ACID
condition|)
block|{
name|tableStorage
operator|=
literal|"stored as orc"
expr_stmt|;
block|}
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
comment|// insert overwrite
operator|.
name|run
argument_list|(
literal|"insert overwrite table "
operator|+
name|simpleTableName
operator|+
literal|" values (5), (6), (7)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert overwrite table "
operator|+
name|partTableName
operator|+
literal|" partition (country='india') "
operator|+
literal|" values ('bombay')"
argument_list|)
comment|// truncate
operator|.
name|run
argument_list|(
literal|"truncate table "
operator|+
name|ndTableName
argument_list|)
operator|.
name|run
argument_list|(
literal|"truncate table "
operator|+
name|ndPartTableName
operator|+
literal|" partition (pk=1)"
argument_list|)
comment|// CTAS
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|ctasTableName
operator|+
literal|" as select * from "
operator|+
name|incTableName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|ctasPartTableName
operator|+
literal|" as select * from "
operator|+
name|partTableName
argument_list|)
comment|// Import
operator|.
name|run
argument_list|(
literal|"export table "
operator|+
name|partTableName
operator|+
literal|" to "
operator|+
name|exportPartPath
argument_list|)
operator|.
name|run
argument_list|(
literal|"import table "
operator|+
name|eximPartTableName
operator|+
literal|" from "
operator|+
name|exportPartPath
argument_list|)
operator|.
name|run
argument_list|(
literal|"export table "
operator|+
name|incTableName
operator|+
literal|" to "
operator|+
name|exportPath
argument_list|)
operator|.
name|run
argument_list|(
literal|"import table "
operator|+
name|eximTableName
operator|+
literal|" from "
operator|+
name|exportPath
argument_list|)
comment|// load
operator|.
name|run
argument_list|(
literal|"insert overwrite local directory '"
operator|+
name|localDir
operator|+
literal|"'"
operator|+
name|tableStorage
operator|+
literal|" select "
operator|+
literal|"* from "
operator|+
name|simpleTableName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|loadTableName
operator|+
literal|" (id int)"
operator|+
name|tblCreateExtra
argument_list|)
operator|.
name|run
argument_list|(
literal|"load data local inpath '"
operator|+
name|inPath
operator|+
literal|"' overwrite into table "
operator|+
name|loadTableName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|loadPartTableName
operator|+
literal|" (id int) partitioned by (key int) "
operator|+
name|tblCreateExtra
argument_list|)
operator|.
name|run
argument_list|(
literal|"load data local inpath '"
operator|+
name|inPath
operator|+
literal|"' overwrite into table "
operator|+
name|loadPartTableName
operator|+
literal|" partition (key=1)"
argument_list|)
expr_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
name|ctasTableName
argument_list|)
expr_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
name|ctasPartTableName
argument_list|)
expr_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
name|eximTableName
argument_list|)
expr_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
name|eximPartTableName
argument_list|)
expr_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
name|loadTableName
argument_list|)
expr_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
name|loadPartTableName
argument_list|)
expr_stmt|;
comment|// Run analyze on each of the tables, if they are not being gathered automatically.
if|if
condition|(
operator|!
name|hasAutogather
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|tableNames
control|)
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"analyze table "
operator|+
name|name
operator|+
literal|" compute statistics for columns"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|applyTransactionalDMLOperations
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Annotations for this table are same as createBootStrapData
name|String
name|partTableName
init|=
literal|"pTable"
decl_stmt|;
name|String
name|ndTableName
init|=
literal|"ndTable"
decl_stmt|;
name|String
name|incTableName
init|=
literal|"iTable"
decl_stmt|;
name|String
name|eximTableName
init|=
literal|"eximTable"
decl_stmt|;
name|String
name|eximPartTableName
init|=
literal|"eximPartTable"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tableNames
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|partTableName
argument_list|,
name|ndTableName
argument_list|,
name|eximPartTableName
argument_list|,
name|eximTableName
argument_list|,
name|incTableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"update "
operator|+
name|partTableName
operator|+
literal|" set place = 'mumbai' where place = 'bombay'"
argument_list|)
operator|.
name|run
argument_list|(
literal|"delete from "
operator|+
name|partTableName
operator|+
literal|" where place = 'chicago'"
argument_list|)
operator|.
name|run
argument_list|(
literal|"merge into "
operator|+
name|eximPartTableName
operator|+
literal|" as T using "
operator|+
name|partTableName
operator|+
literal|" as U "
operator|+
literal|" on T.country = U.country "
operator|+
literal|" when matched and T.place != U.place then update set place = U.place"
operator|+
literal|" when not matched then insert values (U.country, U.place)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"update "
operator|+
name|incTableName
operator|+
literal|" set enabled = false where config = 'conf1'"
argument_list|)
operator|.
name|run
argument_list|(
literal|"merge into "
operator|+
name|eximTableName
operator|+
literal|" as T using "
operator|+
name|incTableName
operator|+
literal|" as U "
operator|+
literal|" on T.config = U.config"
operator|+
literal|" when matched and T.enabled != U.enabled then update set enabled = U.enabled"
operator|+
literal|" when not matched then insert values (U.config, U.enabled)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"delete from "
operator|+
name|ndTableName
argument_list|)
expr_stmt|;
comment|// Run analyze on each of the tables, if they are not being gathered automatically.
if|if
condition|(
operator|!
name|hasAutogather
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|tableNames
control|)
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"analyze table "
operator|+
name|name
operator|+
literal|" compute statistics for columns"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|applyDDLOperations
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Annotations for this table are same as createBootStrapData
name|String
name|simpleTableName
init|=
literal|"sTable"
decl_stmt|;
name|String
name|partTableName
init|=
literal|"pTable"
decl_stmt|;
name|String
name|incTableName
init|=
literal|"iTable"
decl_stmt|;
name|String
name|ctasTableName
init|=
literal|"ctasTable"
decl_stmt|;
comment|// Table created through CTAS
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tableNames
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|simpleTableName
argument_list|,
name|partTableName
argument_list|,
name|incTableName
argument_list|,
name|ctasTableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|renamedTableName
init|=
literal|"rnTable"
decl_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table "
operator|+
name|simpleTableName
operator|+
literal|" add columns (val int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table "
operator|+
name|incTableName
operator|+
literal|" change config configuration string"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table "
operator|+
name|ctasTableName
operator|+
literal|" rename to "
operator|+
name|renamedTableName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table "
operator|+
name|partTableName
operator|+
literal|" partition(country='us') rename to partition (country='usa')"
argument_list|)
expr_stmt|;
name|tableNames
operator|.
name|remove
argument_list|(
name|ctasTableName
argument_list|)
expr_stmt|;
name|tableNames
operator|.
name|add
argument_list|(
name|renamedTableName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testStatsReplicationCommon
parameter_list|(
name|boolean
name|parallelBootstrap
parameter_list|,
name|boolean
name|metadataOnly
parameter_list|,
name|boolean
name|failRetry
parameter_list|)
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
name|createBootStrapData
argument_list|()
decl_stmt|;
name|String
name|lastReplicationId
init|=
name|dumpLoadVerify
argument_list|(
name|tableNames
argument_list|,
literal|null
argument_list|,
name|parallelBootstrap
argument_list|,
name|metadataOnly
argument_list|,
name|failRetry
argument_list|)
decl_stmt|;
comment|// Incremental dump
name|createIncrementalData
argument_list|(
name|tableNames
argument_list|)
expr_stmt|;
name|lastReplicationId
operator|=
name|dumpLoadVerify
argument_list|(
name|tableNames
argument_list|,
name|lastReplicationId
argument_list|,
name|parallelBootstrap
argument_list|,
name|metadataOnly
argument_list|,
name|failRetry
argument_list|)
expr_stmt|;
comment|// Incremental dump with Insert overwrite operation
name|applyDMLOperations
argument_list|(
name|tableNames
argument_list|)
expr_stmt|;
name|lastReplicationId
operator|=
name|dumpLoadVerify
argument_list|(
name|tableNames
argument_list|,
name|lastReplicationId
argument_list|,
name|parallelBootstrap
argument_list|,
name|metadataOnly
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Incremental dump with transactional DML operations
if|if
condition|(
name|acidTableKindToUse
operator|==
name|AcidTableKind
operator|.
name|FULL_ACID
condition|)
block|{
name|applyTransactionalDMLOperations
argument_list|(
name|tableNames
argument_list|)
expr_stmt|;
name|lastReplicationId
operator|=
name|dumpLoadVerify
argument_list|(
name|tableNames
argument_list|,
name|lastReplicationId
argument_list|,
name|parallelBootstrap
argument_list|,
name|metadataOnly
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Incremental dump with DDL operations
name|applyDDLOperations
argument_list|(
name|tableNames
argument_list|)
expr_stmt|;
name|lastReplicationId
operator|=
name|dumpLoadVerify
argument_list|(
name|tableNames
argument_list|,
name|lastReplicationId
argument_list|,
name|parallelBootstrap
argument_list|,
name|metadataOnly
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonParallelBootstrapLoad
parameter_list|()
throws|throws
name|Throwable
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|testName
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testStatsReplicationCommon
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testForParallelBootstrapLoad
parameter_list|()
throws|throws
name|Throwable
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|testName
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testStatsReplicationCommon
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataOnlyDump
parameter_list|()
throws|throws
name|Throwable
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|testName
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testStatsReplicationCommon
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetryFailure
parameter_list|()
throws|throws
name|Throwable
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|testName
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|testStatsReplicationCommon
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

