begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|spark
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|persistence
operator|.
name|MapJoinTableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringJoiner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * Test if the small table cache is evicted, when a new query is executed.  */
end_comment

begin_class
specifier|public
class|class
name|TestSmallTableCacheEviction
block|{
specifier|private
name|String
name|smallTableName1
decl_stmt|;
specifier|private
name|String
name|smallTableName2
decl_stmt|;
specifier|private
name|String
name|largeTableName
decl_stmt|;
specifier|private
name|SmallTableCache
operator|.
name|SmallTableLocalCache
argument_list|<
name|String
argument_list|,
name|MapJoinTableContainer
argument_list|>
name|innerCache
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|confDir
init|=
literal|"../../data/conf/spark/local/hive-site.xml"
decl_stmt|;
name|HiveConf
operator|.
name|setHiveSiteLocation
argument_list|(
operator|new
name|File
argument_list|(
name|confDir
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTO_SORTMERGE_JOIN_TOMAPJOIN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVECONVERTJOIN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"spark.local.dir"
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|)
argument_list|,
literal|"TestSmallTableCacheEviction-local-dir"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|largeTableName
operator|=
literal|"large"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|smallTableName1
operator|=
literal|"small"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|smallTableName2
operator|=
literal|"small"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|innerCache
operator|=
operator|(
name|SmallTableCache
operator|.
name|SmallTableLocalCache
argument_list|<
name|String
argument_list|,
name|MapJoinTableContainer
argument_list|>
operator|)
name|ReflectionUtil
operator|.
name|getStaticFieldValue
argument_list|(
name|SmallTableCache
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"TABLE_CONTAINER_CACHE"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create test data
name|Driver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|MockDataBuilder
operator|.
name|builder
argument_list|(
name|smallTableName1
argument_list|)
operator|.
name|numberOfRows
argument_list|(
literal|1
argument_list|)
operator|.
name|create
argument_list|(
name|driver
argument_list|)
expr_stmt|;
name|MockDataBuilder
operator|.
name|builder
argument_list|(
name|smallTableName2
argument_list|)
operator|.
name|numberOfRows
argument_list|(
literal|2
argument_list|)
operator|.
name|create
argument_list|(
name|driver
argument_list|)
expr_stmt|;
name|MockDataBuilder
operator|.
name|builder
argument_list|(
name|largeTableName
argument_list|)
operator|.
name|numberOfRows
argument_list|(
literal|3
argument_list|)
operator|.
name|create
argument_list|(
name|driver
argument_list|)
expr_stmt|;
name|driver
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|CommandProcessorException
block|{
name|Driver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists "
operator|+
name|smallTableName1
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists "
operator|+
name|smallTableName2
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists "
operator|+
name|largeTableName
argument_list|)
expr_stmt|;
name|driver
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSmallTableEvictionIfNewQueryIsExecuted
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Driver
name|driver
init|=
literal|null
decl_stmt|;
try|try
block|{
name|driver
operator|=
name|createDriver
argument_list|()
expr_stmt|;
name|String
name|simpleJoinQuery
init|=
literal|"select large.col, s1.col, s2.col from "
operator|+
name|largeTableName
operator|+
literal|" large join "
operator|+
name|smallTableName1
operator|+
literal|" s1 on s1.col = large.col join "
operator|+
name|smallTableName2
operator|+
literal|" s2 on s2.col = large.col"
decl_stmt|;
name|driver
operator|.
name|run
argument_list|(
name|simpleJoinQuery
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|innerCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|driver
operator|!=
literal|null
condition|)
block|{
name|driver
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Driver
name|createDriver
parameter_list|()
block|{
return|return
operator|new
name|Driver
argument_list|(
operator|new
name|QueryState
operator|.
name|Builder
argument_list|()
operator|.
name|withGenerateNewQueryId
argument_list|(
literal|true
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Helper class to create a simple table with n number of rows in it.    */
specifier|private
specifier|static
specifier|final
class|class
name|MockDataBuilder
block|{
specifier|private
specifier|final
name|String
name|tableName
decl_stmt|;
specifier|private
name|int
name|numberOfRows
decl_stmt|;
specifier|private
name|MockDataBuilder
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|MockDataBuilder
name|numberOfRows
parameter_list|(
name|int
name|numberOfRows
parameter_list|)
block|{
name|this
operator|.
name|numberOfRows
operator|=
name|numberOfRows
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|create
parameter_list|(
name|Driver
name|driver
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (col int)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|numberOfRows
operator|>
literal|0
condition|)
block|{
name|StringJoiner
name|query
init|=
operator|new
name|StringJoiner
argument_list|(
literal|","
argument_list|,
literal|"insert into "
operator|+
name|tableName
operator|+
literal|" values "
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfRows
condition|;
name|i
operator|++
control|)
block|{
name|query
operator|.
name|add
argument_list|(
literal|"("
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|driver
operator|.
name|run
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|MockDataBuilder
name|builder
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|MockDataBuilder
argument_list|(
name|tableName
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

