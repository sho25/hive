begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CommandNeedRetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|repl
operator|.
name|ReplicationV1CompatRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|listener
operator|.
name|DbNotificationListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
class|class
name|WarehouseInstance
block|{
specifier|private
name|Driver
name|driver
decl_stmt|;
specifier|private
name|HiveMetaStoreClient
name|client
decl_stmt|;
specifier|private
name|HiveConf
name|hconf
decl_stmt|;
specifier|private
specifier|static
name|int
name|schemaNameCounter
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|LISTENER_CLASS
init|=
name|DbNotificationListener
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
decl_stmt|;
comment|/**    * This will be used to allow the primary and replica warehouse to be the same instance of    * hive server    */
name|WarehouseInstance
parameter_list|(
name|WarehouseInstance
name|other
parameter_list|)
block|{
name|this
operator|.
name|driver
operator|=
name|other
operator|.
name|driver
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|other
operator|.
name|client
expr_stmt|;
name|this
operator|.
name|hconf
operator|=
name|other
operator|.
name|hconf
expr_stmt|;
block|}
name|WarehouseInstance
parameter_list|()
throws|throws
name|Exception
block|{
name|hconf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestReplicationScenarios
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|metaStoreUri
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test."
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
operator|.
name|varname
argument_list|)
decl_stmt|;
name|String
name|hiveWarehouseLocation
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.warehouse.dir"
argument_list|,
literal|"/tmp"
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|TestReplicationScenarios
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'_'
argument_list|)
operator|+
literal|"_"
operator|+
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|metaStoreUri
operator|!=
literal|null
condition|)
block|{
name|hconf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
name|metaStoreUri
argument_list|)
expr_stmt|;
comment|//        useExternalMS = true;
return|return;
block|}
comment|// turn on db notification listener on meta store
name|hconf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_TRANSACTIONAL_EVENT_LISTENERS
argument_list|,
name|LISTENER_CLASS
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPLCMENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FIRE_EVENTS_FOR_DML
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPLCMDIR
argument_list|,
name|hiveWarehouseLocation
operator|+
literal|"/cmroot/"
argument_list|)
expr_stmt|;
name|String
name|schemaName
init|=
literal|"APP"
operator|+
name|schemaNameCounter
operator|++
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"datanucleus.mapping.Schema"
argument_list|,
name|schemaName
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORECONNECTURLKEY
argument_list|,
literal|"jdbc:derby:memory:${test.tmp.dir}/"
operator|+
name|schemaName
operator|+
literal|";create=true"
argument_list|)
expr_stmt|;
name|int
name|metaStorePort
init|=
name|MetaStoreUtils
operator|.
name|startMetaStore
argument_list|(
name|hconf
argument_list|)
decl_stmt|;
name|hconf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPLDIR
argument_list|,
name|hiveWarehouseLocation
operator|+
literal|"/hrepl/"
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
literal|"thrift://localhost:"
operator|+
name|metaStorePort
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORETHRIFTCONNECTIONRETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|hiveWarehouseLocation
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|testPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|hconf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|driver
operator|=
operator|new
name|Driver
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|hconf
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|next
init|=
literal|0
decl_stmt|;
specifier|private
name|void
name|advanceDumpDir
parameter_list|()
block|{
name|next
operator|++
expr_stmt|;
name|ReplicationSemanticAnalyzer
operator|.
name|injectNextDumpDirForTest
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|next
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ArrayList
argument_list|<
name|String
argument_list|>
name|lastResults
decl_stmt|;
specifier|private
name|String
name|row0Result
parameter_list|(
name|int
name|colNum
parameter_list|,
name|boolean
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|reuse
condition|)
block|{
name|lastResults
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
try|try
block|{
name|driver
operator|.
name|getResults
argument_list|(
name|lastResults
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandNeedRetryException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Split around the 'tab' character
return|return
operator|(
name|lastResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\t"
argument_list|)
operator|)
index|[
name|colNum
index|]
return|;
block|}
name|WarehouseInstance
name|run
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|Throwable
block|{
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ret
operator|.
name|getException
argument_list|()
throw|;
block|}
return|return
name|this
return|;
block|}
name|Tuple
name|dump
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|lastReplicationId
parameter_list|)
throws|throws
name|Throwable
block|{
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|String
name|dumpCommand
init|=
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
operator|(
name|lastReplicationId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" FROM "
operator|+
name|lastReplicationId
operator|)
decl_stmt|;
name|run
argument_list|(
name|dumpCommand
argument_list|)
expr_stmt|;
name|String
name|dumpLocation
init|=
name|row0Result
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|lastDumpId
init|=
name|row0Result
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|Tuple
argument_list|(
name|dumpLocation
argument_list|,
name|lastDumpId
argument_list|)
return|;
block|}
name|WarehouseInstance
name|load
parameter_list|(
name|String
name|replicatedDbName
parameter_list|,
name|String
name|dumpLocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|replicatedDbName
operator|+
literal|" FROM '"
operator|+
name|dumpLocation
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|printOutput
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|replicatedDbName
operator|+
literal|" FROM '"
operator|+
name|dumpLocation
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|WarehouseInstance
name|verify
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyResults
argument_list|(
name|data
operator|==
literal|null
condition|?
operator|new
name|String
index|[]
block|{}
else|:
operator|new
name|String
index|[]
block|{
name|data
block|}
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * All the results that are read from the hive output will not preserve    * case sensitivity and will all be in lower case, hence we will check against    * only lower case data values.    * Unless for Null Values it actually returns in UpperCase and hence explicitly lowering case    * before assert.    */
specifier|private
name|void
name|verifyResults
parameter_list|(
name|String
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
name|getOutput
argument_list|()
decl_stmt|;
name|TestReplicationScenariosAcrossInstances
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Expecting {}"
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|TestReplicationScenariosAcrossInstances
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Got {}"
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|data
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|getOutput
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|driver
operator|.
name|getResults
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandNeedRetryException
name|e
parameter_list|)
block|{
name|TestReplicationScenariosAcrossInstances
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|results
return|;
block|}
specifier|private
name|void
name|printOutput
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|s
range|:
name|getOutput
argument_list|()
control|)
block|{
name|TestReplicationScenariosAcrossInstances
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ReplicationV1CompatRule
name|getReplivationV1CompatRule
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|testsToSkip
parameter_list|)
block|{
return|return
operator|new
name|ReplicationV1CompatRule
argument_list|(
name|client
argument_list|,
name|hconf
argument_list|,
name|testsToSkip
argument_list|)
return|;
block|}
specifier|static
class|class
name|Tuple
block|{
specifier|final
name|String
name|dumpLocation
decl_stmt|;
specifier|final
name|String
name|lastReplicationId
decl_stmt|;
name|Tuple
parameter_list|(
name|String
name|dumpLocation
parameter_list|,
name|String
name|lastReplicationId
parameter_list|)
block|{
name|this
operator|.
name|dumpLocation
operator|=
name|dumpLocation
expr_stmt|;
name|this
operator|.
name|lastReplicationId
operator|=
name|lastReplicationId
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

