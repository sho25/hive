begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ForeignKeysRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotNullConstraintsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrimaryKeysRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLForeignKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLNotNullConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLPrimaryKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLUniqueConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UniqueConstraintsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|IDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|ReplDumpWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|PathBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|repl
operator|.
name|ReplicationV1CompatRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|listener
operator|.
name|DbNotificationListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|WarehouseInstance
implements|implements
name|Closeable
block|{
specifier|final
name|String
name|functionsRoot
decl_stmt|;
specifier|private
name|Logger
name|logger
decl_stmt|;
specifier|private
name|IDriver
name|driver
decl_stmt|;
name|HiveConf
name|hiveConf
decl_stmt|;
name|MiniDFSCluster
name|miniDFSCluster
decl_stmt|;
specifier|private
name|HiveMetaStoreClient
name|client
decl_stmt|;
specifier|public
specifier|final
name|Path
name|warehouseRoot
decl_stmt|;
specifier|private
specifier|static
name|int
name|uniqueIdentifier
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|LISTENER_CLASS
init|=
name|DbNotificationListener
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
decl_stmt|;
name|WarehouseInstance
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|MiniDFSCluster
name|cluster
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overridesForHiveConf
parameter_list|,
name|String
name|keyNameForEncryptedZone
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|miniDFSCluster
operator|=
name|cluster
expr_stmt|;
assert|assert
name|miniDFSCluster
operator|.
name|isClusterUp
argument_list|()
assert|;
assert|assert
name|miniDFSCluster
operator|.
name|isDataNodeUp
argument_list|()
assert|;
name|DistributedFileSystem
name|fs
init|=
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|warehouseRoot
operator|=
name|mkDir
argument_list|(
name|fs
argument_list|,
literal|"/warehouse"
operator|+
name|uniqueIdentifier
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|keyNameForEncryptedZone
argument_list|)
condition|)
block|{
name|fs
operator|.
name|createEncryptionZone
argument_list|(
name|warehouseRoot
argument_list|,
name|keyNameForEncryptedZone
argument_list|)
expr_stmt|;
block|}
name|Path
name|cmRootPath
init|=
name|mkDir
argument_list|(
name|fs
argument_list|,
literal|"/cmroot"
operator|+
name|uniqueIdentifier
argument_list|)
decl_stmt|;
name|this
operator|.
name|functionsRoot
operator|=
name|mkDir
argument_list|(
name|fs
argument_list|,
literal|"/functions"
operator|+
name|uniqueIdentifier
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|initialize
argument_list|(
name|cmRootPath
operator|.
name|toString
argument_list|()
argument_list|,
name|warehouseRoot
operator|.
name|toString
argument_list|()
argument_list|,
name|overridesForHiveConf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WarehouseInstance
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|MiniDFSCluster
name|cluster
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overridesForHiveConf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|logger
argument_list|,
name|cluster
argument_list|,
name|overridesForHiveConf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initialize
parameter_list|(
name|String
name|cmRoot
parameter_list|,
name|String
name|warehouseRoot
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overridesForHiveConf
parameter_list|)
throws|throws
name|Exception
block|{
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|miniDFSCluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|,
name|TestReplicationScenarios
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|overridesForHiveConf
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|hiveConf
operator|.
name|set
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|metaStoreUri
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test."
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
operator|.
name|varname
argument_list|)
decl_stmt|;
name|String
name|hiveWarehouseLocation
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.warehouse.dir"
argument_list|,
literal|"/tmp"
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|TestReplicationScenarios
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'_'
argument_list|)
operator|+
literal|"_"
operator|+
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|metaStoreUri
operator|!=
literal|null
condition|)
block|{
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
name|metaStoreUri
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//    hiveConf.setBoolVar(HiveConf.ConfVars.HIVE_IN_TEST, hiveInTest);
comment|// turn on db notification listener on meta store
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|,
name|warehouseRoot
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_TRANSACTIONAL_EVENT_LISTENERS
argument_list|,
name|LISTENER_CLASS
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPLCMENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FIRE_EVENTS_FOR_DML
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPLCMDIR
argument_list|,
name|cmRoot
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_FUNCTIONS_ROOT_DIR
argument_list|,
name|functionsRoot
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORECONNECTURLKEY
argument_list|,
literal|"jdbc:derby:memory:${test.tmp.dir}/APP;create=true"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPLDIR
argument_list|,
name|hiveWarehouseLocation
operator|+
literal|"/hrepl"
operator|+
name|uniqueIdentifier
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORETHRIFTCONNECTIONRETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_MANAGER
argument_list|)
operator|.
name|equals
argument_list|(
literal|"org.apache.hadoop.hive.ql.lockmgr.DbTxnManager"
argument_list|)
condition|)
block|{
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_RAW_STORE_IMPL
operator|.
name|varname
argument_list|,
literal|"org.apache.hadoop.hive.metastore.InjectableBehaviourObjectStore"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|MetaStoreTestUtils
operator|.
name|startMetaStoreWithRetry
argument_list|(
name|hiveConf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|hiveWarehouseLocation
argument_list|)
decl_stmt|;
name|FileSystem
name|testPathFileSystem
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|testPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|hiveConf
argument_list|)
decl_stmt|;
name|testPathFileSystem
operator|.
name|mkdirs
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|driver
operator|=
name|DriverFactory
operator|.
name|newDriver
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|hiveConf
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|prepDb
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|// change the value for the next instance.
operator|++
name|uniqueIdentifier
expr_stmt|;
block|}
specifier|private
name|Path
name|mkDir
parameter_list|(
name|DistributedFileSystem
name|fs
parameter_list|,
name|String
name|pathString
parameter_list|)
throws|throws
name|IOException
throws|,
name|SemanticException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdir
argument_list|(
name|path
argument_list|,
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|PathBuilder
operator|.
name|fullyQualifiedHDFSUri
argument_list|(
name|path
argument_list|,
name|fs
argument_list|)
return|;
block|}
specifier|public
name|HiveConf
name|getConf
parameter_list|()
block|{
return|return
name|hiveConf
return|;
block|}
specifier|private
name|int
name|next
init|=
literal|0
decl_stmt|;
specifier|private
name|void
name|advanceDumpDir
parameter_list|()
block|{
name|next
operator|++
expr_stmt|;
name|ReplDumpWork
operator|.
name|injectNextDumpDirForTest
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|next
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ArrayList
argument_list|<
name|String
argument_list|>
name|lastResults
decl_stmt|;
specifier|private
name|String
name|row0Result
parameter_list|(
name|int
name|colNum
parameter_list|,
name|boolean
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|reuse
condition|)
block|{
name|lastResults
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|lastResults
argument_list|)
expr_stmt|;
block|}
comment|// Split around the 'tab' character
return|return
operator|(
name|lastResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\t"
argument_list|)
operator|)
index|[
name|colNum
index|]
return|;
block|}
specifier|public
name|WarehouseInstance
name|run
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|Throwable
block|{
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ret
operator|.
name|getException
argument_list|()
throw|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|CommandProcessorResponse
name|runCommand
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|driver
operator|.
name|run
argument_list|(
name|command
argument_list|)
return|;
block|}
name|WarehouseInstance
name|runFailure
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|Throwable
block|{
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|getException
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"command execution passed for a invalid command"
operator|+
name|command
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
name|Tuple
name|dump
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|lastReplicationId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|withClauseOptions
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|dumpCommand
init|=
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
operator|(
name|lastReplicationId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" FROM "
operator|+
name|lastReplicationId
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|withClauseOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dumpCommand
operator|+=
literal|" with ("
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|withClauseOptions
argument_list|,
literal|","
argument_list|)
operator|+
literal|")"
expr_stmt|;
block|}
return|return
name|dump
argument_list|(
name|dumpCommand
argument_list|)
return|;
block|}
name|Tuple
name|dump
parameter_list|(
name|String
name|dumpCommand
parameter_list|)
throws|throws
name|Throwable
block|{
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
name|dumpCommand
argument_list|)
expr_stmt|;
name|String
name|dumpLocation
init|=
name|row0Result
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|lastDumpId
init|=
name|row0Result
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|Tuple
argument_list|(
name|dumpLocation
argument_list|,
name|lastDumpId
argument_list|)
return|;
block|}
name|Tuple
name|dump
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|lastReplicationId
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|dump
argument_list|(
name|dbName
argument_list|,
name|lastReplicationId
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
name|WarehouseInstance
name|dumpFailure
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|lastReplicationId
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|dumpCommand
init|=
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
operator|(
name|lastReplicationId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" FROM "
operator|+
name|lastReplicationId
operator|)
decl_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|runFailure
argument_list|(
name|dumpCommand
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|WarehouseInstance
name|load
parameter_list|(
name|String
name|replicatedDbName
parameter_list|,
name|String
name|dumpLocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|replicatedDbName
operator|+
literal|" FROM '"
operator|+
name|dumpLocation
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|printOutput
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|replicatedDbName
operator|+
literal|" FROM '"
operator|+
name|dumpLocation
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|WarehouseInstance
name|load
parameter_list|(
name|String
name|replicatedDbName
parameter_list|,
name|String
name|dumpLocation
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|withClauseOptions
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|replLoadCmd
init|=
literal|"REPL LOAD "
operator|+
name|replicatedDbName
operator|+
literal|" FROM '"
operator|+
name|dumpLocation
operator|+
literal|"'"
decl_stmt|;
if|if
condition|(
operator|!
name|withClauseOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|replLoadCmd
operator|+=
literal|" WITH ("
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|withClauseOptions
argument_list|,
literal|","
argument_list|)
operator|+
literal|")"
expr_stmt|;
block|}
name|run
argument_list|(
literal|"EXPLAIN "
operator|+
name|replLoadCmd
argument_list|)
expr_stmt|;
name|printOutput
argument_list|()
expr_stmt|;
return|return
name|run
argument_list|(
name|replLoadCmd
argument_list|)
return|;
block|}
name|WarehouseInstance
name|status
parameter_list|(
name|String
name|replicatedDbName
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|replStatusCmd
init|=
literal|"REPL STATUS "
operator|+
name|replicatedDbName
decl_stmt|;
return|return
name|run
argument_list|(
name|replStatusCmd
argument_list|)
return|;
block|}
name|WarehouseInstance
name|status
parameter_list|(
name|String
name|replicatedDbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|withClauseOptions
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|replStatusCmd
init|=
literal|"REPL STATUS "
operator|+
name|replicatedDbName
decl_stmt|;
if|if
condition|(
operator|!
name|withClauseOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|replStatusCmd
operator|+=
literal|" WITH ("
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|withClauseOptions
argument_list|,
literal|","
argument_list|)
operator|+
literal|")"
expr_stmt|;
block|}
return|return
name|run
argument_list|(
name|replStatusCmd
argument_list|)
return|;
block|}
name|WarehouseInstance
name|loadFailure
parameter_list|(
name|String
name|replicatedDbName
parameter_list|,
name|String
name|dumpLocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|runFailure
argument_list|(
literal|"REPL LOAD "
operator|+
name|replicatedDbName
operator|+
literal|" FROM '"
operator|+
name|dumpLocation
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|WarehouseInstance
name|loadFailure
parameter_list|(
name|String
name|replicatedDbName
parameter_list|,
name|String
name|dumpLocation
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|withClauseOptions
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|replLoadCmd
init|=
literal|"REPL LOAD "
operator|+
name|replicatedDbName
operator|+
literal|" FROM '"
operator|+
name|dumpLocation
operator|+
literal|"'"
decl_stmt|;
if|if
condition|(
operator|!
name|withClauseOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|replLoadCmd
operator|+=
literal|" WITH ("
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|withClauseOptions
argument_list|,
literal|","
argument_list|)
operator|+
literal|")"
expr_stmt|;
block|}
return|return
name|runFailure
argument_list|(
name|replLoadCmd
argument_list|)
return|;
block|}
name|WarehouseInstance
name|verifyResult
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyResults
argument_list|(
name|data
operator|==
literal|null
condition|?
operator|new
name|String
index|[]
block|{}
else|:
operator|new
name|String
index|[]
block|{
name|data
block|}
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * All the results that are read from the hive output will not preserve    * case sensitivity and will all be in lower case, hence we will check against    * only lower case data values.    * Unless for Null Values it actually returns in UpperCase and hence explicitly lowering case    * before assert.    */
name|WarehouseInstance
name|verifyResults
parameter_list|(
name|String
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
name|getOutput
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Expecting {}"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|data
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Got {}"
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|filteredResults
init|=
name|results
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|x
lambda|->
operator|!
name|x
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
name|SemanticAnalyzer
operator|.
name|VALUES_TMP_TABLE_NAME_PREFIX
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|String
operator|::
name|toLowerCase
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lowerCaseData
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|data
argument_list|)
operator|.
name|map
argument_list|(
name|String
operator|::
name|toLowerCase
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|filteredResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|filteredResults
argument_list|,
literal|","
argument_list|)
operator|+
literal|" does not contain all expected"
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|lowerCaseData
argument_list|,
literal|","
argument_list|)
argument_list|,
name|filteredResults
operator|.
name|containsAll
argument_list|(
name|lowerCaseData
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|WarehouseInstance
name|verifyFailure
parameter_list|(
name|String
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
name|getOutput
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Expecting {}"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|data
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Got {}"
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|boolean
name|dataMatched
init|=
operator|(
name|data
operator|.
name|length
operator|==
name|results
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|dataMatched
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dataMatched
operator|&=
name|data
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
name|dataMatched
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * verify's result without regard for ordering.    */
name|WarehouseInstance
name|verifyResults
parameter_list|(
name|List
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
name|getOutput
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Expecting {}"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|data
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Got {}"
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
operator|.
name|size
argument_list|()
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|containsAll
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getOutput
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|results
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
specifier|private
name|void
name|printOutput
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|s
range|:
name|getOutput
argument_list|()
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Database
name|getDatabase
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|client
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTables
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|client
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|)
return|;
block|}
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getAllPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|Partition
name|getPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partValues
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|getPrimaryKeyList
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|client
operator|.
name|getPrimaryKeys
argument_list|(
operator|new
name|PrimaryKeysRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|getForeignKeyList
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|client
operator|.
name|getForeignKeys
argument_list|(
operator|new
name|ForeignKeysRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|getUniqueConstraintList
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|client
operator|.
name|getUniqueConstraints
argument_list|(
operator|new
name|UniqueConstraintsRequest
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|getNotNullConstraintList
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|client
operator|.
name|getNotNullConstraints
argument_list|(
operator|new
name|NotNullConstraintsRequest
argument_list|(
name|Warehouse
operator|.
name|DEFAULT_CATALOG_NAME
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
return|;
block|}
name|ReplicationV1CompatRule
name|getReplivationV1CompatRule
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|testsToSkip
parameter_list|)
block|{
return|return
operator|new
name|ReplicationV1CompatRule
argument_list|(
name|client
argument_list|,
name|hiveConf
argument_list|,
name|testsToSkip
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|miniDFSCluster
operator|!=
literal|null
operator|&&
name|miniDFSCluster
operator|.
name|isClusterUp
argument_list|()
condition|)
block|{
name|miniDFSCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|copyToHDFS
parameter_list|(
name|List
argument_list|<
name|URI
argument_list|>
name|localUris
parameter_list|)
throws|throws
name|IOException
throws|,
name|SemanticException
block|{
name|DistributedFileSystem
name|fs
init|=
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|destinationBasePath
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|mkDir
argument_list|(
name|fs
argument_list|,
name|destinationBasePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|localUris
operator|.
name|forEach
argument_list|(
name|uri
lambda|->
block|{
name|Path
name|localPath
init|=
operator|new
name|Path
argument_list|(
name|uri
argument_list|)
decl_stmt|;
try|try
block|{
name|FileSystem
name|localFs
init|=
name|localPath
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
name|FileUtils
operator|.
name|copy
argument_list|(
name|localFs
argument_list|,
name|localPath
argument_list|,
name|fs
argument_list|,
name|destinationBasePath
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|hiveConf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|fail
argument_list|(
literal|"FileUtils could not copy local uri "
operator|+
name|localPath
operator|.
name|toString
argument_list|()
operator|+
literal|" to hdfs"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"error on copy of local uri "
operator|+
name|localPath
operator|.
name|toString
argument_list|()
operator|+
literal|" to hdfs"
decl_stmt|;
name|logger
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|message
operator|+
name|ExceptionUtils
operator|.
name|getFullStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|fileStatuses
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|fs
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|destinationBasePath
argument_list|,
literal|"*"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|fileStatuses
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|FileStatus
operator|::
name|getPath
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|static
class|class
name|Tuple
block|{
specifier|final
name|String
name|dumpLocation
decl_stmt|;
specifier|final
name|String
name|lastReplicationId
decl_stmt|;
name|Tuple
parameter_list|(
name|String
name|dumpLocation
parameter_list|,
name|String
name|lastReplicationId
parameter_list|)
block|{
name|this
operator|.
name|dumpLocation
operator|=
name|dumpLocation
expr_stmt|;
name|this
operator|.
name|lastReplicationId
operator|=
name|lastReplicationId
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

