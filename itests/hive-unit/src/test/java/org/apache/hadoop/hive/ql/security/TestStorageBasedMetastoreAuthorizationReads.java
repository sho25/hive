begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CommandNeedRetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test cases focusing on drop table permission checks  */
end_comment

begin_class
specifier|public
class|class
name|TestStorageBasedMetastoreAuthorizationReads
extends|extends
name|StorageBasedMetastoreTestBase
block|{
annotation|@
name|Test
specifier|public
name|void
name|testReadTableSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|readTableByOtherUser
argument_list|(
literal|"-rwxrwxrwx"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadTableFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|readTableByOtherUser
argument_list|(
literal|"-rwxrwx---"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param perm dir permission for table dir    * @param isSuccess if command was successful    * @throws Exception    */
specifier|private
name|void
name|readTableByOtherUser
parameter_list|(
name|String
name|perm
parameter_list|,
name|boolean
name|isSuccess
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
name|getTestDbName
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|getTestTableName
argument_list|()
decl_stmt|;
name|setPermissions
argument_list|(
name|clientHiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
argument_list|,
literal|"-rwxrwxrwx"
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|resp
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|dbName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
name|msc
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|validateCreateDb
argument_list|(
name|db
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|setPermissions
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|,
literal|"-rwxrwxrwx"
argument_list|)
expr_stmt|;
name|String
name|dbDotTable
init|=
name|dbName
operator|+
literal|"."
operator|+
name|tblName
decl_stmt|;
name|resp
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|dbDotTable
operator|+
literal|"(i int) partitioned by (`date` string)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|tab
init|=
name|msc
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|setPermissions
argument_list|(
name|tab
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|InjectableDummyAuthenticator
operator|.
name|injectMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testCmd
argument_list|(
name|driver
argument_list|,
literal|"DESCRIBE  "
operator|+
name|dbDotTable
argument_list|,
name|isSuccess
argument_list|)
expr_stmt|;
name|testCmd
argument_list|(
name|driver
argument_list|,
literal|"DESCRIBE EXTENDED  "
operator|+
name|dbDotTable
argument_list|,
name|isSuccess
argument_list|)
expr_stmt|;
name|testCmd
argument_list|(
name|driver
argument_list|,
literal|"SHOW PARTITIONS  "
operator|+
name|dbDotTable
argument_list|,
name|isSuccess
argument_list|)
expr_stmt|;
name|testCmd
argument_list|(
name|driver
argument_list|,
literal|"SHOW COLUMNS IN "
operator|+
name|tblName
operator|+
literal|" IN "
operator|+
name|dbName
argument_list|,
name|isSuccess
argument_list|)
expr_stmt|;
name|testCmd
argument_list|(
name|driver
argument_list|,
literal|"use "
operator|+
name|dbName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testCmd
argument_list|(
name|driver
argument_list|,
literal|"SHOW TABLE EXTENDED LIKE "
operator|+
name|tblName
argument_list|,
name|isSuccess
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadDbSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|readDbByOtherUser
argument_list|(
literal|"-rwxrwxrwx"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadDbFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|readDbByOtherUser
argument_list|(
literal|"-rwxrwx---"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param perm dir permission for database dir    * @param isSuccess if command was successful    * @throws Exception    */
specifier|private
name|void
name|readDbByOtherUser
parameter_list|(
name|String
name|perm
parameter_list|,
name|boolean
name|isSuccess
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
name|getTestDbName
argument_list|()
decl_stmt|;
name|setPermissions
argument_list|(
name|clientHiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|resp
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|dbName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
name|msc
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|validateCreateDb
argument_list|(
name|db
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|setPermissions
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|,
name|perm
argument_list|)
expr_stmt|;
name|InjectableDummyAuthenticator
operator|.
name|injectMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testCmd
argument_list|(
name|driver
argument_list|,
literal|"DESCRIBE DATABASE "
operator|+
name|dbName
argument_list|,
name|isSuccess
argument_list|)
expr_stmt|;
name|testCmd
argument_list|(
name|driver
argument_list|,
literal|"DESCRIBE DATABASE EXTENDED "
operator|+
name|dbName
argument_list|,
name|isSuccess
argument_list|)
expr_stmt|;
name|testCmd
argument_list|(
name|driver
argument_list|,
literal|"SHOW TABLES IN "
operator|+
name|dbName
argument_list|,
name|isSuccess
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|testCmd
argument_list|(
name|driver
argument_list|,
literal|"SHOW TABLES "
argument_list|,
name|isSuccess
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testCmd
parameter_list|(
name|Driver
name|driver
parameter_list|,
name|String
name|cmd
parameter_list|,
name|boolean
name|isSuccess
parameter_list|)
throws|throws
name|CommandNeedRetryException
block|{
name|CommandProcessorResponse
name|resp
init|=
name|driver
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|isSuccess
argument_list|,
name|resp
operator|.
name|getResponseCode
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

