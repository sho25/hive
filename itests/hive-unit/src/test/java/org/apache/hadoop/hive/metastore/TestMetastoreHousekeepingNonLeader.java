begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
operator|.
name|Worker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Test for specifying HMS leader other than the current one.  */
end_comment

begin_class
specifier|public
class|class
name|TestMetastoreHousekeepingNonLeader
extends|extends
name|MetastoreHousekeepingLeaderTestBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMetastoreHousekeepingLeaderEmptyConfig
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Empty string for leader indicates that the HMS is leader.
name|internalSetup
argument_list|(
literal|"some_non_leader_host.domain1.domain"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHouseKeepingThreadExistence
parameter_list|()
throws|throws
name|Exception
block|{
name|searchHousekeepingThreads
argument_list|()
expr_stmt|;
comment|// Verify existence of threads
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|entry
range|:
name|threadNames
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No thread found with name "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Thread with name "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" found."
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|,
name|Boolean
argument_list|>
name|entry
range|:
name|threadClasses
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// A non-leader HMS will still run the configured number of Compaction worker threads.
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|==
name|Worker
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Thread found for "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"No thread found for "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No thread found for "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Thread found for class "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

