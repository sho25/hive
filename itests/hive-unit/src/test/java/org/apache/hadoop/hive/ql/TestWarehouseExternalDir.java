begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2014 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|jdbc
operator|.
name|miniHS2
operator|.
name|MiniHS2
operator|.
name|MiniClusterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TestWarehouseExternalDir
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestWarehouseExternalDir
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
name|MiniHS2
name|miniHS2
decl_stmt|;
specifier|static
name|Hive
name|db
decl_stmt|;
specifier|static
name|Connection
name|conn
decl_stmt|;
name|String
name|whRootExternal
init|=
literal|"/wh_ext"
decl_stmt|;
name|Path
name|whRootExternalPath
decl_stmt|;
name|Path
name|whRootManagedPath
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterTest
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|closeCurrent
argument_list|()
expr_stmt|;
name|db
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
comment|// TODO: delete tables/databases?
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"drop database if exists twed_db1 cascade"
argument_list|)
expr_stmt|;
block|}
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|miniHS2
operator|!=
literal|null
condition|)
block|{
name|miniHS2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|miniHS2
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|MiniHS2
operator|.
name|cleanupLocalDir
argument_list|()
expr_stmt|;
name|miniHS2
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
specifier|public
name|TestWarehouseExternalDir
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
comment|// Specify the external warehouse root
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_METASTORE_WAREHOUSE_EXTERNAL
argument_list|,
name|whRootExternal
argument_list|)
expr_stmt|;
comment|// Settings borrowed from TestJdbcWithMiniHS2
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_SERVER2_LOGGING_OPERATION_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVESTATSCOLAUTOGATHER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MiniHS2
operator|.
name|Builder
name|builder
init|=
operator|new
name|MiniHS2
operator|.
name|Builder
argument_list|()
operator|.
name|withConf
argument_list|(
name|conf
argument_list|)
operator|.
name|cleanupLocalDirOnStartup
argument_list|(
literal|true
argument_list|)
operator|.
name|withMiniMR
argument_list|()
operator|.
name|withRemoteMetastore
argument_list|()
decl_stmt|;
name|miniHS2
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|confOverlay
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|miniHS2
operator|.
name|start
argument_list|(
name|confOverlay
argument_list|)
expr_stmt|;
name|HiveConf
name|dbConf
init|=
name|miniHS2
operator|.
name|getHiveConf
argument_list|()
decl_stmt|;
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|dbConf
argument_list|)
expr_stmt|;
name|fs
operator|=
name|miniHS2
operator|.
name|getDfs
argument_list|()
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|whRootExternalPath
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|whRootExternal
argument_list|)
argument_list|)
expr_stmt|;
name|whRootManagedPath
operator|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|dbConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"fs: {}"
argument_list|,
name|miniHS2
operator|.
name|getDfs
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"warehouse location: {}"
argument_list|,
name|whRootManagedPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"whRootExternalPath: {}"
argument_list|,
name|whRootExternalPath
argument_list|)
expr_stmt|;
name|conn
operator|=
name|getConnection
argument_list|()
expr_stmt|;
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"create database if not exists twed_db1"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|()
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Connection
name|getConnection
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getConnection
argument_list|(
name|miniHS2
operator|.
name|getJdbcURL
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|,
literal|"bar"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Connection
name|getConnection
parameter_list|(
name|String
name|jdbcURL
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|pwd
parameter_list|)
throws|throws
name|SQLException
block|{
name|Connection
name|conn
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|jdbcURL
argument_list|,
name|user
argument_list|,
name|pwd
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|conn
argument_list|)
expr_stmt|;
return|return
name|conn
return|;
block|}
specifier|static
name|void
name|checkTableLocation
parameter_list|(
name|Table
name|table
parameter_list|,
name|Path
name|expectedPath
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Table {}: location {}"
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|table
operator|.
name|getDataLocation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|expectedPath
argument_list|,
name|table
operator|.
name|getDataLocation
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|miniHS2
operator|.
name|getDfs
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|table
operator|.
name|getDataLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testManagedPaths
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
comment|// Confirm default managed table paths
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table default.twed_1(c1 string)"
argument_list|)
expr_stmt|;
name|Table
name|tab
init|=
name|db
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
literal|"twed_1"
argument_list|)
decl_stmt|;
name|checkTableLocation
argument_list|(
name|tab
argument_list|,
operator|new
name|Path
argument_list|(
name|whRootManagedPath
argument_list|,
literal|"twed_1"
argument_list|)
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create table twed_db1.tab1(c1 string, c2 string)"
argument_list|)
expr_stmt|;
name|tab
operator|=
name|db
operator|.
name|getTable
argument_list|(
literal|"twed_db1"
argument_list|,
literal|"tab1"
argument_list|)
expr_stmt|;
name|checkTableLocation
argument_list|(
name|tab
argument_list|,
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|whRootManagedPath
argument_list|,
literal|"twed_db1.db"
argument_list|)
argument_list|,
literal|"tab1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExternalDefaultPaths
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|stmt
operator|.
name|execute
argument_list|(
literal|"create external table default.twed_ext1(c1 string)"
argument_list|)
expr_stmt|;
name|Table
name|tab
init|=
name|db
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
literal|"twed_ext1"
argument_list|)
decl_stmt|;
name|checkTableLocation
argument_list|(
name|tab
argument_list|,
operator|new
name|Path
argument_list|(
name|whRootExternalPath
argument_list|,
literal|"twed_ext1"
argument_list|)
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create external table twed_db1.twed_ext2(c1 string)"
argument_list|)
expr_stmt|;
name|tab
operator|=
name|db
operator|.
name|getTable
argument_list|(
literal|"twed_db1"
argument_list|,
literal|"twed_ext2"
argument_list|)
expr_stmt|;
name|checkTableLocation
argument_list|(
name|tab
argument_list|,
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|whRootExternalPath
argument_list|,
literal|"twed_db1.db"
argument_list|)
argument_list|,
literal|"twed_ext2"
argument_list|)
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create external table default.twed_ext3 like default.twed_ext1"
argument_list|)
expr_stmt|;
name|tab
operator|=
name|db
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
literal|"twed_ext3"
argument_list|)
expr_stmt|;
name|checkTableLocation
argument_list|(
name|tab
argument_list|,
operator|new
name|Path
argument_list|(
name|whRootExternalPath
argument_list|,
literal|"twed_ext3"
argument_list|)
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"create external table twed_db1.twed_ext4 like default.twed_ext1"
argument_list|)
expr_stmt|;
name|tab
operator|=
name|db
operator|.
name|getTable
argument_list|(
literal|"twed_db1"
argument_list|,
literal|"twed_ext4"
argument_list|)
expr_stmt|;
name|checkTableLocation
argument_list|(
name|tab
argument_list|,
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|whRootExternalPath
argument_list|,
literal|"twed_db1.db"
argument_list|)
argument_list|,
literal|"twed_ext4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

