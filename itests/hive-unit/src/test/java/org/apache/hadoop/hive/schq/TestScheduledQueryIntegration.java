begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|schq
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|IDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|scheduled
operator|.
name|ScheduledQueryExecutionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|testutils
operator|.
name|HiveTestEnvSetup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_comment
comment|/**  * ScheduledQuery integration test.  *  * Checks for more complex scenarios; like impersonation works when scheduled queries are executed.  */
end_comment

begin_class
specifier|public
class|class
name|TestScheduledQueryIntegration
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
name|HiveTestEnvSetup
name|envSetup
init|=
operator|new
name|HiveTestEnvSetup
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestRule
name|methodRule
init|=
name|envSetup
operator|.
name|getMethodRule
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|dropTables
argument_list|(
name|driver
argument_list|)
expr_stmt|;
name|String
name|cmds
index|[]
init|=
block|{
comment|// @formatter:off
literal|"create table tu(c int)"
block|,
literal|"create database asd"
block|,
literal|"create table asd.tasd(c int)"
block|,
comment|// @formatter:on
block|}
decl_stmt|;
for|for
control|(
name|String
name|cmd
range|:
name|cmds
control|)
block|{
name|driver
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|envSetup
operator|.
name|getTestCtx
argument_list|()
operator|.
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.test.authz.sstd.hs2.mode"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|envSetup
operator|.
name|getTestCtx
argument_list|()
operator|.
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.security.authorization.enabled"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
decl_stmt|;
name|dropTables
argument_list|(
name|driver
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|dropTables
parameter_list|(
name|IDriver
name|driver
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|tables
index|[]
init|=
block|{
literal|"tu"
block|}
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|tables
control|)
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table if exists "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicImpersonation
parameter_list|()
throws|throws
name|ParseException
throws|,
name|Exception
block|{
name|setupAuthorization
argument_list|()
expr_stmt|;
name|runAsUser
argument_list|(
literal|"user1"
argument_list|,
literal|"create table t1 (a integer)"
argument_list|)
expr_stmt|;
try|try
block|{
name|runAsUser
argument_list|(
literal|"user2"
argument_list|,
literal|"drop table t1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandProcessorException
name|cpe
parameter_list|)
block|{
name|assertThat
argument_list|(
name|cpe
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
name|Matchers
operator|.
name|containsString
argument_list|(
literal|"HiveAccessControlException Permission denied"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|runAsUser
argument_list|(
literal|"user1"
argument_list|,
literal|"drop table t1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScheduledQueryExecutionImpersonation
parameter_list|()
throws|throws
name|ParseException
throws|,
name|Exception
block|{
name|envSetup
operator|.
name|getTestCtx
argument_list|()
operator|.
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SCHEDULED_QUERIES_EXECUTOR_IDLE_SLEEP_TIME
argument_list|,
literal|"1s"
argument_list|)
expr_stmt|;
name|envSetup
operator|.
name|getTestCtx
argument_list|()
operator|.
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SCHEDULED_QUERIES_EXECUTOR_PROGRESS_REPORT_INTERVAL
argument_list|,
literal|"1s"
argument_list|)
expr_stmt|;
name|setupAuthorization
argument_list|()
expr_stmt|;
try|try
init|(
name|ScheduledQueryExecutionService
name|schqS
init|=
name|ScheduledQueryExecutionService
operator|.
name|startScheduledQueryExecutorService
argument_list|(
name|envSetup
operator|.
name|getTestCtx
argument_list|()
operator|.
name|hiveConf
argument_list|)
init|)
block|{
name|runAsUser
argument_list|(
literal|"user1"
argument_list|,
literal|"create scheduled query s1 cron '* * * * * ? *' defined as create table tx1 as select 12 as i"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|20000
argument_list|)
expr_stmt|;
block|}
comment|// table exists - and owner is able to select from it
name|runAsUser
argument_list|(
literal|"user1"
argument_list|,
literal|"select * from tx1"
argument_list|)
expr_stmt|;
comment|// other user cant drop it
try|try
block|{
name|runAsUser
argument_list|(
literal|"user2"
argument_list|,
literal|"drop table tx1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandProcessorException
name|cpe
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|40000
argument_list|,
name|cpe
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// but the owner can drop it
name|runAsUser
argument_list|(
literal|"user1"
argument_list|,
literal|"drop table tx1"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CommandProcessorResponse
name|runAsUser
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|CommandProcessorException
block|{
name|HiveConf
name|conf
init|=
name|envSetup
operator|.
name|getTestCtx
argument_list|()
operator|.
name|hiveConf
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"user.name"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
try|try
init|(
name|IDriver
name|driver
init|=
name|createDriver
argument_list|()
init|)
block|{
return|return
name|driver
operator|.
name|run
argument_list|(
name|sql
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|setupAuthorization
parameter_list|()
block|{
name|HiveConf
name|conf
init|=
name|envSetup
operator|.
name|getTestCtx
argument_list|()
operator|.
name|hiveConf
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.test.authz.sstd.hs2.mode"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.security.authorization.manager"
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactoryForTest"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.security.authenticator.manager"
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.SessionStateConfigUserAuthenticator"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hive.security.authorization.enabled"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|CloseableObjectStore
extends|extends
name|ObjectStore
implements|implements
name|AutoCloseable
block|{
specifier|public
name|CloseableObjectStore
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|super
operator|.
name|setConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|IDriver
name|createDriver
parameter_list|()
block|{
name|HiveConf
name|conf
init|=
name|envSetup
operator|.
name|getTestCtx
argument_list|()
operator|.
name|hiveConf
decl_stmt|;
name|String
name|userName
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"user.name"
argument_list|)
decl_stmt|;
name|SessionState
name|ss
init|=
operator|new
name|SessionState
argument_list|(
name|conf
argument_list|,
name|userName
argument_list|)
decl_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|IDriver
name|driver
init|=
name|DriverFactory
operator|.
name|newDriver
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|driver
return|;
block|}
block|}
end_class

end_unit

