begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
operator|.
name|BehaviourInjection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ForeignKeysRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotNullConstraintsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrimaryKeysRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLForeignKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLNotNullConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLPrimaryKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLUniqueConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UniqueConstraintsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|event
operator|.
name|filters
operator|.
name|AndFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|event
operator|.
name|filters
operator|.
name|DatabaseAndTableFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|event
operator|.
name|filters
operator|.
name|EventBoundaryFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|event
operator|.
name|filters
operator|.
name|MessageFormatFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|CommandNeedRetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|ReplDumpWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
operator|.
name|api
operator|.
name|repl
operator|.
name|ReplicationV1CompatRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
specifier|public
class|class
name|TestReplicationScenarios
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DBNOTIF_LISTENER_CLASSNAME
init|=
literal|"org.apache.hive.hcatalog.listener.DbNotificationListener"
decl_stmt|;
comment|// FIXME : replace with hive copy once that is copied
specifier|private
specifier|final
specifier|static
name|String
name|tid
init|=
name|TestReplicationScenarios
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'_'
argument_list|)
operator|+
literal|"_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_PATH
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.warehouse.dir"
argument_list|,
literal|"/tmp"
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|tid
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|hconf
decl_stmt|;
specifier|private
specifier|static
name|int
name|msPort
decl_stmt|;
specifier|private
specifier|static
name|Driver
name|driver
decl_stmt|;
specifier|private
specifier|static
name|HiveMetaStoreClient
name|metaStoreClient
decl_stmt|;
specifier|static
name|HiveConf
name|hconfMirror
decl_stmt|;
specifier|static
name|int
name|msPortMirror
decl_stmt|;
specifier|static
name|Driver
name|driverMirror
decl_stmt|;
specifier|static
name|HiveMetaStoreClient
name|metaStoreClientMirror
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestRule
name|replV1BackwardCompatibleRule
init|=
operator|new
name|ReplicationV1CompatRule
argument_list|(
name|metaStoreClient
argument_list|,
name|hconf
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testEventFilters"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Make sure we skip backward-compat checking for those tests that don't generate events
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReplicationScenarios
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|String
argument_list|>
name|lastResults
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|VERIFY_SETUP_STEPS
init|=
literal|true
decl_stmt|;
comment|// if verifySetup is set to true, all the test setup we do will perform additional
comment|// verifications as well, which is useful to verify that our setup occurred
comment|// correctly when developing and debugging tests. These verifications, however
comment|// do not test any new functionality for replication, and thus, are not relevant
comment|// for testing replication itself. For steady state, we want this to be false.
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|hconf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestReplicationScenarios
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|metastoreUri
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test."
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
operator|.
name|varname
argument_list|)
decl_stmt|;
if|if
condition|(
name|metastoreUri
operator|!=
literal|null
condition|)
block|{
name|hconf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
name|metastoreUri
argument_list|)
expr_stmt|;
return|return;
block|}
name|hconf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_TRANSACTIONAL_EVENT_LISTENERS
argument_list|,
name|DBNOTIF_LISTENER_CLASSNAME
argument_list|)
expr_stmt|;
comment|// turn on db notification listener on metastore
name|hconf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPLCMENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|FIRE_EVENTS_FOR_DML
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPLCMDIR
argument_list|,
name|TEST_PATH
operator|+
literal|"/cmroot/"
argument_list|)
expr_stmt|;
name|msPort
operator|=
name|MetaStoreUtils
operator|.
name|startMetaStore
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPLDIR
argument_list|,
name|TEST_PATH
operator|+
literal|"/hrepl/"
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
literal|"thrift://localhost:"
operator|+
name|msPort
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORETHRIFTCONNECTIONRETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|hconf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_RAW_STORE_IMPL
operator|.
name|varname
argument_list|,
literal|"org.apache.hadoop.hive.metastore.InjectableBehaviourObjectStore"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|Path
name|testPath
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|testPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|hconf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|driver
operator|=
operator|new
name|Driver
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|hconf
argument_list|)
argument_list|)
expr_stmt|;
name|metaStoreClient
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
literal|"metastore_db2"
argument_list|)
argument_list|)
expr_stmt|;
name|HiveConf
name|hconfMirrorServer
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|hconfMirrorServer
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORECONNECTURLKEY
operator|.
name|varname
argument_list|,
literal|"jdbc:derby:;databaseName=metastore_db2;create=true"
argument_list|)
expr_stmt|;
name|msPortMirror
operator|=
name|MetaStoreUtils
operator|.
name|startMetaStore
argument_list|(
name|hconfMirrorServer
argument_list|)
expr_stmt|;
name|hconfMirror
operator|=
operator|new
name|HiveConf
argument_list|(
name|hconf
argument_list|)
expr_stmt|;
name|hconfMirror
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
literal|"thrift://localhost:"
operator|+
name|msPortMirror
argument_list|)
expr_stmt|;
name|driverMirror
operator|=
operator|new
name|Driver
argument_list|(
name|hconfMirror
argument_list|)
expr_stmt|;
name|metaStoreClientMirror
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hconfMirror
argument_list|)
expr_stmt|;
name|ObjectStore
operator|.
name|setTwoMetastoreTesting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
block|{
comment|// FIXME : should clean up TEST_PATH, but not doing it now, for debugging's sake
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
comment|// before each test
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|setCurrentDatabase
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
comment|// after each test
block|}
specifier|private
specifier|static
name|int
name|next
init|=
literal|0
decl_stmt|;
specifier|private
specifier|synchronized
name|void
name|advanceDumpDir
parameter_list|()
block|{
name|next
operator|++
expr_stmt|;
name|ReplDumpWork
operator|.
name|injectNextDumpDirForTest
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|next
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|Tuple
block|{
specifier|final
name|String
name|dumpLocation
decl_stmt|;
specifier|final
name|String
name|lastReplId
decl_stmt|;
name|Tuple
parameter_list|(
name|String
name|dumpLocation
parameter_list|,
name|String
name|lastReplId
parameter_list|)
block|{
name|this
operator|.
name|dumpLocation
operator|=
name|dumpLocation
expr_stmt|;
name|this
operator|.
name|lastReplId
operator|=
name|lastReplId
expr_stmt|;
block|}
block|}
specifier|private
name|Tuple
name|bootstrapLoadAndVerify
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|replDbName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|incrementalLoadAndVerify
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
name|replDbName
argument_list|)
return|;
block|}
specifier|private
name|Tuple
name|incrementalLoadAndVerify
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|fromReplId
parameter_list|,
name|String
name|replDbName
parameter_list|)
throws|throws
name|IOException
block|{
name|Tuple
name|dump
init|=
name|replDumpDb
argument_list|(
name|dbName
argument_list|,
name|fromReplId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|loadAndVerify
argument_list|(
name|replDbName
argument_list|,
name|dump
operator|.
name|dumpLocation
argument_list|,
name|dump
operator|.
name|lastReplId
argument_list|)
expr_stmt|;
return|return
name|dump
return|;
block|}
specifier|private
name|Tuple
name|dumpDbFromLastDump
parameter_list|(
name|String
name|dbName
parameter_list|,
name|Tuple
name|lastDump
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|replDumpDb
argument_list|(
name|dbName
argument_list|,
name|lastDump
operator|.
name|lastReplId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|Tuple
name|replDumpDb
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|fromReplID
parameter_list|,
name|String
name|toReplID
parameter_list|,
name|String
name|limit
parameter_list|)
throws|throws
name|IOException
block|{
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|String
name|dumpCmd
init|=
literal|"REPL DUMP "
operator|+
name|dbName
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|fromReplID
condition|)
block|{
name|dumpCmd
operator|=
name|dumpCmd
operator|+
literal|" FROM "
operator|+
name|fromReplID
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|toReplID
condition|)
block|{
name|dumpCmd
operator|=
name|dumpCmd
operator|+
literal|" TO "
operator|+
name|toReplID
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|limit
condition|)
block|{
name|dumpCmd
operator|=
name|dumpCmd
operator|+
literal|" LIMIT "
operator|+
name|limit
expr_stmt|;
block|}
name|run
argument_list|(
name|dumpCmd
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|dumpLocation
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|lastReplId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dumped to {} with id {} for command: {}"
argument_list|,
name|dumpLocation
argument_list|,
name|lastReplId
argument_list|,
name|dumpCmd
argument_list|)
expr_stmt|;
return|return
operator|new
name|Tuple
argument_list|(
name|dumpLocation
argument_list|,
name|lastReplId
argument_list|)
return|;
block|}
specifier|private
name|void
name|loadAndVerify
parameter_list|(
name|String
name|replDbName
parameter_list|,
name|String
name|dumpLocation
parameter_list|,
name|String
name|lastReplId
parameter_list|)
throws|throws
name|IOException
block|{
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|replDbName
operator|+
literal|" FROM '"
operator|+
name|dumpLocation
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|replDbName
operator|+
literal|" FROM '"
operator|+
name|dumpLocation
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"REPL STATUS "
operator|+
name|replDbName
argument_list|,
name|lastReplId
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/**    * Tests basic operation - creates a db, with 4 tables, 2 ptned and 2 unptned.    * Inserts data into one of the ptned tables, and one of the unptned tables,    * and verifies that a REPL DUMP followed by a REPL LOAD is able to load it    * appropriately. This tests bootstrap behaviour primarily.    */
annotation|@
name|Test
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|name
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_empty(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_empty(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"thirteen"
block|,
literal|"fourteen"
block|,
literal|"fifteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"sixteen"
block|,
literal|"seventeen"
block|}
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
name|unptn_locn
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|name
operator|+
literal|"_unptn"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_1
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|name
operator|+
literal|"_ptn1"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_2
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|name
operator|+
literal|"_ptn2"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createTestDataFile
argument_list|(
name|unptn_locn
argument_list|,
name|unptn_data
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_1
argument_list|,
name|ptn_data_1
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_2
argument_list|,
name|ptn_data_2
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|unptn_locn
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_1
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=1)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=1"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_2
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=2)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_empty"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned_empty"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replicatedDbName
init|=
name|dbName
operator|+
literal|"_dupe"
decl_stmt|;
name|bootstrapLoadAndVerify
argument_list|(
name|dbName
argument_list|,
name|replicatedDbName
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT * from "
operator|+
name|replicatedDbName
operator|+
literal|".unptned"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|replicatedDbName
operator|+
literal|".ptned WHERE b=1"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|replicatedDbName
operator|+
literal|".ptned WHERE b=2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_empty"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned_empty"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicWithCM
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|name
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_empty(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_empty(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"thirteen"
block|,
literal|"fourteen"
block|,
literal|"fifteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"sixteen"
block|,
literal|"seventeen"
block|}
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
name|unptn_locn
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|name
operator|+
literal|"_unptn"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_1
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|name
operator|+
literal|"_ptn1"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_2
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|name
operator|+
literal|"_ptn2"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_2_later
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|name
operator|+
literal|"_ptn2_later"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createTestDataFile
argument_list|(
name|unptn_locn
argument_list|,
name|unptn_data
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_1
argument_list|,
name|ptn_data_1
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_2
argument_list|,
name|ptn_data_2
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|unptn_locn
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_1
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=1)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=1"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_2
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=2)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_empty"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned_empty"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
comment|// Table dropped after "repl dump"
name|run
argument_list|(
literal|"DROP TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Partition droppped after "repl dump"
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned "
operator|+
literal|"DROP PARTITION(b=1)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|dbName
operator|+
literal|"_dupe"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
name|replDumpId
block|}
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=1"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=2"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_empty"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned_empty"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBootstrapLoadOnExistingDb
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"bootstrapLoadOnExistingDb"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|testName
operator|+
literal|"_"
operator|+
name|tid
decl_stmt|;
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|String
name|unptn_locn
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_unptn"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createTestDataFile
argument_list|(
name|unptn_locn
argument_list|,
name|unptn_data
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|unptn_locn
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Create an empty database to load
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
operator|+
literal|"_empty"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
comment|// Load to an empty database
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_empty FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// REPL STATUS should return same repl ID as dump
name|verifyRun
argument_list|(
literal|"REPL STATUS "
operator|+
name|dbName
operator|+
literal|"_empty"
argument_list|,
name|replDumpId
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_empty.unptned"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|String
index|[]
name|nullReplId
init|=
operator|new
name|String
index|[]
block|{
literal|"NULL"
block|}
decl_stmt|;
comment|// Create a database with a table
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
operator|+
literal|"_withtable"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|"_withtable.unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Load using same dump to a DB with table. It should fail as DB is not empty.
name|verifyFail
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_withtable FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// REPL STATUS should return NULL
name|verifyRun
argument_list|(
literal|"REPL STATUS "
operator|+
name|dbName
operator|+
literal|"_withtable"
argument_list|,
name|nullReplId
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Create a database with a view
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
operator|+
literal|"_withview"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|"_withview.unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE VIEW "
operator|+
name|dbName
operator|+
literal|"_withview.view AS SELECT * FROM "
operator|+
name|dbName
operator|+
literal|"_withview.unptned"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Load using same dump to a DB with view. It should fail as DB is not empty.
name|verifyFail
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_withview FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// REPL STATUS should return NULL
name|verifyRun
argument_list|(
literal|"REPL STATUS "
operator|+
name|dbName
operator|+
literal|"_withview"
argument_list|,
name|nullReplId
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBootstrapWithConcurrentDropTable
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|name
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"thirteen"
block|,
literal|"fourteen"
block|,
literal|"fifteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"sixteen"
block|,
literal|"seventeen"
block|}
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
name|unptn_locn
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|name
operator|+
literal|"_unptn"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_1
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|name
operator|+
literal|"_ptn1"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_2
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|name
operator|+
literal|"_ptn2"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createTestDataFile
argument_list|(
name|unptn_locn
argument_list|,
name|unptn_data
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_1
argument_list|,
name|ptn_data_1
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_2
argument_list|,
name|ptn_data_2
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|unptn_locn
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_1
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=1)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=1"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_2
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=2)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|BehaviourInjection
argument_list|<
name|Table
argument_list|,
name|Table
argument_list|>
name|ptnedTableNuller
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|Table
argument_list|,
name|Table
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Table
name|apply
parameter_list|(
annotation|@
name|Nullable
name|Table
name|table
parameter_list|)
block|{
if|if
condition|(
name|table
operator|.
name|getTableName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ptned"
argument_list|)
condition|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|nonInjectedPathCalled
operator|=
literal|true
expr_stmt|;
return|return
name|table
return|;
block|}
block|}
block|}
decl_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setGetTableBehaviour
argument_list|(
name|ptnedTableNuller
argument_list|)
expr_stmt|;
comment|// The ptned table will not be dumped as getTable will return null
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|ptnedTableNuller
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|resetGetTableBehaviour
argument_list|()
expr_stmt|;
comment|// reset the behaviour
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-Dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// The ptned table should miss in target as the table was marked virtually as dropped
name|verifyRun
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyFail
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=1"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyIfTableNotExist
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"ptned"
argument_list|,
name|metaStoreClient
argument_list|)
expr_stmt|;
comment|// Verify if Drop table on a non-existing table is idempotent
name|run
argument_list|(
literal|"DROP TABLE "
operator|+
name|dbName
operator|+
literal|".ptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyIfTableNotExist
argument_list|(
name|dbName
argument_list|,
literal|"ptned"
argument_list|,
name|metaStoreClient
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|postDropReplDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|postDropReplDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dumped to {} with id {}->{}"
argument_list|,
name|postDropReplDumpLocn
argument_list|,
name|replDumpId
argument_list|,
name|postDropReplDumpId
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|postDropReplDumpLocn
operator|+
literal|"'"
argument_list|,
literal|true
argument_list|,
name|driverMirror
argument_list|)
operator|)
assert|;
name|verifyRun
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyIfTableNotExist
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"ptned"
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyFail
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=1"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBootstrapWithConcurrentDropPartition
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|name
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"thirteen"
block|,
literal|"fourteen"
block|,
literal|"fifteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"sixteen"
block|,
literal|"seventeen"
block|}
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
name|ptn_locn_1
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|name
operator|+
literal|"_ptn1"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_2
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|name
operator|+
literal|"_ptn2"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_1
argument_list|,
name|ptn_data_1
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_2
argument_list|,
name|ptn_data_2
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_1
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=1)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=1"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_2
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=2)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|BehaviourInjection
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|listPartitionNamesNuller
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|apply
parameter_list|(
annotation|@
name|Nullable
name|List
argument_list|<
name|String
argument_list|>
name|partitions
parameter_list|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setListPartitionNamesBehaviour
argument_list|(
name|listPartitionNamesNuller
argument_list|)
expr_stmt|;
comment|// None of the partitions will be dumped as the partitions list was empty
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|listPartitionNamesNuller
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|resetListPartitionNamesBehaviour
argument_list|()
expr_stmt|;
comment|// reset the behaviour
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-Dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// All partitions should miss in target as it was marked virtually as dropped
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=1"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=2"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyIfPartitionNotExist
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"ptned"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyIfPartitionNotExist
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"ptned"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
comment|// Verify if drop partition on a non-existing partition is idempotent and just a noop.
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned DROP PARTITION (b=1)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned DROP PARTITION (b=2)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyIfPartitionNotExist
argument_list|(
name|dbName
argument_list|,
literal|"ptned"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|,
name|metaStoreClient
argument_list|)
expr_stmt|;
name|verifyIfPartitionNotExist
argument_list|(
name|dbName
argument_list|,
literal|"ptned"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|,
name|metaStoreClient
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=1"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=2"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|postDropReplDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|postDropReplDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dumped to {} with id {}->{}"
argument_list|,
name|postDropReplDumpLocn
argument_list|,
name|replDumpId
argument_list|,
name|postDropReplDumpId
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|postDropReplDumpLocn
operator|+
literal|"'"
argument_list|,
literal|true
argument_list|,
name|driverMirror
argument_list|)
operator|)
assert|;
name|verifyIfPartitionNotExist
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"ptned"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyIfPartitionNotExist
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"ptned"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=1"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=2"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalAdds
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|name
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_empty(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_empty(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"thirteen"
block|,
literal|"fourteen"
block|,
literal|"fifteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"sixteen"
block|,
literal|"seventeen"
block|}
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
name|unptn_locn
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|name
operator|+
literal|"_unptn"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_1
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|name
operator|+
literal|"_ptn1"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_2
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|name
operator|+
literal|"_ptn2"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createTestDataFile
argument_list|(
name|unptn_locn
argument_list|,
name|unptn_data
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_1
argument_list|,
name|ptn_data_1
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_2
argument_list|,
name|ptn_data_2
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_empty"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned_empty"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Now, we load data into the tables, and see if an incremental
comment|// repl drop/load can duplicate it.
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|unptn_locn
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_late AS SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned_late"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_1
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=1)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=1"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_2
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=2)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_late(a string) PARTITIONED BY (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_1
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_late PARTITION(b=1)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_late WHERE b=1"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_2
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_late PARTITION(b=2)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_late WHERE b=2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Perform REPL-DUMP/LOAD
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dumped to {} with id {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|dbName
operator|+
literal|"_dupe"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
name|incrementalDumpId
block|}
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// VERIFY tables and partitions on destination for equivalence.
name|verifyRun
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned_empty"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_empty"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|//    verifyRun("SELECT * from " + dbName + "_dupe.unptned", unptn_data);
comment|// TODO :this does not work because LOAD DATA LOCAL INPATH into an unptned table seems
comment|// to use ALTER_TABLE only - it does not emit an INSERT or CREATE - re-enable after
comment|// fixing that.
name|verifyRun
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned_late"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=1"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_late WHERE b=1"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_late WHERE b=2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalLoadWithVariableLengthEventId
parameter_list|()
throws|throws
name|IOException
throws|,
name|TException
block|{
name|String
name|testName
init|=
literal|"incrementalLoadWithVariableLengthEventId"
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|testName
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('ten')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-Dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// CREATE_TABLE - TRUNCATE - INSERT - The result is just one record.
comment|// Creating dummy table to control the event ID of TRUNCATE not to be 10 or 100 or 1000...
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|}
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".dummy(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"TRUNCATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Inject a behaviour where all events will get ID less than 100 except TRUNCATE which will get ID 100.
comment|// This enesures variable length of event ID in the incremental dump
name|BehaviourInjection
argument_list|<
name|NotificationEventResponse
argument_list|,
name|NotificationEventResponse
argument_list|>
name|eventIdModifier
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|NotificationEventResponse
argument_list|,
name|NotificationEventResponse
argument_list|>
argument_list|()
block|{
specifier|private
name|long
name|nextEventId
init|=
literal|0
decl_stmt|;
comment|// Initialize to 0 as for increment dump, 0 won't be used.
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|NotificationEventResponse
name|apply
parameter_list|(
annotation|@
name|Nullable
name|NotificationEventResponse
name|eventIdList
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|eventIdList
condition|)
block|{
name|List
argument_list|<
name|NotificationEvent
argument_list|>
name|eventIds
init|=
name|eventIdList
operator|.
name|getEvents
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NotificationEvent
argument_list|>
name|outEventIds
init|=
operator|new
name|ArrayList
argument_list|<
name|NotificationEvent
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|eventIds
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|NotificationEvent
name|event
init|=
name|eventIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Skip all the events belong to other DBs/tables.
if|if
condition|(
name|event
operator|.
name|getDbName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
comment|// We will encounter create_table, truncate followed by insert.
comment|// For the insert, set the event ID longer such that old comparator picks insert before truncate
comment|// Eg: Event IDs CREATE_TABLE - 5, TRUNCATE - 9, INSERT - 12 changed to
comment|// CREATE_TABLE - 5, TRUNCATE - 9, INSERT - 100
comment|// But if TRUNCATE have ID-10, then having INSERT-100 won't be sufficient to test the scenario.
comment|// So, we set any event comes after CREATE_TABLE starts with 20.
comment|// Eg: Event IDs CREATE_TABLE - 5, TRUNCATE - 10, INSERT - 12 changed to
comment|// CREATE_TABLE - 5, TRUNCATE - 20(20<= Id< 100), INSERT - 100
switch|switch
condition|(
name|event
operator|.
name|getEventType
argument_list|()
condition|)
block|{
case|case
literal|"CREATE_TABLE"
case|:
block|{
comment|// The next ID is set to 20 or 200 or 2000 ... based on length of current event ID
comment|// This is done to ensure TRUNCATE doesn't get an ID 10 or 100...
name|nextEventId
operator|=
operator|(
name|long
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|10.0
argument_list|,
operator|(
name|double
operator|)
name|String
operator|.
name|valueOf
argument_list|(
name|event
operator|.
name|getEventId
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
operator|*
literal|2
expr_stmt|;
break|break;
block|}
case|case
literal|"INSERT"
case|:
block|{
comment|// INSERT will come always after CREATE_TABLE, TRUNCATE. So, no need to validate nextEventId
name|nextEventId
operator|=
operator|(
name|long
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|10.0
argument_list|,
operator|(
name|double
operator|)
name|String
operator|.
name|valueOf
argument_list|(
name|nextEventId
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Changed EventId #{} to #{}"
argument_list|,
name|event
operator|.
name|getEventId
argument_list|()
argument_list|,
name|nextEventId
argument_list|)
expr_stmt|;
name|event
operator|.
name|setEventId
argument_list|(
name|nextEventId
operator|++
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
comment|// After CREATE_TABLE all the events in this DB should get an ID>= 20 or 200 ...
if|if
condition|(
name|nextEventId
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Changed EventId #{} to #{}"
argument_list|,
name|event
operator|.
name|getEventId
argument_list|()
argument_list|,
name|nextEventId
argument_list|)
expr_stmt|;
name|event
operator|.
name|setEventId
argument_list|(
name|nextEventId
operator|++
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
name|outEventIds
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|outEventIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|eventIdList
return|;
comment|// If not even one event belongs to current DB, then return original one itself.
block|}
else|else
block|{
comment|// If the new list is not empty (input list have some events from this DB), then return it
return|return
operator|new
name|NotificationEventResponse
argument_list|(
name|outEventIds
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
decl_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setGetNextNotificationBehaviour
argument_list|(
name|eventIdModifier
argument_list|)
expr_stmt|;
comment|// It is possible that currentNotificationEventID from metastore is less than newly set event ID by stub function.
comment|// In this case, REPL DUMP will skip events beyond this upper limit.
comment|// So, to avoid this failure, we will set the TO clause to ID 100 times of currentNotificationEventID
name|String
name|cmd
init|=
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
operator|+
literal|" TO "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|metaStoreClient
operator|.
name|getCurrentNotificationEventId
argument_list|()
operator|.
name|getEventId
argument_list|()
operator|*
literal|100
argument_list|)
decl_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
name|cmd
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|eventIdModifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|resetGetNextNotificationBehaviour
argument_list|()
expr_stmt|;
comment|// reset the behaviour
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDrops
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|name
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) partitioned by (b string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned2(a string) partitioned by (b string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned3(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"thirteen"
block|,
literal|"fourteen"
block|,
literal|"fifteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"sixteen"
block|,
literal|"seventeen"
block|}
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
name|unptn_locn
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|name
operator|+
literal|"_unptn"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_1
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|name
operator|+
literal|"_ptn1"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_2
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|name
operator|+
literal|"_ptn2"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createTestDataFile
argument_list|(
name|unptn_locn
argument_list|,
name|unptn_data
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_1
argument_list|,
name|ptn_data_1
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_2
argument_list|,
name|ptn_data_2
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|unptn_locn
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_1
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b='1')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b='1'"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_2
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b='2')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b='2'"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_1
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned2 PARTITION(b='1')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned2 WHERE b='1'"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_2
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned2 PARTITION(b='2')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned2 WHERE b='2'"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_1
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned3 PARTITION(b=1)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned2 WHERE b=1"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_2
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned3 PARTITION(b=2)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned2 WHERE b=2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// At this point, we've set up all the tables and ptns we're going to test drops across
comment|// Replicate it first, and then we'll drop it on the source.
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"REPL STATUS "
operator|+
name|dbName
operator|+
literal|"_dupe"
argument_list|,
operator|new
name|String
index|[]
block|{
name|replDumpId
block|}
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b='1'"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b='2'"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned2 WHERE b='1'"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned2 WHERE b='2'"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned3 WHERE b=1"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned3 WHERE b=2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// All tables good on destination, drop on source.
name|run
argument_list|(
literal|"DROP TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned DROP PARTITION (b='2')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"DROP TABLE "
operator|+
name|dbName
operator|+
literal|".ptned2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned3 DROP PARTITION (b=1)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b='2'"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned3 WHERE b=1"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned3"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// replicate the incremental drops
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|postDropReplDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|postDropReplDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dumped to {} with id {}->{}"
argument_list|,
name|postDropReplDumpLocn
argument_list|,
name|replDumpId
argument_list|,
name|postDropReplDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|postDropReplDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|postDropReplDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// verify that drops were replicated. This can either be from tables or ptns
comment|// not existing, and thus, throwing a NoSuchObjectException, or returning nulls
comment|// or select * returning empty, depending on what we're testing.
name|verifyIfTableNotExist
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"unptned"
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b='2'"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned3 WHERE b=1"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned3"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyIfTableNotExist
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"ptned2"
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropsWithCM
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"drops_with_cm"
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|testName
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) partitioned by (b string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned2(a string) partitioned by (b string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"thirteen"
block|,
literal|"fourteen"
block|,
literal|"fifteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"sixteen"
block|,
literal|"seventeen"
block|}
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
name|unptn_locn
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_unptn"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_1
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_ptn1"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_2
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_ptn2"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createTestDataFile
argument_list|(
name|unptn_locn
argument_list|,
name|unptn_data
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_1
argument_list|,
name|ptn_data_1
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_2
argument_list|,
name|ptn_data_2
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|unptn_locn
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_1
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b='1')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b='1'"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_2
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b='2')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b='2'"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_1
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned2 PARTITION(b='1')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned2 WHERE b='1'"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_2
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned2 PARTITION(b='2')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned2 WHERE b='2'"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|dbName
operator|+
literal|"_dupe"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
name|replDumpId
block|}
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b='1'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b='2'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned2 WHERE b='1'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned2 WHERE b='2'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_copy"
operator|+
literal|" AS SELECT a FROM "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_copy"
operator|+
literal|" LIKE "
operator|+
name|dbName
operator|+
literal|".ptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_copy"
operator|+
literal|" PARTITION(b='1') SELECT a FROM "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b='1'"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned_copy"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_copy"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"DROP TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned DROP PARTITION (b='2')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"DROP TABLE "
operator|+
name|dbName
operator|+
literal|".ptned2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|postDropReplDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|postDropReplDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dumped to {} with id {}->{}"
argument_list|,
name|postDropReplDumpLocn
argument_list|,
name|replDumpId
argument_list|,
name|postDropReplDumpId
argument_list|)
expr_stmt|;
comment|// Drop table after dump
name|run
argument_list|(
literal|"DROP TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_copy"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Drop partition after dump
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_copy DROP PARTITION(b='1')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|postDropReplDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|postDropReplDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Table
name|tbl
init|=
name|metaStoreClientMirror
operator|.
name|getTable
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"unptned"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|te
parameter_list|)
block|{
name|e
operator|=
name|te
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NoSuchObjectException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=2"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyIfTableNotExist
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"ptned2"
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned_copy"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_copy"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlters
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"alters"
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|testName
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned2(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) partitioned by (b string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned2(a string) partitioned by (b string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"thirteen"
block|,
literal|"fourteen"
block|,
literal|"fifteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"sixteen"
block|,
literal|"seventeen"
block|}
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
name|unptn_locn
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_unptn"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_1
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_ptn1"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_2
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_ptn2"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createTestDataFile
argument_list|(
name|unptn_locn
argument_list|,
name|unptn_data
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_1
argument_list|,
name|ptn_data_1
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_2
argument_list|,
name|ptn_data_2
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|unptn_locn
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|unptn_locn
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned2"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_1
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b='1')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b='1'"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_2
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b='2')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b='2'"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_1
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned2 PARTITION(b='1')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned2 WHERE b='1'"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_2
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned2 PARTITION(b='2')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned2 WHERE b='2'"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// base tables set up, let's replicate them over
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|dbName
operator|+
literal|"_dupe"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
name|replDumpId
block|}
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned2"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b='1'"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b='2'"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned2 WHERE b='1'"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned2 WHERE b='2'"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// tables have been replicated over, and verified to be identical. Now, we do a couple of
comment|// alters on the source
comment|// Rename unpartitioned table
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".unptned RENAME TO "
operator|+
name|dbName
operator|+
literal|".unptned_rn"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned_rn"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Alter unpartitioned table set table property
name|String
name|testKey
init|=
literal|"blah"
decl_stmt|;
name|String
name|testVal
init|=
literal|"foo"
decl_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".unptned2 SET TBLPROPERTIES ('"
operator|+
name|testKey
operator|+
literal|"' = '"
operator|+
name|testVal
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERIFY_SETUP_STEPS
condition|)
block|{
try|try
block|{
name|Table
name|unptn2
init|=
name|metaStoreClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
literal|"unptned2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|unptn2
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|testKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testVal
argument_list|,
name|unptn2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|testKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|assertNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// alter partitioned table, rename partition
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION (b='2') RENAME TO PARTITION (b='22')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=2"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=22"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// alter partitioned table set table property
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned SET TBLPROPERTIES ('"
operator|+
name|testKey
operator|+
literal|"' = '"
operator|+
name|testVal
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERIFY_SETUP_STEPS
condition|)
block|{
try|try
block|{
name|Table
name|ptned
init|=
name|metaStoreClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
literal|"ptned"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ptned
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|testKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testVal
argument_list|,
name|ptned
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|testKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|assertNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// alter partitioned table's partition set partition property
comment|// Note : No DDL way to alter a partition, so we use the MSC api directly.
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ptnVals1
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ptnVals1
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|Partition
name|ptn1
init|=
name|metaStoreClient
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
literal|"ptned"
argument_list|,
name|ptnVals1
argument_list|)
decl_stmt|;
name|ptn1
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|testKey
argument_list|,
name|testVal
argument_list|)
expr_stmt|;
name|metaStoreClient
operator|.
name|alter_partition
argument_list|(
name|dbName
argument_list|,
literal|"ptned"
argument_list|,
name|ptn1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|assertNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// rename partitioned table
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned2 WHERE b=2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned2 RENAME TO "
operator|+
name|dbName
operator|+
literal|".ptned2_rn"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned2_rn WHERE b=2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// All alters done, now we replicate them over.
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|postAlterReplDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|postAlterReplDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dumped to {} with id {}->{}"
argument_list|,
name|postAlterReplDumpLocn
argument_list|,
name|replDumpId
argument_list|,
name|postAlterReplDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|postAlterReplDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|postAlterReplDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Replication done, we now do the following verifications:
comment|// verify that unpartitioned table rename succeeded.
name|verifyIfTableNotExist
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"unptned"
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned_rn"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// verify that partition rename succeded.
try|try
block|{
name|Table
name|unptn2
init|=
name|metaStoreClientMirror
operator|.
name|getTable
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"unptned2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|unptn2
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|testKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testVal
argument_list|,
name|unptn2
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|testKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|te
parameter_list|)
block|{
name|assertNull
argument_list|(
name|te
argument_list|)
expr_stmt|;
block|}
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=2"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=22"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// verify that ptned table rename succeded.
name|verifyIfTableNotExist
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"ptned2"
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned2_rn WHERE b=2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// verify that ptned table property set worked
try|try
block|{
name|Table
name|ptned
init|=
name|metaStoreClientMirror
operator|.
name|getTable
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"ptned"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ptned
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|testKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testVal
argument_list|,
name|ptned
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|testKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|te
parameter_list|)
block|{
name|assertNull
argument_list|(
name|te
argument_list|)
expr_stmt|;
block|}
comment|// verify that partitioned table partition property set worked.
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ptnVals1
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ptnVals1
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|Partition
name|ptn1
init|=
name|metaStoreClientMirror
operator|.
name|getPartition
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"ptned"
argument_list|,
name|ptnVals1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ptn1
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|testKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testVal
argument_list|,
name|ptn1
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|testKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|te
parameter_list|)
block|{
name|assertNull
argument_list|(
name|te
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalLoad
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"incrementalLoad"
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|testName
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_empty(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_empty(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-Dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"thirteen"
block|,
literal|"fourteen"
block|,
literal|"fifteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"sixteen"
block|,
literal|"seventeen"
block|}
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
name|unptn_locn
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_unptn"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_1
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_ptn1"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_2
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_ptn2"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createTestDataFile
argument_list|(
name|unptn_locn
argument_list|,
name|unptn_data
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_1
argument_list|,
name|ptn_data_1
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_2
argument_list|,
name|ptn_data_2
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_empty"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned_empty"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|unptn_locn
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_late LIKE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_late SELECT * FROM "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned_late"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned_late"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned ADD PARTITION (b=1)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_1
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=1)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=1"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_2
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=2)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_late(a string) PARTITIONED BY (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_late PARTITION(b=1) SELECT a FROM "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=1"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_late WHERE b=1"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_late PARTITION(b=2) SELECT a FROM "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_late WHERE b=2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_late WHERE b=1"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_late WHERE b=2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=1"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned WHERE b=2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalInserts
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"incrementalInserts"
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|testName
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-Dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_late LIKE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_late SELECT * FROM "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned_late ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned_late ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned_late ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data_after_ins
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"thirteen"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|String
index|[]
name|data_after_ovwrite
init|=
operator|new
name|String
index|[]
block|{
literal|"hundred"
block|}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_late values('"
operator|+
name|unptn_data_after_ins
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned_late ORDER BY a"
argument_list|,
name|unptn_data_after_ins
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT OVERWRITE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|data_after_ovwrite
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|data_after_ovwrite
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned_late ORDER BY a"
argument_list|,
name|unptn_data_after_ins
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned"
argument_list|,
name|data_after_ovwrite
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEventTypesForDynamicAddPartitionByInsert
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|name
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDbName
init|=
name|dbName
operator|+
literal|"_dupe"
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|Tuple
name|bootstrap
init|=
name|bootstrapLoadAndVerify
argument_list|(
name|dbName
argument_list|,
name|replDbName
argument_list|)
decl_stmt|;
name|String
index|[]
name|ptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"ten"
block|}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=1) values('"
operator|+
name|ptn_data
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"DROP TABLE "
operator|+
name|dbName
operator|+
literal|".ptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Inject a behaviour where it throws exception if an INSERT event is found
comment|// As we dynamically add a partition through INSERT INTO cmd, it should just add ADD_PARTITION
comment|// event not an INSERT event
name|BehaviourInjection
argument_list|<
name|NotificationEventResponse
argument_list|,
name|NotificationEventResponse
argument_list|>
name|eventTypeValidator
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|NotificationEventResponse
argument_list|,
name|NotificationEventResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|NotificationEventResponse
name|apply
parameter_list|(
annotation|@
name|Nullable
name|NotificationEventResponse
name|eventsList
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|eventsList
condition|)
block|{
name|List
argument_list|<
name|NotificationEvent
argument_list|>
name|events
init|=
name|eventsList
operator|.
name|getEvents
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|events
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|NotificationEvent
name|event
init|=
name|events
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Skip all the events belong to other DBs/tables.
if|if
condition|(
name|event
operator|.
name|getDbName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|==
literal|"INSERT"
condition|)
block|{
comment|// If an insert event is found, then return null hence no event is dumped.
name|LOG
operator|.
name|error
argument_list|(
literal|"Encountered INSERT event when it was not expected to"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|eventsList
return|;
block|}
block|}
decl_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setGetNextNotificationBehaviour
argument_list|(
name|eventTypeValidator
argument_list|)
expr_stmt|;
name|incrementalLoadAndVerify
argument_list|(
name|dbName
argument_list|,
name|bootstrap
operator|.
name|lastReplId
argument_list|,
name|replDbName
argument_list|)
expr_stmt|;
name|eventTypeValidator
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|resetGetNextNotificationBehaviour
argument_list|()
expr_stmt|;
comment|// reset the behaviour
name|verifyIfTableNotExist
argument_list|(
name|replDbName
argument_list|,
literal|"ptned"
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalInsertToPartition
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"incrementalInsertToPartition"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|testName
operator|+
literal|"_"
operator|+
name|tid
decl_stmt|;
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-Dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"fourteen"
block|,
literal|"thirteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"seventeen"
block|,
literal|"sixteen"
block|}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|2
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned ADD PARTITION (b=2)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|2
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned where (b=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned where (b=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|String
index|[]
name|data_after_ovwrite
init|=
operator|new
name|String
index|[]
block|{
literal|"hundred"
block|}
decl_stmt|;
comment|// Insert overwrite on existing partition
name|run
argument_list|(
literal|"INSERT OVERWRITE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=2) values('"
operator|+
name|data_after_ovwrite
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned where (b=2)"
argument_list|,
name|data_after_ovwrite
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Insert overwrite on dynamic partition
name|run
argument_list|(
literal|"INSERT OVERWRITE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=3) values('"
operator|+
name|data_after_ovwrite
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned where (b=3)"
argument_list|,
name|data_after_ovwrite
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=2)"
argument_list|,
name|data_after_ovwrite
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=3)"
argument_list|,
name|data_after_ovwrite
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertToMultiKeyPartition
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"insertToMultiKeyPartition"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|testName
operator|+
literal|"_"
operator|+
name|tid
decl_stmt|;
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".namelist(name string) partitioned by (year int, month int, day int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"USE "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"abraham"
block|,
literal|"bob"
block|,
literal|"carter"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_year_1980
init|=
operator|new
name|String
index|[]
block|{
literal|"abraham"
block|,
literal|"bob"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_day_1
init|=
operator|new
name|String
index|[]
block|{
literal|"abraham"
block|,
literal|"carter"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_year_1984_month_4_day_1_1
init|=
operator|new
name|String
index|[]
block|{
literal|"carter"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_list_1
init|=
operator|new
name|String
index|[]
block|{
literal|"year=1980/month=4/day=1"
block|,
literal|"year=1980/month=5/day=5"
block|,
literal|"year=1984/month=4/day=1"
block|}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".namelist partition(year=1980,month=4,day=1) values('"
operator|+
name|ptn_data_1
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".namelist partition(year=1980,month=5,day=5) values('"
operator|+
name|ptn_data_1
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".namelist partition(year=1984,month=4,day=1) values('"
operator|+
name|ptn_data_1
index|[
literal|2
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|".namelist where (year=1980) ORDER BY name"
argument_list|,
name|ptn_year_1980
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|".namelist where (day=1) ORDER BY name"
argument_list|,
name|ptn_day_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|".namelist where (year=1984 and month=4 and day=1) ORDER BY name"
argument_list|,
name|ptn_year_1984_month_4_day_1_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|".namelist ORDER BY name"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SHOW PARTITIONS "
operator|+
name|dbName
operator|+
literal|".namelist"
argument_list|,
name|ptn_list_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRunWithPatternMatch
argument_list|(
literal|"SHOW TABLE EXTENDED LIKE namelist PARTITION (year=1980,month=4,day=1)"
argument_list|,
literal|"location"
argument_list|,
literal|"namelist/year=1980/month=4/day=1"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-Dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|"_dupe.namelist where (year=1980) ORDER BY name"
argument_list|,
name|ptn_year_1980
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|"_dupe.namelist where (day=1) ORDER BY name"
argument_list|,
name|ptn_day_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|"_dupe.namelist where (year=1984 and month=4 and day=1) ORDER BY name"
argument_list|,
name|ptn_year_1984_month_4_day_1_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|"_dupe.namelist ORDER BY name"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SHOW PARTITIONS "
operator|+
name|dbName
operator|+
literal|"_dupe.namelist"
argument_list|,
name|ptn_list_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"USE "
operator|+
name|dbName
operator|+
literal|"_dupe"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRunWithPatternMatch
argument_list|(
literal|"SHOW TABLE EXTENDED LIKE namelist PARTITION (year=1980,month=4,day=1)"
argument_list|,
literal|"location"
argument_list|,
literal|"namelist/year=1980/month=4/day=1"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"USE "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"abraham"
block|,
literal|"bob"
block|,
literal|"carter"
block|,
literal|"david"
block|,
literal|"eugene"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_year_1984_month_4_day_1_2
init|=
operator|new
name|String
index|[]
block|{
literal|"carter"
block|,
literal|"david"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_day_1_2
init|=
operator|new
name|String
index|[]
block|{
literal|"abraham"
block|,
literal|"carter"
block|,
literal|"david"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_list_2
init|=
operator|new
name|String
index|[]
block|{
literal|"year=1980/month=4/day=1"
block|,
literal|"year=1980/month=5/day=5"
block|,
literal|"year=1984/month=4/day=1"
block|,
literal|"year=1990/month=5/day=25"
block|}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".namelist partition(year=1984,month=4,day=1) values('"
operator|+
name|ptn_data_2
index|[
literal|3
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".namelist partition(year=1990,month=5,day=25) values('"
operator|+
name|ptn_data_2
index|[
literal|4
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|".namelist where (year=1980) ORDER BY name"
argument_list|,
name|ptn_year_1980
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|".namelist where (day=1) ORDER BY name"
argument_list|,
name|ptn_day_1_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|".namelist where (year=1984 and month=4 and day=1) ORDER BY name"
argument_list|,
name|ptn_year_1984_month_4_day_1_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|".namelist ORDER BY name"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SHOW PARTITIONS "
operator|+
name|dbName
operator|+
literal|".namelist"
argument_list|,
name|ptn_list_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRunWithPatternMatch
argument_list|(
literal|"SHOW TABLE EXTENDED LIKE namelist PARTITION (year=1990,month=5,day=25)"
argument_list|,
literal|"location"
argument_list|,
literal|"namelist/year=1990/month=5/day=25"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|"_dupe.namelist where (year=1980) ORDER BY name"
argument_list|,
name|ptn_year_1980
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|"_dupe.namelist where (day=1) ORDER BY name"
argument_list|,
name|ptn_day_1_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|"_dupe.namelist where (year=1984 and month=4 and day=1) ORDER BY name"
argument_list|,
name|ptn_year_1984_month_4_day_1_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|"_dupe.namelist ORDER BY name"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SHOW PARTITIONS "
operator|+
name|dbName
operator|+
literal|"_dupe.namelist"
argument_list|,
name|ptn_list_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"USE "
operator|+
name|dbName
operator|+
literal|"_dupe"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRunWithPatternMatch
argument_list|(
literal|"SHOW TABLE EXTENDED LIKE namelist PARTITION (year=1990,month=5,day=25)"
argument_list|,
literal|"location"
argument_list|,
literal|"namelist/year=1990/month=5/day=25"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"USE "
operator|+
name|dbName
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|String
index|[]
name|ptn_data_3
init|=
operator|new
name|String
index|[]
block|{
literal|"abraham"
block|,
literal|"bob"
block|,
literal|"carter"
block|,
literal|"david"
block|,
literal|"fisher"
block|}
decl_stmt|;
name|String
index|[]
name|data_after_ovwrite
init|=
operator|new
name|String
index|[]
block|{
literal|"fisher"
block|}
decl_stmt|;
comment|// Insert overwrite on existing partition
name|run
argument_list|(
literal|"INSERT OVERWRITE TABLE "
operator|+
name|dbName
operator|+
literal|".namelist partition(year=1990,month=5,day=25) values('"
operator|+
name|data_after_ovwrite
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|".namelist where (year=1990 and month=5 and day=25)"
argument_list|,
name|data_after_ovwrite
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|".namelist ORDER BY name"
argument_list|,
name|ptn_data_3
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|"_dupe.namelist where (year=1990 and month=5 and day=25)"
argument_list|,
name|data_after_ovwrite
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT name from "
operator|+
name|dbName
operator|+
literal|"_dupe.namelist ORDER BY name"
argument_list|,
name|ptn_data_3
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalInsertDropUnpartitionedTable
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"incrementalInsertDropUnpartitionedTable"
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|testName
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-Dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_tmp AS SELECT * FROM "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned_tmp ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Get the last repl ID corresponding to all insert/alter/create events except DROP.
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|lastDumpIdWithoutDrop
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|driver
argument_list|)
decl_stmt|;
comment|// Drop all the tables
name|run
argument_list|(
literal|"DROP TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"DROP TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_tmp"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyFail
argument_list|(
literal|"SELECT * FROM "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyFail
argument_list|(
literal|"SELECT * FROM "
operator|+
name|dbName
operator|+
literal|".unptned_tmp"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Dump all the events except DROP
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
operator|+
literal|" TO "
operator|+
name|lastDumpIdWithoutDrop
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
comment|// Need to find the tables and data as drop is not part of this dump
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned_tmp ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Dump the drop events and check if tables are getting dropped in target as well
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyFail
argument_list|(
literal|"SELECT * FROM "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyFail
argument_list|(
literal|"SELECT * FROM "
operator|+
name|dbName
operator|+
literal|".unptned_tmp"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalInsertDropPartitionedTable
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"incrementalInsertDropPartitionedTable"
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|testName
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) PARTITIONED BY (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-Dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"fourteen"
block|,
literal|"thirteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"seventeen"
block|,
literal|"sixteen"
block|}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|2
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned ADD PARTITION (b=20)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned RENAME PARTITION (b=20) TO PARTITION (b=2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|2
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned where (b=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_tmp AS SELECT * FROM "
operator|+
name|dbName
operator|+
literal|".ptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_tmp where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_tmp where (b=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Get the last repl ID corresponding to all insert/alter/create events except DROP.
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|lastDumpIdWithoutDrop
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|driver
argument_list|)
decl_stmt|;
comment|// Drop all the tables
name|run
argument_list|(
literal|"DROP TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_tmp"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"DROP TABLE "
operator|+
name|dbName
operator|+
literal|".ptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyFail
argument_list|(
literal|"SELECT * FROM "
operator|+
name|dbName
operator|+
literal|".ptned_tmp"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyFail
argument_list|(
literal|"SELECT * FROM "
operator|+
name|dbName
operator|+
literal|".ptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Dump all the events except DROP
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
operator|+
literal|" TO "
operator|+
name|lastDumpIdWithoutDrop
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
comment|// Need to find the tables and data as drop is not part of this dump
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_tmp where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_tmp where (b=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Dump the drop events and check if tables are getting dropped in target as well
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyFail
argument_list|(
literal|"SELECT * FROM "
operator|+
name|dbName
operator|+
literal|".ptned_tmp"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyFail
argument_list|(
literal|"SELECT * FROM "
operator|+
name|dbName
operator|+
literal|".ptned"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertOverwriteOnUnpartitionedTableWithCM
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"insertOverwriteOnUnpartitionedTableWithCM"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|testName
operator|+
literal|"_"
operator|+
name|tid
decl_stmt|;
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-Dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// After INSERT INTO operation, get the last Repl ID
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"thirteen"
block|}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|insertDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|driver
argument_list|)
decl_stmt|;
comment|// Insert overwrite on unpartitioned table
name|String
index|[]
name|data_after_ovwrite
init|=
operator|new
name|String
index|[]
block|{
literal|"hundred"
block|}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT OVERWRITE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|data_after_ovwrite
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Dump only one INSERT INTO operation on the table.
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
operator|+
literal|" TO "
operator|+
name|insertDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
comment|// After Load from this dump, all target tables/partitions will have initial set of data but source will have latest data.
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Dump the remaining INSERT OVERWRITE operations on the table.
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
comment|// After load, shall see the overwritten data.
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned ORDER BY a"
argument_list|,
name|data_after_ovwrite
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertOverwriteOnPartitionedTableWithCM
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"insertOverwriteOnPartitionedTableWithCM"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|testName
operator|+
literal|"_"
operator|+
name|tid
decl_stmt|;
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-Dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// INSERT INTO 2 partitions and get the last repl ID
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"fourteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"sixteen"
block|}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|insertDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|driver
argument_list|)
decl_stmt|;
comment|// Insert overwrite on one partition with multiple files
name|String
index|[]
name|data_after_ovwrite
init|=
operator|new
name|String
index|[]
block|{
literal|"hundred"
block|}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT OVERWRITE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=2) values('"
operator|+
name|data_after_ovwrite
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned where (b=2)"
argument_list|,
name|data_after_ovwrite
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Dump only 2 INSERT INTO operations.
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
operator|+
literal|" TO "
operator|+
name|insertDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
comment|// After Load from this dump, all target tables/partitions will have initial set of data.
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Dump the remaining INSERT OVERWRITE operation on the table.
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
comment|// After load, shall see the overwritten data.
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=2) ORDER BY a"
argument_list|,
name|data_after_ovwrite
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRenameTableWithCM
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"renameTableWithCM"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|testName
operator|+
literal|"_"
operator|+
name|tid
decl_stmt|;
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-Dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"ten"
block|,
literal|"twenty"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"fourteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"seventeen"
block|}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned ADD PARTITION (b=2)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Get the last repl ID corresponding to all insert events except RENAME.
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|lastDumpIdWithoutRename
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".unptned RENAME TO "
operator|+
name|dbName
operator|+
literal|".unptned_renamed"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned RENAME TO "
operator|+
name|dbName
operator|+
literal|".ptned_renamed"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
operator|+
literal|" TO "
operator|+
name|lastDumpIdWithoutRename
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyFail
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned ORDER BY a"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyFail
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=1) ORDER BY a"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned_renamed ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_renamed where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_renamed where (b=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRenamePartitionWithCM
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"renamePartitionWithCM"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|testName
operator|+
literal|"_"
operator|+
name|tid
decl_stmt|;
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-Dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"fourteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"seventeen"
block|}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned ADD PARTITION (b=2)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Get the last repl ID corresponding to all insert events except RENAME.
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|lastDumpIdWithoutRename
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION (b=2) RENAME TO PARTITION (b=10)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
operator|+
literal|" TO "
operator|+
name|lastDumpIdWithoutRename
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=10) ORDER BY a"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=10) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where (b=2) ORDER BY a"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testViewsReplication
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"viewsReplication"
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|testName
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE VIEW "
operator|+
name|dbName
operator|+
literal|".virtual_view AS SELECT * FROM "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"thirteen"
block|,
literal|"fourteen"
block|,
literal|"fifteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"sixteen"
block|,
literal|"seventeen"
block|}
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
name|unptn_locn
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_unptn"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_1
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_ptn1"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|ptn_locn_2
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
argument_list|,
name|testName
operator|+
literal|"_ptn2"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|createTestDataFile
argument_list|(
name|unptn_locn
argument_list|,
name|unptn_data
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_1
argument_list|,
name|ptn_data_1
argument_list|)
expr_stmt|;
name|createTestDataFile
argument_list|(
name|ptn_locn_2
argument_list|,
name|ptn_data_2
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".virtual_view"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|unptn_locn
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".virtual_view"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_1
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=1)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=1"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|ptn_locn_2
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=2)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned WHERE b=2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE MATERIALIZED VIEW "
operator|+
name|dbName
operator|+
literal|".mat_view AS SELECT a FROM "
operator|+
name|dbName
operator|+
literal|".ptned where b=1"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".mat_view"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// view is referring to old database, so no data
name|verifyRun
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.virtual_view"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.mat_view"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE VIEW "
operator|+
name|dbName
operator|+
literal|".virtual_view2 AS SELECT a FROM "
operator|+
name|dbName
operator|+
literal|".ptned where b=2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".virtual_view2"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Create a view with name already exist. Just to verify if failure flow clears the added create_table event.
name|run
argument_list|(
literal|"CREATE VIEW "
operator|+
name|dbName
operator|+
literal|".virtual_view2 AS SELECT a FROM "
operator|+
name|dbName
operator|+
literal|".ptned where b=2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE MATERIALIZED VIEW "
operator|+
name|dbName
operator|+
literal|".mat_view2 AS SELECT * FROM "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".mat_view2"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Perform REPL-DUMP/LOAD
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-dump: Dumped to {} with id {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|dbName
operator|+
literal|"_dupe"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
name|incrementalDumpId
block|}
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned where b=1"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// view is referring to old database, so no data
name|verifyRun
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.virtual_view"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.mat_view"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// view is referring to old database, so no data
name|verifyRun
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.virtual_view2"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.mat_view2"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Test "alter table" with rename
name|run
argument_list|(
literal|"ALTER VIEW "
operator|+
name|dbName
operator|+
literal|".virtual_view RENAME TO "
operator|+
name|dbName
operator|+
literal|".virtual_view_rename"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|".virtual_view_rename"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Perform REPL-DUMP/LOAD
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|incrementalDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-dump: Dumped to {} with id {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT * from "
operator|+
name|dbName
operator|+
literal|"_dupe.virtual_view_rename"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Test "alter table" with schema change
name|run
argument_list|(
literal|"ALTER VIEW "
operator|+
name|dbName
operator|+
literal|".virtual_view_rename AS SELECT a, concat(a, '_') as a_ FROM "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SHOW COLUMNS FROM "
operator|+
name|dbName
operator|+
literal|".virtual_view_rename"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"a_"
block|}
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Perform REPL-DUMP/LOAD
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|incrementalDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-dump: Dumped to {} with id {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SHOW COLUMNS FROM "
operator|+
name|dbName
operator|+
literal|"_dupe.virtual_view_rename"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"a_"
block|}
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDumpLimit
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|name
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-Dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"thirteen"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|String
index|[]
name|unptn_data_load1
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|}
decl_stmt|;
name|String
index|[]
name|unptn_data_load2
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"thirteen"
block|}
decl_stmt|;
comment|// 3 events to insert, last repl ID: replDumpId+3
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// 3 events to insert, last repl ID: replDumpId+6
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// 3 events to insert, last repl ID: replDumpId+9
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|2
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
operator|+
literal|" LIMIT 3"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned ORDER BY a"
argument_list|,
name|unptn_data_load1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|Integer
name|lastReplID
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|replDumpId
argument_list|)
decl_stmt|;
name|lastReplID
operator|+=
literal|1000
expr_stmt|;
name|String
name|toReplID
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|lastReplID
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
operator|+
literal|" TO "
operator|+
name|toReplID
operator|+
literal|" LIMIT 3"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned ORDER BY a"
argument_list|,
name|unptn_data_load2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExchangePartition
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"exchangePartition"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|testName
operator|+
literal|"_"
operator|+
name|tid
decl_stmt|;
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_src(a string) partitioned by (b int, c int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_dest(a string) partitioned by (b int, c int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"fourteen"
block|,
literal|"thirteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"seventeen"
block|,
literal|"sixteen"
block|}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_src partition(b=1, c=1) values('"
operator|+
name|ptn_data_1
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_src partition(b=1, c=1) values('"
operator|+
name|ptn_data_1
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_src partition(b=1, c=1) values('"
operator|+
name|ptn_data_1
index|[
literal|2
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_src ADD PARTITION (b=2, c=2)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_src partition(b=2, c=2) values('"
operator|+
name|ptn_data_2
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_src partition(b=2, c=2) values('"
operator|+
name|ptn_data_2
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_src partition(b=2, c=2) values('"
operator|+
name|ptn_data_2
index|[
literal|2
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_src partition(b=2, c=3) values('"
operator|+
name|ptn_data_2
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_src partition(b=2, c=3) values('"
operator|+
name|ptn_data_2
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_src partition(b=2, c=3) values('"
operator|+
name|ptn_data_2
index|[
literal|2
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_src where (b=1 and c=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_src where (b=2 and c=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_src where (b=2 and c=3) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-Dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_src where (b=1 and c=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_src where (b=2 and c=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_src where (b=2 and c=3) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_src where (b=1 and c=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_src where (b=2 and c=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_src where (b=2 and c=3) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_dest where (b=1 and c=1)"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_dest where (b=2 and c=2)"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_dest where (b=2 and c=3)"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Exchange single partitions using complete partition-spec (all partition columns)
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_dest EXCHANGE PARTITION (b=1, c=1) WITH TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_src"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_src where (b=1 and c=1)"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_src where (b=2 and c=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_src where (b=2 and c=3) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_dest where (b=1 and c=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_dest where (b=2 and c=2)"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_dest where (b=2 and c=3)"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_src where (b=1 and c=1)"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_src where (b=2 and c=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_src where (b=2 and c=3) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_dest where (b=1 and c=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_dest where (b=2 and c=2)"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_dest where (b=2 and c=3)"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Exchange multiple partitions using partial partition-spec (only one partition column)
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_dest EXCHANGE PARTITION (b=2) WITH TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_src"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_src where (b=1 and c=1)"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_src where (b=2 and c=2)"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_src where (b=2 and c=3)"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_dest where (b=1 and c=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_dest where (b=2 and c=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_dest where (b=2 and c=3) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_src where (b=1 and c=1)"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_src where (b=2 and c=2)"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_src where (b=2 and c=3)"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_dest where (b=1 and c=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_dest where (b=2 and c=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_dest where (b=2 and c=3) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTruncateTable
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"truncateTable"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|testName
operator|+
literal|"_"
operator|+
name|tid
decl_stmt|;
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-Dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"TRUNCATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data_after_ins
init|=
operator|new
name|String
index|[]
block|{
literal|"thirteen"
block|}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data_after_ins
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned ORDER BY a"
argument_list|,
name|unptn_data_after_ins
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned ORDER BY a"
argument_list|,
name|unptn_data_after_ins
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned ORDER BY a"
argument_list|,
name|unptn_data_after_ins
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTruncatePartitionedTable
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"truncatePartitionedTable"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|testName
operator|+
literal|"_"
operator|+
name|tid
decl_stmt|;
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_1(a string) PARTITIONED BY (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_2(a string) PARTITIONED BY (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"fourteen"
block|,
literal|"thirteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"seventeen"
block|,
literal|"sixteen"
block|}
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_1 PARTITION(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_1 PARTITION(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_1 PARTITION(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|2
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_1 PARTITION(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_1 PARTITION(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_1 PARTITION(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|2
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_2 PARTITION(b=10) values('"
operator|+
name|ptn_data_1
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_2 PARTITION(b=10) values('"
operator|+
name|ptn_data_1
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_2 PARTITION(b=10) values('"
operator|+
name|ptn_data_1
index|[
literal|2
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_2 PARTITION(b=20) values('"
operator|+
name|ptn_data_2
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_2 PARTITION(b=20) values('"
operator|+
name|ptn_data_2
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_2 PARTITION(b=20) values('"
operator|+
name|ptn_data_2
index|[
literal|2
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_1 where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_1 where (b=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_2 where (b=10) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_2 where (b=20) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-Dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_1 where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_1 where (b=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_2 where (b=10) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_2 where (b=20) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"TRUNCATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_1 PARTITION(b=2)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_1 where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_1 where (b=2)"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"TRUNCATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_2 where (b=10)"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".ptned_2 where (b=20)"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_1 where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_1 where (b=2)"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_2 where (b=10)"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifySetup
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.ptned_2 where (b=20)"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTruncateWithCM
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"truncateWithCM"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|testName
operator|+
literal|"_"
operator|+
name|tid
decl_stmt|;
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bootstrap-Dump: Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"thirteen"
block|}
decl_stmt|;
name|String
index|[]
name|unptn_data_load1
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|}
decl_stmt|;
name|String
index|[]
name|unptn_data_load2
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"thirteen"
block|}
decl_stmt|;
comment|// 3 events to insert, last repl ID: replDumpId+3
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// 3 events to insert, last repl ID: replDumpId+6
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// 1 event to truncate, last repl ID: replDumpId+8
name|run
argument_list|(
literal|"TRUNCATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned ORDER BY a"
argument_list|,
name|empty
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// 3 events to insert, last repl ID: replDumpId+11
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data_load1
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned ORDER BY a"
argument_list|,
name|unptn_data_load1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Dump and load only first insert (1 record)
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
operator|+
literal|" LIMIT 3"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|".unptned ORDER BY a"
argument_list|,
name|unptn_data_load1
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned ORDER BY a"
argument_list|,
name|unptn_data_load1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Dump and load only second insert (2 records)
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|Integer
name|lastReplID
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|replDumpId
argument_list|)
decl_stmt|;
name|lastReplID
operator|+=
literal|1000
expr_stmt|;
name|String
name|toReplID
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|lastReplID
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
operator|+
literal|" TO "
operator|+
name|toReplID
operator|+
literal|" LIMIT 3"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned ORDER BY a"
argument_list|,
name|unptn_data_load2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Dump and load only truncate (0 records)
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
operator|+
literal|" LIMIT 2"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned ORDER BY a"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Dump and load insert after truncate (1 record)
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incremental-Dump: Dumped to {} with id {} from {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|replDumpId
operator|=
name|incrementalDumpId
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|dbName
operator|+
literal|"_dupe.unptned ORDER BY a"
argument_list|,
name|unptn_data_load1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalRepeatEventOnExistingObject
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"incrementalRepeatEventOnExistingObject"
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|testName
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) PARTITIONED BY (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Bootstrap dump/load
name|String
name|replDbName
init|=
name|dbName
operator|+
literal|"_dupe"
decl_stmt|;
name|Tuple
name|bootstrapDump
init|=
name|bootstrapLoadAndVerify
argument_list|(
name|dbName
argument_list|,
name|replDbName
argument_list|)
decl_stmt|;
comment|// List to maintain the incremental dumps for each operation
name|List
argument_list|<
name|Tuple
argument_list|>
name|incrementalDumpList
init|=
operator|new
name|ArrayList
argument_list|<
name|Tuple
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"ten"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"seventeen"
block|}
decl_stmt|;
comment|// INSERT EVENT to unpartitioned table
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|Tuple
name|replDump
init|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|bootstrapDump
argument_list|)
decl_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// INSERT EVENT to partitioned table with dynamic ADD_PARTITION
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// ADD_PARTITION EVENT to partitioned table
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned ADD PARTITION (b=2)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// INSERT EVENT to partitioned table on existing partition
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// TRUNCATE_PARTITION EVENT on partitioned table
name|run
argument_list|(
literal|"TRUNCATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION (b=1)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// TRUNCATE_TABLE EVENT on unpartitioned table
name|run
argument_list|(
literal|"TRUNCATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// CREATE_TABLE EVENT with multiple partitions
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_tmp AS SELECT * FROM "
operator|+
name|dbName
operator|+
literal|".ptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// ADD_CONSTRAINT EVENT
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".unptned_tmp ADD CONSTRAINT uk_unptned UNIQUE(a) disable"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// Replicate all the events happened so far
name|Tuple
name|incrDump
init|=
name|incrementalLoadAndVerify
argument_list|(
name|dbName
argument_list|,
name|bootstrapDump
operator|.
name|lastReplId
argument_list|,
name|replDbName
argument_list|)
decl_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|replDbName
operator|+
literal|".unptned ORDER BY a"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|replDbName
operator|+
literal|".ptned where (b=1) ORDER BY a"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|replDbName
operator|+
literal|".ptned where (b=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|replDbName
operator|+
literal|".unptned_tmp where (b=1) ORDER BY a"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|replDbName
operator|+
literal|".unptned_tmp where (b=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Load each incremental dump from the list. Each dump have only one operation.
for|for
control|(
name|Tuple
name|currDump
range|:
name|incrementalDumpList
control|)
block|{
comment|// Load the incremental dump and ensure it does nothing and lastReplID remains same
name|loadAndVerify
argument_list|(
name|replDbName
argument_list|,
name|currDump
operator|.
name|dumpLocation
argument_list|,
name|incrDump
operator|.
name|lastReplId
argument_list|)
expr_stmt|;
comment|// Verify if the data are intact even after applying an applied event once again on existing objects
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|replDbName
operator|+
literal|".unptned ORDER BY a"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|replDbName
operator|+
literal|".ptned where (b=1) ORDER BY a"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|replDbName
operator|+
literal|".ptned where (b=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|replDbName
operator|+
literal|".unptned_tmp where (b=1) ORDER BY a"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|replDbName
operator|+
literal|".unptned_tmp where (b=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalRepeatEventOnMissingObject
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"incrementalRepeatEventOnMissingObject"
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|testName
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) PARTITIONED BY (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Bootstrap dump/load
name|String
name|replDbName
init|=
name|dbName
operator|+
literal|"_dupe"
decl_stmt|;
name|Tuple
name|bootstrapDump
init|=
name|bootstrapLoadAndVerify
argument_list|(
name|dbName
argument_list|,
name|replDbName
argument_list|)
decl_stmt|;
comment|// List to maintain the incremental dumps for each operation
name|List
argument_list|<
name|Tuple
argument_list|>
name|incrementalDumpList
init|=
operator|new
name|ArrayList
argument_list|<
name|Tuple
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"ten"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"seventeen"
block|}
decl_stmt|;
comment|// INSERT EVENT to unpartitioned table
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|Tuple
name|replDump
init|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|bootstrapDump
argument_list|)
decl_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// INSERT EVENT to partitioned table with dynamic ADD_PARTITION
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// ADD_PARTITION EVENT to partitioned table
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned ADD PARTITION (b=2)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// INSERT EVENT to partitioned table on existing partition
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned partition(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// TRUNCATE_PARTITION EVENT on partitioned table
name|run
argument_list|(
literal|"TRUNCATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=1)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// TRUNCATE_TABLE EVENT on unpartitioned table
name|run
argument_list|(
literal|"TRUNCATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// CREATE_TABLE EVENT on partitioned table
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_tmp (a string) PARTITIONED BY (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// INSERT EVENT to partitioned table with dynamic ADD_PARTITION
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_tmp partition(b=10) values('"
operator|+
name|ptn_data_1
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// INSERT EVENT to partitioned table with dynamic ADD_PARTITION
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_tmp partition(b=20) values('"
operator|+
name|ptn_data_2
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// DROP_PARTITION EVENT to partitioned table
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned DROP PARTITION (b=1)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// RENAME_PARTITION EVENT to partitioned table
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION (b=2) RENAME TO PARTITION (b=20)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// RENAME_TABLE EVENT to unpartitioned table
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".unptned RENAME TO "
operator|+
name|dbName
operator|+
literal|".unptned_new"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// ADD_CONSTRAINT EVENT
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_tmp ADD CONSTRAINT uk_unptned UNIQUE(a) disable"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// DROP_TABLE EVENT to partitioned table
name|run
argument_list|(
literal|"DROP TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_tmp"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|replDump
operator|=
name|dumpDbFromLastDump
argument_list|(
name|dbName
argument_list|,
name|replDump
argument_list|)
expr_stmt|;
name|incrementalDumpList
operator|.
name|add
argument_list|(
name|replDump
argument_list|)
expr_stmt|;
comment|// Replicate all the events happened so far
name|Tuple
name|incrDump
init|=
name|incrementalLoadAndVerify
argument_list|(
name|dbName
argument_list|,
name|bootstrapDump
operator|.
name|lastReplId
argument_list|,
name|replDbName
argument_list|)
decl_stmt|;
name|verifyIfTableNotExist
argument_list|(
name|replDbName
argument_list|,
literal|"unptned"
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyIfTableNotExist
argument_list|(
name|replDbName
argument_list|,
literal|"ptned_tmp"
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyIfTableExist
argument_list|(
name|replDbName
argument_list|,
literal|"unptned_new"
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyIfTableExist
argument_list|(
name|replDbName
argument_list|,
literal|"ptned"
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyIfPartitionNotExist
argument_list|(
name|replDbName
argument_list|,
literal|"ptned"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyIfPartitionNotExist
argument_list|(
name|replDbName
argument_list|,
literal|"ptned"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyIfPartitionExist
argument_list|(
name|replDbName
argument_list|,
literal|"ptned"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"20"
argument_list|)
argument_list|)
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
comment|// Load each incremental dump from the list. Each dump have only one operation.
for|for
control|(
name|Tuple
name|currDump
range|:
name|incrementalDumpList
control|)
block|{
comment|// Load the current incremental dump and ensure it does nothing and lastReplID remains same
name|loadAndVerify
argument_list|(
name|replDbName
argument_list|,
name|currDump
operator|.
name|dumpLocation
argument_list|,
name|incrDump
operator|.
name|lastReplId
argument_list|)
expr_stmt|;
comment|// Verify if the data are intact even after applying an applied event once again on missing objects
name|verifyIfTableNotExist
argument_list|(
name|replDbName
argument_list|,
literal|"unptned"
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyIfTableNotExist
argument_list|(
name|replDbName
argument_list|,
literal|"ptned_tmp"
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyIfTableExist
argument_list|(
name|replDbName
argument_list|,
literal|"unptned_new"
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyIfTableExist
argument_list|(
name|replDbName
argument_list|,
literal|"ptned"
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyIfPartitionNotExist
argument_list|(
name|replDbName
argument_list|,
literal|"ptned"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyIfPartitionNotExist
argument_list|(
name|replDbName
argument_list|,
literal|"ptned"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
name|verifyIfPartitionExist
argument_list|(
name|replDbName
argument_list|,
literal|"ptned"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"20"
argument_list|)
argument_list|)
argument_list|,
name|metaStoreClientMirror
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcatenateTable
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"concatenateTable"
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|testName
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".unptned(a string) STORED AS ORC"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
index|[]
name|unptn_data
init|=
operator|new
name|String
index|[]
block|{
literal|"eleven"
block|,
literal|"twelve"
block|}
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Bootstrap dump/load
name|String
name|replDbName
init|=
name|dbName
operator|+
literal|"_dupe"
decl_stmt|;
name|Tuple
name|bootstrapDump
init|=
name|bootstrapLoadAndVerify
argument_list|(
name|dbName
argument_list|,
name|replDbName
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".unptned values('"
operator|+
name|unptn_data
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".unptned CONCATENATE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Replicate all the events happened after bootstrap
name|Tuple
name|incrDump
init|=
name|incrementalLoadAndVerify
argument_list|(
name|dbName
argument_list|,
name|bootstrapDump
operator|.
name|lastReplId
argument_list|,
name|replDbName
argument_list|)
decl_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|replDbName
operator|+
literal|".unptned ORDER BY a"
argument_list|,
name|unptn_data
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcatenatePartitionedTable
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"concatenatePartitionedTable"
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|testName
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) PARTITIONED BY (b int) STORED AS ORC"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"fourteen"
block|,
literal|"thirteen"
block|}
decl_stmt|;
name|String
index|[]
name|ptn_data_2
init|=
operator|new
name|String
index|[]
block|{
literal|"fifteen"
block|,
literal|"seventeen"
block|,
literal|"sixteen"
block|}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Bootstrap dump/load
name|String
name|replDbName
init|=
name|dbName
operator|+
literal|"_dupe"
decl_stmt|;
name|Tuple
name|bootstrapDump
init|=
name|bootstrapLoadAndVerify
argument_list|(
name|dbName
argument_list|,
name|replDbName
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|2
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|1
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=2) values('"
operator|+
name|ptn_data_2
index|[
literal|2
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=2) CONCATENATE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Replicate all the events happened so far
name|Tuple
name|incrDump
init|=
name|incrementalLoadAndVerify
argument_list|(
name|dbName
argument_list|,
name|bootstrapDump
operator|.
name|lastReplId
argument_list|,
name|replDbName
argument_list|)
decl_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|replDbName
operator|+
literal|".ptned where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|replDbName
operator|+
literal|".ptned where (b=2) ORDER BY a"
argument_list|,
name|ptn_data_2
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalLoadFailAndRetry
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"incrementalLoadFailAndRetry"
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|testName
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) PARTITIONED BY (b int) STORED AS TEXTFILE"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Bootstrap dump/load
name|String
name|replDbName
init|=
name|dbName
operator|+
literal|"_dupe"
decl_stmt|;
name|Tuple
name|bootstrapDump
init|=
name|bootstrapLoadAndVerify
argument_list|(
name|dbName
argument_list|,
name|replDbName
argument_list|)
decl_stmt|;
comment|// Prefixed with incrementalLoadFailAndRetry to avoid finding entry in cmpath
name|String
index|[]
name|ptn_data_1
init|=
operator|new
name|String
index|[]
block|{
literal|"incrementalLoadFailAndRetry_fifteen"
block|}
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|run
argument_list|(
literal|"INSERT INTO TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION(b=1) values('"
operator|+
name|ptn_data_1
index|[
literal|0
index|]
operator|+
literal|"')"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_tmp AS SELECT * FROM "
operator|+
name|dbName
operator|+
literal|".ptned"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
comment|// Move the data files of this newly created partition to a temp location
name|Partition
name|ptn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ptn
operator|=
name|metaStoreClient
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
literal|"ptned"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
assert|assert
operator|(
literal|false
operator|)
assert|;
block|}
name|Path
name|ptnLoc
init|=
operator|new
name|Path
argument_list|(
name|ptn
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|tmpLoc
init|=
operator|new
name|Path
argument_list|(
name|TEST_PATH
operator|+
literal|"/incrementalLoadFailAndRetry"
argument_list|)
decl_stmt|;
name|FileSystem
name|dataFs
init|=
name|ptnLoc
operator|.
name|getFileSystem
argument_list|(
name|hconf
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|dataFs
operator|.
name|rename
argument_list|(
name|ptnLoc
argument_list|,
name|tmpLoc
argument_list|)
operator|)
assert|;
comment|// Replicate all the events happened so far. It should fail as the data files missing in
comment|// original path and not available in CM as well.
name|Tuple
name|incrDump
init|=
name|replDumpDb
argument_list|(
name|dbName
argument_list|,
name|bootstrapDump
operator|.
name|lastReplId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|verifyFail
argument_list|(
literal|"REPL LOAD "
operator|+
name|replDbName
operator|+
literal|" FROM '"
operator|+
name|incrDump
operator|.
name|dumpLocation
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|replDbName
operator|+
literal|".ptned where (b=1) ORDER BY a"
argument_list|,
name|empty
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyFail
argument_list|(
literal|"SELECT a from "
operator|+
name|replDbName
operator|+
literal|".ptned_tmp where (b=1) ORDER BY a"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Move the files back to original data location
assert|assert
operator|(
name|dataFs
operator|.
name|rename
argument_list|(
name|tmpLoc
argument_list|,
name|ptnLoc
argument_list|)
operator|)
assert|;
name|loadAndVerify
argument_list|(
name|replDbName
argument_list|,
name|incrDump
operator|.
name|dumpLocation
argument_list|,
name|incrDump
operator|.
name|lastReplId
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|replDbName
operator|+
literal|".ptned where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"SELECT a from "
operator|+
name|replDbName
operator|+
literal|".ptned_tmp where (b=1) ORDER BY a"
argument_list|,
name|ptn_data_1
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|createDB
argument_list|(
name|name
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|lastReplDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|lastReplDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|lastReplDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// Bootstrap done, now on to incremental. First, we test db-level REPL LOADs.
comment|// Both db-level and table-level repl.last.id must be updated.
name|lastReplDumpId
operator|=
name|verifyAndReturnDbReplStatus
argument_list|(
name|dbName
argument_list|,
literal|"ptned"
argument_list|,
name|lastReplDumpId
argument_list|,
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|lastReplDumpId
operator|=
name|verifyAndReturnDbReplStatus
argument_list|(
name|dbName
argument_list|,
literal|"ptned"
argument_list|,
name|lastReplDumpId
argument_list|,
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned ADD PARTITION (b=1)"
argument_list|)
expr_stmt|;
name|lastReplDumpId
operator|=
name|verifyAndReturnDbReplStatus
argument_list|(
name|dbName
argument_list|,
literal|"ptned"
argument_list|,
name|lastReplDumpId
argument_list|,
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned PARTITION (b=1) RENAME TO PARTITION (b=11)"
argument_list|)
expr_stmt|;
name|lastReplDumpId
operator|=
name|verifyAndReturnDbReplStatus
argument_list|(
name|dbName
argument_list|,
literal|"ptned"
argument_list|,
name|lastReplDumpId
argument_list|,
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned SET TBLPROPERTIES ('blah'='foo')"
argument_list|)
expr_stmt|;
name|lastReplDumpId
operator|=
name|verifyAndReturnDbReplStatus
argument_list|(
name|dbName
argument_list|,
literal|"ptned_rn"
argument_list|,
name|lastReplDumpId
argument_list|,
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned RENAME TO  "
operator|+
name|dbName
operator|+
literal|".ptned_rn"
argument_list|)
expr_stmt|;
name|lastReplDumpId
operator|=
name|verifyAndReturnDbReplStatus
argument_list|(
name|dbName
argument_list|,
literal|"ptned_rn"
argument_list|,
name|lastReplDumpId
argument_list|,
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_rn DROP PARTITION (b=11)"
argument_list|)
expr_stmt|;
name|lastReplDumpId
operator|=
name|verifyAndReturnDbReplStatus
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
name|lastReplDumpId
argument_list|,
literal|"DROP TABLE "
operator|+
name|dbName
operator|+
literal|".ptned_rn"
argument_list|)
expr_stmt|;
comment|// DB-level REPL LOADs testing done, now moving on to table level repl loads.
comment|// In each of these cases, the table-level repl.last.id must move forward, but the
comment|// db-level last.repl.id must not.
name|String
name|lastTblReplDumpId
init|=
name|lastReplDumpId
decl_stmt|;
name|lastTblReplDumpId
operator|=
name|verifyAndReturnTblReplStatus
argument_list|(
name|dbName
argument_list|,
literal|"ptned2"
argument_list|,
name|lastReplDumpId
argument_list|,
name|lastTblReplDumpId
argument_list|,
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".ptned2(a string) partitioned by (b int) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|lastTblReplDumpId
operator|=
name|verifyAndReturnTblReplStatus
argument_list|(
name|dbName
argument_list|,
literal|"ptned2"
argument_list|,
name|lastReplDumpId
argument_list|,
name|lastTblReplDumpId
argument_list|,
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned2 ADD PARTITION (b=1)"
argument_list|)
expr_stmt|;
name|lastTblReplDumpId
operator|=
name|verifyAndReturnTblReplStatus
argument_list|(
name|dbName
argument_list|,
literal|"ptned2"
argument_list|,
name|lastReplDumpId
argument_list|,
name|lastTblReplDumpId
argument_list|,
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned2 PARTITION (b=1) RENAME TO PARTITION (b=11)"
argument_list|)
expr_stmt|;
name|lastTblReplDumpId
operator|=
name|verifyAndReturnTblReplStatus
argument_list|(
name|dbName
argument_list|,
literal|"ptned2"
argument_list|,
name|lastReplDumpId
argument_list|,
name|lastTblReplDumpId
argument_list|,
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned2 SET TBLPROPERTIES ('blah'='foo')"
argument_list|)
expr_stmt|;
comment|// Note : Not testing table rename because table rename replication is not supported for table-level repl.
name|String
name|finalTblReplDumpId
init|=
name|verifyAndReturnTblReplStatus
argument_list|(
name|dbName
argument_list|,
literal|"ptned2"
argument_list|,
name|lastReplDumpId
argument_list|,
name|lastTblReplDumpId
argument_list|,
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".ptned2 DROP PARTITION (b=11)"
argument_list|)
decl_stmt|;
comment|/*     Comparisons using Strings for event Ids is wrong. This should be numbers since lexical string comparison     and numeric comparision differ. This requires a broader change where we return the dump Id as long and not string     fixing this here for now as it was observed in one of the builds where "1001".compareTo("998") results     in failure of the assertion below.      */
name|assertTrue
argument_list|(
operator|new
name|Long
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|finalTblReplDumpId
argument_list|)
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|lastTblReplDumpId
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// TODO : currently not testing the following scenarios:
comment|//   a) Multi-db wh-level REPL LOAD - need to add that
comment|//   b) Insert into tables - quite a few cases need to be enumerated there, including dyn adds.
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConstraints
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"constraints"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|testName
operator|+
literal|"_"
operator|+
name|tid
decl_stmt|;
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".tbl1(a string, b string, primary key (a) disable novalidate rely, unique (b) disable)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".tbl2(a string, b string, foreign key (a, b) references "
operator|+
name|dbName
operator|+
literal|".tbl1(a, b) disable novalidate)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".tbl3(a string, b string not null disable)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|replDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|replDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dumped to {} with id {}"
argument_list|,
name|replDumpLocn
argument_list|,
name|replDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|replDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
comment|// bootstrap replication for constraint is not implemented. Will verify it works once done
try|try
block|{
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pks
init|=
name|metaStoreClientMirror
operator|.
name|getPrimaryKeys
argument_list|(
operator|new
name|PrimaryKeysRequest
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"tbl1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pks
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uks
init|=
name|metaStoreClientMirror
operator|.
name|getUniqueConstraints
argument_list|(
operator|new
name|UniqueConstraintsRequest
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"tbl1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|uks
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|fks
init|=
name|metaStoreClientMirror
operator|.
name|getForeignKeys
argument_list|(
operator|new
name|ForeignKeysRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"tbl2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fks
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|nns
init|=
name|metaStoreClientMirror
operator|.
name|getNotNullConstraints
argument_list|(
operator|new
name|NotNullConstraintsRequest
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"tbl3"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|nns
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|te
parameter_list|)
block|{
name|assertNull
argument_list|(
name|te
argument_list|)
expr_stmt|;
block|}
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".tbl4(a string, b string, primary key (a) disable novalidate rely, unique (b) disable)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".tbl5(a string, b string, foreign key (a, b) references "
operator|+
name|dbName
operator|+
literal|".tbl4(a, b) disable novalidate)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|dbName
operator|+
literal|".tbl6(a string, b string not null disable)"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|replDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|incrementalDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|incrementalDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dumped to {} with id {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|String
name|pkName
init|=
literal|null
decl_stmt|;
name|String
name|ukName
init|=
literal|null
decl_stmt|;
name|String
name|fkName
init|=
literal|null
decl_stmt|;
name|String
name|nnName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pks
init|=
name|metaStoreClientMirror
operator|.
name|getPrimaryKeys
argument_list|(
operator|new
name|PrimaryKeysRequest
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"tbl4"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pks
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|pkName
operator|=
name|pks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPk_name
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uks
init|=
name|metaStoreClientMirror
operator|.
name|getUniqueConstraints
argument_list|(
operator|new
name|UniqueConstraintsRequest
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"tbl4"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|uks
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ukName
operator|=
name|uks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUk_name
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|fks
init|=
name|metaStoreClientMirror
operator|.
name|getForeignKeys
argument_list|(
operator|new
name|ForeignKeysRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"tbl5"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fks
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fkName
operator|=
name|fks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFk_name
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|nns
init|=
name|metaStoreClientMirror
operator|.
name|getNotNullConstraints
argument_list|(
operator|new
name|NotNullConstraintsRequest
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"tbl6"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|nns
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|nnName
operator|=
name|nns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNn_name
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|te
parameter_list|)
block|{
name|assertNull
argument_list|(
name|te
argument_list|)
expr_stmt|;
block|}
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".tbl4 DROP CONSTRAINT `"
operator|+
name|pkName
operator|+
literal|"`"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".tbl4 DROP CONSTRAINT `"
operator|+
name|ukName
operator|+
literal|"`"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".tbl5 DROP CONSTRAINT `"
operator|+
name|fkName
operator|+
literal|"`"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"ALTER TABLE "
operator|+
name|dbName
operator|+
literal|".tbl6 DROP CONSTRAINT `"
operator|+
name|nnName
operator|+
literal|"`"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|incrementalDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpLocn
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|incrementalDumpId
operator|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dumped to {} with id {}"
argument_list|,
name|incrementalDumpLocn
argument_list|,
name|incrementalDumpId
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"EXPLAIN REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|printOutput
argument_list|(
name|driverMirror
argument_list|)
expr_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|incrementalDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pks
init|=
name|metaStoreClientMirror
operator|.
name|getPrimaryKeys
argument_list|(
operator|new
name|PrimaryKeysRequest
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"tbl4"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pks
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLUniqueConstraint
argument_list|>
name|uks
init|=
name|metaStoreClientMirror
operator|.
name|getUniqueConstraints
argument_list|(
operator|new
name|UniqueConstraintsRequest
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"tbl4"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|uks
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|fks
init|=
name|metaStoreClientMirror
operator|.
name|getForeignKeys
argument_list|(
operator|new
name|ForeignKeysRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"tbl5"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fks
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SQLNotNullConstraint
argument_list|>
name|nns
init|=
name|metaStoreClientMirror
operator|.
name|getNotNullConstraints
argument_list|(
operator|new
name|NotNullConstraintsRequest
argument_list|(
name|dbName
operator|+
literal|"_dupe"
argument_list|,
literal|"tbl6"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|nns
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|te
parameter_list|)
block|{
name|assertNull
argument_list|(
name|te
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|createDB
parameter_list|(
name|String
name|name
parameter_list|,
name|Driver
name|myDriver
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing "
operator|+
name|name
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
name|name
operator|+
literal|"_"
operator|+
name|tid
decl_stmt|;
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|dbName
argument_list|,
name|myDriver
argument_list|)
expr_stmt|;
return|return
name|dbName
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEventFilters
parameter_list|()
block|{
comment|// Test testing that the filters introduced by EventUtils are working correctly.
comment|// The current filters we use in ReplicationSemanticAnalyzer is as follows:
comment|//    IMetaStoreClient.NotificationFilter evFilter = EventUtils.andFilter(
comment|//        EventUtils.getDbTblNotificationFilter(dbNameOrPattern, tblNameOrPattern),
comment|//        EventUtils.getEventBoundaryFilter(eventFrom, eventTo),
comment|//        EventUtils.restrictByMessageFormat(MessageFactory.getInstance().getMessageFormat()));
comment|// So, we test each of those three filters, and then test andFilter itself.
name|String
name|dbname
init|=
literal|"testfilter_db"
decl_stmt|;
name|String
name|tblname
init|=
literal|"testfilter_tbl"
decl_stmt|;
comment|// Test EventUtils.getDbTblNotificationFilter - this is supposed to restrict
comment|// events to those that match the dbname and tblname provided to the filter.
comment|// If the tblname passed in to the filter is null, then it restricts itself
comment|// to dbname-matching alone.
name|IMetaStoreClient
operator|.
name|NotificationFilter
name|dbTblFilter
init|=
operator|new
name|DatabaseAndTableFilter
argument_list|(
name|dbname
argument_list|,
name|tblname
argument_list|)
decl_stmt|;
name|IMetaStoreClient
operator|.
name|NotificationFilter
name|dbFilter
init|=
operator|new
name|DatabaseAndTableFilter
argument_list|(
name|dbname
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|dbTblFilter
operator|.
name|accept
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbTblFilter
operator|.
name|accept
argument_list|(
name|createDummyEvent
argument_list|(
name|dbname
argument_list|,
name|tblname
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dbTblFilter
operator|.
name|accept
argument_list|(
name|createDummyEvent
argument_list|(
name|dbname
argument_list|,
name|tblname
operator|+
literal|"extra"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dbTblFilter
operator|.
name|accept
argument_list|(
name|createDummyEvent
argument_list|(
name|dbname
operator|+
literal|"extra"
argument_list|,
name|tblname
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dbFilter
operator|.
name|accept
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbFilter
operator|.
name|accept
argument_list|(
name|createDummyEvent
argument_list|(
name|dbname
argument_list|,
name|tblname
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbFilter
operator|.
name|accept
argument_list|(
name|createDummyEvent
argument_list|(
name|dbname
argument_list|,
name|tblname
operator|+
literal|"extra"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dbFilter
operator|.
name|accept
argument_list|(
name|createDummyEvent
argument_list|(
name|dbname
operator|+
literal|"extra"
argument_list|,
name|tblname
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test EventUtils.getEventBoundaryFilter - this is supposed to only allow events
comment|// within a range specified.
name|long
name|evBegin
init|=
literal|50
decl_stmt|;
name|long
name|evEnd
init|=
literal|75
decl_stmt|;
name|IMetaStoreClient
operator|.
name|NotificationFilter
name|evRangeFilter
init|=
operator|new
name|EventBoundaryFilter
argument_list|(
name|evBegin
argument_list|,
name|evEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|evBegin
operator|<
name|evEnd
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|evRangeFilter
operator|.
name|accept
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|evRangeFilter
operator|.
name|accept
argument_list|(
name|createDummyEvent
argument_list|(
name|dbname
argument_list|,
name|tblname
argument_list|,
name|evBegin
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|evRangeFilter
operator|.
name|accept
argument_list|(
name|createDummyEvent
argument_list|(
name|dbname
argument_list|,
name|tblname
argument_list|,
name|evBegin
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|evRangeFilter
operator|.
name|accept
argument_list|(
name|createDummyEvent
argument_list|(
name|dbname
argument_list|,
name|tblname
argument_list|,
name|evBegin
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|evRangeFilter
operator|.
name|accept
argument_list|(
name|createDummyEvent
argument_list|(
name|dbname
argument_list|,
name|tblname
argument_list|,
name|evEnd
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|evRangeFilter
operator|.
name|accept
argument_list|(
name|createDummyEvent
argument_list|(
name|dbname
argument_list|,
name|tblname
argument_list|,
name|evEnd
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|evRangeFilter
operator|.
name|accept
argument_list|(
name|createDummyEvent
argument_list|(
name|dbname
argument_list|,
name|tblname
argument_list|,
name|evEnd
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test EventUtils.restrictByMessageFormat - this restricts events generated to those
comment|// that match a provided message format
name|IMetaStoreClient
operator|.
name|NotificationFilter
name|restrictByDefaultMessageFormat
init|=
operator|new
name|MessageFormatFilter
argument_list|(
name|MessageFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|getMessageFormat
argument_list|()
argument_list|)
decl_stmt|;
name|IMetaStoreClient
operator|.
name|NotificationFilter
name|restrictByArbitraryMessageFormat
init|=
operator|new
name|MessageFormatFilter
argument_list|(
name|MessageFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|getMessageFormat
argument_list|()
operator|+
literal|"_bogus"
argument_list|)
decl_stmt|;
name|NotificationEvent
name|dummyEvent
init|=
name|createDummyEvent
argument_list|(
name|dbname
argument_list|,
name|tblname
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MessageFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|getMessageFormat
argument_list|()
argument_list|,
name|dummyEvent
operator|.
name|getMessageFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|restrictByDefaultMessageFormat
operator|.
name|accept
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|restrictByDefaultMessageFormat
operator|.
name|accept
argument_list|(
name|dummyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|restrictByArbitraryMessageFormat
operator|.
name|accept
argument_list|(
name|dummyEvent
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test andFilter operation.
name|IMetaStoreClient
operator|.
name|NotificationFilter
name|yes
init|=
operator|new
name|IMetaStoreClient
operator|.
name|NotificationFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|NotificationEvent
name|notificationEvent
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|IMetaStoreClient
operator|.
name|NotificationFilter
name|no
init|=
operator|new
name|IMetaStoreClient
operator|.
name|NotificationFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|NotificationEvent
name|notificationEvent
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|assertTrue
argument_list|(
operator|new
name|AndFilter
argument_list|(
name|yes
argument_list|,
name|yes
argument_list|)
operator|.
name|accept
argument_list|(
name|dummyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|AndFilter
argument_list|(
name|yes
argument_list|,
name|no
argument_list|)
operator|.
name|accept
argument_list|(
name|dummyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|AndFilter
argument_list|(
name|no
argument_list|,
name|yes
argument_list|)
operator|.
name|accept
argument_list|(
name|dummyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|AndFilter
argument_list|(
name|no
argument_list|,
name|no
argument_list|)
operator|.
name|accept
argument_list|(
name|dummyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|AndFilter
argument_list|(
name|yes
argument_list|,
name|yes
argument_list|,
name|yes
argument_list|)
operator|.
name|accept
argument_list|(
name|dummyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|AndFilter
argument_list|(
name|yes
argument_list|,
name|yes
argument_list|,
name|no
argument_list|)
operator|.
name|accept
argument_list|(
name|dummyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|AndFilter
argument_list|(
name|yes
argument_list|,
name|no
argument_list|,
name|yes
argument_list|)
operator|.
name|accept
argument_list|(
name|dummyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|AndFilter
argument_list|(
name|yes
argument_list|,
name|no
argument_list|,
name|no
argument_list|)
operator|.
name|accept
argument_list|(
name|dummyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|AndFilter
argument_list|(
name|no
argument_list|,
name|yes
argument_list|,
name|yes
argument_list|)
operator|.
name|accept
argument_list|(
name|dummyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|AndFilter
argument_list|(
name|no
argument_list|,
name|yes
argument_list|,
name|no
argument_list|)
operator|.
name|accept
argument_list|(
name|dummyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|AndFilter
argument_list|(
name|no
argument_list|,
name|no
argument_list|,
name|yes
argument_list|)
operator|.
name|accept
argument_list|(
name|dummyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|AndFilter
argument_list|(
name|no
argument_list|,
name|no
argument_list|,
name|no
argument_list|)
operator|.
name|accept
argument_list|(
name|dummyEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NotificationEvent
name|createDummyEvent
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tblname
parameter_list|,
name|long
name|evid
parameter_list|)
block|{
name|MessageFactory
name|msgFactory
init|=
name|MessageFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Table
name|t
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|t
operator|.
name|setDbName
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTableName
argument_list|(
name|tblname
argument_list|)
expr_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
name|evid
argument_list|,
operator|(
name|int
operator|)
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|MessageFactory
operator|.
name|CREATE_TABLE_EVENT
argument_list|,
name|msgFactory
operator|.
name|buildCreateTableMessage
argument_list|(
name|t
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/tmp/"
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|event
operator|.
name|setDbName
argument_list|(
name|t
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTableName
argument_list|(
name|t
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMessageFormat
argument_list|(
name|msgFactory
operator|.
name|getMessageFormat
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|event
return|;
block|}
specifier|private
name|String
name|verifyAndReturnDbReplStatus
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|prevReplDumpId
parameter_list|,
name|String
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|run
argument_list|(
name|cmd
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|" FROM "
operator|+
name|prevReplDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|lastDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|lastReplDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe FROM '"
operator|+
name|lastDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"REPL STATUS "
operator|+
name|dbName
operator|+
literal|"_dupe"
argument_list|,
name|lastReplDumpId
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
if|if
condition|(
name|tblName
operator|!=
literal|null
condition|)
block|{
name|verifyRun
argument_list|(
literal|"REPL STATUS "
operator|+
name|dbName
operator|+
literal|"_dupe."
operator|+
name|tblName
argument_list|,
name|lastReplDumpId
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|lastReplDumpId
argument_list|)
operator|>
name|Long
operator|.
name|parseLong
argument_list|(
name|prevReplDumpId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|lastReplDumpId
return|;
block|}
comment|// Tests that doing a table-level REPL LOAD updates table repl.last.id, but not db-level repl.last.id
specifier|private
name|String
name|verifyAndReturnTblReplStatus
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|lastDbReplDumpId
parameter_list|,
name|String
name|prevReplDumpId
parameter_list|,
name|String
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|run
argument_list|(
name|cmd
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|advanceDumpDir
argument_list|()
expr_stmt|;
name|run
argument_list|(
literal|"REPL DUMP "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|" FROM "
operator|+
name|prevReplDumpId
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|String
name|lastDumpLocn
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|String
name|lastReplDumpId
init|=
name|getResult
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|driver
argument_list|)
decl_stmt|;
name|run
argument_list|(
literal|"REPL LOAD "
operator|+
name|dbName
operator|+
literal|"_dupe."
operator|+
name|tblName
operator|+
literal|" FROM '"
operator|+
name|lastDumpLocn
operator|+
literal|"'"
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"REPL STATUS "
operator|+
name|dbName
operator|+
literal|"_dupe"
argument_list|,
name|lastDbReplDumpId
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|verifyRun
argument_list|(
literal|"REPL STATUS "
operator|+
name|dbName
operator|+
literal|"_dupe."
operator|+
name|tblName
argument_list|,
name|lastReplDumpId
argument_list|,
name|driverMirror
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|lastReplDumpId
argument_list|)
operator|>
name|Long
operator|.
name|parseLong
argument_list|(
name|prevReplDumpId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|lastReplDumpId
return|;
block|}
specifier|private
name|String
name|getResult
parameter_list|(
name|int
name|rowNum
parameter_list|,
name|int
name|colNum
parameter_list|,
name|Driver
name|myDriver
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getResult
argument_list|(
name|rowNum
argument_list|,
name|colNum
argument_list|,
literal|false
argument_list|,
name|myDriver
argument_list|)
return|;
block|}
specifier|private
name|String
name|getResult
parameter_list|(
name|int
name|rowNum
parameter_list|,
name|int
name|colNum
parameter_list|,
name|boolean
name|reuse
parameter_list|,
name|Driver
name|myDriver
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|reuse
condition|)
block|{
name|lastResults
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|myDriver
operator|.
name|getResults
argument_list|(
name|lastResults
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandNeedRetryException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Split around the 'tab' character
return|return
operator|(
name|lastResults
operator|.
name|get
argument_list|(
name|rowNum
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\t"
argument_list|)
operator|)
index|[
name|colNum
index|]
return|;
block|}
comment|/**    * All the results that are read from the hive output will not preserve    * case sensitivity and will all be in lower case, hence we will check against    * only lower case data values.    * Unless for Null Values it actually returns in UpperCase and hence explicitly lowering case    * before assert.    */
specifier|private
name|void
name|verifyResults
parameter_list|(
name|String
index|[]
name|data
parameter_list|,
name|Driver
name|myDriver
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
name|getOutput
argument_list|(
name|myDriver
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expecting {}"
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got {}"
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|data
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getOutput
parameter_list|(
name|Driver
name|myDriver
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|myDriver
operator|.
name|getResults
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandNeedRetryException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|results
return|;
block|}
specifier|private
name|void
name|printOutput
parameter_list|(
name|Driver
name|myDriver
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|s
range|:
name|getOutput
argument_list|(
name|myDriver
argument_list|)
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyIfTableNotExist
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|HiveMetaStoreClient
name|myClient
parameter_list|)
block|{
name|Exception
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Table
name|tbl
init|=
name|myClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|te
parameter_list|)
block|{
name|e
operator|=
name|te
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NoSuchObjectException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyIfTableExist
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|HiveMetaStoreClient
name|myClient
parameter_list|)
block|{
name|Exception
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Table
name|tbl
init|=
name|myClient
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|te
parameter_list|)
block|{
assert|assert
operator|(
literal|false
operator|)
assert|;
block|}
block|}
specifier|private
name|void
name|verifyIfPartitionNotExist
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|,
name|HiveMetaStoreClient
name|myClient
parameter_list|)
block|{
name|Exception
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Partition
name|ptn
init|=
name|myClient
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partValues
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|ptn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|te
parameter_list|)
block|{
name|e
operator|=
name|te
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NoSuchObjectException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyIfPartitionExist
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|,
name|HiveMetaStoreClient
name|myClient
parameter_list|)
block|{
name|Exception
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Partition
name|ptn
init|=
name|myClient
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partValues
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ptn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|te
parameter_list|)
block|{
assert|assert
operator|(
literal|false
operator|)
assert|;
block|}
block|}
specifier|private
name|void
name|verifySetup
parameter_list|(
name|String
name|cmd
parameter_list|,
name|String
index|[]
name|data
parameter_list|,
name|Driver
name|myDriver
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|VERIFY_SETUP_STEPS
condition|)
block|{
name|run
argument_list|(
name|cmd
argument_list|,
name|myDriver
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|data
argument_list|,
name|myDriver
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyRun
parameter_list|(
name|String
name|cmd
parameter_list|,
name|String
name|data
parameter_list|,
name|Driver
name|myDriver
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyRun
argument_list|(
name|cmd
argument_list|,
operator|new
name|String
index|[]
block|{
name|data
block|}
argument_list|,
name|myDriver
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyRun
parameter_list|(
name|String
name|cmd
parameter_list|,
name|String
index|[]
name|data
parameter_list|,
name|Driver
name|myDriver
parameter_list|)
throws|throws
name|IOException
block|{
name|run
argument_list|(
name|cmd
argument_list|,
name|myDriver
argument_list|)
expr_stmt|;
name|verifyResults
argument_list|(
name|data
argument_list|,
name|myDriver
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyFail
parameter_list|(
name|String
name|cmd
parameter_list|,
name|Driver
name|myDriver
parameter_list|)
throws|throws
name|RuntimeException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|success
operator|=
name|run
argument_list|(
name|cmd
argument_list|,
literal|false
argument_list|,
name|myDriver
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|ae
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"AssertionError:"
argument_list|,
name|ae
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ae
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyRunWithPatternMatch
parameter_list|(
name|String
name|cmd
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|pattern
parameter_list|,
name|Driver
name|myDriver
parameter_list|)
throws|throws
name|IOException
block|{
name|run
argument_list|(
name|cmd
argument_list|,
name|myDriver
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
name|getOutput
argument_list|(
name|myDriver
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
name|key
argument_list|)
operator|&&
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|run
parameter_list|(
name|String
name|cmd
parameter_list|,
name|Driver
name|myDriver
parameter_list|)
throws|throws
name|RuntimeException
block|{
try|try
block|{
name|run
argument_list|(
name|cmd
argument_list|,
literal|false
argument_list|,
name|myDriver
argument_list|)
expr_stmt|;
comment|// default arg-less run simply runs, and does not care about failure
block|}
catch|catch
parameter_list|(
name|AssertionError
name|ae
parameter_list|)
block|{
comment|// Hive code has AssertionErrors in some cases - we want to record what happens
name|LOG
operator|.
name|warn
argument_list|(
literal|"AssertionError:"
argument_list|,
name|ae
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ae
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|run
parameter_list|(
name|String
name|cmd
parameter_list|,
name|boolean
name|errorOnFail
parameter_list|,
name|Driver
name|myDriver
parameter_list|)
throws|throws
name|RuntimeException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|CommandProcessorResponse
name|ret
init|=
name|myDriver
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|success
operator|=
operator|(
operator|(
name|ret
operator|.
name|getException
argument_list|()
operator|==
literal|null
operator|)
operator|&&
operator|(
name|ret
operator|.
name|getErrorMessage
argument_list|()
operator|==
literal|null
operator|)
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error {} : {} running [{}]."
argument_list|,
name|ret
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|ret
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CommandNeedRetryException
name|e
parameter_list|)
block|{
if|if
condition|(
name|errorOnFail
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// do nothing else
block|}
block|}
return|return
name|success
return|;
block|}
specifier|private
specifier|static
name|void
name|createTestDataFile
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
index|[]
name|lines
parameter_list|)
throws|throws
name|IOException
block|{
name|FileWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|line
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

