begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTableInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BinaryColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BooleanColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Decimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DecimalColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DoubleColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LongColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalPrivilegeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeGrantInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|RolePrincipalGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StringColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MRoleMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|MockitoAnnotations
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Integration tests with HBase Mini-cluster for HBaseStore  */
end_comment

begin_class
specifier|public
class|class
name|TestHBaseStoreIntegration
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHBaseStoreIntegration
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|utility
decl_stmt|;
specifier|private
specifier|static
name|HTableInterface
name|tblTable
decl_stmt|;
specifier|private
specifier|static
name|HTableInterface
name|sdTable
decl_stmt|;
specifier|private
specifier|static
name|HTableInterface
name|partTable
decl_stmt|;
specifier|private
specifier|static
name|HTableInterface
name|dbTable
decl_stmt|;
specifier|private
specifier|static
name|HTableInterface
name|roleTable
decl_stmt|;
specifier|private
specifier|static
name|HTableInterface
name|globalPrivsTable
decl_stmt|;
specifier|private
specifier|static
name|HTableInterface
name|principalRoleMapTable
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|emptyParameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|HBaseConnection
name|hconn
decl_stmt|;
specifier|private
name|HBaseStore
name|store
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startMiniCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|utility
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|utility
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|HBaseReadWrite
operator|.
name|CATALOG_CF
block|,
name|HBaseReadWrite
operator|.
name|STATS_CF
block|}
decl_stmt|;
name|tblTable
operator|=
name|utility
operator|.
name|createTable
argument_list|(
name|HBaseReadWrite
operator|.
name|TABLE_TABLE
operator|.
name|getBytes
argument_list|(
name|HBaseUtils
operator|.
name|ENCODING
argument_list|)
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|sdTable
operator|=
name|utility
operator|.
name|createTable
argument_list|(
name|HBaseReadWrite
operator|.
name|SD_TABLE
operator|.
name|getBytes
argument_list|(
name|HBaseUtils
operator|.
name|ENCODING
argument_list|)
argument_list|,
name|HBaseReadWrite
operator|.
name|CATALOG_CF
argument_list|)
expr_stmt|;
name|partTable
operator|=
name|utility
operator|.
name|createTable
argument_list|(
name|HBaseReadWrite
operator|.
name|PART_TABLE
operator|.
name|getBytes
argument_list|(
name|HBaseUtils
operator|.
name|ENCODING
argument_list|)
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|dbTable
operator|=
name|utility
operator|.
name|createTable
argument_list|(
name|HBaseReadWrite
operator|.
name|DB_TABLE
operator|.
name|getBytes
argument_list|(
name|HBaseUtils
operator|.
name|ENCODING
argument_list|)
argument_list|,
name|HBaseReadWrite
operator|.
name|CATALOG_CF
argument_list|)
expr_stmt|;
name|roleTable
operator|=
name|utility
operator|.
name|createTable
argument_list|(
name|HBaseReadWrite
operator|.
name|ROLE_TABLE
operator|.
name|getBytes
argument_list|(
name|HBaseUtils
operator|.
name|ENCODING
argument_list|)
argument_list|,
name|HBaseReadWrite
operator|.
name|CATALOG_CF
argument_list|)
expr_stmt|;
name|globalPrivsTable
operator|=
name|utility
operator|.
name|createTable
argument_list|(
name|HBaseReadWrite
operator|.
name|GLOBAL_PRIVS_TABLE
operator|.
name|getBytes
argument_list|(
name|HBaseUtils
operator|.
name|ENCODING
argument_list|)
argument_list|,
name|HBaseReadWrite
operator|.
name|CATALOG_CF
argument_list|)
expr_stmt|;
name|principalRoleMapTable
operator|=
name|utility
operator|.
name|createTable
argument_list|(
name|HBaseReadWrite
operator|.
name|USER_TO_ROLE_TABLE
operator|.
name|getBytes
argument_list|(
name|HBaseUtils
operator|.
name|ENCODING
argument_list|)
argument_list|,
name|HBaseReadWrite
operator|.
name|CATALOG_CF
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|shutdownMiniCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|utility
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setupConnection
parameter_list|()
throws|throws
name|IOException
block|{
name|MockitoAnnotations
operator|.
name|initMocks
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hconn
operator|.
name|getHBaseTable
argument_list|(
name|HBaseReadWrite
operator|.
name|SD_TABLE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sdTable
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hconn
operator|.
name|getHBaseTable
argument_list|(
name|HBaseReadWrite
operator|.
name|TABLE_TABLE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tblTable
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hconn
operator|.
name|getHBaseTable
argument_list|(
name|HBaseReadWrite
operator|.
name|PART_TABLE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|partTable
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hconn
operator|.
name|getHBaseTable
argument_list|(
name|HBaseReadWrite
operator|.
name|DB_TABLE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dbTable
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hconn
operator|.
name|getHBaseTable
argument_list|(
name|HBaseReadWrite
operator|.
name|ROLE_TABLE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|roleTable
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hconn
operator|.
name|getHBaseTable
argument_list|(
name|HBaseReadWrite
operator|.
name|GLOBAL_PRIVS_TABLE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|globalPrivsTable
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hconn
operator|.
name|getHBaseTable
argument_list|(
name|HBaseReadWrite
operator|.
name|USER_TO_ROLE_TABLE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|principalRoleMapTable
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
comment|// Turn off caching, as we want to test actual interaction with HBase
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBaseReadWrite
operator|.
name|NO_CACHE_CONF
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_HBASE_CONNECTION_CLASS
argument_list|,
name|HBaseReadWrite
operator|.
name|TEST_CONN
argument_list|)
expr_stmt|;
name|HBaseReadWrite
name|hbase
init|=
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|hbase
operator|.
name|setConnection
argument_list|(
name|hconn
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|HBaseStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createDb
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbname
init|=
literal|"mydb"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbname
argument_list|,
literal|"no description"
argument_list|,
literal|"file:///tmp"
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Database
name|d
init|=
name|store
operator|.
name|getDatabase
argument_list|(
literal|"mydb"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbname
argument_list|,
name|d
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"no description"
argument_list|,
name|d
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:///tmp"
argument_list|,
name|d
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dropDb
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbname
init|=
literal|"anotherdb"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbname
argument_list|,
literal|"no description"
argument_list|,
literal|"file:///tmp"
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Database
name|d
init|=
name|store
operator|.
name|getDatabase
argument_list|(
name|dbname
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|store
operator|.
name|dropDatabase
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|NoSuchObjectException
operator|.
name|class
argument_list|)
expr_stmt|;
name|store
operator|.
name|getDatabase
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAllDbs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|dbNames
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dbNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dbNames
index|[
name|i
index|]
operator|=
literal|"db"
operator|+
name|i
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbNames
index|[
name|i
index|]
argument_list|,
literal|"no description"
argument_list|,
literal|"file:///tmp"
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|dbs
init|=
name|store
operator|.
name|getAllDatabases
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dbs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|namesFromStore
init|=
name|dbs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|namesFromStore
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|dbNames
argument_list|,
name|namesFromStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getDbsRegex
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|dbNames
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dbNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dbNames
index|[
name|i
index|]
operator|=
literal|"db"
operator|+
name|i
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbNames
index|[
name|i
index|]
argument_list|,
literal|"no description"
argument_list|,
literal|"file:///tmp"
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|dbs
init|=
name|store
operator|.
name|getDatabases
argument_list|(
literal|"db1|db2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dbs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|namesFromStore
init|=
name|dbs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|namesFromStore
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|dbNames
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|namesFromStore
argument_list|)
expr_stmt|;
name|dbs
operator|=
name|store
operator|.
name|getDatabases
argument_list|(
literal|"db*"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dbs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|namesFromStore
operator|=
name|dbs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|namesFromStore
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|dbNames
argument_list|,
name|namesFromStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createTable
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
literal|"mytable"
argument_list|,
literal|"default"
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|store
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
literal|"mytable"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"int"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nocomment"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"serde"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"seriallib"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:/tmp"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"input"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"output"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"me"
argument_list|,
name|t
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|t
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"mytable"
argument_list|,
name|t
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|alterTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"alttable"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
literal|"default"
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|startTime
operator|+=
literal|10
expr_stmt|;
name|table
operator|.
name|setLastAccessTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"XXX alter table test"
argument_list|)
expr_stmt|;
name|store
operator|.
name|alterTable
argument_list|(
literal|"default"
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|store
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Alter table time "
operator|+
name|t
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"int"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nocomment"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"serde"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"seriallib"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:/tmp"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"input"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"output"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"me"
argument_list|,
name|t
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|t
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|t
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|startTime
argument_list|,
name|t
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAllTables
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbNames
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"db0"
block|,
literal|"db1"
block|}
decl_stmt|;
comment|// named to match getAllDbs so we get the
comment|// right number of databases in that test.
name|String
name|tableNames
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"curly"
block|,
literal|"larry"
block|,
literal|"moe"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dbNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|store
operator|.
name|createDatabase
argument_list|(
operator|new
name|Database
argument_list|(
name|dbNames
index|[
name|i
index|]
argument_list|,
literal|"no description"
argument_list|,
literal|"file:///tmp"
argument_list|,
name|emptyParameters
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dbNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tableNames
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableNames
index|[
name|j
index|]
argument_list|,
name|dbNames
index|[
name|i
index|]
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|fetchedNames
init|=
name|store
operator|.
name|getAllTables
argument_list|(
name|dbNames
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fetchedNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|sortedFetchedNames
init|=
name|fetchedNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|fetchedNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|sortedFetchedNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|tableNames
argument_list|,
name|sortedFetchedNames
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|regexNames
init|=
name|store
operator|.
name|getTables
argument_list|(
name|dbNames
index|[
literal|0
index|]
argument_list|,
literal|"*y"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|regexNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|sortedRegexNames
init|=
name|regexNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|regexNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|sortedRegexNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|tableNames
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|sortedRegexNames
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Table
argument_list|>
name|fetchedTables
init|=
name|store
operator|.
name|getTableObjectsByName
argument_list|(
name|dbNames
index|[
literal|1
index|]
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|tableNames
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fetchedTables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sortedFetchedNames
operator|=
operator|new
name|String
index|[
name|fetchedTables
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fetchedTables
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sortedFetchedNames
index|[
name|i
index|]
operator|=
name|fetchedTables
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTableName
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|sortedFetchedNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|tableNames
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|sortedFetchedNames
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dropTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"dtable"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
literal|"default"
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|store
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|store
operator|.
name|dropTable
argument_list|(
literal|"default"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|store
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"myparttable"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"pc"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|vals
operator|.
name|add
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/pc=fred"
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|vals
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
name|psd
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Partition
name|p
init|=
name|store
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|vals
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"int"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nocomment"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"serde"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"seriallib"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:/tmp/pc=fred"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"input"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"output"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|p
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|p
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getValuesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"fred"
argument_list|,
name|p
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"addParts"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"pc"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"alan"
argument_list|,
literal|"bob"
argument_list|,
literal|"carl"
argument_list|,
literal|"doug"
argument_list|,
literal|"ethan"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|partVals
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/pc="
operator|+
name|val
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|vals
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
name|psd
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|addPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
name|store
operator|.
name|listPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|partNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|names
init|=
name|partNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|partNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|String
index|[]
name|canonicalNames
init|=
name|partVals
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|partVals
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|canonicalNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|canonicalNames
index|[
name|i
index|]
operator|=
literal|"pc="
operator|+
name|canonicalNames
index|[
name|i
index|]
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|canonicalNames
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|alterPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"alterParts"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"pc"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"alan"
argument_list|,
literal|"bob"
argument_list|,
literal|"carl"
argument_list|,
literal|"doug"
argument_list|,
literal|"ethan"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|allVals
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|partVals
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|allVals
operator|.
name|add
argument_list|(
name|vals
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/pc="
operator|+
name|val
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|vals
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
name|psd
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|addPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitions
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|p
range|:
name|partitions
control|)
name|p
operator|.
name|setLastAccessTime
argument_list|(
name|startTime
operator|+
literal|10
argument_list|)
expr_stmt|;
name|store
operator|.
name|alterPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|allVals
argument_list|,
name|partitions
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|store
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|partitions
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|startTime
operator|+
literal|10
argument_list|,
name|part
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"manyParts"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"pc"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"alan"
argument_list|,
literal|"bob"
argument_list|,
literal|"carl"
argument_list|,
literal|"doug"
argument_list|,
literal|"ethan"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|partVals
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/pc="
operator|+
name|val
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|vals
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
name|psd
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Partition
name|p
init|=
name|store
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|vals
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:/tmp/pc="
operator|+
name|val
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|store
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|parts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|pv
init|=
operator|new
name|String
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
name|pv
index|[
name|i
index|]
operator|=
name|parts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|pv
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|pv
argument_list|,
name|partVals
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|listPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"listParts"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"pc"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"region"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|partVals
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"today"
block|,
literal|"north america"
block|}
block|,
block|{
literal|"tomorrow"
block|,
literal|"europe"
block|}
block|}
decl_stmt|;
for|for
control|(
name|String
index|[]
name|pv
range|:
name|partVals
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|v
range|:
name|pv
control|)
name|vals
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/pc="
operator|+
name|pv
index|[
literal|0
index|]
operator|+
literal|"/region="
operator|+
name|pv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|vals
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
name|psd
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|store
operator|.
name|listPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|resultNames
init|=
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|names
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|resultNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|resultNames
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"pc=today/region=north america"
block|,
literal|"pc=tomorrow/region=europe"
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|store
operator|.
name|getPartitionsByNames
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|names
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|partVals
index|[
literal|0
index|]
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|partVals
index|[
literal|1
index|]
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|dropPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|names
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|afterDropParts
init|=
name|store
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|afterDropParts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|listPartitionsWithPs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"listPartsPs"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"region"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|partVals
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"today"
block|,
literal|"north america"
block|}
block|,
block|{
literal|"today"
block|,
literal|"europe"
block|}
block|,
block|{
literal|"tomorrow"
block|,
literal|"north america"
block|}
block|,
block|{
literal|"tomorrow"
block|,
literal|"europe"
block|}
block|}
decl_stmt|;
for|for
control|(
name|String
index|[]
name|pv
range|:
name|partVals
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|v
range|:
name|pv
control|)
name|vals
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/ds="
operator|+
name|pv
index|[
literal|0
index|]
operator|+
literal|"/region="
operator|+
name|pv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|vals
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
name|psd
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
comment|// We only test listPartitionNamesPs since it calls listPartitionsPsWithAuth anyway.
comment|// Test the case where we completely specify the partition
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
name|store
operator|.
name|listPartitionNamesPs
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|partitionNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ds=today/region=north america"
argument_list|,
name|partitionNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Leave off the last value of the partition
name|partitionNames
operator|=
name|store
operator|.
name|listPartitionNamesPs
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|partitionNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|names
init|=
name|partitionNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|partitionNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"ds=today/region=europe"
block|,
literal|"ds=today/region=north america"
block|}
argument_list|,
name|names
argument_list|)
expr_stmt|;
comment|// Put a star in the last value of the partition
name|partitionNames
operator|=
name|store
operator|.
name|listPartitionNamesPs
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"today"
argument_list|,
literal|"*"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|partitionNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|names
operator|=
name|partitionNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|partitionNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"ds=today/region=europe"
block|,
literal|"ds=today/region=north america"
block|}
argument_list|,
name|names
argument_list|)
expr_stmt|;
comment|// Put a star in the first value of the partition
name|partitionNames
operator|=
name|store
operator|.
name|listPartitionNamesPs
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"*"
argument_list|,
literal|"europe"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|partitionNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|names
operator|=
name|partitionNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|partitionNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"ds=today/region=europe"
block|,
literal|"ds=tomorrow/region=europe"
block|}
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dropPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"myparttable2"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"pc"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"fred"
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/pc=fred"
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|vals
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
name|psd
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|store
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|vals
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|vals
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|NoSuchObjectException
operator|.
name|class
argument_list|)
expr_stmt|;
name|store
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createRole
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|now
init|=
operator|(
name|int
operator|)
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|String
name|roleName
init|=
literal|"myrole"
decl_stmt|;
name|store
operator|.
name|addRole
argument_list|(
name|roleName
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|Role
name|r
init|=
name|store
operator|.
name|getRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|roleName
argument_list|,
name|r
operator|.
name|getRoleName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"me"
argument_list|,
name|r
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|now
operator|<=
name|r
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dropRole
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|roleName
init|=
literal|"anotherrole"
decl_stmt|;
name|store
operator|.
name|addRole
argument_list|(
name|roleName
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|Role
name|r
init|=
name|store
operator|.
name|getRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|roleName
argument_list|,
name|r
operator|.
name|getRoleName
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|NoSuchObjectException
operator|.
name|class
argument_list|)
expr_stmt|;
name|store
operator|.
name|getRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|grantRevokeRoles
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|String
name|roleName1
init|=
literal|"role1"
decl_stmt|;
name|store
operator|.
name|addRole
argument_list|(
name|roleName1
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|String
name|roleName2
init|=
literal|"role2"
decl_stmt|;
name|store
operator|.
name|addRole
argument_list|(
name|roleName2
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|Role
name|role1
init|=
name|store
operator|.
name|getRole
argument_list|(
name|roleName1
argument_list|)
decl_stmt|;
name|Role
name|role2
init|=
name|store
operator|.
name|getRole
argument_list|(
name|roleName2
argument_list|)
decl_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role1
argument_list|,
literal|"fred"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|"bob"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role2
argument_list|,
name|roleName1
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|"admin"
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role2
argument_list|,
literal|"fred"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|"admin"
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Role
argument_list|>
name|roles
init|=
name|store
operator|.
name|listRoles
argument_list|(
literal|"fred"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|roles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|sawRole1
init|=
literal|false
decl_stmt|,
name|sawRole2
init|=
literal|false
decl_stmt|,
name|sawPublic
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Role
name|role
range|:
name|roles
control|)
block|{
if|if
condition|(
name|role
operator|.
name|getRoleName
argument_list|()
operator|.
name|equals
argument_list|(
name|roleName1
argument_list|)
condition|)
block|{
name|sawRole1
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|role
operator|.
name|getRoleName
argument_list|()
operator|.
name|equals
argument_list|(
name|roleName2
argument_list|)
condition|)
block|{
name|sawRole2
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|role
operator|.
name|getRoleName
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveMetaStore
operator|.
name|PUBLIC
argument_list|)
condition|)
block|{
name|sawPublic
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unknown role name "
operator|+
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawRole1
operator|&&
name|sawRole2
operator|&&
name|sawPublic
argument_list|)
expr_stmt|;
name|roles
operator|=
name|store
operator|.
name|listRoles
argument_list|(
literal|"fred"
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|roles
operator|=
name|store
operator|.
name|listRoles
argument_list|(
name|roleName1
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Role
name|role
init|=
name|roles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|roleName2
argument_list|,
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test listing all members in a role
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|grants
init|=
name|store
operator|.
name|listRoleMembers
argument_list|(
name|roleName1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|grants
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"fred"
argument_list|,
name|grants
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grants
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected grant time of "
operator|+
name|now
operator|+
literal|" got "
operator|+
name|grants
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGrantTime
argument_list|()
argument_list|,
name|grants
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGrantTime
argument_list|()
operator|>=
name|now
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bob"
argument_list|,
name|grants
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGrantorName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grants
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGrantorPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|grants
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|grants
operator|=
name|store
operator|.
name|listRoleMembers
argument_list|(
name|roleName2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|grants
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|sawFred
init|=
literal|false
decl_stmt|;
name|sawRole1
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|RolePrincipalGrant
name|m
range|:
name|grants
control|)
block|{
if|if
condition|(
literal|"fred"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
condition|)
name|sawFred
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|roleName1
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
condition|)
name|sawRole1
operator|=
literal|true
expr_stmt|;
else|else
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected principal "
operator|+
name|m
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawFred
operator|&&
name|sawRole1
argument_list|)
expr_stmt|;
comment|// Revoke a role with grant option, make sure it just goes to no grant option
name|store
operator|.
name|revokeRole
argument_list|(
name|role2
argument_list|,
name|roleName1
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|roles
operator|=
name|store
operator|.
name|listRoles
argument_list|(
name|roleName1
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|roleName2
argument_list|,
name|roles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRoleName
argument_list|()
argument_list|)
expr_stmt|;
name|grants
operator|=
name|store
operator|.
name|listRoleMembers
argument_list|(
name|roleName1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|grants
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
comment|// Drop a role, make sure it is properly removed from the map
name|store
operator|.
name|removeRole
argument_list|(
name|roleName1
argument_list|)
expr_stmt|;
name|roles
operator|=
name|store
operator|.
name|listRoles
argument_list|(
literal|"fred"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|roles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sawRole2
operator|=
name|sawPublic
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Role
name|m
range|:
name|roles
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getRoleName
argument_list|()
operator|.
name|equals
argument_list|(
name|roleName2
argument_list|)
condition|)
name|sawRole2
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|m
operator|.
name|getRoleName
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveMetaStore
operator|.
name|PUBLIC
argument_list|)
condition|)
name|sawPublic
operator|=
literal|true
expr_stmt|;
else|else
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unknown role "
operator|+
name|m
operator|.
name|getRoleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawRole2
operator|&&
name|sawPublic
argument_list|)
expr_stmt|;
name|roles
operator|=
name|store
operator|.
name|listRoles
argument_list|(
name|roleName1
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|roles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Revoke a role without grant option, make sure it goes away
name|store
operator|.
name|revokeRole
argument_list|(
name|role2
argument_list|,
literal|"fred"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|roles
operator|=
name|store
operator|.
name|listRoles
argument_list|(
literal|"fred"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveMetaStore
operator|.
name|PUBLIC
argument_list|,
name|roles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRoleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|userToRoleMap
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|roleName1
init|=
literal|"utrm1"
decl_stmt|;
name|store
operator|.
name|addRole
argument_list|(
name|roleName1
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|String
name|roleName2
init|=
literal|"utrm2"
decl_stmt|;
name|store
operator|.
name|addRole
argument_list|(
name|roleName2
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|String
name|user1
init|=
literal|"wilma"
decl_stmt|;
name|String
name|user2
init|=
literal|"betty"
decl_stmt|;
name|Role
name|role1
init|=
name|store
operator|.
name|getRole
argument_list|(
name|roleName1
argument_list|)
decl_stmt|;
name|Role
name|role2
init|=
name|store
operator|.
name|getRole
argument_list|(
name|roleName2
argument_list|)
decl_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role1
argument_list|,
name|user1
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|"bob"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role1
argument_list|,
name|roleName2
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|"admin"
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|roles
init|=
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
operator|.
name|getUserRoles
argument_list|(
name|user1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|roles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|roleNames
init|=
name|roles
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|roles
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|roleNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
name|roleName1
block|,
name|roleName2
block|}
argument_list|,
name|roleNames
argument_list|)
expr_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role2
argument_list|,
name|user1
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|"admin"
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role1
argument_list|,
name|user2
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|"bob"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|roles
operator|=
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
operator|.
name|getUserRoles
argument_list|(
name|user2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|roles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|roleNames
operator|=
name|roles
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|roles
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|roleNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
name|roleName1
block|,
name|roleName2
block|}
argument_list|,
name|roleNames
argument_list|)
expr_stmt|;
name|store
operator|.
name|revokeRole
argument_list|(
name|role1
argument_list|,
name|roleName2
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// user1 should still have both roles since she was granted into role1 specifically.  user2
comment|// should only have role2 now since role2 was revoked from role1.
name|roles
operator|=
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
operator|.
name|getUserRoles
argument_list|(
name|user1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|roles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|roleNames
operator|=
name|roles
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|roles
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|roleNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
name|roleName1
block|,
name|roleName2
block|}
argument_list|,
name|roleNames
argument_list|)
expr_stmt|;
name|roles
operator|=
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
operator|.
name|getUserRoles
argument_list|(
name|user2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|roleName1
argument_list|,
name|roles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|userToRoleMapOnDrop
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|roleName1
init|=
literal|"utrmod1"
decl_stmt|;
name|store
operator|.
name|addRole
argument_list|(
name|roleName1
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|String
name|roleName2
init|=
literal|"utrmod2"
decl_stmt|;
name|store
operator|.
name|addRole
argument_list|(
name|roleName2
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|String
name|user1
init|=
literal|"pebbles"
decl_stmt|;
name|String
name|user2
init|=
literal|"bam-bam"
decl_stmt|;
name|Role
name|role1
init|=
name|store
operator|.
name|getRole
argument_list|(
name|roleName1
argument_list|)
decl_stmt|;
name|Role
name|role2
init|=
name|store
operator|.
name|getRole
argument_list|(
name|roleName2
argument_list|)
decl_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role1
argument_list|,
name|user1
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|"bob"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role1
argument_list|,
name|roleName2
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|"admin"
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role1
argument_list|,
name|user2
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|"bob"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|roles
init|=
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
operator|.
name|getUserRoles
argument_list|(
name|user2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|roles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|roleNames
init|=
name|roles
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|roles
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|roleNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
name|roleName1
block|,
name|roleName2
block|}
argument_list|,
name|roleNames
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeRole
argument_list|(
name|roleName2
argument_list|)
expr_stmt|;
name|roles
operator|=
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
operator|.
name|getUserRoles
argument_list|(
name|user1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|roleName1
argument_list|,
name|roles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|roles
operator|=
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
operator|.
name|getUserRoles
argument_list|(
name|user2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|roles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|roleName1
argument_list|,
name|roles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|grantRevokeGlobalPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|doGrantRevoke
argument_list|(
name|HiveObjectType
operator|.
name|GLOBAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"grpg1"
block|,
literal|"grpg2"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bugs"
block|,
literal|"elmer"
block|,
literal|"daphy"
block|,
literal|"wiley"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|grantRevokeDbPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"grdbp_db"
decl_stmt|;
try|try
block|{
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbName
argument_list|,
literal|"no description"
argument_list|,
literal|"file:///tmp"
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|doGrantRevoke
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"grdbp_role1"
block|,
literal|"grdbp_role2"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fred"
block|,
literal|"barney"
block|,
literal|"wilma"
block|,
literal|"betty"
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|grantRevokeTablePrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"grtp_db"
decl_stmt|;
name|String
name|tableName
init|=
literal|"grtp_table"
decl_stmt|;
try|try
block|{
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbName
argument_list|,
literal|"no description"
argument_list|,
literal|"file:///tmp"
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|doGrantRevoke
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"grtp_role1"
block|,
literal|"grtp_role2"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"batman"
block|,
literal|"robin"
block|,
literal|"superman"
block|,
literal|"wonderwoman"
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|store
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|!=
literal|null
condition|)
name|store
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|store
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doGrantRevoke
parameter_list|(
name|HiveObjectType
name|objectType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
index|[]
name|roleNames
parameter_list|,
name|String
index|[]
name|userNames
parameter_list|)
throws|throws
name|Exception
block|{
name|store
operator|.
name|addRole
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|store
operator|.
name|addRole
argument_list|(
name|roleNames
index|[
literal|1
index|]
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|Role
name|role1
init|=
name|store
operator|.
name|getRole
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Role
name|role2
init|=
name|store
operator|.
name|getRole
argument_list|(
name|roleNames
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role1
argument_list|,
name|userNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|"bob"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role1
argument_list|,
name|roleNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|"admin"
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role2
argument_list|,
name|userNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|"bob"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privileges
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
name|HiveObjectRef
name|hiveObjRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|objectType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|PrivilegeGrantInfo
name|grantInfo
init|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
literal|"read"
argument_list|,
name|now
argument_list|,
literal|"me"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HiveObjectPrivilege
name|hop
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|hiveObjRef
argument_list|,
name|userNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantInfo
argument_list|)
decl_stmt|;
name|privileges
operator|.
name|add
argument_list|(
name|hop
argument_list|)
expr_stmt|;
name|hiveObjRef
operator|=
operator|new
name|HiveObjectRef
argument_list|(
name|objectType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|grantInfo
operator|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
literal|"write"
argument_list|,
name|now
argument_list|,
literal|"me"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hop
operator|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|hiveObjRef
argument_list|,
name|roleNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|grantInfo
argument_list|)
expr_stmt|;
name|privileges
operator|.
name|add
argument_list|(
name|hop
argument_list|)
expr_stmt|;
name|hiveObjRef
operator|=
operator|new
name|HiveObjectRef
argument_list|(
name|objectType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|grantInfo
operator|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
literal|"exec"
argument_list|,
name|now
argument_list|,
literal|"me"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hop
operator|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|hiveObjRef
argument_list|,
name|roleNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|grantInfo
argument_list|)
expr_stmt|;
name|privileges
operator|.
name|add
argument_list|(
name|hop
argument_list|)
expr_stmt|;
name|hiveObjRef
operator|=
operator|new
name|HiveObjectRef
argument_list|(
name|objectType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|grantInfo
operator|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
literal|"create"
argument_list|,
name|now
argument_list|,
literal|"me"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hop
operator|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|hiveObjRef
argument_list|,
name|userNames
index|[
literal|2
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantInfo
argument_list|)
expr_stmt|;
name|privileges
operator|.
name|add
argument_list|(
name|hop
argument_list|)
expr_stmt|;
name|hiveObjRef
operator|=
operator|new
name|HiveObjectRef
argument_list|(
name|objectType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|grantInfo
operator|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
literal|"create2"
argument_list|,
name|now
argument_list|,
literal|"me"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hop
operator|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|hiveObjRef
argument_list|,
name|userNames
index|[
literal|2
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantInfo
argument_list|)
expr_stmt|;
name|privileges
operator|.
name|add
argument_list|(
name|hop
argument_list|)
expr_stmt|;
name|PrivilegeBag
name|pBag
init|=
operator|new
name|PrivilegeBag
argument_list|(
name|privileges
argument_list|)
decl_stmt|;
name|store
operator|.
name|grantPrivileges
argument_list|(
name|pBag
argument_list|)
expr_stmt|;
name|PrincipalPrivilegeSet
name|pps
init|=
name|getPPS
argument_list|(
name|objectType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|userNames
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getUserPrivilegesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|userNames
index|[
literal|0
index|]
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|grantInfo
operator|=
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|userNames
index|[
literal|0
index|]
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"read"
argument_list|,
name|grantInfo
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|now
operator|<=
name|grantInfo
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"me"
argument_list|,
name|grantInfo
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantInfo
operator|.
name|getGrantorType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|grantInfo
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pps
operator|.
name|getRolePrivilegesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|grantInfo
operator|=
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"write"
argument_list|,
name|grantInfo
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|now
operator|<=
name|grantInfo
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"me"
argument_list|,
name|grantInfo
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantInfo
operator|.
name|getGrantorType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|grantInfo
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|roleNames
index|[
literal|1
index|]
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|grantInfo
operator|=
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|roleNames
index|[
literal|1
index|]
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"exec"
argument_list|,
name|grantInfo
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|now
operator|<=
name|grantInfo
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"me"
argument_list|,
name|grantInfo
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantInfo
operator|.
name|getGrantorType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|grantInfo
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|pps
operator|=
name|getPPS
argument_list|(
name|objectType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|userNames
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pps
operator|.
name|getUserPrivilegesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getRolePrivilegesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|roleNames
index|[
literal|1
index|]
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|grantInfo
operator|=
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|roleNames
index|[
literal|1
index|]
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"exec"
argument_list|,
name|grantInfo
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|now
operator|<=
name|grantInfo
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"me"
argument_list|,
name|grantInfo
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantInfo
operator|.
name|getGrantorType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|grantInfo
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|pps
operator|=
name|getPPS
argument_list|(
name|objectType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|userNames
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getUserPrivilegesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|userNames
index|[
literal|2
index|]
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pps
operator|.
name|getRolePrivilegesSize
argument_list|()
argument_list|)
expr_stmt|;
name|pps
operator|=
name|getPPS
argument_list|(
name|objectType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|userNames
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pps
operator|.
name|getUserPrivilegesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pps
operator|.
name|getRolePrivilegesSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test that removing role removes the role grants
name|store
operator|.
name|removeRole
argument_list|(
name|roleNames
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|checkRoleRemovedFromAllPrivileges
argument_list|(
name|objectType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|roleNames
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|pps
operator|=
name|getPPS
argument_list|(
name|objectType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|userNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getRolePrivilegesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|pps
operator|=
name|getPPS
argument_list|(
name|objectType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|userNames
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pps
operator|.
name|getRolePrivilegesSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test that revoking with grant option = true just removes grant option
name|privileges
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hiveObjRef
operator|=
operator|new
name|HiveObjectRef
argument_list|(
name|objectType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|grantInfo
operator|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
literal|"write"
argument_list|,
name|now
argument_list|,
literal|"me"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hop
operator|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|hiveObjRef
argument_list|,
name|roleNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|grantInfo
argument_list|)
expr_stmt|;
name|privileges
operator|.
name|add
argument_list|(
name|hop
argument_list|)
expr_stmt|;
name|hiveObjRef
operator|=
operator|new
name|HiveObjectRef
argument_list|(
name|objectType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|grantInfo
operator|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
literal|"create2"
argument_list|,
name|now
argument_list|,
literal|"me"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hop
operator|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|hiveObjRef
argument_list|,
name|userNames
index|[
literal|2
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantInfo
argument_list|)
expr_stmt|;
name|privileges
operator|.
name|add
argument_list|(
name|hop
argument_list|)
expr_stmt|;
name|pBag
operator|=
operator|new
name|PrivilegeBag
argument_list|(
name|privileges
argument_list|)
expr_stmt|;
name|store
operator|.
name|revokePrivileges
argument_list|(
name|pBag
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|pps
operator|=
name|getPPS
argument_list|(
name|objectType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|userNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getRolePrivilegesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|grantInfo
operator|=
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"write"
argument_list|,
name|grantInfo
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|now
operator|<=
name|grantInfo
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"me"
argument_list|,
name|grantInfo
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantInfo
operator|.
name|getGrantorType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|grantInfo
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|pps
operator|=
name|getPPS
argument_list|(
name|objectType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|userNames
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getUserPrivilegesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|userNames
index|[
literal|2
index|]
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PrivilegeGrantInfo
name|pgi
range|:
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|userNames
index|[
literal|2
index|]
argument_list|)
control|)
block|{
if|if
condition|(
name|pgi
operator|.
name|getPrivilege
argument_list|()
operator|.
name|equals
argument_list|(
literal|"create"
argument_list|)
condition|)
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pgi
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|pgi
operator|.
name|getPrivilege
argument_list|()
operator|.
name|equals
argument_list|(
literal|"create2"
argument_list|)
condition|)
name|Assert
operator|.
name|assertFalse
argument_list|(
name|pgi
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|Assert
operator|.
name|fail
argument_list|(
literal|"huh?"
argument_list|)
expr_stmt|;
block|}
comment|// Test revoking revokes
name|store
operator|.
name|revokePrivileges
argument_list|(
name|pBag
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|pps
operator|=
name|getPPS
argument_list|(
name|objectType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|userNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getUserPrivilegesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getRolePrivilegesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|pps
operator|=
name|getPPS
argument_list|(
name|objectType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|userNames
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getUserPrivilegesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|userNames
index|[
literal|2
index|]
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"create"
argument_list|,
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|userNames
index|[
literal|2
index|]
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pps
operator|.
name|getRolePrivilegesSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PrincipalPrivilegeSet
name|getPPS
parameter_list|(
name|HiveObjectType
name|objectType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
switch|switch
condition|(
name|objectType
condition|)
block|{
case|case
name|GLOBAL
case|:
return|return
name|store
operator|.
name|getUserPrivilegeSet
argument_list|(
name|userName
argument_list|,
literal|null
argument_list|)
return|;
case|case
name|DATABASE
case|:
return|return
name|store
operator|.
name|getDBPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|userName
argument_list|,
literal|null
argument_list|)
return|;
case|case
name|TABLE
case|:
return|return
name|store
operator|.
name|getTablePrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|userName
argument_list|,
literal|null
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"huh?"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|checkRoleRemovedFromAllPrivileges
parameter_list|(
name|HiveObjectType
name|objectType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|roleName
parameter_list|)
throws|throws
name|IOException
throws|,
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|pgi
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|objectType
condition|)
block|{
case|case
name|GLOBAL
case|:
name|pgi
operator|=
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
operator|.
name|getGlobalPrivs
argument_list|()
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATABASE
case|:
name|pgi
operator|=
name|store
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|getPrivileges
argument_list|()
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE
case|:
name|pgi
operator|=
name|store
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|getPrivileges
argument_list|()
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Expected null for role "
operator|+
name|roleName
operator|+
literal|" for type "
operator|+
name|objectType
operator|.
name|toString
argument_list|()
operator|+
literal|" with db "
operator|+
name|dbName
operator|+
literal|" and table "
operator|+
name|tableName
argument_list|,
name|pgi
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|listDbGrants
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbNames
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"ldbg_db1"
block|,
literal|"ldbg_db2"
block|}
decl_stmt|;
try|try
block|{
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbNames
index|[
literal|0
index|]
argument_list|,
literal|"no description"
argument_list|,
literal|"file:///tmp"
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|db
operator|=
operator|new
name|Database
argument_list|(
name|dbNames
index|[
literal|1
index|]
argument_list|,
literal|"no description"
argument_list|,
literal|"file:///tmp"
argument_list|,
name|emptyParameters
argument_list|)
expr_stmt|;
name|store
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|String
index|[]
name|roleNames
init|=
operator|new
name|String
index|[]
block|{
literal|"ldbg_role1"
block|,
literal|"ldbg_role2"
block|}
decl_stmt|;
name|String
index|[]
name|userNames
init|=
operator|new
name|String
index|[]
block|{
literal|"frodo"
block|,
literal|"sam"
block|}
decl_stmt|;
name|store
operator|.
name|addRole
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|store
operator|.
name|addRole
argument_list|(
name|roleNames
index|[
literal|1
index|]
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|Role
name|role1
init|=
name|store
operator|.
name|getRole
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Role
name|role2
init|=
name|store
operator|.
name|getRole
argument_list|(
name|roleNames
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role1
argument_list|,
name|userNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|"bob"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role1
argument_list|,
name|roleNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|"admin"
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role2
argument_list|,
name|userNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|"bob"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privileges
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
name|HiveObjectRef
name|hiveObjRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|dbNames
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|PrivilegeGrantInfo
name|grantInfo
init|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
literal|"read"
argument_list|,
name|now
argument_list|,
literal|"me"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HiveObjectPrivilege
name|hop
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|hiveObjRef
argument_list|,
name|userNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantInfo
argument_list|)
decl_stmt|;
name|privileges
operator|.
name|add
argument_list|(
name|hop
argument_list|)
expr_stmt|;
name|grantInfo
operator|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
literal|"write"
argument_list|,
name|now
argument_list|,
literal|"me"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hop
operator|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|hiveObjRef
argument_list|,
name|roleNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|grantInfo
argument_list|)
expr_stmt|;
name|privileges
operator|.
name|add
argument_list|(
name|hop
argument_list|)
expr_stmt|;
name|PrivilegeBag
name|pBag
init|=
operator|new
name|PrivilegeBag
argument_list|(
name|privileges
argument_list|)
decl_stmt|;
name|store
operator|.
name|grantPrivileges
argument_list|(
name|pBag
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|hops
init|=
name|store
operator|.
name|listPrincipalDBGrants
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|dbNames
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"write"
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listPrincipalDBGrants
argument_list|(
name|userNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|dbNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"read"
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listPrincipalDBGrants
argument_list|(
name|roleNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|dbNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listPrincipalDBGrants
argument_list|(
name|userNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|dbNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listPrincipalDBGrants
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|dbNames
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listPrincipalDBGrants
argument_list|(
name|userNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|dbNames
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listDBGrantsAll
argument_list|(
name|dbNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|sawUser
init|=
literal|false
decl_stmt|,
name|sawRole
init|=
literal|false
decl_stmt|;
for|for
control|(
name|HiveObjectPrivilege
name|h
range|:
name|hops
control|)
block|{
if|if
condition|(
name|h
operator|.
name|getPrincipalName
argument_list|()
operator|.
name|equals
argument_list|(
name|userNames
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|h
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|h
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"read"
argument_list|,
name|h
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|sawUser
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|h
operator|.
name|getPrincipalName
argument_list|()
operator|.
name|equals
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|h
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|h
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"write"
argument_list|,
name|h
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|sawRole
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawUser
operator|&&
name|sawRole
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listPrincipalDBGrantsAll
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"write"
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listPrincipalDBGrantsAll
argument_list|(
name|userNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"read"
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listPrincipalDBGrantsAll
argument_list|(
name|roleNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listPrincipalDBGrantsAll
argument_list|(
name|userNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|dropDatabase
argument_list|(
name|dbNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|store
operator|.
name|dropDatabase
argument_list|(
name|dbNames
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|listGlobalGrants
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|roleNames
init|=
operator|new
name|String
index|[]
block|{
literal|"lgg_role1"
block|,
literal|"lgg_role2"
block|}
decl_stmt|;
name|String
index|[]
name|userNames
init|=
operator|new
name|String
index|[]
block|{
literal|"merry"
block|,
literal|"pippen"
block|}
decl_stmt|;
name|store
operator|.
name|addRole
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|store
operator|.
name|addRole
argument_list|(
name|roleNames
index|[
literal|1
index|]
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|Role
name|role1
init|=
name|store
operator|.
name|getRole
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Role
name|role2
init|=
name|store
operator|.
name|getRole
argument_list|(
name|roleNames
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role1
argument_list|,
name|userNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|"bob"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role1
argument_list|,
name|roleNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|"admin"
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role2
argument_list|,
name|userNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|"bob"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privileges
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
name|HiveObjectRef
name|hiveObjRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|GLOBAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|PrivilegeGrantInfo
name|grantInfo
init|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
literal|"read"
argument_list|,
name|now
argument_list|,
literal|"me"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HiveObjectPrivilege
name|hop
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|hiveObjRef
argument_list|,
name|userNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantInfo
argument_list|)
decl_stmt|;
name|privileges
operator|.
name|add
argument_list|(
name|hop
argument_list|)
expr_stmt|;
name|grantInfo
operator|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
literal|"write"
argument_list|,
name|now
argument_list|,
literal|"me"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hop
operator|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|hiveObjRef
argument_list|,
name|roleNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|grantInfo
argument_list|)
expr_stmt|;
name|privileges
operator|.
name|add
argument_list|(
name|hop
argument_list|)
expr_stmt|;
name|PrivilegeBag
name|pBag
init|=
operator|new
name|PrivilegeBag
argument_list|(
name|privileges
argument_list|)
decl_stmt|;
name|store
operator|.
name|grantPrivileges
argument_list|(
name|pBag
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|hops
init|=
name|store
operator|.
name|listPrincipalGlobalGrants
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveObjectType
operator|.
name|GLOBAL
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"write"
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listPrincipalGlobalGrants
argument_list|(
name|userNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveObjectType
operator|.
name|GLOBAL
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"read"
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listPrincipalGlobalGrants
argument_list|(
name|roleNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listPrincipalGlobalGrants
argument_list|(
name|userNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listGlobalGrantsAll
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|sawUser
init|=
literal|false
decl_stmt|,
name|sawRole
init|=
literal|false
decl_stmt|;
for|for
control|(
name|HiveObjectPrivilege
name|h
range|:
name|hops
control|)
block|{
if|if
condition|(
name|h
operator|.
name|getPrincipalName
argument_list|()
operator|.
name|equals
argument_list|(
name|userNames
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|h
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveObjectType
operator|.
name|GLOBAL
argument_list|,
name|h
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"read"
argument_list|,
name|h
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|sawUser
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|h
operator|.
name|getPrincipalName
argument_list|()
operator|.
name|equals
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|h
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveObjectType
operator|.
name|GLOBAL
argument_list|,
name|h
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"write"
argument_list|,
name|h
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|sawRole
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawUser
operator|&&
name|sawRole
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|listTableGrants
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"ltg_db"
decl_stmt|;
name|String
index|[]
name|tableNames
init|=
operator|new
name|String
index|[]
block|{
literal|"ltg_t1"
block|,
literal|"ltg_t2"
block|}
decl_stmt|;
try|try
block|{
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbName
argument_list|,
literal|"no description"
argument_list|,
literal|"file:///tmp"
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableNames
index|[
literal|0
index|]
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|Table
argument_list|(
name|tableNames
index|[
literal|1
index|]
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|String
index|[]
name|roleNames
init|=
operator|new
name|String
index|[]
block|{
literal|"ltg_role1"
block|,
literal|"ltg_role2"
block|}
decl_stmt|;
name|String
index|[]
name|userNames
init|=
operator|new
name|String
index|[]
block|{
literal|"gandalf"
block|,
literal|"radagast"
block|}
decl_stmt|;
name|store
operator|.
name|addRole
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|store
operator|.
name|addRole
argument_list|(
name|roleNames
index|[
literal|1
index|]
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|Role
name|role1
init|=
name|store
operator|.
name|getRole
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Role
name|role2
init|=
name|store
operator|.
name|getRole
argument_list|(
name|roleNames
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role1
argument_list|,
name|userNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|"bob"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role1
argument_list|,
name|roleNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|"admin"
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|grantRole
argument_list|(
name|role2
argument_list|,
name|userNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|"bob"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privileges
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
name|HiveObjectRef
name|hiveObjRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|dbName
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|PrivilegeGrantInfo
name|grantInfo
init|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
literal|"read"
argument_list|,
name|now
argument_list|,
literal|"me"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HiveObjectPrivilege
name|hop
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|hiveObjRef
argument_list|,
name|userNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|grantInfo
argument_list|)
decl_stmt|;
name|privileges
operator|.
name|add
argument_list|(
name|hop
argument_list|)
expr_stmt|;
name|grantInfo
operator|=
operator|new
name|PrivilegeGrantInfo
argument_list|(
literal|"write"
argument_list|,
name|now
argument_list|,
literal|"me"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hop
operator|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|hiveObjRef
argument_list|,
name|roleNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|grantInfo
argument_list|)
expr_stmt|;
name|privileges
operator|.
name|add
argument_list|(
name|hop
argument_list|)
expr_stmt|;
name|PrivilegeBag
name|pBag
init|=
operator|new
name|PrivilegeBag
argument_list|(
name|privileges
argument_list|)
decl_stmt|;
name|store
operator|.
name|grantPrivileges
argument_list|(
name|pBag
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|hops
init|=
name|store
operator|.
name|listAllTableGrants
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|dbName
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"write"
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listAllTableGrants
argument_list|(
name|userNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|dbName
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"read"
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listAllTableGrants
argument_list|(
name|roleNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|dbName
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listAllTableGrants
argument_list|(
name|userNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|dbName
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listAllTableGrants
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|dbName
argument_list|,
name|tableNames
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listAllTableGrants
argument_list|(
name|userNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|dbName
argument_list|,
name|tableNames
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listTableGrantsAll
argument_list|(
name|dbName
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|sawUser
init|=
literal|false
decl_stmt|,
name|sawRole
init|=
literal|false
decl_stmt|;
for|for
control|(
name|HiveObjectPrivilege
name|h
range|:
name|hops
control|)
block|{
if|if
condition|(
name|h
operator|.
name|getPrincipalName
argument_list|()
operator|.
name|equals
argument_list|(
name|userNames
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|h
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|h
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"read"
argument_list|,
name|h
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|sawUser
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|h
operator|.
name|getPrincipalName
argument_list|()
operator|.
name|equals
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|h
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|h
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"write"
argument_list|,
name|h
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|sawRole
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sawUser
operator|&&
name|sawRole
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listPrincipalTableGrantsAll
argument_list|(
name|roleNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"write"
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listPrincipalTableGrantsAll
argument_list|(
name|userNames
index|[
literal|0
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"read"
argument_list|,
name|hops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listPrincipalDBGrantsAll
argument_list|(
name|roleNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hops
operator|=
name|store
operator|.
name|listPrincipalDBGrantsAll
argument_list|(
name|userNames
index|[
literal|1
index|]
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|store
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableNames
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|store
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|tableStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|dbname
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"statstable"
decl_stmt|;
name|String
name|boolcol
init|=
literal|"boolcol"
decl_stmt|;
name|String
name|longcol
init|=
literal|"longcol"
decl_stmt|;
name|String
name|doublecol
init|=
literal|"doublecol"
decl_stmt|;
name|String
name|stringcol
init|=
literal|"stringcol"
decl_stmt|;
name|String
name|binarycol
init|=
literal|"bincol"
decl_stmt|;
name|String
name|decimalcol
init|=
literal|"deccol"
decl_stmt|;
name|long
name|trues
init|=
literal|37
decl_stmt|;
name|long
name|falses
init|=
literal|12
decl_stmt|;
name|long
name|booleanNulls
init|=
literal|2
decl_stmt|;
name|long
name|longHigh
init|=
literal|120938479124L
decl_stmt|;
name|long
name|longLow
init|=
operator|-
literal|12341243213412124L
decl_stmt|;
name|long
name|longNulls
init|=
literal|23
decl_stmt|;
name|long
name|longDVs
init|=
literal|213L
decl_stmt|;
name|double
name|doubleHigh
init|=
literal|123423.23423
decl_stmt|;
name|double
name|doubleLow
init|=
literal|0.00001234233
decl_stmt|;
name|long
name|doubleNulls
init|=
literal|92
decl_stmt|;
name|long
name|doubleDVs
init|=
literal|1234123421L
decl_stmt|;
name|long
name|strMaxLen
init|=
literal|1234
decl_stmt|;
name|double
name|strAvgLen
init|=
literal|32.3
decl_stmt|;
name|long
name|strNulls
init|=
literal|987
decl_stmt|;
name|long
name|strDVs
init|=
literal|906
decl_stmt|;
name|long
name|binMaxLen
init|=
literal|123412987L
decl_stmt|;
name|double
name|binAvgLen
init|=
literal|76.98
decl_stmt|;
name|long
name|binNulls
init|=
literal|976998797L
decl_stmt|;
name|Decimal
name|decHigh
init|=
operator|new
name|Decimal
argument_list|()
decl_stmt|;
name|decHigh
operator|.
name|setScale
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|decHigh
operator|.
name|setUnscaled
argument_list|(
literal|"3876"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// I have no clue how this is translated, but it
comment|// doesn't matter
name|Decimal
name|decLow
init|=
operator|new
name|Decimal
argument_list|()
decl_stmt|;
name|decLow
operator|.
name|setScale
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|decLow
operator|.
name|setUnscaled
argument_list|(
literal|"38"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|decNulls
init|=
literal|13
decl_stmt|;
name|long
name|decDVs
init|=
literal|923947293L
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|boolcol
argument_list|,
literal|"boolean"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|longcol
argument_list|,
literal|"long"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|doublecol
argument_list|,
literal|"double"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|stringcol
argument_list|,
literal|"varchar(32)"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|binarycol
argument_list|,
literal|"binary"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|decimalcol
argument_list|,
literal|"decimal(5, 3)"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbname
argument_list|,
literal|"me"
argument_list|,
operator|(
name|int
operator|)
name|now
operator|/
literal|1000
argument_list|,
operator|(
name|int
operator|)
name|now
operator|/
literal|1000
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setDbName
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setIsTblLevel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// Do one column of each type
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
name|boolcol
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|BooleanColumnStatsData
name|boolData
init|=
operator|new
name|BooleanColumnStatsData
argument_list|()
decl_stmt|;
name|boolData
operator|.
name|setNumTrues
argument_list|(
name|trues
argument_list|)
expr_stmt|;
name|boolData
operator|.
name|setNumFalses
argument_list|(
name|falses
argument_list|)
expr_stmt|;
name|boolData
operator|.
name|setNumNulls
argument_list|(
name|booleanNulls
argument_list|)
expr_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
name|boolData
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|obj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
name|longcol
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ColumnStatisticsData
argument_list|()
expr_stmt|;
name|LongColumnStatsData
name|longData
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
name|longData
operator|.
name|setHighValue
argument_list|(
name|longHigh
argument_list|)
expr_stmt|;
name|longData
operator|.
name|setLowValue
argument_list|(
name|longLow
argument_list|)
expr_stmt|;
name|longData
operator|.
name|setNumNulls
argument_list|(
name|longNulls
argument_list|)
expr_stmt|;
name|longData
operator|.
name|setNumDVs
argument_list|(
name|longDVs
argument_list|)
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
name|longData
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|obj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
name|doublecol
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"double"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ColumnStatisticsData
argument_list|()
expr_stmt|;
name|DoubleColumnStatsData
name|doubleData
init|=
operator|new
name|DoubleColumnStatsData
argument_list|()
decl_stmt|;
name|doubleData
operator|.
name|setHighValue
argument_list|(
name|doubleHigh
argument_list|)
expr_stmt|;
name|doubleData
operator|.
name|setLowValue
argument_list|(
name|doubleLow
argument_list|)
expr_stmt|;
name|doubleData
operator|.
name|setNumNulls
argument_list|(
name|doubleNulls
argument_list|)
expr_stmt|;
name|doubleData
operator|.
name|setNumDVs
argument_list|(
name|doubleDVs
argument_list|)
expr_stmt|;
name|data
operator|.
name|setDoubleStats
argument_list|(
name|doubleData
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updateTableColumnStatistics
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|stats
operator|=
name|store
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbname
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|boolcol
argument_list|,
name|longcol
argument_list|,
name|doublecol
argument_list|)
argument_list|)
expr_stmt|;
comment|// We'll check all of the individual values later.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|stats
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that we can fetch just some of the columns
name|stats
operator|=
name|store
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbname
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|boolcol
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|=
operator|new
name|ColumnStatistics
argument_list|()
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|obj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
name|stringcol
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ColumnStatisticsData
argument_list|()
expr_stmt|;
name|StringColumnStatsData
name|strData
init|=
operator|new
name|StringColumnStatsData
argument_list|()
decl_stmt|;
name|strData
operator|.
name|setMaxColLen
argument_list|(
name|strMaxLen
argument_list|)
expr_stmt|;
name|strData
operator|.
name|setAvgColLen
argument_list|(
name|strAvgLen
argument_list|)
expr_stmt|;
name|strData
operator|.
name|setNumNulls
argument_list|(
name|strNulls
argument_list|)
expr_stmt|;
name|strData
operator|.
name|setNumDVs
argument_list|(
name|strDVs
argument_list|)
expr_stmt|;
name|data
operator|.
name|setStringStats
argument_list|(
name|strData
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|obj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
name|binarycol
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"binary"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ColumnStatisticsData
argument_list|()
expr_stmt|;
name|BinaryColumnStatsData
name|binData
init|=
operator|new
name|BinaryColumnStatsData
argument_list|()
decl_stmt|;
name|binData
operator|.
name|setMaxColLen
argument_list|(
name|binMaxLen
argument_list|)
expr_stmt|;
name|binData
operator|.
name|setAvgColLen
argument_list|(
name|binAvgLen
argument_list|)
expr_stmt|;
name|binData
operator|.
name|setNumNulls
argument_list|(
name|binNulls
argument_list|)
expr_stmt|;
name|data
operator|.
name|setBinaryStats
argument_list|(
name|binData
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|obj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
name|decimalcol
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"decimal(5,3)"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ColumnStatisticsData
argument_list|()
expr_stmt|;
name|DecimalColumnStatsData
name|decData
init|=
operator|new
name|DecimalColumnStatsData
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting decimal high value to "
operator|+
name|decHigh
operator|.
name|getScale
argument_list|()
operator|+
literal|"<"
operator|+
operator|new
name|String
argument_list|(
name|decHigh
operator|.
name|getUnscaled
argument_list|()
argument_list|)
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|decData
operator|.
name|setHighValue
argument_list|(
name|decHigh
argument_list|)
expr_stmt|;
name|decData
operator|.
name|setLowValue
argument_list|(
name|decLow
argument_list|)
expr_stmt|;
name|decData
operator|.
name|setNumNulls
argument_list|(
name|decNulls
argument_list|)
expr_stmt|;
name|decData
operator|.
name|setNumDVs
argument_list|(
name|decDVs
argument_list|)
expr_stmt|;
name|data
operator|.
name|setDecimalStats
argument_list|(
name|decData
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updateTableColumnStatistics
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|stats
operator|=
name|store
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbname
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|boolcol
argument_list|,
name|longcol
argument_list|,
name|doublecol
argument_list|,
name|stringcol
argument_list|,
name|binarycol
argument_list|,
name|decimalcol
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|now
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbname
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|stats
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|colData
init|=
name|stats
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|BOOLEAN_STATS
argument_list|,
name|colData
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
name|boolData
operator|=
name|colData
operator|.
name|getBooleanStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|trues
argument_list|,
name|boolData
operator|.
name|getNumTrues
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|falses
argument_list|,
name|boolData
operator|.
name|getNumFalses
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|booleanNulls
argument_list|,
name|boolData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|colData
operator|=
name|stats
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getStatsData
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|LONG_STATS
argument_list|,
name|colData
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
name|longData
operator|=
name|colData
operator|.
name|getLongStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|longHigh
argument_list|,
name|longData
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|longLow
argument_list|,
name|longData
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|longNulls
argument_list|,
name|longData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|longDVs
argument_list|,
name|longData
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|colData
operator|=
name|stats
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getStatsData
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|DOUBLE_STATS
argument_list|,
name|colData
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
name|doubleData
operator|=
name|colData
operator|.
name|getDoubleStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doubleHigh
argument_list|,
name|doubleData
operator|.
name|getHighValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doubleLow
argument_list|,
name|doubleData
operator|.
name|getLowValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doubleNulls
argument_list|,
name|doubleData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doubleDVs
argument_list|,
name|doubleData
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|colData
operator|=
name|stats
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getStatsData
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|STRING_STATS
argument_list|,
name|colData
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
name|strData
operator|=
name|colData
operator|.
name|getStringStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|strMaxLen
argument_list|,
name|strData
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|strAvgLen
argument_list|,
name|strData
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|strNulls
argument_list|,
name|strData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|strDVs
argument_list|,
name|strData
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|colData
operator|=
name|stats
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getStatsData
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|BINARY_STATS
argument_list|,
name|colData
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
name|binData
operator|=
name|colData
operator|.
name|getBinaryStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|binMaxLen
argument_list|,
name|binData
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|binAvgLen
argument_list|,
name|binData
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|binNulls
argument_list|,
name|binData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|colData
operator|=
name|stats
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getStatsData
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|DECIMAL_STATS
argument_list|,
name|colData
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
name|decData
operator|=
name|colData
operator|.
name|getDecimalStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decHigh
argument_list|,
name|decData
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decLow
argument_list|,
name|decData
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decNulls
argument_list|,
name|decData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decDVs
argument_list|,
name|decData
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|partitionStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|dbname
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"statspart"
decl_stmt|;
name|String
index|[]
name|partNames
init|=
block|{
literal|"ds=today"
block|,
literal|"ds=yesterday"
block|}
decl_stmt|;
name|String
index|[]
name|partVals
init|=
block|{
literal|"today"
block|,
literal|"yesterday"
block|}
decl_stmt|;
name|String
name|boolcol
init|=
literal|"boolcol"
decl_stmt|;
name|String
name|longcol
init|=
literal|"longcol"
decl_stmt|;
name|String
name|doublecol
init|=
literal|"doublecol"
decl_stmt|;
name|String
name|stringcol
init|=
literal|"stringcol"
decl_stmt|;
name|String
name|binarycol
init|=
literal|"bincol"
decl_stmt|;
name|String
name|decimalcol
init|=
literal|"deccol"
decl_stmt|;
name|long
name|trues
init|=
literal|37
decl_stmt|;
name|long
name|falses
init|=
literal|12
decl_stmt|;
name|long
name|booleanNulls
init|=
literal|2
decl_stmt|;
name|long
name|strMaxLen
init|=
literal|1234
decl_stmt|;
name|double
name|strAvgLen
init|=
literal|32.3
decl_stmt|;
name|long
name|strNulls
init|=
literal|987
decl_stmt|;
name|long
name|strDVs
init|=
literal|906
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|boolcol
argument_list|,
literal|"boolean"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|longcol
argument_list|,
literal|"long"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|doublecol
argument_list|,
literal|"double"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|stringcol
argument_list|,
literal|"varchar(32)"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|binarycol
argument_list|,
literal|"binary"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|decimalcol
argument_list|,
literal|"decimal(5, 3)"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbname
argument_list|,
literal|"me"
argument_list|,
operator|(
name|int
operator|)
name|now
operator|/
literal|1000
argument_list|,
operator|(
name|int
operator|)
name|now
operator|/
literal|1000
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setDbName
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setIsTblLevel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
name|partNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
name|boolcol
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|BooleanColumnStatsData
name|boolData
init|=
operator|new
name|BooleanColumnStatsData
argument_list|()
decl_stmt|;
name|boolData
operator|.
name|setNumTrues
argument_list|(
name|trues
argument_list|)
expr_stmt|;
name|boolData
operator|.
name|setNumFalses
argument_list|(
name|falses
argument_list|)
expr_stmt|;
name|boolData
operator|.
name|setNumNulls
argument_list|(
name|booleanNulls
argument_list|)
expr_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
name|boolData
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|statsList
init|=
name|store
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|dbname
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partNames
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|boolcol
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|statsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statsList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setDbName
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setIsTblLevel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
name|partNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
name|stringcol
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|StringColumnStatsData
name|strData
init|=
operator|new
name|StringColumnStatsData
argument_list|()
decl_stmt|;
name|strData
operator|.
name|setMaxColLen
argument_list|(
name|strMaxLen
argument_list|)
expr_stmt|;
name|strData
operator|.
name|setAvgColLen
argument_list|(
name|strAvgLen
argument_list|)
expr_stmt|;
name|strData
operator|.
name|setNumNulls
argument_list|(
name|strNulls
argument_list|)
expr_stmt|;
name|strData
operator|.
name|setNumDVs
argument_list|(
name|strDVs
argument_list|)
expr_stmt|;
name|data
operator|.
name|setStringStats
argument_list|(
name|strData
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Make sure when we ask for one we only get one
name|statsList
operator|=
name|store
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|dbname
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partNames
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|boolcol
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|statsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statsList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|statsList
operator|=
name|store
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|dbname
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partNames
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|boolcol
argument_list|,
name|stringcol
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|statsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|statsList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Just check one piece of the data, I don't need to check it all again
name|Assert
operator|.
name|assertEquals
argument_list|(
name|booleanNulls
argument_list|,
name|statsList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|strDVs
argument_list|,
name|statsList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

