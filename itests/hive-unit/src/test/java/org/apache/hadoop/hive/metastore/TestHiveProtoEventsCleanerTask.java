begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneOffset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveProtoEventsCleanerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveProtoEventsCleanerTask
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHiveProtoEventsCleanerTask
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
name|Path
name|baseDir
decl_stmt|;
specifier|private
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
name|SystemClock
name|clock
init|=
name|SystemClock
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
name|HiveProtoEventsCleanerTask
name|cleanerTask
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|eventsSubDirs
init|=
operator|new
name|String
index|[]
block|{
literal|"query_data"
block|,
literal|"dag_meta"
block|,
literal|"dag_data"
block|,
literal|"app_data"
block|}
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestHiveProtoEventsCleanerTask
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|tmpFolder
init|=
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_PROTO_EVENTS_BASE_PATH
argument_list|,
name|tmpFolder
operator|+
literal|"/"
operator|+
name|eventsSubDirs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setTimeVar
argument_list|(
name|hiveConf
argument_list|,
name|ConfVars
operator|.
name|HIVE_PROTO_EVENTS_TTL
argument_list|,
literal|2
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
expr_stmt|;
name|baseDir
operator|=
operator|new
name|Path
argument_list|(
name|tmpFolder
argument_list|)
expr_stmt|;
name|fs
operator|=
name|baseDir
operator|.
name|getFileSystem
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|cleanerTask
operator|=
name|JavaUtils
operator|.
name|newInstance
argument_list|(
name|HiveProtoEventsCleanerTask
operator|.
name|class
argument_list|)
expr_stmt|;
name|cleanerTask
operator|.
name|setConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the current date, using the underlying clock in UTC time.    */
specifier|private
name|LocalDate
name|getNow
parameter_list|()
block|{
comment|// Use UTC date to ensure reader date is same on all timezones.
return|return
name|LocalDateTime
operator|.
name|ofEpochSecond
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|/
literal|1000
argument_list|,
literal|0
argument_list|,
name|ZoneOffset
operator|.
name|UTC
argument_list|)
operator|.
name|toLocalDate
argument_list|()
return|;
block|}
comment|/**    * Returns the directory name for a given date.    */
specifier|public
name|String
name|getDirForDate
parameter_list|(
name|LocalDate
name|date
parameter_list|)
block|{
return|return
literal|"date="
operator|+
name|DateTimeFormatter
operator|.
name|ISO_LOCAL_DATE
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
specifier|private
name|void
name|addDatePartition
parameter_list|(
name|Path
name|basePath
parameter_list|,
name|LocalDate
name|date
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|basePath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|basePath
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|01777
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Path
name|datePtn
init|=
operator|new
name|Path
argument_list|(
name|basePath
argument_list|,
name|getDirForDate
argument_list|(
name|date
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|datePtn
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|datePtn
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|01777
argument_list|)
argument_list|)
expr_stmt|;
name|FsPermission
operator|.
name|setUMask
argument_list|(
name|hiveConf
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0066
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|partFile
init|=
operator|new
name|Path
argument_list|(
name|datePtn
argument_list|,
literal|"data"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|partFile
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
name|inRange
init|=
block|{
literal|3
block|,
literal|5
block|,
literal|2
block|,
literal|1
block|}
decl_stmt|;
comment|// Must have one entry per eventsSubDirs
name|int
index|[]
name|outRange
init|=
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|1
block|}
decl_stmt|;
comment|// Must have one entry per eventsSubDirs
name|LocalDate
name|today
init|=
name|getNow
argument_list|()
decl_stmt|;
comment|// Add partitions for the given range of dates from today to past.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inRange
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|basePath
init|=
operator|new
name|Path
argument_list|(
name|baseDir
operator|+
literal|"/"
operator|+
name|eventsSubDirs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|inRange
index|[
name|i
index|]
condition|;
name|j
operator|++
control|)
block|{
name|addDatePartition
argument_list|(
name|basePath
argument_list|,
name|today
operator|.
name|minusDays
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Run the task to cleanup
name|cleanerTask
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// Verify if the remaining partitions are not expired ones.
name|String
name|expiredPtn
init|=
name|getDirForDate
argument_list|(
name|today
operator|.
name|minusDays
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inRange
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|basePath
init|=
operator|new
name|Path
argument_list|(
name|baseDir
operator|+
literal|"/"
operator|+
name|eventsSubDirs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|basePath
argument_list|)
decl_stmt|;
comment|// If the test setup created today and if test runs tomorrow, then extra dir will be deleted.
comment|// So, checking for both cases.
name|assertTrue
argument_list|(
operator|(
name|statuses
operator|.
name|length
operator|==
name|outRange
index|[
name|i
index|]
operator|)
operator|||
operator|(
name|statuses
operator|.
name|length
operator|==
operator|(
name|outRange
index|[
name|i
index|]
operator|-
literal|1
operator|)
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|statuses
control|)
block|{
name|assertTrue
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|expiredPtn
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

