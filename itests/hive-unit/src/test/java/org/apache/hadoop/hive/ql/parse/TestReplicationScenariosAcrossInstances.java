begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|json
operator|.
name|gzip
operator|.
name|GzipJSONMessageEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|util
operator|.
name|ReplUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|repl
operator|.
name|PathBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|DependencyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
operator|.
name|CallerArguments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|InjectableBehaviourObjectStore
operator|.
name|BehaviourInjection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|repl
operator|.
name|incremental
operator|.
name|IncrementalLoadTasksBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsInAnyOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ReplChangeManager
operator|.
name|SOURCE_OF_REPLICATION
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|ErrorMsg
import|;
end_import

begin_class
specifier|public
class|class
name|TestReplicationScenariosAcrossInstances
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReplicationScenarios
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
name|WarehouseInstance
name|primary
decl_stmt|;
specifier|private
specifier|static
name|WarehouseInstance
name|replica
decl_stmt|;
specifier|private
name|String
name|primaryDbName
decl_stmt|,
name|replicatedDbName
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|conf
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|classLevelSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overrides
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|overrides
operator|.
name|put
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EVENT_MESSAGE_FACTORY
operator|.
name|getHiveName
argument_list|()
argument_list|,
name|GzipJSONMessageEncoder
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|internalBeforeClassSetup
argument_list|(
name|overrides
argument_list|,
name|TestReplicationScenarios
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|internalBeforeClassSetup
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overrides
parameter_list|,
name|Class
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.client.use.datanode.hostname"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser."
operator|+
name|Utils
operator|.
name|getUGI
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|".hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|miniDFSCluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|localOverrides
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"fs.defaultFS"
argument_list|,
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST_REPL
operator|.
name|varname
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|localOverrides
operator|.
name|putAll
argument_list|(
name|overrides
argument_list|)
expr_stmt|;
name|primary
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|localOverrides
argument_list|)
expr_stmt|;
name|replica
operator|=
operator|new
name|WarehouseInstance
argument_list|(
name|LOG
argument_list|,
name|miniDFSCluster
argument_list|,
name|localOverrides
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|classLevelTearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|primary
operator|.
name|close
argument_list|()
expr_stmt|;
name|replica
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Throwable
block|{
name|primaryDbName
operator|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_"
operator|+
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|replicatedDbName
operator|=
literal|"replicated_"
operator|+
name|primaryDbName
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|primaryDbName
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|primaryDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|replicatedDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFunctionIncrementalReplication
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|bootStrapDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootStrapDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"CREATE FUNCTION "
operator|+
name|primaryDbName
operator|+
literal|".testFunctionOne as 'hivemall.tools.string.StopwordUDF' "
operator|+
literal|"using jar  'ivy://io.github.myui:hivemall:0.4.0-2'"
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|incrementalDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incrementalDump
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW FUNCTIONS LIKE '"
operator|+
name|replicatedDbName
operator|+
literal|"*'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|replicatedDbName
operator|+
literal|".testFunctionOne"
argument_list|)
expr_stmt|;
comment|// Test the idempotent behavior of CREATE FUNCTION
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incrementalDump
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW FUNCTIONS LIKE '"
operator|+
name|replicatedDbName
operator|+
literal|"*'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|replicatedDbName
operator|+
literal|".testFunctionOne"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBootstrapReplLoadRetryAfterFailureForFunctions
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|funcName1
init|=
literal|"f1"
decl_stmt|;
name|String
name|funcName2
init|=
literal|"f2"
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"CREATE FUNCTION "
operator|+
name|primaryDbName
operator|+
literal|"."
operator|+
name|funcName1
operator|+
literal|" as 'hivemall.tools.string.StopwordUDF' "
operator|+
literal|"using jar  'ivy://io.github.myui:hivemall:0.4.0-2'"
argument_list|)
operator|.
name|run
argument_list|(
literal|"CREATE FUNCTION "
operator|+
name|primaryDbName
operator|+
literal|"."
operator|+
name|funcName2
operator|+
literal|" as 'hivemall.tools.string.SplitWordsUDF' "
operator|+
literal|"using jar  'ivy://io.github.myui:hivemall:0.4.0-1'"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Allow create function only on f1. Create should fail for the second function.
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
name|callerVerifier
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|CallerArguments
name|args
parameter_list|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|replicatedDbName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - DB: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|args
operator|.
name|funcName
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Verifier - Function: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|funcName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|args
operator|.
name|funcName
operator|.
name|equals
argument_list|(
name|funcName1
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setCallerVerifier
argument_list|(
name|callerVerifier
argument_list|)
expr_stmt|;
comment|// Trigger bootstrap dump which just creates function f1 but not f2
name|List
argument_list|<
name|String
argument_list|>
name|withConfigs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'hive.repl.approx.max.load.tasks'='1'"
argument_list|,
literal|"'hive.in.repl.test.files.sorted'='true'"
argument_list|)
decl_stmt|;
try|try
block|{
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
expr_stmt|;
name|callerVerifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|InjectableBehaviourObjectStore
operator|.
name|resetCallerVerifier
argument_list|()
expr_stmt|;
comment|// reset the behaviour
block|}
comment|// Verify that only f1 got loaded
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"null"
argument_list|)
operator|.
name|run
argument_list|(
literal|"show functions like '"
operator|+
name|replicatedDbName
operator|+
literal|"*'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|replicatedDbName
operator|+
literal|"."
operator|+
name|funcName1
argument_list|)
expr_stmt|;
comment|// Verify no calls to load f1 only f2.
name|callerVerifier
operator|=
operator|new
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|CallerArguments
name|args
parameter_list|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|replicatedDbName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - DB: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|args
operator|.
name|funcName
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Verifier - Function: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|funcName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|args
operator|.
name|funcName
operator|.
name|equals
argument_list|(
name|funcName2
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
expr_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setCallerVerifier
argument_list|(
name|callerVerifier
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Retry with same dump with which it was already loaded should resume the bootstrap load.
comment|// This time, it completes by adding just the function f2
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|callerVerifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|InjectableBehaviourObjectStore
operator|.
name|resetCallerVerifier
argument_list|()
expr_stmt|;
comment|// reset the behaviour
block|}
comment|// Verify that both the functions are available.
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"show functions like '"
operator|+
name|replicatedDbName
operator|+
literal|"*'"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
name|replicatedDbName
operator|+
literal|"."
operator|+
name|funcName1
block|,
name|replicatedDbName
operator|+
literal|"."
operator|+
name|funcName2
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropFunctionIncrementalReplication
parameter_list|()
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"CREATE FUNCTION "
operator|+
name|primaryDbName
operator|+
literal|".testFunctionAnother as 'hivemall.tools.string.StopwordUDF' "
operator|+
literal|"using jar  'ivy://io.github.myui:hivemall:0.4.0-2'"
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|bootStrapDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootStrapDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"Drop FUNCTION "
operator|+
name|primaryDbName
operator|+
literal|".testFunctionAnother "
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|incrementalDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incrementalDump
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW FUNCTIONS LIKE '*testfunctionanother*'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// Test the idempotent behavior of DROP FUNCTION
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incrementalDump
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW FUNCTIONS LIKE '*testfunctionanother*'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBootstrapFunctionReplication
parameter_list|()
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"CREATE FUNCTION "
operator|+
name|primaryDbName
operator|+
literal|".testFunction as 'hivemall.tools.string.StopwordUDF' "
operator|+
literal|"using jar  'ivy://io.github.myui:hivemall:0.4.0-2'"
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|bootStrapDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootStrapDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW FUNCTIONS LIKE '"
operator|+
name|replicatedDbName
operator|+
literal|"*'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|replicatedDbName
operator|+
literal|".testFunction"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFunctionWithFunctionBinaryJarsOnHDFS
parameter_list|()
throws|throws
name|Throwable
block|{
name|Dependencies
name|dependencies
init|=
name|dependencies
argument_list|(
literal|"ivy://io.github.myui:hivemall:0.4.0-2"
argument_list|,
name|primary
argument_list|)
decl_stmt|;
name|String
name|jarSubString
init|=
name|dependencies
operator|.
name|toJarSubSql
argument_list|()
decl_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"CREATE FUNCTION "
operator|+
name|primaryDbName
operator|+
literal|".anotherFunction as 'hivemall.tools.string.StopwordUDF' "
operator|+
literal|"using "
operator|+
name|jarSubString
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW FUNCTIONS LIKE '"
operator|+
name|replicatedDbName
operator|+
literal|"*'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|replicatedDbName
operator|+
literal|".anotherFunction"
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|fileStatuses
init|=
name|replica
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|globStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|replica
operator|.
name|functionsRoot
operator|+
literal|"/"
operator|+
name|replicatedDbName
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"/anotherfunction/*/*"
argument_list|)
argument_list|,
name|path
lambda|->
name|path
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"jar"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedDependenciesNames
init|=
name|dependencies
operator|.
name|jarNames
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|fileStatuses
operator|.
name|length
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
name|expectedDependenciesNames
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|jars
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|fileStatuses
argument_list|)
operator|.
name|map
argument_list|(
name|f
lambda|->
block|{
name|String
index|[]
name|splits
init|=
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
return|return
name|splits
index|[
name|splits
operator|.
name|length
operator|-
literal|1
index|]
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|jars
argument_list|,
name|containsInAnyOrder
argument_list|(
name|expectedDependenciesNames
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|Dependencies
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|fullQualifiedJarPaths
decl_stmt|;
name|Dependencies
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|fullQualifiedJarPaths
parameter_list|)
block|{
name|this
operator|.
name|fullQualifiedJarPaths
operator|=
name|fullQualifiedJarPaths
expr_stmt|;
block|}
specifier|private
name|String
name|toJarSubSql
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|fullQualifiedJarPaths
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|p
lambda|->
literal|"jar '"
operator|+
name|p
operator|+
literal|"'"
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|,
literal|","
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|jarNames
parameter_list|()
block|{
return|return
name|fullQualifiedJarPaths
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|p
lambda|->
block|{
name|String
index|[]
name|splits
init|=
name|p
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
return|return
name|splits
index|[
name|splits
operator|.
name|length
operator|-
literal|1
index|]
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
name|Dependencies
name|dependencies
parameter_list|(
name|String
name|ivyPath
parameter_list|,
name|WarehouseInstance
name|onWarehouse
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|SemanticException
block|{
name|List
argument_list|<
name|URI
argument_list|>
name|localUris
init|=
operator|new
name|DependencyResolver
argument_list|()
operator|.
name|downloadDependencies
argument_list|(
operator|new
name|URI
argument_list|(
name|ivyPath
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|remotePaths
init|=
name|onWarehouse
operator|.
name|copyToHDFS
argument_list|(
name|localUris
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|collect
init|=
name|remotePaths
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|r
lambda|->
block|{
try|try
block|{
return|return
name|PathBuilder
operator|.
name|fullyQualifiedHDFSUri
argument_list|(
name|r
argument_list|,
name|onWarehouse
operator|.
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Dependencies
argument_list|(
name|collect
argument_list|)
return|;
block|}
comment|/*   From the hive logs(hive.log) we can also check for the info statement   fgrep "Total Tasks" [location of hive.log]   each line indicates one run of loadTask.    */
annotation|@
name|Test
specifier|public
name|void
name|testMultipleStagesOfReplicationLoadTask
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t2 (place string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='us') values ('austin')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='france') values ('paris')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t3 (rank int)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// each table creation itself takes more than one task, give we are giving a max of 1, we should hit multiple runs.
name|replica
operator|.
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_APPROX_MAX_LOAD_TASKS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t2"
block|,
literal|"t3"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from t2 order by country"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"france"
block|,
literal|"india"
block|,
literal|"us"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParallelExecutionOfReplicationBootStrapLoad
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t2 (place string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='australia') values ('sydney')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='russia') values ('moscow')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='uk') values ('london')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='us') values ('sfo')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='france') values ('paris')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='japan') values ('tokyo')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='china') values ('hkg')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t3 (rank int)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|EXECPARALLEL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t2"
block|,
literal|"t3"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from t2"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"india"
argument_list|,
literal|"australia"
argument_list|,
literal|"russia"
argument_list|,
literal|"uk"
argument_list|,
literal|"us"
argument_list|,
literal|"france"
argument_list|,
literal|"japan"
argument_list|,
literal|"china"
argument_list|)
argument_list|)
expr_stmt|;
name|replica
operator|.
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|EXECPARALLEL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetadataBootstrapDump
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table  acid_table (key int, value int) partitioned by (load_date date) "
operator|+
literal|"clustered by(key) into 2 buckets stored as orc tblproperties ('transactional'='true')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table1 (i int, j int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table1 values (1,2)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'hive.repl.dump.metadata.only'='true'"
argument_list|)
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"acid_table"
block|,
literal|"table1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * from table1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalMetadataReplication
parameter_list|()
throws|throws
name|Throwable
block|{
comment|////////////  Bootstrap   ////////////
name|WarehouseInstance
operator|.
name|Tuple
name|bootstrapTuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table1 (i int, j int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table2 (a int, city string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table3 (i int, j int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table1 values (1,2)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'hive.repl.dump.metadata.only'='true'"
argument_list|)
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootstrapTuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"table1"
block|,
literal|"table2"
block|,
literal|"table3"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * from table1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
comment|////////////  First Incremental ////////////
name|WarehouseInstance
operator|.
name|Tuple
name|incrementalOneTuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table table1 rename to renamed_table1"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table2 partition(country='india') values (1,'mumbai') "
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table4 (i int, j int)"
argument_list|)
operator|.
name|dump
argument_list|(
literal|"repl dump "
operator|+
name|primaryDbName
operator|+
literal|" from "
operator|+
name|bootstrapTuple
operator|.
name|lastReplicationId
operator|+
literal|" to "
operator|+
name|Long
operator|.
name|parseLong
argument_list|(
name|bootstrapTuple
operator|.
name|lastReplicationId
argument_list|)
operator|+
literal|100L
operator|+
literal|" limit 100 "
operator|+
literal|"with ('hive.repl.dump.metadata.only'='true')"
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalOneTuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"renamed_table1"
block|,
literal|"table2"
block|,
literal|"table3"
block|,
literal|"table4"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * from renamed_table1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * from table2"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
comment|////////////  Second Incremental ////////////
name|WarehouseInstance
operator|.
name|Tuple
name|secondIncremental
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"alter table table2 add columns (zipcode int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table table3 change i a string"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table table3 set tblproperties('custom.property'='custom.value')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop table renamed_table1"
argument_list|)
operator|.
name|dump
argument_list|(
literal|"repl dump "
operator|+
name|primaryDbName
operator|+
literal|" from "
operator|+
name|incrementalOneTuple
operator|.
name|lastReplicationId
operator|+
literal|" with ('hive.repl.dump.metadata.only'='true')"
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|secondIncremental
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"table2"
block|,
literal|"table3"
block|,
literal|"table4"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"desc table3"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a                   \tstring              \t                    "
block|,
literal|"j                   \tint                 \t                    "
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"desc table2"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a                   \tint                 \t                    "
block|,
literal|"city                \tstring              \t                    "
block|,
literal|"country             \tstring              \t                    "
block|,
literal|"zipcode             \tint                 \t                    "
block|,
literal|"\t \t "
block|,
literal|"# Partition Information\t \t "
block|,
literal|"# col_name            \tdata_type           \tcomment             "
block|,
literal|"country             \tstring              \t                    "
block|,         }
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tblproperties table3('custom.property')"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"custom.property\tcustom.value"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonReplDBMetadataReplication
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|dbName
init|=
name|primaryDbName
operator|+
literal|"_metadata"
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|dbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table1 (i int, j int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table2 (a int, city string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table3 (i int, j int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table1 values (1,2)"
argument_list|)
operator|.
name|dump
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'hive.repl.dump.metadata.only'='true'"
argument_list|)
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"table1"
block|,
literal|"table2"
block|,
literal|"table3"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * from table1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table table1 rename to renamed_table1"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table2 partition(country='india') values (1,'mumbai') "
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table4 (i int, j int)"
argument_list|)
operator|.
name|dump
argument_list|(
name|dbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'hive.repl.dump.metadata.only'='true'"
argument_list|)
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"renamed_table1"
block|,
literal|"table2"
block|,
literal|"table3"
block|,
literal|"table4"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * from renamed_table1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * from table2"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBootStrapDumpOfWarehouse
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|randomOne
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|randomTwo
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|dbOne
init|=
name|primaryDbName
operator|+
name|randomOne
decl_stmt|;
name|String
name|dbTwo
init|=
name|primaryDbName
operator|+
name|randomTwo
decl_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"alter database default set dbproperties ('repl.source.for' = '1, 2, 3')"
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (i int, j int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|dbOne
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbOne
argument_list|)
comment|// TODO: this is wrong; this test sets up dummy txn manager and so it cannot create ACID tables.
comment|//       This used to work by accident, now this works due a test flag. The test needs to be fixed.
comment|//       Also applies for a couple more tests.
operator|.
name|run
argument_list|(
literal|"create table t1 (i int, j int) partitioned by (load_date date) "
operator|+
literal|"clustered by(i) into 2 buckets stored as orc tblproperties ('transactional'='true') "
argument_list|)
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|dbTwo
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbTwo
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (i int, j int)"
argument_list|)
operator|.
name|dump
argument_list|(
literal|"`*`"
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'hive.repl.dump.metadata.only'='true'"
argument_list|)
argument_list|)
decl_stmt|;
comment|/*       Due to the limitation that we can only have one instance of Persistence Manager Factory in a JVM       we are not able to create multiple embedded derby instances for two different MetaStore instances.     */
name|primary
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|primaryDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|dbOne
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|dbTwo
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
comment|/*        End of additional steps     */
comment|// Reset ckpt and last repl ID keys to empty set for allowing bootstrap load
name|replica
operator|.
name|run
argument_list|(
literal|"show databases"
argument_list|)
operator|.
name|verifyFailure
argument_list|(
operator|new
name|String
index|[]
block|{
name|primaryDbName
block|,
name|dbOne
block|,
name|dbTwo
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter database default set dbproperties ('hive.repl.ckpt.key'='', 'repl.last.id'='')"
argument_list|)
operator|.
name|load
argument_list|(
literal|""
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"show databases"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"default"
block|,
name|primaryDbName
block|,
name|dbOne
block|,
name|dbTwo
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbOne
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbTwo
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|}
argument_list|)
expr_stmt|;
comment|/*        Start of cleanup     */
name|replica
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|primaryDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|dbOne
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|dbTwo
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
comment|/*        End of cleanup     */
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalDumpOfWarehouse
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|randomOne
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|randomTwo
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|dbOne
init|=
name|primaryDbName
operator|+
name|randomOne
decl_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"alter database default set dbproperties ('"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1, 2, 3')"
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|bootstrapTuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (i int, j int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|dbOne
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbOne
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (i int, j int) partitioned by (load_date date) "
operator|+
literal|"clustered by(i) into 2 buckets stored as orc tblproperties ('transactional'='true') "
argument_list|)
operator|.
name|dump
argument_list|(
literal|"`*`"
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'hive.repl.dump.metadata.only'='true'"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|dbTwo
init|=
name|primaryDbName
operator|+
name|randomTwo
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|incrementalTuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|dbTwo
operator|+
literal|" WITH DBPROPERTIES ( '"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbTwo
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (i int, j int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbOne
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t2 (a int, b int)"
argument_list|)
operator|.
name|dump
argument_list|(
literal|"`*`"
argument_list|,
name|bootstrapTuple
operator|.
name|lastReplicationId
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'hive.repl.dump.metadata.only'='true'"
argument_list|)
argument_list|)
decl_stmt|;
comment|/*       Due to the limitation that we can only have one instance of Persistence Manager Factory in a JVM       we are not able to create multiple embedded derby instances for two different MetaStore instances.     */
name|primary
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|primaryDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|dbOne
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|dbTwo
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
comment|/*       End of additional steps     */
comment|// Reset ckpt and last repl ID keys to empty set for allowing bootstrap load
name|replica
operator|.
name|run
argument_list|(
literal|"show databases"
argument_list|)
operator|.
name|verifyFailure
argument_list|(
operator|new
name|String
index|[]
block|{
name|primaryDbName
block|,
name|dbOne
block|,
name|dbTwo
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter database default set dbproperties ('hive.repl.ckpt.key'='', 'repl.last.id'='')"
argument_list|)
operator|.
name|load
argument_list|(
literal|""
argument_list|,
name|bootstrapTuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"show databases"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"default"
block|,
name|primaryDbName
block|,
name|dbOne
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbOne
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|}
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
literal|""
argument_list|,
name|incrementalTuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"show databases"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"default"
block|,
name|primaryDbName
block|,
name|dbOne
block|,
name|dbTwo
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbTwo
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbOne
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t2"
block|}
argument_list|)
expr_stmt|;
comment|/*        Start of cleanup     */
name|replica
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|primaryDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|dbOne
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"drop database "
operator|+
name|dbTwo
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
comment|/*        End of cleanup     */
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplLoadFromSourceUsingWithClause
parameter_list|()
throws|throws
name|Throwable
block|{
name|HiveConf
name|replicaConf
init|=
name|replica
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|withConfigs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'hive.metastore.warehouse.dir'='"
operator|+
name|replicaConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
operator|+
literal|"'"
argument_list|,
literal|"'hive.metastore.uris'='"
operator|+
name|replicaConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|)
operator|+
literal|"'"
argument_list|,
literal|"'hive.repl.replica.functions.root.dir'='"
operator|+
name|replicaConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|REPL_FUNCTIONS_ROOT_DIR
argument_list|)
operator|+
literal|"'"
argument_list|)
decl_stmt|;
comment|////////////  Bootstrap   ////////////
name|WarehouseInstance
operator|.
name|Tuple
name|bootstrapTuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table1 (i int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table2 (id int) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table1 values (1)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Run load on primary itself
name|primary
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootstrapTuple
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|,
name|withConfigs
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootstrapTuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"table1"
block|,
literal|"table2"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * from table1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|}
argument_list|)
expr_stmt|;
comment|////////////  First Incremental ////////////
name|WarehouseInstance
operator|.
name|Tuple
name|incrementalOneTuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table table1 rename to renamed_table1"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table2 partition(country='india') values (1) "
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table2 partition(country='usa') values (2) "
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table3 (i int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table3 values(10)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create function "
operator|+
name|primaryDbName
operator|+
literal|".testFunctionOne as 'hivemall.tools.string.StopwordUDF' "
operator|+
literal|"using jar  'ivy://io.github.myui:hivemall:0.4.0-2'"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootstrapTuple
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
comment|// Run load on primary itself
name|primary
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalOneTuple
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|,
name|withConfigs
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incrementalOneTuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"renamed_table1"
block|,
literal|"table2"
block|,
literal|"table3"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * from renamed_table1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from table2 order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * from table3"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"10"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"show functions like '"
operator|+
name|replicatedDbName
operator|+
literal|"*'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|replicatedDbName
operator|+
literal|".testFunctionOne"
argument_list|)
expr_stmt|;
comment|////////////  Second Incremental ////////////
name|WarehouseInstance
operator|.
name|Tuple
name|secondIncremental
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table table2 add columns (zipcode int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table table3 set tblproperties('custom.property'='custom.value')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop table renamed_table1"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table table2 drop partition(country='usa')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"truncate table table3"
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop function "
operator|+
name|primaryDbName
operator|+
literal|".testFunctionOne "
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|incrementalOneTuple
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
comment|// Run load on primary itself
name|primary
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|secondIncremental
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|,
name|withConfigs
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|secondIncremental
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"table2"
block|,
literal|"table3"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"desc table2"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"id                  \tint                 \t                    "
block|,
literal|"country             \tstring              \t                    "
block|,
literal|"zipcode             \tint                 \t                    "
block|,
literal|"\t \t "
block|,
literal|"# Partition Information\t \t "
block|,
literal|"# col_name            \tdata_type           \tcomment             "
block|,
literal|"country             \tstring              \t                    "
block|,             }
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tblproperties table3('custom.property')"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"custom.property\tcustom.value"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from table2 order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * from table3"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
operator|.
name|run
argument_list|(
literal|"show functions like '"
operator|+
name|replicatedDbName
operator|+
literal|"*'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalReplWithEventsBatchHavingDropCreateTable
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Bootstrap dump with empty db
name|WarehouseInstance
operator|.
name|Tuple
name|bootstrapTuple
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Bootstrap load in replica
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootstrapTuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootstrapTuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
comment|// First incremental dump
name|WarehouseInstance
operator|.
name|Tuple
name|firstIncremental
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table1 (i int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table2 (id int) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table1 values (1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table2 partition(country='india') values(1)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootstrapTuple
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
comment|// Second incremental dump
name|WarehouseInstance
operator|.
name|Tuple
name|secondIncremental
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop table table1"
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop table table2"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table2 (id int) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table table2 add partition(country='india')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table table2 drop partition(country='india')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table2 partition(country='us') values(2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table1 (i int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table1 values (2)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|firstIncremental
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
comment|// First incremental load
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|firstIncremental
operator|.
name|dumpLocation
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|firstIncremental
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"table1"
block|,
literal|"table2"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * from table1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from table2 order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|}
argument_list|)
expr_stmt|;
comment|// Second incremental load
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|secondIncremental
operator|.
name|dumpLocation
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|secondIncremental
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"table1"
block|,
literal|"table2"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * from table1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"2"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from table2 order by id"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"2"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalReplWithDropAndCreateTableDifferentPartitionTypeAndInsert
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Bootstrap dump with empty db
name|WarehouseInstance
operator|.
name|Tuple
name|bootstrapTuple
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Bootstrap load in replica
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootstrapTuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootstrapTuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
comment|// First incremental dump
name|WarehouseInstance
operator|.
name|Tuple
name|firstIncremental
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table1 (id int) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table2 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table3 (id int) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table1 partition(country='india') values(1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table2 values(2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table3 partition(country='india') values(3)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootstrapTuple
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
comment|// Second incremental dump
name|WarehouseInstance
operator|.
name|Tuple
name|secondIncremental
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop table table1"
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop table table2"
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop table table3"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table1 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table1 values (10)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table2 (id int) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table2 partition(country='india') values(20)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table3 (id int) partitioned by (name string, rank int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table3 partition(name='adam', rank=100) values(30)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|firstIncremental
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
comment|// First incremental load
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|firstIncremental
operator|.
name|dumpLocation
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|firstIncremental
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from table1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * from table2"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"2"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from table3"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"3"
block|}
argument_list|)
expr_stmt|;
comment|// Second incremental load
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|secondIncremental
operator|.
name|dumpLocation
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|secondIncremental
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * from table1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"10"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from table2"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"20"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from table3"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"30"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShouldNotCreateDirectoryForNonNativeTableInDumpDirectory
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|createTableQuery
init|=
literal|"CREATE TABLE custom_serdes( serde_id bigint COMMENT 'from deserializer', name string "
operator|+
literal|"COMMENT 'from deserializer', slib string COMMENT 'from deserializer') "
operator|+
literal|"ROW FORMAT SERDE 'org.apache.hive.storage.jdbc.JdbcSerDe' "
operator|+
literal|"STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler' "
operator|+
literal|"WITH SERDEPROPERTIES ('serialization.format'='1') "
operator|+
literal|"TBLPROPERTIES ( "
operator|+
literal|"'hive.sql.database.type'='METASTORE', "
operator|+
literal|"'hive.sql.query'='SELECT \"SERDE_ID\", \"NAME\", \"SLIB\" FROM \"SERDES\"')"
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|bootstrapTuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
name|createTableQuery
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Path
name|cSerdesTableDumpLocation
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|bootstrapTuple
operator|.
name|dumpLocation
argument_list|,
name|primaryDbName
argument_list|)
argument_list|,
literal|"custom_serdes"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cSerdesTableDumpLocation
operator|.
name|getFileSystem
argument_list|(
name|primary
operator|.
name|hiveConf
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|cSerdesTableDumpLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyIfCkptSet
parameter_list|(
name|WarehouseInstance
name|wh
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|dumpDir
parameter_list|)
throws|throws
name|Exception
block|{
name|Database
name|db
init|=
name|wh
operator|.
name|getDatabase
argument_list|(
name|replicatedDbName
argument_list|)
decl_stmt|;
name|verifyIfCkptSet
argument_list|(
name|db
operator|.
name|getParameters
argument_list|()
argument_list|,
name|dumpDir
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tblNames
init|=
name|wh
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|tblNames
control|)
block|{
name|Table
name|tbl
init|=
name|wh
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|verifyIfCkptSet
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|dumpDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getPartitionKeysSize
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|wh
operator|.
name|getAllPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|ptn
range|:
name|partitions
control|)
block|{
name|verifyIfCkptSet
argument_list|(
name|ptn
operator|.
name|getParameters
argument_list|()
argument_list|,
name|dumpDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShouldDumpMetaDataForNonNativeTableIfSetMeataDataOnly
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|tableName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_table"
decl_stmt|;
name|String
name|createTableQuery
init|=
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" ( serde_id bigint COMMENT 'from deserializer', name string "
operator|+
literal|"COMMENT 'from deserializer', slib string COMMENT 'from deserializer') "
operator|+
literal|"ROW FORMAT SERDE 'org.apache.hive.storage.jdbc.JdbcSerDe' "
operator|+
literal|"STORED BY 'org.apache.hive.storage.jdbc.JdbcStorageHandler' "
operator|+
literal|"WITH SERDEPROPERTIES ('serialization.format'='1') "
operator|+
literal|"TBLPROPERTIES ( "
operator|+
literal|"'hive.sql.database.type'='METASTORE', "
operator|+
literal|"'hive.sql.query'='SELECT \"SERDE_ID\", \"NAME\", \"SLIB\" FROM \"SERDES\"')"
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|bootstrapTuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
name|createTableQuery
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'hive.repl.dump.metadata.only'='true'"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Bootstrap load in replica
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootstrapTuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootstrapTuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyIfCkptSet
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|,
name|String
name|dumpDir
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|props
operator|.
name|containsKey
argument_list|(
name|ReplUtils
operator|.
name|REPL_CHECKPOINT_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|ReplUtils
operator|.
name|REPL_CHECKPOINT_KEY
argument_list|)
operator|.
name|equals
argument_list|(
name|dumpDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyIfCkptPropMissing
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|props
operator|.
name|containsKey
argument_list|(
name|ReplUtils
operator|.
name|REPL_CHECKPOINT_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyIfSrcOfReplPropMissing
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|props
operator|.
name|containsKey
argument_list|(
name|SOURCE_OF_REPLICATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalDumpEmptyDumpDirectory
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
comment|// create events for some other database and then dump the primaryDbName to dump an empty directory.
name|String
name|testDbName
init|=
name|primaryDbName
operator|+
literal|"_test"
decl_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|" create database "
operator|+
name|testDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|testDbName
operator|+
literal|".tbl (fld int)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
comment|// Incremental load to existing database with empty dump directory should set the repl id to the last event at src.
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
comment|// Incremental load to non existing db should return database not exist error.
name|tuple
operator|=
name|primary
operator|.
name|dump
argument_list|(
literal|"someJunkDB"
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|response
init|=
name|replica
operator|.
name|runCommand
argument_list|(
literal|"REPL LOAD someJunkDB from '"
operator|+
name|tuple
operator|.
name|dumpLocation
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"org.apache.hadoop.hive.ql.exec.DDLTask. Database does not exist: someJunkDB"
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Bootstrap load from an empty dump directory should return empty load directory error.
name|tuple
operator|=
name|primary
operator|.
name|dump
argument_list|(
literal|"someJunkDB"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|response
operator|=
name|replica
operator|.
name|runCommand
argument_list|(
literal|"REPL LOAD someJunkDB from '"
operator|+
name|tuple
operator|.
name|dumpLocation
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"semanticException no data to load in path"
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|" drop database if exists "
operator|+
name|testDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalDumpMultiIteration
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|bootstrapTuple
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootstrapTuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|bootstrapTuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|incremental
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table1 (id int) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table2 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table3 (id int) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table1 partition(country='india') values(1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table2 values(2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table3 partition(country='india') values(3)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootstrapTuple
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|incremental
operator|.
name|dumpLocation
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'hive.repl.approx.max.load.tasks'='10'"
argument_list|)
argument_list|)
operator|.
name|status
argument_list|(
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|incremental
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from table1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select * from table2"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"2"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from table3"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"3"
block|}
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|IncrementalLoadTasksBuilder
operator|.
name|getNumIteration
argument_list|()
operator|>
literal|1
operator|)
assert|;
name|incremental
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table  table5 (key int, value int) partitioned by (load_date date) "
operator|+
literal|"clustered by(key) into 2 buckets stored as orc"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table table4 (i int, j int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table4 values (1,2)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|incremental
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|incremental
operator|.
name|dumpLocation
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|fileStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|int
name|numEvents
init|=
name|fileStatus
operator|.
name|length
operator|-
literal|1
decl_stmt|;
comment|//one is metadata file
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|incremental
operator|.
name|dumpLocation
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'hive.repl.approx.max.load.tasks'='1'"
argument_list|)
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"table1"
block|,
literal|"table2"
block|,
literal|"table3"
block|,
literal|"table4"
block|,
literal|"table5"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select i from table4"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|IncrementalLoadTasksBuilder
operator|.
name|getNumIteration
argument_list|()
argument_list|,
name|numEvents
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIfCkptAndSourceOfReplPropsIgnoredByReplDump
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuplePrimary
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (place string) partitioned by (country string) "
operator|+
literal|" tblproperties('custom.property'='custom.value')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Bootstrap Repl A -> B
name|WarehouseInstance
operator|.
name|Tuple
name|tupleReplica
init|=
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuplePrimary
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuplePrimary
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tblproperties t1('custom.property')"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"custom.property\tcustom.value"
block|}
argument_list|)
operator|.
name|dumpFailure
argument_list|(
name|replicatedDbName
argument_list|,
literal|null
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter database "
operator|+
name|replicatedDbName
operator|+
literal|" set dbproperties ('"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1, 2, 3')"
argument_list|)
operator|.
name|dump
argument_list|(
name|replicatedDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Bootstrap Repl B -> C
name|String
name|replDbFromReplica
init|=
name|replicatedDbName
operator|+
literal|"_dupe"
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replDbFromReplica
argument_list|,
name|tupleReplica
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replDbFromReplica
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replDbFromReplica
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tupleReplica
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from t1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"india"
argument_list|)
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tblproperties t1('custom.property')"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"custom.property\tcustom.value"
block|}
argument_list|)
expr_stmt|;
comment|// Check if DB/table/partition in C doesn't have repl.source.for props. Also ensure, ckpt property
comment|// is set to bootstrap dump location used in C.
name|Database
name|db
init|=
name|replica
operator|.
name|getDatabase
argument_list|(
name|replDbFromReplica
argument_list|)
decl_stmt|;
name|verifyIfSrcOfReplPropMissing
argument_list|(
name|db
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|verifyIfCkptSet
argument_list|(
name|db
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tupleReplica
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|Table
name|t1
init|=
name|replica
operator|.
name|getTable
argument_list|(
name|replDbFromReplica
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|verifyIfCkptSet
argument_list|(
name|t1
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tupleReplica
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|Partition
name|india
init|=
name|replica
operator|.
name|getPartition
argument_list|(
name|replDbFromReplica
argument_list|,
literal|"t1"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"india"
argument_list|)
argument_list|)
decl_stmt|;
name|verifyIfCkptSet
argument_list|(
name|india
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tupleReplica
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
comment|// Perform alters in A for incremental replication
name|WarehouseInstance
operator|.
name|Tuple
name|tuplePrimaryInc
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter database "
operator|+
name|primaryDbName
operator|+
literal|" set dbproperties('dummy_key'='dummy_val')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table t1 set tblproperties('dummy_key'='dummy_val')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table t1 partition(country='india') set fileformat orc"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuplePrimary
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
comment|// Incremental Repl A -> B with alters on db/table/partition
name|WarehouseInstance
operator|.
name|Tuple
name|tupleReplicaInc
init|=
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuplePrimaryInc
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuplePrimaryInc
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|dump
argument_list|(
name|replicatedDbName
argument_list|,
name|tupleReplica
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
comment|// Check if DB in B have ckpt property is set to bootstrap dump location used in B and missing for table/partition.
name|db
operator|=
name|replica
operator|.
name|getDatabase
argument_list|(
name|replicatedDbName
argument_list|)
expr_stmt|;
name|verifyIfCkptSet
argument_list|(
name|db
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tuplePrimary
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|t1
operator|=
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"t1"
argument_list|)
expr_stmt|;
name|verifyIfCkptPropMissing
argument_list|(
name|t1
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|india
operator|=
name|replica
operator|.
name|getPartition
argument_list|(
name|replicatedDbName
argument_list|,
literal|"t1"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"india"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyIfCkptPropMissing
argument_list|(
name|india
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
comment|// Incremental Repl B -> C with alters on db/table/partition
name|replica
operator|.
name|load
argument_list|(
name|replDbFromReplica
argument_list|,
name|tupleReplicaInc
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replDbFromReplica
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replDbFromReplica
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tupleReplicaInc
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tblproperties t1('custom.property')"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"custom.property\tcustom.value"
block|}
argument_list|)
expr_stmt|;
comment|// Check if DB/table/partition in C doesn't have repl.source.for props. Also ensure, ckpt property
comment|// in DB is set to bootstrap dump location used in C but for table/partition, it is missing.
name|db
operator|=
name|replica
operator|.
name|getDatabase
argument_list|(
name|replDbFromReplica
argument_list|)
expr_stmt|;
name|verifyIfCkptSet
argument_list|(
name|db
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tupleReplica
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|verifyIfSrcOfReplPropMissing
argument_list|(
name|db
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|t1
operator|=
name|replica
operator|.
name|getTable
argument_list|(
name|replDbFromReplica
argument_list|,
literal|"t1"
argument_list|)
expr_stmt|;
name|verifyIfCkptPropMissing
argument_list|(
name|t1
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|india
operator|=
name|replica
operator|.
name|getPartition
argument_list|(
name|replDbFromReplica
argument_list|,
literal|"t1"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"india"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyIfCkptPropMissing
argument_list|(
name|india
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|replDbFromReplica
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIfCkptPropIgnoredByExport
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuplePrimary
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (place string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Bootstrap Repl A -> B and then export table t1
name|String
name|path
init|=
literal|"hdfs:///tmp/"
operator|+
name|replicatedDbName
operator|+
literal|"/"
decl_stmt|;
name|String
name|exportPath
init|=
literal|"'"
operator|+
name|path
operator|+
literal|"1/'"
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuplePrimary
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuplePrimary
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"export table t1 to "
operator|+
name|exportPath
argument_list|)
expr_stmt|;
comment|// Check if ckpt property set in table/partition in B after bootstrap load.
name|Table
name|t1
init|=
name|replica
operator|.
name|getTable
argument_list|(
name|replicatedDbName
argument_list|,
literal|"t1"
argument_list|)
decl_stmt|;
name|verifyIfCkptSet
argument_list|(
name|t1
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tuplePrimary
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|Partition
name|india
init|=
name|replica
operator|.
name|getPartition
argument_list|(
name|replicatedDbName
argument_list|,
literal|"t1"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"india"
argument_list|)
argument_list|)
decl_stmt|;
name|verifyIfCkptSet
argument_list|(
name|india
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tuplePrimary
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
comment|// Import table t1 to C
name|String
name|importDbFromReplica
init|=
name|replicatedDbName
operator|+
literal|"_dupe"
decl_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|importDbFromReplica
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|importDbFromReplica
argument_list|)
operator|.
name|run
argument_list|(
literal|"import table t1 from "
operator|+
name|exportPath
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from t1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"india"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check if table/partition in C doesn't have ckpt property
name|t1
operator|=
name|replica
operator|.
name|getTable
argument_list|(
name|importDbFromReplica
argument_list|,
literal|"t1"
argument_list|)
expr_stmt|;
name|verifyIfCkptPropMissing
argument_list|(
name|t1
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|india
operator|=
name|replica
operator|.
name|getPartition
argument_list|(
name|importDbFromReplica
argument_list|,
literal|"t1"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"india"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyIfCkptPropMissing
argument_list|(
name|india
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|importDbFromReplica
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIfBootstrapReplLoadFailWhenRetryAfterBootstrapComplete
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (10)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t2 (place string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='uk') values ('london')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='us') values ('sfo')"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t2"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"10"
argument_list|)
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from t2 order by country"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"india"
argument_list|,
literal|"uk"
argument_list|,
literal|"us"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyIfCkptSet
argument_list|(
name|replica
argument_list|,
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple_2
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Retry with different dump should fail.
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple_2
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
comment|// Retry with same dump with which it was already loaded also fails.
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
comment|// Retry from same dump when the database is empty is also not allowed.
name|replica
operator|.
name|run
argument_list|(
literal|"drop table t1"
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop table t2"
argument_list|)
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBootstrapReplLoadRetryAfterFailureForTablesAndConstraints
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1(a string, b string, primary key (a, b) disable novalidate rely)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t2(a string, b string, foreign key (a, b) references t1(a, b) disable novalidate)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t3(a string, b string not null disable, unique (a) disable)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple2
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Need to drop the primary DB as metastore is shared by both primary/replica. So, constraints
comment|// conflict when loaded. Some issue with framework which needs to be relook into later.
name|primary
operator|.
name|run
argument_list|(
literal|"drop database if exists "
operator|+
name|primaryDbName
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
comment|// Allow create table only on t1. Create should fail for rest of the tables and hence constraints
comment|// also not loaded.
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
name|callerVerifier
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|CallerArguments
name|args
parameter_list|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|replicatedDbName
argument_list|)
operator|||
operator|(
name|args
operator|.
name|constraintTblName
operator|!=
literal|null
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - DB: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|dbName
argument_list|)
operator|+
literal|" Constraint Table: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|constraintTblName
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|args
operator|.
name|tblName
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - Table: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|tblName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|args
operator|.
name|tblName
operator|.
name|equals
argument_list|(
literal|"t1"
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setCallerVerifier
argument_list|(
name|callerVerifier
argument_list|)
expr_stmt|;
comment|// Trigger bootstrap dump which just creates table t1 and other tables (t2, t3) and constraints not loaded.
name|List
argument_list|<
name|String
argument_list|>
name|withConfigs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'hive.repl.approx.max.load.tasks'='1'"
argument_list|)
decl_stmt|;
try|try
block|{
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
expr_stmt|;
name|callerVerifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|InjectableBehaviourObjectStore
operator|.
name|resetCallerVerifier
argument_list|()
expr_stmt|;
comment|// reset the behaviour
block|}
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|replica
operator|.
name|getPrimaryKeyList
argument_list|(
name|replicatedDbName
argument_list|,
literal|"t1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|replica
operator|.
name|getUniqueConstraintList
argument_list|(
name|replicatedDbName
argument_list|,
literal|"t3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|replica
operator|.
name|getNotNullConstraintList
argument_list|(
name|replicatedDbName
argument_list|,
literal|"t3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|replica
operator|.
name|getForeignKeyList
argument_list|(
name|replicatedDbName
argument_list|,
literal|"t2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Retry with different dump should fail.
name|CommandProcessorResponse
name|ret
init|=
name|replica
operator|.
name|runCommand
argument_list|(
literal|"REPL LOAD "
operator|+
name|replicatedDbName
operator|+
literal|" FROM '"
operator|+
name|tuple2
operator|.
name|dumpLocation
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|,
name|ErrorMsg
operator|.
name|REPL_BOOTSTRAP_LOAD_PATH_NOT_VALID
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify if create table is not called on table t1 but called for t2 and t3.
comment|// Also, allow constraint creation only on t1 and t3. Foreign key creation on t2 fails.
name|callerVerifier
operator|=
operator|new
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|CallerArguments
name|args
parameter_list|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|replicatedDbName
argument_list|)
operator|||
operator|(
name|args
operator|.
name|funcName
operator|!=
literal|null
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - DB: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|dbName
argument_list|)
operator|+
literal|" Func: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|funcName
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|args
operator|.
name|constraintTblName
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - Constraint Table: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|constraintTblName
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|args
operator|.
name|constraintTblName
operator|.
name|equals
argument_list|(
literal|"t1"
argument_list|)
operator|||
name|args
operator|.
name|constraintTblName
operator|.
name|equals
argument_list|(
literal|"t3"
argument_list|)
operator|)
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
expr_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setCallerVerifier
argument_list|(
name|callerVerifier
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Retry with same dump with which it was already loaded should resume the bootstrap load.
comment|// This time, it fails when try to load the foreign key constraints. All other constraints are loaded.
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
expr_stmt|;
name|callerVerifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|InjectableBehaviourObjectStore
operator|.
name|resetCallerVerifier
argument_list|()
expr_stmt|;
comment|// reset the behaviour
block|}
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"null"
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t2"
block|,
literal|"t3"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|replica
operator|.
name|getPrimaryKeyList
argument_list|(
name|replicatedDbName
argument_list|,
literal|"t1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|replica
operator|.
name|getUniqueConstraintList
argument_list|(
name|replicatedDbName
argument_list|,
literal|"t3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|replica
operator|.
name|getNotNullConstraintList
argument_list|(
name|replicatedDbName
argument_list|,
literal|"t3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|replica
operator|.
name|getForeignKeyList
argument_list|(
name|replicatedDbName
argument_list|,
literal|"t2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify if no create table/function calls. Only add foreign key constraints on table t2.
name|callerVerifier
operator|=
operator|new
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|CallerArguments
name|args
parameter_list|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|replicatedDbName
argument_list|)
operator|||
operator|(
name|args
operator|.
name|tblName
operator|!=
literal|null
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - DB: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|dbName
argument_list|)
operator|+
literal|" Table: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|tblName
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|args
operator|.
name|constraintTblName
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - Constraint Table: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|constraintTblName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|args
operator|.
name|constraintTblName
operator|.
name|equals
argument_list|(
literal|"t2"
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
expr_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setCallerVerifier
argument_list|(
name|callerVerifier
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Retry with same dump with which it was already loaded should resume the bootstrap load.
comment|// This time, it completes by adding just foreign key constraints for table t2.
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|callerVerifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|InjectableBehaviourObjectStore
operator|.
name|resetCallerVerifier
argument_list|()
expr_stmt|;
comment|// reset the behaviour
block|}
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t2"
block|,
literal|"t3"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|replica
operator|.
name|getPrimaryKeyList
argument_list|(
name|replicatedDbName
argument_list|,
literal|"t1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|replica
operator|.
name|getUniqueConstraintList
argument_list|(
name|replicatedDbName
argument_list|,
literal|"t3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|replica
operator|.
name|getNotNullConstraintList
argument_list|(
name|replicatedDbName
argument_list|,
literal|"t3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|replica
operator|.
name|getForeignKeyList
argument_list|(
name|replicatedDbName
argument_list|,
literal|"t2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBootstrapReplLoadRetryAfterFailureForPartitions
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t2 (place string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='uk') values ('london')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='us') values ('sfo')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"CREATE FUNCTION "
operator|+
name|primaryDbName
operator|+
literal|".testFunctionOne as 'hivemall.tools.string.StopwordUDF' "
operator|+
literal|"using jar  'ivy://io.github.myui:hivemall:0.4.0-2'"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple2
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Inject a behavior where REPL LOAD failed when try to load table "t2" and partition "uk".
comment|// So, table "t2" will exist and partition "india" will exist, rest failed as operation failed.
name|BehaviourInjection
argument_list|<
name|Partition
argument_list|,
name|Partition
argument_list|>
name|getPartitionStub
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|Partition
argument_list|,
name|Partition
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Partition
name|apply
parameter_list|(
annotation|@
name|Nullable
name|Partition
name|ptn
parameter_list|)
block|{
if|if
condition|(
name|ptn
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"india"
argument_list|)
condition|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"####getPartition Stub called"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|ptn
return|;
block|}
block|}
decl_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setGetPartitionBehaviour
argument_list|(
name|getPartitionStub
argument_list|)
expr_stmt|;
comment|// Make sure that there's some order in which the objects are loaded.
name|List
argument_list|<
name|String
argument_list|>
name|withConfigs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'hive.repl.approx.max.load.tasks'='1'"
argument_list|,
literal|"'hive.in.repl.test.files.sorted'='true'"
argument_list|)
decl_stmt|;
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
expr_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|resetGetPartitionBehaviour
argument_list|()
expr_stmt|;
comment|// reset the behaviour
name|getPartitionStub
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"null"
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t2"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from t2 order by country"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"india"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Retry with different dump should fail.
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple2
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
comment|// Verify if no create table calls. Add partitions and create function calls expected.
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
name|callerVerifier
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|CallerArguments
name|args
parameter_list|)
block|{
if|if
condition|(
operator|!
name|args
operator|.
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|replicatedDbName
argument_list|)
operator|||
operator|(
name|args
operator|.
name|tblName
operator|!=
literal|null
operator|)
condition|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - DB: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|dbName
argument_list|)
operator|+
literal|" Table: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|args
operator|.
name|tblName
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setCallerVerifier
argument_list|(
name|callerVerifier
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Retry with same dump with which it was already loaded should resume the bootstrap load.
comment|// This time, it completes by adding remaining partitions and function.
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|callerVerifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|InjectableBehaviourObjectStore
operator|.
name|resetCallerVerifier
argument_list|()
expr_stmt|;
comment|// reset the behaviour
block|}
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t2"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from t2 order by country"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"india"
argument_list|,
literal|"uk"
argument_list|,
literal|"us"
argument_list|)
argument_list|)
operator|.
name|run
argument_list|(
literal|"show functions like '"
operator|+
name|replicatedDbName
operator|+
literal|"*'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|replicatedDbName
operator|+
literal|".testFunctionOne"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveOptimizationBootstrapReplLoadRetryAfterFailure
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|replicatedDbName_CM
init|=
name|replicatedDbName
operator|+
literal|"_CM"
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t2 (place string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|testMoveOptimization
argument_list|(
name|primaryDbName
argument_list|,
name|replicatedDbName
argument_list|,
name|replicatedDbName_CM
argument_list|,
literal|"t2"
argument_list|,
literal|"ADD_PARTITION"
argument_list|,
name|tuple
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveOptimizationIncrementalFailureAfterCopyReplace
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|String
argument_list|>
name|withConfigs
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'hive.repl.enable.move.optimization'='true'"
argument_list|)
decl_stmt|;
name|String
name|replicatedDbName_CM
init|=
name|replicatedDbName
operator|+
literal|"_CM"
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t2 (place string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (place string) partitioned by (country string)"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName_CM
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"alter database "
operator|+
name|replicatedDbName
operator|+
literal|" set DBPROPERTIES ('"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter database "
operator|+
name|replicatedDbName_CM
operator|+
literal|" set DBPROPERTIES ('"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert overwrite table t1 select * from t2"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|testMoveOptimization
argument_list|(
name|primaryDbName
argument_list|,
name|replicatedDbName
argument_list|,
name|replicatedDbName_CM
argument_list|,
literal|"t1"
argument_list|,
literal|"ADD_PARTITION"
argument_list|,
name|tuple
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveOptimizationIncrementalFailureAfterCopy
parameter_list|()
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|String
argument_list|>
name|withConfigs
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'hive.repl.enable.move.optimization'='true'"
argument_list|)
decl_stmt|;
name|String
name|replicatedDbName_CM
init|=
name|replicatedDbName
operator|+
literal|"_CM"
decl_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t2 (place string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"ALTER TABLE t2 ADD PARTITION (country='india')"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName_CM
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"alter database "
operator|+
name|replicatedDbName
operator|+
literal|" set DBPROPERTIES ('"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter database "
operator|+
name|replicatedDbName_CM
operator|+
literal|" set DBPROPERTIES ('"
operator|+
name|SOURCE_OF_REPLICATION
operator|+
literal|"' = '1,2,3')"
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|tuple
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|testMoveOptimization
argument_list|(
name|primaryDbName
argument_list|,
name|replicatedDbName
argument_list|,
name|replicatedDbName_CM
argument_list|,
literal|"t2"
argument_list|,
literal|"INSERT"
argument_list|,
name|tuple
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testMoveOptimization
parameter_list|(
name|String
name|primaryDb
parameter_list|,
name|String
name|replicaDb
parameter_list|,
name|String
name|replicatedDbName_CM
parameter_list|,
name|String
name|tbl
parameter_list|,
name|String
name|eventType
parameter_list|,
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
parameter_list|)
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|String
argument_list|>
name|withConfigs
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"'hive.repl.enable.move.optimization'='true'"
argument_list|)
decl_stmt|;
comment|// fail add notification for given event type.
name|BehaviourInjection
argument_list|<
name|NotificationEvent
argument_list|,
name|Boolean
argument_list|>
name|callerVerifier
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|NotificationEvent
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|NotificationEvent
name|entry
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|.
name|getEventType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|eventType
argument_list|)
operator|&&
name|entry
operator|.
name|getTableName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|tbl
argument_list|)
condition|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - DB: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getDbName
argument_list|()
argument_list|)
operator|+
literal|" Table: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|+
literal|" Event: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getEventType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setAddNotificationModifier
argument_list|(
name|callerVerifier
argument_list|)
expr_stmt|;
try|try
block|{
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicaDb
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|InjectableBehaviourObjectStore
operator|.
name|resetAddNotificationModifier
argument_list|()
expr_stmt|;
block|}
name|callerVerifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicaDb
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicaDb
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from "
operator|+
name|tbl
operator|+
literal|" where country == 'india'"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"india"
argument_list|)
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDb
argument_list|)
operator|.
name|run
argument_list|(
literal|"drop table "
operator|+
name|tbl
argument_list|)
expr_stmt|;
name|InjectableBehaviourObjectStore
operator|.
name|setAddNotificationModifier
argument_list|(
name|callerVerifier
argument_list|)
expr_stmt|;
try|try
block|{
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName_CM
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|InjectableBehaviourObjectStore
operator|.
name|resetAddNotificationModifier
argument_list|()
expr_stmt|;
block|}
name|callerVerifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName_CM
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName_CM
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from "
operator|+
name|tbl
operator|+
literal|" where country == 'india'"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"india"
argument_list|)
argument_list|)
operator|.
name|run
argument_list|(
literal|" drop database if exists "
operator|+
name|replicatedDbName_CM
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDumpExternalTableSetFalse
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t1 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t2 (place string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='us') values ('austin')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='france') values ('paris')"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't1'"
argument_list|)
operator|.
name|verifyFailure
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t1"
block|}
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't2'"
argument_list|)
operator|.
name|verifyFailure
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"t2"
block|}
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t3 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t3 values (10)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t3 values (20)"
argument_list|)
operator|.
name|dump
argument_list|(
literal|"repl dump "
operator|+
name|primaryDbName
operator|+
literal|" from "
operator|+
name|tuple
operator|.
name|lastReplicationId
operator|+
literal|" with ('hive.repl.dump.metadata.only'='true')"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't3'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"t3"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t3 where id = 10"
argument_list|)
operator|.
name|verifyFailure
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"10"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDumpExternalTableSetTrue
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t1 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (1)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values (2)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t2 (place string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='india') values ('bangalore')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='us') values ('austin')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='france') values ('paris')"
argument_list|)
operator|.
name|dump
argument_list|(
literal|"repl dump "
operator|+
name|primaryDbName
operator|+
literal|" with ('hive.repl.include.external.tables'='true')"
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't1'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"t1"
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't2'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"t2"
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from t2 where country = 'us'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"us"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from t2 where country = 'france'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"france"
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t3 (id int)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t3 values (10)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t4 as select id from t3"
argument_list|)
operator|.
name|dump
argument_list|(
literal|"repl dump "
operator|+
name|primaryDbName
operator|+
literal|" from "
operator|+
name|tuple
operator|.
name|lastReplicationId
operator|+
literal|" with ('hive.repl.include.external.tables'='true')"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't3'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"t3"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t3"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"10"
argument_list|)
operator|.
name|run
argument_list|(
literal|"select id from t4"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// Returns null as create table event doesn't list files
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDumpExternalTableWithAddPartitionEvent
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|dump
argument_list|(
literal|"repl dump "
operator|+
name|primaryDbName
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create external table t1 (place string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table t1 add partition(country='india')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"alter table t1 add partition(country='us')"
argument_list|)
operator|.
name|dump
argument_list|(
literal|"repl dump "
operator|+
name|primaryDbName
operator|+
literal|" from "
operator|+
name|tuple
operator|.
name|lastReplicationId
operator|+
literal|" with ('hive.repl.include.external.tables'='true')"
argument_list|)
expr_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"show tables like 't1'"
argument_list|)
operator|.
name|verifyResult
argument_list|(
literal|"t1"
argument_list|)
operator|.
name|run
argument_list|(
literal|"show partitions t1"
argument_list|)
operator|.
name|verifyResults
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"country=india"
block|,
literal|"country=us"
block|}
argument_list|)
expr_stmt|;
block|}
comment|// This requires the tables are loaded in a fixed sorted order.
annotation|@
name|Test
specifier|public
name|void
name|testBootstrapLoadRetryAfterFailureForAlterTable
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|tuple
init|=
name|primary
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|primaryDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t1 (place string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t1 values ('testCheck')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"create table t2 (place string) partitioned by (country string)"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='china') values ('shenzhen')"
argument_list|)
operator|.
name|run
argument_list|(
literal|"insert into table t2 partition(country='india') values ('banaglore')"
argument_list|)
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// fail setting ckpt directory property for table t1.
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
name|callerVerifier
init|=
operator|new
name|BehaviourInjection
argument_list|<
name|CallerArguments
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|CallerArguments
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|tblName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"t1"
argument_list|)
operator|&&
name|args
operator|.
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|replicatedDbName
argument_list|)
condition|)
block|{
name|injectionPathCalled
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verifier - DB : "
operator|+
name|args
operator|.
name|dbName
operator|+
literal|" TABLE : "
operator|+
name|args
operator|.
name|tblName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
comment|// Fail repl load before the ckpt proeprty is set for t1 and after it is set for t2. So in the next run, for
comment|// t2 it goes directly to partion load with no task for table tracker and for t1 it loads the table
comment|// again from start.
name|InjectableBehaviourObjectStore
operator|.
name|setAlterTableModifier
argument_list|(
name|callerVerifier
argument_list|)
expr_stmt|;
try|try
block|{
name|replica
operator|.
name|loadFailure
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|)
expr_stmt|;
name|callerVerifier
operator|.
name|assertInjectionsPerformed
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|InjectableBehaviourObjectStore
operator|.
name|resetAlterTableModifier
argument_list|()
expr_stmt|;
block|}
comment|// Retry with same dump with which it was already loaded should resume the bootstrap load. Make sure that table t1,
comment|// is loaded before t2. So that scope is set to table in first iteration for table t1. In the next iteration, it
comment|// loads only remaining partitions of t2, so that the table tracker has no tasks.
name|List
argument_list|<
name|String
argument_list|>
name|withConfigs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"'hive.in.repl.test.files.sorted'='true'"
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|tuple
operator|.
name|dumpLocation
argument_list|,
name|withConfigs
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|run
argument_list|(
literal|"repl status "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verifyResult
argument_list|(
name|tuple
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"select country from t2 order by country"
argument_list|)
operator|.
name|verifyResults
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"china"
argument_list|,
literal|"india"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

