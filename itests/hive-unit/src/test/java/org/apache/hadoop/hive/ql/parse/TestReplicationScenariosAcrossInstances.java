begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TestReplicationScenariosAcrossInstances
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestRule
name|replV1BackwardCompat
init|=
name|primary
operator|.
name|getReplivationV1CompatRule
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReplicationScenarios
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|WarehouseInstance
name|primary
decl_stmt|,
name|replica
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|classLevelSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|primary
operator|=
operator|new
name|WarehouseInstance
argument_list|()
expr_stmt|;
name|replica
operator|=
operator|new
name|WarehouseInstance
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|primaryDbName
decl_stmt|,
name|replicatedDbName
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Throwable
block|{
name|primaryDbName
operator|=
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_"
operator|+
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|replicatedDbName
operator|=
literal|"replicated_"
operator|+
name|primaryDbName
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|primaryDbName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
name|dropCommand
argument_list|(
name|primaryDbName
argument_list|)
argument_list|)
expr_stmt|;
name|replica
operator|.
name|run
argument_list|(
name|dropCommand
argument_list|(
name|replicatedDbName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|dropCommand
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
return|return
literal|"drop database if exists "
operator|+
name|dbName
operator|+
literal|" cascade "
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalFunctionReplication
parameter_list|()
throws|throws
name|Throwable
block|{
name|WarehouseInstance
operator|.
name|Tuple
name|bootStrapDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootStrapDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verify
argument_list|(
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
expr_stmt|;
name|primary
operator|.
name|run
argument_list|(
literal|"CREATE FUNCTION "
operator|+
name|primaryDbName
operator|+
literal|".testFunction as 'com.yahoo.sketches.hive.theta.DataToSketchUDAF' "
operator|+
literal|"using jar  'ivy://com.yahoo.datasketches:sketches-hive:0.8.2'"
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|incrementalDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
name|bootStrapDump
operator|.
name|lastReplicationId
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|incrementalDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"REPL STATUS "
operator|+
name|replicatedDbName
argument_list|)
operator|.
name|verify
argument_list|(
name|incrementalDump
operator|.
name|lastReplicationId
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW FUNCTIONS LIKE '"
operator|+
name|replicatedDbName
operator|+
literal|"*'"
argument_list|)
operator|.
name|verify
argument_list|(
name|replicatedDbName
operator|+
literal|".testFunction"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBootstrapFunctionReplication
parameter_list|()
throws|throws
name|Throwable
block|{
name|primary
operator|.
name|run
argument_list|(
literal|"CREATE FUNCTION "
operator|+
name|primaryDbName
operator|+
literal|".testFunction as 'com.yahoo.sketches.hive.theta.DataToSketchUDAF' "
operator|+
literal|"using jar  'ivy://com.yahoo.datasketches:sketches-hive:0.8.2'"
argument_list|)
expr_stmt|;
name|WarehouseInstance
operator|.
name|Tuple
name|bootStrapDump
init|=
name|primary
operator|.
name|dump
argument_list|(
name|primaryDbName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replica
operator|.
name|load
argument_list|(
name|replicatedDbName
argument_list|,
name|bootStrapDump
operator|.
name|dumpLocation
argument_list|)
operator|.
name|run
argument_list|(
literal|"SHOW FUNCTIONS LIKE '"
operator|+
name|replicatedDbName
operator|+
literal|"*'"
argument_list|)
operator|.
name|verify
argument_list|(
name|replicatedDbName
operator|+
literal|".testFunction"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

