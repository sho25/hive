begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
operator|.
name|MiniDFSShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This test the flag 'hive.warehouse.subdir.inherit.perms'.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|FolderPermissionBase
block|{
specifier|protected
specifier|static
name|HiveConf
name|conf
decl_stmt|;
specifier|protected
specifier|static
name|Driver
name|driver
decl_stmt|;
specifier|protected
specifier|static
name|String
name|dataFileDir
decl_stmt|;
specifier|protected
specifier|static
name|Path
name|dataFilePath
decl_stmt|;
specifier|protected
specifier|static
name|FileSystem
name|fs
decl_stmt|;
specifier|protected
specifier|static
name|Path
name|warehouseDir
decl_stmt|;
specifier|protected
specifier|static
name|Path
name|baseDfsDir
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|PathFilter
name|hiddenFileFilter
init|=
operator|new
name|PathFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|String
name|name
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|abstract
name|void
name|setPermission
parameter_list|(
name|String
name|locn
parameter_list|,
name|int
name|permIndex
parameter_list|)
throws|throws
name|Exception
function_decl|;
specifier|public
specifier|abstract
name|void
name|verifyPermission
parameter_list|(
name|String
name|locn
parameter_list|,
name|int
name|permIndex
parameter_list|)
throws|throws
name|Exception
function_decl|;
specifier|public
name|void
name|setPermission
parameter_list|(
name|String
name|locn
parameter_list|)
throws|throws
name|Exception
block|{
name|setPermission
argument_list|(
name|locn
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|verifyPermission
parameter_list|(
name|String
name|locn
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyPermission
argument_list|(
name|locn
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|baseSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSShim
name|dfs
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getMiniDfs
argument_list|(
name|conf
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|fs
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|baseDfsDir
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|,
literal|"/base"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|baseDfsDir
argument_list|)
expr_stmt|;
name|warehouseDir
operator|=
operator|new
name|Path
argument_list|(
name|baseDfsDir
argument_list|,
literal|"warehouse"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|warehouseDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|,
name|warehouseDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assuming the tests are run either in C or D drive in Windows OS!
name|dataFileDir
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"test.data.files"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"c:"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"C:"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"D:"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"d:"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|dataFilePath
operator|=
operator|new
name|Path
argument_list|(
name|dataFileDir
argument_list|,
literal|"kv1.txt"
argument_list|)
expr_stmt|;
comment|// Set up scratch directory
name|Path
name|scratchDir
init|=
operator|new
name|Path
argument_list|(
name|baseDfsDir
argument_list|,
literal|"scratchdir"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SCRATCHDIR
argument_list|,
name|scratchDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//set hive conf vars
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_WAREHOUSE_SUBDIR_INHERIT_PERMS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DYNAMICPARTITIONINGMODE
argument_list|,
literal|"nonstrict"
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|MetaStoreUtils
operator|.
name|findFreePort
argument_list|()
decl_stmt|;
name|MetaStoreUtils
operator|.
name|startMetaStore
argument_list|(
name|port
argument_list|,
name|ShimLoader
operator|.
name|getHadoopThriftAuthBridge
argument_list|()
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|=
operator|new
name|Driver
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setupDataTable
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setupDataTable
parameter_list|()
throws|throws
name|Exception
block|{
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"DROP TABLE IF EXISTS mysrc"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE TABLE mysrc (key STRING, value STRING) PARTITIONED BY (part1 string, part2 string) STORED AS TEXTFILE"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|dataFilePath
operator|+
literal|"' INTO TABLE mysrc PARTITION (part1='1',part2='1')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|dataFilePath
operator|+
literal|"' INTO TABLE mysrc PARTITION (part1='2',part2='2')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setupBeforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"USE default"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateDb
parameter_list|()
throws|throws
name|Exception
block|{
comment|//see if db inherits permission from warehouse directory.
name|String
name|testDb
init|=
literal|"mydb"
decl_stmt|;
name|String
name|tableName
init|=
literal|"createtable"
decl_stmt|;
name|setPermission
argument_list|(
name|warehouseDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|testDb
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db"
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db"
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"USE "
operator|+
name|testDb
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (key string, value string)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into table "
operator|+
name|tableName
operator|+
literal|" select key,value from default.mysrc"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db/"
operator|+
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db/"
operator|+
name|tableName
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"USE default"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|//cleanup after the test.
name|fs
operator|.
name|delete
argument_list|(
name|warehouseDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|warehouseDir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|listStatus
argument_list|(
name|warehouseDir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|setupDataTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testDb
init|=
literal|"mydb2"
decl_stmt|;
name|String
name|tableName
init|=
literal|"createtable"
decl_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|testDb
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db"
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db"
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db"
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"USE "
operator|+
name|testDb
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (key string, value string)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into table "
operator|+
name|tableName
operator|+
literal|" select key,value from default.mysrc"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db/"
operator|+
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db/"
operator|+
name|tableName
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"USE default"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertNonPartTable
parameter_list|()
throws|throws
name|Exception
block|{
comment|//case 1 is non-partitioned table.
name|String
name|tableName
init|=
literal|"nonpart"
decl_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (key string, value string)"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tableLoc
init|=
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
decl_stmt|;
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
comment|//case1A: insert into non-partitioned table.
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into table "
operator|+
name|tableName
operator|+
literal|" select key,value from mysrc"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|tableLoc
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|tableLoc
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
comment|//case1B: insert overwrite non-partitioned-table
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert overwrite table "
operator|+
name|tableName
operator|+
literal|" select key,value from mysrc"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|tableLoc
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|tableLoc
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertStaticSinglePartition
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"singlestaticpart"
decl_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (key string, value string) partitioned by (part1 string)"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
comment|//insert into test
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into table "
operator|+
name|tableName
operator|+
literal|" partition(part1='1') select key,value from mysrc where part1='1' and part2='1'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1"
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
comment|//insert overwrite test
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert overwrite table "
operator|+
name|tableName
operator|+
literal|" partition(part1='1') select key,value from mysrc where part1='1' and part2='1'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1"
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertStaticDualPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"dualstaticpart"
decl_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (key string, value string) partitioned by (part1 string, part2 string)"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
comment|//insert into test
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into table "
operator|+
name|tableName
operator|+
literal|" partition(part1='1', part2='1') select key,value from mysrc where part1='1' and part2='1'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1"
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1/part2=1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1/part2=1"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1/part2=1"
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
comment|//insert overwrite test
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1/part2=1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert overwrite table "
operator|+
name|tableName
operator|+
literal|" partition(part1='1', part2='1') select key,value from mysrc where part1='1' and part2='1'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1/part2=1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1/part2=1"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1/part2=1"
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertDualDynamicPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"dualdynamicpart"
decl_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (key string, value string) partitioned by (part1 string, part2 string)"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
comment|//Insert into test, with permission set 0.
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into table "
operator|+
name|tableName
operator|+
literal|" partition (part1,part2) select key,value,part1,part2 from mysrc"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|verifyDualPartitionTable
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//Insert overwrite test, with permission set 1.  We need reset existing partitions to 1 since the permissions
comment|//should be inherited from existing partition
name|setDualPartitionTable
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert overwrite table "
operator|+
name|tableName
operator|+
literal|" partition (part1,part2) select key,value,part1,part2 from mysrc"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|verifyDualPartitionTable
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertSingleDynamicPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"singledynamicpart"
decl_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (key string, value string) partitioned by (part1 string)"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tableLoc
init|=
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
decl_stmt|;
name|assertExistence
argument_list|(
name|tableLoc
argument_list|)
expr_stmt|;
comment|//Insert into test, with permission set 0.
name|setPermission
argument_list|(
name|tableLoc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into table "
operator|+
name|tableName
operator|+
literal|" partition (part1) select key,value,part1 from mysrc"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|verifySinglePartition
argument_list|(
name|tableLoc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//Insert overwrite test, with permission set 1. We need reset existing partitions to 1 since the permissions
comment|//should be inherited from existing partition
name|setSinglePartition
argument_list|(
name|tableLoc
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert overwrite table "
operator|+
name|tableName
operator|+
literal|" partition (part1) select key,value,part1 from mysrc"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|verifySinglePartition
argument_list|(
name|tableLoc
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//delete and re-insert using insert overwrite.  There's different code paths insert vs insert overwrite for new tables.
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"DROP TABLE "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (key string, value string) partitioned by (part1 string)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert overwrite table "
operator|+
name|tableName
operator|+
literal|" partition (part1) select key,value,part1 from mysrc"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|verifySinglePartition
argument_list|(
name|tableLoc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"alterpart"
decl_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (key string, value string) partitioned by (part1 int, part2 int, part3 int)"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into table "
operator|+
name|tableName
operator|+
literal|" partition(part1='1',part2='1',part3='1') select key,value from mysrc"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//alter partition
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table "
operator|+
name|tableName
operator|+
literal|" partition (part1='1',part2='1',part3='1') rename to partition (part1='2',part2='2',part3='2')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=2/part2=2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=2/part2=2/part3=2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=2/part2=2/part3=2"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=2/part2=2/part3=2"
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|tableName2
init|=
literal|"alterpart2"
decl_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName2
operator|+
literal|" (key string, value string) partitioned by (part1 int, part2 int, part3 int)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName2
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName2
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"alter table "
operator|+
name|tableName2
operator|+
literal|" exchange partition (part1='2',part2='2',part3='2') with table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|//alter exchange can not change base table's permission
comment|//alter exchange can only control final partition folder's permission
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName2
operator|+
literal|"/part1=2"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName2
operator|+
literal|"/part1=2/part2=2"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName2
operator|+
literal|"/part1=2/part2=2/part3=2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExternalTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"externaltable"
decl_stmt|;
name|String
name|myLocation
init|=
name|warehouseDir
operator|+
literal|"/myfolder"
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
name|myLocation
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|myLocation
argument_list|)
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|myLocation
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (key string, value string) LOCATION '"
operator|+
name|myLocation
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into table "
operator|+
name|tableName
operator|+
literal|" select key,value from mysrc"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|myLocation
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|myLocation
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadLocal
parameter_list|()
throws|throws
name|Exception
block|{
comment|//case 1 is non-partitioned table.
name|String
name|tableName
init|=
literal|"loadlocal"
decl_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (key string, value string)"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tableLoc
init|=
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
decl_stmt|;
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
comment|//case1A: load data local into non-partitioned table.
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"load data local inpath '"
operator|+
name|dataFilePath
operator|+
literal|"' into table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|tableLoc
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|tableLoc
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
comment|//case1B: load data local into overwrite non-partitioned-table
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|tableLoc
argument_list|)
control|)
block|{
name|setPermission
argument_list|(
name|child
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"load data local inpath '"
operator|+
name|dataFilePath
operator|+
literal|"' overwrite into table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|tableLoc
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|tableLoc
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//case 2 is partitioned table.
name|tableName
operator|=
literal|"loadlocalpartition"
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (key string, value string) partitioned by (part1 int, part2 int)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|tableLoc
operator|=
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
expr_stmt|;
name|assertExistence
argument_list|(
name|tableLoc
argument_list|)
expr_stmt|;
comment|//case 2A: load data local into partitioned table.
name|setPermission
argument_list|(
name|tableLoc
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|dataFilePath
operator|+
literal|"' INTO TABLE "
operator|+
name|tableName
operator|+
literal|" PARTITION (part1='1',part2='1')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|partLoc
init|=
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1/part2=1"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|partLoc
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|partLoc
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
comment|//case 2B: insert data overwrite into partitioned table. set testing table/partition folder hierarchy 1
comment|//local load overwrite just overwrite the existing partition content but not the permission
name|setPermission
argument_list|(
name|tableLoc
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|partLoc
argument_list|)
control|)
block|{
name|setPermission
argument_list|(
name|child
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"LOAD DATA LOCAL INPATH '"
operator|+
name|dataFilePath
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|tableName
operator|+
literal|" PARTITION (part1='1',part2='1')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|tableLoc
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|partLoc
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"load"
decl_stmt|;
name|String
name|location
init|=
literal|"/hdfsPath"
decl_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
name|dataFilePath
argument_list|,
operator|new
name|Path
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
comment|//case 1: load data
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (key string, value string)"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tableLoc
init|=
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
decl_stmt|;
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
comment|//case1A: load data into non-partitioned table.
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"load data inpath '"
operator|+
name|location
operator|+
literal|"' into table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|tableLoc
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|tableLoc
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
comment|//case1B: load data into overwrite non-partitioned-table
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|tableLoc
argument_list|)
control|)
block|{
name|setPermission
argument_list|(
name|child
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
name|dataFilePath
argument_list|,
operator|new
name|Path
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"load data inpath '"
operator|+
name|location
operator|+
literal|"' overwrite into table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|tableLoc
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|tableLoc
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//case 2 is partitioned table.
name|tableName
operator|=
literal|"loadpartition"
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (key string, value string) partitioned by (part1 int, part2 int)"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|tableLoc
operator|=
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
expr_stmt|;
name|assertExistence
argument_list|(
name|tableLoc
argument_list|)
expr_stmt|;
comment|//case 2A: load data into partitioned table.
name|setPermission
argument_list|(
name|tableLoc
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
name|dataFilePath
argument_list|,
operator|new
name|Path
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"LOAD DATA INPATH '"
operator|+
name|location
operator|+
literal|"' INTO TABLE "
operator|+
name|tableName
operator|+
literal|" PARTITION (part1='1',part2='1')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|partLoc
init|=
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1/part2=1"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|partLoc
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|partLoc
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
comment|//case 2B: insert data overwrite into partitioned table. set testing table/partition folder hierarchy 1
comment|//load overwrite just overwrite the existing partition content but not the permission
name|setPermission
argument_list|(
name|tableLoc
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|partLoc
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|partLoc
argument_list|)
control|)
block|{
name|setPermission
argument_list|(
name|child
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
name|dataFilePath
argument_list|,
operator|new
name|Path
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"LOAD DATA INPATH '"
operator|+
name|location
operator|+
literal|"' OVERWRITE INTO TABLE "
operator|+
name|tableName
operator|+
literal|" PARTITION (part1='1',part2='1')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|tableLoc
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|partLoc
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCtas
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testDb
init|=
literal|"ctasdb"
decl_stmt|;
name|String
name|tableName
init|=
literal|"createtable"
decl_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|testDb
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db"
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db"
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db"
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"USE "
operator|+
name|testDb
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|" as select key,value from default.mysrc"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db/"
operator|+
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db/"
operator|+
name|tableName
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"USE default"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExim
parameter_list|()
throws|throws
name|Exception
block|{
comment|//export the table to external file.
name|String
name|myLocation
init|=
name|warehouseDir
operator|+
literal|"/exim"
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
name|myLocation
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|myLocation
argument_list|)
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|myLocation
argument_list|)
expr_stmt|;
name|myLocation
operator|=
name|myLocation
operator|+
literal|"/temp"
expr_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"export table mysrc to '"
operator|+
name|myLocation
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|//check if exported data has inherited the permissions.
name|assertExistence
argument_list|(
name|myLocation
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|myLocation
argument_list|)
expr_stmt|;
name|assertExistence
argument_list|(
name|myLocation
operator|+
literal|"/part1=1/part2=1"
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|myLocation
operator|+
literal|"/part1=1/part2=1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|myLocation
operator|+
literal|"/part1=1/part2=1"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|myLocation
operator|+
literal|"/part1=1/part2=1"
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|assertExistence
argument_list|(
name|myLocation
operator|+
literal|"/part1=2/part2=2"
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|myLocation
operator|+
literal|"/part1=2/part2=2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|myLocation
operator|+
literal|"/part1=2/part2=2"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|myLocation
operator|+
literal|"/part1=2/part2=2"
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
comment|//import the table back into another database
name|String
name|testDb
init|=
literal|"eximdb"
decl_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE DATABASE "
operator|+
name|testDb
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|//use another permission for this import location, to verify that it is really set (permIndex=2)
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db"
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"USE "
operator|+
name|testDb
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"import from '"
operator|+
name|myLocation
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|//check permissions of imported, from the exported table
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db/mysrc"
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db/mysrc"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|myLocation
operator|=
name|warehouseDir
operator|+
literal|"/"
operator|+
name|testDb
operator|+
literal|".db/mysrc"
expr_stmt|;
name|assertExistence
argument_list|(
name|myLocation
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|myLocation
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertExistence
argument_list|(
name|myLocation
operator|+
literal|"/part1=1/part2=1"
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|myLocation
operator|+
literal|"/part1=1/part2=1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|myLocation
operator|+
literal|"/part1=1/part2=1"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|myLocation
operator|+
literal|"/part1=1/part2=1"
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertExistence
argument_list|(
name|myLocation
operator|+
literal|"/part1=2/part2=2"
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|myLocation
operator|+
literal|"/part1=2/part2=2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|myLocation
operator|+
literal|"/part1=2/part2=2"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|myLocation
operator|+
literal|"/part1=2/part2=2"
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests the permission to the table doesn't change after the truncation    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testTruncateTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"truncatetable"
decl_stmt|;
name|String
name|partition
init|=
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
operator|+
literal|"/part1=1"
decl_stmt|;
name|CommandProcessorResponse
name|ret
init|=
name|driver
operator|.
name|run
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (key STRING, value STRING) PARTITIONED BY (part1 INT)"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into table "
operator|+
name|tableName
operator|+
literal|" partition(part1='1') select key,value from mysrc where part1='1' and part2='1'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertExistence
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"TRUNCATE TABLE "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
name|driver
operator|.
name|run
argument_list|(
literal|"insert into table "
operator|+
name|tableName
operator|+
literal|" partition(part1='1') select key,value from mysrc where part1='1' and part2='1'"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|warehouseDir
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|assertExistence
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setSinglePartition
parameter_list|(
name|String
name|tableLoc
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|setPermission
argument_list|(
name|tableLoc
operator|+
literal|"/part1=1"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|tableLoc
operator|+
literal|"/part1=2"
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifySinglePartition
parameter_list|(
name|String
name|tableLoc
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyPermission
argument_list|(
name|tableLoc
operator|+
literal|"/part1=1"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|tableLoc
operator|+
literal|"/part1=2"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|tableLoc
operator|+
literal|"/part1=1"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|tableLoc
operator|+
literal|"/part1=1"
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|tableLoc
operator|+
literal|"/part1=2"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|tableLoc
operator|+
literal|"/part1=2"
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setDualPartitionTable
parameter_list|(
name|String
name|baseTablePath
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|setPermission
argument_list|(
name|baseTablePath
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|baseTablePath
operator|+
literal|"/part1=1"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|baseTablePath
operator|+
literal|"/part1=1/part2=1"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|baseTablePath
operator|+
literal|"/part1=2"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|baseTablePath
operator|+
literal|"/part1=2/part2=2"
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyDualPartitionTable
parameter_list|(
name|String
name|baseTablePath
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyPermission
argument_list|(
name|baseTablePath
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|baseTablePath
operator|+
literal|"/part1=1"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|baseTablePath
operator|+
literal|"/part1=1/part2=1"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|baseTablePath
operator|+
literal|"/part1=2"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|verifyPermission
argument_list|(
name|baseTablePath
operator|+
literal|"/part1=2/part2=2"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|baseTablePath
operator|+
literal|"/part1=1/part2=1"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|baseTablePath
operator|+
literal|"/part1=1/part2=1"
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|listStatus
argument_list|(
name|baseTablePath
operator|+
literal|"/part1=2/part2=2"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|child
range|:
name|listStatus
argument_list|(
name|baseTablePath
operator|+
literal|"/part1=2/part2=2"
argument_list|)
control|)
block|{
name|verifyPermission
argument_list|(
name|child
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertExistence
parameter_list|(
name|String
name|locn
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|locn
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|listStatus
parameter_list|(
name|String
name|locn
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|listStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|locn
argument_list|)
argument_list|,
name|hiddenFileFilter
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|listStatus
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

