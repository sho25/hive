begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|client
operator|.
name|builder
operator|.
name|TableBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|TestAcidTableSetup
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHiveMetaStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|HiveMetaStoreClient
name|client
decl_stmt|;
specifier|protected
specifier|static
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
expr_stmt|;
name|MetastoreConf
operator|.
name|setClass
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|EXPRESSION_PROXY_CLASS
argument_list|,
name|DefaultPartitionExpressionProxy
operator|.
name|class
argument_list|,
name|PartitionExpressionProxy
operator|.
name|class
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionalValidation
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|dbName
init|=
literal|"acidDb"
decl_stmt|;
name|silentDropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|String
name|tblName
init|=
literal|"acidTable"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|ColumnType
operator|.
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
literal|"income"
argument_list|,
name|ColumnType
operator|.
name|INT_TYPE_NAME
argument_list|)
expr_stmt|;
name|Type
name|type
init|=
name|createType
argument_list|(
literal|"Person1"
argument_list|,
name|fields
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"transactional"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|/// CREATE TABLE scenarios
comment|// Fail - No "transactional" property is specified
try|try
block|{
name|Table
name|t
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
operator|.
name|setTableParams
argument_list|(
name|params
argument_list|)
operator|.
name|setCols
argument_list|(
name|type
operator|.
name|getFields
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"'transactional' property of TBLPROPERTIES may only have value 'true': acidDb.acidTable"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Fail - "transactional" property is set to an invalid value
try|try
block|{
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"transactional"
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
operator|.
name|setTableParams
argument_list|(
name|params
argument_list|)
operator|.
name|setCols
argument_list|(
name|type
operator|.
name|getFields
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"'transactional' property of TBLPROPERTIES may only have value 'true': acidDb.acidTable"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Fail - "transactional" is set to true, but the table is not bucketed
try|try
block|{
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"transactional"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
operator|.
name|setTableParams
argument_list|(
name|params
argument_list|)
operator|.
name|setCols
argument_list|(
name|type
operator|.
name|getFields
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"The table must be stored using an ACID compliant format (such as ORC): acidDb.acidTable"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|bucketCols
operator|.
name|add
argument_list|(
literal|"income"
argument_list|)
expr_stmt|;
comment|// Fail - "transactional" is set to true, and the table is bucketed, but doesn't use ORC
try|try
block|{
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"transactional"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
operator|.
name|setTableParams
argument_list|(
name|params
argument_list|)
operator|.
name|setCols
argument_list|(
name|type
operator|.
name|getFields
argument_list|()
argument_list|)
operator|.
name|setBucketCols
argument_list|(
name|bucketCols
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"The table must be stored using an ACID compliant format (such as ORC): acidDb.acidTable"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Succeed - "transactional" is set to true, and the table is bucketed, and uses ORC
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"transactional"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
operator|.
name|setTableParams
argument_list|(
name|params
argument_list|)
operator|.
name|setCols
argument_list|(
name|type
operator|.
name|getFields
argument_list|()
argument_list|)
operator|.
name|setBucketCols
argument_list|(
name|bucketCols
argument_list|)
operator|.
name|setInputFormat
argument_list|(
literal|"org.apache.hadoop.hive.ql.io.orc.OrcInputFormat"
argument_list|)
operator|.
name|setOutputFormat
argument_list|(
literal|"org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"CREATE TABLE should succeed"
argument_list|,
literal|"true"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|hive_metastoreConstants
operator|.
name|TABLE_IS_TRANSACTIONAL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/// ALTER TABLE scenarios
comment|// Fail - trying to set "transactional" to "false" is not allowed
try|try
block|{
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"transactional"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|t
operator|=
operator|new
name|Table
argument_list|()
expr_stmt|;
name|t
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|t
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"TBLPROPERTIES with 'transactional'='true' cannot be unset: acidDb.acidTable"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Fail - trying to set "transactional" to "true" but doesn't satisfy bucketing and Input/OutputFormat requirement
try|try
block|{
name|tblName
operator|+=
literal|"1"
expr_stmt|;
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
name|t
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
operator|.
name|setCols
argument_list|(
name|type
operator|.
name|getFields
argument_list|()
argument_list|)
operator|.
name|setInputFormat
argument_list|(
literal|"org.apache.hadoop.mapred.FileInputFormat"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"transactional"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"The table must be stored using an ACID compliant format (such as ORC): acidDb.acidTable1"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Succeed - trying to set "transactional" to "true", and satisfies bucketing and Input/OutputFormat requirement
name|tblName
operator|+=
literal|"2"
expr_stmt|;
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
name|t
operator|=
operator|new
name|TableBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
operator|.
name|setCols
argument_list|(
name|type
operator|.
name|getFields
argument_list|()
argument_list|)
operator|.
name|setNumBuckets
argument_list|(
literal|1
argument_list|)
operator|.
name|setBucketCols
argument_list|(
name|bucketCols
argument_list|)
operator|.
name|setInputFormat
argument_list|(
literal|"org.apache.hadoop.hive.ql.io.orc.OrcInputFormat"
argument_list|)
operator|.
name|setOutputFormat
argument_list|(
literal|"org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat"
argument_list|)
operator|.
name|build
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"transactional"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ALTER TABLE should succeed"
argument_list|,
literal|"true"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|hive_metastoreConstants
operator|.
name|TABLE_IS_TRANSACTIONAL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|silentDropDatabase
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|TException
block|{
try|try
block|{
for|for
control|(
name|String
name|tableName
range|:
name|client
operator|.
name|getTables
argument_list|(
name|dbName
argument_list|,
literal|"*"
argument_list|)
control|)
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
decl||
name|InvalidOperationException
name|e
parameter_list|)
block|{
comment|// NOP
block|}
block|}
specifier|private
name|Type
name|createType
parameter_list|(
name|String
name|typeName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|)
throws|throws
name|Throwable
block|{
name|Type
name|typ1
init|=
operator|new
name|Type
argument_list|()
decl_stmt|;
name|typ1
operator|.
name|setName
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|typ1
operator|.
name|setFields
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fields
operator|.
name|keySet
argument_list|()
control|)
block|{
name|typ1
operator|.
name|getFields
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|fieldName
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|createType
argument_list|(
name|typ1
argument_list|)
expr_stmt|;
return|return
name|typ1
return|;
block|}
block|}
end_class

end_unit

